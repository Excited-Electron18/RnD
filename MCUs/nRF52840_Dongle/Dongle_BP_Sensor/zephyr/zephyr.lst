
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_start>:
    1000:	20005bc0 	.word	0x20005bc0
    1004:	00012829 	.word	0x00012829
    1008:	00021e85 	.word	0x00021e85
    100c:	00012815 	.word	0x00012815
    1010:	00012815 	.word	0x00012815
    1014:	00012815 	.word	0x00012815
    1018:	00012815 	.word	0x00012815
	...
    102c:	000125b1 	.word	0x000125b1
    1030:	00012815 	.word	0x00012815
    1034:	00000000 	.word	0x00000000
    1038:	0001255d 	.word	0x0001255d
    103c:	000242db 	.word	0x000242db

00001040 <_irq_vector_table>:
    1040:	00012515 00024387 00012515 00012515     .%...C...%...%..
    1050:	00012515 00012515 00012515 00012515     .%...%...%...%..
    1060:	0002434f 00012515 00012515 0002436d     OC...%...%..mC..
    1070:	00012515 00012515 00012515 00012515     .%...%...%...%..
    1080:	00012515 00012515 00012515 00012515     .%...%...%...%..
    1090:	00012515 00012515 00012515 00012515     .%...%...%...%..
    10a0:	00012515 00012515 00012515 00012515     .%...%...%...%..
    10b0:	00012515 00012515 00012515 00012515     .%...%...%...%..
    10c0:	00012515 00012515 00012515 00012515     .%...%...%...%..
    10d0:	00012515 00012515 00012515 00012515     .%...%...%...%..
    10e0:	00012515 00012515 00012515 00012515     .%...%...%...%..
    10f0:	00012515 00012515 00012515 00012515     .%...%...%...%..

Disassembly of section text:

00001100 <__aeabi_uldivmod>:
    1100:	b953      	cbnz	r3, 1118 <__aeabi_uldivmod+0x18>
    1102:	b94a      	cbnz	r2, 1118 <__aeabi_uldivmod+0x18>
    1104:	2900      	cmp	r1, #0
    1106:	bf08      	it	eq
    1108:	2800      	cmpeq	r0, #0
    110a:	bf1c      	itt	ne
    110c:	f04f 31ff 	movne.w	r1, #4294967295
    1110:	f04f 30ff 	movne.w	r0, #4294967295
    1114:	f000 b96c 	b.w	13f0 <__aeabi_idiv0>
    1118:	f1ad 0c08 	sub.w	ip, sp, #8
    111c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1120:	f000 f806 	bl	1130 <__udivmoddi4>
    1124:	f8dd e004 	ldr.w	lr, [sp, #4]
    1128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    112c:	b004      	add	sp, #16
    112e:	4770      	bx	lr

00001130 <__udivmoddi4>:
    1130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1134:	9e08      	ldr	r6, [sp, #32]
    1136:	460d      	mov	r5, r1
    1138:	4604      	mov	r4, r0
    113a:	468e      	mov	lr, r1
    113c:	2b00      	cmp	r3, #0
    113e:	f040 8082 	bne.w	1246 <__udivmoddi4+0x116>
    1142:	428a      	cmp	r2, r1
    1144:	4617      	mov	r7, r2
    1146:	d946      	bls.n	11d6 <__udivmoddi4+0xa6>
    1148:	fab2 f282 	clz	r2, r2
    114c:	b14a      	cbz	r2, 1162 <__udivmoddi4+0x32>
    114e:	f1c2 0120 	rsb	r1, r2, #32
    1152:	fa05 f302 	lsl.w	r3, r5, r2
    1156:	fa20 f101 	lsr.w	r1, r0, r1
    115a:	4097      	lsls	r7, r2
    115c:	ea41 0e03 	orr.w	lr, r1, r3
    1160:	4094      	lsls	r4, r2
    1162:	ea4f 4817 	mov.w	r8, r7, lsr #16
    1166:	0c23      	lsrs	r3, r4, #16
    1168:	fbbe fcf8 	udiv	ip, lr, r8
    116c:	b2b9      	uxth	r1, r7
    116e:	fb08 ee1c 	mls	lr, r8, ip, lr
    1172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    1176:	fb0c f001 	mul.w	r0, ip, r1
    117a:	4298      	cmp	r0, r3
    117c:	d90a      	bls.n	1194 <__udivmoddi4+0x64>
    117e:	18fb      	adds	r3, r7, r3
    1180:	f10c 35ff 	add.w	r5, ip, #4294967295
    1184:	f080 8116 	bcs.w	13b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c>
    1188:	4298      	cmp	r0, r3
    118a:	f240 8113 	bls.w	13b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c>
    118e:	f1ac 0c02 	sub.w	ip, ip, #2
    1192:	443b      	add	r3, r7
    1194:	1a1b      	subs	r3, r3, r0
    1196:	b2a4      	uxth	r4, r4
    1198:	fbb3 f0f8 	udiv	r0, r3, r8
    119c:	fb08 3310 	mls	r3, r8, r0, r3
    11a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    11a4:	fb00 f101 	mul.w	r1, r0, r1
    11a8:	42a1      	cmp	r1, r4
    11aa:	d909      	bls.n	11c0 <__udivmoddi4+0x90>
    11ac:	193c      	adds	r4, r7, r4
    11ae:	f100 33ff 	add.w	r3, r0, #4294967295
    11b2:	f080 8101 	bcs.w	13b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30>
    11b6:	42a1      	cmp	r1, r4
    11b8:	f240 80fe 	bls.w	13b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30>
    11bc:	3802      	subs	r0, #2
    11be:	443c      	add	r4, r7
    11c0:	1a64      	subs	r4, r4, r1
    11c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    11c6:	2100      	movs	r1, #0
    11c8:	b11e      	cbz	r6, 11d2 <__udivmoddi4+0xa2>
    11ca:	40d4      	lsrs	r4, r2
    11cc:	2300      	movs	r3, #0
    11ce:	e9c6 4300 	strd	r4, r3, [r6]
    11d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11d6:	b902      	cbnz	r2, 11da <__udivmoddi4+0xaa>
    11d8:	deff      	udf	#255	; 0xff
    11da:	fab2 f282 	clz	r2, r2
    11de:	2a00      	cmp	r2, #0
    11e0:	d14f      	bne.n	1282 <__udivmoddi4+0x152>
    11e2:	1bcb      	subs	r3, r1, r7
    11e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    11e8:	fa1f f887 	uxth.w	r8, r7
    11ec:	2101      	movs	r1, #1
    11ee:	fbb3 fcfe 	udiv	ip, r3, lr
    11f2:	0c25      	lsrs	r5, r4, #16
    11f4:	fb0e 331c 	mls	r3, lr, ip, r3
    11f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    11fc:	fb08 f30c 	mul.w	r3, r8, ip
    1200:	42ab      	cmp	r3, r5
    1202:	d907      	bls.n	1214 <__udivmoddi4+0xe4>
    1204:	197d      	adds	r5, r7, r5
    1206:	f10c 30ff 	add.w	r0, ip, #4294967295
    120a:	d202      	bcs.n	1212 <__udivmoddi4+0xe2>
    120c:	42ab      	cmp	r3, r5
    120e:	f200 80e7 	bhi.w	13e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58>
    1212:	4684      	mov	ip, r0
    1214:	1aed      	subs	r5, r5, r3
    1216:	b2a3      	uxth	r3, r4
    1218:	fbb5 f0fe 	udiv	r0, r5, lr
    121c:	fb0e 5510 	mls	r5, lr, r0, r5
    1220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    1224:	fb08 f800 	mul.w	r8, r8, r0
    1228:	45a0      	cmp	r8, r4
    122a:	d907      	bls.n	123c <__udivmoddi4+0x10c>
    122c:	193c      	adds	r4, r7, r4
    122e:	f100 33ff 	add.w	r3, r0, #4294967295
    1232:	d202      	bcs.n	123a <__udivmoddi4+0x10a>
    1234:	45a0      	cmp	r8, r4
    1236:	f200 80d7 	bhi.w	13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>
    123a:	4618      	mov	r0, r3
    123c:	eba4 0408 	sub.w	r4, r4, r8
    1240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1244:	e7c0      	b.n	11c8 <__udivmoddi4+0x98>
    1246:	428b      	cmp	r3, r1
    1248:	d908      	bls.n	125c <__udivmoddi4+0x12c>
    124a:	2e00      	cmp	r6, #0
    124c:	f000 80af 	beq.w	13ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x26>
    1250:	2100      	movs	r1, #0
    1252:	e9c6 0500 	strd	r0, r5, [r6]
    1256:	4608      	mov	r0, r1
    1258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    125c:	fab3 f183 	clz	r1, r3
    1260:	2900      	cmp	r1, #0
    1262:	d14b      	bne.n	12fc <__udivmoddi4+0x1cc>
    1264:	42ab      	cmp	r3, r5
    1266:	d302      	bcc.n	126e <__udivmoddi4+0x13e>
    1268:	4282      	cmp	r2, r0
    126a:	f200 80b7 	bhi.w	13dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54>
    126e:	1a84      	subs	r4, r0, r2
    1270:	eb65 0303 	sbc.w	r3, r5, r3
    1274:	2001      	movs	r0, #1
    1276:	469e      	mov	lr, r3
    1278:	2e00      	cmp	r6, #0
    127a:	d0aa      	beq.n	11d2 <__udivmoddi4+0xa2>
    127c:	e9c6 4e00 	strd	r4, lr, [r6]
    1280:	e7a7      	b.n	11d2 <__udivmoddi4+0xa2>
    1282:	f1c2 0c20 	rsb	ip, r2, #32
    1286:	fa01 f302 	lsl.w	r3, r1, r2
    128a:	4097      	lsls	r7, r2
    128c:	fa20 f00c 	lsr.w	r0, r0, ip
    1290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1294:	fa21 fc0c 	lsr.w	ip, r1, ip
    1298:	4318      	orrs	r0, r3
    129a:	fbbc f1fe 	udiv	r1, ip, lr
    129e:	0c05      	lsrs	r5, r0, #16
    12a0:	fb0e cc11 	mls	ip, lr, r1, ip
    12a4:	fa1f f887 	uxth.w	r8, r7
    12a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    12ac:	fb01 f308 	mul.w	r3, r1, r8
    12b0:	42ab      	cmp	r3, r5
    12b2:	fa04 f402 	lsl.w	r4, r4, r2
    12b6:	d909      	bls.n	12cc <__udivmoddi4+0x19c>
    12b8:	197d      	adds	r5, r7, r5
    12ba:	f101 3cff 	add.w	ip, r1, #4294967295
    12be:	f080 808b 	bcs.w	13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>
    12c2:	42ab      	cmp	r3, r5
    12c4:	f240 8088 	bls.w	13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>
    12c8:	3902      	subs	r1, #2
    12ca:	443d      	add	r5, r7
    12cc:	1aeb      	subs	r3, r5, r3
    12ce:	b285      	uxth	r5, r0
    12d0:	fbb3 f0fe 	udiv	r0, r3, lr
    12d4:	fb0e 3310 	mls	r3, lr, r0, r3
    12d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    12dc:	fb00 f308 	mul.w	r3, r0, r8
    12e0:	42ab      	cmp	r3, r5
    12e2:	d907      	bls.n	12f4 <__udivmoddi4+0x1c4>
    12e4:	197d      	adds	r5, r7, r5
    12e6:	f100 3cff 	add.w	ip, r0, #4294967295
    12ea:	d271      	bcs.n	13d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48>
    12ec:	42ab      	cmp	r3, r5
    12ee:	d96f      	bls.n	13d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48>
    12f0:	3802      	subs	r0, #2
    12f2:	443d      	add	r5, r7
    12f4:	1aeb      	subs	r3, r5, r3
    12f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    12fa:	e778      	b.n	11ee <__udivmoddi4+0xbe>
    12fc:	f1c1 0c20 	rsb	ip, r1, #32
    1300:	408b      	lsls	r3, r1
    1302:	fa22 f70c 	lsr.w	r7, r2, ip
    1306:	431f      	orrs	r7, r3
    1308:	fa20 f40c 	lsr.w	r4, r0, ip
    130c:	fa05 f301 	lsl.w	r3, r5, r1
    1310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1314:	fa25 f50c 	lsr.w	r5, r5, ip
    1318:	431c      	orrs	r4, r3
    131a:	0c23      	lsrs	r3, r4, #16
    131c:	fbb5 f9fe 	udiv	r9, r5, lr
    1320:	fa1f f887 	uxth.w	r8, r7
    1324:	fb0e 5519 	mls	r5, lr, r9, r5
    1328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    132c:	fb09 fa08 	mul.w	sl, r9, r8
    1330:	45aa      	cmp	sl, r5
    1332:	fa02 f201 	lsl.w	r2, r2, r1
    1336:	fa00 f301 	lsl.w	r3, r0, r1
    133a:	d908      	bls.n	134e <__udivmoddi4+0x21e>
    133c:	197d      	adds	r5, r7, r5
    133e:	f109 30ff 	add.w	r0, r9, #4294967295
    1342:	d247      	bcs.n	13d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c>
    1344:	45aa      	cmp	sl, r5
    1346:	d945      	bls.n	13d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c>
    1348:	f1a9 0902 	sub.w	r9, r9, #2
    134c:	443d      	add	r5, r7
    134e:	eba5 050a 	sub.w	r5, r5, sl
    1352:	b2a4      	uxth	r4, r4
    1354:	fbb5 f0fe 	udiv	r0, r5, lr
    1358:	fb0e 5510 	mls	r5, lr, r0, r5
    135c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    1360:	fb00 f808 	mul.w	r8, r0, r8
    1364:	45a0      	cmp	r8, r4
    1366:	d907      	bls.n	1378 <__udivmoddi4+0x248>
    1368:	193c      	adds	r4, r7, r4
    136a:	f100 35ff 	add.w	r5, r0, #4294967295
    136e:	d22d      	bcs.n	13cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44>
    1370:	45a0      	cmp	r8, r4
    1372:	d92b      	bls.n	13cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44>
    1374:	3802      	subs	r0, #2
    1376:	443c      	add	r4, r7
    1378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    137c:	eba4 0408 	sub.w	r4, r4, r8
    1380:	fba0 8902 	umull	r8, r9, r0, r2
    1384:	454c      	cmp	r4, r9
    1386:	46c6      	mov	lr, r8
    1388:	464d      	mov	r5, r9
    138a:	d319      	bcc.n	13c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38>
    138c:	d016      	beq.n	13bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x34>
    138e:	b15e      	cbz	r6, 13a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20>
    1390:	ebb3 020e 	subs.w	r2, r3, lr
    1394:	eb64 0405 	sbc.w	r4, r4, r5
    1398:	fa04 fc0c 	lsl.w	ip, r4, ip
    139c:	40ca      	lsrs	r2, r1
    139e:	ea4c 0202 	orr.w	r2, ip, r2
    13a2:	40cc      	lsrs	r4, r1
    13a4:	e9c6 2400 	strd	r2, r4, [r6]
    13a8:	2100      	movs	r1, #0
    13aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13ae:	4631      	mov	r1, r6
    13b0:	4630      	mov	r0, r6
    13b2:	e70e      	b.n	11d2 <__udivmoddi4+0xa2>
    13b4:	46ac      	mov	ip, r5
    13b6:	e6ed      	b.n	1194 <__udivmoddi4+0x64>
    13b8:	4618      	mov	r0, r3
    13ba:	e701      	b.n	11c0 <__udivmoddi4+0x90>
    13bc:	4543      	cmp	r3, r8
    13be:	d2e6      	bcs.n	138e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6>
    13c0:	ebb8 0e02 	subs.w	lr, r8, r2
    13c4:	eb69 0507 	sbc.w	r5, r9, r7
    13c8:	3801      	subs	r0, #1
    13ca:	e7e0      	b.n	138e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6>
    13cc:	4628      	mov	r0, r5
    13ce:	e7d3      	b.n	1378 <__udivmoddi4+0x248>
    13d0:	4660      	mov	r0, ip
    13d2:	e78f      	b.n	12f4 <__udivmoddi4+0x1c4>
    13d4:	4681      	mov	r9, r0
    13d6:	e7ba      	b.n	134e <__udivmoddi4+0x21e>
    13d8:	4661      	mov	r1, ip
    13da:	e777      	b.n	12cc <__udivmoddi4+0x19c>
    13dc:	4608      	mov	r0, r1
    13de:	e74b      	b.n	1278 <__udivmoddi4+0x148>
    13e0:	f1ac 0c02 	sub.w	ip, ip, #2
    13e4:	443d      	add	r5, r7
    13e6:	e715      	b.n	1214 <__udivmoddi4+0xe4>
    13e8:	3802      	subs	r0, #2
    13ea:	443c      	add	r4, r7
    13ec:	e726      	b.n	123c <__udivmoddi4+0x10c>
    13ee:	bf00      	nop

000013f0 <__aeabi_idiv0>:
    13f0:	4770      	bx	lr
    13f2:	bf00      	nop

000013f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
    13f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13f6:	4615      	mov	r5, r2
    13f8:	4a0a      	ldr	r2, [pc, #40]	; (1424 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
    13fa:	461c      	mov	r4, r3
    13fc:	6856      	ldr	r6, [r2, #4]
    13fe:	b12e      	cbz	r6, 140c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
    1400:	b001      	add	sp, #4
    1402:	462a      	mov	r2, r5
    1404:	46b4      	mov	ip, r6
    1406:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    140a:	4760      	bx	ip
    140c:	2000      	movs	r0, #0
    140e:	f88d 0000 	strb.w	r0, [sp]
    1412:	4668      	mov	r0, sp
    1414:	f00b f8f8 	bl	c608 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
    1418:	f89d 0000 	ldrb.w	r0, [sp]
    141c:	1a28      	subs	r0, r5, r0
    141e:	7020      	strb	r0, [r4, #0]
    1420:	2000      	movs	r0, #0
    1422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1424:	20000000 	.word	0x20000000

00001428 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    1428:	4801      	ldr	r0, [pc, #4]	; (1430 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    142a:	7800      	ldrb	r0, [r0, #0]
    142c:	4770      	bx	lr
    142e:	0000      	.short	0x0000
    1430:	20000008 	.word	0x20000008

00001434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    1434:	4905      	ldr	r1, [pc, #20]	; (144c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    1436:	780a      	ldrb	r2, [r1, #0]
    1438:	4290      	cmp	r0, r2
    143a:	d301      	bcc.n	1440 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    143c:	2000      	movs	r0, #0
    143e:	4770      	bx	lr
    1440:	6849      	ldr	r1, [r1, #4]
    1442:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    1446:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    144a:	4770      	bx	lr
    144c:	20000008 	.word	0x20000008
    1450:	b570      	push	{r4, r5, r6, lr}
    1452:	4605      	mov	r5, r0
    1454:	2a20      	cmp	r2, #32
    1456:	d027      	beq.n	14a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
    1458:	4819      	ldr	r0, [pc, #100]	; (14c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
    145a:	4c1a      	ldr	r4, [pc, #104]	; (14c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
    145c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    1460:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    1464:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1468:	2920      	cmp	r1, #32
    146a:	d022      	beq.n	14b2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
    146c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    1470:	7840      	ldrb	r0, [r0, #1]
    1472:	784c      	ldrb	r4, [r1, #1]
    1474:	7048      	strb	r0, [r1, #1]
    1476:	4620      	mov	r0, r4
    1478:	4601      	mov	r1, r0
    147a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    147e:	4291      	cmp	r1, r2
    1480:	7005      	strb	r5, [r0, #0]
    1482:	7840      	ldrb	r0, [r0, #1]
    1484:	d1f8      	bne.n	1478 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
    1486:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    148a:	2a20      	cmp	r2, #32
    148c:	bf1a      	itte	ne
    148e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    1492:	7054      	strbne	r4, [r2, #1]
    1494:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    1498:	2220      	movs	r2, #32
    149a:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    149e:	f88c 2001 	strb.w	r2, [ip, #1]
    14a2:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    14a6:	bd70      	pop	{r4, r5, r6, pc}
    14a8:	f240 217e 	movw	r1, #638	; 0x27e
    14ac:	2070      	movs	r0, #112	; 0x70
    14ae:	f003 f93b 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14b2:	f893 4020 	ldrb.w	r4, [r3, #32]
    14b6:	7840      	ldrb	r0, [r0, #1]
    14b8:	f883 0020 	strb.w	r0, [r3, #32]
    14bc:	e7db      	b.n	1476 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
    14be:	0000      	.short	0x0000
    14c0:	20000dbc 	.word	0x20000dbc
    14c4:	20000e3c 	.word	0x20000e3c
    14c8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14cc:	b085      	sub	sp, #20
    14ce:	4615      	mov	r5, r2
    14d0:	460c      	mov	r4, r1
    14d2:	f002 f8e1 	bl	3698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    14d6:	4428      	add	r0, r5
    14d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    14dc:	9002      	str	r0, [sp, #8]
    14de:	6821      	ldr	r1, [r4, #0]
    14e0:	1a08      	subs	r0, r1, r0
    14e2:	0200      	lsls	r0, r0, #8
    14e4:	17c1      	asrs	r1, r0, #31
    14e6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    14ea:	1200      	asrs	r0, r0, #8
    14ec:	2800      	cmp	r0, #0
    14ee:	f300 80d5 	bgt.w	169c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x268>
    14f2:	48ac      	ldr	r0, [pc, #688]	; (17a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x370>)
    14f4:	9f08      	ldr	r7, [sp, #32]
    14f6:	4eac      	ldr	r6, [pc, #688]	; (17a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x374>)
    14f8:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    14fc:	9003      	str	r0, [sp, #12]
    14fe:	f890 5020 	ldrb.w	r5, [r0, #32]
    1502:	2020      	movs	r0, #32
    1504:	46e9      	mov	r9, sp
    1506:	f10d 0804 	add.w	r8, sp, #4
    150a:	f88d 0000 	strb.w	r0, [sp]
    150e:	f506 7a40 	add.w	sl, r6, #768	; 0x300
    1512:	2d20      	cmp	r5, #32
    1514:	bf18      	it	ne
    1516:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
    151a:	d025      	beq.n	1568 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    151c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1520:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1524:	6822      	ldr	r2, [r4, #0]
    1526:	68c1      	ldr	r1, [r0, #12]
    1528:	1a51      	subs	r1, r2, r1
    152a:	0209      	lsls	r1, r1, #8
    152c:	17ca      	asrs	r2, r1, #31
    152e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1532:	3008      	adds	r0, #8
    1534:	1209      	asrs	r1, r1, #8
    1536:	d417      	bmi.n	1568 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    1538:	8961      	ldrh	r1, [r4, #10]
    153a:	b171      	cbz	r1, 155a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    153c:	8941      	ldrh	r1, [r0, #10]
    153e:	b961      	cbnz	r1, 155a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    1540:	f000 fdba 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    1544:	f002 f8a8 	bl	3698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1548:	6821      	ldr	r1, [r4, #0]
    154a:	1a08      	subs	r0, r1, r0
    154c:	0200      	lsls	r0, r0, #8
    154e:	17c1      	asrs	r1, r0, #31
    1550:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1554:	1200      	asrs	r0, r0, #8
    1556:	2833      	cmp	r0, #51	; 0x33
    1558:	db06      	blt.n	1568 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    155a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    155e:	f889 5000 	strb.w	r5, [r9]
    1562:	7845      	ldrb	r5, [r0, #1]
    1564:	2d20      	cmp	r5, #32
    1566:	d1d9      	bne.n	151c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe8>
    1568:	f899 0000 	ldrb.w	r0, [r9]
    156c:	f888 0000 	strb.w	r0, [r8]
    1570:	46a1      	mov	r9, r4
    1572:	2d20      	cmp	r5, #32
    1574:	bf1c      	itt	ne
    1576:	488d      	ldrne	r0, [pc, #564]	; (17ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    1578:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    157c:	f000 810e 	beq.w	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1580:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1584:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
    1588:	f8d9 2004 	ldr.w	r2, [r9, #4]
    158c:	f8da 1008 	ldr.w	r1, [sl, #8]
    1590:	4648      	mov	r0, r9
    1592:	1a89      	subs	r1, r1, r2
    1594:	0209      	lsls	r1, r1, #8
    1596:	17ca      	asrs	r2, r1, #31
    1598:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    159c:	f10a 0708 	add.w	r7, sl, #8
    15a0:	1209      	asrs	r1, r1, #8
    15a2:	d415      	bmi.n	15d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x19c>
    15a4:	8979      	ldrh	r1, [r7, #10]
    15a6:	2900      	cmp	r1, #0
    15a8:	f000 80f8 	beq.w	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    15ac:	8941      	ldrh	r1, [r0, #10]
    15ae:	2900      	cmp	r1, #0
    15b0:	f040 80f4 	bne.w	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    15b4:	f000 fd80 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    15b8:	f002 f86e 	bl	3698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    15bc:	6839      	ldr	r1, [r7, #0]
    15be:	1a08      	subs	r0, r1, r0
    15c0:	0200      	lsls	r0, r0, #8
    15c2:	17c1      	asrs	r1, r0, #31
    15c4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    15c8:	1200      	asrs	r0, r0, #8
    15ca:	2833      	cmp	r0, #51	; 0x33
    15cc:	f280 80e6 	bge.w	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    15d0:	f888 5000 	strb.w	r5, [r8]
    15d4:	f89a 1014 	ldrb.w	r1, [sl, #20]
    15d8:	f899 000c 	ldrb.w	r0, [r9, #12]
    15dc:	4281      	cmp	r1, r0
    15de:	d906      	bls.n	15ee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    15e0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    15e4:	7845      	ldrb	r5, [r0, #1]
    15e6:	2d20      	cmp	r5, #32
    15e8:	d1ca      	bne.n	1580 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14c>
    15ea:	f000 b8d7 	b.w	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    15ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
    15f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    15f6:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
    15fa:	8a68      	ldrh	r0, [r5, #18]
    15fc:	68ef      	ldr	r7, [r5, #12]
    15fe:	2800      	cmp	r0, #0
    1600:	d143      	bne.n	168a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    1602:	8960      	ldrh	r0, [r4, #10]
    1604:	b3e8      	cbz	r0, 1682 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x24e>
    1606:	68a8      	ldr	r0, [r5, #8]
    1608:	f00b f81e 	bl	c648 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    160c:	8a69      	ldrh	r1, [r5, #18]
    160e:	7c2a      	ldrb	r2, [r5, #16]
    1610:	4b67      	ldr	r3, [pc, #412]	; (17b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x37c>)
    1612:	4411      	add	r1, r2
    1614:	1c49      	adds	r1, r1, #1
    1616:	1842      	adds	r2, r0, r1
    1618:	4298      	cmp	r0, r3
    161a:	d904      	bls.n	1626 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f2>
    161c:	f240 6109 	movw	r1, #1545	; 0x609
    1620:	2070      	movs	r0, #112	; 0x70
    1622:	f003 f881 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1626:	4863      	ldr	r0, [pc, #396]	; (17b4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x380>)
    1628:	4281      	cmp	r1, r0
    162a:	dd04      	ble.n	1636 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x202>
    162c:	f240 610a 	movw	r1, #1546	; 0x60a
    1630:	2070      	movs	r0, #112	; 0x70
    1632:	f003 f879 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1636:	4860      	ldr	r0, [pc, #384]	; (17b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x384>)
    1638:	4281      	cmp	r1, r0
    163a:	da04      	bge.n	1646 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x212>
    163c:	f240 610b 	movw	r1, #1547	; 0x60b
    1640:	2070      	movs	r0, #112	; 0x70
    1642:	f003 f871 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1646:	485d      	ldr	r0, [pc, #372]	; (17bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x388>)
    1648:	4290      	cmp	r0, r2
    164a:	bfdc      	itt	le
    164c:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1650:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1654:	dd05      	ble.n	1662 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x22e>
    1656:	2a00      	cmp	r2, #0
    1658:	bfbc      	itt	lt
    165a:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    165e:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1662:	4610      	mov	r0, r2
    1664:	f002 f818 	bl	3698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1668:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    166c:	1a78      	subs	r0, r7, r1
    166e:	0200      	lsls	r0, r0, #8
    1670:	17c2      	asrs	r2, r0, #31
    1672:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1676:	1200      	asrs	r0, r0, #8
    1678:	2833      	cmp	r0, #51	; 0x33
    167a:	bfb8      	it	lt
    167c:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
    1680:	e000      	b.n	1684 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x250>
    1682:	e002      	b.n	168a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    1684:	bfb8      	it	lt
    1686:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
    168a:	9802      	ldr	r0, [sp, #8]
    168c:	1a38      	subs	r0, r7, r0
    168e:	0200      	lsls	r0, r0, #8
    1690:	17c1      	asrs	r1, r0, #31
    1692:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1696:	1200      	asrs	r0, r0, #8
    1698:	2800      	cmp	r0, #0
    169a:	dd03      	ble.n	16a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x270>
    169c:	b009      	add	sp, #36	; 0x24
    169e:	2000      	movs	r0, #0
    16a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16a4:	e9d4 1000 	ldrd	r1, r0, [r4]
    16a8:	1a40      	subs	r0, r0, r1
    16aa:	4438      	add	r0, r7
    16ac:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
    16b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16b4:	e9c4 1000 	strd	r1, r0, [r4]
    16b8:	9803      	ldr	r0, [sp, #12]
    16ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
    16be:	466f      	mov	r7, sp
    16c0:	f890 5020 	ldrb.w	r5, [r0, #32]
    16c4:	2020      	movs	r0, #32
    16c6:	f10d 0a04 	add.w	sl, sp, #4
    16ca:	f88d 0000 	strb.w	r0, [sp]
    16ce:	2d20      	cmp	r5, #32
    16d0:	bf1c      	itt	ne
    16d2:	4836      	ldrne	r0, [pc, #216]	; (17ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    16d4:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
    16d8:	d025      	beq.n	1726 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    16da:	bf00      	nop
    16dc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    16e0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    16e4:	6822      	ldr	r2, [r4, #0]
    16e6:	68c1      	ldr	r1, [r0, #12]
    16e8:	1a51      	subs	r1, r2, r1
    16ea:	0209      	lsls	r1, r1, #8
    16ec:	17ca      	asrs	r2, r1, #31
    16ee:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    16f2:	3008      	adds	r0, #8
    16f4:	1209      	asrs	r1, r1, #8
    16f6:	d416      	bmi.n	1726 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    16f8:	8961      	ldrh	r1, [r4, #10]
    16fa:	b171      	cbz	r1, 171a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    16fc:	8941      	ldrh	r1, [r0, #10]
    16fe:	b961      	cbnz	r1, 171a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    1700:	f000 fcda 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    1704:	f001 ffc8 	bl	3698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1708:	6821      	ldr	r1, [r4, #0]
    170a:	1a08      	subs	r0, r1, r0
    170c:	0200      	lsls	r0, r0, #8
    170e:	17c1      	asrs	r1, r0, #31
    1710:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1714:	1200      	asrs	r0, r0, #8
    1716:	2833      	cmp	r0, #51	; 0x33
    1718:	db05      	blt.n	1726 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    171a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
    171e:	703d      	strb	r5, [r7, #0]
    1720:	7845      	ldrb	r5, [r0, #1]
    1722:	2d20      	cmp	r5, #32
    1724:	d1da      	bne.n	16dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2a8>
    1726:	7838      	ldrb	r0, [r7, #0]
    1728:	f88a 0000 	strb.w	r0, [sl]
    172c:	4627      	mov	r7, r4
    172e:	2d20      	cmp	r5, #32
    1730:	bf1c      	itt	ne
    1732:	481e      	ldrne	r0, [pc, #120]	; (17ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    1734:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1738:	d030      	beq.n	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    173a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    173e:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
    1742:	6879      	ldr	r1, [r7, #4]
    1744:	f8d9 2008 	ldr.w	r2, [r9, #8]
    1748:	4638      	mov	r0, r7
    174a:	1a51      	subs	r1, r2, r1
    174c:	0209      	lsls	r1, r1, #8
    174e:	17ca      	asrs	r2, r1, #31
    1750:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1754:	f109 0808 	add.w	r8, r9, #8
    1758:	1209      	asrs	r1, r1, #8
    175a:	d412      	bmi.n	1782 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x34e>
    175c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    1760:	b1e1      	cbz	r1, 179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1762:	8941      	ldrh	r1, [r0, #10]
    1764:	b9d1      	cbnz	r1, 179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1766:	f000 fca7 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    176a:	f001 ff95 	bl	3698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    176e:	f8d8 1000 	ldr.w	r1, [r8]
    1772:	1a08      	subs	r0, r1, r0
    1774:	0200      	lsls	r0, r0, #8
    1776:	17c1      	asrs	r1, r0, #31
    1778:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    177c:	1200      	asrs	r0, r0, #8
    177e:	2833      	cmp	r0, #51	; 0x33
    1780:	da0c      	bge.n	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1782:	f88a 5000 	strb.w	r5, [sl]
    1786:	f899 0014 	ldrb.w	r0, [r9, #20]
    178a:	7b39      	ldrb	r1, [r7, #12]
    178c:	4288      	cmp	r0, r1
    178e:	f67f af2e 	bls.w	15ee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    1792:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1796:	7845      	ldrb	r5, [r0, #1]
    1798:	2d20      	cmp	r5, #32
    179a:	d1ce      	bne.n	173a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x306>
    179c:	b009      	add	sp, #36	; 0x24
    179e:	2001      	movs	r0, #1
    17a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    17a4:	20000e3c 	.word	0x20000e3c
    17a8:	20000abc 	.word	0x20000abc
    17ac:	20000dbc 	.word	0x20000dbc
    17b0:	1e847fff 	.word	0x1e847fff
    17b4:	07a12000 	.word	0x07a12000
    17b8:	f85ee000 	.word	0xf85ee000
    17bc:	1e848000 	.word	0x1e848000
    17c0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    17c4:	4604      	mov	r4, r0
    17c6:	483c      	ldr	r0, [pc, #240]	; (18b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x484>)
    17c8:	460e      	mov	r6, r1
    17ca:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    17ce:	4f3b      	ldr	r7, [pc, #236]	; (18bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x488>)
    17d0:	f890 5020 	ldrb.w	r5, [r0, #32]
    17d4:	2020      	movs	r0, #32
    17d6:	4698      	mov	r8, r3
    17d8:	4692      	mov	sl, r2
    17da:	7010      	strb	r0, [r2, #0]
    17dc:	f507 7940 	add.w	r9, r7, #768	; 0x300
    17e0:	2d20      	cmp	r5, #32
    17e2:	bf18      	it	ne
    17e4:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
    17e8:	d028      	beq.n	183c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    17ea:	bf00      	nop
    17ec:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    17f0:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    17f4:	f100 0108 	add.w	r1, r0, #8
    17f8:	68c0      	ldr	r0, [r0, #12]
    17fa:	6822      	ldr	r2, [r4, #0]
    17fc:	1a10      	subs	r0, r2, r0
    17fe:	0200      	lsls	r0, r0, #8
    1800:	17c2      	asrs	r2, r0, #31
    1802:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1806:	1200      	asrs	r0, r0, #8
    1808:	d418      	bmi.n	183c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    180a:	8960      	ldrh	r0, [r4, #10]
    180c:	b178      	cbz	r0, 182e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    180e:	8948      	ldrh	r0, [r1, #10]
    1810:	b968      	cbnz	r0, 182e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    1812:	4608      	mov	r0, r1
    1814:	f000 fc50 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    1818:	f001 ff3e 	bl	3698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    181c:	6821      	ldr	r1, [r4, #0]
    181e:	1a08      	subs	r0, r1, r0
    1820:	0200      	lsls	r0, r0, #8
    1822:	17c1      	asrs	r1, r0, #31
    1824:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1828:	1200      	asrs	r0, r0, #8
    182a:	2833      	cmp	r0, #51	; 0x33
    182c:	db06      	blt.n	183c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    182e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1832:	f88a 5000 	strb.w	r5, [sl]
    1836:	7845      	ldrb	r5, [r0, #1]
    1838:	2d20      	cmp	r5, #32
    183a:	d1d7      	bne.n	17ec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3b8>
    183c:	f89a 0000 	ldrb.w	r0, [sl]
    1840:	f888 0000 	strb.w	r0, [r8]
    1844:	2d20      	cmp	r5, #32
    1846:	bf18      	it	ne
    1848:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    184c:	d030      	beq.n	18b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    184e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1852:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    1856:	6861      	ldr	r1, [r4, #4]
    1858:	f8d9 2008 	ldr.w	r2, [r9, #8]
    185c:	4620      	mov	r0, r4
    185e:	1a51      	subs	r1, r2, r1
    1860:	0209      	lsls	r1, r1, #8
    1862:	17ca      	asrs	r2, r1, #31
    1864:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1868:	f109 0608 	add.w	r6, r9, #8
    186c:	1209      	asrs	r1, r1, #8
    186e:	d410      	bmi.n	1892 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x45e>
    1870:	8971      	ldrh	r1, [r6, #10]
    1872:	b1e9      	cbz	r1, 18b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1874:	8941      	ldrh	r1, [r0, #10]
    1876:	b9d9      	cbnz	r1, 18b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1878:	f000 fc1e 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    187c:	f001 ff0c 	bl	3698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1880:	6831      	ldr	r1, [r6, #0]
    1882:	1a08      	subs	r0, r1, r0
    1884:	0200      	lsls	r0, r0, #8
    1886:	17c1      	asrs	r1, r0, #31
    1888:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    188c:	1200      	asrs	r0, r0, #8
    188e:	2833      	cmp	r0, #51	; 0x33
    1890:	da0e      	bge.n	18b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1892:	f888 5000 	strb.w	r5, [r8]
    1896:	f899 0014 	ldrb.w	r0, [r9, #20]
    189a:	7b21      	ldrb	r1, [r4, #12]
    189c:	4288      	cmp	r0, r1
    189e:	d802      	bhi.n	18a6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x472>
    18a0:	2000      	movs	r0, #0
    18a2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    18a6:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    18aa:	7845      	ldrb	r5, [r0, #1]
    18ac:	2d20      	cmp	r5, #32
    18ae:	d1ce      	bne.n	184e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x41a>
    18b0:	2001      	movs	r0, #1
    18b2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    18b6:	0000      	.short	0x0000
    18b8:	20000e3c 	.word	0x20000e3c
    18bc:	20000abc 	.word	0x20000abc
    18c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18c4:	f04f 0800 	mov.w	r8, #0
    18c8:	b098      	sub	sp, #96	; 0x60
    18ca:	4616      	mov	r6, r2
    18cc:	460d      	mov	r5, r1
    18ce:	46c3      	mov	fp, r8
    18d0:	f002 f95a 	bl	3b88 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    18d4:	4604      	mov	r4, r0
    18d6:	2d01      	cmp	r5, #1
    18d8:	bf18      	it	ne
    18da:	2d02      	cmpne	r5, #2
    18dc:	d005      	beq.n	18ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x4b6>
    18de:	f640 1194 	movw	r1, #2452	; 0x994
    18e2:	f04f 0070 	mov.w	r0, #112	; 0x70
    18e6:	f002 ff1f 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18ea:	49fd      	ldr	r1, [pc, #1012]	; (1ce0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    18ec:	2001      	movs	r0, #1
    18ee:	6008      	str	r0, [r1, #0]
    18f0:	49fc      	ldr	r1, [pc, #1008]	; (1ce4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b0>)
    18f2:	6889      	ldr	r1, [r1, #8]
    18f4:	6008      	str	r0, [r1, #0]
    18f6:	2000      	movs	r0, #0
    18f8:	900c      	str	r0, [sp, #48]	; 0x30
    18fa:	1e40      	subs	r0, r0, #1
    18fc:	900e      	str	r0, [sp, #56]	; 0x38
    18fe:	49fa      	ldr	r1, [pc, #1000]	; (1ce8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b4>)
    1900:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    1904:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    1908:	3308      	adds	r3, #8
    190a:	af0f      	add	r7, sp, #60	; 0x3c
    190c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    190e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    1912:	a80f      	add	r0, sp, #60	; 0x3c
    1914:	f000 fbd0 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    1918:	900d      	str	r0, [sp, #52]	; 0x34
    191a:	48f3      	ldr	r0, [pc, #972]	; (1ce8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b4>)
    191c:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
    1920:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
    1924:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    1928:	f1b9 0f00 	cmp.w	r9, #0
    192c:	bf14      	ite	ne
    192e:	f04f 0a01 	movne.w	sl, #1
    1932:	f04f 0a00 	moveq.w	sl, #0
    1936:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1938:	9014      	str	r0, [sp, #80]	; 0x50
    193a:	f1ba 0f00 	cmp.w	sl, #0
    193e:	d009      	beq.n	1954 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x520>
    1940:	48ea      	ldr	r0, [pc, #936]	; (1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    1942:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1946:	b928      	cbnz	r0, 1954 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x520>
    1948:	f002 fe8a 	bl	4660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    194c:	2800      	cmp	r0, #0
    194e:	bf08      	it	eq
    1950:	2701      	moveq	r7, #1
    1952:	d000      	beq.n	1956 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x522>
    1954:	2700      	movs	r7, #0
    1956:	48e6      	ldr	r0, [pc, #920]	; (1cf0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8bc>)
    1958:	2200      	movs	r2, #0
    195a:	9215      	str	r2, [sp, #84]	; 0x54
    195c:	7800      	ldrb	r0, [r0, #0]
    195e:	4616      	mov	r6, r2
    1960:	2801      	cmp	r0, #1
    1962:	bf18      	it	ne
    1964:	2803      	cmpne	r0, #3
    1966:	d140      	bne.n	19ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5b6>
    1968:	48e1      	ldr	r0, [pc, #900]	; (1cf0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8bc>)
    196a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
    196e:	eba8 0009 	sub.w	r0, r8, r9
    1972:	9015      	str	r0, [sp, #84]	; 0x54
    1974:	45c8      	cmp	r8, r9
    1976:	d938      	bls.n	19ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5b6>
    1978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    197a:	ea6f 0108 	mvn.w	r1, r8
    197e:	f8df e374 	ldr.w	lr, [pc, #884]	; 1cf4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c0>
    1982:	1858      	adds	r0, r3, r1
    1984:	f10d 0c0c 	add.w	ip, sp, #12
    1988:	aa17      	add	r2, sp, #92	; 0x5c
    198a:	4573      	cmp	r3, lr
    198c:	d904      	bls.n	1998 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x564>
    198e:	f240 6109 	movw	r1, #1545	; 0x609
    1992:	2070      	movs	r0, #112	; 0x70
    1994:	f002 fec8 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1998:	4bd7      	ldr	r3, [pc, #860]	; (1cf8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c4>)
    199a:	4299      	cmp	r1, r3
    199c:	dd04      	ble.n	19a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x574>
    199e:	f240 610a 	movw	r1, #1546	; 0x60a
    19a2:	2070      	movs	r0, #112	; 0x70
    19a4:	f002 fec0 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19a8:	4bd4      	ldr	r3, [pc, #848]	; (1cfc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c8>)
    19aa:	4299      	cmp	r1, r3
    19ac:	da04      	bge.n	19b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x584>
    19ae:	f240 610b 	movw	r1, #1547	; 0x60b
    19b2:	2070      	movs	r0, #112	; 0x70
    19b4:	f002 feb8 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19b8:	49d1      	ldr	r1, [pc, #836]	; (1d00 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8cc>)
    19ba:	4281      	cmp	r1, r0
    19bc:	bfdc      	itt	le
    19be:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    19c2:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    19c6:	dd05      	ble.n	19d4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5a0>
    19c8:	2800      	cmp	r0, #0
    19ca:	bfbc      	itt	lt
    19cc:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    19d0:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    19d4:	4661      	mov	r1, ip
    19d6:	f001 fe7b 	bl	36d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    19da:	9803      	ldr	r0, [sp, #12]
    19dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    19de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    19e2:	9003      	str	r0, [sp, #12]
    19e4:	1a08      	subs	r0, r1, r0
    19e6:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    19ea:	2f00      	cmp	r7, #0
    19ec:	bf18      	it	ne
    19ee:	2632      	movne	r6, #50	; 0x32
    19f0:	d104      	bne.n	19fc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5c8>
    19f2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    19f6:	2800      	cmp	r0, #0
    19f8:	bf18      	it	ne
    19fa:	2602      	movne	r6, #2
    19fc:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1a00:	d008      	beq.n	1a14 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5e0>
    1a02:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1a04:	1b00      	subs	r0, r0, r4
    1a06:	0200      	lsls	r0, r0, #8
    1a08:	17c1      	asrs	r1, r0, #31
    1a0a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1a0e:	1200      	asrs	r0, r0, #8
    1a10:	2801      	cmp	r0, #1
    1a12:	da02      	bge.n	1a1a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5e6>
    1a14:	2104      	movs	r1, #4
    1a16:	9818      	ldr	r0, [sp, #96]	; 0x60
    1a18:	e00b      	b.n	1a32 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5fe>
    1a1a:	b147      	cbz	r7, 1a2e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5fa>
    1a1c:	48b3      	ldr	r0, [pc, #716]	; (1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    1a1e:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1a22:	b120      	cbz	r0, 1a2e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5fa>
    1a24:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1a28:	1c06      	adds	r6, r0, #0
    1a2a:	bf18      	it	ne
    1a2c:	2602      	movne	r6, #2
    1a2e:	4620      	mov	r0, r4
    1a30:	2101      	movs	r1, #1
    1a32:	f1b9 0f00 	cmp.w	r9, #0
    1a36:	d002      	beq.n	1a3e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x60a>
    1a38:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1a3a:	2b1e      	cmp	r3, #30
    1a3c:	da02      	bge.n	1a44 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x610>
    1a3e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    1a42:	b113      	cbz	r3, 1a4a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x616>
    1a44:	f04f 0b01 	mov.w	fp, #1
    1a48:	1e49      	subs	r1, r1, #1
    1a4a:	198b      	adds	r3, r1, r6
    1a4c:	49a8      	ldr	r1, [pc, #672]	; (1cf0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8bc>)
    1a4e:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
    1a52:	7809      	ldrb	r1, [r1, #0]
    1a54:	9115      	str	r1, [sp, #84]	; 0x54
    1a56:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1a58:	1a89      	subs	r1, r1, r2
    1a5a:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
    1a5e:	ebac 0100 	sub.w	r1, ip, r0
    1a62:	0209      	lsls	r1, r1, #8
    1a64:	17ce      	asrs	r6, r1, #31
    1a66:	eb01 6116 	add.w	r1, r1, r6, lsr #24
    1a6a:	1209      	asrs	r1, r1, #8
    1a6c:	4299      	cmp	r1, r3
    1a6e:	db18      	blt.n	1aa2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x66e>
    1a70:	2a00      	cmp	r2, #0
    1a72:	bf18      	it	ne
    1a74:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
    1a78:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    1a7a:	9705      	str	r7, [sp, #20]
    1a7c:	2700      	movs	r7, #0
    1a7e:	f001 ff7d 	bl	397c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1a82:	1a30      	subs	r0, r6, r0
    1a84:	0200      	lsls	r0, r0, #8
    1a86:	17c1      	asrs	r1, r0, #31
    1a88:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1a8c:	1200      	asrs	r0, r0, #8
    1a8e:	283e      	cmp	r0, #62	; 0x3e
    1a90:	da3f      	bge.n	1b12 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6de>
    1a92:	2d01      	cmp	r5, #1
    1a94:	d020      	beq.n	1ad8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6a4>
    1a96:	1e70      	subs	r0, r6, #1
    1a98:	9905      	ldr	r1, [sp, #20]
    1a9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1a9e:	b319      	cbz	r1, 1ae8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6b4>
    1aa0:	e02d      	b.n	1afe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ca>
    1aa2:	b182      	cbz	r2, 1ac6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x692>
    1aa4:	f1be 0f00 	cmp.w	lr, #0
    1aa8:	bf04      	itt	eq
    1aaa:	9915      	ldreq	r1, [sp, #84]	; 0x54
    1aac:	2903      	cmpeq	r1, #3
    1aae:	d00a      	beq.n	1ac6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x692>
    1ab0:	b927      	cbnz	r7, 1abc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x688>
    1ab2:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    1ab6:	2900      	cmp	r1, #0
    1ab8:	bf18      	it	ne
    1aba:	1e9b      	subne	r3, r3, #2
    1abc:	2200      	movs	r2, #0
    1abe:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
    1ac2:	4690      	mov	r8, r2
    1ac4:	e7c7      	b.n	1a56 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x622>
    1ac6:	bb07      	cbnz	r7, 1b0a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d6>
    1ac8:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    1acc:	b1e9      	cbz	r1, 1b0a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d6>
    1ace:	2100      	movs	r1, #0
    1ad0:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    1ad4:	1e9b      	subs	r3, r3, #2
    1ad6:	e7be      	b.n	1a56 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x622>
    1ad8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1adc:	d120      	bne.n	1b20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ec>
    1ade:	f640 110d 	movw	r1, #2317	; 0x90d
    1ae2:	2070      	movs	r0, #112	; 0x70
    1ae4:	f002 fe20 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ae8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1aec:	d007      	beq.n	1afe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ca>
    1aee:	1a21      	subs	r1, r4, r0
    1af0:	0209      	lsls	r1, r1, #8
    1af2:	17ca      	asrs	r2, r1, #31
    1af4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1af8:	1209      	asrs	r1, r1, #8
    1afa:	2904      	cmp	r1, #4
    1afc:	dd03      	ble.n	1b06 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d2>
    1afe:	4604      	mov	r4, r0
    1b00:	f001 ff42 	bl	3988 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1b04:	e00c      	b.n	1b20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ec>
    1b06:	2900      	cmp	r1, #0
    1b08:	dd0a      	ble.n	1b20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ec>
    1b0a:	b01b      	add	sp, #108	; 0x6c
    1b0c:	2000      	movs	r0, #0
    1b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b12:	1e70      	subs	r0, r6, #1
    1b14:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    1b18:	4620      	mov	r0, r4
    1b1a:	f001 ff35 	bl	3988 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1b1e:	4657      	mov	r7, sl
    1b20:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1b24:	d028      	beq.n	1b78 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x744>
    1b26:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1b28:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    1b2c:	1b00      	subs	r0, r0, r4
    1b2e:	f08b 0301 	eor.w	r3, fp, #1
    1b32:	4a74      	ldr	r2, [pc, #464]	; (1d04 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d0>)
    1b34:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b38:	ebac 0c04 	sub.w	ip, ip, r4
    1b3c:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    1b40:	4283      	cmp	r3, r0
    1b42:	bf98      	it	ls
    1b44:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    1b48:	d2df      	bcs.n	1b0a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d6>
    1b4a:	4562      	cmp	r2, ip
    1b4c:	d3dd      	bcc.n	1b0a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d6>
    1b4e:	4620      	mov	r0, r4
    1b50:	f00a fd7a 	bl	c648 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1b54:	4967      	ldr	r1, [pc, #412]	; (1cf4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c0>)
    1b56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1b58:	1c4b      	adds	r3, r1, #1
    1b5a:	1a16      	subs	r6, r2, r0
    1b5c:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
    1b60:	bf24      	itt	cs
    1b62:	eba0 0c02 	subcs.w	ip, r0, r2
    1b66:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    1b6a:	d310      	bcc.n	1b8e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x75a>
    1b6c:	42b1      	cmp	r1, r6
    1b6e:	d208      	bcs.n	1b82 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74e>
    1b70:	1a08      	subs	r0, r1, r0
    1b72:	4410      	add	r0, r2
    1b74:	1c46      	adds	r6, r0, #1
    1b76:	e00a      	b.n	1b8e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x75a>
    1b78:	f640 212c 	movw	r1, #2604	; 0xa2c
    1b7c:	2070      	movs	r0, #112	; 0x70
    1b7e:	f002 fdd3 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b82:	4561      	cmp	r1, ip
    1b84:	d22c      	bcs.n	1be0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7ac>
    1b86:	1a89      	subs	r1, r1, r2
    1b88:	4408      	add	r0, r1
    1b8a:	1c40      	adds	r0, r0, #1
    1b8c:	4246      	negs	r6, r0
    1b8e:	4857      	ldr	r0, [pc, #348]	; (1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    1b90:	7f80      	ldrb	r0, [r0, #30]
    1b92:	b350      	cbz	r0, 1bea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7b6>
    1b94:	4628      	mov	r0, r5
    1b96:	4645      	mov	r5, r8
    1b98:	f04f 0b00 	mov.w	fp, #0
    1b9c:	46d8      	mov	r8, fp
    1b9e:	2801      	cmp	r0, #1
    1ba0:	d005      	beq.n	1bae <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x77a>
    1ba2:	2002      	movs	r0, #2
    1ba4:	f002 f938 	bl	3e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1ba8:	2001      	movs	r0, #1
    1baa:	f002 f935 	bl	3e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1bae:	45a9      	cmp	r9, r5
    1bb0:	d22c      	bcs.n	1c0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7d8>
    1bb2:	eba6 0105 	sub.w	r1, r6, r5
    1bb6:	f04f 0301 	mov.w	r3, #1
    1bba:	f04f 0203 	mov.w	r2, #3
    1bbe:	f04f 0002 	mov.w	r0, #2
    1bc2:	f002 f861 	bl	3c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1bc6:	2800      	cmp	r0, #0
    1bc8:	bf08      	it	eq
    1bca:	f04f 0801 	moveq.w	r8, #1
    1bce:	f1b9 0f00 	cmp.w	r9, #0
    1bd2:	d035      	beq.n	1c40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x80c>
    1bd4:	2301      	movs	r3, #1
    1bd6:	eba6 0109 	sub.w	r1, r6, r9
    1bda:	2203      	movs	r2, #3
    1bdc:	4618      	mov	r0, r3
    1bde:	e023      	b.n	1c28 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7f4>
    1be0:	f640 310c 	movw	r1, #2828	; 0xb0c
    1be4:	2070      	movs	r0, #112	; 0x70
    1be6:	f002 fd9f 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1bea:	45c1      	cmp	r9, r8
    1bec:	bf34      	ite	cc
    1bee:	4640      	movcc	r0, r8
    1bf0:	4648      	movcs	r0, r9
    1bf2:	f1bb 0f00 	cmp.w	fp, #0
    1bf6:	bf14      	ite	ne
    1bf8:	2100      	movne	r1, #0
    1bfa:	211e      	moveq	r1, #30
    1bfc:	4408      	add	r0, r1
    1bfe:	42b0      	cmp	r0, r6
    1c00:	dbc8      	blt.n	1b94 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x760>
    1c02:	f640 213f 	movw	r1, #2623	; 0xa3f
    1c06:	2070      	movs	r0, #112	; 0x70
    1c08:	f002 fd8e 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c0c:	d910      	bls.n	1c30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7fc>
    1c0e:	2301      	movs	r3, #1
    1c10:	eba6 0109 	sub.w	r1, r6, r9
    1c14:	2203      	movs	r2, #3
    1c16:	4618      	mov	r0, r3
    1c18:	f002 f836 	bl	3c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1c1c:	b328      	cbz	r0, 1c6a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x836>
    1c1e:	b17d      	cbz	r5, 1c40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x80c>
    1c20:	1b71      	subs	r1, r6, r5
    1c22:	2301      	movs	r3, #1
    1c24:	2203      	movs	r2, #3
    1c26:	2002      	movs	r0, #2
    1c28:	f002 f82e 	bl	3c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1c2c:	b1e8      	cbz	r0, 1c6a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x836>
    1c2e:	e007      	b.n	1c40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x80c>
    1c30:	ea55 0009 	orrs.w	r0, r5, r9
    1c34:	d004      	beq.n	1c40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x80c>
    1c36:	f640 1177 	movw	r1, #2423	; 0x977
    1c3a:	2070      	movs	r0, #112	; 0x70
    1c3c:	f002 fd74 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c40:	2301      	movs	r3, #1
    1c42:	2203      	movs	r2, #3
    1c44:	4631      	mov	r1, r6
    1c46:	2000      	movs	r0, #0
    1c48:	f002 f81e 	bl	3c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1c4c:	b168      	cbz	r0, 1c6a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x836>
    1c4e:	2501      	movs	r5, #1
    1c50:	f1b8 0f00 	cmp.w	r8, #0
    1c54:	d003      	beq.n	1c5e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x82a>
    1c56:	9814      	ldr	r0, [sp, #80]	; 0x50
    1c58:	900f      	str	r0, [sp, #60]	; 0x3c
    1c5a:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
    1c5e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1d08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d4>
    1c62:	f1ba 0f00 	cmp.w	sl, #0
    1c66:	d10e      	bne.n	1c86 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x852>
    1c68:	e009      	b.n	1c7e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x84a>
    1c6a:	2002      	movs	r0, #2
    1c6c:	f002 f8d4 	bl	3e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1c70:	2001      	movs	r0, #1
    1c72:	f002 f8d1 	bl	3e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1c76:	b01b      	add	sp, #108	; 0x6c
    1c78:	2000      	movs	r0, #0
    1c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c7e:	481b      	ldr	r0, [pc, #108]	; (1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    1c80:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1c84:	b100      	cbz	r0, 1c88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x854>
    1c86:	b34f      	cbz	r7, 1cdc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a8>
    1c88:	f8df a060 	ldr.w	sl, [pc, #96]	; 1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>
    1c8c:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    1c90:	b118      	cbz	r0, 1c9a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x866>
    1c92:	f002 fb8f 	bl	43b4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1c96:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
    1c9a:	b307      	cbz	r7, 1cde <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8aa>
    1c9c:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    1ca0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1ca4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1ca8:	f8c8 0000 	str.w	r0, [r8]
    1cac:	2300      	movs	r3, #0
    1cae:	2203      	movs	r2, #3
    1cb0:	2005      	movs	r0, #5
    1cb2:	f001 ffe9 	bl	3c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1cb6:	b368      	cbz	r0, 1d14 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8e0>
    1cb8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1cbc:	2005      	movs	r0, #5
    1cbe:	f002 f971 	bl	3fa4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    1cc2:	4912      	ldr	r1, [pc, #72]	; (1d0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d8>)
    1cc4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    1cc8:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
    1ccc:	4910      	ldr	r1, [pc, #64]	; (1d10 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8dc>)
    1cce:	12e0      	asrs	r0, r4, #11
    1cd0:	6008      	str	r0, [r1, #0]
    1cd2:	4c06      	ldr	r4, [pc, #24]	; (1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    1cd4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1cd8:	b3f0      	cbz	r0, 1d58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc>
    1cda:	e05b      	b.n	1d94 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48>
    1cdc:	e01b      	b.n	1d16 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8e2>
    1cde:	e01f      	b.n	1d20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ec>
    1ce0:	40000508 	.word	0x40000508
    1ce4:	20000010 	.word	0x20000010
    1ce8:	20000abc 	.word	0x20000abc
    1cec:	20000e3c 	.word	0x20000e3c
    1cf0:	20000012 	.word	0x20000012
    1cf4:	1e847fff 	.word	0x1e847fff
    1cf8:	07a12000 	.word	0x07a12000
    1cfc:	f85ee000 	.word	0xf85ee000
    1d00:	1e848000 	.word	0x1e848000
    1d04:	003fffff 	.word	0x003fffff
    1d08:	4001f508 	.word	0x4001f508
    1d0c:	4001f098 	.word	0x4001f098
    1d10:	4001f504 	.word	0x4001f504
    1d14:	e035      	b.n	1d82 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36>
    1d16:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1dd0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84>
    1d1a:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    1d1e:	b358      	cbz	r0, 1d78 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>
    1d20:	4c2b      	ldr	r4, [pc, #172]	; (1dd0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84>)
    1d22:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1d26:	b150      	cbz	r0, 1d3e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90a>
    1d28:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1d2c:	f8c8 0000 	str.w	r0, [r8]
    1d30:	2005      	movs	r0, #5
    1d32:	f002 f871 	bl	3e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1d36:	f002 fba5 	bl	4484 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1d3a:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
    1d3e:	ac0c      	add	r4, sp, #48	; 0x30
    1d40:	4824      	ldr	r0, [pc, #144]	; (1dd4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x88>)
    1d42:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1d46:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
    1d4a:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
    1d4e:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
    1d52:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
    1d56:	e000      	b.n	1d5a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe>
    1d58:	e018      	b.n	1d8c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x40>
    1d5a:	ac10      	add	r4, sp, #64	; 0x40
    1d5c:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1d60:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
    1d64:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
    1d68:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
    1d6c:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
    1d70:	b01b      	add	sp, #108	; 0x6c
    1d72:	2001      	movs	r0, #1
    1d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d78:	f002 fb38 	bl	43ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1d7c:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
    1d80:	e78b      	b.n	1c9a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x866>
    1d82:	f240 313e 	movw	r1, #830	; 0x33e
    1d86:	2070      	movs	r0, #112	; 0x70
    1d88:	f002 fcce 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d8c:	f002 fb6c 	bl	4468 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
    1d90:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    1d94:	eba6 0009 	sub.w	r0, r6, r9
    1d98:	f1a0 0119 	sub.w	r1, r0, #25
    1d9c:	2900      	cmp	r1, #0
    1d9e:	dc04      	bgt.n	1daa <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5e>
    1da0:	f640 2169 	movw	r1, #2665	; 0xa69
    1da4:	2070      	movs	r0, #112	; 0x70
    1da6:	f002 fcbf 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1daa:	2203      	movs	r2, #3
    1dac:	2301      	movs	r3, #1
    1dae:	4610      	mov	r0, r2
    1db0:	f001 ff6a 	bl	3c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1db4:	b138      	cbz	r0, 1dc6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7a>
    1db6:	4808      	ldr	r0, [pc, #32]	; (1dd8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>)
    1db8:	6880      	ldr	r0, [r0, #8]
    1dba:	f8c0 b000 	str.w	fp, [r0]
    1dbe:	4807      	ldr	r0, [pc, #28]	; (1ddc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x90>)
    1dc0:	f8c0 b000 	str.w	fp, [r0]
    1dc4:	e7bb      	b.n	1d3e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90a>
    1dc6:	f640 2174 	movw	r1, #2676	; 0xa74
    1dca:	2070      	movs	r0, #112	; 0x70
    1dcc:	f002 fcac 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1dd0:	20000e3c 	.word	0x20000e3c
    1dd4:	20000abc 	.word	0x20000abc
    1dd8:	20000010 	.word	0x20000010
    1ddc:	40000508 	.word	0x40000508
    1de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1de4:	4606      	mov	r6, r0
    1de6:	b083      	sub	sp, #12
    1de8:	7808      	ldrb	r0, [r1, #0]
    1dea:	7390      	strb	r0, [r2, #14]
    1dec:	7acf      	ldrb	r7, [r1, #11]
    1dee:	7357      	strb	r7, [r2, #13]
    1df0:	7a88      	ldrb	r0, [r1, #10]
    1df2:	7310      	strb	r0, [r2, #12]
    1df4:	8908      	ldrh	r0, [r1, #8]
    1df6:	4614      	mov	r4, r2
    1df8:	8150      	strh	r0, [r2, #10]
    1dfa:	460d      	mov	r5, r1
    1dfc:	780a      	ldrb	r2, [r1, #0]
    1dfe:	495f      	ldr	r1, [pc, #380]	; (1f7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x230>)
    1e00:	4699      	mov	r9, r3
    1e02:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    1e06:	424b      	negs	r3, r1
    1e08:	f1ac 0801 	sub.w	r8, ip, #1
    1e0c:	b15a      	cbz	r2, 1e26 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xda>
    1e0e:	43c0      	mvns	r0, r0
    1e10:	f8d5 8004 	ldr.w	r8, [r5, #4]
    1e14:	f104 0208 	add.w	r2, r4, #8
    1e18:	4288      	cmp	r0, r1
    1e1a:	dd3d      	ble.n	1e98 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14c>
    1e1c:	f240 610a 	movw	r1, #1546	; 0x60a
    1e20:	2070      	movs	r0, #112	; 0x70
    1e22:	f002 fc81 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e26:	68ee      	ldr	r6, [r5, #12]
    1e28:	686d      	ldr	r5, [r5, #4]
    1e2a:	ea6f 0900 	mvn.w	r9, r0
    1e2e:	f104 0208 	add.w	r2, r4, #8
    1e32:	eb06 0009 	add.w	r0, r6, r9
    1e36:	4546      	cmp	r6, r8
    1e38:	d904      	bls.n	1e44 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf8>
    1e3a:	f240 6109 	movw	r1, #1545	; 0x609
    1e3e:	2070      	movs	r0, #112	; 0x70
    1e40:	f002 fc72 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e44:	4589      	cmp	r9, r1
    1e46:	dce9      	bgt.n	1e1c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd0>
    1e48:	4599      	cmp	r9, r3
    1e4a:	db28      	blt.n	1e9e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x152>
    1e4c:	4584      	cmp	ip, r0
    1e4e:	bfdc      	itt	le
    1e50:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1e54:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1e58:	dd05      	ble.n	1e66 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x11a>
    1e5a:	2800      	cmp	r0, #0
    1e5c:	bfbc      	itt	lt
    1e5e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1e62:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1e66:	4621      	mov	r1, r4
    1e68:	f001 fc32 	bl	36d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1e6c:	6820      	ldr	r0, [r4, #0]
    1e6e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1e72:	1970      	adds	r0, r6, r5
    1e74:	1c40      	adds	r0, r0, #1
    1e76:	6021      	str	r1, [r4, #0]
    1e78:	2f00      	cmp	r7, #0
    1e7a:	bf08      	it	eq
    1e7c:	307a      	addeq	r0, #122	; 0x7a
    1e7e:	d003      	beq.n	1e88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13c>
    1e80:	2f01      	cmp	r7, #1
    1e82:	bf08      	it	eq
    1e84:	3044      	addeq	r0, #68	; 0x44
    1e86:	d12d      	bne.n	1ee4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x198>
    1e88:	f001 fc06 	bl	3698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1e8c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e90:	6060      	str	r0, [r4, #4]
    1e92:	b003      	add	sp, #12
    1e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1e98:	4601      	mov	r1, r0
    1e9a:	4298      	cmp	r0, r3
    1e9c:	da04      	bge.n	1ea8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>
    1e9e:	f240 610b 	movw	r1, #1547	; 0x60b
    1ea2:	2070      	movs	r0, #112	; 0x70
    1ea4:	f002 fc40 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ea8:	4584      	cmp	ip, r0
    1eaa:	bfdc      	itt	le
    1eac:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    1eb0:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    1eb4:	dd05      	ble.n	1ec2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x176>
    1eb6:	2800      	cmp	r0, #0
    1eb8:	bfbc      	itt	lt
    1eba:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    1ebe:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    1ec2:	4621      	mov	r1, r4
    1ec4:	f001 fc04 	bl	36d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1ec8:	6820      	ldr	r0, [r4, #0]
    1eca:	2f00      	cmp	r7, #0
    1ecc:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1ed0:	f108 0001 	add.w	r0, r8, #1
    1ed4:	6021      	str	r1, [r4, #0]
    1ed6:	bf08      	it	eq
    1ed8:	307a      	addeq	r0, #122	; 0x7a
    1eda:	d008      	beq.n	1eee <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a2>
    1edc:	2f01      	cmp	r7, #1
    1ede:	bf08      	it	eq
    1ee0:	3044      	addeq	r0, #68	; 0x44
    1ee2:	d004      	beq.n	1eee <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a2>
    1ee4:	f240 61b1 	movw	r1, #1713	; 0x6b1
    1ee8:	2070      	movs	r0, #112	; 0x70
    1eea:	f002 fc1d 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1eee:	f001 fbd3 	bl	3698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1ef2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1ef6:	6061      	str	r1, [r4, #4]
    1ef8:	8960      	ldrh	r0, [r4, #10]
    1efa:	aa01      	add	r2, sp, #4
    1efc:	4669      	mov	r1, sp
    1efe:	f001 fbe7 	bl	36d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1f02:	481f      	ldr	r0, [pc, #124]	; (1f80 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x234>)
    1f04:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1f08:	2920      	cmp	r1, #32
    1f0a:	d023      	beq.n	1f54 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x208>
    1f0c:	6900      	ldr	r0, [r0, #16]
    1f0e:	1d40      	adds	r0, r0, #5
    1f10:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1f14:	e9d4 2100 	ldrd	r2, r1, [r4]
    1f18:	1a89      	subs	r1, r1, r2
    1f1a:	6020      	str	r0, [r4, #0]
    1f1c:	4408      	add	r0, r1
    1f1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1f22:	6060      	str	r0, [r4, #4]
    1f24:	464b      	mov	r3, r9
    1f26:	4632      	mov	r2, r6
    1f28:	4621      	mov	r1, r4
    1f2a:	68e8      	ldr	r0, [r5, #12]
    1f2c:	f7ff facc 	bl	14c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1f30:	2800      	cmp	r0, #0
    1f32:	bf1c      	itt	ne
    1f34:	b003      	addne	sp, #12
    1f36:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1f3a:	e9d4 1000 	ldrd	r1, r0, [r4]
    1f3e:	1a40      	subs	r0, r0, r1
    1f40:	4430      	add	r0, r6
    1f42:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    1f46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1f4a:	e9c4 1000 	strd	r1, r0, [r4]
    1f4e:	b003      	add	sp, #12
    1f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1f54:	8960      	ldrh	r0, [r4, #10]
    1f56:	f106 0709 	add.w	r7, r6, #9
    1f5a:	b120      	cbz	r0, 1f66 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21a>
    1f5c:	f002 fb80 	bl	4660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1f60:	2800      	cmp	r0, #0
    1f62:	bf08      	it	eq
    1f64:	3732      	addeq	r7, #50	; 0x32
    1f66:	4807      	ldr	r0, [pc, #28]	; (1f84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>)
    1f68:	7841      	ldrb	r1, [r0, #1]
    1f6a:	9800      	ldr	r0, [sp, #0]
    1f6c:	4281      	cmp	r1, r0
    1f6e:	bf84      	itt	hi
    1f70:	1a08      	subhi	r0, r1, r0
    1f72:	4407      	addhi	r7, r0
    1f74:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    1f78:	e7cc      	b.n	1f14 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c8>
    1f7a:	0000      	.short	0x0000
    1f7c:	07a12000 	.word	0x07a12000
    1f80:	20000e3c 	.word	0x20000e3c
    1f84:	20000012 	.word	0x20000012
    1f88:	b510      	push	{r4, lr}
    1f8a:	4c15      	ldr	r4, [pc, #84]	; (1fe0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x294>)
    1f8c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1f90:	2820      	cmp	r0, #32
    1f92:	bf18      	it	ne
    1f94:	bd10      	popne	{r4, pc}
    1f96:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1f9a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    1f9e:	f890 1020 	ldrb.w	r1, [r0, #32]
    1fa2:	2920      	cmp	r1, #32
    1fa4:	d017      	beq.n	1fd6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28a>
    1fa6:	f8df c03c 	ldr.w	ip, [pc, #60]	; 1fe4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x298>
    1faa:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    1fae:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    1fb2:	785b      	ldrb	r3, [r3, #1]
    1fb4:	f880 3020 	strb.w	r3, [r0, #32]
    1fb8:	2301      	movs	r3, #1
    1fba:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    1fbe:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    1fc2:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    1fc6:	2002      	movs	r0, #2
    1fc8:	f000 f8b0 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    1fcc:	2000      	movs	r0, #0
    1fce:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    1fd2:	77a0      	strb	r0, [r4, #30]
    1fd4:	bd10      	pop	{r4, pc}
    1fd6:	f240 318b 	movw	r1, #907	; 0x38b
    1fda:	2070      	movs	r0, #112	; 0x70
    1fdc:	f002 fba4 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fe0:	20000e3c 	.word	0x20000e3c
    1fe4:	20000dbc 	.word	0x20000dbc
    1fe8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1fec:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 20a8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x35c>
    1ff0:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1ff4:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1ff8:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1ffc:	2c20      	cmp	r4, #32
    1ffe:	bf08      	it	eq
    2000:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2004:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 20ac <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x360>
    2008:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 20b0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x364>
    200c:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    2010:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    2014:	2607      	movs	r6, #7
    2016:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    201a:	2801      	cmp	r0, #1
    201c:	d00e      	beq.n	203c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f0>
    201e:	2804      	cmp	r0, #4
    2020:	bf08      	it	eq
    2022:	2602      	moveq	r6, #2
    2024:	d00a      	beq.n	203c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f0>
    2026:	2805      	cmp	r0, #5
    2028:	bf0c      	ite	eq
    202a:	2603      	moveq	r6, #3
    202c:	2806      	cmpne	r0, #6
    202e:	d005      	beq.n	203c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f0>
    2030:	f640 01d9 	movw	r1, #2265	; 0x8d9
    2034:	f04f 0070 	mov.w	r0, #112	; 0x70
    2038:	f002 fb76 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    203c:	f1bb 0f00 	cmp.w	fp, #0
    2040:	bf18      	it	ne
    2042:	f3af 8000 	nopne.w
    2046:	f3ef 8010 	mrs	r0, PRIMASK
    204a:	b672      	cpsid	i
    204c:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    2050:	784a      	ldrb	r2, [r1, #1]
    2052:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    2056:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    205a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    205e:	42a2      	cmp	r2, r4
    2060:	bf04      	itt	eq
    2062:	2220      	moveq	r2, #32
    2064:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    2068:	b1b8      	cbz	r0, 209a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34e>
    206a:	462a      	mov	r2, r5
    206c:	4621      	mov	r1, r4
    206e:	2001      	movs	r0, #1
    2070:	f000 f85c 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    2074:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2078:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    207c:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    2080:	6840      	ldr	r0, [r0, #4]
    2082:	4631      	mov	r1, r6
    2084:	4790      	blx	r2
    2086:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    208a:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    208e:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    2092:	2c20      	cmp	r4, #32
    2094:	d1bc      	bne.n	2010 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c4>
    2096:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    209a:	4806      	ldr	r0, [pc, #24]	; (20b4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x368>)
    209c:	2800      	cmp	r0, #0
    209e:	bf18      	it	ne
    20a0:	f3af 8000 	nopne.w
    20a4:	b662      	cpsie	i
    20a6:	e7e0      	b.n	206a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x31e>
    20a8:	20000e3c 	.word	0x20000e3c
    20ac:	00000000 	.word	0x00000000
    20b0:	20000dbc 	.word	0x20000dbc
    20b4:	00000000 	.word	0x00000000
    20b8:	b510      	push	{r4, lr}
    20ba:	4604      	mov	r4, r0
    20bc:	6800      	ldr	r0, [r0, #0]
    20be:	f00a fac3 	bl	c648 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    20c2:	4602      	mov	r2, r0
    20c4:	8960      	ldrh	r0, [r4, #10]
    20c6:	7a21      	ldrb	r1, [r4, #8]
    20c8:	4b14      	ldr	r3, [pc, #80]	; (211c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3d0>)
    20ca:	4408      	add	r0, r1
    20cc:	1c41      	adds	r1, r0, #1
    20ce:	1850      	adds	r0, r2, r1
    20d0:	429a      	cmp	r2, r3
    20d2:	d904      	bls.n	20de <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x392>
    20d4:	f240 6109 	movw	r1, #1545	; 0x609
    20d8:	2070      	movs	r0, #112	; 0x70
    20da:	f002 fb25 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20de:	4a10      	ldr	r2, [pc, #64]	; (2120 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3d4>)
    20e0:	4291      	cmp	r1, r2
    20e2:	dd04      	ble.n	20ee <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3a2>
    20e4:	f240 610a 	movw	r1, #1546	; 0x60a
    20e8:	2070      	movs	r0, #112	; 0x70
    20ea:	f002 fb1d 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20ee:	4a0d      	ldr	r2, [pc, #52]	; (2124 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3d8>)
    20f0:	4291      	cmp	r1, r2
    20f2:	da04      	bge.n	20fe <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3b2>
    20f4:	f240 610b 	movw	r1, #1547	; 0x60b
    20f8:	2070      	movs	r0, #112	; 0x70
    20fa:	f002 fb15 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20fe:	490a      	ldr	r1, [pc, #40]	; (2128 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3dc>)
    2100:	4281      	cmp	r1, r0
    2102:	bfde      	ittt	le
    2104:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2108:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    210c:	bd10      	pople	{r4, pc}
    210e:	2800      	cmp	r0, #0
    2110:	bfbc      	itt	lt
    2112:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2116:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    211a:	bd10      	pop	{r4, pc}
    211c:	1e847fff 	.word	0x1e847fff
    2120:	07a12000 	.word	0x07a12000
    2124:	f85ee000 	.word	0xf85ee000
    2128:	1e848000 	.word	0x1e848000
    212c:	f8df c054 	ldr.w	ip, [pc, #84]	; 2184 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x438>
    2130:	b510      	push	{r4, lr}
    2132:	2300      	movs	r3, #0
    2134:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    2138:	2807      	cmp	r0, #7
    213a:	d21e      	bcs.n	217a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x42e>
    213c:	e8df f000 	tbb	[pc, r0]
    2140:	05050505 	.word	0x05050505
    2144:	00040404 	.word	0x00040404
    2148:	2301      	movs	r3, #1
    214a:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    214e:	2b00      	cmp	r3, #0
    2150:	bf08      	it	eq
    2152:	bd10      	popeq	{r4, pc}
    2154:	480c      	ldr	r0, [pc, #48]	; (2188 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x43c>)
    2156:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    215a:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    215e:	2820      	cmp	r0, #32
    2160:	bf0e      	itee	eq
    2162:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    2166:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    216a:	7041      	strbne	r1, [r0, #1]
    216c:	2020      	movs	r0, #32
    216e:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    2172:	7058      	strb	r0, [r3, #1]
    2174:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    2178:	bd10      	pop	{r4, pc}
    217a:	f44f 7115 	mov.w	r1, #596	; 0x254
    217e:	2070      	movs	r0, #112	; 0x70
    2180:	f002 fad2 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2184:	20000dbc 	.word	0x20000dbc
    2188:	20000e3c 	.word	0x20000e3c
    218c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2190:	b083      	sub	sp, #12
    2192:	485c      	ldr	r0, [pc, #368]	; (2304 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b8>)
    2194:	9904      	ldr	r1, [sp, #16]
    2196:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    219a:	9001      	str	r0, [sp, #4]
    219c:	f890 4020 	ldrb.w	r4, [r0, #32]
    21a0:	9803      	ldr	r0, [sp, #12]
    21a2:	4625      	mov	r5, r4
    21a4:	2801      	cmp	r0, #1
    21a6:	bf18      	it	ne
    21a8:	2802      	cmpne	r0, #2
    21aa:	d005      	beq.n	21b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x46c>
    21ac:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    21b0:	f04f 0070 	mov.w	r0, #112	; 0x70
    21b4:	f002 fab8 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    21b8:	2700      	movs	r7, #0
    21ba:	2d20      	cmp	r5, #32
    21bc:	d04a      	beq.n	2254 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x508>
    21be:	4851      	ldr	r0, [pc, #324]	; (2304 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b8>)
    21c0:	9100      	str	r1, [sp, #0]
    21c2:	2600      	movs	r6, #0
    21c4:	7f80      	ldrb	r0, [r0, #30]
    21c6:	2800      	cmp	r0, #0
    21c8:	bf08      	it	eq
    21ca:	2602      	moveq	r6, #2
    21cc:	f001 fbd6 	bl	397c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    21d0:	f8df a138 	ldr.w	sl, [pc, #312]	; 230c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c0>
    21d4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    21d8:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    21dc:	f8df 9128 	ldr.w	r9, [pc, #296]	; 2308 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5bc>
    21e0:	688a      	ldr	r2, [r1, #8]
    21e2:	68c9      	ldr	r1, [r1, #12]
    21e4:	1a12      	subs	r2, r2, r0
    21e6:	1a09      	subs	r1, r1, r0
    21e8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    21ec:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    21f0:	4296      	cmp	r6, r2
    21f2:	bf98      	it	ls
    21f4:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    21f8:	d201      	bcs.n	21fe <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4b2>
    21fa:	4589      	cmp	r9, r1
    21fc:	d228      	bcs.n	2250 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x504>
    21fe:	4a44      	ldr	r2, [pc, #272]	; (2310 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c4>)
    2200:	9900      	ldr	r1, [sp, #0]
    2202:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    2206:	4622      	mov	r2, r4
    2208:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    220c:	784c      	ldrb	r4, [r1, #1]
    220e:	2c20      	cmp	r4, #32
    2210:	d016      	beq.n	2240 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4f4>
    2212:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2216:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    221a:	f8dc 8008 	ldr.w	r8, [ip, #8]
    221e:	f8dc c00c 	ldr.w	ip, [ip, #12]
    2222:	eba8 0800 	sub.w	r8, r8, r0
    2226:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    222a:	ebac 0100 	sub.w	r1, ip, r0
    222e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2232:	4546      	cmp	r6, r8
    2234:	bf98      	it	ls
    2236:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    223a:	d2e4      	bcs.n	2206 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4ba>
    223c:	4589      	cmp	r9, r1
    223e:	d3e2      	bcc.n	2206 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4ba>
    2240:	2a20      	cmp	r2, #32
    2242:	d005      	beq.n	2250 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x504>
    2244:	2120      	movs	r1, #32
    2246:	2004      	movs	r0, #4
    2248:	9b00      	ldr	r3, [sp, #0]
    224a:	f7ff f901 	bl	1450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    224e:	4604      	mov	r4, r0
    2250:	42ac      	cmp	r4, r5
    2252:	d115      	bne.n	2280 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x534>
    2254:	482f      	ldr	r0, [pc, #188]	; (2314 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c8>)
    2256:	2800      	cmp	r0, #0
    2258:	bf18      	it	ne
    225a:	f3af 8000 	nopne.w
    225e:	f001 fb8d 	bl	397c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2262:	4c28      	ldr	r4, [pc, #160]	; (2304 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b8>)
    2264:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    2268:	2920      	cmp	r1, #32
    226a:	d00d      	beq.n	2288 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x53c>
    226c:	68e1      	ldr	r1, [r4, #12]
    226e:	1c82      	adds	r2, r0, #2
    2270:	1a51      	subs	r1, r2, r1
    2272:	0209      	lsls	r1, r1, #8
    2274:	17ca      	asrs	r2, r1, #31
    2276:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    227a:	1209      	asrs	r1, r1, #8
    227c:	2900      	cmp	r1, #0
    227e:	dd03      	ble.n	2288 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x53c>
    2280:	b005      	add	sp, #20
    2282:	2000      	movs	r0, #0
    2284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2288:	2d20      	cmp	r5, #32
    228a:	d00d      	beq.n	22a8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x55c>
    228c:	462a      	mov	r2, r5
    228e:	9903      	ldr	r1, [sp, #12]
    2290:	f7ff fb16 	bl	18c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x48c>
    2294:	b358      	cbz	r0, 22ee <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5a2>
    2296:	9801      	ldr	r0, [sp, #4]
    2298:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    229c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    22a0:	b005      	add	sp, #20
    22a2:	2001      	movs	r0, #1
    22a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22a8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    22ac:	b118      	cbz	r0, 22b6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x56a>
    22ae:	f002 f881 	bl	43b4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    22b2:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    22b6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    22ba:	b150      	cbz	r0, 22d2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x586>
    22bc:	4916      	ldr	r1, [pc, #88]	; (2318 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5cc>)
    22be:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    22c2:	6008      	str	r0, [r1, #0]
    22c4:	2005      	movs	r0, #5
    22c6:	f001 fda7 	bl	3e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    22ca:	f002 f8db 	bl	4484 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    22ce:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    22d2:	2004      	movs	r0, #4
    22d4:	f001 fda0 	bl	3e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    22d8:	f001 fe06 	bl	3ee8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    22dc:	2020      	movs	r0, #32
    22de:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    22e2:	480e      	ldr	r0, [pc, #56]	; (231c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5d0>)
    22e4:	6880      	ldr	r0, [r0, #8]
    22e6:	6007      	str	r7, [r0, #0]
    22e8:	480d      	ldr	r0, [pc, #52]	; (2320 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5d4>)
    22ea:	6007      	str	r7, [r0, #0]
    22ec:	e7d8      	b.n	22a0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x554>
    22ee:	462a      	mov	r2, r5
    22f0:	2120      	movs	r1, #32
    22f2:	2004      	movs	r0, #4
    22f4:	9b04      	ldr	r3, [sp, #16]
    22f6:	f7ff f8ab 	bl	1450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    22fa:	b005      	add	sp, #20
    22fc:	2000      	movs	r0, #0
    22fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2302:	0000      	.short	0x0000
    2304:	20000e3c 	.word	0x20000e3c
    2308:	003fffff 	.word	0x003fffff
    230c:	20000abc 	.word	0x20000abc
    2310:	20000dbc 	.word	0x20000dbc
    2314:	00000000 	.word	0x00000000
    2318:	4001f508 	.word	0x4001f508
    231c:	20000010 	.word	0x20000010
    2320:	40000508 	.word	0x40000508

00002324 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    2324:	4906      	ldr	r1, [pc, #24]	; (2340 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    2326:	b510      	push	{r4, lr}
    2328:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    232c:	2a20      	cmp	r2, #32
    232e:	bf1c      	itt	ne
    2330:	7788      	strbne	r0, [r1, #30]
    2332:	bd10      	popne	{r4, pc}
    2334:	f240 31ea 	movw	r1, #1002	; 0x3ea
    2338:	2070      	movs	r0, #112	; 0x70
    233a:	f002 f9f5 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    233e:	0000      	.short	0x0000
    2340:	20000e3c 	.word	0x20000e3c

00002344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    2344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2348:	4e5b      	ldr	r6, [pc, #364]	; (24b8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    234a:	4681      	mov	r9, r0
    234c:	b085      	sub	sp, #20
    234e:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2352:	468a      	mov	sl, r1
    2354:	2820      	cmp	r0, #32
    2356:	d04d      	beq.n	23f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    2358:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    235c:	f106 040c 	add.w	r4, r6, #12
    2360:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2364:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    2368:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    236c:	2020      	movs	r0, #32
    236e:	f88d 0000 	strb.w	r0, [sp]
    2372:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2376:	aa03      	add	r2, sp, #12
    2378:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    237c:	a901      	add	r1, sp, #4
    237e:	f890 5020 	ldrb.w	r5, [r0, #32]
    2382:	6930      	ldr	r0, [r6, #16]
    2384:	9002      	str	r0, [sp, #8]
    2386:	6830      	ldr	r0, [r6, #0]
    2388:	4448      	add	r0, r9
    238a:	f001 f9a1 	bl	36d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    238e:	68f8      	ldr	r0, [r7, #12]
    2390:	9901      	ldr	r1, [sp, #4]
    2392:	4a4a      	ldr	r2, [pc, #296]	; (24bc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    2394:	4408      	add	r0, r1
    2396:	f1a9 0164 	sub.w	r1, r9, #100	; 0x64
    239a:	4291      	cmp	r1, r2
    239c:	d82f      	bhi.n	23fe <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    239e:	68b9      	ldr	r1, [r7, #8]
    23a0:	1a41      	subs	r1, r0, r1
    23a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    23a6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    23aa:	d228      	bcs.n	23fe <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    23ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23b0:	6060      	str	r0, [r4, #4]
    23b2:	4630      	mov	r0, r6
    23b4:	f884 a00c 	strb.w	sl, [r4, #12]
    23b8:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    23bc:	46ea      	mov	sl, sp
    23be:	2d20      	cmp	r5, #32
    23c0:	bf1c      	itt	ne
    23c2:	493f      	ldrne	r1, [pc, #252]	; (24c0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    23c4:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    23c8:	d03c      	beq.n	2444 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    23ca:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    23ce:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    23d2:	6860      	ldr	r0, [r4, #4]
    23d4:	68ba      	ldr	r2, [r7, #8]
    23d6:	4621      	mov	r1, r4
    23d8:	1a10      	subs	r0, r2, r0
    23da:	0200      	lsls	r0, r0, #8
    23dc:	17c2      	asrs	r2, r0, #31
    23de:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    23e2:	f107 0608 	add.w	r6, r7, #8
    23e6:	1200      	asrs	r0, r0, #8
    23e8:	d41b      	bmi.n	2422 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    23ea:	8970      	ldrh	r0, [r6, #10]
    23ec:	b350      	cbz	r0, 2444 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    23ee:	8948      	ldrh	r0, [r1, #10]
    23f0:	b148      	cbz	r0, 2406 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    23f2:	e027      	b.n	2444 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    23f4:	f640 317b 	movw	r1, #2939	; 0xb7b
    23f8:	2070      	movs	r0, #112	; 0x70
    23fa:	f002 f995 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23fe:	b005      	add	sp, #20
    2400:	2001      	movs	r0, #1
    2402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2406:	4620      	mov	r0, r4
    2408:	f7ff fe56 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    240c:	f001 f944 	bl	3698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2410:	6831      	ldr	r1, [r6, #0]
    2412:	1a08      	subs	r0, r1, r0
    2414:	0200      	lsls	r0, r0, #8
    2416:	17c1      	asrs	r1, r0, #31
    2418:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    241c:	1200      	asrs	r0, r0, #8
    241e:	2833      	cmp	r0, #51	; 0x33
    2420:	da10      	bge.n	2444 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    2422:	f88a 5000 	strb.w	r5, [sl]
    2426:	7d39      	ldrb	r1, [r7, #20]
    2428:	7b20      	ldrb	r0, [r4, #12]
    242a:	4281      	cmp	r1, r0
    242c:	d805      	bhi.n	243a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    242e:	9802      	ldr	r0, [sp, #8]
    2430:	6060      	str	r0, [r4, #4]
    2432:	b005      	add	sp, #20
    2434:	2002      	movs	r0, #2
    2436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    243a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    243e:	7845      	ldrb	r5, [r0, #1]
    2440:	2d20      	cmp	r5, #32
    2442:	d1c2      	bne.n	23ca <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    2444:	2005      	movs	r0, #5
    2446:	f001 fce7 	bl	3e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    244a:	4c1b      	ldr	r4, [pc, #108]	; (24b8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    244c:	f04f 30ff 	mov.w	r0, #4294967295
    2450:	60a0      	str	r0, [r4, #8]
    2452:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    2456:	f89d 2000 	ldrb.w	r2, [sp]
    245a:	2120      	movs	r1, #32
    245c:	2a20      	cmp	r2, #32
    245e:	bf13      	iteet	ne
    2460:	2005      	movne	r0, #5
    2462:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    2466:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    246a:	f7fe fff1 	blne	1450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    246e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    2472:	4913      	ldr	r1, [pc, #76]	; (24c0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    2474:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    2478:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    247c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    2480:	7048      	strb	r0, [r1, #1]
    2482:	6820      	ldr	r0, [r4, #0]
    2484:	4448      	add	r0, r9
    2486:	6020      	str	r0, [r4, #0]
    2488:	2001      	movs	r0, #1
    248a:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    248e:	7e60      	ldrb	r0, [r4, #25]
    2490:	2801      	cmp	r0, #1
    2492:	d105      	bne.n	24a0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    2494:	6920      	ldr	r0, [r4, #16]
    2496:	1e40      	subs	r0, r0, #1
    2498:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    249c:	f001 fb0e 	bl	3abc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    24a0:	f89d 0000 	ldrb.w	r0, [sp]
    24a4:	2820      	cmp	r0, #32
    24a6:	d003      	beq.n	24b0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    24a8:	4806      	ldr	r0, [pc, #24]	; (24c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    24aa:	7840      	ldrb	r0, [r0, #1]
    24ac:	f002 fa0c 	bl	48c8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    24b0:	b005      	add	sp, #20
    24b2:	2000      	movs	r0, #0
    24b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24b8:	20000e3c 	.word	0x20000e3c
    24bc:	07a11f9c 	.word	0x07a11f9c
    24c0:	20000dbc 	.word	0x20000dbc
    24c4:	20000010 	.word	0x20000010

000024c8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    24c8:	4806      	ldr	r0, [pc, #24]	; (24e4 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    24ca:	b510      	push	{r4, lr}
    24cc:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    24d0:	2920      	cmp	r1, #32
    24d2:	bf1c      	itt	ne
    24d4:	7e00      	ldrbne	r0, [r0, #24]
    24d6:	bd10      	popne	{r4, pc}
    24d8:	f640 3174 	movw	r1, #2932	; 0xb74
    24dc:	2070      	movs	r0, #112	; 0x70
    24de:	f002 f923 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24e2:	0000      	.short	0x0000
    24e4:	20000e3c 	.word	0x20000e3c

000024e8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    24e8:	4602      	mov	r2, r0
    24ea:	4b14      	ldr	r3, [pc, #80]	; (253c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    24ec:	b510      	push	{r4, lr}
    24ee:	4408      	add	r0, r1
    24f0:	429a      	cmp	r2, r3
    24f2:	d904      	bls.n	24fe <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    24f4:	f240 6109 	movw	r1, #1545	; 0x609
    24f8:	2070      	movs	r0, #112	; 0x70
    24fa:	f002 f915 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24fe:	4a10      	ldr	r2, [pc, #64]	; (2540 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    2500:	4291      	cmp	r1, r2
    2502:	dd04      	ble.n	250e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    2504:	f240 610a 	movw	r1, #1546	; 0x60a
    2508:	2070      	movs	r0, #112	; 0x70
    250a:	f002 f90d 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    250e:	4a0d      	ldr	r2, [pc, #52]	; (2544 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    2510:	4291      	cmp	r1, r2
    2512:	da04      	bge.n	251e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    2514:	f240 610b 	movw	r1, #1547	; 0x60b
    2518:	2070      	movs	r0, #112	; 0x70
    251a:	f002 f905 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    251e:	490a      	ldr	r1, [pc, #40]	; (2548 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    2520:	4281      	cmp	r1, r0
    2522:	bfde      	ittt	le
    2524:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2528:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    252c:	bd10      	pople	{r4, pc}
    252e:	2800      	cmp	r0, #0
    2530:	bfbc      	itt	lt
    2532:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2536:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    253a:	bd10      	pop	{r4, pc}
    253c:	1e847fff 	.word	0x1e847fff
    2540:	07a12000 	.word	0x07a12000
    2544:	f85ee000 	.word	0xf85ee000
    2548:	1e848000 	.word	0x1e848000

0000254c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    254c:	4a10      	ldr	r2, [pc, #64]	; (2590 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    254e:	1a0b      	subs	r3, r1, r0
    2550:	f102 0c01 	add.w	ip, r2, #1
    2554:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    2558:	bf3c      	itt	cc
    255a:	4618      	movcc	r0, r3
    255c:	4770      	bxcc	lr
    255e:	b510      	push	{r4, lr}
    2560:	1a44      	subs	r4, r0, r1
    2562:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    2566:	bf3c      	itt	cc
    2568:	4618      	movcc	r0, r3
    256a:	bd10      	popcc	{r4, pc}
    256c:	429a      	cmp	r2, r3
    256e:	d203      	bcs.n	2578 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    2570:	1a10      	subs	r0, r2, r0
    2572:	4408      	add	r0, r1
    2574:	1c40      	adds	r0, r0, #1
    2576:	bd10      	pop	{r4, pc}
    2578:	42a2      	cmp	r2, r4
    257a:	d204      	bcs.n	2586 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    257c:	1a51      	subs	r1, r2, r1
    257e:	4408      	add	r0, r1
    2580:	1c40      	adds	r0, r0, #1
    2582:	4240      	negs	r0, r0
    2584:	bd10      	pop	{r4, pc}
    2586:	f640 310c 	movw	r1, #2828	; 0xb0c
    258a:	2070      	movs	r0, #112	; 0x70
    258c:	f002 f8cc 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2590:	1e847fff 	.word	0x1e847fff

00002594 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    2594:	490e      	ldr	r1, [pc, #56]	; (25d0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    2596:	b510      	push	{r4, lr}
    2598:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    259c:	2820      	cmp	r0, #32
    259e:	d012      	beq.n	25c6 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    25a0:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    25a4:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    25a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    25ac:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    25b0:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    25b4:	6840      	ldr	r0, [r0, #4]
    25b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    25ba:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    25be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    25c2:	2104      	movs	r1, #4
    25c4:	4710      	bx	r2
    25c6:	f640 01bc 	movw	r1, #2236	; 0x8bc
    25ca:	2070      	movs	r0, #112	; 0x70
    25cc:	f002 f8ac 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25d0:	20000e3c 	.word	0x20000e3c

000025d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    25d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25d6:	4d6d      	ldr	r5, [pc, #436]	; (278c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    25d8:	496d      	ldr	r1, [pc, #436]	; (2790 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    25da:	2601      	movs	r6, #1
    25dc:	f505 7460 	add.w	r4, r5, #896	; 0x380
    25e0:	2808      	cmp	r0, #8
    25e2:	d273      	bcs.n	26cc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    25e4:	e8df f000 	tbb	[pc, r0]
    25e8:	af9d6704 	.word	0xaf9d6704
    25ec:	b9b444cd 	.word	0xb9b444cd
    25f0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    25f4:	b918      	cbnz	r0, 25fe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    25f6:	f001 fef9 	bl	43ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    25fa:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    25fe:	8ae0      	ldrh	r0, [r4, #22]
    2600:	b110      	cbz	r0, 2608 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    2602:	f002 f82d 	bl	4660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2606:	b188      	cbz	r0, 262c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    2608:	f7ff fcbe 	bl	1f88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>
    260c:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    2610:	68a1      	ldr	r1, [r4, #8]
    2612:	f1b1 3fff 	cmp.w	r1, #4294967295
    2616:	d005      	beq.n	2624 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    2618:	2301      	movs	r3, #1
    261a:	2203      	movs	r2, #3
    261c:	2005      	movs	r0, #5
    261e:	f001 fb33 	bl	3c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2622:	b140      	cbz	r0, 2636 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    2624:	7e60      	ldrb	r0, [r4, #25]
    2626:	2801      	cmp	r0, #1
    2628:	d110      	bne.n	264c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    262a:	e009      	b.n	2640 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    262c:	f44f 6107 	mov.w	r1, #2160	; 0x870
    2630:	2070      	movs	r0, #112	; 0x70
    2632:	f002 f879 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2636:	f640 0175 	movw	r1, #2165	; 0x875
    263a:	2070      	movs	r0, #112	; 0x70
    263c:	f002 f874 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2640:	6920      	ldr	r0, [r4, #16]
    2642:	1e40      	subs	r0, r0, #1
    2644:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2648:	f001 fa38 	bl	3abc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    264c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2650:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2654:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2658:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    265c:	6840      	ldr	r0, [r0, #4]
    265e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2662:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2666:	b001      	add	sp, #4
    2668:	2101      	movs	r1, #1
    266a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    266e:	4710      	bx	r2
    2670:	f7ff fc8a 	bl	1f88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>
    2674:	f04f 30ff 	mov.w	r0, #4294967295
    2678:	60a0      	str	r0, [r4, #8]
    267a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    267e:	f88d 0000 	strb.w	r0, [sp]
    2682:	f89d 0000 	ldrb.w	r0, [sp]
    2686:	b188      	cbz	r0, 26ac <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    2688:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    268c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2690:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2694:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2698:	6840      	ldr	r0, [r0, #4]
    269a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    269e:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    26a2:	b001      	add	sp, #4
    26a4:	2106      	movs	r1, #6
    26a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    26aa:	4710      	bx	r2
    26ac:	f640 0186 	movw	r1, #2182	; 0x886
    26b0:	2070      	movs	r0, #112	; 0x70
    26b2:	f002 f839 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26b6:	f7ff fc67 	bl	1f88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>
    26ba:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    26be:	f001 ffcf 	bl	4660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    26c2:	b120      	cbz	r0, 26ce <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    26c4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    26c8:	b130      	cbz	r0, 26d8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    26ca:	e009      	b.n	26e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    26cc:	e059      	b.n	2782 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    26ce:	f640 0196 	movw	r1, #2198	; 0x896
    26d2:	2070      	movs	r0, #112	; 0x70
    26d4:	f002 f828 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26d8:	f001 fe88 	bl	43ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    26dc:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    26e0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    26e4:	b158      	cbz	r0, 26fe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    26e6:	492b      	ldr	r1, [pc, #172]	; (2794 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    26e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    26ec:	6008      	str	r0, [r1, #0]
    26ee:	2005      	movs	r0, #5
    26f0:	f001 fb92 	bl	3e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    26f4:	f001 fec6 	bl	4484 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    26f8:	2000      	movs	r0, #0
    26fa:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    26fe:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2702:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2706:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    270a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    270e:	6840      	ldr	r0, [r0, #4]
    2710:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2714:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2718:	b001      	add	sp, #4
    271a:	2100      	movs	r1, #0
    271c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2720:	4710      	bx	r2
    2722:	f001 fc2b 	bl	3f7c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    2726:	8ae0      	ldrh	r0, [r4, #22]
    2728:	b110      	cbz	r0, 2730 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    272a:	f001 ff99 	bl	4660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    272e:	b128      	cbz	r0, 273c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    2730:	4819      	ldr	r0, [pc, #100]	; (2798 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    2732:	7800      	ldrb	r0, [r0, #0]
    2734:	2803      	cmp	r0, #3
    2736:	bf08      	it	eq
    2738:	7766      	strbeq	r6, [r4, #29]
    273a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    273c:	f640 01a1 	movw	r1, #2209	; 0x8a1
    2740:	2070      	movs	r0, #112	; 0x70
    2742:	f001 fff1 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2746:	4815      	ldr	r0, [pc, #84]	; (279c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    2748:	6006      	str	r6, [r0, #0]
    274a:	6888      	ldr	r0, [r1, #8]
    274c:	6006      	str	r6, [r0, #0]
    274e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2750:	7808      	ldrb	r0, [r1, #0]
    2752:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2756:	f002 b8b7 	b.w	48c8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    275a:	f7ff fc15 	bl	1f88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>
    275e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2762:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2766:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    276a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    276e:	6840      	ldr	r0, [r0, #4]
    2770:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2774:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2778:	b001      	add	sp, #4
    277a:	2105      	movs	r1, #5
    277c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2780:	4710      	bx	r2
    2782:	f640 01b4 	movw	r1, #2228	; 0x8b4
    2786:	2070      	movs	r0, #112	; 0x70
    2788:	f001 ffce 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    278c:	20000abc 	.word	0x20000abc
    2790:	20000010 	.word	0x20000010
    2794:	4001f508 	.word	0x4001f508
    2798:	20000012 	.word	0x20000012
    279c:	40000508 	.word	0x40000508

000027a0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    27a0:	4803      	ldr	r0, [pc, #12]	; (27b0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    27a2:	b510      	push	{r4, lr}
    27a4:	7840      	ldrb	r0, [r0, #1]
    27a6:	f009 ff4f 	bl	c648 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    27aa:	b280      	uxth	r0, r0
    27ac:	bd10      	pop	{r4, pc}
    27ae:	0000      	.short	0x0000
    27b0:	20000012 	.word	0x20000012

000027b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    27b4:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27b8:	4682      	mov	sl, r0
    27ba:	48dc      	ldr	r0, [pc, #880]	; (2b2c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    27bc:	b08b      	sub	sp, #44	; 0x2c
    27be:	6800      	ldr	r0, [r0, #0]
    27c0:	4ddb      	ldr	r5, [pc, #876]	; (2b30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    27c2:	05c0      	lsls	r0, r0, #23
    27c4:	0dc0      	lsrs	r0, r0, #23
    27c6:	d00e      	beq.n	27e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    27c8:	3810      	subs	r0, #16
    27ca:	b240      	sxtb	r0, r0
    27cc:	2800      	cmp	r0, #0
    27ce:	bfb8      	it	lt
    27d0:	f000 000f 	andlt.w	r0, r0, #15
    27d4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    27d8:	bfac      	ite	ge
    27da:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    27de:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    27e2:	0940      	lsrs	r0, r0, #5
    27e4:	d00d      	beq.n	2802 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    27e6:	980c      	ldr	r0, [sp, #48]	; 0x30
    27e8:	f04f 0b00 	mov.w	fp, #0
    27ec:	7800      	ldrb	r0, [r0, #0]
    27ee:	2800      	cmp	r0, #0
    27f0:	bf18      	it	ne
    27f2:	2801      	cmpne	r0, #1
    27f4:	d018      	beq.n	2828 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    27f6:	f240 714f 	movw	r1, #1871	; 0x74f
    27fa:	f04f 0070 	mov.w	r0, #112	; 0x70
    27fe:	f001 ff93 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2802:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2806:	f04f 0b01 	mov.w	fp, #1
    280a:	2820      	cmp	r0, #32
    280c:	d007      	beq.n	281e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    280e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2810:	7800      	ldrb	r0, [r0, #0]
    2812:	b148      	cbz	r0, 2828 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    2814:	f240 714b 	movw	r1, #1867	; 0x74b
    2818:	2070      	movs	r0, #112	; 0x70
    281a:	f001 ff85 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    281e:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    2822:	2070      	movs	r0, #112	; 0x70
    2824:	f001 ff80 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2828:	4cc2      	ldr	r4, [pc, #776]	; (2b34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    282a:	b124      	cbz	r4, 2836 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    282c:	2100      	movs	r1, #0
    282e:	f240 7052 	movw	r0, #1874	; 0x752
    2832:	f3af 8000 	nop.w
    2836:	49c0      	ldr	r1, [pc, #768]	; (2b38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    2838:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    283c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2840:	f04f 0801 	mov.w	r8, #1
    2844:	9000      	str	r0, [sp, #0]
    2846:	b124      	cbz	r4, 2852 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    2848:	2100      	movs	r1, #0
    284a:	f240 705a 	movw	r0, #1882	; 0x75a
    284e:	f3af 8000 	nop.w
    2852:	f1b8 0f00 	cmp.w	r8, #0
    2856:	d009      	beq.n	286c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    2858:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    285c:	f04f 0900 	mov.w	r9, #0
    2860:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    2864:	f1bb 0f00 	cmp.w	fp, #0
    2868:	d007      	beq.n	287a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    286a:	e032      	b.n	28d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    286c:	48b3      	ldr	r0, [pc, #716]	; (2b3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    286e:	2800      	cmp	r0, #0
    2870:	bf18      	it	ne
    2872:	f3af 8000 	nopne.w
    2876:	b662      	cpsie	i
    2878:	e7ee      	b.n	2858 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    287a:	4637      	mov	r7, r6
    287c:	2001      	movs	r0, #1
    287e:	ea20 0607 	bic.w	r6, r0, r7
    2882:	48af      	ldr	r0, [pc, #700]	; (2b40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    2884:	2240      	movs	r2, #64	; 0x40
    2886:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    288a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    288e:	f00a f849 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2892:	b124      	cbz	r4, 289e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    2894:	2100      	movs	r1, #0
    2896:	f240 50cd 	movw	r0, #1485	; 0x5cd
    289a:	f3af 8000 	nop.w
    289e:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    28a2:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    28a6:	6a09      	ldr	r1, [r1, #32]
    28a8:	6201      	str	r1, [r0, #32]
    28aa:	b124      	cbz	r4, 28b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    28ac:	2100      	movs	r1, #0
    28ae:	f240 50d1 	movw	r0, #1489	; 0x5d1
    28b2:	f3af 8000 	nop.w
    28b6:	b124      	cbz	r4, 28c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    28b8:	2100      	movs	r1, #0
    28ba:	f240 7064 	movw	r0, #1892	; 0x764
    28be:	f3af 8000 	nop.w
    28c2:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    28c6:	f88d 0004 	strb.w	r0, [sp, #4]
    28ca:	f89d 0004 	ldrb.w	r0, [sp, #4]
    28ce:	2800      	cmp	r0, #0
    28d0:	d1b9      	bne.n	2846 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    28d2:	b124      	cbz	r4, 28de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    28d4:	2100      	movs	r1, #0
    28d6:	f240 706e 	movw	r0, #1902	; 0x76e
    28da:	f3af 8000 	nop.w
    28de:	f001 f84d 	bl	397c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    28e2:	4680      	mov	r8, r0
    28e4:	4633      	mov	r3, r6
    28e6:	aa06      	add	r2, sp, #24
    28e8:	990c      	ldr	r1, [sp, #48]	; 0x30
    28ea:	f7ff fa79 	bl	1de0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>
    28ee:	b124      	cbz	r4, 28fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    28f0:	2100      	movs	r1, #0
    28f2:	f240 7075 	movw	r0, #1909	; 0x775
    28f6:	f3af 8000 	nop.w
    28fa:	4991      	ldr	r1, [pc, #580]	; (2b40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    28fc:	a806      	add	r0, sp, #24
    28fe:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    2902:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    2906:	2901      	cmp	r1, #1
    2908:	bf18      	it	ne
    290a:	2902      	cmpne	r1, #2
    290c:	d13c      	bne.n	2988 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    290e:	9906      	ldr	r1, [sp, #24]
    2910:	9b07      	ldr	r3, [sp, #28]
    2912:	eba1 0108 	sub.w	r1, r1, r8
    2916:	4a8b      	ldr	r2, [pc, #556]	; (2b44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    2918:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    291c:	eba3 0308 	sub.w	r3, r3, r8
    2920:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2924:	2902      	cmp	r1, #2
    2926:	d371      	bcc.n	2a0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    2928:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    292c:	d26e      	bcs.n	2a0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    292e:	429a      	cmp	r2, r3
    2930:	d36c      	bcc.n	2a0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    2932:	f04f 0901 	mov.w	r9, #1
    2936:	ab01      	add	r3, sp, #4
    2938:	aa05      	add	r2, sp, #20
    293a:	4631      	mov	r1, r6
    293c:	f7fe ff40 	bl	17c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x38c>
    2940:	2800      	cmp	r0, #0
    2942:	d06b      	beq.n	2a1c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    2944:	f89d 1014 	ldrb.w	r1, [sp, #20]
    2948:	f89d 2004 	ldrb.w	r2, [sp, #4]
    294c:	4633      	mov	r3, r6
    294e:	428a      	cmp	r2, r1
    2950:	d068      	beq.n	2a24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    2952:	2005      	movs	r0, #5
    2954:	f7fe fd7c 	bl	1450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2958:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    295c:	7048      	strb	r0, [r1, #1]
    295e:	f89d 0014 	ldrb.w	r0, [sp, #20]
    2962:	2820      	cmp	r0, #32
    2964:	bf03      	ittte	eq
    2966:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    296a:	f880 a020 	strbeq.w	sl, [r0, #32]
    296e:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    2972:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    2976:	bf18      	it	ne
    2978:	f880 a001 	strbne.w	sl, [r0, #1]
    297c:	4632      	mov	r2, r6
    297e:	4651      	mov	r1, sl
    2980:	f05f 0003 	movs.w	r0, #3
    2984:	f7ff fbd2 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    2988:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    298c:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    2990:	f88d 0004 	strb.w	r0, [sp, #4]
    2994:	f89d 7004 	ldrb.w	r7, [sp, #4]
    2998:	b124      	cbz	r4, 29a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    299a:	2100      	movs	r1, #0
    299c:	f240 707c 	movw	r0, #1916	; 0x77c
    29a0:	f3af 8000 	nop.w
    29a4:	4868      	ldr	r0, [pc, #416]	; (2b48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    29a6:	2800      	cmp	r0, #0
    29a8:	bf18      	it	ne
    29aa:	f3af 8000 	nopne.w
    29ae:	f3ef 8810 	mrs	r8, PRIMASK
    29b2:	b672      	cpsid	i
    29b4:	b124      	cbz	r4, 29c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    29b6:	2100      	movs	r1, #0
    29b8:	f240 7082 	movw	r0, #1922	; 0x782
    29bc:	f3af 8000 	nop.w
    29c0:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    29c4:	f88d 0004 	strb.w	r0, [sp, #4]
    29c8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    29cc:	2800      	cmp	r0, #0
    29ce:	f47f af3a 	bne.w	2846 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    29d2:	b124      	cbz	r4, 29de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    29d4:	2100      	movs	r1, #0
    29d6:	f240 708a 	movw	r0, #1930	; 0x78a
    29da:	f3af 8000 	nop.w
    29de:	f10d 0e18 	add.w	lr, sp, #24
    29e2:	9800      	ldr	r0, [sp, #0]
    29e4:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    29e8:	f100 0008 	add.w	r0, r0, #8
    29ec:	f1b9 0f00 	cmp.w	r9, #0
    29f0:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    29f4:	d044      	beq.n	2a80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    29f6:	b124      	cbz	r4, 2a02 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    29f8:	2100      	movs	r1, #0
    29fa:	f240 7097 	movw	r0, #1943	; 0x797
    29fe:	f3af 8000 	nop.w
    2a02:	f1bb 0f00 	cmp.w	fp, #0
    2a06:	d12c      	bne.n	2a62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2a08:	e016      	b.n	2a38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    2a0a:	e7ff      	b.n	2a0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    2a0c:	4632      	mov	r2, r6
    2a0e:	4651      	mov	r1, sl
    2a10:	2004      	movs	r0, #4
    2a12:	f7ff fb8b 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    2a16:	f04f 0901 	mov.w	r9, #1
    2a1a:	e7b5      	b.n	2988 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    2a1c:	4632      	mov	r2, r6
    2a1e:	4651      	mov	r1, sl
    2a20:	2004      	movs	r0, #4
    2a22:	e7af      	b.n	2984 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    2a24:	2920      	cmp	r1, #32
    2a26:	bf19      	ittee	ne
    2a28:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    2a2c:	7840      	ldrbne	r0, [r0, #1]
    2a2e:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    2a32:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    2a36:	e78f      	b.n	2958 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    2a38:	b19f      	cbz	r7, 2a62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2a3a:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2a3e:	2820      	cmp	r0, #32
    2a40:	d10f      	bne.n	2a62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2a42:	b124      	cbz	r4, 2a4e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    2a44:	2100      	movs	r1, #0
    2a46:	f240 709c 	movw	r0, #1948	; 0x79c
    2a4a:	f3af 8000 	nop.w
    2a4e:	4631      	mov	r1, r6
    2a50:	2002      	movs	r0, #2
    2a52:	f7ff fb9b 	bl	218c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x440>
    2a56:	b920      	cbnz	r0, 2a62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2a58:	980c      	ldr	r0, [sp, #48]	; 0x30
    2a5a:	7800      	ldrb	r0, [r0, #0]
    2a5c:	b3f0      	cbz	r0, 2adc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    2a5e:	2801      	cmp	r0, #1
    2a60:	d04c      	beq.n	2afc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    2a62:	b124      	cbz	r4, 2a6e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    2a64:	2100      	movs	r1, #0
    2a66:	f240 70b9 	movw	r0, #1977	; 0x7b9
    2a6a:	f3af 8000 	nop.w
    2a6e:	f1bb 0f00 	cmp.w	fp, #0
    2a72:	bf18      	it	ne
    2a74:	2001      	movne	r0, #1
    2a76:	d04a      	beq.n	2b0e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    2a78:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    2a7c:	f04f 0901 	mov.w	r9, #1
    2a80:	b124      	cbz	r4, 2a8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    2a82:	2100      	movs	r1, #0
    2a84:	f240 70ca 	movw	r0, #1994	; 0x7ca
    2a88:	f3af 8000 	nop.w
    2a8c:	f1b8 0f00 	cmp.w	r8, #0
    2a90:	d045      	beq.n	2b1e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    2a92:	b124      	cbz	r4, 2a9e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    2a94:	2100      	movs	r1, #0
    2a96:	f240 70ce 	movw	r0, #1998	; 0x7ce
    2a9a:	f3af 8000 	nop.w
    2a9e:	f1b9 0f00 	cmp.w	r9, #0
    2aa2:	d011      	beq.n	2ac8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    2aa4:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2aa8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2aac:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2ab0:	2820      	cmp	r0, #32
    2ab2:	d009      	beq.n	2ac8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    2ab4:	b124      	cbz	r4, 2ac0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    2ab6:	2100      	movs	r1, #0
    2ab8:	f240 70d5 	movw	r0, #2005	; 0x7d5
    2abc:	f3af 8000 	nop.w
    2ac0:	4822      	ldr	r0, [pc, #136]	; (2b4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    2ac2:	7840      	ldrb	r0, [r0, #1]
    2ac4:	f001 ff00 	bl	48c8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2ac8:	b124      	cbz	r4, 2ad4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    2aca:	2100      	movs	r1, #0
    2acc:	f240 70da 	movw	r0, #2010	; 0x7da
    2ad0:	f3af 8000 	nop.w
    2ad4:	b00d      	add	sp, #52	; 0x34
    2ad6:	4648      	mov	r0, r9
    2ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2adc:	e7ff      	b.n	2ade <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    2ade:	b124      	cbz	r4, 2aea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    2ae0:	2100      	movs	r1, #0
    2ae2:	f240 70a4 	movw	r0, #1956	; 0x7a4
    2ae6:	f3af 8000 	nop.w
    2aea:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    2aee:	4651      	mov	r1, sl
    2af0:	2004      	movs	r0, #4
    2af2:	f7ff fb1b 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    2af6:	f04f 0901 	mov.w	r9, #1
    2afa:	e7c1      	b.n	2a80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    2afc:	2c00      	cmp	r4, #0
    2afe:	f43f aea2 	beq.w	2846 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2b02:	2100      	movs	r1, #0
    2b04:	f240 70af 	movw	r0, #1967	; 0x7af
    2b08:	f3af 8000 	nop.w
    2b0c:	e69b      	b.n	2846 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2b0e:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    2b12:	2001      	movs	r0, #1
    2b14:	ea20 0101 	bic.w	r1, r0, r1
    2b18:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    2b1c:	e7ac      	b.n	2a78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    2b1e:	4807      	ldr	r0, [pc, #28]	; (2b3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    2b20:	2800      	cmp	r0, #0
    2b22:	bf18      	it	ne
    2b24:	f3af 8000 	nopne.w
    2b28:	b662      	cpsie	i
    2b2a:	e7b2      	b.n	2a92 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    2b2c:	e000ed04 	.word	0xe000ed04
    2b30:	20000e3c 	.word	0x20000e3c
    2b34:	00000000 	.word	0x00000000
    2b38:	20000abc 	.word	0x20000abc
    2b3c:	00000000 	.word	0x00000000
    2b40:	20000dbc 	.word	0x20000dbc
    2b44:	003fffff 	.word	0x003fffff
    2b48:	00000000 	.word	0x00000000
    2b4c:	20000010 	.word	0x20000010

00002b50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    2b50:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b54:	48a5      	ldr	r0, [pc, #660]	; (2dec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x29c>)
    2b56:	b08c      	sub	sp, #48	; 0x30
    2b58:	6800      	ldr	r0, [r0, #0]
    2b5a:	05c0      	lsls	r0, r0, #23
    2b5c:	0dc0      	lsrs	r0, r0, #23
    2b5e:	d011      	beq.n	2b84 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    2b60:	3810      	subs	r0, #16
    2b62:	b240      	sxtb	r0, r0
    2b64:	2800      	cmp	r0, #0
    2b66:	bfb8      	it	lt
    2b68:	f000 000f 	andlt.w	r0, r0, #15
    2b6c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2b70:	bfac      	ite	ge
    2b72:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2b76:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2b7a:	0940      	lsrs	r0, r0, #5
    2b7c:	bf08      	it	eq
    2b7e:	f04f 0901 	moveq.w	r9, #1
    2b82:	d001      	beq.n	2b88 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    2b84:	f04f 0900 	mov.w	r9, #0
    2b88:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b8a:	7800      	ldrb	r0, [r0, #0]
    2b8c:	2800      	cmp	r0, #0
    2b8e:	f04f 0000 	mov.w	r0, #0
    2b92:	bf1c      	itt	ne
    2b94:	b00d      	addne	sp, #52	; 0x34
    2b96:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b9a:	f8df a254 	ldr.w	sl, [pc, #596]	; 2df0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a0>
    2b9e:	4d95      	ldr	r5, [pc, #596]	; (2df4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>)
    2ba0:	4c95      	ldr	r4, [pc, #596]	; (2df8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    2ba2:	f04f 0b00 	mov.w	fp, #0
    2ba6:	900b      	str	r0, [sp, #44]	; 0x2c
    2ba8:	b125      	cbz	r5, 2bb4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    2baa:	2100      	movs	r1, #0
    2bac:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    2bb0:	f3af 8000 	nop.w
    2bb4:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    2bb8:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    2bbc:	f04f 0800 	mov.w	r8, #0
    2bc0:	b125      	cbz	r5, 2bcc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    2bc2:	2100      	movs	r1, #0
    2bc4:	f240 605d 	movw	r0, #1629	; 0x65d
    2bc8:	f3af 8000 	nop.w
    2bcc:	f1b9 0f00 	cmp.w	r9, #0
    2bd0:	d11d      	bne.n	2c0e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    2bd2:	4637      	mov	r7, r6
    2bd4:	2001      	movs	r0, #1
    2bd6:	ea20 0607 	bic.w	r6, r0, r7
    2bda:	4888      	ldr	r0, [pc, #544]	; (2dfc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    2bdc:	2240      	movs	r2, #64	; 0x40
    2bde:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2be2:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2be6:	f009 fe9d 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2bea:	b125      	cbz	r5, 2bf6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    2bec:	2100      	movs	r1, #0
    2bee:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2bf2:	f3af 8000 	nop.w
    2bf6:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    2bfa:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    2bfe:	6a09      	ldr	r1, [r1, #32]
    2c00:	6201      	str	r1, [r0, #32]
    2c02:	b125      	cbz	r5, 2c0e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    2c04:	2100      	movs	r1, #0
    2c06:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2c0a:	f3af 8000 	nop.w
    2c0e:	b125      	cbz	r5, 2c1a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    2c10:	2100      	movs	r1, #0
    2c12:	f240 6065 	movw	r0, #1637	; 0x665
    2c16:	f3af 8000 	nop.w
    2c1a:	f000 feaf 	bl	397c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2c1e:	4607      	mov	r7, r0
    2c20:	4633      	mov	r3, r6
    2c22:	466a      	mov	r2, sp
    2c24:	990c      	ldr	r1, [sp, #48]	; 0x30
    2c26:	f7ff f8db 	bl	1de0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>
    2c2a:	b125      	cbz	r5, 2c36 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    2c2c:	2100      	movs	r1, #0
    2c2e:	f240 606b 	movw	r0, #1643	; 0x66b
    2c32:	f3af 8000 	nop.w
    2c36:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2c3a:	2820      	cmp	r0, #32
    2c3c:	d014      	beq.n	2c68 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    2c3e:	6920      	ldr	r0, [r4, #16]
    2c40:	9900      	ldr	r1, [sp, #0]
    2c42:	1a09      	subs	r1, r1, r0
    2c44:	0209      	lsls	r1, r1, #8
    2c46:	17ca      	asrs	r2, r1, #31
    2c48:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    2c4c:	1209      	asrs	r1, r1, #8
    2c4e:	d50b      	bpl.n	2c68 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    2c50:	e9dd 2100 	ldrd	r2, r1, [sp]
    2c54:	1a89      	subs	r1, r1, r2
    2c56:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    2c5a:	4408      	add	r0, r1
    2c5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c60:	e9cd 2000 	strd	r2, r0, [sp]
    2c64:	f04f 0801 	mov.w	r8, #1
    2c68:	b14d      	cbz	r5, 2c7e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    2c6a:	2100      	movs	r1, #0
    2c6c:	f240 6075 	movw	r0, #1653	; 0x675
    2c70:	f3af 8000 	nop.w
    2c74:	2100      	movs	r1, #0
    2c76:	f240 607b 	movw	r0, #1659	; 0x67b
    2c7a:	f3af 8000 	nop.w
    2c7e:	9800      	ldr	r0, [sp, #0]
    2c80:	9901      	ldr	r1, [sp, #4]
    2c82:	1bc0      	subs	r0, r0, r7
    2c84:	1bc9      	subs	r1, r1, r7
    2c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c8a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2c8e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2c92:	d205      	bcs.n	2ca0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    2c94:	458a      	cmp	sl, r1
    2c96:	d303      	bcc.n	2ca0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    2c98:	f1b9 0f00 	cmp.w	r9, #0
    2c9c:	d10c      	bne.n	2cb8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    2c9e:	e003      	b.n	2ca8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    2ca0:	f1b9 0f00 	cmp.w	r9, #0
    2ca4:	d038      	beq.n	2d18 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    2ca6:	e094      	b.n	2dd2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2ca8:	4633      	mov	r3, r6
    2caa:	463a      	mov	r2, r7
    2cac:	4669      	mov	r1, sp
    2cae:	4854      	ldr	r0, [pc, #336]	; (2e00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2cb0:	f7fe fc0a 	bl	14c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    2cb4:	ea48 0800 	orr.w	r8, r8, r0
    2cb8:	f1b8 0f00 	cmp.w	r8, #0
    2cbc:	d022      	beq.n	2d04 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    2cbe:	9800      	ldr	r0, [sp, #0]
    2cc0:	f009 fcc2 	bl	c648 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2cc4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2cc8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2ccc:	4b4d      	ldr	r3, [pc, #308]	; (2e04 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    2cce:	4411      	add	r1, r2
    2cd0:	1c49      	adds	r1, r1, #1
    2cd2:	1842      	adds	r2, r0, r1
    2cd4:	4298      	cmp	r0, r3
    2cd6:	d841      	bhi.n	2d5c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    2cd8:	4849      	ldr	r0, [pc, #292]	; (2e00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2cda:	4281      	cmp	r1, r0
    2cdc:	dc5a      	bgt.n	2d94 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    2cde:	4240      	negs	r0, r0
    2ce0:	4281      	cmp	r1, r0
    2ce2:	db5f      	blt.n	2da4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    2ce4:	1c58      	adds	r0, r3, #1
    2ce6:	4290      	cmp	r0, r2
    2ce8:	bfdc      	itt	le
    2cea:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2cee:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    2cf2:	dd05      	ble.n	2d00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    2cf4:	2a00      	cmp	r2, #0
    2cf6:	bfbc      	itt	lt
    2cf8:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    2cfc:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    2d00:	980c      	ldr	r0, [sp, #48]	; 0x30
    2d02:	60c2      	str	r2, [r0, #12]
    2d04:	2001      	movs	r0, #1
    2d06:	900b      	str	r0, [sp, #44]	; 0x2c
    2d08:	2d00      	cmp	r5, #0
    2d0a:	d062      	beq.n	2dd2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2d0c:	2100      	movs	r1, #0
    2d0e:	f240 608e 	movw	r0, #1678	; 0x68e
    2d12:	f3af 8000 	nop.w
    2d16:	e05c      	b.n	2dd2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2d18:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2d1c:	aa08      	add	r2, sp, #32
    2d1e:	a907      	add	r1, sp, #28
    2d20:	f000 fcd6 	bl	36d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2d24:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2d28:	2820      	cmp	r0, #32
    2d2a:	d01c      	beq.n	2d66 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x216>
    2d2c:	6920      	ldr	r0, [r4, #16]
    2d2e:	1d40      	adds	r0, r0, #5
    2d30:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d34:	e9dd 2100 	ldrd	r2, r1, [sp]
    2d38:	1a89      	subs	r1, r1, r2
    2d3a:	4401      	add	r1, r0
    2d3c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2d40:	e9cd 0100 	strd	r0, r1, [sp]
    2d44:	f009 fc80 	bl	c648 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2d48:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2d4c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2d50:	4b2c      	ldr	r3, [pc, #176]	; (2e04 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    2d52:	4411      	add	r1, r2
    2d54:	1c4a      	adds	r2, r1, #1
    2d56:	1881      	adds	r1, r0, r2
    2d58:	4298      	cmp	r0, r3
    2d5a:	d918      	bls.n	2d8e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23e>
    2d5c:	f240 6109 	movw	r1, #1545	; 0x609
    2d60:	2070      	movs	r0, #112	; 0x70
    2d62:	f001 fce1 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d66:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2d6a:	f107 0609 	add.w	r6, r7, #9
    2d6e:	b120      	cbz	r0, 2d7a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x22a>
    2d70:	f001 fc76 	bl	4660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2d74:	2800      	cmp	r0, #0
    2d76:	bf08      	it	eq
    2d78:	3632      	addeq	r6, #50	; 0x32
    2d7a:	4823      	ldr	r0, [pc, #140]	; (2e08 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>)
    2d7c:	7841      	ldrb	r1, [r0, #1]
    2d7e:	9807      	ldr	r0, [sp, #28]
    2d80:	4281      	cmp	r1, r0
    2d82:	bf84      	itt	hi
    2d84:	1a08      	subhi	r0, r1, r0
    2d86:	4406      	addhi	r6, r0
    2d88:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    2d8c:	e7d2      	b.n	2d34 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e4>
    2d8e:	481c      	ldr	r0, [pc, #112]	; (2e00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2d90:	4282      	cmp	r2, r0
    2d92:	dd04      	ble.n	2d9e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    2d94:	f240 610a 	movw	r1, #1546	; 0x60a
    2d98:	2070      	movs	r0, #112	; 0x70
    2d9a:	f001 fcc5 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d9e:	481b      	ldr	r0, [pc, #108]	; (2e0c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2bc>)
    2da0:	4282      	cmp	r2, r0
    2da2:	da04      	bge.n	2dae <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    2da4:	f240 610b 	movw	r1, #1547	; 0x60b
    2da8:	2070      	movs	r0, #112	; 0x70
    2daa:	f001 fcbd 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2dae:	4818      	ldr	r0, [pc, #96]	; (2e10 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>)
    2db0:	4288      	cmp	r0, r1
    2db2:	bfdc      	itt	le
    2db4:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    2db8:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    2dbc:	dd05      	ble.n	2dca <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27a>
    2dbe:	2900      	cmp	r1, #0
    2dc0:	bfbc      	itt	lt
    2dc2:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    2dc6:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    2dca:	980c      	ldr	r0, [sp, #48]	; 0x30
    2dcc:	60c1      	str	r1, [r0, #12]
    2dce:	2001      	movs	r0, #1
    2dd0:	900b      	str	r0, [sp, #44]	; 0x2c
    2dd2:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    2dd6:	f88d 0010 	strb.w	r0, [sp, #16]
    2dda:	f89d 0010 	ldrb.w	r0, [sp, #16]
    2dde:	2800      	cmp	r0, #0
    2de0:	f47f aee2 	bne.w	2ba8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    2de4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2de6:	b00d      	add	sp, #52	; 0x34
    2de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2dec:	e000ed04 	.word	0xe000ed04
    2df0:	003fffff 	.word	0x003fffff
    2df4:	00000000 	.word	0x00000000
    2df8:	20000e3c 	.word	0x20000e3c
    2dfc:	20000dbc 	.word	0x20000dbc
    2e00:	07a12000 	.word	0x07a12000
    2e04:	1e847fff 	.word	0x1e847fff
    2e08:	20000012 	.word	0x20000012
    2e0c:	f85ee000 	.word	0xf85ee000
    2e10:	1e848000 	.word	0x1e848000

00002e14 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2e14:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e18:	4d88      	ldr	r5, [pc, #544]	; (303c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>)
    2e1a:	b08c      	sub	sp, #48	; 0x30
    2e1c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2e20:	2000      	movs	r0, #0
    2e22:	9009      	str	r0, [sp, #36]	; 0x24
    2e24:	2001      	movs	r0, #1
    2e26:	4c86      	ldr	r4, [pc, #536]	; (3040 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>)
    2e28:	f04f 0900 	mov.w	r9, #0
    2e2c:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    2e30:	4680      	mov	r8, r0
    2e32:	9008      	str	r0, [sp, #32]
    2e34:	b124      	cbz	r4, 2e40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    2e36:	2100      	movs	r1, #0
    2e38:	f240 70e9 	movw	r0, #2025	; 0x7e9
    2e3c:	f3af 8000 	nop.w
    2e40:	9808      	ldr	r0, [sp, #32]
    2e42:	2800      	cmp	r0, #0
    2e44:	d037      	beq.n	2eb6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    2e46:	bf00      	nop
    2e48:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    2e4c:	b124      	cbz	r4, 2e58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    2e4e:	2100      	movs	r1, #0
    2e50:	f240 70ee 	movw	r0, #2030	; 0x7ee
    2e54:	f3af 8000 	nop.w
    2e58:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    2e5c:	2240      	movs	r2, #64	; 0x40
    2e5e:	ea28 060a 	bic.w	r6, r8, sl
    2e62:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    2e66:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    2e6a:	4683      	mov	fp, r0
    2e6c:	f009 fd5a 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2e70:	b124      	cbz	r4, 2e7c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    2e72:	2100      	movs	r1, #0
    2e74:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2e78:	f3af 8000 	nop.w
    2e7c:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2e80:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    2e84:	9000      	str	r0, [sp, #0]
    2e86:	6a09      	ldr	r1, [r1, #32]
    2e88:	6201      	str	r1, [r0, #32]
    2e8a:	b124      	cbz	r4, 2e96 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    2e8c:	2100      	movs	r1, #0
    2e8e:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2e92:	f3af 8000 	nop.w
    2e96:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2e9a:	f88d 0008 	strb.w	r0, [sp, #8]
    2e9e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2ea2:	b178      	cbz	r0, 2ec4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    2ea4:	2c00      	cmp	r4, #0
    2ea6:	bf1c      	itt	ne
    2ea8:	2100      	movne	r1, #0
    2eaa:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    2eae:	d0c1      	beq.n	2e34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2eb0:	f3af 8000 	nop.w
    2eb4:	e7be      	b.n	2e34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2eb6:	4863      	ldr	r0, [pc, #396]	; (3044 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    2eb8:	2800      	cmp	r0, #0
    2eba:	bf18      	it	ne
    2ebc:	f3af 8000 	nopne.w
    2ec0:	b662      	cpsie	i
    2ec2:	e7c1      	b.n	2e48 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    2ec4:	b124      	cbz	r4, 2ed0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    2ec6:	2100      	movs	r1, #0
    2ec8:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    2ecc:	f3af 8000 	nop.w
    2ed0:	980c      	ldr	r0, [sp, #48]	; 0x30
    2ed2:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    2ed6:	2803      	cmp	r0, #3
    2ed8:	d172      	bne.n	2fc0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    2eda:	f8dd a000 	ldr.w	sl, [sp]
    2ede:	f8cd a018 	str.w	sl, [sp, #24]
    2ee2:	990c      	ldr	r1, [sp, #48]	; 0x30
    2ee4:	f89a 0020 	ldrb.w	r0, [sl, #32]
    2ee8:	4288      	cmp	r0, r1
    2eea:	bf14      	ite	ne
    2eec:	f04f 0b00 	movne.w	fp, #0
    2ef0:	f04f 0b01 	moveq.w	fp, #1
    2ef4:	f10a 0c20 	add.w	ip, sl, #32
    2ef8:	4686      	mov	lr, r0
    2efa:	2220      	movs	r2, #32
    2efc:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    2f00:	e003      	b.n	2f0a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    2f02:	4602      	mov	r2, r0
    2f04:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2f08:	7840      	ldrb	r0, [r0, #1]
    2f0a:	4288      	cmp	r0, r1
    2f0c:	d002      	beq.n	2f14 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    2f0e:	2820      	cmp	r0, #32
    2f10:	d00a      	beq.n	2f28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    2f12:	e7f6      	b.n	2f02 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    2f14:	2820      	cmp	r0, #32
    2f16:	d007      	beq.n	2f28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    2f18:	4586      	cmp	lr, r0
    2f1a:	d107      	bne.n	2f2c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    2f1c:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    2f20:	7840      	ldrb	r0, [r0, #1]
    2f22:	f88c 0000 	strb.w	r0, [ip]
    2f26:	e007      	b.n	2f38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    2f28:	4648      	mov	r0, r9
    2f2a:	e00c      	b.n	2f46 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    2f2c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2f30:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2f34:	7840      	ldrb	r0, [r0, #1]
    2f36:	7048      	strb	r0, [r1, #1]
    2f38:	b124      	cbz	r4, 2f44 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x130>
    2f3a:	2100      	movs	r1, #0
    2f3c:	f240 5037 	movw	r0, #1335	; 0x537
    2f40:	f3af 8000 	nop.w
    2f44:	4640      	mov	r0, r8
    2f46:	ea10 0f0b 	tst.w	r0, fp
    2f4a:	bf18      	it	ne
    2f4c:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    2f50:	2800      	cmp	r0, #0
    2f52:	d052      	beq.n	2ffa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    2f54:	b124      	cbz	r4, 2f60 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14c>
    2f56:	2100      	movs	r1, #0
    2f58:	f240 70fd 	movw	r0, #2045	; 0x7fd
    2f5c:	f3af 8000 	nop.w
    2f60:	4632      	mov	r2, r6
    2f62:	2001      	movs	r0, #1
    2f64:	990c      	ldr	r1, [sp, #48]	; 0x30
    2f66:	f7ff f8e1 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    2f6a:	9806      	ldr	r0, [sp, #24]
    2f6c:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    2f70:	f88d 0008 	strb.w	r0, [sp, #8]
    2f74:	f89d a008 	ldrb.w	sl, [sp, #8]
    2f78:	b124      	cbz	r4, 2f84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    2f7a:	2100      	movs	r1, #0
    2f7c:	f640 0008 	movw	r0, #2056	; 0x808
    2f80:	f3af 8000 	nop.w
    2f84:	4830      	ldr	r0, [pc, #192]	; (3048 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    2f86:	2800      	cmp	r0, #0
    2f88:	bf18      	it	ne
    2f8a:	f3af 8000 	nopne.w
    2f8e:	f3ef 8010 	mrs	r0, PRIMASK
    2f92:	b672      	cpsid	i
    2f94:	9008      	str	r0, [sp, #32]
    2f96:	b124      	cbz	r4, 2fa2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    2f98:	2100      	movs	r1, #0
    2f9a:	f640 000d 	movw	r0, #2061	; 0x80d
    2f9e:	f3af 8000 	nop.w
    2fa2:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2fa6:	f88d 0008 	strb.w	r0, [sp, #8]
    2faa:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2fae:	b140      	cbz	r0, 2fc2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    2fb0:	2c00      	cmp	r4, #0
    2fb2:	bf1c      	itt	ne
    2fb4:	2100      	movne	r1, #0
    2fb6:	f640 0011 	movwne	r0, #2065	; 0x811
    2fba:	f43f af3b 	beq.w	2e34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2fbe:	e777      	b.n	2eb0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    2fc0:	e01b      	b.n	2ffa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    2fc2:	f1ba 0f00 	cmp.w	sl, #0
    2fc6:	d008      	beq.n	2fda <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2fc8:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2fcc:	2820      	cmp	r0, #32
    2fce:	d104      	bne.n	2fda <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2fd0:	4631      	mov	r1, r6
    2fd2:	2002      	movs	r0, #2
    2fd4:	f7ff f8da 	bl	218c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x440>
    2fd8:	b308      	cbz	r0, 301e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    2fda:	b124      	cbz	r4, 2fe6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    2fdc:	2100      	movs	r1, #0
    2fde:	f640 0025 	movw	r0, #2085	; 0x825
    2fe2:	f3af 8000 	nop.w
    2fe6:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2fea:	ea28 0000 	bic.w	r0, r8, r0
    2fee:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    2ff2:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    2ff6:	2001      	movs	r0, #1
    2ff8:	9009      	str	r0, [sp, #36]	; 0x24
    2ffa:	b124      	cbz	r4, 3006 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    2ffc:	2100      	movs	r1, #0
    2ffe:	f640 002e 	movw	r0, #2094	; 0x82e
    3002:	f3af 8000 	nop.w
    3006:	9808      	ldr	r0, [sp, #32]
    3008:	b188      	cbz	r0, 302e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21a>
    300a:	b124      	cbz	r4, 3016 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x202>
    300c:	2100      	movs	r1, #0
    300e:	f640 0032 	movw	r0, #2098	; 0x832
    3012:	f3af 8000 	nop.w
    3016:	9809      	ldr	r0, [sp, #36]	; 0x24
    3018:	b00d      	add	sp, #52	; 0x34
    301a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    301e:	2c00      	cmp	r4, #0
    3020:	d0f1      	beq.n	3006 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    3022:	2100      	movs	r1, #0
    3024:	f44f 6002 	mov.w	r0, #2080	; 0x820
    3028:	f3af 8000 	nop.w
    302c:	e7e6      	b.n	2ffc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    302e:	4805      	ldr	r0, [pc, #20]	; (3044 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    3030:	2800      	cmp	r0, #0
    3032:	bf18      	it	ne
    3034:	f3af 8000 	nopne.w
    3038:	b662      	cpsie	i
    303a:	e7e6      	b.n	300a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f6>
    303c:	20000e3c 	.word	0x20000e3c
	...

0000304c <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    304c:	2820      	cmp	r0, #32
    304e:	bf24      	itt	cs
    3050:	2000      	movcs	r0, #0
    3052:	4770      	bxcs	lr
    3054:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3058:	4b03      	ldr	r3, [pc, #12]	; (3068 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    305a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
    305e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3062:	6042      	str	r2, [r0, #4]
    3064:	2001      	movs	r0, #1
    3066:	4770      	bx	lr
    3068:	20000abc 	.word	0x20000abc

0000306c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    306c:	b510      	push	{r4, lr}
    306e:	2820      	cmp	r0, #32
    3070:	d211      	bcs.n	3096 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    3072:	490e      	ldr	r1, [pc, #56]	; (30ac <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    3074:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    3078:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    307c:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    3080:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    3084:	b13b      	cbz	r3, 3096 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    3086:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    308a:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    308e:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    3092:	2a01      	cmp	r2, #1
    3094:	d001      	beq.n	309a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    3096:	2000      	movs	r0, #0
    3098:	bd10      	pop	{r4, pc}
    309a:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    309e:	4601      	mov	r1, r0
    30a0:	2000      	movs	r0, #0
    30a2:	f7ff f843 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    30a6:	2001      	movs	r0, #1
    30a8:	bd10      	pop	{r4, pc}
    30aa:	0000      	.short	0x0000
    30ac:	20000e3c 	.word	0x20000e3c

000030b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    30b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    30b4:	4e80      	ldr	r6, [pc, #512]	; (32b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    30b6:	4680      	mov	r8, r0
    30b8:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    30bc:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    30c0:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    30c4:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    30c8:	2800      	cmp	r0, #0
    30ca:	d068      	beq.n	319e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    30cc:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    30d0:	4d7a      	ldr	r5, [pc, #488]	; (32bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    30d2:	b125      	cbz	r5, 30de <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    30d4:	2100      	movs	r1, #0
    30d6:	f640 30c1 	movw	r0, #3009	; 0xbc1
    30da:	f3af 8000 	nop.w
    30de:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    30e2:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    30e6:	2801      	cmp	r0, #1
    30e8:	d018      	beq.n	311c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    30ea:	b2c0      	uxtb	r0, r0
    30ec:	2804      	cmp	r0, #4
    30ee:	bf1c      	itt	ne
    30f0:	2805      	cmpne	r0, #5
    30f2:	2806      	cmpne	r0, #6
    30f4:	d058      	beq.n	31a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    30f6:	b12d      	cbz	r5, 3104 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    30f8:	f04f 0100 	mov.w	r1, #0
    30fc:	f640 30cd 	movw	r0, #3021	; 0xbcd
    3100:	f3af 8000 	nop.w
    3104:	f001 fc36 	bl	4974 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3108:	b125      	cbz	r5, 3114 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    310a:	2100      	movs	r1, #0
    310c:	f640 30d1 	movw	r0, #3025	; 0xbd1
    3110:	f3af 8000 	nop.w
    3114:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    3118:	2801      	cmp	r0, #1
    311a:	d1e6      	bne.n	30ea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    311c:	2401      	movs	r4, #1
    311e:	b125      	cbz	r5, 312a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    3120:	2100      	movs	r1, #0
    3122:	f640 30d8 	movw	r0, #3032	; 0xbd8
    3126:	f3af 8000 	nop.w
    312a:	2c00      	cmp	r4, #0
    312c:	d042      	beq.n	31b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    312e:	2000      	movs	r0, #0
    3130:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    3134:	b125      	cbz	r5, 3140 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    3136:	2100      	movs	r1, #0
    3138:	f640 30dd 	movw	r0, #3037	; 0xbdd
    313c:	f3af 8000 	nop.w
    3140:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    3144:	2001      	movs	r0, #1
    3146:	ea20 090b 	bic.w	r9, r0, fp
    314a:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    314e:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    3152:	2240      	movs	r2, #64	; 0x40
    3154:	f009 fbe6 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3158:	b125      	cbz	r5, 3164 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    315a:	2100      	movs	r1, #0
    315c:	f240 50cd 	movw	r0, #1485	; 0x5cd
    3160:	f3af 8000 	nop.w
    3164:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    3168:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    316c:	6a00      	ldr	r0, [r0, #32]
    316e:	f8ca 0020 	str.w	r0, [sl, #32]
    3172:	b125      	cbz	r5, 317e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    3174:	2100      	movs	r1, #0
    3176:	f240 50d1 	movw	r0, #1489	; 0x5d1
    317a:	f3af 8000 	nop.w
    317e:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    3182:	f88d 0000 	strb.w	r0, [sp]
    3186:	f89d 0000 	ldrb.w	r0, [sp]
    318a:	b1d0      	cbz	r0, 31c2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    318c:	2d00      	cmp	r5, #0
    318e:	bf1c      	itt	ne
    3190:	2100      	movne	r1, #0
    3192:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    3196:	d0c2      	beq.n	311e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3198:	f3af 8000 	nop.w
    319c:	e7bf      	b.n	311e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    319e:	f640 31b8 	movw	r1, #3000	; 0xbb8
    31a2:	2070      	movs	r0, #112	; 0x70
    31a4:	f001 fac0 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31a8:	464a      	mov	r2, r9
    31aa:	4641      	mov	r1, r8
    31ac:	2001      	movs	r0, #1
    31ae:	f7fe ffbd 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    31b2:	e7a9      	b.n	3108 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    31b4:	4842      	ldr	r0, [pc, #264]	; (32c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    31b6:	2800      	cmp	r0, #0
    31b8:	bf18      	it	ne
    31ba:	f3af 8000 	nopne.w
    31be:	b662      	cpsie	i
    31c0:	e7b5      	b.n	312e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    31c2:	b125      	cbz	r5, 31ce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    31c4:	2100      	movs	r1, #0
    31c6:	f640 30e7 	movw	r0, #3047	; 0xbe7
    31ca:	f3af 8000 	nop.w
    31ce:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    31d2:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    31d6:	4614      	mov	r4, r2
    31d8:	f04f 0b20 	mov.w	fp, #32
    31dc:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    31e0:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    31e4:	e003      	b.n	31ee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    31e6:	46a3      	mov	fp, r4
    31e8:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    31ec:	785c      	ldrb	r4, [r3, #1]
    31ee:	4544      	cmp	r4, r8
    31f0:	d002      	beq.n	31f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    31f2:	2c20      	cmp	r4, #32
    31f4:	d02b      	beq.n	324e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    31f6:	e7f6      	b.n	31e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    31f8:	2c20      	cmp	r4, #32
    31fa:	d028      	beq.n	324e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    31fc:	42a2      	cmp	r2, r4
    31fe:	d104      	bne.n	320a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    3200:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    3204:	7840      	ldrb	r0, [r0, #1]
    3206:	7008      	strb	r0, [r1, #0]
    3208:	e005      	b.n	3216 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    320a:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    320e:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    3212:	7849      	ldrb	r1, [r1, #1]
    3214:	7041      	strb	r1, [r0, #1]
    3216:	f1ba 0f00 	cmp.w	sl, #0
    321a:	d011      	beq.n	3240 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    321c:	b125      	cbz	r5, 3228 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    321e:	2100      	movs	r1, #0
    3220:	f240 502f 	movw	r0, #1327	; 0x52f
    3224:	f3af 8000 	nop.w
    3228:	f89a 0000 	ldrb.w	r0, [sl]
    322c:	42a0      	cmp	r0, r4
    322e:	d107      	bne.n	3240 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    3230:	b125      	cbz	r5, 323c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    3232:	2100      	movs	r1, #0
    3234:	f240 5032 	movw	r0, #1330	; 0x532
    3238:	f3af 8000 	nop.w
    323c:	f88a b000 	strb.w	fp, [sl]
    3240:	b15d      	cbz	r5, 325a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    3242:	2100      	movs	r1, #0
    3244:	f240 5037 	movw	r0, #1335	; 0x537
    3248:	f3af 8000 	nop.w
    324c:	e000      	b.n	3250 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    324e:	b125      	cbz	r5, 325a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    3250:	2100      	movs	r1, #0
    3252:	f640 30eb 	movw	r0, #3051	; 0xbeb
    3256:	f3af 8000 	nop.w
    325a:	481a      	ldr	r0, [pc, #104]	; (32c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    325c:	2800      	cmp	r0, #0
    325e:	bf18      	it	ne
    3260:	f3af 8000 	nopne.w
    3264:	f3ef 8410 	mrs	r4, PRIMASK
    3268:	b672      	cpsid	i
    326a:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    326e:	f88d 0000 	strb.w	r0, [sp]
    3272:	f89d 0000 	ldrb.w	r0, [sp]
    3276:	b138      	cbz	r0, 3288 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    3278:	2d00      	cmp	r5, #0
    327a:	bf1c      	itt	ne
    327c:	2100      	movne	r1, #0
    327e:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    3282:	f43f af4c 	beq.w	311e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3286:	e787      	b.n	3198 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    3288:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    328c:	2001      	movs	r0, #1
    328e:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    3292:	b154      	cbz	r4, 32aa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    3294:	2d00      	cmp	r5, #0
    3296:	bf08      	it	eq
    3298:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    329c:	2100      	movs	r1, #0
    329e:	f640 30fe 	movw	r0, #3070	; 0xbfe
    32a2:	f3af 8000 	nop.w
    32a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    32aa:	4805      	ldr	r0, [pc, #20]	; (32c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    32ac:	2800      	cmp	r0, #0
    32ae:	bf18      	it	ne
    32b0:	f3af 8000 	nopne.w
    32b4:	b662      	cpsie	i
    32b6:	e7ed      	b.n	3294 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    32b8:	20000e3c 	.word	0x20000e3c
	...

000032c8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    32c8:	b570      	push	{r4, r5, r6, lr}
    32ca:	460d      	mov	r5, r1
    32cc:	4606      	mov	r6, r0
    32ce:	f001 f9b5 	bl	463c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    32d2:	480f      	ldr	r0, [pc, #60]	; (3310 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    32d4:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    32d8:	2400      	movs	r4, #0
    32da:	3880      	subs	r0, #128	; 0x80
    32dc:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    32e0:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    32e4:	b129      	cbz	r1, 32f2 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    32e6:	1c61      	adds	r1, r4, #1
    32e8:	b2cc      	uxtb	r4, r1
    32ea:	2c20      	cmp	r4, #32
    32ec:	d3f8      	bcc.n	32e0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    32ee:	2020      	movs	r0, #32
    32f0:	bd70      	pop	{r4, r5, r6, pc}
    32f2:	4808      	ldr	r0, [pc, #32]	; (3314 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    32f4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    32f8:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    32fc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    3300:	4621      	mov	r1, r4
    3302:	6045      	str	r5, [r0, #4]
    3304:	2001      	movs	r0, #1
    3306:	f7fe ff11 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    330a:	4620      	mov	r0, r4
    330c:	bd70      	pop	{r4, r5, r6, pc}
    330e:	0000      	.short	0x0000
    3310:	20000e3c 	.word	0x20000e3c
    3314:	20000abc 	.word	0x20000abc

00003318 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    3318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    331c:	b083      	sub	sp, #12
    331e:	f000 fb2d 	bl	397c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    3322:	4605      	mov	r5, r0
    3324:	f000 fde0 	bl	3ee8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    3328:	4c67      	ldr	r4, [pc, #412]	; (34c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    332a:	68a0      	ldr	r0, [r4, #8]
    332c:	f1b0 3fff 	cmp.w	r0, #4294967295
    3330:	bf1c      	itt	ne
    3332:	f04f 30ff 	movne.w	r0, #4294967295
    3336:	60a0      	strne	r0, [r4, #8]
    3338:	7fa0      	ldrb	r0, [r4, #30]
    333a:	f8df b190 	ldr.w	fp, [pc, #400]	; 34cc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    333e:	b9a8      	cbnz	r0, 336c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    3340:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    3344:	1a08      	subs	r0, r1, r0
    3346:	0200      	lsls	r0, r0, #8
    3348:	17c1      	asrs	r1, r0, #31
    334a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    334e:	1200      	asrs	r0, r0, #8
    3350:	f44f 710c 	mov.w	r1, #560	; 0x230
    3354:	f009 f9a5 	bl	c6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    3358:	6921      	ldr	r1, [r4, #16]
    335a:	4408      	add	r0, r1
    335c:	1a28      	subs	r0, r5, r0
    335e:	0200      	lsls	r0, r0, #8
    3360:	17c1      	asrs	r1, r0, #31
    3362:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    3366:	1200      	asrs	r0, r0, #8
    3368:	0fc0      	lsrs	r0, r0, #31
    336a:	d013      	beq.n	3394 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    336c:	7e60      	ldrb	r0, [r4, #25]
    336e:	b328      	cbz	r0, 33bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    3370:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    3374:	f88d 0000 	strb.w	r0, [sp]
    3378:	f89d 0000 	ldrb.w	r0, [sp]
    337c:	b1f0      	cbz	r0, 33bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    337e:	f000 fc09 	bl	3b94 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    3382:	bf00      	nop
    3384:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    3388:	b1f0      	cbz	r0, 33c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    338a:	f240 4147 	movw	r1, #1095	; 0x447
    338e:	2070      	movs	r0, #112	; 0x70
    3390:	f001 f9ca 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3394:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    3398:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    339c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    33a0:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    33a4:	6840      	ldr	r0, [r0, #4]
    33a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    33aa:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    33ae:	2108      	movs	r1, #8
    33b0:	4790      	blx	r2
    33b2:	f44f 6186 	mov.w	r1, #1072	; 0x430
    33b6:	2070      	movs	r0, #112	; 0x70
    33b8:	f001 f9b6 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33bc:	1ce8      	adds	r0, r5, #3
    33be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    33c2:	f000 fae1 	bl	3988 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    33c6:	e7dd      	b.n	3384 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    33c8:	f04f 0a01 	mov.w	sl, #1
    33cc:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    33d0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    33d4:	2820      	cmp	r0, #32
    33d6:	d024      	beq.n	3422 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    33d8:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    33dc:	2020      	movs	r0, #32
    33de:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    33e2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    33e6:	2600      	movs	r6, #0
    33e8:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    33ec:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    33f0:	4837      	ldr	r0, [pc, #220]	; (34d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    33f2:	6026      	str	r6, [r4, #0]
    33f4:	7800      	ldrb	r0, [r0, #0]
    33f6:	2802      	cmp	r0, #2
    33f8:	bf16      	itet	ne
    33fa:	2803      	cmpne	r0, #3
    33fc:	2001      	moveq	r0, #1
    33fe:	2000      	movne	r0, #0
    3400:	7720      	strb	r0, [r4, #28]
    3402:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    3406:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    340a:	f899 0020 	ldrb.w	r0, [r9, #32]
    340e:	2820      	cmp	r0, #32
    3410:	d031      	beq.n	3476 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    3412:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3416:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    341a:	7d81      	ldrb	r1, [r0, #22]
    341c:	2901      	cmp	r1, #1
    341e:	d005      	beq.n	342c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    3420:	e029      	b.n	3476 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    3422:	f240 414a 	movw	r1, #1098	; 0x44a
    3426:	2070      	movs	r0, #112	; 0x70
    3428:	f001 f97e 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    342c:	46ab      	mov	fp, r5
    342e:	f100 0508 	add.w	r5, r0, #8
    3432:	8a40      	ldrh	r0, [r0, #18]
    3434:	aa01      	add	r2, sp, #4
    3436:	4669      	mov	r1, sp
    3438:	f000 f94a 	bl	36d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    343c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    3440:	2820      	cmp	r0, #32
    3442:	d004      	beq.n	344e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    3444:	6920      	ldr	r0, [r4, #16]
    3446:	1d40      	adds	r0, r0, #5
    3448:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    344c:	e00b      	b.n	3466 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    344e:	8968      	ldrh	r0, [r5, #10]
    3450:	f10b 0b09 	add.w	fp, fp, #9
    3454:	b128      	cbz	r0, 3462 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    3456:	f001 f903 	bl	4660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    345a:	2800      	cmp	r0, #0
    345c:	bf08      	it	eq
    345e:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    3462:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    3466:	e9d5 2100 	ldrd	r2, r1, [r5]
    346a:	1a89      	subs	r1, r1, r2
    346c:	6028      	str	r0, [r5, #0]
    346e:	4408      	add	r0, r1
    3470:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3474:	6068      	str	r0, [r5, #4]
    3476:	4639      	mov	r1, r7
    3478:	2001      	movs	r0, #1
    347a:	f7fe fe87 	bl	218c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x440>
    347e:	2800      	cmp	r0, #0
    3480:	d0f9      	beq.n	3476 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    3482:	4814      	ldr	r0, [pc, #80]	; (34d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    3484:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    3488:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    348c:	2802      	cmp	r0, #2
    348e:	d104      	bne.n	349a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    3490:	463a      	mov	r2, r7
    3492:	4641      	mov	r1, r8
    3494:	2006      	movs	r0, #6
    3496:	f7fe fe49 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    349a:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    349e:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    34a2:	2820      	cmp	r0, #32
    34a4:	d003      	beq.n	34ae <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    34a6:	480c      	ldr	r0, [pc, #48]	; (34d8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    34a8:	7840      	ldrb	r0, [r0, #1]
    34aa:	f001 fa0d 	bl	48c8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    34ae:	7f20      	ldrb	r0, [r4, #28]
    34b0:	2800      	cmp	r0, #0
    34b2:	bf04      	itt	eq
    34b4:	b003      	addeq	sp, #12
    34b6:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    34ba:	f000 fd5f 	bl	3f7c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    34be:	7726      	strb	r6, [r4, #28]
    34c0:	7766      	strb	r6, [r4, #29]
    34c2:	b003      	add	sp, #12
    34c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    34c8:	20000e3c 	.word	0x20000e3c
    34cc:	20000abc 	.word	0x20000abc
    34d0:	20000012 	.word	0x20000012
    34d4:	20000dbc 	.word	0x20000dbc
    34d8:	20000010 	.word	0x20000010

000034dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    34dc:	b510      	push	{r4, lr}
    34de:	4c32      	ldr	r4, [pc, #200]	; (35a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    34e0:	b082      	sub	sp, #8
    34e2:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    34e6:	2920      	cmp	r1, #32
    34e8:	d008      	beq.n	34fc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    34ea:	68a1      	ldr	r1, [r4, #8]
    34ec:	f1b1 3fff 	cmp.w	r1, #4294967295
    34f0:	d009      	beq.n	3506 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    34f2:	f640 21e9 	movw	r1, #2793	; 0xae9
    34f6:	2070      	movs	r0, #112	; 0x70
    34f8:	f001 f916 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34fc:	f640 21e8 	movw	r1, #2792	; 0xae8
    3500:	2070      	movs	r0, #112	; 0x70
    3502:	f001 f911 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3506:	6862      	ldr	r2, [r4, #4]
    3508:	4601      	mov	r1, r0
    350a:	4b28      	ldr	r3, [pc, #160]	; (35ac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    350c:	1850      	adds	r0, r2, r1
    350e:	429a      	cmp	r2, r3
    3510:	d904      	bls.n	351c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    3512:	f240 6109 	movw	r1, #1545	; 0x609
    3516:	2070      	movs	r0, #112	; 0x70
    3518:	f001 f906 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    351c:	4a24      	ldr	r2, [pc, #144]	; (35b0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    351e:	4291      	cmp	r1, r2
    3520:	dd04      	ble.n	352c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    3522:	f240 610a 	movw	r1, #1546	; 0x60a
    3526:	2070      	movs	r0, #112	; 0x70
    3528:	f001 f8fe 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    352c:	4a21      	ldr	r2, [pc, #132]	; (35b4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    352e:	4291      	cmp	r1, r2
    3530:	da04      	bge.n	353c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    3532:	f240 610b 	movw	r1, #1547	; 0x60b
    3536:	2070      	movs	r0, #112	; 0x70
    3538:	f001 f8f6 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    353c:	491e      	ldr	r1, [pc, #120]	; (35b8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    353e:	4281      	cmp	r1, r0
    3540:	bfdc      	itt	le
    3542:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    3546:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    354a:	dd05      	ble.n	3558 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    354c:	2800      	cmp	r0, #0
    354e:	bfbc      	itt	lt
    3550:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    3554:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    3558:	aa01      	add	r2, sp, #4
    355a:	4669      	mov	r1, sp
    355c:	f000 f8b8 	bl	36d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    3560:	f89d 0004 	ldrb.w	r0, [sp, #4]
    3564:	280f      	cmp	r0, #15
    3566:	bf8c      	ite	hi
    3568:	2001      	movhi	r0, #1
    356a:	2000      	movls	r0, #0
    356c:	9900      	ldr	r1, [sp, #0]
    356e:	4408      	add	r0, r1
    3570:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    3574:	60a1      	str	r1, [r4, #8]
    3576:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    357a:	f88d 0000 	strb.w	r0, [sp]
    357e:	f89d 0000 	ldrb.w	r0, [sp]
    3582:	2800      	cmp	r0, #0
    3584:	bf04      	itt	eq
    3586:	b002      	addeq	sp, #8
    3588:	bd10      	popeq	{r4, pc}
    358a:	2301      	movs	r3, #1
    358c:	2203      	movs	r2, #3
    358e:	2005      	movs	r0, #5
    3590:	f000 fb7a 	bl	3c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    3594:	2800      	cmp	r0, #0
    3596:	bf1c      	itt	ne
    3598:	b002      	addne	sp, #8
    359a:	bd10      	popne	{r4, pc}
    359c:	f640 21f1 	movw	r1, #2801	; 0xaf1
    35a0:	2070      	movs	r0, #112	; 0x70
    35a2:	f001 f8c1 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35a6:	0000      	.short	0x0000
    35a8:	20000e3c 	.word	0x20000e3c
    35ac:	1e847fff 	.word	0x1e847fff
    35b0:	07a12000 	.word	0x07a12000
    35b4:	f85ee000 	.word	0xf85ee000
    35b8:	1e848000 	.word	0x1e848000

000035bc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    35bc:	b570      	push	{r4, r5, r6, lr}
    35be:	4c1e      	ldr	r4, [pc, #120]	; (3638 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    35c0:	2120      	movs	r1, #32
    35c2:	f884 1020 	strb.w	r1, [r4, #32]
    35c6:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    35ca:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    35ce:	2000      	movs	r0, #0
    35d0:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    35d4:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    35d8:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    35dc:	1e42      	subs	r2, r0, #1
    35de:	60a2      	str	r2, [r4, #8]
    35e0:	6020      	str	r0, [r4, #0]
    35e2:	77a0      	strb	r0, [r4, #30]
    35e4:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    35e8:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    35ec:	7720      	strb	r0, [r4, #28]
    35ee:	7760      	strb	r0, [r4, #29]
    35f0:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    35f4:	4911      	ldr	r1, [pc, #68]	; (363c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    35f6:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    35fa:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    35fe:	7008      	strb	r0, [r1, #0]
    3600:	7048      	strb	r0, [r1, #1]
    3602:	8048      	strh	r0, [r1, #2]
    3604:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    3608:	2210      	movs	r2, #16
    360a:	7088      	strb	r0, [r1, #2]
    360c:	f801 0f04 	strb.w	r0, [r1, #4]!
    3610:	1e52      	subs	r2, r2, #1
    3612:	d1fa      	bne.n	360a <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    3614:	4d0a      	ldr	r5, [pc, #40]	; (3640 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    3616:	2601      	movs	r6, #1
    3618:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    361c:	20ff      	movs	r0, #255	; 0xff
    361e:	7028      	strb	r0, [r5, #0]
    3620:	4808      	ldr	r0, [pc, #32]	; (3644 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    3622:	f001 f933 	bl	488c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3626:	7068      	strb	r0, [r5, #1]
    3628:	f001 f98e 	bl	4948 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    362c:	60a8      	str	r0, [r5, #8]
    362e:	f000 fcd3 	bl	3fd8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    3632:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    3636:	bd70      	pop	{r4, r5, r6, pc}
    3638:	20000e3c 	.word	0x20000e3c
    363c:	20000012 	.word	0x20000012
    3640:	20000010 	.word	0x20000010
    3644:	00001fe9 	.word	0x00001fe9

00003648 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    3648:	b570      	push	{r4, r5, r6, lr}
    364a:	4604      	mov	r4, r0
    364c:	4615      	mov	r5, r2
    364e:	4608      	mov	r0, r1
    3650:	f008 fffa 	bl	c648 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    3654:	4a0f      	ldr	r2, [pc, #60]	; (3694 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    3656:	1b01      	subs	r1, r0, r4
    3658:	1c53      	adds	r3, r2, #1
    365a:	ebb1 0f93 	cmp.w	r1, r3, lsr #2
    365e:	bf24      	itt	cs
    3660:	eba4 0c00 	subcs.w	ip, r4, r0
    3664:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    3668:	d30b      	bcc.n	3682 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    366a:	428a      	cmp	r2, r1
    366c:	d203      	bcs.n	3676 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    366e:	1b11      	subs	r1, r2, r4
    3670:	4408      	add	r0, r1
    3672:	1c41      	adds	r1, r0, #1
    3674:	e005      	b.n	3682 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    3676:	4562      	cmp	r2, ip
    3678:	d207      	bcs.n	368a <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    367a:	1a10      	subs	r0, r2, r0
    367c:	4420      	add	r0, r4
    367e:	1c40      	adds	r0, r0, #1
    3680:	4241      	negs	r1, r0
    3682:	f101 000f 	add.w	r0, r1, #15
    3686:	1a28      	subs	r0, r5, r0
    3688:	bd70      	pop	{r4, r5, r6, pc}
    368a:	f640 310c 	movw	r1, #2828	; 0xb0c
    368e:	2070      	movs	r0, #112	; 0x70
    3690:	f001 f84a 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3694:	1e847fff 	.word	0x1e847fff

00003698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    3698:	0b41      	lsrs	r1, r0, #13
    369a:	f248 6237 	movw	r2, #34359	; 0x8637
    369e:	4351      	muls	r1, r2
    36a0:	0c0a      	lsrs	r2, r1, #16
    36a2:	4b09      	ldr	r3, [pc, #36]	; (36c8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    36a4:	0251      	lsls	r1, r2, #9
    36a6:	fb02 0203 	mla	r2, r2, r3, r0
    36aa:	4808      	ldr	r0, [pc, #32]	; (36cc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    36ac:	4350      	muls	r0, r2
    36ae:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    36b2:	306e      	adds	r0, #110	; 0x6e
    36b4:	0d40      	lsrs	r0, r0, #21
    36b6:	425b      	negs	r3, r3
    36b8:	fb10 f303 	smulbb	r3, r0, r3
    36bc:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    36c0:	bf88      	it	hi
    36c2:	1c49      	addhi	r1, r1, #1
    36c4:	4408      	add	r0, r1
    36c6:	4770      	bx	lr
    36c8:	ffffc2f7 	.word	0xffffc2f7
    36cc:	00010c6f 	.word	0x00010c6f

000036d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    36d0:	0b43      	lsrs	r3, r0, #13
    36d2:	f248 6c37 	movw	ip, #34359	; 0x8637
    36d6:	fb03 f30c 	mul.w	r3, r3, ip
    36da:	b430      	push	{r4, r5}
    36dc:	0c1b      	lsrs	r3, r3, #16
    36de:	f8df c044 	ldr.w	ip, [pc, #68]	; 3724 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    36e2:	025c      	lsls	r4, r3, #9
    36e4:	fb03 030c 	mla	r3, r3, ip, r0
    36e8:	480f      	ldr	r0, [pc, #60]	; (3728 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    36ea:	4358      	muls	r0, r3
    36ec:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    36f0:	eb04 000c 	add.w	r0, r4, ip
    36f4:	f643 5409 	movw	r4, #15625	; 0x3d09
    36f8:	fb1c f404 	smulbb	r4, ip, r4
    36fc:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    3700:	f643 5508 	movw	r5, #15624	; 0x3d08
    3704:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    3708:	442c      	add	r4, r5
    370a:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    370e:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    3712:	bf84      	itt	hi
    3714:	f04f 0c00 	movhi.w	ip, #0
    3718:	1c40      	addhi	r0, r0, #1
    371a:	6008      	str	r0, [r1, #0]
    371c:	f882 c000 	strb.w	ip, [r2]
    3720:	bc30      	pop	{r4, r5}
    3722:	4770      	bx	lr
    3724:	ffffc2f7 	.word	0xffffc2f7
    3728:	00010c6f 	.word	0x00010c6f

0000372c <MPSL_IRQ_RTC0_Handler>:
    372c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3730:	4c38      	ldr	r4, [pc, #224]	; (3814 <MPSL_IRQ_RTC0_Handler+0xe8>)
    3732:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3736:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 3818 <MPSL_IRQ_RTC0_Handler+0xec>
    373a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    373e:	f44f 6600 	mov.w	r6, #2048	; 0x800
    3742:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    3746:	f04f 0500 	mov.w	r5, #0
    374a:	bf1c      	itt	ne
    374c:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    3750:	2800      	cmpne	r0, #0
    3752:	d017      	beq.n	3784 <MPSL_IRQ_RTC0_Handler+0x58>
    3754:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    3758:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    375c:	482f      	ldr	r0, [pc, #188]	; (381c <MPSL_IRQ_RTC0_Handler+0xf0>)
    375e:	6800      	ldr	r0, [r0, #0]
    3760:	f8d8 1000 	ldr.w	r1, [r8]
    3764:	eba0 0001 	sub.w	r0, r0, r1
    3768:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    376c:	2802      	cmp	r0, #2
    376e:	d302      	bcc.n	3776 <MPSL_IRQ_RTC0_Handler+0x4a>
    3770:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3774:	d306      	bcc.n	3784 <MPSL_IRQ_RTC0_Handler+0x58>
    3776:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    377a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    377e:	2004      	movs	r0, #4
    3780:	f7fe ff28 	bl	25d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3784:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3788:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    378c:	bf1c      	itt	ne
    378e:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    3792:	2800      	cmpne	r0, #0
    3794:	d017      	beq.n	37c6 <MPSL_IRQ_RTC0_Handler+0x9a>
    3796:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    379a:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    379e:	4820      	ldr	r0, [pc, #128]	; (3820 <MPSL_IRQ_RTC0_Handler+0xf4>)
    37a0:	6800      	ldr	r0, [r0, #0]
    37a2:	f8d8 1000 	ldr.w	r1, [r8]
    37a6:	eba0 0001 	sub.w	r0, r0, r1
    37aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    37ae:	2802      	cmp	r0, #2
    37b0:	d302      	bcc.n	37b8 <MPSL_IRQ_RTC0_Handler+0x8c>
    37b2:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    37b6:	d306      	bcc.n	37c6 <MPSL_IRQ_RTC0_Handler+0x9a>
    37b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    37bc:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    37c0:	2005      	movs	r0, #5
    37c2:	f7fe ff07 	bl	25d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    37c6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    37ca:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    37ce:	bf1a      	itte	ne
    37d0:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    37d4:	2800      	cmpne	r0, #0
    37d6:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    37da:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    37de:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    37e2:	4810      	ldr	r0, [pc, #64]	; (3824 <MPSL_IRQ_RTC0_Handler+0xf8>)
    37e4:	6800      	ldr	r0, [r0, #0]
    37e6:	f8d8 1000 	ldr.w	r1, [r8]
    37ea:	eba0 0001 	sub.w	r0, r0, r1
    37ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    37f2:	2802      	cmp	r0, #2
    37f4:	d304      	bcc.n	3800 <MPSL_IRQ_RTC0_Handler+0xd4>
    37f6:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    37fa:	bf38      	it	cc
    37fc:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    3800:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3804:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    380c:	2006      	movs	r0, #6
    380e:	f7fe bee1 	b.w	25d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3812:	0000      	.short	0x0000
    3814:	4000b000 	.word	0x4000b000
    3818:	4000b504 	.word	0x4000b504
    381c:	4000b540 	.word	0x4000b540
    3820:	4000b544 	.word	0x4000b544
    3824:	4000b548 	.word	0x4000b548

00003828 <MPSL_IRQ_TIMER0_Handler>:
    3828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    382c:	4d3a      	ldr	r5, [pc, #232]	; (3918 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    382e:	7828      	ldrb	r0, [r5, #0]
    3830:	2804      	cmp	r0, #4
    3832:	d06c      	beq.n	390e <MPSL_IRQ_TIMER0_Handler+0xe6>
    3834:	1ce8      	adds	r0, r5, #3
    3836:	2201      	movs	r2, #1
    3838:	7801      	ldrb	r1, [r0, #0]
    383a:	b159      	cbz	r1, 3854 <MPSL_IRQ_TIMER0_Handler+0x2c>
    383c:	2901      	cmp	r1, #1
    383e:	bf08      	it	eq
    3840:	706a      	strbeq	r2, [r5, #1]
    3842:	d002      	beq.n	384a <MPSL_IRQ_TIMER0_Handler+0x22>
    3844:	7869      	ldrb	r1, [r5, #1]
    3846:	2900      	cmp	r1, #0
    3848:	d05c      	beq.n	3904 <MPSL_IRQ_TIMER0_Handler+0xdc>
    384a:	2102      	movs	r1, #2
    384c:	7001      	strb	r1, [r0, #0]
    384e:	7840      	ldrb	r0, [r0, #1]
    3850:	f000 fae2 	bl	3e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3854:	4c31      	ldr	r4, [pc, #196]	; (391c <MPSL_IRQ_TIMER0_Handler+0xf4>)
    3856:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    385a:	f04f 0800 	mov.w	r8, #0
    385e:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    3862:	f44f 7680 	mov.w	r6, #256	; 0x100
    3866:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    386a:	bf1c      	itt	ne
    386c:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    3870:	2800      	cmpne	r0, #0
    3872:	d008      	beq.n	3886 <MPSL_IRQ_TIMER0_Handler+0x5e>
    3874:	f04f 0003 	mov.w	r0, #3
    3878:	f000 face 	bl	3e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    387c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3880:	2003      	movs	r0, #3
    3882:	f7fe fea7 	bl	25d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3886:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    388a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    388e:	bf1c      	itt	ne
    3890:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    3894:	2800      	cmpne	r0, #0
    3896:	d008      	beq.n	38aa <MPSL_IRQ_TIMER0_Handler+0x82>
    3898:	f04f 0002 	mov.w	r0, #2
    389c:	f000 fabc 	bl	3e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    38a0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    38a4:	2002      	movs	r0, #2
    38a6:	f7fe fe95 	bl	25d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    38aa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    38ae:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    38b2:	bf1c      	itt	ne
    38b4:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    38b8:	2800      	cmpne	r0, #0
    38ba:	d008      	beq.n	38ce <MPSL_IRQ_TIMER0_Handler+0xa6>
    38bc:	f04f 0001 	mov.w	r0, #1
    38c0:	f000 faaa 	bl	3e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    38c4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    38c8:	2001      	movs	r0, #1
    38ca:	f7fe fe83 	bl	25d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    38ce:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    38d2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    38d6:	bf1a      	itte	ne
    38d8:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    38dc:	2800      	cmpne	r0, #0
    38de:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    38e2:	f04f 0000 	mov.w	r0, #0
    38e6:	f000 fa97 	bl	3e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    38ea:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    38ee:	2004      	movs	r0, #4
    38f0:	7028      	strb	r0, [r5, #0]
    38f2:	f8c5 8008 	str.w	r8, [r5, #8]
    38f6:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    38fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    38fe:	2000      	movs	r0, #0
    3900:	f7fe be68 	b.w	25d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3904:	f44f 715a 	mov.w	r1, #872	; 0x368
    3908:	206c      	movs	r0, #108	; 0x6c
    390a:	f000 ff0d 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    390e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3912:	2007      	movs	r0, #7
    3914:	f7fe be5e 	b.w	25d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3918:	2000001c 	.word	0x2000001c
    391c:	40008000 	.word	0x40008000
    3920:	2201      	movs	r2, #1
    3922:	0213      	lsls	r3, r2, #8
    3924:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3928:	2000      	movs	r0, #0
    392a:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    392e:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    3932:	f3bf 8f4f 	dsb	sy
    3936:	f3bf 8f6f 	isb	sy
    393a:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    393e:	490c      	ldr	r1, [pc, #48]	; (3970 <MPSL_IRQ_TIMER0_Handler+0x148>)
    3940:	604a      	str	r2, [r1, #4]
    3942:	1e43      	subs	r3, r0, #1
    3944:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3948:	4b0a      	ldr	r3, [pc, #40]	; (3974 <MPSL_IRQ_TIMER0_Handler+0x14c>)
    394a:	6018      	str	r0, [r3, #0]
    394c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3950:	1d1b      	adds	r3, r3, #4
    3952:	6018      	str	r0, [r3, #0]
    3954:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3958:	1d1b      	adds	r3, r3, #4
    395a:	6018      	str	r0, [r3, #0]
    395c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3960:	1d1b      	adds	r3, r3, #4
    3962:	6018      	str	r0, [r3, #0]
    3964:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    3968:	610a      	str	r2, [r1, #16]
    396a:	4903      	ldr	r1, [pc, #12]	; (3978 <MPSL_IRQ_TIMER0_Handler+0x150>)
    396c:	7048      	strb	r0, [r1, #1]
    396e:	4770      	bx	lr
    3970:	40008000 	.word	0x40008000
    3974:	40008540 	.word	0x40008540
    3978:	2000001c 	.word	0x2000001c

0000397c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    397c:	4801      	ldr	r0, [pc, #4]	; (3984 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    397e:	6800      	ldr	r0, [r0, #0]
    3980:	4770      	bx	lr
    3982:	0000      	.short	0x0000
    3984:	4000b504 	.word	0x4000b504

00003988 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    3988:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    398c:	4e41      	ldr	r6, [pc, #260]	; (3a94 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    398e:	4604      	mov	r4, r0
    3990:	1ef7      	subs	r7, r6, #3
    3992:	f896 c000 	ldrb.w	ip, [r6]
    3996:	68f8      	ldr	r0, [r7, #12]
    3998:	f1bc 0f01 	cmp.w	ip, #1
    399c:	bf04      	itt	eq
    399e:	42a0      	cmpeq	r0, r4
    39a0:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    39a4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    39a8:	4a3b      	ldr	r2, [pc, #236]	; (3a98 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    39aa:	6011      	str	r1, [r2, #0]
    39ac:	493b      	ldr	r1, [pc, #236]	; (3a9c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    39ae:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    39b2:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    39b6:	4a3a      	ldr	r2, [pc, #232]	; (3aa0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    39b8:	f04f 0500 	mov.w	r5, #0
    39bc:	f1bc 0f00 	cmp.w	ip, #0
    39c0:	d057      	beq.n	3a72 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    39c2:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    39c6:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    39ca:	6015      	str	r5, [r2, #0]
    39cc:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    39d0:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    39d4:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    39d8:	f04f 0801 	mov.w	r8, #1
    39dc:	2a00      	cmp	r2, #0
    39de:	bf04      	itt	eq
    39e0:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    39e4:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    39e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    39ec:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    39f0:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    39f4:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    39f8:	4a2a      	ldr	r2, [pc, #168]	; (3aa4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    39fa:	f8d2 a000 	ldr.w	sl, [r2]
    39fe:	eba4 0a0a 	sub.w	sl, r4, sl
    3a02:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    3a06:	f1bb 0f02 	cmp.w	fp, #2
    3a0a:	d33c      	bcc.n	3a86 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    3a0c:	f04f 0a02 	mov.w	sl, #2
    3a10:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    3a14:	d237      	bcs.n	3a86 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    3a16:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3a1a:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    3a1e:	f1bc 0f00 	cmp.w	ip, #0
    3a22:	d005      	beq.n	3a30 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    3a24:	6811      	ldr	r1, [r2, #0]
    3a26:	1a41      	subs	r1, r0, r1
    3a28:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3a2c:	2902      	cmp	r1, #2
    3a2e:	d3f9      	bcc.n	3a24 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    3a30:	f8c7 8008 	str.w	r8, [r7, #8]
    3a34:	703d      	strb	r5, [r7, #0]
    3a36:	f7ff ff73 	bl	3920 <MPSL_IRQ_TIMER0_Handler+0xf8>
    3a3a:	481b      	ldr	r0, [pc, #108]	; (3aa8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    3a3c:	6005      	str	r5, [r0, #0]
    3a3e:	1d00      	adds	r0, r0, #4
    3a40:	f8c0 a000 	str.w	sl, [r0]
    3a44:	4919      	ldr	r1, [pc, #100]	; (3aac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    3a46:	2004      	movs	r0, #4
    3a48:	6008      	str	r0, [r1, #0]
    3a4a:	4919      	ldr	r1, [pc, #100]	; (3ab0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    3a4c:	f8c1 800c 	str.w	r8, [r1, #12]
    3a50:	68ba      	ldr	r2, [r7, #8]
    3a52:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    3a56:	0181      	lsls	r1, r0, #6
    3a58:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    3a5c:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    3a60:	4a14      	ldr	r2, [pc, #80]	; (3ab4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    3a62:	0741      	lsls	r1, r0, #29
    3a64:	6011      	str	r1, [r2, #0]
    3a66:	60fc      	str	r4, [r7, #12]
    3a68:	7070      	strb	r0, [r6, #1]
    3a6a:	f886 8000 	strb.w	r8, [r6]
    3a6e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    3a72:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3a76:	4b10      	ldr	r3, [pc, #64]	; (3ab8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    3a78:	601d      	str	r5, [r3, #0]
    3a7a:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    3a7e:	6015      	str	r5, [r2, #0]
    3a80:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    3a84:	e7a4      	b.n	39d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    3a86:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    3a8a:	f240 11f1 	movw	r1, #497	; 0x1f1
    3a8e:	206c      	movs	r0, #108	; 0x6c
    3a90:	f000 fe4a 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a94:	2000001f 	.word	0x2000001f
    3a98:	4001f508 	.word	0x4001f508
    3a9c:	4000b000 	.word	0x4000b000
    3aa0:	4000b544 	.word	0x4000b544
    3aa4:	4000b504 	.word	0x4000b504
    3aa8:	40008504 	.word	0x40008504
    3aac:	40008510 	.word	0x40008510
    3ab0:	40008000 	.word	0x40008000
    3ab4:	4001f504 	.word	0x4001f504
    3ab8:	4000b540 	.word	0x4000b540

00003abc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ac0:	4c2b      	ldr	r4, [pc, #172]	; (3b70 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    3ac2:	68e1      	ldr	r1, [r4, #12]
    3ac4:	4281      	cmp	r1, r0
    3ac6:	bf14      	ite	ne
    3ac8:	2201      	movne	r2, #1
    3aca:	2200      	moveq	r2, #0
    3acc:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 3b74 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    3ad0:	f89c 7000 	ldrb.w	r7, [ip]
    3ad4:	2f02      	cmp	r7, #2
    3ad6:	d002      	beq.n	3ade <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    3ad8:	2a00      	cmp	r2, #0
    3ada:	d038      	beq.n	3b4e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    3adc:	e003      	b.n	3ae6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    3ade:	2a00      	cmp	r2, #0
    3ae0:	bf08      	it	eq
    3ae2:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ae6:	7862      	ldrb	r2, [r4, #1]
    3ae8:	b382      	cbz	r2, 3b4c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    3aea:	4b23      	ldr	r3, [pc, #140]	; (3b78 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3aec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3af0:	601a      	str	r2, [r3, #0]
    3af2:	4b22      	ldr	r3, [pc, #136]	; (3b7c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    3af4:	1395      	asrs	r5, r2, #14
    3af6:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    3afa:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    3afe:	2600      	movs	r6, #0
    3b00:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    3b04:	4a1e      	ldr	r2, [pc, #120]	; (3b80 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    3b06:	f8d2 8000 	ldr.w	r8, [r2]
    3b0a:	eba0 0808 	sub.w	r8, r0, r8
    3b0e:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    3b12:	f1b8 0f02 	cmp.w	r8, #2
    3b16:	d324      	bcc.n	3b62 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    3b18:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    3b1c:	d221      	bcs.n	3b62 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    3b1e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3b22:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    3b26:	b12f      	cbz	r7, 3b34 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    3b28:	6813      	ldr	r3, [r2, #0]
    3b2a:	1acb      	subs	r3, r1, r3
    3b2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3b30:	2b02      	cmp	r3, #2
    3b32:	d3f9      	bcc.n	3b28 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    3b34:	4b13      	ldr	r3, [pc, #76]	; (3b84 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    3b36:	2102      	movs	r1, #2
    3b38:	074a      	lsls	r2, r1, #29
    3b3a:	601a      	str	r2, [r3, #0]
    3b3c:	60e0      	str	r0, [r4, #12]
    3b3e:	2004      	movs	r0, #4
    3b40:	f88c 0001 	strb.w	r0, [ip, #1]
    3b44:	f88c 1000 	strb.w	r1, [ip]
    3b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b4c:	e004      	b.n	3b58 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3b4e:	f240 11ff 	movw	r1, #511	; 0x1ff
    3b52:	206c      	movs	r0, #108	; 0x6c
    3b54:	f000 fde8 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b58:	f240 2103 	movw	r1, #515	; 0x203
    3b5c:	206c      	movs	r0, #108	; 0x6c
    3b5e:	f000 fde3 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b62:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    3b66:	f240 210f 	movw	r1, #527	; 0x20f
    3b6a:	206c      	movs	r0, #108	; 0x6c
    3b6c:	f000 fddc 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b70:	2000001c 	.word	0x2000001c
    3b74:	2000001f 	.word	0x2000001f
    3b78:	4001f508 	.word	0x4001f508
    3b7c:	4000b000 	.word	0x4000b000
    3b80:	4000b504 	.word	0x4000b504
    3b84:	4001f504 	.word	0x4001f504

00003b88 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    3b88:	4801      	ldr	r0, [pc, #4]	; (3b90 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    3b8a:	68c0      	ldr	r0, [r0, #12]
    3b8c:	4770      	bx	lr
    3b8e:	0000      	.short	0x0000
    3b90:	2000001c 	.word	0x2000001c

00003b94 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    3b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b98:	4833      	ldr	r0, [pc, #204]	; (3c68 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    3b9a:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    3b9e:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    3ba2:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 3c6c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    3ba6:	4a32      	ldr	r2, [pc, #200]	; (3c70 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    3ba8:	2100      	movs	r1, #0
    3baa:	f89c 3000 	ldrb.w	r3, [ip]
    3bae:	b163      	cbz	r3, 3bca <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    3bb0:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    3bb4:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    3bb8:	6011      	str	r1, [r2, #0]
    3bba:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3bbe:	bf00      	nop
    3bc0:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    3bc4:	2201      	movs	r2, #1
    3bc6:	b980      	cbnz	r0, 3bea <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    3bc8:	e009      	b.n	3bde <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    3bca:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    3bce:	4c29      	ldr	r4, [pc, #164]	; (3c74 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    3bd0:	6021      	str	r1, [r4, #0]
    3bd2:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3bd6:	6011      	str	r1, [r2, #0]
    3bd8:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3bdc:	e7f0      	b.n	3bc0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    3bde:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    3be2:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3be6:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    3bea:	2b02      	cmp	r3, #2
    3bec:	d004      	beq.n	3bf8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    3bee:	f240 211b 	movw	r1, #539	; 0x21b
    3bf2:	206c      	movs	r0, #108	; 0x6c
    3bf4:	f000 fd98 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3bf8:	4e1f      	ldr	r6, [pc, #124]	; (3c78 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    3bfa:	6830      	ldr	r0, [r6, #0]
    3bfc:	4c1f      	ldr	r4, [pc, #124]	; (3c7c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    3bfe:	1cc0      	adds	r0, r0, #3
    3c00:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3c04:	68e3      	ldr	r3, [r4, #12]
    3c06:	4d1e      	ldr	r5, [pc, #120]	; (3c80 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    3c08:	4298      	cmp	r0, r3
    3c0a:	d00b      	beq.n	3c24 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    3c0c:	6837      	ldr	r7, [r6, #0]
    3c0e:	1bdf      	subs	r7, r3, r7
    3c10:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    3c14:	2f04      	cmp	r7, #4
    3c16:	d305      	bcc.n	3c24 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    3c18:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    3c1c:	d202      	bcs.n	3c24 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    3c1e:	f7ff feb3 	bl	3988 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3c22:	e01b      	b.n	3c5c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    3c24:	6830      	ldr	r0, [r6, #0]
    3c26:	1a18      	subs	r0, r3, r0
    3c28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3c2c:	2802      	cmp	r0, #2
    3c2e:	d313      	bcc.n	3c58 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    3c30:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3c34:	d210      	bcs.n	3c58 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    3c36:	4b13      	ldr	r3, [pc, #76]	; (3c84 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    3c38:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3c3c:	6018      	str	r0, [r3, #0]
    3c3e:	60a2      	str	r2, [r4, #8]
    3c40:	7021      	strb	r1, [r4, #0]
    3c42:	606a      	str	r2, [r5, #4]
    3c44:	60ea      	str	r2, [r5, #12]
    3c46:	0040      	lsls	r0, r0, #1
    3c48:	1f19      	subs	r1, r3, #4
    3c4a:	6008      	str	r0, [r1, #0]
    3c4c:	2004      	movs	r0, #4
    3c4e:	f88c 0001 	strb.w	r0, [ip, #1]
    3c52:	f88c 2000 	strb.w	r2, [ip]
    3c56:	e001      	b.n	3c5c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    3c58:	60a2      	str	r2, [r4, #8]
    3c5a:	7021      	strb	r1, [r4, #0]
    3c5c:	68a0      	ldr	r0, [r4, #8]
    3c5e:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c66:	0000      	.short	0x0000
    3c68:	4000b000 	.word	0x4000b000
    3c6c:	2000001f 	.word	0x2000001f
    3c70:	4000b544 	.word	0x4000b544
    3c74:	4000b540 	.word	0x4000b540
    3c78:	4000b504 	.word	0x4000b504
    3c7c:	2000001c 	.word	0x2000001c
    3c80:	40008000 	.word	0x40008000
    3c84:	4001f508 	.word	0x4001f508

00003c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    3c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3c8c:	f8df c174 	ldr.w	ip, [pc, #372]	; 3e04 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    3c90:	2701      	movs	r7, #1
    3c92:	f04f 0800 	mov.w	r8, #0
    3c96:	f89c 5000 	ldrb.w	r5, [ip]
    3c9a:	f89c c001 	ldrb.w	ip, [ip, #1]
    3c9e:	2807      	cmp	r0, #7
    3ca0:	d27e      	bcs.n	3da0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    3ca2:	e8df f000 	tbb	[pc, r0]
    3ca6:	0404      	.short	0x0404
    3ca8:	6a6a0404 	.word	0x6a6a0404
    3cac:	006a      	.short	0x006a
    3cae:	4c56      	ldr	r4, [pc, #344]	; (3e08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    3cb0:	68e6      	ldr	r6, [r4, #12]
    3cb2:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    3cb6:	bf04      	itt	eq
    3cb8:	7864      	ldrbeq	r4, [r4, #1]
    3cba:	2c00      	cmpeq	r4, #0
    3cbc:	d002      	beq.n	3cc4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    3cbe:	2d02      	cmp	r5, #2
    3cc0:	d005      	beq.n	3cce <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    3cc2:	e03c      	b.n	3d3e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    3cc4:	f240 214e 	movw	r1, #590	; 0x24e
    3cc8:	206c      	movs	r0, #108	; 0x6c
    3cca:	f000 fd2d 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3cce:	ea4f 048c 	mov.w	r4, ip, lsl #2
    3cd2:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    3cd6:	f1ac 0404 	sub.w	r4, ip, #4
    3cda:	0624      	lsls	r4, r4, #24
    3cdc:	0da4      	lsrs	r4, r4, #22
    3cde:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    3ce2:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    3ce6:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    3cea:	2400      	movs	r4, #0
    3cec:	2d01      	cmp	r5, #1
    3cee:	d002      	beq.n	3cf6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    3cf0:	2d02      	cmp	r5, #2
    3cf2:	d011      	beq.n	3d18 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    3cf4:	e020      	b.n	3d38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3cf6:	f1bc 0f04 	cmp.w	ip, #4
    3cfa:	d205      	bcs.n	3d08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    3cfc:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    3d00:	f1ba 0f00 	cmp.w	sl, #0
    3d04:	d118      	bne.n	3d38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3d06:	e004      	b.n	3d12 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    3d08:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    3d0c:	f1ba 0f00 	cmp.w	sl, #0
    3d10:	d112      	bne.n	3d38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3d12:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    3d16:	e00f      	b.n	3d38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3d18:	f1bc 0f04 	cmp.w	ip, #4
    3d1c:	d205      	bcs.n	3d2a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    3d1e:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    3d22:	f1ba 0f00 	cmp.w	sl, #0
    3d26:	d107      	bne.n	3d38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3d28:	e004      	b.n	3d34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    3d2a:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    3d2e:	f1ba 0f00 	cmp.w	sl, #0
    3d32:	d101      	bne.n	3d38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3d34:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    3d38:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    3d3c:	d1d5      	bne.n	3cea <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    3d3e:	4c33      	ldr	r4, [pc, #204]	; (3e0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    3d40:	f100 0c10 	add.w	ip, r0, #16
    3d44:	fa07 fc0c 	lsl.w	ip, r7, ip
    3d48:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    3d4c:	0080      	lsls	r0, r0, #2
    3d4e:	4420      	add	r0, r4
    3d50:	b152      	cbz	r2, 3d68 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    3d52:	6407      	str	r7, [r0, #64]	; 0x40
    3d54:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    3d58:	1b8d      	subs	r5, r1, r6
    3d5a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    3d5e:	42aa      	cmp	r2, r5
    3d60:	bf98      	it	ls
    3d62:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    3d66:	d243      	bcs.n	3df0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    3d68:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3d6c:	2b01      	cmp	r3, #1
    3d6e:	bf08      	it	eq
    3d70:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    3d74:	2001      	movs	r0, #1
    3d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3d7a:	b135      	cbz	r5, 3d8a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    3d7c:	4584      	cmp	ip, r0
    3d7e:	d104      	bne.n	3d8a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    3d80:	f240 2171 	movw	r1, #625	; 0x271
    3d84:	206c      	movs	r0, #108	; 0x6c
    3d86:	f000 fccf 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d8a:	1f00      	subs	r0, r0, #4
    3d8c:	b2c0      	uxtb	r0, r0
    3d8e:	2b01      	cmp	r3, #1
    3d90:	bf0c      	ite	eq
    3d92:	2401      	moveq	r4, #1
    3d94:	2400      	movne	r4, #0
    3d96:	2803      	cmp	r0, #3
    3d98:	d306      	bcc.n	3da8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    3d9a:	f240 114b 	movw	r1, #331	; 0x14b
    3d9e:	e000      	b.n	3da2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    3da0:	e02b      	b.n	3dfa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    3da2:	206c      	movs	r0, #108	; 0x6c
    3da4:	f000 fcc0 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3da8:	f8df c064 	ldr.w	ip, [pc, #100]	; 3e10 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    3dac:	f100 0310 	add.w	r3, r0, #16
    3db0:	fa07 f303 	lsl.w	r3, r7, r3
    3db4:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    3db8:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    3dbc:	0080      	lsls	r0, r0, #2
    3dbe:	4460      	add	r0, ip
    3dc0:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    3dc4:	b14a      	cbz	r2, 3dda <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    3dc6:	4d13      	ldr	r5, [pc, #76]	; (3e14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    3dc8:	682e      	ldr	r6, [r5, #0]
    3dca:	1b8d      	subs	r5, r1, r6
    3dcc:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    3dd0:	42aa      	cmp	r2, r5
    3dd2:	bf98      	it	ls
    3dd4:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    3dd8:	d20a      	bcs.n	3df0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    3dda:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3dde:	2c00      	cmp	r4, #0
    3de0:	bf18      	it	ne
    3de2:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    3de6:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    3dea:	2001      	movs	r0, #1
    3dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3df0:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    3df4:	2000      	movs	r0, #0
    3df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3dfa:	f240 2176 	movw	r1, #630	; 0x276
    3dfe:	206c      	movs	r0, #108	; 0x6c
    3e00:	f000 fc92 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3e04:	2000001f 	.word	0x2000001f
    3e08:	2000001c 	.word	0x2000001c
    3e0c:	40008000 	.word	0x40008000
    3e10:	4000b000 	.word	0x4000b000
    3e14:	4000b504 	.word	0x4000b504

00003e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e1a:	2701      	movs	r7, #1
    3e1c:	2400      	movs	r4, #0
    3e1e:	2807      	cmp	r0, #7
    3e20:	d24c      	bcs.n	3ebc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    3e22:	e8df f000 	tbb	[pc, r0]
    3e26:	0404      	.short	0x0404
    3e28:	16160404 	.word	0x16160404
    3e2c:	0016      	.short	0x0016
    3e2e:	4a26      	ldr	r2, [pc, #152]	; (3ec8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    3e30:	f100 0110 	add.w	r1, r0, #16
    3e34:	fa07 f101 	lsl.w	r1, r7, r1
    3e38:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    3e3c:	0081      	lsls	r1, r0, #2
    3e3e:	4411      	add	r1, r2
    3e40:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3e44:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    3e48:	4920      	ldr	r1, [pc, #128]	; (3ecc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    3e4a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3e4e:	9000      	str	r0, [sp, #0]
    3e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e52:	4d1f      	ldr	r5, [pc, #124]	; (3ed0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    3e54:	1f01      	subs	r1, r0, #4
    3e56:	b2ce      	uxtb	r6, r1
    3e58:	7829      	ldrb	r1, [r5, #0]
    3e5a:	b179      	cbz	r1, 3e7c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    3e5c:	786a      	ldrb	r2, [r5, #1]
    3e5e:	4282      	cmp	r2, r0
    3e60:	d10c      	bne.n	3e7c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    3e62:	4a1c      	ldr	r2, [pc, #112]	; (3ed4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    3e64:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3e68:	6010      	str	r0, [r2, #0]
    3e6a:	2901      	cmp	r1, #1
    3e6c:	bf08      	it	eq
    3e6e:	f7ff fd57 	bleq	3920 <MPSL_IRQ_TIMER0_Handler+0xf8>
    3e72:	702c      	strb	r4, [r5, #0]
    3e74:	4918      	ldr	r1, [pc, #96]	; (3ed8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    3e76:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3e7a:	60c8      	str	r0, [r1, #12]
    3e7c:	f106 0010 	add.w	r0, r6, #16
    3e80:	fa07 f100 	lsl.w	r1, r7, r0
    3e84:	4815      	ldr	r0, [pc, #84]	; (3edc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    3e86:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3e8a:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3e8e:	00b0      	lsls	r0, r6, #2
    3e90:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    3e94:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    3e98:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    3e9c:	4a10      	ldr	r2, [pc, #64]	; (3ee0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    3e9e:	6812      	ldr	r2, [r2, #0]
    3ea0:	1a89      	subs	r1, r1, r2
    3ea2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3ea6:	2902      	cmp	r1, #2
    3ea8:	bf24      	itt	cs
    3eaa:	f8c0 4540 	strcs.w	r4, [r0, #1344]	; 0x540
    3eae:	f8c0 4140 	strcs.w	r4, [r0, #320]	; 0x140
    3eb2:	480c      	ldr	r0, [pc, #48]	; (3ee4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    3eb4:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    3eb8:	9000      	str	r0, [sp, #0]
    3eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ebc:	f240 21ef 	movw	r1, #751	; 0x2ef
    3ec0:	206c      	movs	r0, #108	; 0x6c
    3ec2:	f000 fc31 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ec6:	0000      	.short	0x0000
    3ec8:	40008000 	.word	0x40008000
    3ecc:	40008140 	.word	0x40008140
    3ed0:	2000001f 	.word	0x2000001f
    3ed4:	4001f508 	.word	0x4001f508
    3ed8:	2000001c 	.word	0x2000001c
    3edc:	4000b000 	.word	0x4000b000
    3ee0:	4000b504 	.word	0x4000b504
    3ee4:	4000b140 	.word	0x4000b140

00003ee8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3ee8:	491e      	ldr	r1, [pc, #120]	; (3f64 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    3eea:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    3eee:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3ef2:	481d      	ldr	r0, [pc, #116]	; (3f68 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    3ef4:	4a1d      	ldr	r2, [pc, #116]	; (3f6c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    3ef6:	f890 c000 	ldrb.w	ip, [r0]
    3efa:	2000      	movs	r0, #0
    3efc:	f1bc 0f00 	cmp.w	ip, #0
    3f00:	d00a      	beq.n	3f18 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    3f02:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    3f06:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3f0a:	6010      	str	r0, [r2, #0]
    3f0c:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3f10:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    3f14:	b981      	cbnz	r1, 3f38 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    3f16:	e009      	b.n	3f2c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    3f18:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3f1c:	4b14      	ldr	r3, [pc, #80]	; (3f70 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    3f1e:	6018      	str	r0, [r3, #0]
    3f20:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3f24:	6010      	str	r0, [r2, #0]
    3f26:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3f2a:	e7f1      	b.n	3f10 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    3f2c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3f30:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3f34:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    3f38:	490e      	ldr	r1, [pc, #56]	; (3f74 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    3f3a:	f04f 32ff 	mov.w	r2, #4294967295
    3f3e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3f42:	4a0d      	ldr	r2, [pc, #52]	; (3f78 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    3f44:	6010      	str	r0, [r2, #0]
    3f46:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3f4a:	1d12      	adds	r2, r2, #4
    3f4c:	6010      	str	r0, [r2, #0]
    3f4e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3f52:	1d12      	adds	r2, r2, #4
    3f54:	6010      	str	r0, [r2, #0]
    3f56:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3f5a:	1d12      	adds	r2, r2, #4
    3f5c:	6010      	str	r0, [r2, #0]
    3f5e:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    3f62:	4770      	bx	lr
    3f64:	4000b000 	.word	0x4000b000
    3f68:	2000001f 	.word	0x2000001f
    3f6c:	4000b544 	.word	0x4000b544
    3f70:	4000b540 	.word	0x4000b540
    3f74:	40008000 	.word	0x40008000
    3f78:	40008540 	.word	0x40008540

00003f7c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    3f7c:	4808      	ldr	r0, [pc, #32]	; (3fa0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    3f7e:	f990 0002 	ldrsb.w	r0, [r0, #2]
    3f82:	2800      	cmp	r0, #0
    3f84:	bfb8      	it	lt
    3f86:	4770      	bxlt	lr
    3f88:	f000 011f 	and.w	r1, r0, #31
    3f8c:	2201      	movs	r2, #1
    3f8e:	fa02 f101 	lsl.w	r1, r2, r1
    3f92:	0940      	lsrs	r0, r0, #5
    3f94:	0080      	lsls	r0, r0, #2
    3f96:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3f9a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3f9e:	4770      	bx	lr
    3fa0:	2000001c 	.word	0x2000001c

00003fa4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3fa4:	b510      	push	{r4, lr}
    3fa6:	2807      	cmp	r0, #7
    3fa8:	d20d      	bcs.n	3fc6 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    3faa:	e8df f000 	tbb	[pc, r0]
    3fae:	0404      	.short	0x0404
    3fb0:	06060404 	.word	0x06060404
    3fb4:	0006      	.short	0x0006
    3fb6:	4906      	ldr	r1, [pc, #24]	; (3fd0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3fb8:	e002      	b.n	3fc0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    3fba:	1f00      	subs	r0, r0, #4
    3fbc:	4905      	ldr	r1, [pc, #20]	; (3fd4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    3fbe:	b2c0      	uxtb	r0, r0
    3fc0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3fc4:	bd10      	pop	{r4, pc}
    3fc6:	f240 219a 	movw	r1, #666	; 0x29a
    3fca:	206c      	movs	r0, #108	; 0x6c
    3fcc:	f000 fbac 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3fd0:	40008140 	.word	0x40008140
    3fd4:	4000b140 	.word	0x4000b140

00003fd8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3fd8:	b570      	push	{r4, r5, r6, lr}
    3fda:	4819      	ldr	r0, [pc, #100]	; (4040 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    3fdc:	2400      	movs	r4, #0
    3fde:	2104      	movs	r1, #4
    3fe0:	7004      	strb	r4, [r0, #0]
    3fe2:	1ec0      	subs	r0, r0, #3
    3fe4:	7001      	strb	r1, [r0, #0]
    3fe6:	0589      	lsls	r1, r1, #22
    3fe8:	60c1      	str	r1, [r0, #12]
    3fea:	f7ff fc99 	bl	3920 <MPSL_IRQ_TIMER0_Handler+0xf8>
    3fee:	2501      	movs	r5, #1
    3ff0:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    3ff4:	02eb      	lsls	r3, r5, #11
    3ff6:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    3ffa:	f3bf 8f4f 	dsb	sy
    3ffe:	f3bf 8f6f 	isb	sy
    4002:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    4006:	4a0f      	ldr	r2, [pc, #60]	; (4044 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    4008:	6055      	str	r5, [r2, #4]
    400a:	6095      	str	r5, [r2, #8]
    400c:	480e      	ldr	r0, [pc, #56]	; (4048 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    400e:	6801      	ldr	r1, [r0, #0]
    4010:	2900      	cmp	r1, #0
    4012:	d1fc      	bne.n	400e <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    4014:	1e48      	subs	r0, r1, #1
    4016:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    401a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    401e:	480b      	ldr	r0, [pc, #44]	; (404c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    4020:	6004      	str	r4, [r0, #0]
    4022:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    4026:	1d00      	adds	r0, r0, #4
    4028:	6004      	str	r4, [r0, #0]
    402a:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    402e:	1d00      	adds	r0, r0, #4
    4030:	6004      	str	r4, [r0, #0]
    4032:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    4036:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    403a:	6015      	str	r5, [r2, #0]
    403c:	bd70      	pop	{r4, r5, r6, pc}
    403e:	0000      	.short	0x0000
    4040:	2000001f 	.word	0x2000001f
    4044:	4000b000 	.word	0x4000b000
    4048:	4000b504 	.word	0x4000b504
    404c:	4000b540 	.word	0x4000b540

00004050 <MPSL_IRQ_CLOCK_Handler>:
    4050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4054:	4c16      	ldr	r4, [pc, #88]	; (40b0 <MPSL_IRQ_CLOCK_Handler+0x60>)
    4056:	7a60      	ldrb	r0, [r4, #9]
    4058:	2800      	cmp	r0, #0
    405a:	d027      	beq.n	40ac <MPSL_IRQ_CLOCK_Handler+0x5c>
    405c:	f44f 7180 	mov.w	r1, #256	; 0x100
    4060:	058d      	lsls	r5, r1, #22
    4062:	4628      	mov	r0, r5
    4064:	f008 fb41 	bl	c6ea <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4068:	4680      	mov	r8, r0
    406a:	f44f 7182 	mov.w	r1, #260	; 0x104
    406e:	4628      	mov	r0, r5
    4070:	f008 fb3b 	bl	c6ea <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4074:	2600      	movs	r6, #0
    4076:	4607      	mov	r7, r0
    4078:	f1b8 0f00 	cmp.w	r8, #0
    407c:	d009      	beq.n	4092 <MPSL_IRQ_CLOCK_Handler+0x42>
    407e:	2001      	movs	r0, #1
    4080:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4084:	7920      	ldrb	r0, [r4, #4]
    4086:	b120      	cbz	r0, 4092 <MPSL_IRQ_CLOCK_Handler+0x42>
    4088:	7126      	strb	r6, [r4, #4]
    408a:	69e0      	ldr	r0, [r4, #28]
    408c:	b108      	cbz	r0, 4092 <MPSL_IRQ_CLOCK_Handler+0x42>
    408e:	4780      	blx	r0
    4090:	61e6      	str	r6, [r4, #28]
    4092:	b137      	cbz	r7, 40a2 <MPSL_IRQ_CLOCK_Handler+0x52>
    4094:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    4098:	2002      	movs	r0, #2
    409a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    409e:	f000 fa8b 	bl	45b8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    40a2:	4640      	mov	r0, r8
    40a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    40a8:	f000 b85a 	b.w	4160 <MPSL_IRQ_CLOCK_Handler+0x110>
    40ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40b0:	2000002c 	.word	0x2000002c
    40b4:	b510      	push	{r4, lr}
    40b6:	f008 fbc2 	bl	c83e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    40ba:	b930      	cbnz	r0, 40ca <MPSL_IRQ_CLOCK_Handler+0x7a>
    40bc:	f008 fbe0 	bl	c880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    40c0:	b918      	cbnz	r0, 40ca <MPSL_IRQ_CLOCK_Handler+0x7a>
    40c2:	f008 fc13 	bl	c8ec <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    40c6:	2800      	cmp	r0, #0
    40c8:	d002      	beq.n	40d0 <MPSL_IRQ_CLOCK_Handler+0x80>
    40ca:	4902      	ldr	r1, [pc, #8]	; (40d4 <MPSL_IRQ_CLOCK_Handler+0x84>)
    40cc:	2002      	movs	r0, #2
    40ce:	6008      	str	r0, [r1, #0]
    40d0:	bd10      	pop	{r4, pc}
    40d2:	0000      	.short	0x0000
    40d4:	40000c34 	.word	0x40000c34
    40d8:	b570      	push	{r4, r5, r6, lr}
    40da:	f000 f987 	bl	43ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    40de:	f000 fabf 	bl	4660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    40e2:	4c09      	ldr	r4, [pc, #36]	; (4108 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    40e4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    40e8:	b130      	cbz	r0, 40f8 <MPSL_IRQ_CLOCK_Handler+0xa8>
    40ea:	f7ff ffe3 	bl	40b4 <MPSL_IRQ_CLOCK_Handler+0x64>
    40ee:	2001      	movs	r0, #1
    40f0:	6128      	str	r0, [r5, #16]
    40f2:	2004      	movs	r0, #4
    40f4:	72a0      	strb	r0, [r4, #10]
    40f6:	e004      	b.n	4102 <MPSL_IRQ_CLOCK_Handler+0xb2>
    40f8:	2003      	movs	r0, #3
    40fa:	72a0      	strb	r0, [r4, #10]
    40fc:	2001      	movs	r0, #1
    40fe:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4102:	2000      	movs	r0, #0
    4104:	71e0      	strb	r0, [r4, #7]
    4106:	bd70      	pop	{r4, r5, r6, pc}
    4108:	2000002c 	.word	0x2000002c
    410c:	b570      	push	{r4, r5, r6, lr}
    410e:	4c13      	ldr	r4, [pc, #76]	; (415c <MPSL_IRQ_CLOCK_Handler+0x10c>)
    4110:	79a0      	ldrb	r0, [r4, #6]
    4112:	b1f0      	cbz	r0, 4152 <MPSL_IRQ_CLOCK_Handler+0x102>
    4114:	2801      	cmp	r0, #1
    4116:	d003      	beq.n	4120 <MPSL_IRQ_CLOCK_Handler+0xd0>
    4118:	79e1      	ldrb	r1, [r4, #7]
    411a:	1e40      	subs	r0, r0, #1
    411c:	4281      	cmp	r1, r0
    411e:	da18      	bge.n	4152 <MPSL_IRQ_CLOCK_Handler+0x102>
    4120:	f000 fa9e 	bl	4660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4124:	4605      	mov	r5, r0
    4126:	f000 fb6f 	bl	4808 <mpsl_temperature_get>
    412a:	79a1      	ldrb	r1, [r4, #6]
    412c:	2901      	cmp	r1, #1
    412e:	d902      	bls.n	4136 <MPSL_IRQ_CLOCK_Handler+0xe6>
    4130:	79e1      	ldrb	r1, [r4, #7]
    4132:	1c49      	adds	r1, r1, #1
    4134:	71e1      	strb	r1, [r4, #7]
    4136:	b10d      	cbz	r5, 413c <MPSL_IRQ_CLOCK_Handler+0xec>
    4138:	6961      	ldr	r1, [r4, #20]
    413a:	e000      	b.n	413e <MPSL_IRQ_CLOCK_Handler+0xee>
    413c:	6921      	ldr	r1, [r4, #16]
    413e:	1a41      	subs	r1, r0, r1
    4140:	2902      	cmp	r1, #2
    4142:	da02      	bge.n	414a <MPSL_IRQ_CLOCK_Handler+0xfa>
    4144:	f111 0f02 	cmn.w	r1, #2
    4148:	dc07      	bgt.n	415a <MPSL_IRQ_CLOCK_Handler+0x10a>
    414a:	b10d      	cbz	r5, 4150 <MPSL_IRQ_CLOCK_Handler+0x100>
    414c:	6160      	str	r0, [r4, #20]
    414e:	e000      	b.n	4152 <MPSL_IRQ_CLOCK_Handler+0x102>
    4150:	6120      	str	r0, [r4, #16]
    4152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4156:	f7ff bfbf 	b.w	40d8 <MPSL_IRQ_CLOCK_Handler+0x88>
    415a:	bd70      	pop	{r4, r5, r6, pc}
    415c:	2000002c 	.word	0x2000002c
    4160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4164:	4606      	mov	r6, r0
    4166:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    416a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    416e:	4628      	mov	r0, r5
    4170:	f008 fabb 	bl	c6ea <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4174:	4680      	mov	r8, r0
    4176:	f44f 7188 	mov.w	r1, #272	; 0x110
    417a:	4628      	mov	r0, r5
    417c:	f008 fab5 	bl	c6ea <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4180:	4c27      	ldr	r4, [pc, #156]	; (4220 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    4182:	4682      	mov	sl, r0
    4184:	7827      	ldrb	r7, [r4, #0]
    4186:	f104 0008 	add.w	r0, r4, #8
    418a:	f008 fb22 	bl	c7d2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    418e:	b110      	cbz	r0, 4196 <MPSL_IRQ_CLOCK_Handler+0x146>
    4190:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    4194:	e016      	b.n	41c4 <MPSL_IRQ_CLOCK_Handler+0x174>
    4196:	f04f 0901 	mov.w	r9, #1
    419a:	b146      	cbz	r6, 41ae <MPSL_IRQ_CLOCK_Handler+0x15e>
    419c:	7aa0      	ldrb	r0, [r4, #10]
    419e:	2803      	cmp	r0, #3
    41a0:	d105      	bne.n	41ae <MPSL_IRQ_CLOCK_Handler+0x15e>
    41a2:	2004      	movs	r0, #4
    41a4:	72a0      	strb	r0, [r4, #10]
    41a6:	f7ff ff85 	bl	40b4 <MPSL_IRQ_CLOCK_Handler+0x64>
    41aa:	f8c5 9010 	str.w	r9, [r5, #16]
    41ae:	2600      	movs	r6, #0
    41b0:	f1b8 0f00 	cmp.w	r8, #0
    41b4:	d018      	beq.n	41e8 <MPSL_IRQ_CLOCK_Handler+0x198>
    41b6:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    41ba:	7aa0      	ldrb	r0, [r4, #10]
    41bc:	2804      	cmp	r0, #4
    41be:	d004      	beq.n	41ca <MPSL_IRQ_CLOCK_Handler+0x17a>
    41c0:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    41c4:	206d      	movs	r0, #109	; 0x6d
    41c6:	f000 faaf 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    41ca:	f008 fb38 	bl	c83e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    41ce:	b928      	cbnz	r0, 41dc <MPSL_IRQ_CLOCK_Handler+0x18c>
    41d0:	f008 fb56 	bl	c880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    41d4:	b910      	cbnz	r0, 41dc <MPSL_IRQ_CLOCK_Handler+0x18c>
    41d6:	f008 fb89 	bl	c8ec <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    41da:	b108      	cbz	r0, 41e0 <MPSL_IRQ_CLOCK_Handler+0x190>
    41dc:	4811      	ldr	r0, [pc, #68]	; (4224 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    41de:	6006      	str	r6, [r0, #0]
    41e0:	2002      	movs	r0, #2
    41e2:	72a0      	strb	r0, [r4, #10]
    41e4:	f000 f8e6 	bl	43b4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    41e8:	f1ba 0f00 	cmp.w	sl, #0
    41ec:	d008      	beq.n	4200 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    41ee:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    41f2:	7aa0      	ldrb	r0, [r4, #10]
    41f4:	2802      	cmp	r0, #2
    41f6:	d101      	bne.n	41fc <MPSL_IRQ_CLOCK_Handler+0x1ac>
    41f8:	f7ff ff88 	bl	410c <MPSL_IRQ_CLOCK_Handler+0xbc>
    41fc:	f8c5 9014 	str.w	r9, [r5, #20]
    4200:	b13f      	cbz	r7, 4212 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    4202:	7026      	strb	r6, [r4, #0]
    4204:	7aa0      	ldrb	r0, [r4, #10]
    4206:	2802      	cmp	r0, #2
    4208:	d101      	bne.n	420e <MPSL_IRQ_CLOCK_Handler+0x1be>
    420a:	f7ff ff65 	bl	40d8 <MPSL_IRQ_CLOCK_Handler+0x88>
    420e:	f000 f8d1 	bl	43b4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4212:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4216:	4802      	ldr	r0, [pc, #8]	; (4220 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    4218:	3008      	adds	r0, #8
    421a:	f008 baf1 	b.w	c800 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    421e:	0000      	.short	0x0000
    4220:	2000002c 	.word	0x2000002c
    4224:	40000c34 	.word	0x40000c34
    4228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    422c:	4c5c      	ldr	r4, [pc, #368]	; (43a0 <MPSL_IRQ_CLOCK_Handler+0x350>)
    422e:	f04f 0800 	mov.w	r8, #0
    4232:	4606      	mov	r6, r0
    4234:	f8c4 8018 	str.w	r8, [r4, #24]
    4238:	7843      	ldrb	r3, [r0, #1]
    423a:	7882      	ldrb	r2, [r0, #2]
    423c:	7800      	ldrb	r0, [r0, #0]
    423e:	72e0      	strb	r0, [r4, #11]
    4240:	7163      	strb	r3, [r4, #5]
    4242:	2701      	movs	r7, #1
    4244:	71a2      	strb	r2, [r4, #6]
    4246:	07bd      	lsls	r5, r7, #30
    4248:	f884 8007 	strb.w	r8, [r4, #7]
    424c:	2805      	cmp	r0, #5
    424e:	d224      	bcs.n	429a <MPSL_IRQ_CLOCK_Handler+0x24a>
    4250:	e8df f000 	tbb	[pc, r0]
    4254:	1f05030f 	.word	0x1f05030f
    4258:	0021      	.short	0x0021
    425a:	61a7      	str	r7, [r4, #24]
    425c:	e009      	b.n	4272 <MPSL_IRQ_CLOCK_Handler+0x222>
    425e:	f000 f8c5 	bl	43ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4262:	2101      	movs	r1, #1
    4264:	4628      	mov	r0, r5
    4266:	f008 fa45 	bl	c6f4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    426a:	2800      	cmp	r0, #0
    426c:	d0f9      	beq.n	4262 <MPSL_IRQ_CLOCK_Handler+0x212>
    426e:	2002      	movs	r0, #2
    4270:	61a0      	str	r0, [r4, #24]
    4272:	f008 fa6b 	bl	c74c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    4276:	b1b0      	cbz	r0, 42a6 <MPSL_IRQ_CLOCK_Handler+0x256>
    4278:	f000 fa0c 	bl	4694 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    427c:	7e21      	ldrb	r1, [r4, #24]
    427e:	f001 0103 	and.w	r1, r1, #3
    4282:	4288      	cmp	r0, r1
    4284:	d10f      	bne.n	42a6 <MPSL_IRQ_CLOCK_Handler+0x256>
    4286:	79b0      	ldrb	r0, [r6, #6]
    4288:	b150      	cbz	r0, 42a0 <MPSL_IRQ_CLOCK_Handler+0x250>
    428a:	2002      	movs	r0, #2
    428c:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4290:	e06a      	b.n	4368 <MPSL_IRQ_CLOCK_Handler+0x318>
    4292:	4844      	ldr	r0, [pc, #272]	; (43a4 <MPSL_IRQ_CLOCK_Handler+0x354>)
    4294:	e7ec      	b.n	4270 <MPSL_IRQ_CLOCK_Handler+0x220>
    4296:	4844      	ldr	r0, [pc, #272]	; (43a8 <MPSL_IRQ_CLOCK_Handler+0x358>)
    4298:	e7ea      	b.n	4270 <MPSL_IRQ_CLOCK_Handler+0x220>
    429a:	f44f 714c 	mov.w	r1, #816	; 0x330
    429e:	e049      	b.n	4334 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    42a0:	f000 f9cc 	bl	463c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    42a4:	e060      	b.n	4368 <MPSL_IRQ_CLOCK_Handler+0x318>
    42a6:	60ef      	str	r7, [r5, #12]
    42a8:	f44f 7a82 	mov.w	sl, #260	; 0x104
    42ac:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    42b0:	69a0      	ldr	r0, [r4, #24]
    42b2:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    42b6:	f008 faae 	bl	c816 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    42ba:	b940      	cbnz	r0, 42ce <MPSL_IRQ_CLOCK_Handler+0x27e>
    42bc:	f008 fab5 	bl	c82a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    42c0:	b928      	cbnz	r0, 42ce <MPSL_IRQ_CLOCK_Handler+0x27e>
    42c2:	f008 fac9 	bl	c858 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    42c6:	b910      	cbnz	r0, 42ce <MPSL_IRQ_CLOCK_Handler+0x27e>
    42c8:	f008 fada 	bl	c880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    42cc:	b138      	cbz	r0, 42de <MPSL_IRQ_CLOCK_Handler+0x28e>
    42ce:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    42d2:	4836      	ldr	r0, [pc, #216]	; (43ac <MPSL_IRQ_CLOCK_Handler+0x35c>)
    42d4:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    42d8:	f3c1 3142 	ubfx	r1, r1, #13, #3
    42dc:	6001      	str	r1, [r0, #0]
    42de:	f008 fa9a 	bl	c816 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    42e2:	b940      	cbnz	r0, 42f6 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    42e4:	f008 faa1 	bl	c82a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    42e8:	b928      	cbnz	r0, 42f6 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    42ea:	f008 fab5 	bl	c858 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    42ee:	b910      	cbnz	r0, 42f6 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    42f0:	f008 fac6 	bl	c880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    42f4:	b110      	cbz	r0, 42fc <MPSL_IRQ_CLOCK_Handler+0x2ac>
    42f6:	482d      	ldr	r0, [pc, #180]	; (43ac <MPSL_IRQ_CLOCK_Handler+0x35c>)
    42f8:	3010      	adds	r0, #16
    42fa:	6007      	str	r7, [r0, #0]
    42fc:	60af      	str	r7, [r5, #8]
    42fe:	2002      	movs	r0, #2
    4300:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4304:	79b0      	ldrb	r0, [r6, #6]
    4306:	bb78      	cbnz	r0, 4368 <MPSL_IRQ_CLOCK_Handler+0x318>
    4308:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    430c:	f010 0f02 	tst.w	r0, #2
    4310:	d00e      	beq.n	4330 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    4312:	f8df 909c 	ldr.w	r9, [pc, #156]	; 43b0 <MPSL_IRQ_CLOCK_Handler+0x360>
    4316:	f8d9 1000 	ldr.w	r1, [r9]
    431a:	43c9      	mvns	r1, r1
    431c:	f341 1700 	sbfx	r7, r1, #4, #1
    4320:	f8d9 1000 	ldr.w	r1, [r9]
    4324:	f041 0110 	orr.w	r1, r1, #16
    4328:	f8c9 1000 	str.w	r1, [r9]
    432c:	1c7f      	adds	r7, r7, #1
    432e:	e007      	b.n	4340 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    4330:	f240 21f1 	movw	r1, #753	; 0x2f1
    4334:	206d      	movs	r0, #109	; 0x6d
    4336:	f000 f9f7 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    433a:	bf00      	nop
    433c:	f000 fb1a 	bl	4974 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4340:	4651      	mov	r1, sl
    4342:	4628      	mov	r0, r5
    4344:	f008 f9d1 	bl	c6ea <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4348:	2800      	cmp	r0, #0
    434a:	d0f7      	beq.n	433c <MPSL_IRQ_CLOCK_Handler+0x2ec>
    434c:	f000 f976 	bl	463c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4350:	b92f      	cbnz	r7, 435e <MPSL_IRQ_CLOCK_Handler+0x30e>
    4352:	f8d9 1000 	ldr.w	r1, [r9]
    4356:	f021 0110 	bic.w	r1, r1, #16
    435a:	f8c9 1000 	str.w	r1, [r9]
    435e:	2002      	movs	r0, #2
    4360:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4364:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    4368:	79a0      	ldrb	r0, [r4, #6]
    436a:	b170      	cbz	r0, 438a <MPSL_IRQ_CLOCK_Handler+0x33a>
    436c:	7830      	ldrb	r0, [r6, #0]
    436e:	b960      	cbnz	r0, 438a <MPSL_IRQ_CLOCK_Handler+0x33a>
    4370:	f000 f976 	bl	4660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4374:	4606      	mov	r6, r0
    4376:	f000 fa47 	bl	4808 <mpsl_temperature_get>
    437a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    437e:	b116      	cbz	r6, 4386 <MPSL_IRQ_CLOCK_Handler+0x336>
    4380:	e9c4 2004 	strd	r2, r0, [r4, #16]
    4384:	e001      	b.n	438a <MPSL_IRQ_CLOCK_Handler+0x33a>
    4386:	e9c4 0204 	strd	r0, r2, [r4, #16]
    438a:	2101      	movs	r1, #1
    438c:	4628      	mov	r0, r5
    438e:	f008 f9b1 	bl	c6f4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4392:	b108      	cbz	r0, 4398 <MPSL_IRQ_CLOCK_Handler+0x348>
    4394:	f000 f95e 	bl	4654 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    4398:	f884 800a 	strb.w	r8, [r4, #10]
    439c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    43a0:	2000002c 	.word	0x2000002c
    43a4:	00020001 	.word	0x00020001
    43a8:	00030001 	.word	0x00030001
    43ac:	4000053c 	.word	0x4000053c
    43b0:	e000ed10 	.word	0xe000ed10

000043b4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    43b4:	b510      	push	{r4, lr}
    43b6:	f3ef 8410 	mrs	r4, PRIMASK
    43ba:	b672      	cpsid	i
    43bc:	480a      	ldr	r0, [pc, #40]	; (43e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    43be:	7841      	ldrb	r1, [r0, #1]
    43c0:	b129      	cbz	r1, 43ce <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    43c2:	7841      	ldrb	r1, [r0, #1]
    43c4:	1e49      	subs	r1, r1, #1
    43c6:	7041      	strb	r1, [r0, #1]
    43c8:	7841      	ldrb	r1, [r0, #1]
    43ca:	b129      	cbz	r1, 43d8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    43cc:	e008      	b.n	43e0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    43ce:	f240 110d 	movw	r1, #269	; 0x10d
    43d2:	206d      	movs	r0, #109	; 0x6d
    43d4:	f000 f9a8 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    43d8:	7880      	ldrb	r0, [r0, #2]
    43da:	b908      	cbnz	r0, 43e0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    43dc:	f000 f94e 	bl	467c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    43e0:	2c00      	cmp	r4, #0
    43e2:	d100      	bne.n	43e6 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    43e4:	b662      	cpsie	i
    43e6:	bd10      	pop	{r4, pc}
    43e8:	2000002c 	.word	0x2000002c

000043ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    43ec:	b510      	push	{r4, lr}
    43ee:	f3ef 8410 	mrs	r4, PRIMASK
    43f2:	b672      	cpsid	i
    43f4:	4806      	ldr	r0, [pc, #24]	; (4410 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    43f6:	7841      	ldrb	r1, [r0, #1]
    43f8:	1c49      	adds	r1, r1, #1
    43fa:	7041      	strb	r1, [r0, #1]
    43fc:	7840      	ldrb	r0, [r0, #1]
    43fe:	2801      	cmp	r0, #1
    4400:	d101      	bne.n	4406 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    4402:	f008 f98e 	bl	c722 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    4406:	2c00      	cmp	r4, #0
    4408:	d100      	bne.n	440c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    440a:	b662      	cpsie	i
    440c:	bd10      	pop	{r4, pc}
    440e:	0000      	.short	0x0000
    4410:	2000002c 	.word	0x2000002c

00004414 <mpsl_clock_hfclk_release>:
    4414:	4805      	ldr	r0, [pc, #20]	; (442c <mpsl_clock_hfclk_release+0x18>)
    4416:	b510      	push	{r4, lr}
    4418:	78c1      	ldrb	r1, [r0, #3]
    441a:	b121      	cbz	r1, 4426 <mpsl_clock_hfclk_release+0x12>
    441c:	2100      	movs	r1, #0
    441e:	7101      	strb	r1, [r0, #4]
    4420:	70c1      	strb	r1, [r0, #3]
    4422:	f7ff ffc7 	bl	43b4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4426:	2000      	movs	r0, #0
    4428:	bd10      	pop	{r4, pc}
    442a:	0000      	.short	0x0000
    442c:	2000002c 	.word	0x2000002c

00004430 <mpsl_clock_hfclk_request>:
    4430:	b570      	push	{r4, r5, r6, lr}
    4432:	4c0c      	ldr	r4, [pc, #48]	; (4464 <mpsl_clock_hfclk_request+0x34>)
    4434:	78e1      	ldrb	r1, [r4, #3]
    4436:	b961      	cbnz	r1, 4452 <mpsl_clock_hfclk_request+0x22>
    4438:	2501      	movs	r5, #1
    443a:	70e5      	strb	r5, [r4, #3]
    443c:	61e0      	str	r0, [r4, #28]
    443e:	f7ff ffd5 	bl	43ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4442:	f000 f90d 	bl	4660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4446:	b130      	cbz	r0, 4456 <mpsl_clock_hfclk_request+0x26>
    4448:	69e0      	ldr	r0, [r4, #28]
    444a:	b110      	cbz	r0, 4452 <mpsl_clock_hfclk_request+0x22>
    444c:	4780      	blx	r0
    444e:	2000      	movs	r0, #0
    4450:	61e0      	str	r0, [r4, #28]
    4452:	2000      	movs	r0, #0
    4454:	bd70      	pop	{r4, r5, r6, pc}
    4456:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    445a:	7125      	strb	r5, [r4, #4]
    445c:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    4460:	e7f7      	b.n	4452 <mpsl_clock_hfclk_request+0x22>
    4462:	0000      	.short	0x0000
    4464:	2000002c 	.word	0x2000002c

00004468 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    4468:	f3ef 8010 	mrs	r0, PRIMASK
    446c:	b672      	cpsid	i
    446e:	4904      	ldr	r1, [pc, #16]	; (4480 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    4470:	788a      	ldrb	r2, [r1, #2]
    4472:	1c52      	adds	r2, r2, #1
    4474:	708a      	strb	r2, [r1, #2]
    4476:	2800      	cmp	r0, #0
    4478:	d100      	bne.n	447c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    447a:	b662      	cpsie	i
    447c:	4770      	bx	lr
    447e:	0000      	.short	0x0000
    4480:	2000002c 	.word	0x2000002c

00004484 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    4484:	b510      	push	{r4, lr}
    4486:	f3ef 8410 	mrs	r4, PRIMASK
    448a:	b672      	cpsid	i
    448c:	480a      	ldr	r0, [pc, #40]	; (44b8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    448e:	7881      	ldrb	r1, [r0, #2]
    4490:	b129      	cbz	r1, 449e <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    4492:	7881      	ldrb	r1, [r0, #2]
    4494:	1e49      	subs	r1, r1, #1
    4496:	7081      	strb	r1, [r0, #2]
    4498:	7841      	ldrb	r1, [r0, #1]
    449a:	b129      	cbz	r1, 44a8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    449c:	e008      	b.n	44b0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    449e:	f240 1125 	movw	r1, #293	; 0x125
    44a2:	206d      	movs	r0, #109	; 0x6d
    44a4:	f000 f940 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    44a8:	7880      	ldrb	r0, [r0, #2]
    44aa:	b908      	cbnz	r0, 44b0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    44ac:	f000 f8e6 	bl	467c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    44b0:	2c00      	cmp	r4, #0
    44b2:	d100      	bne.n	44b6 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    44b4:	b662      	cpsie	i
    44b6:	bd10      	pop	{r4, pc}
    44b8:	2000002c 	.word	0x2000002c

000044bc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    44bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44c0:	0004      	movs	r4, r0
    44c2:	f06f 0015 	mvn.w	r0, #21
    44c6:	d03c      	beq.n	4542 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    44c8:	7821      	ldrb	r1, [r4, #0]
    44ca:	2904      	cmp	r1, #4
    44cc:	d839      	bhi.n	4542 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    44ce:	2900      	cmp	r1, #0
    44d0:	7861      	ldrb	r1, [r4, #1]
    44d2:	d038      	beq.n	4546 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    44d4:	2900      	cmp	r1, #0
    44d6:	d134      	bne.n	4542 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    44d8:	78a1      	ldrb	r1, [r4, #2]
    44da:	2900      	cmp	r1, #0
    44dc:	d131      	bne.n	4542 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    44de:	2000      	movs	r0, #0
    44e0:	f008 f8ce 	bl	c680 <MPSL_IRQ_RADIO_Handler+0x1e>
    44e4:	2000      	movs	r0, #0
    44e6:	f008 f8be 	bl	c666 <MPSL_IRQ_RADIO_Handler+0x4>
    44ea:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    44ee:	f04f 31ff 	mov.w	r1, #4294967295
    44f2:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    44f6:	2600      	movs	r6, #0
    44f8:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    44fc:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    4500:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    4504:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    4508:	4f14      	ldr	r7, [pc, #80]	; (455c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    450a:	707e      	strb	r6, [r7, #1]
    450c:	88a0      	ldrh	r0, [r4, #4]
    450e:	81b8      	strh	r0, [r7, #12]
    4510:	f008 f8fe 	bl	c710 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    4514:	2501      	movs	r5, #1
    4516:	b108      	cbz	r0, 451c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    4518:	70fd      	strb	r5, [r7, #3]
    451a:	707d      	strb	r5, [r7, #1]
    451c:	2101      	movs	r1, #1
    451e:	4640      	mov	r0, r8
    4520:	f008 f8e8 	bl	c6f4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4524:	b108      	cbz	r0, 452a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    4526:	f000 f895 	bl	4654 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    452a:	4620      	mov	r0, r4
    452c:	f7ff fe7c 	bl	4228 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    4530:	727d      	strb	r5, [r7, #9]
    4532:	2000      	movs	r0, #0
    4534:	f008 f897 	bl	c666 <MPSL_IRQ_RADIO_Handler+0x4>
    4538:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    453c:	4630      	mov	r0, r6
    453e:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    4542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4546:	2900      	cmp	r1, #0
    4548:	d0fb      	beq.n	4542 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    454a:	2920      	cmp	r1, #32
    454c:	d8f9      	bhi.n	4542 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    454e:	78a1      	ldrb	r1, [r4, #2]
    4550:	2921      	cmp	r1, #33	; 0x21
    4552:	d8f6      	bhi.n	4542 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4554:	2901      	cmp	r1, #1
    4556:	d1c2      	bne.n	44de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    4558:	e7f3      	b.n	4542 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    455a:	0000      	.short	0x0000
    455c:	2000002c 	.word	0x2000002c

00004560 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    4560:	4801      	ldr	r0, [pc, #4]	; (4568 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    4562:	8980      	ldrh	r0, [r0, #12]
    4564:	4770      	bx	lr
    4566:	0000      	.short	0x0000
    4568:	2000002c 	.word	0x2000002c

0000456c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    456c:	b510      	push	{r4, lr}
    456e:	480d      	ldr	r0, [pc, #52]	; (45a4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4570:	f008 f92f 	bl	c7d2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4574:	490b      	ldr	r1, [pc, #44]	; (45a4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4576:	3908      	subs	r1, #8
    4578:	b148      	cbz	r0, 458e <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    457a:	2001      	movs	r0, #1
    457c:	7008      	strb	r0, [r1, #0]
    457e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4582:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    4586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    458a:	f7ff bf2f 	b.w	43ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    458e:	7a88      	ldrb	r0, [r1, #10]
    4590:	2802      	cmp	r0, #2
    4592:	d101      	bne.n	4598 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    4594:	f7ff fda0 	bl	40d8 <MPSL_IRQ_CLOCK_Handler+0x88>
    4598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    459c:	4801      	ldr	r0, [pc, #4]	; (45a4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    459e:	f008 b92f 	b.w	c800 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    45a2:	0000      	.short	0x0000
    45a4:	20000034 	.word	0x20000034

000045a8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    45a8:	4802      	ldr	r0, [pc, #8]	; (45b4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    45aa:	7a80      	ldrb	r0, [r0, #10]
    45ac:	2800      	cmp	r0, #0
    45ae:	d000      	beq.n	45b2 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    45b0:	2001      	movs	r0, #1
    45b2:	4770      	bx	lr
    45b4:	2000002c 	.word	0x2000002c

000045b8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    45b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45ba:	4d1f      	ldr	r5, [pc, #124]	; (4638 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    45bc:	7ae8      	ldrb	r0, [r5, #11]
    45be:	2800      	cmp	r0, #0
    45c0:	d10f      	bne.n	45e2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    45c2:	7e28      	ldrb	r0, [r5, #24]
    45c4:	f000 0003 	and.w	r0, r0, #3
    45c8:	f008 f8b0 	bl	c72c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    45cc:	2800      	cmp	r0, #0
    45ce:	d008      	beq.n	45e2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    45d0:	f3ef 8110 	mrs	r1, PRIMASK
    45d4:	b672      	cpsid	i
    45d6:	f7ff ffe7 	bl	45a8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    45da:	b118      	cbz	r0, 45e4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    45dc:	2900      	cmp	r1, #0
    45de:	d100      	bne.n	45e2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    45e0:	b662      	cpsie	i
    45e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45e4:	2601      	movs	r6, #1
    45e6:	72ae      	strb	r6, [r5, #10]
    45e8:	b901      	cbnz	r1, 45ec <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    45ea:	b662      	cpsie	i
    45ec:	2018      	movs	r0, #24
    45ee:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    45f2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    45f6:	61a6      	str	r6, [r4, #24]
    45f8:	f44f 7020 	mov.w	r0, #640	; 0x280
    45fc:	f8ad 0000 	strh.w	r0, [sp]
    4600:	f8bd 0000 	ldrh.w	r0, [sp]
    4604:	1e41      	subs	r1, r0, #1
    4606:	f8ad 1000 	strh.w	r1, [sp]
    460a:	d2f9      	bcs.n	4600 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    460c:	2700      	movs	r7, #0
    460e:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    4612:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    4616:	4808      	ldr	r0, [pc, #32]	; (4638 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4618:	3008      	adds	r0, #8
    461a:	f008 f8ed 	bl	c7f8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    461e:	702f      	strb	r7, [r5, #0]
    4620:	f7ff fd5a 	bl	40d8 <MPSL_IRQ_CLOCK_Handler+0x88>
    4624:	6166      	str	r6, [r4, #20]
    4626:	7968      	ldrb	r0, [r5, #5]
    4628:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    462c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    4630:	2018      	movs	r0, #24
    4632:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    4636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4638:	2000002c 	.word	0x2000002c

0000463c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    463c:	b510      	push	{r4, lr}
    463e:	4c04      	ldr	r4, [pc, #16]	; (4650 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    4640:	7e20      	ldrb	r0, [r4, #24]
    4642:	f000 0003 	and.w	r0, r0, #3
    4646:	f008 f871 	bl	c72c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    464a:	2800      	cmp	r0, #0
    464c:	d0f8      	beq.n	4640 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    464e:	bd10      	pop	{r4, pc}
    4650:	2000002c 	.word	0x2000002c

00004654 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    4654:	4901      	ldr	r1, [pc, #4]	; (465c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    4656:	2001      	movs	r0, #1
    4658:	7008      	strb	r0, [r1, #0]
    465a:	4770      	bx	lr
    465c:	20000284 	.word	0x20000284

00004660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    4660:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4664:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4668:	b918      	cbnz	r0, 4672 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    466a:	4803      	ldr	r0, [pc, #12]	; (4678 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    466c:	7800      	ldrb	r0, [r0, #0]
    466e:	2800      	cmp	r0, #0
    4670:	d000      	beq.n	4674 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    4672:	2001      	movs	r0, #1
    4674:	4770      	bx	lr
    4676:	0000      	.short	0x0000
    4678:	20000284 	.word	0x20000284

0000467c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    467c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4680:	2101      	movs	r1, #1
    4682:	6041      	str	r1, [r0, #4]
    4684:	2100      	movs	r1, #0
    4686:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    468a:	4801      	ldr	r0, [pc, #4]	; (4690 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    468c:	7001      	strb	r1, [r0, #0]
    468e:	4770      	bx	lr
    4690:	20000284 	.word	0x20000284

00004694 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    4694:	4802      	ldr	r0, [pc, #8]	; (46a0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    4696:	6800      	ldr	r0, [r0, #0]
    4698:	f000 0003 	and.w	r0, r0, #3
    469c:	4770      	bx	lr
    469e:	0000      	.short	0x0000
    46a0:	4000041c 	.word	0x4000041c
    46a4:	b510      	push	{r4, lr}
    46a6:	b131      	cbz	r1, 46b6 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    46a8:	2901      	cmp	r1, #1
    46aa:	d007      	beq.n	46bc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    46ac:	f240 3102 	movw	r1, #770	; 0x302
    46b0:	a005      	add	r0, pc, #20	; (adr r0, 46c8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    46b2:	f000 f80f 	bl	46d4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    46b6:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    46ba:	e001      	b.n	46c0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    46bc:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    46c0:	f000 0001 	and.w	r0, r0, #1
    46c4:	bd10      	pop	{r4, pc}
    46c6:	0000      	.short	0x0000
    46c8:	5f66726e 	.word	0x5f66726e
    46cc:	636f6c63 	.word	0x636f6c63
    46d0:	00682e6b 	.word	0x00682e6b

000046d4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    46d4:	4a02      	ldr	r2, [pc, #8]	; (46e0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    46d6:	6852      	ldr	r2, [r2, #4]
    46d8:	b102      	cbz	r2, 46dc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    46da:	4710      	bx	r2
    46dc:	e7fe      	b.n	46dc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    46de:	0000      	.short	0x0000
    46e0:	2000004c 	.word	0x2000004c
    46e4:	4806      	ldr	r0, [pc, #24]	; (4700 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    46e6:	b510      	push	{r4, lr}
    46e8:	2100      	movs	r1, #0
    46ea:	6001      	str	r1, [r0, #0]
    46ec:	2101      	movs	r1, #1
    46ee:	6001      	str	r1, [r0, #0]
    46f0:	4608      	mov	r0, r1
    46f2:	f008 f842 	bl	c77a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    46f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    46fa:	2001      	movs	r0, #1
    46fc:	f008 b830 	b.w	c760 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4700:	40001ffc 	.word	0x40001ffc
    4704:	4807      	ldr	r0, [pc, #28]	; (4724 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    4706:	b510      	push	{r4, lr}
    4708:	2101      	movs	r1, #1
    470a:	6041      	str	r1, [r0, #4]
    470c:	1e89      	subs	r1, r1, #2
    470e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    4712:	200c      	movs	r0, #12
    4714:	f008 f831 	bl	c77a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    471c:	200c      	movs	r0, #12
    471e:	f008 b81f 	b.w	c760 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4722:	0000      	.short	0x0000
    4724:	4000c000 	.word	0x4000c000

00004728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    4728:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    472a:	4a10      	ldr	r2, [pc, #64]	; (476c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    472c:	6855      	ldr	r5, [r2, #4]
    472e:	b1e5      	cbz	r5, 476a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    4730:	2200      	movs	r2, #0
    4732:	4603      	mov	r3, r0
    4734:	466e      	mov	r6, sp
    4736:	240a      	movs	r4, #10
    4738:	e003      	b.n	4742 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    473a:	fbb0 f0f4 	udiv	r0, r0, r4
    473e:	1c52      	adds	r2, r2, #1
    4740:	b2d2      	uxtb	r2, r2
    4742:	2800      	cmp	r0, #0
    4744:	d1f9      	bne.n	473a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    4746:	54b0      	strb	r0, [r6, r2]
    4748:	e00a      	b.n	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    474a:	bf00      	nop
    474c:	fbb3 f0f4 	udiv	r0, r3, r4
    4750:	fb04 3010 	mls	r0, r4, r0, r3
    4754:	fbb3 f3f4 	udiv	r3, r3, r4
    4758:	1e52      	subs	r2, r2, #1
    475a:	b2d2      	uxtb	r2, r2
    475c:	3030      	adds	r0, #48	; 0x30
    475e:	54b0      	strb	r0, [r6, r2]
    4760:	2a00      	cmp	r2, #0
    4762:	d1f3      	bne.n	474c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    4764:	4630      	mov	r0, r6
    4766:	47a8      	blx	r5
    4768:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    476a:	e7fe      	b.n	476a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    476c:	2000004c 	.word	0x2000004c

00004770 <mpsl_init>:
    4770:	b570      	push	{r4, r5, r6, lr}
    4772:	4c17      	ldr	r4, [pc, #92]	; (47d0 <mpsl_init+0x60>)
    4774:	4606      	mov	r6, r0
    4776:	460d      	mov	r5, r1
    4778:	7860      	ldrb	r0, [r4, #1]
    477a:	b110      	cbz	r0, 4782 <mpsl_init+0x12>
    477c:	f04f 30ff 	mov.w	r0, #4294967295
    4780:	bd70      	pop	{r4, r5, r6, pc}
    4782:	b906      	cbnz	r6, 4786 <mpsl_init+0x16>
    4784:	4e13      	ldr	r6, [pc, #76]	; (47d4 <mpsl_init+0x64>)
    4786:	6062      	str	r2, [r4, #4]
    4788:	7025      	strb	r5, [r4, #0]
    478a:	f7ff ffab 	bl	46e4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    478e:	f7ff ffb9 	bl	4704 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    4792:	4630      	mov	r0, r6
    4794:	f7ff fe92 	bl	44bc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    4798:	0006      	movs	r6, r0
    479a:	d1f1      	bne.n	4780 <mpsl_init+0x10>
    479c:	f7fe ff0e 	bl	35bc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    47a0:	f7ff ff0a 	bl	45b8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    47a4:	f007 ff36 	bl	c614 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    47a8:	4628      	mov	r0, r5
    47aa:	f007 ffd9 	bl	c760 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    47ae:	2001      	movs	r0, #1
    47b0:	2d00      	cmp	r5, #0
    47b2:	db09      	blt.n	47c8 <mpsl_init+0x58>
    47b4:	f005 011f 	and.w	r1, r5, #31
    47b8:	fa00 f101 	lsl.w	r1, r0, r1
    47bc:	096a      	lsrs	r2, r5, #5
    47be:	0092      	lsls	r2, r2, #2
    47c0:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    47c4:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    47c8:	7060      	strb	r0, [r4, #1]
    47ca:	4630      	mov	r0, r6
    47cc:	bd70      	pop	{r4, r5, r6, pc}
    47ce:	0000      	.short	0x0000
    47d0:	2000004c 	.word	0x2000004c
    47d4:	0000c79c 	.word	0x0000c79c

000047d8 <mpsl_is_initialized>:
    47d8:	4801      	ldr	r0, [pc, #4]	; (47e0 <mpsl_is_initialized+0x8>)
    47da:	7840      	ldrb	r0, [r0, #1]
    47dc:	4770      	bx	lr
    47de:	0000      	.short	0x0000
    47e0:	2000004c 	.word	0x2000004c

000047e4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    47e4:	4807      	ldr	r0, [pc, #28]	; (4804 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    47e6:	f990 0000 	ldrsb.w	r0, [r0]
    47ea:	2800      	cmp	r0, #0
    47ec:	db09      	blt.n	4802 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    47ee:	f000 021f 	and.w	r2, r0, #31
    47f2:	2101      	movs	r1, #1
    47f4:	4091      	lsls	r1, r2
    47f6:	0940      	lsrs	r0, r0, #5
    47f8:	0080      	lsls	r0, r0, #2
    47fa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    47fe:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4802:	4770      	bx	lr
    4804:	2000004c 	.word	0x2000004c

00004808 <mpsl_temperature_get>:
    4808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    480c:	2601      	movs	r6, #1
    480e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4812:	0331      	lsls	r1, r6, #12
    4814:	f04f 0800 	mov.w	r8, #0
    4818:	4640      	mov	r0, r8
    481a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    481e:	f3bf 8f4f 	dsb	sy
    4822:	f3bf 8f6f 	isb	sy
    4826:	4c16      	ldr	r4, [pc, #88]	; (4880 <mpsl_temperature_get+0x78>)
    4828:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    482c:	200c      	movs	r0, #12
    482e:	f007 ffc3 	bl	c7b8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    4832:	4d14      	ldr	r5, [pc, #80]	; (4884 <mpsl_temperature_get+0x7c>)
    4834:	6828      	ldr	r0, [r5, #0]
    4836:	43c0      	mvns	r0, r0
    4838:	f340 1700 	sbfx	r7, r0, #4, #1
    483c:	6828      	ldr	r0, [r5, #0]
    483e:	f040 0010 	orr.w	r0, r0, #16
    4842:	6028      	str	r0, [r5, #0]
    4844:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    4848:	6026      	str	r6, [r4, #0]
    484a:	1c7f      	adds	r7, r7, #1
    484c:	e002      	b.n	4854 <mpsl_temperature_get+0x4c>
    484e:	bf00      	nop
    4850:	f000 f890 	bl	4974 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4854:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4858:	2800      	cmp	r0, #0
    485a:	d0f9      	beq.n	4850 <mpsl_temperature_get+0x48>
    485c:	b91f      	cbnz	r7, 4866 <mpsl_temperature_get+0x5e>
    485e:	6828      	ldr	r0, [r5, #0]
    4860:	f020 0010 	bic.w	r0, r0, #16
    4864:	6028      	str	r0, [r5, #0]
    4866:	4808      	ldr	r0, [pc, #32]	; (4888 <mpsl_temperature_get+0x80>)
    4868:	6805      	ldr	r5, [r0, #0]
    486a:	6066      	str	r6, [r4, #4]
    486c:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    4870:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4874:	200c      	movs	r0, #12
    4876:	f007 ff9f 	bl	c7b8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    487a:	4628      	mov	r0, r5
    487c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4880:	4000c000 	.word	0x4000c000
    4884:	e000ed10 	.word	0xe000ed10
    4888:	4000c508 	.word	0x4000c508

0000488c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    488c:	b510      	push	{r4, lr}
    488e:	4602      	mov	r2, r0
    4890:	2005      	movs	r0, #5
    4892:	490c      	ldr	r1, [pc, #48]	; (48c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    4894:	e004      	b.n	48a0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    4896:	bf00      	nop
    4898:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    489c:	791b      	ldrb	r3, [r3, #4]
    489e:	b133      	cbz	r3, 48ae <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    48a0:	1e40      	subs	r0, r0, #1
    48a2:	b2c0      	uxtb	r0, r0
    48a4:	d2f8      	bcs.n	4898 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    48a6:	214b      	movs	r1, #75	; 0x4b
    48a8:	2069      	movs	r0, #105	; 0x69
    48aa:	f7ff ff3d 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    48ae:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    48b2:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    48b6:	2200      	movs	r2, #0
    48b8:	714a      	strb	r2, [r1, #5]
    48ba:	718a      	strb	r2, [r1, #6]
    48bc:	2201      	movs	r2, #1
    48be:	710a      	strb	r2, [r1, #4]
    48c0:	bd10      	pop	{r4, pc}
    48c2:	0000      	.short	0x0000
    48c4:	20000e70 	.word	0x20000e70

000048c8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    48c8:	b510      	push	{r4, lr}
    48ca:	2805      	cmp	r0, #5
    48cc:	d301      	bcc.n	48d2 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    48ce:	215a      	movs	r1, #90	; 0x5a
    48d0:	e006      	b.n	48e0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    48d2:	490a      	ldr	r1, [pc, #40]	; (48fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    48d4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    48d8:	7901      	ldrb	r1, [r0, #4]
    48da:	2901      	cmp	r1, #1
    48dc:	d003      	beq.n	48e6 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    48de:	215b      	movs	r1, #91	; 0x5b
    48e0:	2069      	movs	r0, #105	; 0x69
    48e2:	f7ff ff21 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    48e6:	7941      	ldrb	r1, [r0, #5]
    48e8:	7982      	ldrb	r2, [r0, #6]
    48ea:	1c49      	adds	r1, r1, #1
    48ec:	b2c9      	uxtb	r1, r1
    48ee:	428a      	cmp	r2, r1
    48f0:	d000      	beq.n	48f4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    48f2:	7141      	strb	r1, [r0, #5]
    48f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    48f8:	f7ff bf74 	b.w	47e4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    48fc:	20000e70 	.word	0x20000e70

00004900 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    4900:	b570      	push	{r4, r5, r6, lr}
    4902:	2505      	movs	r5, #5
    4904:	4e0e      	ldr	r6, [pc, #56]	; (4940 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    4906:	4c0f      	ldr	r4, [pc, #60]	; (4944 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    4908:	e016      	b.n	4938 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    490a:	7821      	ldrb	r1, [r4, #0]
    490c:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    4910:	7902      	ldrb	r2, [r0, #4]
    4912:	2a01      	cmp	r2, #1
    4914:	d108      	bne.n	4928 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4916:	7942      	ldrb	r2, [r0, #5]
    4918:	7983      	ldrb	r3, [r0, #6]
    491a:	429a      	cmp	r2, r3
    491c:	d004      	beq.n	4928 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    491e:	7942      	ldrb	r2, [r0, #5]
    4920:	7182      	strb	r2, [r0, #6]
    4922:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    4926:	4780      	blx	r0
    4928:	7820      	ldrb	r0, [r4, #0]
    492a:	1c40      	adds	r0, r0, #1
    492c:	b2c0      	uxtb	r0, r0
    492e:	7020      	strb	r0, [r4, #0]
    4930:	2805      	cmp	r0, #5
    4932:	d301      	bcc.n	4938 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4934:	2000      	movs	r0, #0
    4936:	7020      	strb	r0, [r4, #0]
    4938:	1e6d      	subs	r5, r5, #1
    493a:	b2ed      	uxtb	r5, r5
    493c:	d2e5      	bcs.n	490a <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    493e:	bd70      	pop	{r4, r5, r6, pc}
    4940:	20000e70 	.word	0x20000e70
    4944:	20000285 	.word	0x20000285

00004948 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    4948:	b500      	push	{lr}
    494a:	f007 ff64 	bl	c816 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    494e:	b940      	cbnz	r0, 4962 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4950:	f007 ff6b 	bl	c82a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4954:	b928      	cbnz	r0, 4962 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4956:	f007 ff7f 	bl	c858 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    495a:	b910      	cbnz	r0, 4962 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    495c:	f007 ff90 	bl	c880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4960:	b108      	cbz	r0, 4966 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    4962:	4802      	ldr	r0, [pc, #8]	; (496c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    4964:	bd00      	pop	{pc}
    4966:	4802      	ldr	r0, [pc, #8]	; (4970 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    4968:	bd00      	pop	{pc}
    496a:	0000      	.short	0x0000
    496c:	4000050c 	.word	0x4000050c
    4970:	4001e700 	.word	0x4001e700

00004974 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    4974:	b510      	push	{r4, lr}
    4976:	f007 ff83 	bl	c880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    497a:	b330      	cbz	r0, 49ca <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    497c:	f3ef 8010 	mrs	r0, PRIMASK
    4980:	b1c8      	cbz	r0, 49b6 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    4982:	2100      	movs	r1, #0
    4984:	b672      	cpsid	i
    4986:	4812      	ldr	r0, [pc, #72]	; (49d0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    4988:	6802      	ldr	r2, [r0, #0]
    498a:	6803      	ldr	r3, [r0, #0]
    498c:	f3c2 1200 	ubfx	r2, r2, #4, #1
    4990:	f043 0310 	orr.w	r3, r3, #16
    4994:	6003      	str	r3, [r0, #0]
    4996:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    499a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    499e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    49a2:	431c      	orrs	r4, r3
    49a4:	d000      	beq.n	49a8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    49a6:	bf40      	sev
    49a8:	bf20      	wfe
    49aa:	bf00      	nop
    49ac:	bf00      	nop
    49ae:	bf00      	nop
    49b0:	bf00      	nop
    49b2:	b112      	cbz	r2, 49ba <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    49b4:	e005      	b.n	49c2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    49b6:	2101      	movs	r1, #1
    49b8:	e7e4      	b.n	4984 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    49ba:	6802      	ldr	r2, [r0, #0]
    49bc:	f022 0210 	bic.w	r2, r2, #16
    49c0:	6002      	str	r2, [r0, #0]
    49c2:	2900      	cmp	r1, #0
    49c4:	d000      	beq.n	49c8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    49c6:	b662      	cpsie	i
    49c8:	bd10      	pop	{r4, pc}
    49ca:	bf20      	wfe
    49cc:	bd10      	pop	{r4, pc}
    49ce:	0000      	.short	0x0000
    49d0:	e000ed10 	.word	0xe000ed10

000049d4 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    49d4:	0000caf1 0000cb0d 0000cafb 0000cb07     ................
    49e4:	0000caf5 0000caef 0000caed 0000cb13     ................
    49f4:	0000cb01 0000cae7 0000cadf 0000cae3     ................
    4a04:	0000cad9                                ....

00004a08 <mpsl_fem_disable>:
    4a08:	4801      	ldr	r0, [pc, #4]	; (4a10 <mpsl_fem_disable+0x8>)
    4a0a:	6800      	ldr	r0, [r0, #0]
    4a0c:	6800      	ldr	r0, [r0, #0]
    4a0e:	4700      	bx	r0
    4a10:	20000054 	.word	0x20000054

00004a14 <mpsl_fem_lna_configuration_clear>:
    4a14:	4801      	ldr	r0, [pc, #4]	; (4a1c <mpsl_fem_lna_configuration_clear+0x8>)
    4a16:	6800      	ldr	r0, [r0, #0]
    4a18:	6900      	ldr	r0, [r0, #16]
    4a1a:	4700      	bx	r0
    4a1c:	20000054 	.word	0x20000054

00004a20 <mpsl_fem_lna_configuration_set>:
    4a20:	4a01      	ldr	r2, [pc, #4]	; (4a28 <mpsl_fem_lna_configuration_set+0x8>)
    4a22:	6812      	ldr	r2, [r2, #0]
    4a24:	6892      	ldr	r2, [r2, #8]
    4a26:	4710      	bx	r2
    4a28:	20000054 	.word	0x20000054

00004a2c <mpsl_fem_pa_configuration_clear>:
    4a2c:	4801      	ldr	r0, [pc, #4]	; (4a34 <mpsl_fem_pa_configuration_clear+0x8>)
    4a2e:	6800      	ldr	r0, [r0, #0]
    4a30:	68c0      	ldr	r0, [r0, #12]
    4a32:	4700      	bx	r0
    4a34:	20000054 	.word	0x20000054

00004a38 <mpsl_fem_pa_configuration_set>:
    4a38:	4a01      	ldr	r2, [pc, #4]	; (4a40 <mpsl_fem_pa_configuration_set+0x8>)
    4a3a:	6812      	ldr	r2, [r2, #0]
    4a3c:	6852      	ldr	r2, [r2, #4]
    4a3e:	4710      	bx	r2
    4a40:	20000054 	.word	0x20000054

00004a44 <mpsl_fem_pa_is_configured>:
    4a44:	4901      	ldr	r1, [pc, #4]	; (4a4c <mpsl_fem_pa_is_configured+0x8>)
    4a46:	6809      	ldr	r1, [r1, #0]
    4a48:	6a09      	ldr	r1, [r1, #32]
    4a4a:	4708      	bx	r1
    4a4c:	20000054 	.word	0x20000054

00004a50 <mpsl_fem_device_config_254_apply_get>:
    4a50:	4801      	ldr	r0, [pc, #4]	; (4a58 <mpsl_fem_device_config_254_apply_get+0x8>)
    4a52:	7800      	ldrb	r0, [r0, #0]
    4a54:	4770      	bx	lr
    4a56:	0000      	.short	0x0000
    4a58:	20000286 	.word	0x20000286
    4a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4a5e:	4c17      	ldr	r4, [pc, #92]	; (4abc <mpsl_fem_device_config_254_apply_get+0x6c>)
    4a60:	7a20      	ldrb	r0, [r4, #8]
    4a62:	2802      	cmp	r0, #2
    4a64:	d200      	bcs.n	4a68 <mpsl_fem_device_config_254_apply_get+0x18>
    4a66:	2002      	movs	r0, #2
    4a68:	f88d 0001 	strb.w	r0, [sp, #1]
    4a6c:	79e0      	ldrb	r0, [r4, #7]
    4a6e:	2803      	cmp	r0, #3
    4a70:	d200      	bcs.n	4a74 <mpsl_fem_device_config_254_apply_get+0x24>
    4a72:	2003      	movs	r0, #3
    4a74:	f88d 0000 	strb.w	r0, [sp]
    4a78:	79a0      	ldrb	r0, [r4, #6]
    4a7a:	f8ad 0004 	strh.w	r0, [sp, #4]
    4a7e:	7960      	ldrb	r0, [r4, #5]
    4a80:	f8ad 0002 	strh.w	r0, [sp, #2]
    4a84:	4668      	mov	r0, sp
    4a86:	f006 f95b 	bl	ad40 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    4a8a:	b108      	cbz	r0, 4a90 <mpsl_fem_device_config_254_apply_get+0x40>
    4a8c:	2180      	movs	r1, #128	; 0x80
    4a8e:	e010      	b.n	4ab2 <mpsl_fem_device_config_254_apply_get+0x62>
    4a90:	68e0      	ldr	r0, [r4, #12]
    4a92:	9002      	str	r0, [sp, #8]
    4a94:	a802      	add	r0, sp, #8
    4a96:	f006 f969 	bl	ad6c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    4a9a:	b108      	cbz	r0, 4aa0 <mpsl_fem_device_config_254_apply_get+0x50>
    4a9c:	2184      	movs	r1, #132	; 0x84
    4a9e:	e008      	b.n	4ab2 <mpsl_fem_device_config_254_apply_get+0x62>
    4aa0:	4807      	ldr	r0, [pc, #28]	; (4ac0 <mpsl_fem_device_config_254_apply_get+0x70>)
    4aa2:	6800      	ldr	r0, [r0, #0]
    4aa4:	9003      	str	r0, [sp, #12]
    4aa6:	a803      	add	r0, sp, #12
    4aa8:	f00b f894 	bl	fbd4 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4aac:	2800      	cmp	r0, #0
    4aae:	d003      	beq.n	4ab8 <mpsl_fem_device_config_254_apply_get+0x68>
    4ab0:	2188      	movs	r1, #136	; 0x88
    4ab2:	2003      	movs	r0, #3
    4ab4:	f000 f8e0 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ab8:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    4aba:	0000      	.short	0x0000
    4abc:	20000e98 	.word	0x20000e98
    4ac0:	00004d60 	.word	0x00004d60

00004ac4 <sdc_build_revision_get>:
    4ac4:	b510      	push	{r4, lr}
    4ac6:	b128      	cbz	r0, 4ad4 <sdc_build_revision_get+0x10>
    4ac8:	2214      	movs	r2, #20
    4aca:	4904      	ldr	r1, [pc, #16]	; (4adc <sdc_build_revision_get+0x18>)
    4acc:	f007 ff2a 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4ad0:	2000      	movs	r0, #0
    4ad2:	bd10      	pop	{r4, pc}
    4ad4:	f06f 0015 	mvn.w	r0, #21
    4ad8:	bd10      	pop	{r4, pc}
    4ada:	0000      	.short	0x0000
    4adc:	00004d7c 	.word	0x00004d7c

00004ae0 <sdc_cfg_set>:
    4ae0:	b570      	push	{r4, r5, r6, lr}
    4ae2:	f06f 032c 	mvn.w	r3, #44	; 0x2c
    4ae6:	bb78      	cbnz	r0, 4b48 <sdc_cfg_set+0x68>
    4ae8:	4c27      	ldr	r4, [pc, #156]	; (4b88 <sdc_cfg_set+0xa8>)
    4aea:	7860      	ldrb	r0, [r4, #1]
    4aec:	b108      	cbz	r0, 4af2 <sdc_cfg_set+0x12>
    4aee:	1198      	asrs	r0, r3, #6
    4af0:	bd70      	pop	{r4, r5, r6, pc}
    4af2:	b301      	cbz	r1, 4b36 <sdc_cfg_set+0x56>
    4af4:	f06f 0515 	mvn.w	r5, #21
    4af8:	b33a      	cbz	r2, 4b4a <sdc_cfg_set+0x6a>
    4afa:	4824      	ldr	r0, [pc, #144]	; (4b8c <sdc_cfg_set+0xac>)
    4afc:	290b      	cmp	r1, #11
    4afe:	d23d      	bcs.n	4b7c <sdc_cfg_set+0x9c>
    4b00:	e8df f001 	tbb	[pc, r1]
    4b04:	0c09063c 	.word	0x0c09063c
    4b08:	241a1310 	.word	0x241a1310
    4b0c:	002d2716 	.word	0x002d2716
    4b10:	7811      	ldrb	r1, [r2, #0]
    4b12:	7001      	strb	r1, [r0, #0]
    4b14:	e027      	b.n	4b66 <sdc_cfg_set+0x86>
    4b16:	7811      	ldrb	r1, [r2, #0]
    4b18:	7041      	strb	r1, [r0, #1]
    4b1a:	e024      	b.n	4b66 <sdc_cfg_set+0x86>
    4b1c:	6811      	ldr	r1, [r2, #0]
    4b1e:	f8c0 1005 	str.w	r1, [r0, #5]
    4b22:	e020      	b.n	4b66 <sdc_cfg_set+0x86>
    4b24:	6811      	ldr	r1, [r2, #0]
    4b26:	60c1      	str	r1, [r0, #12]
    4b28:	e01d      	b.n	4b66 <sdc_cfg_set+0x86>
    4b2a:	7811      	ldrb	r1, [r2, #0]
    4b2c:	7081      	strb	r1, [r0, #2]
    4b2e:	e01a      	b.n	4b66 <sdc_cfg_set+0x86>
    4b30:	7811      	ldrb	r1, [r2, #0]
    4b32:	b949      	cbnz	r1, 4b48 <sdc_cfg_set+0x68>
    4b34:	70c1      	strb	r1, [r0, #3]
    4b36:	e016      	b.n	4b66 <sdc_cfg_set+0x86>
    4b38:	78e1      	ldrb	r1, [r4, #3]
    4b3a:	b111      	cbz	r1, 4b42 <sdc_cfg_set+0x62>
    4b3c:	7811      	ldrb	r1, [r2, #0]
    4b3e:	2902      	cmp	r1, #2
    4b40:	d31c      	bcc.n	4b7c <sdc_cfg_set+0x9c>
    4b42:	7811      	ldrb	r1, [r2, #0]
    4b44:	7401      	strb	r1, [r0, #16]
    4b46:	e00e      	b.n	4b66 <sdc_cfg_set+0x86>
    4b48:	e005      	b.n	4b56 <sdc_cfg_set+0x76>
    4b4a:	e017      	b.n	4b7c <sdc_cfg_set+0x9c>
    4b4c:	8811      	ldrh	r1, [r2, #0]
    4b4e:	8241      	strh	r1, [r0, #18]
    4b50:	e009      	b.n	4b66 <sdc_cfg_set+0x86>
    4b52:	7811      	ldrb	r1, [r2, #0]
    4b54:	b109      	cbz	r1, 4b5a <sdc_cfg_set+0x7a>
    4b56:	4618      	mov	r0, r3
    4b58:	bd70      	pop	{r4, r5, r6, pc}
    4b5a:	7101      	strb	r1, [r0, #4]
    4b5c:	e003      	b.n	4b66 <sdc_cfg_set+0x86>
    4b5e:	7811      	ldrb	r1, [r2, #0]
    4b60:	2902      	cmp	r1, #2
    4b62:	d30b      	bcc.n	4b7c <sdc_cfg_set+0x9c>
    4b64:	7501      	strb	r1, [r0, #20]
    4b66:	2201      	movs	r2, #1
    4b68:	4908      	ldr	r1, [pc, #32]	; (4b8c <sdc_cfg_set+0xac>)
    4b6a:	2000      	movs	r0, #0
    4b6c:	f007 ffd3 	bl	cb16 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    4b70:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    4b74:	db04      	blt.n	4b80 <sdc_cfg_set+0xa0>
    4b76:	f06f 000b 	mvn.w	r0, #11
    4b7a:	bd70      	pop	{r4, r5, r6, pc}
    4b7c:	4628      	mov	r0, r5
    4b7e:	bd70      	pop	{r4, r5, r6, pc}
    4b80:	2101      	movs	r1, #1
    4b82:	70a1      	strb	r1, [r4, #2]
    4b84:	bd70      	pop	{r4, r5, r6, pc}
    4b86:	0000      	.short	0x0000
    4b88:	20000058 	.word	0x20000058
    4b8c:	20000e98 	.word	0x20000e98

00004b90 <sdc_enable>:
    4b90:	b570      	push	{r4, r5, r6, lr}
    4b92:	460c      	mov	r4, r1
    4b94:	0005      	movs	r5, r0
    4b96:	d019      	beq.n	4bcc <sdc_enable+0x3c>
    4b98:	b1c4      	cbz	r4, 4bcc <sdc_enable+0x3c>
    4b9a:	f000 f923 	bl	4de4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    4b9e:	b1c0      	cbz	r0, 4bd2 <sdc_enable+0x42>
    4ba0:	4628      	mov	r0, r5
    4ba2:	f7ff fe73 	bl	488c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4ba6:	4d0c      	ldr	r5, [pc, #48]	; (4bd8 <sdc_enable+0x48>)
    4ba8:	2200      	movs	r2, #0
    4baa:	490c      	ldr	r1, [pc, #48]	; (4bdc <sdc_enable+0x4c>)
    4bac:	7028      	strb	r0, [r5, #0]
    4bae:	4620      	mov	r0, r4
    4bb0:	f007 ffb1 	bl	cb16 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    4bb4:	f00b fc78 	bl	104a8 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    4bb8:	2100      	movs	r1, #0
    4bba:	7828      	ldrb	r0, [r5, #0]
    4bbc:	f006 fb30 	bl	b220 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4bc0:	f7ff ff4c 	bl	4a5c <mpsl_fem_device_config_254_apply_get+0xc>
    4bc4:	2001      	movs	r0, #1
    4bc6:	7068      	strb	r0, [r5, #1]
    4bc8:	2000      	movs	r0, #0
    4bca:	bd70      	pop	{r4, r5, r6, pc}
    4bcc:	f06f 0015 	mvn.w	r0, #21
    4bd0:	bd70      	pop	{r4, r5, r6, pc}
    4bd2:	f04f 30ff 	mov.w	r0, #4294967295
    4bd6:	bd70      	pop	{r4, r5, r6, pc}
    4bd8:	20000058 	.word	0x20000058
    4bdc:	20000e98 	.word	0x20000e98

00004be0 <sdc_init>:
    4be0:	b530      	push	{r4, r5, lr}
    4be2:	b087      	sub	sp, #28
    4be4:	0005      	movs	r5, r0
    4be6:	d00c      	beq.n	4c02 <sdc_init+0x22>
    4be8:	f7ff fdf6 	bl	47d8 <mpsl_is_initialized>
    4bec:	f04f 34ff 	mov.w	r4, #4294967295
    4bf0:	b120      	cbz	r0, 4bfc <sdc_init+0x1c>
    4bf2:	f7ff fcb5 	bl	4560 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    4bf6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    4bfa:	d905      	bls.n	4c08 <sdc_init+0x28>
    4bfc:	4620      	mov	r0, r4
    4bfe:	b007      	add	sp, #28
    4c00:	bd30      	pop	{r4, r5, pc}
    4c02:	f06f 0015 	mvn.w	r0, #21
    4c06:	e7fa      	b.n	4bfe <sdc_init+0x1e>
    4c08:	4c15      	ldr	r4, [pc, #84]	; (4c60 <sdc_init+0x80>)
    4c0a:	4816      	ldr	r0, [pc, #88]	; (4c64 <sdc_init+0x84>)
    4c0c:	6065      	str	r5, [r4, #4]
    4c0e:	f000 f9f9 	bl	5004 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    4c12:	2000      	movs	r0, #0
    4c14:	7060      	strb	r0, [r4, #1]
    4c16:	70a0      	strb	r0, [r4, #2]
    4c18:	70e0      	strb	r0, [r4, #3]
    4c1a:	4601      	mov	r1, r0
    4c1c:	2218      	movs	r2, #24
    4c1e:	4668      	mov	r0, sp
    4c20:	f007 fefa 	bl	ca18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4c24:	2218      	movs	r2, #24
    4c26:	4910      	ldr	r1, [pc, #64]	; (4c68 <sdc_init+0x88>)
    4c28:	4668      	mov	r0, sp
    4c2a:	f007 fe7b 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4c2e:	2218      	movs	r2, #24
    4c30:	4669      	mov	r1, sp
    4c32:	480e      	ldr	r0, [pc, #56]	; (4c6c <sdc_init+0x8c>)
    4c34:	f007 fe76 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4c38:	f3ef 8410 	mrs	r4, PRIMASK
    4c3c:	b672      	cpsid	i
    4c3e:	480c      	ldr	r0, [pc, #48]	; (4c70 <sdc_init+0x90>)
    4c40:	f06f 010c 	mvn.w	r1, #12
    4c44:	f000 fdac 	bl	57a0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    4c48:	480a      	ldr	r0, [pc, #40]	; (4c74 <sdc_init+0x94>)
    4c4a:	f000 fe6d 	bl	5928 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4c4e:	b118      	cbz	r0, 4c58 <sdc_init+0x78>
    4c50:	2196      	movs	r1, #150	; 0x96
    4c52:	2003      	movs	r0, #3
    4c54:	f000 f810 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c58:	b904      	cbnz	r4, 4c5c <sdc_init+0x7c>
    4c5a:	b662      	cpsie	i
    4c5c:	2000      	movs	r0, #0
    4c5e:	e7ce      	b.n	4bfe <sdc_init+0x1e>
    4c60:	20000058 	.word	0x20000058
    4c64:	00004a5d 	.word	0x00004a5d
    4c68:	00004d64 	.word	0x00004d64
    4c6c:	20000e98 	.word	0x20000e98
    4c70:	4000c000 	.word	0x4000c000
    4c74:	00004e11 	.word	0x00004e11

00004c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    4c78:	b50e      	push	{r1, r2, r3, lr}
    4c7a:	b672      	cpsid	i
    4c7c:	4a15      	ldr	r2, [pc, #84]	; (4cd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    4c7e:	6855      	ldr	r5, [r2, #4]
    4c80:	b1d5      	cbz	r5, 4cb8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    4c82:	2200      	movs	r2, #0
    4c84:	4603      	mov	r3, r0
    4c86:	466e      	mov	r6, sp
    4c88:	240a      	movs	r4, #10
    4c8a:	e003      	b.n	4c94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4c8c:	fbb0 f0f4 	udiv	r0, r0, r4
    4c90:	1c52      	adds	r2, r2, #1
    4c92:	b2d2      	uxtb	r2, r2
    4c94:	2800      	cmp	r0, #0
    4c96:	d1f9      	bne.n	4c8c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    4c98:	54b0      	strb	r0, [r6, r2]
    4c9a:	e009      	b.n	4cb0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    4c9c:	fbb3 f0f4 	udiv	r0, r3, r4
    4ca0:	fb04 3010 	mls	r0, r4, r0, r3
    4ca4:	fbb3 f3f4 	udiv	r3, r3, r4
    4ca8:	1e52      	subs	r2, r2, #1
    4caa:	b2d2      	uxtb	r2, r2
    4cac:	3030      	adds	r0, #48	; 0x30
    4cae:	54b0      	strb	r0, [r6, r2]
    4cb0:	2a00      	cmp	r2, #0
    4cb2:	d1f3      	bne.n	4c9c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    4cb4:	4630      	mov	r0, r6
    4cb6:	47a8      	blx	r5
    4cb8:	f3bf 8f4f 	dsb	sy
    4cbc:	4806      	ldr	r0, [pc, #24]	; (4cd8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4cbe:	6801      	ldr	r1, [r0, #0]
    4cc0:	4a06      	ldr	r2, [pc, #24]	; (4cdc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4cc2:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4cc6:	4311      	orrs	r1, r2
    4cc8:	6001      	str	r1, [r0, #0]
    4cca:	f3bf 8f4f 	dsb	sy
    4cce:	bf00      	nop
    4cd0:	e7fd      	b.n	4cce <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    4cd2:	0000      	.short	0x0000
    4cd4:	20000058 	.word	0x20000058
    4cd8:	e000ed0c 	.word	0xe000ed0c
    4cdc:	05fa0004 	.word	0x05fa0004

00004ce0 <sdc_support_adv>:
    4ce0:	4806      	ldr	r0, [pc, #24]	; (4cfc <sdc_support_adv+0x1c>)
    4ce2:	b510      	push	{r4, lr}
    4ce4:	7881      	ldrb	r1, [r0, #2]
    4ce6:	7840      	ldrb	r0, [r0, #1]
    4ce8:	4301      	orrs	r1, r0
    4cea:	d002      	beq.n	4cf2 <sdc_support_adv+0x12>
    4cec:	f04f 30ff 	mov.w	r0, #4294967295
    4cf0:	bd10      	pop	{r4, pc}
    4cf2:	f006 fab5 	bl	b260 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    4cf6:	2000      	movs	r0, #0
    4cf8:	bd10      	pop	{r4, pc}
    4cfa:	0000      	.short	0x0000
    4cfc:	20000058 	.word	0x20000058

00004d00 <sdc_support_dle>:
    4d00:	4806      	ldr	r0, [pc, #24]	; (4d1c <sdc_support_dle+0x1c>)
    4d02:	b510      	push	{r4, lr}
    4d04:	7881      	ldrb	r1, [r0, #2]
    4d06:	7840      	ldrb	r0, [r0, #1]
    4d08:	4301      	orrs	r1, r0
    4d0a:	d002      	beq.n	4d12 <sdc_support_dle+0x12>
    4d0c:	f04f 30ff 	mov.w	r0, #4294967295
    4d10:	bd10      	pop	{r4, pc}
    4d12:	f006 f843 	bl	ad9c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    4d16:	2000      	movs	r0, #0
    4d18:	bd10      	pop	{r4, pc}
    4d1a:	0000      	.short	0x0000
    4d1c:	20000058 	.word	0x20000058

00004d20 <sdc_support_le_2m_phy>:
    4d20:	4806      	ldr	r0, [pc, #24]	; (4d3c <sdc_support_le_2m_phy+0x1c>)
    4d22:	b510      	push	{r4, lr}
    4d24:	7881      	ldrb	r1, [r0, #2]
    4d26:	7840      	ldrb	r0, [r0, #1]
    4d28:	4301      	orrs	r1, r0
    4d2a:	d002      	beq.n	4d32 <sdc_support_le_2m_phy+0x12>
    4d2c:	f04f 30ff 	mov.w	r0, #4294967295
    4d30:	bd10      	pop	{r4, pc}
    4d32:	f00b f91f 	bl	ff74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    4d36:	2000      	movs	r0, #0
    4d38:	bd10      	pop	{r4, pc}
    4d3a:	0000      	.short	0x0000
    4d3c:	20000058 	.word	0x20000058

00004d40 <sdc_support_slave>:
    4d40:	4806      	ldr	r0, [pc, #24]	; (4d5c <sdc_support_slave+0x1c>)
    4d42:	b510      	push	{r4, lr}
    4d44:	7881      	ldrb	r1, [r0, #2]
    4d46:	7840      	ldrb	r0, [r0, #1]
    4d48:	4301      	orrs	r1, r0
    4d4a:	d002      	beq.n	4d52 <sdc_support_slave+0x12>
    4d4c:	f04f 30ff 	mov.w	r0, #4294967295
    4d50:	bd10      	pop	{r4, pc}
    4d52:	f006 fa97 	bl	b284 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    4d56:	2000      	movs	r0, #0
    4d58:	bd10      	pop	{r4, pc}
    4d5a:	0000      	.short	0x0000
    4d5c:	20000058 	.word	0x20000058
    4d60:	00000001 	.word	0x00000001
    4d64:	00010101 	.word	0x00010101
    4d68:	031b1b00 	.word	0x031b1b00
    4d6c:	00000002 	.word	0x00000002
    4d70:	00001d4c 	.word	0x00001d4c
    4d74:	001f0003 	.word	0x001f0003
    4d78:	00000000 	.word	0x00000000
    4d7c:	d64ec0df 	.word	0xd64ec0df
    4d80:	09667c1f 	.word	0x09667c1f
    4d84:	a02bf50a 	.word	0xa02bf50a
    4d88:	6443f298 	.word	0x6443f298
    4d8c:	2aa6c562 	.word	0x2aa6c562

00004d90 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    4d90:	4a05      	ldr	r2, [pc, #20]	; (4da8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    4d92:	b510      	push	{r4, lr}
    4d94:	6852      	ldr	r2, [r2, #4]
    4d96:	b112      	cbz	r2, 4d9e <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4d9c:	4710      	bx	r2
    4d9e:	2183      	movs	r1, #131	; 0x83
    4da0:	2004      	movs	r0, #4
    4da2:	f7ff ff69 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4da6:	0000      	.short	0x0000
    4da8:	20000eb0 	.word	0x20000eb0

00004dac <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    4dac:	4a05      	ldr	r2, [pc, #20]	; (4dc4 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    4dae:	b510      	push	{r4, lr}
    4db0:	6812      	ldr	r2, [r2, #0]
    4db2:	b112      	cbz	r2, 4dba <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    4db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4db8:	4710      	bx	r2
    4dba:	217d      	movs	r1, #125	; 0x7d
    4dbc:	2004      	movs	r0, #4
    4dbe:	f7ff ff5b 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dc2:	0000      	.short	0x0000
    4dc4:	20000eb0 	.word	0x20000eb0

00004dc8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4dc8:	4a05      	ldr	r2, [pc, #20]	; (4de0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    4dca:	b510      	push	{r4, lr}
    4dcc:	6892      	ldr	r2, [r2, #8]
    4dce:	b112      	cbz	r2, 4dd6 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    4dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4dd4:	4710      	bx	r2
    4dd6:	2189      	movs	r1, #137	; 0x89
    4dd8:	2004      	movs	r0, #4
    4dda:	f7ff ff4d 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dde:	0000      	.short	0x0000
    4de0:	20000eb0 	.word	0x20000eb0

00004de4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4de4:	4805      	ldr	r0, [pc, #20]	; (4dfc <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    4de6:	6801      	ldr	r1, [r0, #0]
    4de8:	b129      	cbz	r1, 4df6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4dea:	6841      	ldr	r1, [r0, #4]
    4dec:	b119      	cbz	r1, 4df6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4dee:	6880      	ldr	r0, [r0, #8]
    4df0:	b108      	cbz	r0, 4df6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4df2:	2001      	movs	r0, #1
    4df4:	4770      	bx	lr
    4df6:	2000      	movs	r0, #0
    4df8:	4770      	bx	lr
    4dfa:	0000      	.short	0x0000
    4dfc:	20000eb0 	.word	0x20000eb0

00004e00 <sdc_rand_source_register>:
    4e00:	4902      	ldr	r1, [pc, #8]	; (4e0c <sdc_rand_source_register+0xc>)
    4e02:	c80d      	ldmia	r0, {r0, r2, r3}
    4e04:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4e08:	2000      	movs	r0, #0
    4e0a:	4770      	bx	lr
    4e0c:	20000eb0 	.word	0x20000eb0

00004e10 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e12:	4c12      	ldr	r4, [pc, #72]	; (4e5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4e14:	2600      	movs	r6, #0
    4e16:	6825      	ldr	r5, [r4, #0]
    4e18:	e011      	b.n	4e3e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4e1a:	9800      	ldr	r0, [sp, #0]
    4e1c:	2802      	cmp	r0, #2
    4e1e:	d002      	beq.n	4e26 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4e20:	2803      	cmp	r0, #3
    4e22:	d10c      	bne.n	4e3e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4e24:	e006      	b.n	4e34 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4e26:	6820      	ldr	r0, [r4, #0]
    4e28:	b110      	cbz	r0, 4e30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    4e2a:	2000      	movs	r0, #0
    4e2c:	6026      	str	r6, [r4, #0]
    4e2e:	e005      	b.n	4e3c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4e30:	2128      	movs	r1, #40	; 0x28
    4e32:	e00c      	b.n	4e4e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4e34:	6820      	ldr	r0, [r4, #0]
    4e36:	b168      	cbz	r0, 4e54 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4e38:	2001      	movs	r0, #1
    4e3a:	6026      	str	r6, [r4, #0]
    4e3c:	47a8      	blx	r5
    4e3e:	4668      	mov	r0, sp
    4e40:	f000 fd44 	bl	58cc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4e44:	2800      	cmp	r0, #0
    4e46:	d0e8      	beq.n	4e1a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4e48:	2805      	cmp	r0, #5
    4e4a:	d005      	beq.n	4e58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4e4c:	2135      	movs	r1, #53	; 0x35
    4e4e:	2004      	movs	r0, #4
    4e50:	f7ff ff12 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e54:	212d      	movs	r1, #45	; 0x2d
    4e56:	e7fa      	b.n	4e4e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e5a:	0000      	.short	0x0000
    4e5c:	20000060 	.word	0x20000060
    4e60:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4e62:	4c1f      	ldr	r4, [pc, #124]	; (4ee0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    4e64:	4605      	mov	r5, r0
    4e66:	7820      	ldrb	r0, [r4, #0]
    4e68:	b140      	cbz	r0, 4e7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    4e6a:	78a2      	ldrb	r2, [r4, #2]
    4e6c:	1c61      	adds	r1, r4, #1
    4e6e:	4628      	mov	r0, r5
    4e70:	1c92      	adds	r2, r2, #2
    4e72:	f007 fd57 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4e76:	2000      	movs	r0, #0
    4e78:	7020      	strb	r0, [r4, #0]
    4e7a:	e021      	b.n	4ec0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4e7c:	4819      	ldr	r0, [pc, #100]	; (4ee4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4e7e:	f005 ffc5 	bl	ae0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    4e82:	2800      	cmp	r0, #0
    4e84:	d01d      	beq.n	4ec2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4e86:	4c17      	ldr	r4, [pc, #92]	; (4ee4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4e88:	7820      	ldrb	r0, [r4, #0]
    4e8a:	2811      	cmp	r0, #17
    4e8c:	d104      	bne.n	4e98 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    4e8e:	210a      	movs	r1, #10
    4e90:	203e      	movs	r0, #62	; 0x3e
    4e92:	f007 fee5 	bl	cc60 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4e96:	b118      	cbz	r0, 4ea0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    4e98:	7820      	ldrb	r0, [r4, #0]
    4e9a:	2808      	cmp	r0, #8
    4e9c:	d005      	beq.n	4eaa <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    4e9e:	e009      	b.n	4eb4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    4ea0:	4910      	ldr	r1, [pc, #64]	; (4ee4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4ea2:	4628      	mov	r0, r5
    4ea4:	f008 f8e4 	bl	d070 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    4ea8:	e00a      	b.n	4ec0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4eaa:	2105      	movs	r1, #5
    4eac:	203e      	movs	r0, #62	; 0x3e
    4eae:	f007 fed7 	bl	cc60 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4eb2:	b138      	cbz	r0, 4ec4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    4eb4:	490b      	ldr	r1, [pc, #44]	; (4ee4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4eb6:	4628      	mov	r0, r5
    4eb8:	f007 ff30 	bl	cd1c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    4ebc:	2800      	cmp	r0, #0
    4ebe:	d000      	beq.n	4ec2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4ec0:	2001      	movs	r0, #1
    4ec2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4ec4:	88a0      	ldrh	r0, [r4, #4]
    4ec6:	f8ad 0000 	strh.w	r0, [sp]
    4eca:	a901      	add	r1, sp, #4
    4ecc:	4668      	mov	r0, sp
    4ece:	f008 f9e9 	bl	d2a4 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    4ed2:	2800      	cmp	r0, #0
    4ed4:	d0f5      	beq.n	4ec2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4ed6:	219a      	movs	r1, #154	; 0x9a
    4ed8:	2008      	movs	r0, #8
    4eda:	f7ff fecd 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ede:	0000      	.short	0x0000
    4ee0:	2000104e 	.word	0x2000104e
    4ee4:	20000f4c 	.word	0x20000f4c
    4ee8:	b570      	push	{r4, r5, r6, lr}
    4eea:	780a      	ldrb	r2, [r1, #0]
    4eec:	7082      	strb	r2, [r0, #2]
    4eee:	b33a      	cbz	r2, 4f40 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    4ef0:	2a01      	cmp	r2, #1
    4ef2:	d825      	bhi.n	4f40 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    4ef4:	2313      	movs	r3, #19
    4ef6:	7003      	strb	r3, [r0, #0]
    4ef8:	2300      	movs	r3, #0
    4efa:	e00a      	b.n	4f12 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
    4efc:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4f00:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4f04:	78a6      	ldrb	r6, [r4, #2]
    4f06:	70ee      	strb	r6, [r5, #3]
    4f08:	8864      	ldrh	r4, [r4, #2]
    4f0a:	0a24      	lsrs	r4, r4, #8
    4f0c:	1c5b      	adds	r3, r3, #1
    4f0e:	712c      	strb	r4, [r5, #4]
    4f10:	b2db      	uxtb	r3, r3
    4f12:	4293      	cmp	r3, r2
    4f14:	d3f2      	bcc.n	4efc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    4f16:	2300      	movs	r3, #0
    4f18:	e00b      	b.n	4f32 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
    4f1a:	bf00      	nop
    4f1c:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4f20:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4f24:	792e      	ldrb	r6, [r5, #4]
    4f26:	7166      	strb	r6, [r4, #5]
    4f28:	88ad      	ldrh	r5, [r5, #4]
    4f2a:	0a2d      	lsrs	r5, r5, #8
    4f2c:	1c5b      	adds	r3, r3, #1
    4f2e:	71a5      	strb	r5, [r4, #6]
    4f30:	b2db      	uxtb	r3, r3
    4f32:	4293      	cmp	r3, r2
    4f34:	d3f2      	bcc.n	4f1c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
    4f36:	2101      	movs	r1, #1
    4f38:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4f3c:	b2c0      	uxtb	r0, r0
    4f3e:	bd70      	pop	{r4, r5, r6, pc}
    4f40:	2000      	movs	r0, #0
    4f42:	bd70      	pop	{r4, r5, r6, pc}

00004f44 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4f44:	2101      	movs	r1, #1
    4f46:	4a0c      	ldr	r2, [pc, #48]	; (4f78 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    4f48:	2840      	cmp	r0, #64	; 0x40
    4f4a:	d20c      	bcs.n	4f66 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    4f4c:	2820      	cmp	r0, #32
    4f4e:	d803      	bhi.n	4f58 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    4f50:	1e40      	subs	r0, r0, #1
    4f52:	4081      	lsls	r1, r0
    4f54:	6810      	ldr	r0, [r2, #0]
    4f56:	e002      	b.n	4f5e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4f58:	3821      	subs	r0, #33	; 0x21
    4f5a:	4081      	lsls	r1, r0
    4f5c:	6850      	ldr	r0, [r2, #4]
    4f5e:	4201      	tst	r1, r0
    4f60:	d107      	bne.n	4f72 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4f62:	2000      	movs	r0, #0
    4f64:	4770      	bx	lr
    4f66:	28ff      	cmp	r0, #255	; 0xff
    4f68:	d003      	beq.n	4f72 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4f6a:	3840      	subs	r0, #64	; 0x40
    4f6c:	4081      	lsls	r1, r0
    4f6e:	6890      	ldr	r0, [r2, #8]
    4f70:	e7f5      	b.n	4f5e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4f72:	2001      	movs	r0, #1
    4f74:	4770      	bx	lr
    4f76:	0000      	.short	0x0000
    4f78:	20000064 	.word	0x20000064

00004f7c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4f7c:	2101      	movs	r1, #1
    4f7e:	1e40      	subs	r0, r0, #1
    4f80:	4081      	lsls	r1, r0
    4f82:	4804      	ldr	r0, [pc, #16]	; (4f94 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    4f84:	68c0      	ldr	r0, [r0, #12]
    4f86:	4201      	tst	r1, r0
    4f88:	d001      	beq.n	4f8e <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    4f8a:	2001      	movs	r0, #1
    4f8c:	4770      	bx	lr
    4f8e:	2000      	movs	r0, #0
    4f90:	4770      	bx	lr
    4f92:	0000      	.short	0x0000
    4f94:	20000064 	.word	0x20000064

00004f98 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4f98:	4901      	ldr	r1, [pc, #4]	; (4fa0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    4f9a:	6800      	ldr	r0, [r0, #0]
    4f9c:	60c8      	str	r0, [r1, #12]
    4f9e:	4770      	bx	lr
    4fa0:	20000064 	.word	0x20000064

00004fa4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    4fa4:	4904      	ldr	r1, [pc, #16]	; (4fb8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    4fa6:	6802      	ldr	r2, [r0, #0]
    4fa8:	6840      	ldr	r0, [r0, #4]
    4faa:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    4fae:	600a      	str	r2, [r1, #0]
    4fb0:	4a02      	ldr	r2, [pc, #8]	; (4fbc <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    4fb2:	4310      	orrs	r0, r2
    4fb4:	6048      	str	r0, [r1, #4]
    4fb6:	4770      	bx	lr
    4fb8:	20000064 	.word	0x20000064
    4fbc:	024007f8 	.word	0x024007f8

00004fc0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    4fc0:	4901      	ldr	r1, [pc, #4]	; (4fc8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    4fc2:	6800      	ldr	r0, [r0, #0]
    4fc4:	6088      	str	r0, [r1, #8]
    4fc6:	4770      	bx	lr
    4fc8:	20000064 	.word	0x20000064

00004fcc <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4fcc:	4805      	ldr	r0, [pc, #20]	; (4fe4 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    4fce:	f04f 31ff 	mov.w	r1, #4294967295
    4fd2:	6001      	str	r1, [r0, #0]
    4fd4:	0cc9      	lsrs	r1, r1, #19
    4fd6:	6041      	str	r1, [r0, #4]
    4fd8:	2100      	movs	r1, #0
    4fda:	6081      	str	r1, [r0, #8]
    4fdc:	211f      	movs	r1, #31
    4fde:	60c1      	str	r1, [r0, #12]
    4fe0:	4770      	bx	lr
    4fe2:	0000      	.short	0x0000
    4fe4:	20000064 	.word	0x20000064

00004fe8 <sdc_hci_cmd_cb_reset>:
    4fe8:	b510      	push	{r4, lr}
    4fea:	f7ff ffef 	bl	4fcc <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    4fee:	f00a ff35 	bl	fe5c <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    4ff2:	4604      	mov	r4, r0
    4ff4:	4802      	ldr	r0, [pc, #8]	; (5000 <sdc_hci_cmd_cb_reset+0x18>)
    4ff6:	6800      	ldr	r0, [r0, #0]
    4ff8:	b100      	cbz	r0, 4ffc <sdc_hci_cmd_cb_reset+0x14>
    4ffa:	4780      	blx	r0
    4ffc:	4620      	mov	r0, r4
    4ffe:	bd10      	pop	{r4, pc}
    5000:	20000074 	.word	0x20000074

00005004 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    5004:	4901      	ldr	r1, [pc, #4]	; (500c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    5006:	6008      	str	r0, [r1, #0]
    5008:	4770      	bx	lr
    500a:	0000      	.short	0x0000
    500c:	20000074 	.word	0x20000074

00005010 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    5010:	2102      	movs	r1, #2
    5012:	8001      	strh	r1, [r0, #0]
    5014:	8041      	strh	r1, [r0, #2]
    5016:	2100      	movs	r1, #0
    5018:	7101      	strb	r1, [r0, #4]
    501a:	21df      	movs	r1, #223	; 0xdf
    501c:	7141      	strb	r1, [r0, #5]
    501e:	f644 61c0 	movw	r1, #20160	; 0x4ec0
    5022:	80c1      	strh	r1, [r0, #6]
    5024:	4901      	ldr	r1, [pc, #4]	; (502c <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    5026:	6081      	str	r1, [r0, #8]
    5028:	2000      	movs	r0, #0
    502a:	4770      	bx	lr
    502c:	667c1fd6 	.word	0x667c1fd6

00005030 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    5030:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    5032:	4604      	mov	r4, r0
    5034:	4669      	mov	r1, sp
    5036:	f008 fc93 	bl	d960 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    503a:	b170      	cbz	r0, 505a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    503c:	f240 215a 	movw	r1, #602	; 0x25a
    5040:	e008      	b.n	5054 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    5042:	bf00      	nop
    5044:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    5048:	4621      	mov	r1, r4
    504a:	f000 f8ab 	bl	51a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    504e:	b120      	cbz	r0, 505a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    5050:	f240 215f 	movw	r1, #607	; 0x25f
    5054:	2017      	movs	r0, #23
    5056:	f7ff fe0f 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    505a:	4668      	mov	r0, sp
    505c:	f000 f852 	bl	5104 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    5060:	2800      	cmp	r0, #0
    5062:	d0ef      	beq.n	5044 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    5064:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00005068 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    5068:	b510      	push	{r4, lr}
    506a:	2802      	cmp	r0, #2
    506c:	d304      	bcc.n	5078 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    506e:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    5072:	2017      	movs	r0, #23
    5074:	f7ff fe00 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5078:	4901      	ldr	r1, [pc, #4]	; (5080 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    507a:	5c08      	ldrb	r0, [r1, r0]
    507c:	bd10      	pop	{r4, pc}
    507e:	0000      	.short	0x0000
    5080:	20000ebc 	.word	0x20000ebc

00005084 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    5084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5086:	0005      	movs	r5, r0
    5088:	9500      	str	r5, [sp, #0]
    508a:	d010      	beq.n	50ae <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
    508c:	2600      	movs	r6, #0
    508e:	7808      	ldrb	r0, [r1, #0]
    5090:	7849      	ldrb	r1, [r1, #1]
    5092:	4604      	mov	r4, r0
    5094:	42a1      	cmp	r1, r4
    5096:	d900      	bls.n	509a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    5098:	460c      	mov	r4, r1
    509a:	1cea      	adds	r2, r5, #3
    509c:	f022 0203 	bic.w	r2, r2, #3
    50a0:	42aa      	cmp	r2, r5
    50a2:	d006      	beq.n	50b2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    50a4:	f240 1179 	movw	r1, #377	; 0x179
    50a8:	2017      	movs	r0, #23
    50aa:	f7ff fde5 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50ae:	2601      	movs	r6, #1
    50b0:	e7ed      	b.n	508e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    50b2:	4f13      	ldr	r7, [pc, #76]	; (5100 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    50b4:	7038      	strb	r0, [r7, #0]
    50b6:	7079      	strb	r1, [r7, #1]
    50b8:	4631      	mov	r1, r6
    50ba:	4668      	mov	r0, sp
    50bc:	f000 f8ee 	bl	529c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    50c0:	2100      	movs	r1, #0
    50c2:	460b      	mov	r3, r1
    50c4:	9800      	ldr	r0, [sp, #0]
    50c6:	1cc0      	adds	r0, r0, #3
    50c8:	f020 0003 	bic.w	r0, r0, #3
    50cc:	9000      	str	r0, [sp, #0]
    50ce:	b96e      	cbnz	r6, 50ec <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    50d0:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    50d4:	60d0      	str	r0, [r2, #12]
    50d6:	2000      	movs	r0, #0
    50d8:	e006      	b.n	50e8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    50da:	bf00      	nop
    50dc:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    50e0:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    50e4:	1c40      	adds	r0, r0, #1
    50e6:	b2c0      	uxtb	r0, r0
    50e8:	42a0      	cmp	r0, r4
    50ea:	d3f7      	bcc.n	50dc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    50ec:	9800      	ldr	r0, [sp, #0]
    50ee:	1c49      	adds	r1, r1, #1
    50f0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    50f4:	b2c9      	uxtb	r1, r1
    50f6:	9000      	str	r0, [sp, #0]
    50f8:	2902      	cmp	r1, #2
    50fa:	d3e3      	bcc.n	50c4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
    50fc:	1b40      	subs	r0, r0, r5
    50fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5100:	20000ebc 	.word	0x20000ebc

00005104 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    5104:	b570      	push	{r4, r5, r6, lr}
    5106:	4604      	mov	r4, r0
    5108:	f008 fd9e 	bl	dc48 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    510c:	b108      	cbz	r0, 5112 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    510e:	2010      	movs	r0, #16
    5110:	bd70      	pop	{r4, r5, r6, pc}
    5112:	7825      	ldrb	r5, [r4, #0]
    5114:	f000 f8fe 	bl	5314 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    5118:	4602      	mov	r2, r0
    511a:	480c      	ldr	r0, [pc, #48]	; (514c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    511c:	8861      	ldrh	r1, [r4, #2]
    511e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5122:	e00e      	b.n	5142 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    5124:	68c3      	ldr	r3, [r0, #12]
    5126:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    512a:	b143      	cbz	r3, 513e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    512c:	1c4a      	adds	r2, r1, #1
    512e:	8062      	strh	r2, [r4, #2]
    5130:	80a1      	strh	r1, [r4, #4]
    5132:	68c0      	ldr	r0, [r0, #12]
    5134:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    5138:	60a0      	str	r0, [r4, #8]
    513a:	2000      	movs	r0, #0
    513c:	bd70      	pop	{r4, r5, r6, pc}
    513e:	1c49      	adds	r1, r1, #1
    5140:	b289      	uxth	r1, r1
    5142:	4291      	cmp	r1, r2
    5144:	d3ee      	bcc.n	5124 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    5146:	8061      	strh	r1, [r4, #2]
    5148:	2005      	movs	r0, #5
    514a:	bd70      	pop	{r4, r5, r6, pc}
    514c:	20000ebc 	.word	0x20000ebc

00005150 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    5150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5154:	b121      	cbz	r1, 5160 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    5156:	2901      	cmp	r1, #1
    5158:	d002      	beq.n	5160 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    515a:	2000      	movs	r0, #0
    515c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5160:	4c0f      	ldr	r4, [pc, #60]	; (51a0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    5162:	2700      	movs	r7, #0
    5164:	463b      	mov	r3, r7
    5166:	f64f 76ff 	movw	r6, #65535	; 0xffff
    516a:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    516e:	f814 c001 	ldrb.w	ip, [r4, r1]
    5172:	e00a      	b.n	518a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    5174:	19dc      	adds	r4, r3, r7
    5176:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    517a:	b2a4      	uxth	r4, r4
    517c:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    5180:	f1be 0f00 	cmp.w	lr, #0
    5184:	d004      	beq.n	5190 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    5186:	1c5b      	adds	r3, r3, #1
    5188:	b29b      	uxth	r3, r3
    518a:	459c      	cmp	ip, r3
    518c:	d8f2      	bhi.n	5174 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    518e:	4634      	mov	r4, r6
    5190:	8004      	strh	r4, [r0, #0]
    5192:	4620      	mov	r0, r4
    5194:	42b4      	cmp	r4, r6
    5196:	d0e0      	beq.n	515a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    5198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    519c:	f000 b834 	b.w	5208 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    51a0:	20000ebc 	.word	0x20000ebc

000051a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    51a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51a8:	4606      	mov	r6, r0
    51aa:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    51ae:	460c      	mov	r4, r1
    51b0:	f243 0702 	movw	r7, #12290	; 0x3002
    51b4:	38ff      	subs	r0, #255	; 0xff
    51b6:	d020      	beq.n	51fa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    51b8:	2c02      	cmp	r4, #2
    51ba:	d302      	bcc.n	51c2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    51bc:	2007      	movs	r0, #7
    51be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    51c2:	4630      	mov	r0, r6
    51c4:	f000 f85a 	bl	527c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    51c8:	0005      	movs	r5, r0
    51ca:	d016      	beq.n	51fa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    51cc:	480c      	ldr	r0, [pc, #48]	; (5200 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    51ce:	4629      	mov	r1, r5
    51d0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    51d4:	4630      	mov	r0, r6
    51d6:	4790      	blx	r2
    51d8:	480a      	ldr	r0, [pc, #40]	; (5204 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    51da:	2100      	movs	r1, #0
    51dc:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    51e0:	68f8      	ldr	r0, [r7, #12]
    51e2:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    51e6:	4620      	mov	r0, r4
    51e8:	f000 f88a 	bl	5300 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    51ec:	4602      	mov	r2, r0
    51ee:	4629      	mov	r1, r5
    51f0:	6878      	ldr	r0, [r7, #4]
    51f2:	f008 fb94 	bl	d91e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    51f6:	2000      	movs	r0, #0
    51f8:	e7e1      	b.n	51be <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    51fa:	4638      	mov	r0, r7
    51fc:	e7df      	b.n	51be <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    51fe:	0000      	.short	0x0000
    5200:	00005334 	.word	0x00005334
    5204:	20000ebc 	.word	0x20000ebc
    5208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    520c:	4690      	mov	r8, r2
    520e:	460d      	mov	r5, r1
    5210:	4607      	mov	r7, r0
    5212:	f008 fbb6 	bl	d982 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    5216:	b148      	cbz	r0, 522c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    5218:	4816      	ldr	r0, [pc, #88]	; (5274 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    521a:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    521e:	68f0      	ldr	r0, [r6, #12]
    5220:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    5224:	b128      	cbz	r0, 5232 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    5226:	f44f 719d 	mov.w	r1, #314	; 0x13a
    522a:	e015      	b.n	5258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    522c:	f240 1139 	movw	r1, #313	; 0x139
    5230:	e012      	b.n	5258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    5232:	6870      	ldr	r0, [r6, #4]
    5234:	2800      	cmp	r0, #0
    5236:	d01a      	beq.n	526e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    5238:	4628      	mov	r0, r5
    523a:	f000 f861 	bl	5300 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    523e:	4601      	mov	r1, r0
    5240:	6870      	ldr	r0, [r6, #4]
    5242:	f008 fb1e 	bl	d882 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5246:	0004      	movs	r4, r0
    5248:	d010      	beq.n	526c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    524a:	68f0      	ldr	r0, [r6, #12]
    524c:	2d02      	cmp	r5, #2
    524e:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    5252:	d304      	bcc.n	525e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    5254:	f240 1145 	movw	r1, #325	; 0x145
    5258:	2017      	movs	r0, #23
    525a:	f7ff fd0d 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    525e:	4806      	ldr	r0, [pc, #24]	; (5278 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    5260:	4642      	mov	r2, r8
    5262:	4621      	mov	r1, r4
    5264:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    5268:	4638      	mov	r0, r7
    526a:	4798      	blx	r3
    526c:	4620      	mov	r0, r4
    526e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5272:	0000      	.short	0x0000
    5274:	20000ebc 	.word	0x20000ebc
    5278:	0000532c 	.word	0x0000532c
    527c:	b570      	push	{r4, r5, r6, lr}
    527e:	460c      	mov	r4, r1
    5280:	4605      	mov	r5, r0
    5282:	f008 fb7e 	bl	d982 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    5286:	2800      	cmp	r0, #0
    5288:	d005      	beq.n	5296 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    528a:	4803      	ldr	r0, [pc, #12]	; (5298 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    528c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5290:	68c0      	ldr	r0, [r0, #12]
    5292:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    5296:	bd70      	pop	{r4, r5, r6, pc}
    5298:	20000ebc 	.word	0x20000ebc
    529c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    52a0:	4e16      	ldr	r6, [pc, #88]	; (52fc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    52a2:	4688      	mov	r8, r1
    52a4:	4605      	mov	r5, r0
    52a6:	2400      	movs	r4, #0
    52a8:	6828      	ldr	r0, [r5, #0]
    52aa:	1cc0      	adds	r0, r0, #3
    52ac:	f020 0003 	bic.w	r0, r0, #3
    52b0:	6028      	str	r0, [r5, #0]
    52b2:	4620      	mov	r0, r4
    52b4:	f000 f824 	bl	5300 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    52b8:	5d31      	ldrb	r1, [r6, r4]
    52ba:	4348      	muls	r0, r1
    52bc:	f1b8 0f00 	cmp.w	r8, #0
    52c0:	d001      	beq.n	52c6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    52c2:	2200      	movs	r2, #0
    52c4:	e000      	b.n	52c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    52c6:	682a      	ldr	r2, [r5, #0]
    52c8:	4601      	mov	r1, r0
    52ca:	9200      	str	r2, [sp, #0]
    52cc:	b132      	cbz	r2, 52dc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    52ce:	2700      	movs	r7, #0
    52d0:	ea4f 000d 	mov.w	r0, sp
    52d4:	f008 fb02 	bl	d8dc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    52d8:	b11f      	cbz	r7, 52e2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    52da:	e006      	b.n	52ea <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    52dc:	2701      	movs	r7, #1
    52de:	2000      	movs	r0, #0
    52e0:	e7f8      	b.n	52d4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    52e2:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    52e6:	9a00      	ldr	r2, [sp, #0]
    52e8:	604a      	str	r2, [r1, #4]
    52ea:	6829      	ldr	r1, [r5, #0]
    52ec:	1c64      	adds	r4, r4, #1
    52ee:	4408      	add	r0, r1
    52f0:	b2e4      	uxtb	r4, r4
    52f2:	6028      	str	r0, [r5, #0]
    52f4:	2c02      	cmp	r4, #2
    52f6:	d3d7      	bcc.n	52a8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    52f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    52fc:	20000ebc 	.word	0x20000ebc
    5300:	4903      	ldr	r1, [pc, #12]	; (5310 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    5302:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    5306:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    530a:	1cc0      	adds	r0, r0, #3
    530c:	4008      	ands	r0, r1
    530e:	4770      	bx	lr
    5310:	00005328 	.word	0x00005328
    5314:	4903      	ldr	r1, [pc, #12]	; (5324 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    5316:	7808      	ldrb	r0, [r1, #0]
    5318:	7849      	ldrb	r1, [r1, #1]
    531a:	4288      	cmp	r0, r1
    531c:	d200      	bcs.n	5320 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    531e:	4608      	mov	r0, r1
    5320:	4770      	bx	lr
    5322:	0000      	.short	0x0000
    5324:	20000ebc 	.word	0x20000ebc
    5328:	00d40218 	.word	0x00d40218
    532c:	0000d997 	.word	0x0000d997
    5330:	0000d997 	.word	0x0000d997
    5334:	0000f43f 	.word	0x0000f43f
    5338:	0000e8b7 	.word	0x0000e8b7

0000533c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    533c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5340:	4c26      	ldr	r4, [pc, #152]	; (53dc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    5342:	4680      	mov	r8, r0
    5344:	b081      	sub	sp, #4
    5346:	6820      	ldr	r0, [r4, #0]
    5348:	469a      	mov	sl, r3
    534a:	4693      	mov	fp, r2
    534c:	b158      	cbz	r0, 5366 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    534e:	7a02      	ldrb	r2, [r0, #8]
    5350:	4542      	cmp	r2, r8
    5352:	d903      	bls.n	535c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    5354:	6841      	ldr	r1, [r0, #4]
    5356:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    535a:	b140      	cbz	r0, 536e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    535c:	f243 0002 	movw	r0, #12290	; 0x3002
    5360:	b005      	add	sp, #20
    5362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5366:	21a5      	movs	r1, #165	; 0xa5
    5368:	2018      	movs	r0, #24
    536a:	f7ff fc85 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    536e:	4619      	mov	r1, r3
    5370:	9802      	ldr	r0, [sp, #8]
    5372:	f008 fb28 	bl	d9c6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    5376:	b286      	uxth	r6, r0
    5378:	4658      	mov	r0, fp
    537a:	990e      	ldr	r1, [sp, #56]	; 0x38
    537c:	f008 fb1a 	bl	d9b4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    5380:	b285      	uxth	r5, r0
    5382:	1970      	adds	r0, r6, r5
    5384:	1d00      	adds	r0, r0, #4
    5386:	b287      	uxth	r7, r0
    5388:	6820      	ldr	r0, [r4, #0]
    538a:	46a1      	mov	r9, r4
    538c:	4639      	mov	r1, r7
    538e:	6800      	ldr	r0, [r0, #0]
    5390:	f008 fa77 	bl	d882 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5394:	0004      	movs	r4, r0
    5396:	d01f      	beq.n	53d8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    5398:	8067      	strh	r7, [r4, #2]
    539a:	8025      	strh	r5, [r4, #0]
    539c:	4629      	mov	r1, r5
    539e:	1d20      	adds	r0, r4, #4
    53a0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    53a2:	4607      	mov	r7, r0
    53a4:	465a      	mov	r2, fp
    53a6:	2301      	movs	r3, #1
    53a8:	9500      	str	r5, [sp, #0]
    53aa:	f008 f9ca 	bl	d742 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    53ae:	8820      	ldrh	r0, [r4, #0]
    53b0:	4631      	mov	r1, r6
    53b2:	4438      	add	r0, r7
    53b4:	2301      	movs	r3, #1
    53b6:	9a02      	ldr	r2, [sp, #8]
    53b8:	f8cd a000 	str.w	sl, [sp]
    53bc:	f008 f9c1 	bl	d742 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    53c0:	8820      	ldrh	r0, [r4, #0]
    53c2:	19c1      	adds	r1, r0, r7
    53c4:	4638      	mov	r0, r7
    53c6:	f008 f9ed 	bl	d7a4 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    53ca:	f8d9 0000 	ldr.w	r0, [r9]
    53ce:	6841      	ldr	r1, [r0, #4]
    53d0:	2000      	movs	r0, #0
    53d2:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    53d6:	e7c3      	b.n	5360 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    53d8:	2004      	movs	r0, #4
    53da:	e7c1      	b.n	5360 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    53dc:	20000078 	.word	0x20000078

000053e0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    53e0:	b570      	push	{r4, r5, r6, lr}
    53e2:	4c14      	ldr	r4, [pc, #80]	; (5434 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    53e4:	6823      	ldr	r3, [r4, #0]
    53e6:	b18b      	cbz	r3, 540c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    53e8:	7a19      	ldrb	r1, [r3, #8]
    53ea:	4281      	cmp	r1, r0
    53ec:	d912      	bls.n	5414 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    53ee:	685a      	ldr	r2, [r3, #4]
    53f0:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    53f4:	b171      	cbz	r1, 5414 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    53f6:	2500      	movs	r5, #0
    53f8:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    53fc:	884a      	ldrh	r2, [r1, #2]
    53fe:	6818      	ldr	r0, [r3, #0]
    5400:	f008 fa8d 	bl	d91e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5404:	6821      	ldr	r1, [r4, #0]
    5406:	2000      	movs	r0, #0
    5408:	7a0a      	ldrb	r2, [r1, #8]
    540a:	e00c      	b.n	5426 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    540c:	21c8      	movs	r1, #200	; 0xc8
    540e:	2018      	movs	r0, #24
    5410:	f7ff fc32 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5414:	f243 0002 	movw	r0, #12290	; 0x3002
    5418:	bd70      	pop	{r4, r5, r6, pc}
    541a:	684b      	ldr	r3, [r1, #4]
    541c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5420:	b933      	cbnz	r3, 5430 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    5422:	1c40      	adds	r0, r0, #1
    5424:	b2c0      	uxtb	r0, r0
    5426:	4282      	cmp	r2, r0
    5428:	d8f7      	bhi.n	541a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    542a:	6808      	ldr	r0, [r1, #0]
    542c:	f008 fa6c 	bl	d908 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    5430:	2000      	movs	r0, #0
    5432:	bd70      	pop	{r4, r5, r6, pc}
    5434:	20000078 	.word	0x20000078

00005438 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    5438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    543c:	460d      	mov	r5, r1
    543e:	0004      	movs	r4, r0
    5440:	4690      	mov	r8, r2
    5442:	f04f 0600 	mov.w	r6, #0
    5446:	d009      	beq.n	545c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    5448:	2700      	movs	r7, #0
    544a:	1ce0      	adds	r0, r4, #3
    544c:	f020 0003 	bic.w	r0, r0, #3
    5450:	42a0      	cmp	r0, r4
    5452:	d005      	beq.n	5460 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    5454:	2186      	movs	r1, #134	; 0x86
    5456:	2018      	movs	r0, #24
    5458:	f7ff fc0e 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    545c:	2701      	movs	r7, #1
    545e:	e7f4      	b.n	544a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    5460:	b1cd      	cbz	r5, 5496 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5462:	4611      	mov	r1, r2
    5464:	2000      	movs	r0, #0
    5466:	f008 fa39 	bl	d8dc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    546a:	300c      	adds	r0, #12
    546c:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    5470:	b98f      	cbnz	r7, 5496 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5472:	4f0a      	ldr	r7, [pc, #40]	; (549c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    5474:	f104 000c 	add.w	r0, r4, #12
    5478:	00aa      	lsls	r2, r5, #2
    547a:	603c      	str	r4, [r7, #0]
    547c:	7225      	strb	r5, [r4, #8]
    547e:	6060      	str	r0, [r4, #4]
    5480:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5484:	6020      	str	r0, [r4, #0]
    5486:	2100      	movs	r1, #0
    5488:	6860      	ldr	r0, [r4, #4]
    548a:	f007 fac5 	bl	ca18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    548e:	4641      	mov	r1, r8
    5490:	6838      	ldr	r0, [r7, #0]
    5492:	f008 fa23 	bl	d8dc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5496:	4630      	mov	r0, r6
    5498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    549c:	20000078 	.word	0x20000078

000054a0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    54a0:	b570      	push	{r4, r5, r6, lr}
    54a2:	4d08      	ldr	r5, [pc, #32]	; (54c4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    54a4:	6828      	ldr	r0, [r5, #0]
    54a6:	2800      	cmp	r0, #0
    54a8:	d00a      	beq.n	54c0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    54aa:	2400      	movs	r4, #0
    54ac:	e004      	b.n	54b8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    54ae:	4620      	mov	r0, r4
    54b0:	f7ff ff96 	bl	53e0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    54b4:	1c64      	adds	r4, r4, #1
    54b6:	b2e4      	uxtb	r4, r4
    54b8:	6828      	ldr	r0, [r5, #0]
    54ba:	7a00      	ldrb	r0, [r0, #8]
    54bc:	42a0      	cmp	r0, r4
    54be:	d8f6      	bhi.n	54ae <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    54c0:	bd70      	pop	{r4, r5, r6, pc}
    54c2:	0000      	.short	0x0000
    54c4:	20000078 	.word	0x20000078

000054c8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    54c8:	4909      	ldr	r1, [pc, #36]	; (54f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    54ca:	b510      	push	{r4, lr}
    54cc:	4602      	mov	r2, r0
    54ce:	6809      	ldr	r1, [r1, #0]
    54d0:	2000      	movs	r0, #0
    54d2:	b149      	cbz	r1, 54e8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    54d4:	7a0b      	ldrb	r3, [r1, #8]
    54d6:	4293      	cmp	r3, r2
    54d8:	d905      	bls.n	54e6 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    54da:	6849      	ldr	r1, [r1, #4]
    54dc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    54e0:	2900      	cmp	r1, #0
    54e2:	d000      	beq.n	54e6 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    54e4:	1d08      	adds	r0, r1, #4
    54e6:	bd10      	pop	{r4, pc}
    54e8:	21ee      	movs	r1, #238	; 0xee
    54ea:	2018      	movs	r0, #24
    54ec:	f7ff fbc4 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54f0:	20000078 	.word	0x20000078

000054f4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    54f4:	490a      	ldr	r1, [pc, #40]	; (5520 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    54f6:	b510      	push	{r4, lr}
    54f8:	4602      	mov	r2, r0
    54fa:	6809      	ldr	r1, [r1, #0]
    54fc:	2000      	movs	r0, #0
    54fe:	b159      	cbz	r1, 5518 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    5500:	7a0b      	ldrb	r3, [r1, #8]
    5502:	4293      	cmp	r3, r2
    5504:	d907      	bls.n	5516 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5506:	6849      	ldr	r1, [r1, #4]
    5508:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    550c:	2900      	cmp	r1, #0
    550e:	d002      	beq.n	5516 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5510:	f831 0b04 	ldrh.w	r0, [r1], #4
    5514:	4408      	add	r0, r1
    5516:	bd10      	pop	{r4, pc}
    5518:	21fc      	movs	r1, #252	; 0xfc
    551a:	2018      	movs	r0, #24
    551c:	f7ff fbac 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5520:	20000078 	.word	0x20000078
    5524:	b570      	push	{r4, r5, r6, lr}
    5526:	4b1e      	ldr	r3, [pc, #120]	; (55a0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    5528:	6845      	ldr	r5, [r0, #4]
    552a:	4604      	mov	r4, r0
    552c:	2200      	movs	r2, #0
    552e:	b1a1      	cbz	r1, 555a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    5530:	2001      	movs	r0, #1
    5532:	7060      	strb	r0, [r4, #1]
    5534:	8858      	ldrh	r0, [r3, #2]
    5536:	0881      	lsrs	r1, r0, #2
    5538:	f05f 0000 	movs.w	r0, #0
    553c:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    5540:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    5544:	831a      	strh	r2, [r3, #24]
    5546:	8419      	strh	r1, [r3, #32]
    5548:	fb00 5301 	mla	r3, r0, r1, r5
    554c:	6073      	str	r3, [r6, #4]
    554e:	1823      	adds	r3, r4, r0
    5550:	1c40      	adds	r0, r0, #1
    5552:	751a      	strb	r2, [r3, #20]
    5554:	2804      	cmp	r0, #4
    5556:	d3f1      	bcc.n	553c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    5558:	bd70      	pop	{r4, r5, r6, pc}
    555a:	7062      	strb	r2, [r4, #1]
    555c:	f05f 0000 	movs.w	r0, #0
    5560:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    5564:	830a      	strh	r2, [r1, #24]
    5566:	840a      	strh	r2, [r1, #32]
    5568:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    556c:	604a      	str	r2, [r1, #4]
    556e:	1821      	adds	r1, r4, r0
    5570:	1c40      	adds	r0, r0, #1
    5572:	750a      	strb	r2, [r1, #20]
    5574:	2804      	cmp	r0, #4
    5576:	d3f3      	bcc.n	5560 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    5578:	8858      	ldrh	r0, [r3, #2]
    557a:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    557e:	d201      	bcs.n	5584 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    5580:	0846      	lsrs	r6, r0, #1
    5582:	e000      	b.n	5586 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    5584:	26ff      	movs	r6, #255	; 0xff
    5586:	f008 fa91 	bl	daac <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    558a:	6065      	str	r5, [r4, #4]
    558c:	8420      	strh	r0, [r4, #32]
    558e:	1829      	adds	r1, r5, r0
    5590:	60a1      	str	r1, [r4, #8]
    5592:	8466      	strh	r6, [r4, #34]	; 0x22
    5594:	60e5      	str	r5, [r4, #12]
    5596:	84a0      	strh	r0, [r4, #36]	; 0x24
    5598:	6121      	str	r1, [r4, #16]
    559a:	84e6      	strh	r6, [r4, #38]	; 0x26
    559c:	bd70      	pop	{r4, r5, r6, pc}
    559e:	0000      	.short	0x0000
    55a0:	2000007c 	.word	0x2000007c

000055a4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    55a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55a8:	b170      	cbz	r0, 55c8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    55aa:	2500      	movs	r5, #0
    55ac:	4411      	add	r1, r2
    55ae:	b2cc      	uxtb	r4, r1
    55b0:	4e24      	ldr	r6, [pc, #144]	; (5644 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa0>)
    55b2:	1cc1      	adds	r1, r0, #3
    55b4:	2700      	movs	r7, #0
    55b6:	f021 0103 	bic.w	r1, r1, #3
    55ba:	7034      	strb	r4, [r6, #0]
    55bc:	4281      	cmp	r1, r0
    55be:	d005      	beq.n	55cc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    55c0:	214e      	movs	r1, #78	; 0x4e
    55c2:	2009      	movs	r0, #9
    55c4:	f7ff fb58 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    55c8:	2501      	movs	r5, #1
    55ca:	e7ef      	b.n	55ac <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    55cc:	2b1f      	cmp	r3, #31
    55ce:	d804      	bhi.n	55da <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x36>
    55d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    55d4:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    55d8:	e009      	b.n	55ee <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    55da:	0059      	lsls	r1, r3, #1
    55dc:	2bff      	cmp	r3, #255	; 0xff
    55de:	d90b      	bls.n	55f8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x54>
    55e0:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    55e4:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    55e8:	d200      	bcs.n	55ec <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    55ea:	4611      	mov	r1, r2
    55ec:	b289      	uxth	r1, r1
    55ee:	1cc9      	adds	r1, r1, #3
    55f0:	f021 0303 	bic.w	r3, r1, #3
    55f4:	b135      	cbz	r5, 5604 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    55f6:	e007      	b.n	5608 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x64>
    55f8:	227c      	movs	r2, #124	; 0x7c
    55fa:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    55fe:	d3f5      	bcc.n	55ec <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5600:	217c      	movs	r1, #124	; 0x7c
    5602:	e7f3      	b.n	55ec <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5604:	6070      	str	r0, [r6, #4]
    5606:	8073      	strh	r3, [r6, #2]
    5608:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    560c:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
    5610:	2100      	movs	r1, #0
    5612:	6876      	ldr	r6, [r6, #4]
    5614:	f04f 0c01 	mov.w	ip, #1
    5618:	e00d      	b.n	5636 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x92>
    561a:	b94d      	cbnz	r5, 5630 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8c>
    561c:	eb01 0781 	add.w	r7, r1, r1, lsl #2
    5620:	eb00 0e02 	add.w	lr, r0, r2
    5624:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    5628:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    562c:	f8c7 e004 	str.w	lr, [r7, #4]
    5630:	1c49      	adds	r1, r1, #1
    5632:	441a      	add	r2, r3
    5634:	b2c9      	uxtb	r1, r1
    5636:	42a1      	cmp	r1, r4
    5638:	d3ef      	bcc.n	561a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x76>
    563a:	1dd2      	adds	r2, r2, #7
    563c:	f022 0007 	bic.w	r0, r2, #7
    5640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5644:	2000007c 	.word	0x2000007c

00005648 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    5648:	b570      	push	{r4, r5, r6, lr}
    564a:	4a10      	ldr	r2, [pc, #64]	; (568c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    564c:	2000      	movs	r0, #0
    564e:	6851      	ldr	r1, [r2, #4]
    5650:	7812      	ldrb	r2, [r2, #0]
    5652:	e014      	b.n	567e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    5654:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    5658:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    565c:	b16b      	cbz	r3, 567a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    565e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5662:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    5666:	d00c      	beq.n	5682 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    5668:	2500      	movs	r5, #0
    566a:	70a5      	strb	r5, [r4, #2]
    566c:	2101      	movs	r1, #1
    566e:	4620      	mov	r0, r4
    5670:	f7ff ff58 	bl	5524 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    5674:	7025      	strb	r5, [r4, #0]
    5676:	4620      	mov	r0, r4
    5678:	bd70      	pop	{r4, r5, r6, pc}
    567a:	1c40      	adds	r0, r0, #1
    567c:	b2c0      	uxtb	r0, r0
    567e:	4290      	cmp	r0, r2
    5680:	d3e8      	bcc.n	5654 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    5682:	21a9      	movs	r1, #169	; 0xa9
    5684:	2009      	movs	r0, #9
    5686:	f7ff faf7 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    568a:	0000      	.short	0x0000
    568c:	2000007c 	.word	0x2000007c

00005690 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    5690:	4804      	ldr	r0, [pc, #16]	; (56a4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    5692:	b510      	push	{r4, lr}
    5694:	8840      	ldrh	r0, [r0, #2]
    5696:	0884      	lsrs	r4, r0, #2
    5698:	f008 fa08 	bl	daac <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    569c:	4284      	cmp	r4, r0
    569e:	d300      	bcc.n	56a2 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    56a0:	4620      	mov	r0, r4
    56a2:	bd10      	pop	{r4, pc}
    56a4:	2000007c 	.word	0x2000007c
    56a8:	4909      	ldr	r1, [pc, #36]	; (56d0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x40>)
    56aa:	b510      	push	{r4, lr}
    56ac:	4807      	ldr	r0, [pc, #28]	; (56cc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x3c>)
    56ae:	6008      	str	r0, [r1, #0]
    56b0:	4b08      	ldr	r3, [pc, #32]	; (56d4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x44>)
    56b2:	2011      	movs	r0, #17
    56b4:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    56b8:	2200      	movs	r2, #0
    56ba:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    56be:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    56c2:	1c40      	adds	r0, r0, #1
    56c4:	b2c0      	uxtb	r0, r0
    56c6:	2814      	cmp	r0, #20
    56c8:	d3f4      	bcc.n	56b4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x24>
    56ca:	bd10      	pop	{r4, pc}
    56cc:	fffe0000 	.word	0xfffe0000
    56d0:	4001f508 	.word	0x4001f508
    56d4:	4001f000 	.word	0x4001f000
    56d8:	b570      	push	{r4, r5, r6, lr}
    56da:	2420      	movs	r4, #32
    56dc:	2100      	movs	r1, #0
    56de:	2301      	movs	r3, #1
    56e0:	fa20 f201 	lsr.w	r2, r0, r1
    56e4:	07d2      	lsls	r2, r2, #31
    56e6:	d020      	beq.n	572a <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
    56e8:	b24a      	sxtb	r2, r1
    56ea:	2a00      	cmp	r2, #0
    56ec:	db10      	blt.n	5710 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x80>
    56ee:	bf00      	nop
    56f0:	ea4f 1652 	mov.w	r6, r2, lsr #5
    56f4:	ea4f 0686 	mov.w	r6, r6, lsl #2
    56f8:	f002 051f 	and.w	r5, r2, #31
    56fc:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    5700:	fa03 f505 	lsl.w	r5, r3, r5
    5704:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    5708:	f3bf 8f4f 	dsb	sy
    570c:	f3bf 8f6f 	isb	sy
    5710:	db0b      	blt.n	572a <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
    5712:	f002 051f 	and.w	r5, r2, #31
    5716:	ea4f 1252 	mov.w	r2, r2, lsr #5
    571a:	ea4f 0282 	mov.w	r2, r2, lsl #2
    571e:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    5722:	fa03 f505 	lsl.w	r5, r3, r5
    5726:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    572a:	f101 0101 	add.w	r1, r1, #1
    572e:	42a1      	cmp	r1, r4
    5730:	d3d6      	bcc.n	56e0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>
    5732:	bd70      	pop	{r4, r5, r6, pc}
    5734:	b570      	push	{r4, r5, r6, lr}
    5736:	0042      	lsls	r2, r0, #1
    5738:	f04f 0100 	mov.w	r1, #0
    573c:	d501      	bpl.n	5742 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xb2>
    573e:	4a14      	ldr	r2, [pc, #80]	; (5790 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x100>)
    5740:	6011      	str	r1, [r2, #0]
    5742:	f3c0 3280 	ubfx	r2, r0, #14, #1
    5746:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    574a:	429a      	cmp	r2, r3
    574c:	d003      	beq.n	5756 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xc6>
    574e:	2166      	movs	r1, #102	; 0x66
    5750:	201b      	movs	r0, #27
    5752:	f7ff fa91 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5756:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    575a:	d014      	beq.n	5786 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xf6>
    575c:	4a0d      	ldr	r2, [pc, #52]	; (5794 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x104>)
    575e:	2001      	movs	r0, #1
    5760:	6050      	str	r0, [r2, #4]
    5762:	1e83      	subs	r3, r0, #2
    5764:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    5768:	4a0b      	ldr	r2, [pc, #44]	; (5798 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x108>)
    576a:	6090      	str	r0, [r2, #8]
    576c:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    5770:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    5774:	4c09      	ldr	r4, [pc, #36]	; (579c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x10c>)
    5776:	6021      	str	r1, [r4, #0]
    5778:	1d25      	adds	r5, r4, #4
    577a:	6028      	str	r0, [r5, #0]
    577c:	6090      	str	r0, [r2, #8]
    577e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    5782:	6021      	str	r1, [r4, #0]
    5784:	6028      	str	r0, [r5, #0]
    5786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    578a:	f7ff bf8d 	b.w	56a8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    578e:	0000      	.short	0x0000
    5790:	4001e504 	.word	0x4001e504
    5794:	4000e000 	.word	0x4000e000
    5798:	4000f000 	.word	0x4000f000
    579c:	4000f500 	.word	0x4000f500

000057a0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    57a0:	b570      	push	{r4, r5, r6, lr}
    57a2:	4c0a      	ldr	r4, [pc, #40]	; (57cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    57a4:	460d      	mov	r5, r1
    57a6:	6020      	str	r0, [r4, #0]
    57a8:	f7ff ffc4 	bl	5734 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xa4>
    57ac:	6820      	ldr	r0, [r4, #0]
    57ae:	f7ff ff93 	bl	56d8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x48>
    57b2:	f000 f877 	bl	58a4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    57b6:	f7ff ff77 	bl	56a8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    57ba:	f008 fa3a 	bl	dc32 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    57be:	4628      	mov	r0, r5
    57c0:	f000 f8aa 	bl	5918 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    57c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    57c8:	f000 b8c2 	b.w	5950 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    57cc:	20000084 	.word	0x20000084

000057d0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    57d0:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    57d4:	4e2f      	ldr	r6, [pc, #188]	; (5894 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    57d6:	4683      	mov	fp, r0
    57d8:	6830      	ldr	r0, [r6, #0]
    57da:	9001      	str	r0, [sp, #4]
    57dc:	2701      	movs	r7, #1
    57de:	482e      	ldr	r0, [pc, #184]	; (5898 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    57e0:	f006 fff7 	bl	c7d2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    57e4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 5898 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    57e8:	b920      	cbnz	r0, 57f4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    57ea:	2700      	movs	r7, #0
    57ec:	f108 0001 	add.w	r0, r8, #1
    57f0:	f007 f806 	bl	c800 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    57f4:	4c29      	ldr	r4, [pc, #164]	; (589c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    57f6:	2500      	movs	r5, #0
    57f8:	f04f 0903 	mov.w	r9, #3
    57fc:	2001      	movs	r0, #1
    57fe:	6060      	str	r0, [r4, #4]
    5800:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    5804:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    5808:	f8c6 b000 	str.w	fp, [r6]
    580c:	6020      	str	r0, [r4, #0]
    580e:	f8df a090 	ldr.w	sl, [pc, #144]	; 58a0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    5812:	e017      	b.n	5844 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    5814:	f8da 0000 	ldr.w	r0, [sl]
    5818:	06c0      	lsls	r0, r0, #27
    581a:	d513      	bpl.n	5844 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    581c:	200e      	movs	r0, #14
    581e:	f008 f9f9 	bl	dc14 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    5822:	f3ef 8010 	mrs	r0, PRIMASK
    5826:	9000      	str	r0, [sp, #0]
    5828:	b672      	cpsid	i
    582a:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    582e:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    5832:	b920      	cbnz	r0, 583e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    5834:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    5838:	b908      	cbnz	r0, 583e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    583a:	f7ff f89b 	bl	4974 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    583e:	9800      	ldr	r0, [sp, #0]
    5840:	b900      	cbnz	r0, 5844 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    5842:	b662      	cpsie	i
    5844:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    5848:	b918      	cbnz	r0, 5852 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    584a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    584e:	2800      	cmp	r0, #0
    5850:	d0e0      	beq.n	5814 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    5852:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    5856:	2800      	cmp	r0, #0
    5858:	d1d0      	bne.n	57fc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    585a:	b137      	cbz	r7, 586a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    585c:	9801      	ldr	r0, [sp, #4]
    585e:	6030      	str	r0, [r6, #0]
    5860:	f108 0001 	add.w	r0, r8, #1
    5864:	f006 ffb5 	bl	c7d2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5868:	e011      	b.n	588e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    586a:	f108 0001 	add.w	r0, r8, #1
    586e:	f006 ffb0 	bl	c7d2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5872:	2800      	cmp	r0, #0
    5874:	d1ba      	bne.n	57ec <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    5876:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    587a:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    587e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    5882:	200e      	movs	r0, #14
    5884:	f008 f9c6 	bl	dc14 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    5888:	4803      	ldr	r0, [pc, #12]	; (5898 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    588a:	f006 ffb9 	bl	c800 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    588e:	2000      	movs	r0, #0
    5890:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    5894:	4000e504 	.word	0x4000e504
    5898:	20000287 	.word	0x20000287
    589c:	4000e000 	.word	0x4000e000
    58a0:	e000ed10 	.word	0xe000ed10

000058a4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    58a4:	b510      	push	{r4, lr}
    58a6:	4808      	ldr	r0, [pc, #32]	; (58c8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    58a8:	f006 ffa6 	bl	c7f8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    58ac:	b108      	cbz	r0, 58b2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    58ae:	2124      	movs	r1, #36	; 0x24
    58b0:	e006      	b.n	58c0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    58b2:	4805      	ldr	r0, [pc, #20]	; (58c8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    58b4:	1c40      	adds	r0, r0, #1
    58b6:	f006 ff9f 	bl	c7f8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    58ba:	2800      	cmp	r0, #0
    58bc:	d003      	beq.n	58c6 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    58be:	2128      	movs	r1, #40	; 0x28
    58c0:	201d      	movs	r0, #29
    58c2:	f7ff f9d9 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    58c6:	bd10      	pop	{r4, pc}
    58c8:	20000287 	.word	0x20000287

000058cc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    58cc:	b570      	push	{r4, r5, r6, lr}
    58ce:	4911      	ldr	r1, [pc, #68]	; (5914 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    58d0:	680a      	ldr	r2, [r1, #0]
    58d2:	b1ea      	cbz	r2, 5910 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    58d4:	2300      	movs	r3, #0
    58d6:	461d      	mov	r5, r3
    58d8:	2401      	movs	r4, #1
    58da:	684a      	ldr	r2, [r1, #4]
    58dc:	1c52      	adds	r2, r2, #1
    58de:	604a      	str	r2, [r1, #4]
    58e0:	2a09      	cmp	r2, #9
    58e2:	d300      	bcc.n	58e6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    58e4:	604d      	str	r5, [r1, #4]
    58e6:	790e      	ldrb	r6, [r1, #4]
    58e8:	fa04 f206 	lsl.w	r2, r4, r6
    58ec:	680e      	ldr	r6, [r1, #0]
    58ee:	4216      	tst	r6, r2
    58f0:	d00b      	beq.n	590a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    58f2:	f3ef 8310 	mrs	r3, PRIMASK
    58f6:	b672      	cpsid	i
    58f8:	680c      	ldr	r4, [r1, #0]
    58fa:	4394      	bics	r4, r2
    58fc:	600c      	str	r4, [r1, #0]
    58fe:	b903      	cbnz	r3, 5902 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    5900:	b662      	cpsie	i
    5902:	6849      	ldr	r1, [r1, #4]
    5904:	6001      	str	r1, [r0, #0]
    5906:	2000      	movs	r0, #0
    5908:	bd70      	pop	{r4, r5, r6, pc}
    590a:	1c5b      	adds	r3, r3, #1
    590c:	2b09      	cmp	r3, #9
    590e:	d3e4      	bcc.n	58da <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    5910:	2005      	movs	r0, #5
    5912:	bd70      	pop	{r4, r5, r6, pc}
    5914:	20000088 	.word	0x20000088

00005918 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    5918:	4802      	ldr	r0, [pc, #8]	; (5924 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    591a:	2100      	movs	r1, #0
    591c:	6001      	str	r1, [r0, #0]
    591e:	6041      	str	r1, [r0, #4]
    5920:	4770      	bx	lr
    5922:	0000      	.short	0x0000
    5924:	20000088 	.word	0x20000088

00005928 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    5928:	b510      	push	{r4, lr}
    592a:	4c08      	ldr	r4, [pc, #32]	; (594c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    592c:	7861      	ldrb	r1, [r4, #1]
    592e:	b109      	cbz	r1, 5934 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    5930:	200f      	movs	r0, #15
    5932:	bd10      	pop	{r4, pc}
    5934:	f7fe ffaa 	bl	488c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5938:	7020      	strb	r0, [r4, #0]
    593a:	28ff      	cmp	r0, #255	; 0xff
    593c:	d001      	beq.n	5942 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    593e:	2000      	movs	r0, #0
    5940:	bd10      	pop	{r4, pc}
    5942:	2176      	movs	r1, #118	; 0x76
    5944:	201f      	movs	r0, #31
    5946:	f7ff f997 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    594a:	0000      	.short	0x0000
    594c:	20000090 	.word	0x20000090

00005950 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    5950:	4901      	ldr	r1, [pc, #4]	; (5958 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    5952:	2000      	movs	r0, #0
    5954:	7048      	strb	r0, [r1, #1]
    5956:	4770      	bx	lr
    5958:	20000090 	.word	0x20000090

0000595c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    595c:	4806      	ldr	r0, [pc, #24]	; (5978 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    595e:	4a07      	ldr	r2, [pc, #28]	; (597c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    5960:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    5962:	8852      	ldrh	r2, [r2, #2]
    5964:	4291      	cmp	r1, r2
    5966:	d104      	bne.n	5972 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5968:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    596c:	b108      	cbz	r0, 5972 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    596e:	2000      	movs	r0, #0
    5970:	4770      	bx	lr
    5972:	2001      	movs	r0, #1
    5974:	4770      	bx	lr
    5976:	0000      	.short	0x0000
    5978:	20001150 	.word	0x20001150
    597c:	20000274 	.word	0x20000274

00005980 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    5980:	4901      	ldr	r1, [pc, #4]	; (5988 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    5982:	8048      	strh	r0, [r1, #2]
    5984:	4770      	bx	lr
    5986:	0000      	.short	0x0000
    5988:	20000274 	.word	0x20000274

0000598c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    598c:	4808      	ldr	r0, [pc, #32]	; (59b0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    598e:	4a09      	ldr	r2, [pc, #36]	; (59b4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    5990:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    5992:	8852      	ldrh	r2, [r2, #2]
    5994:	4291      	cmp	r1, r2
    5996:	d109      	bne.n	59ac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5998:	f64f 71ff 	movw	r1, #65535	; 0xffff
    599c:	8481      	strh	r1, [r0, #36]	; 0x24
    599e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    59a2:	b119      	cbz	r1, 59ac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    59a4:	2100      	movs	r1, #0
    59a6:	7001      	strb	r1, [r0, #0]
    59a8:	2001      	movs	r0, #1
    59aa:	4770      	bx	lr
    59ac:	2000      	movs	r0, #0
    59ae:	4770      	bx	lr
    59b0:	20001150 	.word	0x20001150
    59b4:	20000274 	.word	0x20000274

000059b8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    59b8:	4807      	ldr	r0, [pc, #28]	; (59d8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    59ba:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    59be:	2901      	cmp	r1, #1
    59c0:	d007      	beq.n	59d2 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    59c2:	2101      	movs	r1, #1
    59c4:	7001      	strb	r1, [r0, #0]
    59c6:	4805      	ldr	r0, [pc, #20]	; (59dc <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    59c8:	4903      	ldr	r1, [pc, #12]	; (59d8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    59ca:	8800      	ldrh	r0, [r0, #0]
    59cc:	8488      	strh	r0, [r1, #36]	; 0x24
    59ce:	2001      	movs	r0, #1
    59d0:	4770      	bx	lr
    59d2:	2000      	movs	r0, #0
    59d4:	4770      	bx	lr
    59d6:	0000      	.short	0x0000
    59d8:	20001150 	.word	0x20001150
    59dc:	20000274 	.word	0x20000274

000059e0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    59e0:	4906      	ldr	r1, [pc, #24]	; (59fc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    59e2:	4b07      	ldr	r3, [pc, #28]	; (5a00 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    59e4:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    59e6:	885b      	ldrh	r3, [r3, #2]
    59e8:	429a      	cmp	r2, r3
    59ea:	d105      	bne.n	59f8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    59ec:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    59f0:	b112      	cbz	r2, 59f8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    59f2:	6001      	str	r1, [r0, #0]
    59f4:	2001      	movs	r0, #1
    59f6:	4770      	bx	lr
    59f8:	2000      	movs	r0, #0
    59fa:	4770      	bx	lr
    59fc:	20001150 	.word	0x20001150
    5a00:	20000274 	.word	0x20000274

00005a04 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    5a04:	4909      	ldr	r1, [pc, #36]	; (5a2c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5a06:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5a08:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    5a0c:	3bff      	subs	r3, #255	; 0xff
    5a0e:	d002      	beq.n	5a16 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    5a10:	2100      	movs	r1, #0
    5a12:	6001      	str	r1, [r0, #0]
    5a14:	e007      	b.n	5a26 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5a16:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5a1a:	4904      	ldr	r1, [pc, #16]	; (5a2c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5a1c:	2a01      	cmp	r2, #1
    5a1e:	d002      	beq.n	5a26 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5a20:	6001      	str	r1, [r0, #0]
    5a22:	2001      	movs	r0, #1
    5a24:	4770      	bx	lr
    5a26:	2000      	movs	r0, #0
    5a28:	4770      	bx	lr
    5a2a:	0000      	.short	0x0000
    5a2c:	20001150 	.word	0x20001150

00005a30 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    5a30:	4901      	ldr	r1, [pc, #4]	; (5a38 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    5a32:	8008      	strh	r0, [r1, #0]
    5a34:	4770      	bx	lr
    5a36:	0000      	.short	0x0000
    5a38:	20000274 	.word	0x20000274

00005a3c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    5a3c:	4905      	ldr	r1, [pc, #20]	; (5a54 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    5a3e:	2000      	movs	r0, #0
    5a40:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5a44:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5a48:	8488      	strh	r0, [r1, #36]	; 0x24
    5a4a:	4903      	ldr	r1, [pc, #12]	; (5a58 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    5a4c:	8008      	strh	r0, [r1, #0]
    5a4e:	8048      	strh	r0, [r1, #2]
    5a50:	4770      	bx	lr
    5a52:	0000      	.short	0x0000
    5a54:	20001150 	.word	0x20001150
    5a58:	20000274 	.word	0x20000274
    5a5c:	4905      	ldr	r1, [pc, #20]	; (5a74 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    5a5e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5a60:	4282      	cmp	r2, r0
    5a62:	d105      	bne.n	5a70 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    5a64:	2000      	movs	r0, #0
    5a66:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5a6a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5a6e:	8488      	strh	r0, [r1, #36]	; 0x24
    5a70:	4770      	bx	lr
    5a72:	0000      	.short	0x0000
    5a74:	20001150 	.word	0x20001150

00005a78 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    5a78:	4a0a      	ldr	r2, [pc, #40]	; (5aa4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    5a7a:	b110      	cbz	r0, 5a82 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    5a7c:	2801      	cmp	r0, #1
    5a7e:	d007      	beq.n	5a90 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    5a80:	e00e      	b.n	5aa0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5a82:	7850      	ldrb	r0, [r2, #1]
    5a84:	b160      	cbz	r0, 5aa0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5a86:	f8d2 0002 	ldr.w	r0, [r2, #2]
    5a8a:	6008      	str	r0, [r1, #0]
    5a8c:	88d0      	ldrh	r0, [r2, #6]
    5a8e:	e004      	b.n	5a9a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    5a90:	7810      	ldrb	r0, [r2, #0]
    5a92:	b128      	cbz	r0, 5aa0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5a94:	6890      	ldr	r0, [r2, #8]
    5a96:	6008      	str	r0, [r1, #0]
    5a98:	8990      	ldrh	r0, [r2, #12]
    5a9a:	8088      	strh	r0, [r1, #4]
    5a9c:	2001      	movs	r0, #1
    5a9e:	4770      	bx	lr
    5aa0:	2000      	movs	r0, #0
    5aa2:	4770      	bx	lr
    5aa4:	20000289 	.word	0x20000289

00005aa8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    5aa8:	4a08      	ldr	r2, [pc, #32]	; (5acc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    5aaa:	2301      	movs	r3, #1
    5aac:	b138      	cbz	r0, 5abe <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    5aae:	2801      	cmp	r0, #1
    5ab0:	d104      	bne.n	5abc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    5ab2:	7013      	strb	r3, [r2, #0]
    5ab4:	6808      	ldr	r0, [r1, #0]
    5ab6:	6090      	str	r0, [r2, #8]
    5ab8:	8888      	ldrh	r0, [r1, #4]
    5aba:	8190      	strh	r0, [r2, #12]
    5abc:	4770      	bx	lr
    5abe:	7053      	strb	r3, [r2, #1]
    5ac0:	6808      	ldr	r0, [r1, #0]
    5ac2:	f8c2 0002 	str.w	r0, [r2, #2]
    5ac6:	8888      	ldrh	r0, [r1, #4]
    5ac8:	80d0      	strh	r0, [r2, #6]
    5aca:	4770      	bx	lr
    5acc:	20000289 	.word	0x20000289

00005ad0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    5ad0:	4906      	ldr	r1, [pc, #24]	; (5aec <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    5ad2:	b110      	cbz	r0, 5ada <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    5ad4:	2801      	cmp	r0, #1
    5ad6:	d002      	beq.n	5ade <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    5ad8:	e005      	b.n	5ae6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5ada:	7848      	ldrb	r0, [r1, #1]
    5adc:	e000      	b.n	5ae0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    5ade:	7808      	ldrb	r0, [r1, #0]
    5ae0:	b108      	cbz	r0, 5ae6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5ae2:	2001      	movs	r0, #1
    5ae4:	4770      	bx	lr
    5ae6:	2000      	movs	r0, #0
    5ae8:	4770      	bx	lr
    5aea:	0000      	.short	0x0000
    5aec:	20000289 	.word	0x20000289

00005af0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    5af0:	4901      	ldr	r1, [pc, #4]	; (5af8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    5af2:	7448      	strb	r0, [r1, #17]
    5af4:	4770      	bx	lr
    5af6:	0000      	.short	0x0000
    5af8:	20000aaa 	.word	0x20000aaa

00005afc <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    5afc:	4801      	ldr	r0, [pc, #4]	; (5b04 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    5afe:	78c0      	ldrb	r0, [r0, #3]
    5b00:	4770      	bx	lr
    5b02:	0000      	.short	0x0000
    5b04:	200000ac 	.word	0x200000ac

00005b08 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    5b08:	4801      	ldr	r0, [pc, #4]	; (5b10 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    5b0a:	7900      	ldrb	r0, [r0, #4]
    5b0c:	4770      	bx	lr
    5b0e:	0000      	.short	0x0000
    5b10:	200000ac 	.word	0x200000ac

00005b14 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    5b14:	b578      	push	{r3, r4, r5, r6, lr}
    5b16:	4913      	ldr	r1, [pc, #76]	; (5b64 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    5b18:	7c4a      	ldrb	r2, [r1, #17]
    5b1a:	b30a      	cbz	r2, 5b60 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    5b1c:	7c0a      	ldrb	r2, [r1, #16]
    5b1e:	f88d 2000 	strb.w	r2, [sp]
    5b22:	9a00      	ldr	r2, [sp, #0]
    5b24:	9200      	str	r2, [sp, #0]
    5b26:	f89d 2000 	ldrb.w	r2, [sp]
    5b2a:	b1ca      	cbz	r2, 5b60 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    5b2c:	2300      	movs	r3, #0
    5b2e:	f101 0210 	add.w	r2, r1, #16
    5b32:	241a      	movs	r4, #26
    5b34:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    5b38:	7c0e      	ldrb	r6, [r1, #16]
    5b3a:	f88d 6000 	strb.w	r6, [sp]
    5b3e:	9e00      	ldr	r6, [sp, #0]
    5b40:	9600      	str	r6, [sp, #0]
    5b42:	f89d 6000 	ldrb.w	r6, [sp]
    5b46:	b14e      	cbz	r6, 5b5c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    5b48:	7013      	strb	r3, [r2, #0]
    5b4a:	7043      	strb	r3, [r0, #1]
    5b4c:	7004      	strb	r4, [r0, #0]
    5b4e:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    5b52:	6046      	str	r6, [r0, #4]
    5b54:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    5b58:	6086      	str	r6, [r0, #8]
    5b5a:	e7ed      	b.n	5b38 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    5b5c:	2001      	movs	r0, #1
    5b5e:	bd78      	pop	{r3, r4, r5, r6, pc}
    5b60:	2000      	movs	r0, #0
    5b62:	bd78      	pop	{r3, r4, r5, r6, pc}
    5b64:	20000aaa 	.word	0x20000aaa

00005b68 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5b68:	b510      	push	{r4, lr}
    5b6a:	4604      	mov	r4, r0
    5b6c:	f000 f95c 	bl	5e28 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    5b70:	b118      	cbz	r0, 5b7a <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    5b72:	21bd      	movs	r1, #189	; 0xbd
    5b74:	2027      	movs	r0, #39	; 0x27
    5b76:	f7ff f87f 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b7a:	4803      	ldr	r0, [pc, #12]	; (5b88 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    5b7c:	2101      	movs	r1, #1
    5b7e:	f008 fc20 	bl	e3c2 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5b82:	4802      	ldr	r0, [pc, #8]	; (5b8c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    5b84:	62c4      	str	r4, [r0, #44]	; 0x2c
    5b86:	bd10      	pop	{r4, pc}
    5b88:	20000a88 	.word	0x20000a88
    5b8c:	200000ac 	.word	0x200000ac

00005b90 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5b90:	4901      	ldr	r1, [pc, #4]	; (5b98 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    5b92:	2001      	movs	r0, #1
    5b94:	7188      	strb	r0, [r1, #6]
    5b96:	4770      	bx	lr
    5b98:	200000ac 	.word	0x200000ac

00005b9c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ba0:	4d62      	ldr	r5, [pc, #392]	; (5d2c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>)
    5ba2:	9c08      	ldr	r4, [sp, #32]
    5ba4:	782e      	ldrb	r6, [r5, #0]
    5ba6:	2e00      	cmp	r6, #0
    5ba8:	d16b      	bne.n	5c82 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    5baa:	2a00      	cmp	r2, #0
    5bac:	d069      	beq.n	5c82 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    5bae:	2b00      	cmp	r3, #0
    5bb0:	d067      	beq.n	5c82 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    5bb2:	2c00      	cmp	r4, #0
    5bb4:	d065      	beq.n	5c82 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    5bb6:	f105 0614 	add.w	r6, r5, #20
    5bba:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    5bbe:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    5bc2:	2700      	movs	r7, #0
    5bc4:	71af      	strb	r7, [r5, #6]
    5bc6:	716f      	strb	r7, [r5, #5]
    5bc8:	70ef      	strb	r7, [r5, #3]
    5bca:	70af      	strb	r7, [r5, #2]
    5bcc:	712f      	strb	r7, [r5, #4]
    5bce:	81af      	strh	r7, [r5, #12]
    5bd0:	81ef      	strh	r7, [r5, #14]
    5bd2:	f000 f961 	bl	5e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5bd6:	4606      	mov	r6, r0
    5bd8:	f000 f958 	bl	5e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5bdc:	4604      	mov	r4, r0
    5bde:	f006 f84b 	bl	bc78 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    5be2:	f005 fcf3 	bl	b5cc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5be6:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    5bea:	f006 f8cf 	bl	bd8c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    5bee:	f104 0018 	add.w	r0, r4, #24
    5bf2:	f006 f9a5 	bl	bf40 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    5bf6:	6920      	ldr	r0, [r4, #16]
    5bf8:	f006 f998 	bl	bf2c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    5bfc:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    5c00:	f006 f9b8 	bl	bf74 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    5c04:	f105 0038 	add.w	r0, r5, #56	; 0x38
    5c08:	6840      	ldr	r0, [r0, #4]
    5c0a:	f890 0174 	ldrb.w	r0, [r0, #372]	; 0x174
    5c0e:	b108      	cbz	r0, 5c14 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    5c10:	f005 ff8c 	bl	bb2c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    5c14:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    5c18:	2001      	movs	r0, #1
    5c1a:	f005 feb7 	bl	b98c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    5c1e:	2800      	cmp	r0, #0
    5c20:	d07c      	beq.n	5d1c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>
    5c22:	4843      	ldr	r0, [pc, #268]	; (5d30 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x194>)
    5c24:	f005 ff2e 	bl	ba84 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    5c28:	8820      	ldrh	r0, [r4, #0]
    5c2a:	f7ff fc63 	bl	54f4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5c2e:	6328      	str	r0, [r5, #48]	; 0x30
    5c30:	8820      	ldrh	r0, [r4, #0]
    5c32:	f7ff fc49 	bl	54c8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5c36:	f106 0160 	add.w	r1, r6, #96	; 0x60
    5c3a:	6368      	str	r0, [r5, #52]	; 0x34
    5c3c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 5d34 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x198>
    5c40:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    5c44:	f109 0808 	add.w	r8, r9, #8
    5c48:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    5c4c:	6f31      	ldr	r1, [r6, #112]	; 0x70
    5c4e:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    5c52:	6f71      	ldr	r1, [r6, #116]	; 0x74
    5c54:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    5c58:	f000 f990 	bl	5f7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    5c5c:	4601      	mov	r1, r0
    5c5e:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    5c60:	46ba      	mov	sl, r7
    5c62:	f008 f946 	bl	def2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5c66:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    5c68:	4281      	cmp	r1, r0
    5c6a:	d200      	bcs.n	5c6e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd2>
    5c6c:	4608      	mov	r0, r1
    5c6e:	7228      	strb	r0, [r5, #8]
    5c70:	46a8      	mov	r8, r5
    5c72:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    5c76:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    5c78:	7cf7      	ldrb	r7, [r6, #19]
    5c7a:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    5c7c:	2908      	cmp	r1, #8
    5c7e:	d104      	bne.n	5c8a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
    5c80:	e002      	b.n	5c88 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    5c82:	f44f 718a 	mov.w	r1, #276	; 0x114
    5c86:	e04d      	b.n	5d24 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>
    5c88:	2104      	movs	r1, #4
    5c8a:	f008 f932 	bl	def2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5c8e:	b90f      	cbnz	r7, 5c94 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
    5c90:	1d00      	adds	r0, r0, #4
    5c92:	b280      	uxth	r0, r0
    5c94:	4285      	cmp	r5, r0
    5c96:	d200      	bcs.n	5c9a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    5c98:	4628      	mov	r0, r5
    5c9a:	b2c5      	uxtb	r5, r0
    5c9c:	f888 5009 	strb.w	r5, [r8, #9]
    5ca0:	7cf1      	ldrb	r1, [r6, #19]
    5ca2:	b109      	cbz	r1, 5ca8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x10c>
    5ca4:	2204      	movs	r2, #4
    5ca6:	e000      	b.n	5caa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x10e>
    5ca8:	2200      	movs	r2, #0
    5caa:	442a      	add	r2, r5
    5cac:	b2d2      	uxtb	r2, r2
    5cae:	f888 2007 	strb.w	r2, [r8, #7]
    5cb2:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
    5cb6:	1d00      	adds	r0, r0, #4
    5cb8:	4290      	cmp	r0, r2
    5cba:	d202      	bcs.n	5cc2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x126>
    5cbc:	f240 119f 	movw	r1, #415	; 0x19f
    5cc0:	e030      	b.n	5d24 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>
    5cc2:	4657      	mov	r7, sl
    5cc4:	b1a1      	cbz	r1, 5cf0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x154>
    5cc6:	481b      	ldr	r0, [pc, #108]	; (5d34 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x198>)
    5cc8:	2101      	movs	r1, #1
    5cca:	3008      	adds	r0, #8
    5ccc:	7601      	strb	r1, [r0, #24]
    5cce:	e9d6 1216 	ldrd	r1, r2, [r6, #88]	; 0x58
    5cd2:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5cd6:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5cda:	f008 f810 	bl	dcfe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5cde:	4915      	ldr	r1, [pc, #84]	; (5d34 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x198>)
    5ce0:	4603      	mov	r3, r0
    5ce2:	462a      	mov	r2, r5
    5ce4:	3108      	adds	r1, #8
    5ce6:	2001      	movs	r0, #1
    5ce8:	f005 fcba 	bl	b660 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5cec:	f005 fcee 	bl	b6cc <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5cf0:	2001      	movs	r0, #1
    5cf2:	f000 fb73 	bl	63dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
    5cf6:	4810      	ldr	r0, [pc, #64]	; (5d38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x19c>)
    5cf8:	6800      	ldr	r0, [r0, #0]
    5cfa:	2803      	cmp	r0, #3
    5cfc:	d010      	beq.n	5d20 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>
    5cfe:	280b      	cmp	r0, #11
    5d00:	d00e      	beq.n	5d20 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>
    5d02:	4648      	mov	r0, r9
    5d04:	f840 7f52 	str.w	r7, [r0, #82]!
    5d08:	6047      	str	r7, [r0, #4]
    5d0a:	480a      	ldr	r0, [pc, #40]	; (5d34 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x198>)
    5d0c:	88b1      	ldrh	r1, [r6, #4]
    5d0e:	3052      	adds	r0, #82	; 0x52
    5d10:	8041      	strh	r1, [r0, #2]
    5d12:	8821      	ldrh	r1, [r4, #0]
    5d14:	8001      	strh	r1, [r0, #0]
    5d16:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    5d1a:	7101      	strb	r1, [r0, #4]
    5d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d20:	f240 11c7 	movw	r1, #455	; 0x1c7
    5d24:	2027      	movs	r0, #39	; 0x27
    5d26:	f7fe ffa7 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d2a:	0000      	.short	0x0000
    5d2c:	200000ac 	.word	0x200000ac
    5d30:	000065e0 	.word	0x000065e0
    5d34:	20000a58 	.word	0x20000a58
    5d38:	40001550 	.word	0x40001550

00005d3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    5d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d40:	4605      	mov	r5, r0
    5d42:	f000 f8a9 	bl	5e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5d46:	4e33      	ldr	r6, [pc, #204]	; (5e14 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    5d48:	4604      	mov	r4, r0
    5d4a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    5d4c:	7847      	ldrb	r7, [r0, #1]
    5d4e:	b10d      	cbz	r5, 5d54 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    5d50:	2d01      	cmp	r5, #1
    5d52:	d103      	bne.n	5d5c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    5d54:	6b71      	ldr	r1, [r6, #52]	; 0x34
    5d56:	f006 ff5b 	bl	cc10 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    5d5a:	7070      	strb	r0, [r6, #1]
    5d5c:	7870      	ldrb	r0, [r6, #1]
    5d5e:	f04f 0800 	mov.w	r8, #0
    5d62:	f04f 0901 	mov.w	r9, #1
    5d66:	b150      	cbz	r0, 5d7e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    5d68:	2801      	cmp	r0, #1
    5d6a:	d01a      	beq.n	5da2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    5d6c:	2802      	cmp	r0, #2
    5d6e:	d034      	beq.n	5dda <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    5d70:	2803      	cmp	r0, #3
    5d72:	d048      	beq.n	5e06 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    5d74:	f240 4114 	movw	r1, #1044	; 0x414
    5d78:	2027      	movs	r0, #39	; 0x27
    5d7a:	f7fe ff7d 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d7e:	2d01      	cmp	r5, #1
    5d80:	d032      	beq.n	5de8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5d82:	f000 f8e7 	bl	5f54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    5d86:	4639      	mov	r1, r7
    5d88:	2201      	movs	r2, #1
    5d8a:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5d8c:	f007 fb63 	bl	d456 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5d90:	e028      	b.n	5de4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5d92:	bf00      	nop
    5d94:	f884 8008 	strb.w	r8, [r4, #8]
    5d98:	e031      	b.n	5dfe <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5d9a:	bf00      	nop
    5d9c:	f884 9008 	strb.w	r9, [r4, #8]
    5da0:	e02d      	b.n	5dfe <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5da2:	2d01      	cmp	r5, #1
    5da4:	d008      	beq.n	5db8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    5da6:	f000 f8d5 	bl	5f54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    5daa:	4639      	mov	r1, r7
    5dac:	2200      	movs	r2, #0
    5dae:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5db0:	f007 fb51 	bl	d456 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5db4:	2d02      	cmp	r5, #2
    5db6:	d00b      	beq.n	5dd0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5db8:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    5dbc:	1c40      	adds	r0, r0, #1
    5dbe:	f141 0100 	adc.w	r1, r1, #0
    5dc2:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    5dc6:	7a20      	ldrb	r0, [r4, #8]
    5dc8:	2801      	cmp	r0, #1
    5dca:	d003      	beq.n	5dd4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    5dcc:	f884 9008 	strb.w	r9, [r4, #8]
    5dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5dd4:	f884 8008 	strb.w	r8, [r4, #8]
    5dd8:	e7fa      	b.n	5dd0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5dda:	2d01      	cmp	r5, #1
    5ddc:	d004      	beq.n	5de8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5dde:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5de0:	f007 fd4a 	bl	d878 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5de4:	2d02      	cmp	r5, #2
    5de6:	d0f3      	beq.n	5dd0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5de8:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    5dec:	1c40      	adds	r0, r0, #1
    5dee:	f141 0100 	adc.w	r1, r1, #0
    5df2:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    5df6:	7a20      	ldrb	r0, [r4, #8]
    5df8:	2801      	cmp	r0, #1
    5dfa:	d1cf      	bne.n	5d9c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    5dfc:	e7ca      	b.n	5d94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    5dfe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5e02:	f004 bf03 	b.w	ac0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5e06:	2d01      	cmp	r5, #1
    5e08:	d0e2      	beq.n	5dd0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5e0a:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5e0c:	f007 fd34 	bl	d878 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5e10:	e7f5      	b.n	5dfe <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5e12:	0000      	.short	0x0000
    5e14:	200000ac 	.word	0x200000ac

00005e18 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    5e18:	4802      	ldr	r0, [pc, #8]	; (5e24 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    5e1a:	89c0      	ldrh	r0, [r0, #14]
    5e1c:	f3c0 2080 	ubfx	r0, r0, #10, #1
    5e20:	4770      	bx	lr
    5e22:	0000      	.short	0x0000
    5e24:	200000ac 	.word	0x200000ac

00005e28 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    5e28:	4804      	ldr	r0, [pc, #16]	; (5e3c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    5e2a:	7800      	ldrb	r0, [r0, #0]
    5e2c:	b108      	cbz	r0, 5e32 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    5e2e:	200c      	movs	r0, #12
    5e30:	4770      	bx	lr
    5e32:	4903      	ldr	r1, [pc, #12]	; (5e40 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    5e34:	2000      	movs	r0, #0
    5e36:	7448      	strb	r0, [r1, #17]
    5e38:	4770      	bx	lr
    5e3a:	0000      	.short	0x0000
    5e3c:	200000ac 	.word	0x200000ac
    5e40:	20000aaa 	.word	0x20000aaa

00005e44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    5e44:	480c      	ldr	r0, [pc, #48]	; (5e78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    5e46:	b510      	push	{r4, lr}
    5e48:	7801      	ldrb	r1, [r0, #0]
    5e4a:	b149      	cbz	r1, 5e60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    5e4c:	f100 0138 	add.w	r1, r0, #56	; 0x38
    5e50:	7800      	ldrb	r0, [r0, #0]
    5e52:	2802      	cmp	r0, #2
    5e54:	d008      	beq.n	5e68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    5e56:	f240 11e3 	movw	r1, #483	; 0x1e3
    5e5a:	2027      	movs	r0, #39	; 0x27
    5e5c:	f7fe ff0c 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5e64:	f000 b9d8 	b.w	6218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    5e68:	6848      	ldr	r0, [r1, #4]
    5e6a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    5e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5e72:	f005 be0f 	b.w	ba94 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    5e76:	0000      	.short	0x0000
    5e78:	200000ac 	.word	0x200000ac
    5e7c:	4a02      	ldr	r2, [pc, #8]	; (5e88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    5e7e:	8993      	ldrh	r3, [r2, #12]
    5e80:	4303      	orrs	r3, r0
    5e82:	8193      	strh	r3, [r2, #12]
    5e84:	6952      	ldr	r2, [r2, #20]
    5e86:	4710      	bx	r2
    5e88:	200000ac 	.word	0x200000ac
    5e8c:	4801      	ldr	r0, [pc, #4]	; (5e94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    5e8e:	6840      	ldr	r0, [r0, #4]
    5e90:	4770      	bx	lr
    5e92:	0000      	.short	0x0000
    5e94:	200000e4 	.word	0x200000e4
    5e98:	4801      	ldr	r0, [pc, #4]	; (5ea0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    5e9a:	6840      	ldr	r0, [r0, #4]
    5e9c:	3070      	adds	r0, #112	; 0x70
    5e9e:	4770      	bx	lr
    5ea0:	200000e4 	.word	0x200000e4
    5ea4:	4a01      	ldr	r2, [pc, #4]	; (5eac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    5ea6:	2100      	movs	r1, #0
    5ea8:	6952      	ldr	r2, [r2, #20]
    5eaa:	4710      	bx	r2
    5eac:	200000ac 	.word	0x200000ac
    5eb0:	b570      	push	{r4, r5, r6, lr}
    5eb2:	f7ff fff1 	bl	5e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5eb6:	4604      	mov	r4, r0
    5eb8:	f7ff ffe8 	bl	5e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5ebc:	4605      	mov	r5, r0
    5ebe:	4621      	mov	r1, r4
    5ec0:	f008 f89a 	bl	dff8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5ec4:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    5ec8:	2901      	cmp	r1, #1
    5eca:	d114      	bne.n	5ef6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    5ecc:	2800      	cmp	r0, #0
    5ece:	d012      	beq.n	5ef6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    5ed0:	4809      	ldr	r0, [pc, #36]	; (5ef8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    5ed2:	6842      	ldr	r2, [r0, #4]
    5ed4:	8828      	ldrh	r0, [r5, #0]
    5ed6:	f8a2 01f6 	strh.w	r0, [r2, #502]	; 0x1f6
    5eda:	7a60      	ldrb	r0, [r4, #9]
    5edc:	f882 01f8 	strb.w	r0, [r2, #504]	; 0x1f8
    5ee0:	7aa0      	ldrb	r0, [r4, #10]
    5ee2:	f882 01f9 	strb.w	r0, [r2, #505]	; 0x1f9
    5ee6:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
    5eea:	2001      	movs	r0, #1
    5eec:	7010      	strb	r0, [r2, #0]
    5eee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5ef2:	f004 be8b 	b.w	ac0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5ef6:	bd70      	pop	{r4, r5, r6, pc}
    5ef8:	200000e4 	.word	0x200000e4
    5efc:	b570      	push	{r4, r5, r6, lr}
    5efe:	4605      	mov	r5, r0
    5f00:	2901      	cmp	r1, #1
    5f02:	d818      	bhi.n	5f36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5f04:	4c12      	ldr	r4, [pc, #72]	; (5f50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
    5f06:	69a1      	ldr	r1, [r4, #24]
    5f08:	4788      	blx	r1
    5f0a:	b1a0      	cbz	r0, 5f36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5f0c:	7960      	ldrb	r0, [r4, #5]
    5f0e:	b990      	cbnz	r0, 5f36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5f10:	b9e5      	cbnz	r5, 5f4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    5f12:	f104 0010 	add.w	r0, r4, #16
    5f16:	7801      	ldrb	r1, [r0, #0]
    5f18:	06c8      	lsls	r0, r1, #27
    5f1a:	d405      	bmi.n	5f28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    5f1c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5f1e:	7800      	ldrb	r0, [r0, #0]
    5f20:	06c0      	lsls	r0, r0, #27
    5f22:	d401      	bmi.n	5f28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    5f24:	2001      	movs	r0, #1
    5f26:	e000      	b.n	5f2a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    5f28:	2000      	movs	r0, #0
    5f2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5f2c:	b92a      	cbnz	r2, 5f3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    5f2e:	8962      	ldrh	r2, [r4, #10]
    5f30:	b11a      	cbz	r2, 5f3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    5f32:	06c9      	lsls	r1, r1, #27
    5f34:	d401      	bmi.n	5f3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    5f36:	2001      	movs	r0, #1
    5f38:	bd70      	pop	{r4, r5, r6, pc}
    5f3a:	89a1      	ldrh	r1, [r4, #12]
    5f3c:	078a      	lsls	r2, r1, #30
    5f3e:	d503      	bpl.n	5f48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    5f40:	6a22      	ldr	r2, [r4, #32]
    5f42:	78d2      	ldrb	r2, [r2, #3]
    5f44:	2a02      	cmp	r2, #2
    5f46:	d001      	beq.n	5f4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    5f48:	4308      	orrs	r0, r1
    5f4a:	d1f4      	bne.n	5f36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5f4c:	2000      	movs	r0, #0
    5f4e:	bd70      	pop	{r4, r5, r6, pc}
    5f50:	200000ac 	.word	0x200000ac
    5f54:	b510      	push	{r4, lr}
    5f56:	4c08      	ldr	r4, [pc, #32]	; (5f78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
    5f58:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5f5a:	b138      	cbz	r0, 5f6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    5f5c:	8962      	ldrh	r2, [r4, #10]
    5f5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5f60:	1cd2      	adds	r2, r2, #3
    5f62:	f006 fcdf 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5f66:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5f68:	6260      	str	r0, [r4, #36]	; 0x24
    5f6a:	bd10      	pop	{r4, pc}
    5f6c:	f240 415a 	movw	r1, #1114	; 0x45a
    5f70:	2027      	movs	r0, #39	; 0x27
    5f72:	f7fe fe81 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f76:	0000      	.short	0x0000
    5f78:	200000ac 	.word	0x200000ac
    5f7c:	b510      	push	{r4, lr}
    5f7e:	f7ff ff85 	bl	5e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5f82:	4604      	mov	r4, r0
    5f84:	f7ff ff88 	bl	5e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5f88:	4601      	mov	r1, r0
    5f8a:	7b42      	ldrb	r2, [r0, #13]
    5f8c:	4815      	ldr	r0, [pc, #84]	; (5fe4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a0>)
    5f8e:	2a24      	cmp	r2, #36	; 0x24
    5f90:	d00e      	beq.n	5fb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5f92:	7b89      	ldrb	r1, [r1, #14]
    5f94:	2924      	cmp	r1, #36	; 0x24
    5f96:	d00b      	beq.n	5fb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5f98:	2a1f      	cmp	r2, #31
    5f9a:	d00d      	beq.n	5fb8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    5f9c:	2a20      	cmp	r2, #32
    5f9e:	d00b      	beq.n	5fb8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    5fa0:	2922      	cmp	r1, #34	; 0x22
    5fa2:	d00f      	beq.n	5fc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    5fa4:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5fa8:	2804      	cmp	r0, #4
    5faa:	d100      	bne.n	5fae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16a>
    5fac:	2008      	movs	r0, #8
    5fae:	bd10      	pop	{r4, pc}
    5fb0:	6840      	ldr	r0, [r0, #4]
    5fb2:	f890 1196 	ldrb.w	r1, [r0, #406]	; 0x196
    5fb6:	e00e      	b.n	5fd6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x192>
    5fb8:	2922      	cmp	r1, #34	; 0x22
    5fba:	d003      	beq.n	5fc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    5fbc:	6840      	ldr	r0, [r0, #4]
    5fbe:	f890 01b0 	ldrb.w	r0, [r0, #432]	; 0x1b0
    5fc2:	e005      	b.n	5fd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    5fc4:	6841      	ldr	r1, [r0, #4]
    5fc6:	f891 01b0 	ldrb.w	r0, [r1, #432]	; 0x1b0
    5fca:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    5fce:	4008      	ands	r0, r1
    5fd0:	f007 fe8b 	bl	dcea <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5fd4:	4601      	mov	r1, r0
    5fd6:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5fde:	f007 be9c 	b.w	dd1a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5fe2:	0000      	.short	0x0000
    5fe4:	200000e4 	.word	0x200000e4
    5fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5fec:	4688      	mov	r8, r1
    5fee:	4607      	mov	r7, r0
    5ff0:	f7ff ff52 	bl	5e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5ff4:	4c57      	ldr	r4, [pc, #348]	; (6154 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>)
    5ff6:	2600      	movs	r6, #0
    5ff8:	4605      	mov	r5, r0
    5ffa:	f88d 6000 	strb.w	r6, [sp]
    5ffe:	7820      	ldrb	r0, [r4, #0]
    6000:	2802      	cmp	r0, #2
    6002:	d004      	beq.n	600e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ca>
    6004:	f240 41b9 	movw	r1, #1209	; 0x4b9
    6008:	2027      	movs	r0, #39	; 0x27
    600a:	f7fe fe35 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    600e:	7ba0      	ldrb	r0, [r4, #14]
    6010:	0640      	lsls	r0, r0, #25
    6012:	d406      	bmi.n	6022 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1de>
    6014:	2040      	movs	r0, #64	; 0x40
    6016:	f7ff ff45 	bl	5ea4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    601a:	89e0      	ldrh	r0, [r4, #14]
    601c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    6020:	81e0      	strh	r0, [r4, #14]
    6022:	7ce8      	ldrb	r0, [r5, #19]
    6024:	b3c7      	cbz	r7, 6098 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x254>
    6026:	f005 fb81 	bl	b72c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    602a:	f005 fb65 	bl	b6f8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    602e:	b968      	cbnz	r0, 604c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    6030:	7ce8      	ldrb	r0, [r5, #19]
    6032:	b158      	cbz	r0, 604c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    6034:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6036:	7841      	ldrb	r1, [r0, #1]
    6038:	b141      	cbz	r1, 604c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    603a:	7800      	ldrb	r0, [r0, #0]
    603c:	7a29      	ldrb	r1, [r5, #8]
    603e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6042:	4288      	cmp	r0, r1
    6044:	d102      	bne.n	604c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    6046:	2001      	movs	r0, #1
    6048:	70a0      	strb	r0, [r4, #2]
    604a:	e063      	b.n	6114 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
    604c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    604e:	7841      	ldrb	r1, [r0, #1]
    6050:	8161      	strh	r1, [r4, #10]
    6052:	b121      	cbz	r1, 605e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21a>
    6054:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6056:	f007 fbdc 	bl	d812 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    605a:	62a0      	str	r0, [r4, #40]	; 0x28
    605c:	e000      	b.n	6060 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
    605e:	62a6      	str	r6, [r4, #40]	; 0x28
    6060:	89e0      	ldrh	r0, [r4, #14]
    6062:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    6066:	81e0      	strh	r0, [r4, #14]
    6068:	6a60      	ldr	r0, [r4, #36]	; 0x24
    606a:	79e9      	ldrb	r1, [r5, #7]
    606c:	7800      	ldrb	r0, [r0, #0]
    606e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    6072:	4288      	cmp	r0, r1
    6074:	d005      	beq.n	6082 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23e>
    6076:	f000 f963 	bl	6340 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fc>
    607a:	89e0      	ldrh	r0, [r4, #14]
    607c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    6080:	81e0      	strh	r0, [r4, #14]
    6082:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6084:	7a29      	ldrb	r1, [r5, #8]
    6086:	7800      	ldrb	r0, [r0, #0]
    6088:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    608c:	4288      	cmp	r0, r1
    608e:	d10e      	bne.n	60ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    6090:	4668      	mov	r0, sp
    6092:	f000 f917 	bl	62c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
    6096:	e00a      	b.n	60ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    6098:	e7ff      	b.n	609a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x256>
    609a:	b108      	cbz	r0, 60a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25c>
    609c:	f005 fb40 	bl	b720 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    60a0:	78e0      	ldrb	r0, [r4, #3]
    60a2:	1c40      	adds	r0, r0, #1
    60a4:	70e0      	strb	r0, [r4, #3]
    60a6:	89e0      	ldrh	r0, [r4, #14]
    60a8:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    60ac:	81e0      	strh	r0, [r4, #14]
    60ae:	7ca8      	ldrb	r0, [r5, #18]
    60b0:	b198      	cbz	r0, 60da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x296>
    60b2:	f7ff feeb 	bl	5e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    60b6:	4928      	ldr	r1, [pc, #160]	; (6158 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    60b8:	760e      	strb	r6, [r1, #24]
    60ba:	e9d5 2314 	ldrd	r2, r3, [r5, #80]	; 0x50
    60be:	e9c1 2304 	strd	r2, r3, [r1, #16]
    60c2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    60c6:	f007 fe1a 	bl	dcfe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    60ca:	4603      	mov	r3, r0
    60cc:	22fb      	movs	r2, #251	; 0xfb
    60ce:	4922      	ldr	r1, [pc, #136]	; (6158 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    60d0:	2000      	movs	r0, #0
    60d2:	f005 fac5 	bl	b660 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    60d6:	f005 faf9 	bl	b6cc <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    60da:	4d1f      	ldr	r5, [pc, #124]	; (6158 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    60dc:	354a      	adds	r5, #74	; 0x4a
    60de:	f1b8 0f00 	cmp.w	r8, #0
    60e2:	d104      	bne.n	60ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2aa>
    60e4:	78e1      	ldrb	r1, [r4, #3]
    60e6:	2001      	movs	r0, #1
    60e8:	f7ff ff08 	bl	5efc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    60ec:	b1b0      	cbz	r0, 611c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d8>
    60ee:	f005 fefb 	bl	bee8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    60f2:	f89d 0000 	ldrb.w	r0, [sp]
    60f6:	b110      	cbz	r0, 60fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    60f8:	2000      	movs	r0, #0
    60fa:	f7ff fe1f 	bl	5d3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    60fe:	b137      	cbz	r7, 610e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    6100:	70e6      	strb	r6, [r4, #3]
    6102:	7968      	ldrb	r0, [r5, #5]
    6104:	1c40      	adds	r0, r0, #1
    6106:	7168      	strb	r0, [r5, #5]
    6108:	f7ff fed2 	bl	5eb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    610c:	e002      	b.n	6114 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
    610e:	79a8      	ldrb	r0, [r5, #6]
    6110:	1c40      	adds	r0, r0, #1
    6112:	71a8      	strb	r0, [r5, #6]
    6114:	f000 f880 	bl	6218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    6118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    611c:	f89d 0000 	ldrb.w	r0, [sp]
    6120:	b110      	cbz	r0, 6128 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>
    6122:	2001      	movs	r0, #1
    6124:	f7ff fe0a 	bl	5d3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6128:	2000      	movs	r0, #0
    612a:	f000 f995 	bl	6458 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x614>
    612e:	f89d 0000 	ldrb.w	r0, [sp]
    6132:	b110      	cbz	r0, 613a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f6>
    6134:	2002      	movs	r0, #2
    6136:	f7ff fe01 	bl	5d3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    613a:	b137      	cbz	r7, 614a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x306>
    613c:	70e6      	strb	r6, [r4, #3]
    613e:	7968      	ldrb	r0, [r5, #5]
    6140:	1c40      	adds	r0, r0, #1
    6142:	7168      	strb	r0, [r5, #5]
    6144:	f7ff feb4 	bl	5eb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6148:	e7e6      	b.n	6118 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    614a:	79a8      	ldrb	r0, [r5, #6]
    614c:	1c40      	adds	r0, r0, #1
    614e:	71a8      	strb	r0, [r5, #6]
    6150:	e7e2      	b.n	6118 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    6152:	0000      	.short	0x0000
    6154:	200000ac 	.word	0x200000ac
    6158:	20000a60 	.word	0x20000a60
    615c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6160:	460f      	mov	r7, r1
    6162:	4680      	mov	r8, r0
    6164:	f7ff fe98 	bl	5e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6168:	4d29      	ldr	r5, [pc, #164]	; (6210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>)
    616a:	4604      	mov	r4, r0
    616c:	7828      	ldrb	r0, [r5, #0]
    616e:	2801      	cmp	r0, #1
    6170:	d004      	beq.n	617c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    6172:	f240 4169 	movw	r1, #1129	; 0x469
    6176:	2027      	movs	r0, #39	; 0x27
    6178:	f7fe fd7e 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    617c:	7861      	ldrb	r1, [r4, #1]
    617e:	2000      	movs	r0, #0
    6180:	2601      	movs	r6, #1
    6182:	b129      	cbz	r1, 6190 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    6184:	7060      	strb	r0, [r4, #1]
    6186:	2100      	movs	r1, #0
    6188:	2004      	movs	r0, #4
    618a:	f7ff fe77 	bl	5e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    618e:	70e6      	strb	r6, [r4, #3]
    6190:	6a29      	ldr	r1, [r5, #32]
    6192:	7808      	ldrb	r0, [r1, #0]
    6194:	43c0      	mvns	r0, r0
    6196:	0780      	lsls	r0, r0, #30
    6198:	d109      	bne.n	61ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36a>
    619a:	79a0      	ldrb	r0, [r4, #6]
    619c:	bb88      	cbnz	r0, 6202 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    619e:	2002      	movs	r0, #2
    61a0:	f7ff fe6c 	bl	5e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    61a4:	6a28      	ldr	r0, [r5, #32]
    61a6:	7800      	ldrb	r0, [r0, #0]
    61a8:	43c0      	mvns	r0, r0
    61aa:	0780      	lsls	r0, r0, #30
    61ac:	d029      	beq.n	6202 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    61ae:	6a28      	ldr	r0, [r5, #32]
    61b0:	7840      	ldrb	r0, [r0, #1]
    61b2:	b110      	cbz	r0, 61ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x376>
    61b4:	2002      	movs	r0, #2
    61b6:	71a0      	strb	r0, [r4, #6]
    61b8:	e000      	b.n	61bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x378>
    61ba:	71a6      	strb	r6, [r4, #6]
    61bc:	7ce0      	ldrb	r0, [r4, #19]
    61be:	b1a0      	cbz	r0, 61ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a6>
    61c0:	f7ff fe64 	bl	5e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    61c4:	4913      	ldr	r1, [pc, #76]	; (6214 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    61c6:	7a6d      	ldrb	r5, [r5, #9]
    61c8:	760e      	strb	r6, [r1, #24]
    61ca:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    61ce:	e9c1 2304 	strd	r2, r3, [r1, #16]
    61d2:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    61d6:	f007 fd92 	bl	dcfe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    61da:	4603      	mov	r3, r0
    61dc:	462a      	mov	r2, r5
    61de:	490d      	ldr	r1, [pc, #52]	; (6214 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    61e0:	2001      	movs	r0, #1
    61e2:	f005 fa3d 	bl	b660 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    61e6:	f005 fa71 	bl	b6cc <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    61ea:	ea37 0708 	bics.w	r7, r7, r8
    61ee:	d004      	beq.n	61fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b6>
    61f0:	2100      	movs	r1, #0
    61f2:	4608      	mov	r0, r1
    61f4:	f7ff fe82 	bl	5efc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    61f8:	b128      	cbz	r0, 6206 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    61fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    61fe:	f000 b80b 	b.w	6218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    6202:	2003      	movs	r0, #3
    6204:	e7d7      	b.n	61b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x372>
    6206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    620a:	2000      	movs	r0, #0
    620c:	f000 b8e6 	b.w	63dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
    6210:	200000ac 	.word	0x200000ac
    6214:	20000a60 	.word	0x20000a60
    6218:	b510      	push	{r4, lr}
    621a:	f005 fb23 	bl	b864 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    621e:	f005 f9d5 	bl	b5cc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6222:	4c0d      	ldr	r4, [pc, #52]	; (6258 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>)
    6224:	89e0      	ldrh	r0, [r4, #14]
    6226:	f7ff fe3d 	bl	5ea4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    622a:	69e2      	ldr	r2, [r4, #28]
    622c:	7961      	ldrb	r1, [r4, #5]
    622e:	78a0      	ldrb	r0, [r4, #2]
    6230:	4790      	blx	r2
    6232:	480a      	ldr	r0, [pc, #40]	; (625c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    6234:	7c40      	ldrb	r0, [r0, #17]
    6236:	b158      	cbz	r0, 6250 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>
    6238:	4808      	ldr	r0, [pc, #32]	; (625c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    623a:	3852      	subs	r0, #82	; 0x52
    623c:	f850 1f52 	ldr.w	r1, [r0, #82]!
    6240:	6081      	str	r1, [r0, #8]
    6242:	6841      	ldr	r1, [r0, #4]
    6244:	60c1      	str	r1, [r0, #12]
    6246:	4805      	ldr	r0, [pc, #20]	; (625c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    6248:	2101      	movs	r1, #1
    624a:	7401      	strb	r1, [r0, #16]
    624c:	f004 fcde 	bl	ac0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6250:	2000      	movs	r0, #0
    6252:	7020      	strb	r0, [r4, #0]
    6254:	bd10      	pop	{r4, pc}
    6256:	0000      	.short	0x0000
    6258:	200000ac 	.word	0x200000ac
    625c:	20000aaa 	.word	0x20000aaa
    6260:	4808      	ldr	r0, [pc, #32]	; (6284 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x440>)
    6262:	b510      	push	{r4, lr}
    6264:	7800      	ldrb	r0, [r0, #0]
    6266:	2802      	cmp	r0, #2
    6268:	d004      	beq.n	6274 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>
    626a:	f240 2117 	movw	r1, #535	; 0x217
    626e:	2027      	movs	r0, #39	; 0x27
    6270:	f7fe fd02 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6274:	4904      	ldr	r1, [pc, #16]	; (6288 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>)
    6276:	2001      	movs	r0, #1
    6278:	71c8      	strb	r0, [r1, #7]
    627a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    627e:	f7ff bfcb 	b.w	6218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    6282:	0000      	.short	0x0000
    6284:	200000ac 	.word	0x200000ac
    6288:	20000aaa 	.word	0x20000aaa
    628c:	b430      	push	{r4, r5}
    628e:	4b0c      	ldr	r3, [pc, #48]	; (62c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47c>)
    6290:	b942      	cbnz	r2, 62a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    6292:	79da      	ldrb	r2, [r3, #7]
    6294:	2aff      	cmp	r2, #255	; 0xff
    6296:	d105      	bne.n	62a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    6298:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    629c:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    62a0:	42a2      	cmp	r2, r4
    62a2:	d00b      	beq.n	62bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    62a4:	b131      	cbz	r1, 62b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x470>
    62a6:	79da      	ldrb	r2, [r3, #7]
    62a8:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    62ac:	bc30      	pop	{r4, r5}
    62ae:	4610      	mov	r0, r2
    62b0:	f005 be4e 	b.w	bf50 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    62b4:	22ff      	movs	r2, #255	; 0xff
    62b6:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    62ba:	e7f7      	b.n	62ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    62bc:	bc30      	pop	{r4, r5}
    62be:	4770      	bx	lr
    62c0:	200000ac 	.word	0x200000ac
    62c4:	b570      	push	{r4, r5, r6, lr}
    62c6:	4606      	mov	r6, r0
    62c8:	f7ff fde6 	bl	5e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    62cc:	4a1b      	ldr	r2, [pc, #108]	; (633c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f8>)
    62ce:	4604      	mov	r4, r0
    62d0:	2501      	movs	r5, #1
    62d2:	6a51      	ldr	r1, [r2, #36]	; 0x24
    62d4:	7808      	ldrb	r0, [r1, #0]
    62d6:	f000 0003 	and.w	r0, r0, #3
    62da:	2801      	cmp	r0, #1
    62dc:	d00c      	beq.n	62f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
    62de:	2802      	cmp	r0, #2
    62e0:	d00a      	beq.n	62f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
    62e2:	2803      	cmp	r0, #3
    62e4:	d121      	bne.n	632a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    62e6:	7065      	strb	r5, [r4, #1]
    62e8:	89d0      	ldrh	r0, [r2, #14]
    62ea:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    62ee:	81d0      	strh	r0, [r2, #14]
    62f0:	2001      	movs	r0, #1
    62f2:	f7ff fdc3 	bl	5e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    62f6:	e018      	b.n	632a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    62f8:	7848      	ldrb	r0, [r1, #1]
    62fa:	b1b0      	cbz	r0, 632a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    62fc:	89d1      	ldrh	r1, [r2, #14]
    62fe:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    6302:	81d1      	strh	r1, [r2, #14]
    6304:	6a91      	ldr	r1, [r2, #40]	; 0x28
    6306:	2900      	cmp	r1, #0
    6308:	d009      	beq.n	631e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4da>
    630a:	28fb      	cmp	r0, #251	; 0xfb
    630c:	d808      	bhi.n	6320 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>
    630e:	7990      	ldrb	r0, [r2, #6]
    6310:	b120      	cbz	r0, 631c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d8>
    6312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6316:	2020      	movs	r0, #32
    6318:	f7ff bdc4 	b.w	5ea4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    631c:	7035      	strb	r5, [r6, #0]
    631e:	bd70      	pop	{r4, r5, r6, pc}
    6320:	7950      	ldrb	r0, [r2, #5]
    6322:	f040 0010 	orr.w	r0, r0, #16
    6326:	7150      	strb	r0, [r2, #5]
    6328:	bd70      	pop	{r4, r5, r6, pc}
    632a:	7a20      	ldrb	r0, [r4, #8]
    632c:	2801      	cmp	r0, #1
    632e:	d001      	beq.n	6334 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f0>
    6330:	7225      	strb	r5, [r4, #8]
    6332:	bd70      	pop	{r4, r5, r6, pc}
    6334:	2000      	movs	r0, #0
    6336:	7220      	strb	r0, [r4, #8]
    6338:	bd70      	pop	{r4, r5, r6, pc}
    633a:	0000      	.short	0x0000
    633c:	200000ac 	.word	0x200000ac
    6340:	b570      	push	{r4, r5, r6, lr}
    6342:	f7ff fda9 	bl	5e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6346:	4604      	mov	r4, r0
    6348:	7980      	ldrb	r0, [r0, #6]
    634a:	2800      	cmp	r0, #0
    634c:	d02e      	beq.n	63ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>
    634e:	2802      	cmp	r0, #2
    6350:	d10d      	bne.n	636e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    6352:	481c      	ldr	r0, [pc, #112]	; (63c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x580>)
    6354:	6b00      	ldr	r0, [r0, #48]	; 0x30
    6356:	f007 f857 	bl	d408 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    635a:	b340      	cbz	r0, 63ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56a>
    635c:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    6360:	1c40      	adds	r0, r0, #1
    6362:	f141 0100 	adc.w	r1, r1, #0
    6366:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    636a:	f004 fc4f 	bl	ac0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    636e:	2500      	movs	r5, #0
    6370:	71a5      	strb	r5, [r4, #6]
    6372:	78e0      	ldrb	r0, [r4, #3]
    6374:	b120      	cbz	r0, 6380 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53c>
    6376:	70e5      	strb	r5, [r4, #3]
    6378:	2100      	movs	r1, #0
    637a:	2010      	movs	r0, #16
    637c:	f7ff fd7e 	bl	5e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6380:	78a0      	ldrb	r0, [r4, #2]
    6382:	b170      	cbz	r0, 63a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x55e>
    6384:	70a5      	strb	r5, [r4, #2]
    6386:	f7ff fb01 	bl	598c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    638a:	b198      	cbz	r0, 63b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x570>
    638c:	2100      	movs	r1, #0
    638e:	2008      	movs	r0, #8
    6390:	f7ff fd74 	bl	5e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6394:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    6398:	1c40      	adds	r0, r0, #1
    639a:	f141 0100 	adc.w	r1, r1, #0
    639e:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    63a2:	79e0      	ldrb	r0, [r4, #7]
    63a4:	2801      	cmp	r0, #1
    63a6:	d00a      	beq.n	63be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57a>
    63a8:	2001      	movs	r0, #1
    63aa:	71e0      	strb	r0, [r4, #7]
    63ac:	bd70      	pop	{r4, r5, r6, pc}
    63ae:	f240 31af 	movw	r1, #943	; 0x3af
    63b2:	e001      	b.n	63b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x574>
    63b4:	f240 31c7 	movw	r1, #967	; 0x3c7
    63b8:	2027      	movs	r0, #39	; 0x27
    63ba:	f7fe fc5d 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    63be:	71e5      	strb	r5, [r4, #7]
    63c0:	bd70      	pop	{r4, r5, r6, pc}
    63c2:	0000      	.short	0x0000
    63c4:	200000ac 	.word	0x200000ac
    63c8:	4803      	ldr	r0, [pc, #12]	; (63d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x594>)
    63ca:	7800      	ldrb	r0, [r0, #0]
    63cc:	2800      	cmp	r0, #0
    63ce:	d001      	beq.n	63d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x590>
    63d0:	f7ff bf22 	b.w	6218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    63d4:	4770      	bx	lr
    63d6:	0000      	.short	0x0000
    63d8:	200000ac 	.word	0x200000ac
    63dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63e0:	4606      	mov	r6, r0
    63e2:	f7ff fd53 	bl	5e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    63e6:	4680      	mov	r8, r0
    63e8:	f7ff fd56 	bl	5e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    63ec:	4c17      	ldr	r4, [pc, #92]	; (644c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x608>)
    63ee:	4605      	mov	r5, r0
    63f0:	4632      	mov	r2, r6
    63f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    63f4:	6260      	str	r0, [r4, #36]	; 0x24
    63f6:	2101      	movs	r1, #1
    63f8:	4640      	mov	r0, r8
    63fa:	f7ff ff47 	bl	628c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    63fe:	7ce8      	ldrb	r0, [r5, #19]
    6400:	2700      	movs	r7, #0
    6402:	b180      	cbz	r0, 6426 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e2>
    6404:	4812      	ldr	r0, [pc, #72]	; (6450 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
    6406:	f005 fcc7 	bl	bd98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    640a:	4812      	ldr	r0, [pc, #72]	; (6454 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x610>)
    640c:	2101      	movs	r1, #1
    640e:	7601      	strb	r1, [r0, #24]
    6410:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    6414:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6418:	490d      	ldr	r1, [pc, #52]	; (6450 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
    641a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    641c:	f005 f8a8 	bl	b570 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    6420:	f005 f8ba 	bl	b598 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    6424:	e004      	b.n	6430 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>
    6426:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6428:	f005 fcb6 	bl	bd98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    642c:	f005 f8ce 	bl	b5cc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6430:	b916      	cbnz	r6, 6438 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5f4>
    6432:	4638      	mov	r0, r7
    6434:	f005 fb52 	bl	badc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6438:	2100      	movs	r1, #0
    643a:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    643e:	4608      	mov	r0, r1
    6440:	f005 fd34 	bl	beac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6444:	2002      	movs	r0, #2
    6446:	7020      	strb	r0, [r4, #0]
    6448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    644c:	200000ac 	.word	0x200000ac
    6450:	20000958 	.word	0x20000958
    6454:	20000a60 	.word	0x20000a60
    6458:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    645c:	4604      	mov	r4, r0
    645e:	f7ff fd1b 	bl	5e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6462:	4605      	mov	r5, r0
    6464:	f7ff fd12 	bl	5e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6468:	4606      	mov	r6, r0
    646a:	f8df 9168 	ldr.w	r9, [pc, #360]	; 65d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x790>
    646e:	4622      	mov	r2, r4
    6470:	2100      	movs	r1, #0
    6472:	f7ff ff0b 	bl	628c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    6476:	79a8      	ldrb	r0, [r5, #6]
    6478:	2701      	movs	r7, #1
    647a:	f04f 0800 	mov.w	r8, #0
    647e:	f1a9 0420 	sub.w	r4, r9, #32
    6482:	b140      	cbz	r0, 6496 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x652>
    6484:	2801      	cmp	r0, #1
    6486:	d01f      	beq.n	64c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
    6488:	2802      	cmp	r0, #2
    648a:	d030      	beq.n	64ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6aa>
    648c:	2803      	cmp	r0, #3
    648e:	d03c      	beq.n	650a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c6>
    6490:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    6494:	e058      	b.n	6548 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    6496:	7a20      	ldrb	r0, [r4, #8]
    6498:	2150      	movs	r1, #80	; 0x50
    649a:	f8ad 0004 	strh.w	r0, [sp, #4]
    649e:	5388      	strh	r0, [r1, r6]
    64a0:	4648      	mov	r0, r9
    64a2:	f7ff fa9d 	bl	59e0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    64a6:	b128      	cbz	r0, 64b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x670>
    64a8:	2080      	movs	r0, #128	; 0x80
    64aa:	6a21      	ldr	r1, [r4, #32]
    64ac:	f7ff fce6 	bl	5e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    64b0:	70af      	strb	r7, [r5, #2]
    64b2:	e02e      	b.n	6512 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    64b4:	466a      	mov	r2, sp
    64b6:	a901      	add	r1, sp, #4
    64b8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    64ba:	f007 fc38 	bl	dd2e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    64be:	6220      	str	r0, [r4, #32]
    64c0:	b110      	cbz	r0, 64c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
    64c2:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
    64c6:	b111      	cbz	r1, 64ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68a>
    64c8:	4843      	ldr	r0, [pc, #268]	; (65d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
    64ca:	6220      	str	r0, [r4, #32]
    64cc:	e021      	b.n	6512 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    64ce:	f89d 1000 	ldrb.w	r1, [sp]
    64d2:	b931      	cbnz	r1, 64e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69e>
    64d4:	f8a0 8000 	strh.w	r8, [r0]
    64d8:	f880 8002 	strb.w	r8, [r0, #2]
    64dc:	2101      	movs	r1, #1
    64de:	f007 ff70 	bl	e3c2 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    64e2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    64e6:	6a20      	ldr	r0, [r4, #32]
    64e8:	f007 ff2f 	bl	e34a <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    64ec:	e011      	b.n	6512 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    64ee:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    64f2:	f8ad 0004 	strh.w	r0, [sp, #4]
    64f6:	466a      	mov	r2, sp
    64f8:	a901      	add	r1, sp, #4
    64fa:	6b20      	ldr	r0, [r4, #48]	; 0x30
    64fc:	f007 fc17 	bl	dd2e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    6500:	6220      	str	r0, [r4, #32]
    6502:	b930      	cbnz	r0, 6512 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    6504:	f240 21a5 	movw	r1, #677	; 0x2a5
    6508:	e01e      	b.n	6548 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    650a:	4648      	mov	r0, r9
    650c:	f7ff fa68 	bl	59e0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6510:	b1c0      	cbz	r0, 6544 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x700>
    6512:	6a20      	ldr	r0, [r4, #32]
    6514:	2308      	movs	r3, #8
    6516:	7801      	ldrb	r1, [r0, #0]
    6518:	f021 0108 	bic.w	r1, r1, #8
    651c:	7001      	strb	r1, [r0, #0]
    651e:	79ea      	ldrb	r2, [r5, #7]
    6520:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    6524:	4311      	orrs	r1, r2
    6526:	f021 0104 	bic.w	r1, r1, #4
    652a:	7001      	strb	r1, [r0, #0]
    652c:	7a2a      	ldrb	r2, [r5, #8]
    652e:	2304      	movs	r3, #4
    6530:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    6534:	4311      	orrs	r1, r2
    6536:	f021 0110 	bic.w	r1, r1, #16
    653a:	7001      	strb	r1, [r0, #0]
    653c:	43c9      	mvns	r1, r1
    653e:	0789      	lsls	r1, r1, #30
    6540:	d005      	beq.n	654e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x70a>
    6542:	e007      	b.n	6554 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    6544:	f240 21ae 	movw	r1, #686	; 0x2ae
    6548:	2027      	movs	r0, #39	; 0x27
    654a:	f7fe fb95 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    654e:	78c0      	ldrb	r0, [r0, #3]
    6550:	2802      	cmp	r0, #2
    6552:	d00f      	beq.n	6574 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    6554:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6556:	f007 f87f 	bl	d658 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    655a:	b108      	cbz	r0, 6560 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    655c:	2101      	movs	r1, #1
    655e:	e00a      	b.n	6576 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    6560:	6a20      	ldr	r0, [r4, #32]
    6562:	7800      	ldrb	r0, [r0, #0]
    6564:	43c0      	mvns	r0, r0
    6566:	0780      	lsls	r0, r0, #30
    6568:	d004      	beq.n	6574 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    656a:	f7ff f9f7 	bl	595c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    656e:	f080 0101 	eor.w	r1, r0, #1
    6572:	e000      	b.n	6576 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    6574:	2100      	movs	r1, #0
    6576:	6a20      	ldr	r0, [r4, #32]
    6578:	7802      	ldrb	r2, [r0, #0]
    657a:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    657e:	7001      	strb	r1, [r0, #0]
    6580:	7ca9      	ldrb	r1, [r5, #18]
    6582:	b199      	cbz	r1, 65ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    6584:	7841      	ldrb	r1, [r0, #1]
    6586:	b189      	cbz	r1, 65ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    6588:	4814      	ldr	r0, [pc, #80]	; (65dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
    658a:	f005 fc05 	bl	bd98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    658e:	4812      	ldr	r0, [pc, #72]	; (65d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
    6590:	3828      	subs	r0, #40	; 0x28
    6592:	f880 8018 	strb.w	r8, [r0, #24]
    6596:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	; 0x50
    659a:	e9c0 1204 	strd	r1, r2, [r0, #16]
    659e:	480f      	ldr	r0, [pc, #60]	; (65dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
    65a0:	6a21      	ldr	r1, [r4, #32]
    65a2:	f004 ffe5 	bl	b570 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    65a6:	f005 f82f 	bl	b608 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    65aa:	e003      	b.n	65b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x770>
    65ac:	f005 fbf4 	bl	bd98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    65b0:	f005 f80c 	bl	b5cc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    65b4:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    65b8:	2101      	movs	r1, #1
    65ba:	2000      	movs	r0, #0
    65bc:	f005 fc76 	bl	beac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    65c0:	7127      	strb	r7, [r4, #4]
    65c2:	6a20      	ldr	r0, [r4, #32]
    65c4:	8801      	ldrh	r1, [r0, #0]
    65c6:	8221      	strh	r1, [r4, #16]
    65c8:	7880      	ldrb	r0, [r0, #2]
    65ca:	74a0      	strb	r0, [r4, #18]
    65cc:	7027      	strb	r7, [r4, #0]
    65ce:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    65d2:	0000      	.short	0x0000
    65d4:	200000cc 	.word	0x200000cc
    65d8:	20000a88 	.word	0x20000a88
    65dc:	20000958 	.word	0x20000958
    65e0:	00006261 	.word	0x00006261
    65e4:	00005fe9 	.word	0x00005fe9
    65e8:	0000615d 	.word	0x0000615d
    65ec:	000063c9 	.word	0x000063c9

000065f0 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    65f0:	4800      	ldr	r0, [pc, #0]	; (65f4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    65f2:	4770      	bx	lr
    65f4:	20001349 	.word	0x20001349

000065f8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    65f8:	4904      	ldr	r1, [pc, #16]	; (660c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    65fa:	788a      	ldrb	r2, [r1, #2]
    65fc:	4282      	cmp	r2, r0
    65fe:	d903      	bls.n	6608 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    6600:	4408      	add	r0, r1
    6602:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    6606:	4770      	bx	lr
    6608:	2000      	movs	r0, #0
    660a:	4770      	bx	lr
    660c:	20001176 	.word	0x20001176

00006610 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    6610:	4904      	ldr	r1, [pc, #16]	; (6624 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    6612:	788a      	ldrb	r2, [r1, #2]
    6614:	4282      	cmp	r2, r0
    6616:	d903      	bls.n	6620 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    6618:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    661c:	3083      	adds	r0, #131	; 0x83
    661e:	4770      	bx	lr
    6620:	2000      	movs	r0, #0
    6622:	4770      	bx	lr
    6624:	20001176 	.word	0x20001176

00006628 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    6628:	4a05      	ldr	r2, [pc, #20]	; (6640 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    662a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    662e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6632:	6802      	ldr	r2, [r0, #0]
    6634:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    6638:	8880      	ldrh	r0, [r0, #4]
    663a:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    663e:	4770      	bx	lr
    6640:	20001176 	.word	0x20001176

00006644 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    6644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6648:	460e      	mov	r6, r1
    664a:	4607      	mov	r7, r0
    664c:	4615      	mov	r5, r2
    664e:	2106      	movs	r1, #6
    6650:	4630      	mov	r0, r6
    6652:	f007 fd5b 	bl	e10c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6656:	4c0d      	ldr	r4, [pc, #52]	; (668c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    6658:	b160      	cbz	r0, 6674 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    665a:	2000      	movs	r0, #0
    665c:	e004      	b.n	6668 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    665e:	1821      	adds	r1, r4, r0
    6660:	1c40      	adds	r0, r0, #1
    6662:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    6666:	b2c0      	uxtb	r0, r0
    6668:	78a1      	ldrb	r1, [r4, #2]
    666a:	4281      	cmp	r1, r0
    666c:	d8f7      	bhi.n	665e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    666e:	2001      	movs	r0, #1
    6670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6674:	4631      	mov	r1, r6
    6676:	4638      	mov	r0, r7
    6678:	f007 fb68 	bl	dd4c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    667c:	2808      	cmp	r0, #8
    667e:	d003      	beq.n	6688 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    6680:	4420      	add	r0, r4
    6682:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    6686:	e7f2      	b.n	666e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    6688:	2000      	movs	r0, #0
    668a:	e7f1      	b.n	6670 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    668c:	20001176 	.word	0x20001176

00006690 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    6690:	4904      	ldr	r1, [pc, #16]	; (66a4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    6692:	788a      	ldrb	r2, [r1, #2]
    6694:	4282      	cmp	r2, r0
    6696:	d903      	bls.n	66a0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    6698:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    669c:	1cc0      	adds	r0, r0, #3
    669e:	4770      	bx	lr
    66a0:	2000      	movs	r0, #0
    66a2:	4770      	bx	lr
    66a4:	20001176 	.word	0x20001176

000066a8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    66a8:	b510      	push	{r4, lr}
    66aa:	f240 12d3 	movw	r2, #467	; 0x1d3
    66ae:	2100      	movs	r1, #0
    66b0:	4808      	ldr	r0, [pc, #32]	; (66d4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    66b2:	f006 f9b1 	bl	ca18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    66b6:	2208      	movs	r2, #8
    66b8:	21ff      	movs	r1, #255	; 0xff
    66ba:	4807      	ldr	r0, [pc, #28]	; (66d8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    66bc:	f006 f9ac 	bl	ca18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    66c0:	4805      	ldr	r0, [pc, #20]	; (66d8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    66c2:	2100      	movs	r1, #0
    66c4:	1f00      	subs	r0, r0, #4
    66c6:	7001      	strb	r1, [r0, #0]
    66c8:	7041      	strb	r1, [r0, #1]
    66ca:	f44f 7161 	mov.w	r1, #900	; 0x384
    66ce:	8041      	strh	r1, [r0, #2]
    66d0:	bd10      	pop	{r4, pc}
    66d2:	0000      	.short	0x0000
    66d4:	20001176 	.word	0x20001176
    66d8:	2000027c 	.word	0x2000027c

000066dc <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    66dc:	4901      	ldr	r1, [pc, #4]	; (66e4 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    66de:	7008      	strb	r0, [r1, #0]
    66e0:	4770      	bx	lr
    66e2:	0000      	.short	0x0000
    66e4:	20000278 	.word	0x20000278

000066e8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    66e8:	4801      	ldr	r0, [pc, #4]	; (66f0 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    66ea:	7800      	ldrb	r0, [r0, #0]
    66ec:	4770      	bx	lr
    66ee:	0000      	.short	0x0000
    66f0:	20000278 	.word	0x20000278

000066f4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    66f4:	4b0b      	ldr	r3, [pc, #44]	; (6724 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    66f6:	b510      	push	{r4, lr}
    66f8:	789c      	ldrb	r4, [r3, #2]
    66fa:	4284      	cmp	r4, r0
    66fc:	d90f      	bls.n	671e <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    66fe:	4418      	add	r0, r3
    6700:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    6704:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6708:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    670c:	700b      	strb	r3, [r1, #0]
    670e:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    6712:	6011      	str	r1, [r2, #0]
    6714:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    6718:	8090      	strh	r0, [r2, #4]
    671a:	2001      	movs	r0, #1
    671c:	bd10      	pop	{r4, pc}
    671e:	2000      	movs	r0, #0
    6720:	bd10      	pop	{r4, pc}
    6722:	0000      	.short	0x0000
    6724:	20001176 	.word	0x20001176

00006728 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    6728:	4907      	ldr	r1, [pc, #28]	; (6748 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    672a:	788a      	ldrb	r2, [r1, #2]
    672c:	4282      	cmp	r2, r0
    672e:	d909      	bls.n	6744 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    6730:	4408      	add	r0, r1
    6732:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    6736:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    673a:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    673e:	f000 0001 	and.w	r0, r0, #1
    6742:	4770      	bx	lr
    6744:	2000      	movs	r0, #0
    6746:	4770      	bx	lr
    6748:	20001176 	.word	0x20001176

0000674c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    674c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6750:	4698      	mov	r8, r3
    6752:	4691      	mov	r9, r2
    6754:	460c      	mov	r4, r1
    6756:	4605      	mov	r5, r0
    6758:	f000 f936 	bl	69c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    675c:	4606      	mov	r6, r0
    675e:	2810      	cmp	r0, #16
    6760:	d006      	beq.n	6770 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    6762:	f000 f901 	bl	6968 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6766:	2810      	cmp	r0, #16
    6768:	d002      	beq.n	6770 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    676a:	2012      	movs	r0, #18
    676c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6770:	4f18      	ldr	r7, [pc, #96]	; (67d4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    6772:	78b8      	ldrb	r0, [r7, #2]
    6774:	2808      	cmp	r0, #8
    6776:	d22a      	bcs.n	67ce <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    6778:	2e10      	cmp	r6, #16
    677a:	d105      	bne.n	6788 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    677c:	2200      	movs	r2, #0
    677e:	4621      	mov	r1, r4
    6780:	4628      	mov	r0, r5
    6782:	f000 f905 	bl	6990 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    6786:	4606      	mov	r6, r0
    6788:	78bc      	ldrb	r4, [r7, #2]
    678a:	2210      	movs	r2, #16
    678c:	1c60      	adds	r0, r4, #1
    678e:	70b8      	strb	r0, [r7, #2]
    6790:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    6794:	1ce8      	adds	r0, r5, #3
    6796:	4649      	mov	r1, r9
    6798:	f007 fc21 	bl	dfde <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    679c:	f105 0083 	add.w	r0, r5, #131	; 0x83
    67a0:	2210      	movs	r2, #16
    67a2:	4641      	mov	r1, r8
    67a4:	f007 fc1b 	bl	dfde <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    67a8:	2110      	movs	r1, #16
    67aa:	4640      	mov	r0, r8
    67ac:	f007 fcae 	bl	e10c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    67b0:	443c      	add	r4, r7
    67b2:	2110      	movs	r1, #16
    67b4:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    67b8:	4648      	mov	r0, r9
    67ba:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    67be:	f007 fca5 	bl	e10c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    67c2:	77e0      	strb	r0, [r4, #31]
    67c4:	f804 6c29 	strb.w	r6, [r4, #-41]
    67c8:	2000      	movs	r0, #0
    67ca:	73e0      	strb	r0, [r4, #15]
    67cc:	e7ce      	b.n	676c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    67ce:	2007      	movs	r0, #7
    67d0:	e7cc      	b.n	676c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    67d2:	0000      	.short	0x0000
    67d4:	20001176 	.word	0x20001176

000067d8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    67d8:	4806      	ldr	r0, [pc, #24]	; (67f4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    67da:	b510      	push	{r4, lr}
    67dc:	7880      	ldrb	r0, [r0, #2]
    67de:	1e40      	subs	r0, r0, #1
    67e0:	b244      	sxtb	r4, r0
    67e2:	e004      	b.n	67ee <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    67e4:	b2e0      	uxtb	r0, r4
    67e6:	f000 f937 	bl	6a58 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    67ea:	1e64      	subs	r4, r4, #1
    67ec:	b264      	sxtb	r4, r4
    67ee:	2c00      	cmp	r4, #0
    67f0:	daf8      	bge.n	67e4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    67f2:	bd10      	pop	{r4, pc}
    67f4:	20001176 	.word	0x20001176

000067f8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    67f8:	4801      	ldr	r0, [pc, #4]	; (6800 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    67fa:	8840      	ldrh	r0, [r0, #2]
    67fc:	4770      	bx	lr
    67fe:	0000      	.short	0x0000
    6800:	20000278 	.word	0x20000278

00006804 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    6804:	b138      	cbz	r0, 6816 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    6806:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    680a:	4288      	cmp	r0, r1
    680c:	d803      	bhi.n	6816 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    680e:	4903      	ldr	r1, [pc, #12]	; (681c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    6810:	8048      	strh	r0, [r1, #2]
    6812:	2001      	movs	r0, #1
    6814:	4770      	bx	lr
    6816:	2000      	movs	r0, #0
    6818:	4770      	bx	lr
    681a:	0000      	.short	0x0000
    681c:	20000278 	.word	0x20000278

00006820 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    6820:	4905      	ldr	r1, [pc, #20]	; (6838 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    6822:	788a      	ldrb	r2, [r1, #2]
    6824:	4282      	cmp	r2, r0
    6826:	d903      	bls.n	6830 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    6828:	4408      	add	r0, r1
    682a:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    682e:	b108      	cbz	r0, 6834 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    6830:	2000      	movs	r0, #0
    6832:	4770      	bx	lr
    6834:	2001      	movs	r0, #1
    6836:	4770      	bx	lr
    6838:	20001176 	.word	0x20001176

0000683c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    683c:	b570      	push	{r4, r5, r6, lr}
    683e:	460d      	mov	r5, r1
    6840:	4606      	mov	r6, r0
    6842:	f000 f8c1 	bl	69c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    6846:	4c10      	ldr	r4, [pc, #64]	; (6888 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    6848:	2810      	cmp	r0, #16
    684a:	d007      	beq.n	685c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    684c:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    6850:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    6854:	07c9      	lsls	r1, r1, #31
    6856:	d001      	beq.n	685c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6858:	2001      	movs	r0, #1
    685a:	bd70      	pop	{r4, r5, r6, pc}
    685c:	7861      	ldrb	r1, [r4, #1]
    685e:	2908      	cmp	r1, #8
    6860:	d210      	bcs.n	6884 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    6862:	2810      	cmp	r0, #16
    6864:	d008      	beq.n	6878 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    6866:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    686a:	2101      	movs	r1, #1
    686c:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    6870:	7860      	ldrb	r0, [r4, #1]
    6872:	1c40      	adds	r0, r0, #1
    6874:	7060      	strb	r0, [r4, #1]
    6876:	e7ef      	b.n	6858 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    6878:	2201      	movs	r2, #1
    687a:	4629      	mov	r1, r5
    687c:	4630      	mov	r0, r6
    687e:	f000 f887 	bl	6990 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    6882:	e7f5      	b.n	6870 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    6884:	2000      	movs	r0, #0
    6886:	bd70      	pop	{r4, r5, r6, pc}
    6888:	20001176 	.word	0x20001176

0000688c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    688c:	b570      	push	{r4, r5, r6, lr}
    688e:	4d0b      	ldr	r5, [pc, #44]	; (68bc <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    6890:	7828      	ldrb	r0, [r5, #0]
    6892:	1e40      	subs	r0, r0, #1
    6894:	b244      	sxtb	r4, r0
    6896:	e00a      	b.n	68ae <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    6898:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    689c:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    68a0:	07c0      	lsls	r0, r0, #31
    68a2:	d002      	beq.n	68aa <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    68a4:	b2e0      	uxtb	r0, r4
    68a6:	f000 f91f 	bl	6ae8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    68aa:	1e64      	subs	r4, r4, #1
    68ac:	b264      	sxtb	r4, r4
    68ae:	2c00      	cmp	r4, #0
    68b0:	daf2      	bge.n	6898 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    68b2:	4903      	ldr	r1, [pc, #12]	; (68c0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    68b4:	2000      	movs	r0, #0
    68b6:	7048      	strb	r0, [r1, #1]
    68b8:	bd70      	pop	{r4, r5, r6, pc}
    68ba:	0000      	.short	0x0000
    68bc:	20001176 	.word	0x20001176
    68c0:	20000278 	.word	0x20000278

000068c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    68c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68c8:	2400      	movs	r4, #0
    68ca:	4625      	mov	r5, r4
    68cc:	4e18      	ldr	r6, [pc, #96]	; (6930 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    68ce:	e029      	b.n	6924 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    68d0:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    68d4:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    68d8:	07c0      	lsls	r0, r0, #31
    68da:	d021      	beq.n	6920 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    68dc:	4628      	mov	r0, r5
    68de:	f000 f843 	bl	6968 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    68e2:	4603      	mov	r3, r0
    68e4:	f7ff fed4 	bl	6690 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    68e8:	4601      	mov	r1, r0
    68ea:	2000      	movs	r0, #0
    68ec:	2b10      	cmp	r3, #16
    68ee:	d009      	beq.n	6904 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    68f0:	18f2      	adds	r2, r6, r3
    68f2:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    68f6:	f1bc 0f01 	cmp.w	ip, #1
    68fa:	d002      	beq.n	6902 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    68fc:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    6900:	b102      	cbz	r2, 6904 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6902:	2001      	movs	r0, #1
    6904:	1e40      	subs	r0, r0, #1
    6906:	4201      	tst	r1, r0
    6908:	d10a      	bne.n	6920 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    690a:	480a      	ldr	r0, [pc, #40]	; (6934 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    690c:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    6910:	5503      	strb	r3, [r0, r4]
    6912:	4620      	mov	r0, r4
    6914:	1c64      	adds	r4, r4, #1
    6916:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    691a:	b2e4      	uxtb	r4, r4
    691c:	f005 fbe6 	bl	c0ec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    6920:	1c6d      	adds	r5, r5, #1
    6922:	b2ed      	uxtb	r5, r5
    6924:	7830      	ldrb	r0, [r6, #0]
    6926:	42a8      	cmp	r0, r5
    6928:	d8d2      	bhi.n	68d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    692a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    692e:	0000      	.short	0x0000
    6930:	20001176 	.word	0x20001176
    6934:	2000027c 	.word	0x2000027c
    6938:	4602      	mov	r2, r0
    693a:	4809      	ldr	r0, [pc, #36]	; (6960 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    693c:	b510      	push	{r4, lr}
    693e:	7800      	ldrb	r0, [r0, #0]
    6940:	460b      	mov	r3, r1
    6942:	b158      	cbz	r0, 695c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6944:	4807      	ldr	r0, [pc, #28]	; (6964 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6946:	7881      	ldrb	r1, [r0, #2]
    6948:	b141      	cbz	r1, 695c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    694a:	b10b      	cbz	r3, 6950 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    694c:	1cc0      	adds	r0, r0, #3
    694e:	e001      	b.n	6954 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    6950:	4804      	ldr	r0, [pc, #16]	; (6964 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6952:	3083      	adds	r0, #131	; 0x83
    6954:	f004 fd2e 	bl	b3b4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    6958:	2001      	movs	r0, #1
    695a:	bd10      	pop	{r4, pc}
    695c:	2000      	movs	r0, #0
    695e:	bd10      	pop	{r4, pc}
    6960:	20000278 	.word	0x20000278
    6964:	20001176 	.word	0x20001176
    6968:	4908      	ldr	r1, [pc, #32]	; (698c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    696a:	b510      	push	{r4, lr}
    696c:	4603      	mov	r3, r0
    696e:	2000      	movs	r0, #0
    6970:	788a      	ldrb	r2, [r1, #2]
    6972:	e006      	b.n	6982 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    6974:	180c      	adds	r4, r1, r0
    6976:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    697a:	429c      	cmp	r4, r3
    697c:	d004      	beq.n	6988 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    697e:	1c40      	adds	r0, r0, #1
    6980:	b2c0      	uxtb	r0, r0
    6982:	4282      	cmp	r2, r0
    6984:	d8f6      	bhi.n	6974 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    6986:	2010      	movs	r0, #16
    6988:	bd10      	pop	{r4, pc}
    698a:	0000      	.short	0x0000
    698c:	20001176 	.word	0x20001176
    6990:	b570      	push	{r4, r5, r6, lr}
    6992:	4b0c      	ldr	r3, [pc, #48]	; (69c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    6994:	4604      	mov	r4, r0
    6996:	7818      	ldrb	r0, [r3, #0]
    6998:	1c45      	adds	r5, r0, #1
    699a:	701d      	strb	r5, [r3, #0]
    699c:	2810      	cmp	r0, #16
    699e:	d303      	bcc.n	69a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    69a0:	2146      	movs	r1, #70	; 0x46
    69a2:	2028      	movs	r0, #40	; 0x28
    69a4:	f7fe f968 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    69a8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    69ac:	680d      	ldr	r5, [r1, #0]
    69ae:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    69b2:	8889      	ldrh	r1, [r1, #4]
    69b4:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    69b8:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    69bc:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    69c0:	bd70      	pop	{r4, r5, r6, pc}
    69c2:	0000      	.short	0x0000
    69c4:	20001176 	.word	0x20001176
    69c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69cc:	460f      	mov	r7, r1
    69ce:	4606      	mov	r6, r0
    69d0:	2400      	movs	r4, #0
    69d2:	4d0d      	ldr	r5, [pc, #52]	; (6a08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    69d4:	e00f      	b.n	69f6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    69d6:	bf00      	nop
    69d8:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    69dc:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    69e0:	42b1      	cmp	r1, r6
    69e2:	d106      	bne.n	69f2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    69e4:	2206      	movs	r2, #6
    69e6:	4639      	mov	r1, r7
    69e8:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    69ec:	f005 ff88 	bl	c900 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    69f0:	b138      	cbz	r0, 6a02 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    69f2:	1c64      	adds	r4, r4, #1
    69f4:	b2e4      	uxtb	r4, r4
    69f6:	7828      	ldrb	r0, [r5, #0]
    69f8:	42a0      	cmp	r0, r4
    69fa:	d8ed      	bhi.n	69d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    69fc:	2010      	movs	r0, #16
    69fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a02:	4620      	mov	r0, r4
    6a04:	e7fb      	b.n	69fe <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    6a06:	0000      	.short	0x0000
    6a08:	20001176 	.word	0x20001176
    6a0c:	b570      	push	{r4, r5, r6, lr}
    6a0e:	4605      	mov	r5, r0
    6a10:	f7ff ffaa 	bl	6968 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6a14:	2810      	cmp	r0, #16
    6a16:	d11c      	bne.n	6a52 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    6a18:	4c0e      	ldr	r4, [pc, #56]	; (6a54 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    6a1a:	7820      	ldrb	r0, [r4, #0]
    6a1c:	1e40      	subs	r0, r0, #1
    6a1e:	b2c0      	uxtb	r0, r0
    6a20:	7020      	strb	r0, [r4, #0]
    6a22:	42a8      	cmp	r0, r5
    6a24:	d015      	beq.n	6a52 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    6a26:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    6a2a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    6a2e:	f502 7080 	add.w	r0, r2, #256	; 0x100
    6a32:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    6a36:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    6a3a:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    6a3e:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    6a42:	7820      	ldrb	r0, [r4, #0]
    6a44:	f7ff ff90 	bl	6968 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6a48:	2810      	cmp	r0, #16
    6a4a:	d002      	beq.n	6a52 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    6a4c:	4420      	add	r0, r4
    6a4e:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    6a52:	bd70      	pop	{r4, r5, r6, pc}
    6a54:	20001176 	.word	0x20001176
    6a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a5c:	4c21      	ldr	r4, [pc, #132]	; (6ae4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    6a5e:	4606      	mov	r6, r0
    6a60:	19a7      	adds	r7, r4, r6
    6a62:	78a0      	ldrb	r0, [r4, #2]
    6a64:	1e40      	subs	r0, r0, #1
    6a66:	b2c5      	uxtb	r5, r0
    6a68:	70a5      	strb	r5, [r4, #2]
    6a6a:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    6a6e:	42ae      	cmp	r6, r5
    6a70:	d02a      	beq.n	6ac8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    6a72:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    6a76:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    6a7a:	f10a 0103 	add.w	r1, sl, #3
    6a7e:	f109 0003 	add.w	r0, r9, #3
    6a82:	2210      	movs	r2, #16
    6a84:	f005 ff4e 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6a88:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    6a8c:	f109 0083 	add.w	r0, r9, #131	; 0x83
    6a90:	2210      	movs	r2, #16
    6a92:	f005 ff47 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6a96:	1960      	adds	r0, r4, r5
    6a98:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    6a9c:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    6aa0:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    6aa4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    6aa8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6aac:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    6ab0:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    6ab4:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    6ab8:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    6abc:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    6ac0:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6ac4:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    6ac8:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    6acc:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6ad0:	07c0      	lsls	r0, r0, #31
    6ad2:	d104      	bne.n	6ade <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    6ad4:	4640      	mov	r0, r8
    6ad6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ada:	f7ff bf97 	b.w	6a0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    6ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6ae2:	0000      	.short	0x0000
    6ae4:	20001176 	.word	0x20001176
    6ae8:	4905      	ldr	r1, [pc, #20]	; (6b00 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    6aea:	784a      	ldrb	r2, [r1, #1]
    6aec:	1e52      	subs	r2, r2, #1
    6aee:	704a      	strb	r2, [r1, #1]
    6af0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    6af4:	2200      	movs	r2, #0
    6af6:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    6afa:	f7ff bf87 	b.w	6a0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    6afe:	0000      	.short	0x0000
    6b00:	20001176 	.word	0x20001176

00006b04 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    6b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6b08:	4604      	mov	r4, r0
    6b0a:	f100 0570 	add.w	r5, r0, #112	; 0x70
    6b0e:	f04f 0901 	mov.w	r9, #1
    6b12:	b171      	cbz	r1, 6b32 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    6b14:	f104 0786 	add.w	r7, r4, #134	; 0x86
    6b18:	1e7e      	subs	r6, r7, #1
    6b1a:	2901      	cmp	r1, #1
    6b1c:	d021      	beq.n	6b62 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
    6b1e:	2902      	cmp	r1, #2
    6b20:	d046      	beq.n	6bb0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xac>
    6b22:	2903      	cmp	r1, #3
    6b24:	d11b      	bne.n	6b5e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    6b26:	4639      	mov	r1, r7
    6b28:	4630      	mov	r0, r6
    6b2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6b2e:	f007 bb1d 	b.w	e16c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6b32:	f44f 7206 	mov.w	r2, #536	; 0x218
    6b36:	2100      	movs	r1, #0
    6b38:	f005 ff6e 	bl	ca18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6b3c:	f004 fc10 	bl	b360 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6b40:	f644 112b 	movw	r1, #18731	; 0x492b
    6b44:	4008      	ands	r0, r1
    6b46:	f885 9015 	strb.w	r9, [r5, #21]
    6b4a:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
    6b4e:	0a00      	lsrs	r0, r0, #8
    6b50:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
    6b54:	20fe      	movs	r0, #254	; 0xfe
    6b56:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
    6b5a:	207f      	movs	r0, #127	; 0x7f
    6b5c:	7268      	strb	r0, [r5, #9]
    6b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6b62:	f04f 0800 	mov.w	r8, #0
    6b66:	f8a4 810e 	strh.w	r8, [r4, #270]	; 0x10e
    6b6a:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
    6b6e:	68e1      	ldr	r1, [r4, #12]
    6b70:	4814      	ldr	r0, [pc, #80]	; (6bc4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    6b72:	460a      	mov	r2, r1
    6b74:	4408      	add	r0, r1
    6b76:	fbb0 f0f1 	udiv	r0, r0, r1
    6b7a:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    6b7e:	f640 30b8 	movw	r0, #3000	; 0xbb8
    6b82:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
    6b86:	8ae3      	ldrh	r3, [r4, #22]
    6b88:	4628      	mov	r0, r5
    6b8a:	f000 f81d 	bl	6bc8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    6b8e:	4639      	mov	r1, r7
    6b90:	4630      	mov	r0, r6
    6b92:	f007 faeb 	bl	e16c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6b96:	f005 fe8f 	bl	c8b8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    6b9a:	b118      	cbz	r0, 6ba4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
    6b9c:	6920      	ldr	r0, [r4, #16]
    6b9e:	f000 fb39 	bl	7214 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    6ba2:	b110      	cbz	r0, 6baa <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
    6ba4:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
    6ba8:	e7d9      	b.n	6b5e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    6baa:	f884 9174 	strb.w	r9, [r4, #372]	; 0x174
    6bae:	e7d6      	b.n	6b5e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    6bb0:	68c1      	ldr	r1, [r0, #12]
    6bb2:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
    6bb6:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
    6bba:	4628      	mov	r0, r5
    6bbc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6bc0:	f000 b802 	b.w	6bc8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    6bc4:	01c9c37f 	.word	0x01c9c37f
    6bc8:	b530      	push	{r4, r5, lr}
    6bca:	2400      	movs	r4, #0
    6bcc:	8684      	strh	r4, [r0, #52]	; 0x34
    6bce:	8f04      	ldrh	r4, [r0, #56]	; 0x38
    6bd0:	4d13      	ldr	r5, [pc, #76]	; (6c20 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x11c>)
    6bd2:	434c      	muls	r4, r1
    6bd4:	fbb4 f4f2 	udiv	r4, r4, r2
    6bd8:	8704      	strh	r4, [r0, #56]	; 0x38
    6bda:	f242 7410 	movw	r4, #10000	; 0x2710
    6bde:	4363      	muls	r3, r4
    6be0:	fbb3 f3f2 	udiv	r3, r3, r2
    6be4:	1c5b      	adds	r3, r3, #1
    6be6:	b29b      	uxth	r3, r3
    6be8:	fb03 f402 	mul.w	r4, r3, r2
    6bec:	86c3      	strh	r3, [r0, #54]	; 0x36
    6bee:	42ac      	cmp	r4, r5
    6bf0:	d901      	bls.n	6bf6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    6bf2:	1e5b      	subs	r3, r3, #1
    6bf4:	86c3      	strh	r3, [r0, #54]	; 0x36
    6bf6:	4b0b      	ldr	r3, [pc, #44]	; (6c24 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    6bf8:	f240 2471 	movw	r4, #625	; 0x271
    6bfc:	fbb3 f3f2 	udiv	r3, r3, r2
    6c00:	1c5b      	adds	r3, r3, #1
    6c02:	8783      	strh	r3, [r0, #60]	; 0x3c
    6c04:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    6c06:	4363      	muls	r3, r4
    6c08:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6c0c:	1e5b      	subs	r3, r3, #1
    6c0e:	fbb3 f3f2 	udiv	r3, r3, r2
    6c12:	62c3      	str	r3, [r0, #44]	; 0x2c
    6c14:	6a83      	ldr	r3, [r0, #40]	; 0x28
    6c16:	434b      	muls	r3, r1
    6c18:	fbb3 f1f2 	udiv	r1, r3, r2
    6c1c:	6281      	str	r1, [r0, #40]	; 0x28
    6c1e:	bd30      	pop	{r4, r5, pc}
    6c20:	01e84800 	.word	0x01e84800
    6c24:	02625a00 	.word	0x02625a00

00006c28 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    6c28:	b570      	push	{r4, r5, r6, lr}
    6c2a:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    6c2e:	b28b      	uxth	r3, r1
    6c30:	7ac5      	ldrb	r5, [r0, #11]
    6c32:	ea83 0102 	eor.w	r1, r3, r2
    6c36:	2200      	movs	r2, #0
    6c38:	b2cc      	uxtb	r4, r1
    6c3a:	0a09      	lsrs	r1, r1, #8
    6c3c:	fa94 f4a4 	rbit	r4, r4
    6c40:	fa91 f1a1 	rbit	r1, r1
    6c44:	0e24      	lsrs	r4, r4, #24
    6c46:	0e09      	lsrs	r1, r1, #24
    6c48:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    6c4c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    6c50:	1c52      	adds	r2, r2, #1
    6c52:	4419      	add	r1, r3
    6c54:	b2d2      	uxtb	r2, r2
    6c56:	b289      	uxth	r1, r1
    6c58:	2a03      	cmp	r2, #3
    6c5a:	d3ed      	bcc.n	6c38 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    6c5c:	4059      	eors	r1, r3
    6c5e:	2225      	movs	r2, #37	; 0x25
    6c60:	fbb1 f3f2 	udiv	r3, r1, r2
    6c64:	fb02 1213 	mls	r2, r2, r3, r1
    6c68:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    6c6c:	f002 0607 	and.w	r6, r2, #7
    6c70:	785b      	ldrb	r3, [r3, #1]
    6c72:	2401      	movs	r4, #1
    6c74:	fa04 f606 	lsl.w	r6, r4, r6
    6c78:	4233      	tst	r3, r6
    6c7a:	d001      	beq.n	6c80 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    6c7c:	4610      	mov	r0, r2
    6c7e:	bd70      	pop	{r4, r5, r6, pc}
    6c80:	434d      	muls	r5, r1
    6c82:	0c29      	lsrs	r1, r5, #16
    6c84:	1c49      	adds	r1, r1, #1
    6c86:	b2c9      	uxtb	r1, r1
    6c88:	2200      	movs	r2, #0
    6c8a:	1885      	adds	r5, r0, r2
    6c8c:	79ab      	ldrb	r3, [r5, #6]
    6c8e:	428b      	cmp	r3, r1
    6c90:	d312      	bcc.n	6cb8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    6c92:	f895 5001 	ldrb.w	r5, [r5, #1]
    6c96:	2300      	movs	r3, #0
    6c98:	fa04 f603 	lsl.w	r6, r4, r3
    6c9c:	4235      	tst	r5, r6
    6c9e:	d001      	beq.n	6ca4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    6ca0:	1e49      	subs	r1, r1, #1
    6ca2:	b2c9      	uxtb	r1, r1
    6ca4:	b121      	cbz	r1, 6cb0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    6ca6:	1c5b      	adds	r3, r3, #1
    6ca8:	b2db      	uxtb	r3, r3
    6caa:	2b08      	cmp	r3, #8
    6cac:	d3f4      	bcc.n	6c98 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    6cae:	e005      	b.n	6cbc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    6cb0:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    6cb4:	b2c0      	uxtb	r0, r0
    6cb6:	bd70      	pop	{r4, r5, r6, pc}
    6cb8:	1ac9      	subs	r1, r1, r3
    6cba:	b2c9      	uxtb	r1, r1
    6cbc:	1c52      	adds	r2, r2, #1
    6cbe:	b2d2      	uxtb	r2, r2
    6cc0:	2a05      	cmp	r2, #5
    6cc2:	d3e2      	bcc.n	6c8a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    6cc4:	f240 110d 	movw	r1, #269	; 0x10d
    6cc8:	2046      	movs	r0, #70	; 0x46
    6cca:	f7fd ffd5 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cce:	0000      	movs	r0, r0
    6cd0:	b570      	push	{r4, r5, r6, lr}
    6cd2:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    6cd6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    6cda:	2401      	movs	r4, #1
    6cdc:	fb03 2101 	mla	r1, r3, r1, r2
    6ce0:	2225      	movs	r2, #37	; 0x25
    6ce2:	fbb1 f3f2 	udiv	r3, r1, r2
    6ce6:	fb02 1113 	mls	r1, r2, r3, r1
    6cea:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    6cee:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    6cf2:	f001 0307 	and.w	r3, r1, #7
    6cf6:	7d92      	ldrb	r2, [r2, #22]
    6cf8:	fa04 f303 	lsl.w	r3, r4, r3
    6cfc:	421a      	tst	r2, r3
    6cfe:	d003      	beq.n	6d08 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    6d00:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    6d04:	2000      	movs	r0, #0
    6d06:	bd70      	pop	{r4, r5, r6, pc}
    6d08:	f890 2020 	ldrb.w	r2, [r0, #32]
    6d0c:	fbb1 f3f2 	udiv	r3, r1, r2
    6d10:	fb02 1113 	mls	r1, r2, r3, r1
    6d14:	1c49      	adds	r1, r1, #1
    6d16:	b2c9      	uxtb	r1, r1
    6d18:	2300      	movs	r3, #0
    6d1a:	18c5      	adds	r5, r0, r3
    6d1c:	7eea      	ldrb	r2, [r5, #27]
    6d1e:	428a      	cmp	r2, r1
    6d20:	d311      	bcc.n	6d46 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    6d22:	f895 5016 	ldrb.w	r5, [r5, #22]
    6d26:	2200      	movs	r2, #0
    6d28:	fa04 f602 	lsl.w	r6, r4, r2
    6d2c:	4235      	tst	r5, r6
    6d2e:	d001      	beq.n	6d34 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    6d30:	1e49      	subs	r1, r1, #1
    6d32:	b2c9      	uxtb	r1, r1
    6d34:	b121      	cbz	r1, 6d40 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    6d36:	1c52      	adds	r2, r2, #1
    6d38:	b2d2      	uxtb	r2, r2
    6d3a:	2a08      	cmp	r2, #8
    6d3c:	d3f4      	bcc.n	6d28 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    6d3e:	e004      	b.n	6d4a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    6d40:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    6d44:	e7dc      	b.n	6d00 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    6d46:	1a89      	subs	r1, r1, r2
    6d48:	b2c9      	uxtb	r1, r1
    6d4a:	1c5b      	adds	r3, r3, #1
    6d4c:	b2db      	uxtb	r3, r3
    6d4e:	2b05      	cmp	r3, #5
    6d50:	d3e3      	bcc.n	6d1a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    6d52:	201f      	movs	r0, #31
    6d54:	bd70      	pop	{r4, r5, r6, pc}
	...

00006d58 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    6d58:	7841      	ldrb	r1, [r0, #1]
    6d5a:	b141      	cbz	r1, 6d6e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6d5c:	78c0      	ldrb	r0, [r0, #3]
    6d5e:	2819      	cmp	r0, #25
    6d60:	d203      	bcs.n	6d6a <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    6d62:	4a04      	ldr	r2, [pc, #16]	; (6d74 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    6d64:	5c10      	ldrb	r0, [r2, r0]
    6d66:	4288      	cmp	r0, r1
    6d68:	d101      	bne.n	6d6e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6d6a:	2001      	movs	r0, #1
    6d6c:	4770      	bx	lr
    6d6e:	2000      	movs	r0, #0
    6d70:	4770      	bx	lr
    6d72:	0000      	.short	0x0000
    6d74:	00010702 	.word	0x00010702

00006d78 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    6d78:	b50c      	push	{r2, r3, lr}
    6d7a:	a20b      	add	r2, pc, #44	; (adr r2, 6da8 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    6d7c:	e9d2 1200 	ldrd	r1, r2, [r2]
    6d80:	e9cd 1200 	strd	r1, r2, [sp]
    6d84:	7901      	ldrb	r1, [r0, #4]
    6d86:	7940      	ldrb	r0, [r0, #5]
    6d88:	f001 0207 	and.w	r2, r1, #7
    6d8c:	4669      	mov	r1, sp
    6d8e:	f81d 2002 	ldrb.w	r2, [sp, r2]
    6d92:	2a01      	cmp	r2, #1
    6d94:	d804      	bhi.n	6da0 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    6d96:	f000 0007 	and.w	r0, r0, #7
    6d9a:	5c08      	ldrb	r0, [r1, r0]
    6d9c:	2801      	cmp	r0, #1
    6d9e:	d901      	bls.n	6da4 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    6da0:	2000      	movs	r0, #0
    6da2:	bd0c      	pop	{r2, r3, pc}
    6da4:	2001      	movs	r0, #1
    6da6:	bd0c      	pop	{r2, r3, pc}
    6da8:	02010100 	.word	0x02010100
    6dac:	03020201 	.word	0x03020201

00006db0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    6db0:	b510      	push	{r4, lr}
    6db2:	2201      	movs	r2, #1
    6db4:	70c1      	strb	r1, [r0, #3]
    6db6:	2919      	cmp	r1, #25
    6db8:	d202      	bcs.n	6dc0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    6dba:	4a06      	ldr	r2, [pc, #24]	; (6dd4 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    6dbc:	5c52      	ldrb	r2, [r2, r1]
    6dbe:	e006      	b.n	6dce <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6dc0:	29ff      	cmp	r1, #255	; 0xff
    6dc2:	d004      	beq.n	6dce <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6dc4:	f240 31d5 	movw	r1, #981	; 0x3d5
    6dc8:	202a      	movs	r0, #42	; 0x2a
    6dca:	f7fd ff55 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dce:	7042      	strb	r2, [r0, #1]
    6dd0:	bd10      	pop	{r4, pc}
    6dd2:	0000      	.short	0x0000
    6dd4:	00010702 	.word	0x00010702

00006dd8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    6dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ddc:	ea5f 0900 	movs.w	r9, r0
    6de0:	d006      	beq.n	6df0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x18>
    6de2:	4d21      	ldr	r5, [pc, #132]	; (6e68 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x90>)
    6de4:	f105 0010 	add.w	r0, r5, #16
    6de8:	7b69      	ldrb	r1, [r5, #13]
    6dea:	4682      	mov	sl, r0
    6dec:	b119      	cbz	r1, 6df6 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x1e>
    6dee:	e00b      	b.n	6e08 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    6df0:	f240 3193 	movw	r1, #915	; 0x393
    6df4:	e005      	b.n	6e02 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2a>
    6df6:	2100      	movs	r1, #0
    6df8:	f007 fbb8 	bl	e56c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    6dfc:	b120      	cbz	r0, 6e08 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    6dfe:	f240 3196 	movw	r1, #918	; 0x396
    6e02:	202b      	movs	r0, #43	; 0x2b
    6e04:	f7fd ff38 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e08:	8a2e      	ldrh	r6, [r5, #16]
    6e0a:	2000      	movs	r0, #0
    6e0c:	f7fe f92c 	bl	5068 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6e10:	4f16      	ldr	r7, [pc, #88]	; (6e6c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x94>)
    6e12:	f8df 805c 	ldr.w	r8, [pc, #92]	; 6e70 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x98>
    6e16:	4604      	mov	r4, r0
    6e18:	6838      	ldr	r0, [r7, #0]
    6e1a:	b158      	cbz	r0, 6e34 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    6e1c:	8a28      	ldrh	r0, [r5, #16]
    6e1e:	42a0      	cmp	r0, r4
    6e20:	d308      	bcc.n	6e34 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    6e22:	1b00      	subs	r0, r0, r4
    6e24:	b2c0      	uxtb	r0, r0
    6e26:	2101      	movs	r1, #1
    6e28:	f006 fd90 	bl	d94c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6e2c:	b148      	cbz	r0, 6e42 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    6e2e:	4649      	mov	r1, r9
    6e30:	683a      	ldr	r2, [r7, #0]
    6e32:	e004      	b.n	6e3e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x66>
    6e34:	f8d8 2000 	ldr.w	r2, [r8]
    6e38:	b11a      	cbz	r2, 6e42 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    6e3a:	8a28      	ldrh	r0, [r5, #16]
    6e3c:	4649      	mov	r1, r9
    6e3e:	4790      	blx	r2
    6e40:	b968      	cbnz	r0, 6e5e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    6e42:	2100      	movs	r1, #0
    6e44:	4650      	mov	r0, sl
    6e46:	f007 fb91 	bl	e56c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    6e4a:	b910      	cbnz	r0, 6e52 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x7a>
    6e4c:	8a28      	ldrh	r0, [r5, #16]
    6e4e:	42b0      	cmp	r0, r6
    6e50:	d1e2      	bne.n	6e18 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x40>
    6e52:	4808      	ldr	r0, [pc, #32]	; (6e74 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x9c>)
    6e54:	6801      	ldr	r1, [r0, #0]
    6e56:	b129      	cbz	r1, 6e64 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    6e58:	4648      	mov	r0, r9
    6e5a:	4788      	blx	r1
    6e5c:	b110      	cbz	r0, 6e64 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    6e5e:	2001      	movs	r0, #1
    6e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e64:	2000      	movs	r0, #0
    6e66:	e7fb      	b.n	6e60 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    6e68:	20000ed0 	.word	0x20000ed0
    6e6c:	20000228 	.word	0x20000228
    6e70:	2000022c 	.word	0x2000022c
    6e74:	20000234 	.word	0x20000234

00006e78 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI>:
    6e78:	b570      	push	{r4, r5, r6, lr}
    6e7a:	0005      	movs	r5, r0
    6e7c:	460c      	mov	r4, r1
    6e7e:	d02e      	beq.n	6ede <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    6e80:	4818      	ldr	r0, [pc, #96]	; (6ee4 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x6c>)
    6e82:	6802      	ldr	r2, [r0, #0]
    6e84:	b35a      	cbz	r2, 6ede <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    6e86:	4628      	mov	r0, r5
    6e88:	4790      	blx	r2
    6e8a:	b340      	cbz	r0, 6ede <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    6e8c:	7820      	ldrb	r0, [r4, #0]
    6e8e:	2811      	cmp	r0, #17
    6e90:	d002      	beq.n	6e98 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x20>
    6e92:	2814      	cmp	r0, #20
    6e94:	d003      	beq.n	6e9e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x26>
    6e96:	e020      	b.n	6eda <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6e98:	7920      	ldrb	r0, [r4, #4]
    6e9a:	b1f0      	cbz	r0, 6eda <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6e9c:	e00a      	b.n	6eb4 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    6e9e:	7920      	ldrb	r0, [r4, #4]
    6ea0:	b120      	cbz	r0, 6eac <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x34>
    6ea2:	4628      	mov	r0, r5
    6ea4:	f007 fd6b 	bl	e97e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    6ea8:	b120      	cbz	r0, 6eb4 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    6eaa:	e016      	b.n	6eda <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6eac:	490e      	ldr	r1, [pc, #56]	; (6ee8 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x70>)
    6eae:	2000      	movs	r0, #0
    6eb0:	7348      	strb	r0, [r1, #13]
    6eb2:	e012      	b.n	6eda <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6eb4:	88e4      	ldrh	r4, [r4, #6]
    6eb6:	2100      	movs	r1, #0
    6eb8:	4620      	mov	r0, r4
    6eba:	f006 fd47 	bl	d94c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6ebe:	b160      	cbz	r0, 6eda <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6ec0:	8800      	ldrh	r0, [r0, #0]
    6ec2:	f006 fec6 	bl	dc52 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6ec6:	2100      	movs	r1, #0
    6ec8:	4620      	mov	r0, r4
    6eca:	f7fe f96b 	bl	51a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6ece:	b120      	cbz	r0, 6eda <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    6ed0:	f44f 719a 	mov.w	r1, #308	; 0x134
    6ed4:	202b      	movs	r0, #43	; 0x2b
    6ed6:	f7fd fecf 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6eda:	2001      	movs	r0, #1
    6edc:	bd70      	pop	{r4, r5, r6, pc}
    6ede:	2000      	movs	r0, #0
    6ee0:	bd70      	pop	{r4, r5, r6, pc}
    6ee2:	0000      	.short	0x0000
    6ee4:	20000224 	.word	0x20000224
    6ee8:	20000ed0 	.word	0x20000ed0

00006eec <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    6eec:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ef0:	b087      	sub	sp, #28
    6ef2:	460c      	mov	r4, r1
    6ef4:	a902      	add	r1, sp, #8
    6ef6:	9807      	ldr	r0, [sp, #28]
    6ef8:	f006 ff6b 	bl	ddd2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6efc:	2800      	cmp	r0, #0
    6efe:	d17d      	bne.n	6ffc <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    6f00:	f8df 9120 	ldr.w	r9, [pc, #288]	; 7024 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x138>
    6f04:	f04f 0a01 	mov.w	sl, #1
    6f08:	4680      	mov	r8, r0
    6f0a:	9803      	ldr	r0, [sp, #12]
    6f0c:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    6f10:	2800      	cmp	r0, #0
    6f12:	d00c      	beq.n	6f2e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    6f14:	f8d9 2000 	ldr.w	r2, [r9]
    6f18:	b162      	cbz	r2, 6f34 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    6f1a:	4621      	mov	r1, r4
    6f1c:	9807      	ldr	r0, [sp, #28]
    6f1e:	4790      	blx	r2
    6f20:	b140      	cbz	r0, 6f34 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    6f22:	4620      	mov	r0, r4
    6f24:	f000 f91a 	bl	715c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe0>
    6f28:	2800      	cmp	r0, #0
    6f2a:	d1ee      	bne.n	6f0a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1e>
    6f2c:	2001      	movs	r0, #1
    6f2e:	b009      	add	sp, #36	; 0x24
    6f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f34:	9d03      	ldr	r5, [sp, #12]
    6f36:	f895 0134 	ldrb.w	r0, [r5, #308]	; 0x134
    6f3a:	3570      	adds	r5, #112	; 0x70
    6f3c:	b950      	cbnz	r0, 6f54 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    6f3e:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    6f42:	f88d 0004 	strb.w	r0, [sp, #4]
    6f46:	9801      	ldr	r0, [sp, #4]
    6f48:	9001      	str	r0, [sp, #4]
    6f4a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6f4e:	b108      	cbz	r0, 6f54 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    6f50:	2001      	movs	r0, #1
    6f52:	e000      	b.n	6f56 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    6f54:	2000      	movs	r0, #0
    6f56:	4683      	mov	fp, r0
    6f58:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    6f5c:	b1c0      	cbz	r0, 6f90 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    6f5e:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
    6f62:	0780      	lsls	r0, r0, #30
    6f64:	d514      	bpl.n	6f90 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    6f66:	f884 8001 	strb.w	r8, [r4, #1]
    6f6a:	f884 a000 	strb.w	sl, [r4]
    6f6e:	f884 8004 	strb.w	r8, [r4, #4]
    6f72:	9907      	ldr	r1, [sp, #28]
    6f74:	f8a4 1005 	strh.w	r1, [r4, #5]
    6f78:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
    6f7c:	71e1      	strb	r1, [r4, #7]
    6f7e:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
    6f82:	8121      	strh	r1, [r4, #8]
    6f84:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    6f88:	8161      	strh	r1, [r4, #10]
    6f8a:	f885 8045 	strb.w	r8, [r5, #69]	; 0x45
    6f8e:	e7c8      	b.n	6f22 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6f90:	9807      	ldr	r0, [sp, #28]
    6f92:	f7fe faaf 	bl	54f4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6f96:	0007      	movs	r7, r0
    6f98:	d00d      	beq.n	6fb6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xca>
    6f9a:	f006 faf0 	bl	d57e <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    6f9e:	0006      	movs	r6, r0
    6fa0:	d015      	beq.n	6fce <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xe2>
    6fa2:	f884 8001 	strb.w	r8, [r4, #1]
    6fa6:	200d      	movs	r0, #13
    6fa8:	7020      	strb	r0, [r4, #0]
    6faa:	9807      	ldr	r0, [sp, #28]
    6fac:	80e0      	strh	r0, [r4, #6]
    6fae:	8126      	strh	r6, [r4, #8]
    6fb0:	f884 a004 	strb.w	sl, [r4, #4]
    6fb4:	e007      	b.n	6fc6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xda>
    6fb6:	f240 213a 	movw	r1, #570	; 0x23a
    6fba:	e02d      	b.n	7018 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    6fbc:	2100      	movs	r1, #0
    6fbe:	4638      	mov	r0, r7
    6fc0:	460a      	mov	r2, r1
    6fc2:	f006 fbf2 	bl	d7aa <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6fc6:	1e76      	subs	r6, r6, #1
    6fc8:	b2b6      	uxth	r6, r6
    6fca:	d2f7      	bcs.n	6fbc <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd0>
    6fcc:	e7a9      	b.n	6f22 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6fce:	9807      	ldr	r0, [sp, #28]
    6fd0:	f7fe fa7a 	bl	54c8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6fd4:	b1f0      	cbz	r0, 7014 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x128>
    6fd6:	f1bb 0f00 	cmp.w	fp, #0
    6fda:	d020      	beq.n	701e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    6fdc:	f006 fa04 	bl	d3e8 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6fe0:	b160      	cbz	r0, 6ffc <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    6fe2:	9807      	ldr	r0, [sp, #28]
    6fe4:	f006 fe35 	bl	dc52 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6fe8:	2100      	movs	r1, #0
    6fea:	9807      	ldr	r0, [sp, #28]
    6fec:	f7fe f8da 	bl	51a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6ff0:	f884 8001 	strb.w	r8, [r4, #1]
    6ff4:	210a      	movs	r1, #10
    6ff6:	4640      	mov	r0, r8
    6ff8:	7021      	strb	r1, [r4, #0]
    6ffa:	e000      	b.n	6ffe <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x112>
    6ffc:	e00f      	b.n	701e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    6ffe:	f884 8004 	strb.w	r8, [r4, #4]
    7002:	9907      	ldr	r1, [sp, #28]
    7004:	f8a4 1005 	strh.w	r1, [r4, #5]
    7008:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    700c:	71e1      	strb	r1, [r4, #7]
    700e:	3524      	adds	r5, #36	; 0x24
    7010:	7028      	strb	r0, [r5, #0]
    7012:	e786      	b.n	6f22 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    7014:	f44f 7116 	mov.w	r1, #600	; 0x258
    7018:	202b      	movs	r0, #43	; 0x2b
    701a:	f7fd fe2d 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    701e:	2000      	movs	r0, #0
    7020:	e785      	b.n	6f2e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    7022:	0000      	.short	0x0000
    7024:	20000230 	.word	0x20000230

00007028 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    7028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    702c:	4c12      	ldr	r4, [pc, #72]	; (7078 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    702e:	4607      	mov	r7, r0
    7030:	460e      	mov	r6, r1
    7032:	7de0      	ldrb	r0, [r4, #23]
    7034:	b110      	cbz	r0, 703c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    7036:	8b20      	ldrh	r0, [r4, #24]
    7038:	2800      	cmp	r0, #0
    703a:	d012      	beq.n	7062 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    703c:	480e      	ldr	r0, [pc, #56]	; (7078 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    703e:	300e      	adds	r0, #14
    7040:	4680      	mov	r8, r0
    7042:	f007 fa3d 	bl	e4c0 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    7046:	b9a8      	cbnz	r0, 7074 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    7048:	89e5      	ldrh	r5, [r4, #14]
    704a:	89e0      	ldrh	r0, [r4, #14]
    704c:	4632      	mov	r2, r6
    704e:	4639      	mov	r1, r7
    7050:	f007 fa45 	bl	e4de <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x18>
    7054:	b138      	cbz	r0, 7066 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    7056:	7de0      	ldrb	r0, [r4, #23]
    7058:	b110      	cbz	r0, 7060 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    705a:	8b20      	ldrh	r0, [r4, #24]
    705c:	1e40      	subs	r0, r0, #1
    705e:	8320      	strh	r0, [r4, #24]
    7060:	2001      	movs	r0, #1
    7062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7066:	4640      	mov	r0, r8
    7068:	f007 fa2a 	bl	e4c0 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    706c:	b910      	cbnz	r0, 7074 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    706e:	89e0      	ldrh	r0, [r4, #14]
    7070:	42a8      	cmp	r0, r5
    7072:	d1ea      	bne.n	704a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    7074:	2000      	movs	r0, #0
    7076:	e7f4      	b.n	7062 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    7078:	20000ed0 	.word	0x20000ed0

0000707c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    707c:	b510      	push	{r4, lr}
    707e:	7901      	ldrb	r1, [r0, #4]
    7080:	b119      	cbz	r1, 708a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    7082:	2901      	cmp	r1, #1
    7084:	d006      	beq.n	7094 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    7086:	2000      	movs	r0, #0
    7088:	bd10      	pop	{r4, pc}
    708a:	8842      	ldrh	r2, [r0, #2]
    708c:	6883      	ldr	r3, [r0, #8]
    708e:	8800      	ldrh	r0, [r0, #0]
    7090:	2102      	movs	r1, #2
    7092:	e003      	b.n	709c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    7094:	8842      	ldrh	r2, [r0, #2]
    7096:	6883      	ldr	r3, [r0, #8]
    7098:	8800      	ldrh	r0, [r0, #0]
    709a:	2101      	movs	r1, #1
    709c:	f000 f808 	bl	70b0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
    70a0:	b910      	cbnz	r0, 70a8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2c>
    70a2:	4902      	ldr	r1, [pc, #8]	; (70ac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>)
    70a4:	2001      	movs	r0, #1
    70a6:	7008      	strb	r0, [r1, #0]
    70a8:	2001      	movs	r0, #1
    70aa:	bd10      	pop	{r4, pc}
    70ac:	20000ed0 	.word	0x20000ed0
    70b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    70b4:	468a      	mov	sl, r1
    70b6:	4699      	mov	r9, r3
    70b8:	4615      	mov	r5, r2
    70ba:	4604      	mov	r4, r0
    70bc:	a901      	add	r1, sp, #4
    70be:	f006 fe88 	bl	ddd2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    70c2:	bbe0      	cbnz	r0, 713e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc2>
    70c4:	9f02      	ldr	r7, [sp, #8]
    70c6:	f04f 0800 	mov.w	r8, #0
    70ca:	3770      	adds	r7, #112	; 0x70
    70cc:	b18d      	cbz	r5, 70f2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x76>
    70ce:	4620      	mov	r0, r4
    70d0:	f7fe fa10 	bl	54f4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    70d4:	0004      	movs	r4, r0
    70d6:	d00f      	beq.n	70f8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x7c>
    70d8:	4629      	mov	r1, r5
    70da:	f006 fa8f 	bl	d5fc <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    70de:	0006      	movs	r6, r0
    70e0:	d003      	beq.n	70ea <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    70e2:	481d      	ldr	r0, [pc, #116]	; (7158 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xdc>)
    70e4:	8880      	ldrh	r0, [r0, #4]
    70e6:	42a8      	cmp	r0, r5
    70e8:	d208      	bcs.n	70fc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x80>
    70ea:	2000      	movs	r0, #0
    70ec:	b004      	add	sp, #16
    70ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    70f2:	2001      	movs	r0, #1
    70f4:	7538      	strb	r0, [r7, #20]
    70f6:	e029      	b.n	714c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    70f8:	2189      	movs	r1, #137	; 0x89
    70fa:	e02a      	b.n	7152 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd6>
    70fc:	4620      	mov	r0, r4
    70fe:	4631      	mov	r1, r6
    7100:	aa03      	add	r2, sp, #12
    7102:	f006 fa74 	bl	d5ee <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    7106:	9803      	ldr	r0, [sp, #12]
    7108:	f8a0 8000 	strh.w	r8, [r0]
    710c:	f880 8002 	strb.w	r8, [r0, #2]
    7110:	7d39      	ldrb	r1, [r7, #20]
    7112:	b109      	cbz	r1, 7118 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x9c>
    7114:	f04f 0a02 	mov.w	sl, #2
    7118:	4651      	mov	r1, sl
    711a:	f007 f952 	bl	e3c2 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    711e:	4631      	mov	r1, r6
    7120:	2603      	movs	r6, #3
    7122:	4620      	mov	r0, r4
    7124:	464a      	mov	r2, r9
    7126:	462b      	mov	r3, r5
    7128:	9600      	str	r6, [sp, #0]
    712a:	f006 f946 	bl	d3ba <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    712e:	4620      	mov	r0, r4
    7130:	4629      	mov	r1, r5
    7132:	f006 fa00 	bl	d536 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    7136:	b158      	cbz	r0, 7150 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd4>
    7138:	4644      	mov	r4, r8
    713a:	a801      	add	r0, sp, #4
    713c:	e000      	b.n	7140 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc4>
    713e:	e005      	b.n	714c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    7140:	f007 f9c1 	bl	e4c6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    7144:	9802      	ldr	r0, [sp, #8]
    7146:	f8a0 40fa 	strh.w	r4, [r0, #250]	; 0xfa
    714a:	753c      	strb	r4, [r7, #20]
    714c:	2001      	movs	r0, #1
    714e:	e7cd      	b.n	70ec <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x70>
    7150:	219f      	movs	r1, #159	; 0x9f
    7152:	202b      	movs	r0, #43	; 0x2b
    7154:	f7fd fd90 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7158:	20000ed0 	.word	0x20000ed0
    715c:	b510      	push	{r4, lr}
    715e:	492c      	ldr	r1, [pc, #176]	; (7210 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x194>)
    7160:	b086      	sub	sp, #24
    7162:	7d8a      	ldrb	r2, [r1, #22]
    7164:	7801      	ldrb	r1, [r0, #0]
    7166:	07d3      	lsls	r3, r2, #31
    7168:	d101      	bne.n	716e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf2>
    716a:	2919      	cmp	r1, #25
    716c:	d004      	beq.n	7178 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xfc>
    716e:	2918      	cmp	r1, #24
    7170:	d01e      	beq.n	71b0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x134>
    7172:	2912      	cmp	r1, #18
    7174:	d045      	beq.n	7202 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x186>
    7176:	e049      	b.n	720c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    7178:	8880      	ldrh	r0, [r0, #4]
    717a:	f8ad 0000 	strh.w	r0, [sp]
    717e:	a902      	add	r1, sp, #8
    7180:	f006 fe27 	bl	ddd2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7184:	b108      	cbz	r0, 718a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x10e>
    7186:	2158      	movs	r1, #88	; 0x58
    7188:	e035      	b.n	71f6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    718a:	9803      	ldr	r0, [sp, #12]
    718c:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    7190:	f88d 1002 	strb.w	r1, [sp, #2]
    7194:	7841      	ldrb	r1, [r0, #1]
    7196:	f88d 1003 	strb.w	r1, [sp, #3]
    719a:	8840      	ldrh	r0, [r0, #2]
    719c:	f8ad 0004 	strh.w	r0, [sp, #4]
    71a0:	2102      	movs	r1, #2
    71a2:	4668      	mov	r0, sp
    71a4:	f008 fe81 	bl	feaa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    71a8:	b340      	cbz	r0, 71fc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    71aa:	f240 114d 	movw	r1, #333	; 0x14d
    71ae:	e022      	b.n	71f6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    71b0:	0791      	lsls	r1, r2, #30
    71b2:	d42b      	bmi.n	720c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    71b4:	8884      	ldrh	r4, [r0, #4]
    71b6:	a903      	add	r1, sp, #12
    71b8:	4620      	mov	r0, r4
    71ba:	f008 fc95 	bl	fae8 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    71be:	b110      	cbz	r0, 71c6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14a>
    71c0:	f44f 71aa 	mov.w	r1, #340	; 0x154
    71c4:	e017      	b.n	71f6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    71c6:	f8ad 4000 	strh.w	r4, [sp]
    71ca:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    71ce:	f8ad 0002 	strh.w	r0, [sp, #2]
    71d2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    71d6:	f8ad 0004 	strh.w	r0, [sp, #4]
    71da:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    71de:	f8ad 0006 	strh.w	r0, [sp, #6]
    71e2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    71e6:	f8ad 0008 	strh.w	r0, [sp, #8]
    71ea:	4668      	mov	r0, sp
    71ec:	f008 fcfa 	bl	fbe4 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    71f0:	b120      	cbz	r0, 71fc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    71f2:	f240 115d 	movw	r1, #349	; 0x15d
    71f6:	202b      	movs	r0, #43	; 0x2b
    71f8:	f7fd fd3e 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    71fc:	2001      	movs	r0, #1
    71fe:	b006      	add	sp, #24
    7200:	bd10      	pop	{r4, pc}
    7202:	0751      	lsls	r1, r2, #29
    7204:	d402      	bmi.n	720c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    7206:	7b80      	ldrb	r0, [r0, #14]
    7208:	07c0      	lsls	r0, r0, #31
    720a:	d0f7      	beq.n	71fc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    720c:	2000      	movs	r0, #0
    720e:	e7f6      	b.n	71fe <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x182>
    7210:	20000ed0 	.word	0x20000ed0

00007214 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    7214:	b5f0      	push	{r4, r5, r6, r7, lr}
    7216:	f06f 021f 	mvn.w	r2, #31
    721a:	0c01      	lsrs	r1, r0, #16
    721c:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    7220:	251f      	movs	r5, #31
    7222:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    7226:	3854      	subs	r0, #84	; 0x54
    7228:	d00d      	beq.n	7246 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    722a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    722e:	3855      	subs	r0, #85	; 0x55
    7230:	d009      	beq.n	7246 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7232:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    7236:	38aa      	subs	r0, #170	; 0xaa
    7238:	d005      	beq.n	7246 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    723a:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    723e:	38aa      	subs	r0, #170	; 0xaa
    7240:	d001      	beq.n	7246 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7242:	2001      	movs	r0, #1
    7244:	e000      	b.n	7248 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    7246:	2000      	movs	r0, #0
    7248:	2200      	movs	r2, #0
    724a:	4613      	mov	r3, r2
    724c:	ea4f 0402 	mov.w	r4, r2
    7250:	ea82 0701 	eor.w	r7, r2, r1
    7254:	43ff      	mvns	r7, r7
    7256:	431f      	orrs	r7, r3
    7258:	1c7f      	adds	r7, r7, #1
    725a:	d00f      	beq.n	727c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    725c:	f006 0701 	and.w	r7, r6, #1
    7260:	0852      	lsrs	r2, r2, #1
    7262:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    7266:	f005 0701 	and.w	r7, r5, #1
    726a:	085b      	lsrs	r3, r3, #1
    726c:	0876      	lsrs	r6, r6, #1
    726e:	086d      	lsrs	r5, r5, #1
    7270:	1c64      	adds	r4, r4, #1
    7272:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    7276:	2c16      	cmp	r4, #22
    7278:	d3ea      	bcc.n	7250 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    727a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    727c:	2000      	movs	r0, #0
    727e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007280 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    7280:	b570      	push	{r4, r5, r6, lr}
    7282:	4604      	mov	r4, r0
    7284:	7c00      	ldrb	r0, [r0, #16]
    7286:	b300      	cbz	r0, 72ca <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    7288:	2802      	cmp	r0, #2
    728a:	d01e      	beq.n	72ca <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    728c:	f05f 0001 	movs.w	r0, #1
    7290:	f104 0149 	add.w	r1, r4, #73	; 0x49
    7294:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    7298:	460d      	mov	r5, r1
    729a:	b1c0      	cbz	r0, 72ce <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    729c:	7de0      	ldrb	r0, [r4, #23]
    729e:	b1f0      	cbz	r0, 72de <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    72a0:	f8d4 0011 	ldr.w	r0, [r4, #17]
    72a4:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    72a8:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    72ac:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    72b0:	7c20      	ldrb	r0, [r4, #16]
    72b2:	f007 fac7 	bl	e844 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    72b6:	7620      	strb	r0, [r4, #24]
    72b8:	2008      	movs	r0, #8
    72ba:	7660      	strb	r0, [r4, #25]
    72bc:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    72c0:	4629      	mov	r1, r5
    72c2:	f007 faab 	bl	e81c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    72c6:	b9a8      	cbnz	r0, 72f4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    72c8:	e00e      	b.n	72e8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    72ca:	2000      	movs	r0, #0
    72cc:	e7e0      	b.n	7290 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    72ce:	2000      	movs	r0, #0
    72d0:	f7fe fbd2 	bl	5a78 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    72d4:	2800      	cmp	r0, #0
    72d6:	d1eb      	bne.n	72b0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    72d8:	f240 41aa 	movw	r1, #1194	; 0x4aa
    72dc:	e001      	b.n	72e2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    72de:	f240 41ae 	movw	r1, #1198	; 0x4ae
    72e2:	202d      	movs	r0, #45	; 0x2d
    72e4:	f7fd fcc8 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72e8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    72ec:	4629      	mov	r1, r5
    72ee:	f007 fa9e 	bl	e82e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    72f2:	b100      	cbz	r0, 72f6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    72f4:	2001      	movs	r0, #1
    72f6:	76a0      	strb	r0, [r4, #26]
    72f8:	7e20      	ldrb	r0, [r4, #24]
    72fa:	b910      	cbnz	r0, 7302 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x82>
    72fc:	78a0      	ldrb	r0, [r4, #2]
    72fe:	0740      	lsls	r0, r0, #29
    7300:	d506      	bpl.n	7310 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x90>
    7302:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    7306:	f104 0150 	add.w	r1, r4, #80	; 0x50
    730a:	f006 fd1f 	bl	dd4c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    730e:	7660      	strb	r0, [r4, #25]
    7310:	2500      	movs	r5, #0
    7312:	6425      	str	r5, [r4, #64]	; 0x40
    7314:	f005 f991 	bl	c63a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7318:	6460      	str	r0, [r4, #68]	; 0x44
    731a:	2100      	movs	r1, #0
    731c:	4620      	mov	r0, r4
    731e:	f007 fbb0 	bl	ea82 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    7322:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    7326:	78a0      	ldrb	r0, [r4, #2]
    7328:	0740      	lsls	r0, r0, #29
    732a:	d508      	bpl.n	733e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    732c:	7e20      	ldrb	r0, [r4, #24]
    732e:	2800      	cmp	r0, #0
    7330:	d005      	beq.n	733e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    7332:	4620      	mov	r0, r4
    7334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7338:	2100      	movs	r1, #0
    733a:	f000 bdff 	b.w	7f3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    733e:	bd70      	pop	{r4, r5, r6, pc}

00007340 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    7340:	b508      	push	{r3, lr}
    7342:	f890 2094 	ldrb.w	r2, [r0, #148]	; 0x94
    7346:	f88d 2000 	strb.w	r2, [sp]
    734a:	9a00      	ldr	r2, [sp, #0]
    734c:	9200      	str	r2, [sp, #0]
    734e:	f89d 3000 	ldrb.w	r3, [sp]
    7352:	2200      	movs	r2, #0
    7354:	b163      	cbz	r3, 7370 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    7356:	704a      	strb	r2, [r1, #1]
    7358:	2317      	movs	r3, #23
    735a:	700b      	strb	r3, [r1, #0]
    735c:	f850 3f95 	ldr.w	r3, [r0, #149]!
    7360:	604b      	str	r3, [r1, #4]
    7362:	6843      	ldr	r3, [r0, #4]
    7364:	608b      	str	r3, [r1, #8]
    7366:	7a03      	ldrb	r3, [r0, #8]
    7368:	730b      	strb	r3, [r1, #12]
    736a:	f800 2c01 	strb.w	r2, [r0, #-1]
    736e:	e03b      	b.n	73e8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    7370:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    7374:	f88d 3000 	strb.w	r3, [sp]
    7378:	9b00      	ldr	r3, [sp, #0]
    737a:	9300      	str	r3, [sp, #0]
    737c:	f89d 3000 	ldrb.w	r3, [sp]
    7380:	b143      	cbz	r3, 7394 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    7382:	704a      	strb	r2, [r1, #1]
    7384:	2305      	movs	r3, #5
    7386:	700b      	strb	r3, [r1, #0]
    7388:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    738c:	604b      	str	r3, [r1, #4]
    738e:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
    7392:	e029      	b.n	73e8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    7394:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    7398:	f88d 3000 	strb.w	r3, [sp]
    739c:	9b00      	ldr	r3, [sp, #0]
    739e:	9300      	str	r3, [sp, #0]
    73a0:	f89d 3000 	ldrb.w	r3, [sp]
    73a4:	b11b      	cbz	r3, 73ae <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    73a6:	bf00      	nop
    73a8:	f007 fb42 	bl	ea30 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    73ac:	e01c      	b.n	73e8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    73ae:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    73b2:	f88d 3000 	strb.w	r3, [sp]
    73b6:	9b00      	ldr	r3, [sp, #0]
    73b8:	9300      	str	r3, [sp, #0]
    73ba:	f89d 3000 	ldrb.w	r3, [sp]
    73be:	b1ab      	cbz	r3, 73ec <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    73c0:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    73c4:	f88d 3000 	strb.w	r3, [sp]
    73c8:	9b00      	ldr	r3, [sp, #0]
    73ca:	9300      	str	r3, [sp, #0]
    73cc:	f89d 3000 	ldrb.w	r3, [sp]
    73d0:	2b00      	cmp	r3, #0
    73d2:	d1e9      	bne.n	73a8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    73d4:	704a      	strb	r2, [r1, #1]
    73d6:	2314      	movs	r3, #20
    73d8:	700b      	strb	r3, [r1, #0]
    73da:	f850 3f88 	ldr.w	r3, [r0, #136]!
    73de:	604b      	str	r3, [r1, #4]
    73e0:	8883      	ldrh	r3, [r0, #4]
    73e2:	810b      	strh	r3, [r1, #8]
    73e4:	f800 2c02 	strb.w	r2, [r0, #-2]
    73e8:	2001      	movs	r0, #1
    73ea:	bd08      	pop	{r3, pc}
    73ec:	2000      	movs	r0, #0
    73ee:	bd08      	pop	{r3, pc}

000073f0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    73f0:	b530      	push	{r4, r5, lr}
    73f2:	460c      	mov	r4, r1
    73f4:	b08d      	sub	sp, #52	; 0x34
    73f6:	4605      	mov	r5, r0
    73f8:	4601      	mov	r1, r0
    73fa:	2220      	movs	r2, #32
    73fc:	a802      	add	r0, sp, #8
    73fe:	f005 fa91 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7402:	a80a      	add	r0, sp, #40	; 0x28
    7404:	f007 fbea 	bl	ebdc <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    7408:	7aa0      	ldrb	r0, [r4, #10]
    740a:	f88d 0018 	strb.w	r0, [sp, #24]
    740e:	7820      	ldrb	r0, [r4, #0]
    7410:	f88d 0008 	strb.w	r0, [sp, #8]
    7414:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    7418:	f8ad 0000 	strh.w	r0, [sp]
    741c:	f89d 0000 	ldrb.w	r0, [sp]
    7420:	f000 0101 	and.w	r1, r0, #1
    7424:	f3c0 0240 	ubfx	r2, r0, #1, #1
    7428:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    742c:	f3c0 0280 	ubfx	r2, r0, #2, #1
    7430:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    7434:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    7438:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    743c:	f3c0 1200 	ubfx	r2, r0, #4, #1
    7440:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    7444:	f3c0 1240 	ubfx	r2, r0, #5, #1
    7448:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    744c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7450:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    7454:	f8ad 000a 	strh.w	r0, [sp, #10]
    7458:	7d20      	ldrb	r0, [r4, #20]
    745a:	2801      	cmp	r0, #1
    745c:	d006      	beq.n	746c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    745e:	2802      	cmp	r0, #2
    7460:	d004      	beq.n	746c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    7462:	f240 2175 	movw	r1, #629	; 0x275
    7466:	2006      	movs	r0, #6
    7468:	f7fd fc06 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    746c:	f88d 000c 	strb.w	r0, [sp, #12]
    7470:	7a61      	ldrb	r1, [r4, #9]
    7472:	a80a      	add	r0, sp, #40	; 0x28
    7474:	f007 fb99 	bl	ebaa <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    7478:	7d20      	ldrb	r0, [r4, #20]
    747a:	2101      	movs	r1, #1
    747c:	2802      	cmp	r0, #2
    747e:	d102      	bne.n	7486 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    7480:	7d60      	ldrb	r0, [r4, #21]
    7482:	1c40      	adds	r0, r0, #1
    7484:	b2c1      	uxtb	r1, r0
    7486:	7ea0      	ldrb	r0, [r4, #26]
    7488:	1c40      	adds	r0, r0, #1
    748a:	b2c2      	uxtb	r2, r0
    748c:	a80a      	add	r0, sp, #40	; 0x28
    748e:	f007 fb53 	bl	eb38 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    7492:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    7496:	0700      	lsls	r0, r0, #28
    7498:	d501      	bpl.n	749e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    749a:	2000      	movs	r0, #0
    749c:	e020      	b.n	74e0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    749e:	a80a      	add	r0, sp, #40	; 0x28
    74a0:	f007 fb5c 	bl	eb5c <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    74a4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    74a8:	2228      	movs	r2, #40	; 0x28
    74aa:	f000 fded 	bl	8088 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    74ae:	f240 2171 	movw	r1, #625	; 0x271
    74b2:	f200 20d5 	addw	r0, r0, #725	; 0x2d5
    74b6:	fbb0 f0f1 	udiv	r0, r0, r1
    74ba:	4348      	muls	r0, r1
    74bc:	f8d4 1002 	ldr.w	r1, [r4, #2]
    74c0:	f240 2371 	movw	r3, #625	; 0x271
    74c4:	0a0a      	lsrs	r2, r1, #8
    74c6:	f240 2171 	movw	r1, #625	; 0x271
    74ca:	434a      	muls	r2, r1
    74cc:	f8d4 1005 	ldr.w	r1, [r4, #5]
    74d0:	0a09      	lsrs	r1, r1, #8
    74d2:	4359      	muls	r1, r3
    74d4:	4290      	cmp	r0, r2
    74d6:	d801      	bhi.n	74dc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    74d8:	9204      	str	r2, [sp, #16]
    74da:	e004      	b.n	74e6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    74dc:	4288      	cmp	r0, r1
    74de:	d801      	bhi.n	74e4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    74e0:	9004      	str	r0, [sp, #16]
    74e2:	e000      	b.n	74e6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    74e4:	9104      	str	r1, [sp, #16]
    74e6:	7ca0      	ldrb	r0, [r4, #18]
    74e8:	f88d 0017 	strb.w	r0, [sp, #23]
    74ec:	7e20      	ldrb	r0, [r4, #24]
    74ee:	2801      	cmp	r0, #1
    74f0:	d000      	beq.n	74f4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    74f2:	2000      	movs	r0, #0
    74f4:	f88d 0014 	strb.w	r0, [sp, #20]
    74f8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    74fa:	f006 fae5 	bl	dac8 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    74fe:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    7500:	f006 fb85 	bl	dc0e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    7504:	2220      	movs	r2, #32
    7506:	a902      	add	r1, sp, #8
    7508:	4628      	mov	r0, r5
    750a:	f005 fa0b 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    750e:	980a      	ldr	r0, [sp, #40]	; 0x28
    7510:	6228      	str	r0, [r5, #32]
    7512:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    7516:	84a8      	strh	r0, [r5, #36]	; 0x24
    7518:	7ae0      	ldrb	r0, [r4, #11]
    751a:	b168      	cbz	r0, 7538 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    751c:	2802      	cmp	r0, #2
    751e:	d00b      	beq.n	7538 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    7520:	f05f 0001 	movs.w	r0, #1
    7524:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    7528:	68e0      	ldr	r0, [r4, #12]
    752a:	6528      	str	r0, [r5, #80]	; 0x50
    752c:	8a20      	ldrh	r0, [r4, #16]
    752e:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    7532:	b00d      	add	sp, #52	; 0x34
    7534:	2000      	movs	r0, #0
    7536:	bd30      	pop	{r4, r5, pc}
    7538:	2000      	movs	r0, #0
    753a:	e7f3      	b.n	7524 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

0000753c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    753c:	4a0a      	ldr	r2, [pc, #40]	; (7568 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    753e:	b510      	push	{r4, lr}
    7540:	2100      	movs	r1, #0
    7542:	7011      	strb	r1, [r2, #0]
    7544:	4c09      	ldr	r4, [pc, #36]	; (756c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    7546:	6060      	str	r0, [r4, #4]
    7548:	f000 f822 	bl	7590 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    754c:	b110      	cbz	r0, 7554 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    754e:	f240 312a 	movw	r1, #810	; 0x32a
    7552:	e004      	b.n	755e <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    7554:	68a0      	ldr	r0, [r4, #8]
    7556:	2800      	cmp	r0, #0
    7558:	d104      	bne.n	7564 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    755a:	f240 312d 	movw	r1, #813	; 0x32d
    755e:	202d      	movs	r0, #45	; 0x2d
    7560:	f7fd fb8a 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7564:	bd10      	pop	{r4, pc}
    7566:	0000      	.short	0x0000
    7568:	20000eec 	.word	0x20000eec
    756c:	200000ec 	.word	0x200000ec

00007570 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    7570:	4902      	ldr	r1, [pc, #8]	; (757c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    7572:	4801      	ldr	r0, [pc, #4]	; (7578 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    7574:	6088      	str	r0, [r1, #8]
    7576:	4770      	bx	lr
    7578:	00008070 	.word	0x00008070
    757c:	200000ec 	.word	0x200000ec

00007580 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    7580:	4902      	ldr	r1, [pc, #8]	; (758c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    7582:	6008      	str	r0, [r1, #0]
    7584:	6889      	ldr	r1, [r1, #8]
    7586:	6809      	ldr	r1, [r1, #0]
    7588:	4708      	bx	r1
    758a:	0000      	.short	0x0000
    758c:	200000ec 	.word	0x200000ec

00007590 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    7590:	4808      	ldr	r0, [pc, #32]	; (75b4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    7592:	b510      	push	{r4, lr}
    7594:	7800      	ldrb	r0, [r0, #0]
    7596:	b110      	cbz	r0, 759e <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    7598:	240c      	movs	r4, #12
    759a:	4620      	mov	r0, r4
    759c:	bd10      	pop	{r4, pc}
    759e:	2400      	movs	r4, #0
    75a0:	2218      	movs	r2, #24
    75a2:	4621      	mov	r1, r4
    75a4:	4803      	ldr	r0, [pc, #12]	; (75b4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    75a6:	f005 fa37 	bl	ca18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    75aa:	f004 f937 	bl	b81c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    75ae:	f003 ff19 	bl	b3e4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    75b2:	e7f2      	b.n	759a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    75b4:	20000eec 	.word	0x20000eec

000075b8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    75b8:	4904      	ldr	r1, [pc, #16]	; (75cc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    75ba:	b510      	push	{r4, lr}
    75bc:	7809      	ldrb	r1, [r1, #0]
    75be:	2901      	cmp	r1, #1
    75c0:	d101      	bne.n	75c6 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    75c2:	f000 fb83 	bl	7ccc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>
    75c6:	2000      	movs	r0, #0
    75c8:	bd10      	pop	{r4, pc}
    75ca:	0000      	.short	0x0000
    75cc:	20000eec 	.word	0x20000eec

000075d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    75d0:	4902      	ldr	r1, [pc, #8]	; (75dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    75d2:	4801      	ldr	r0, [pc, #4]	; (75d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    75d4:	6008      	str	r0, [r1, #0]
    75d6:	4770      	bx	lr
    75d8:	00007e19 	.word	0x00007e19
    75dc:	200000f8 	.word	0x200000f8
    75e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75e4:	000f      	movs	r7, r1
    75e6:	4604      	mov	r4, r0
    75e8:	d023      	beq.n	7632 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    75ea:	f104 0020 	add.w	r0, r4, #32
    75ee:	4605      	mov	r5, r0
    75f0:	f007 fadd 	bl	ebae <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    75f4:	b9b0      	cbnz	r0, 7624 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    75f6:	78a0      	ldrb	r0, [r4, #2]
    75f8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    75fc:	b350      	cbz	r0, 7654 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    75fe:	4628      	mov	r0, r5
    7600:	f007 faac 	bl	eb5c <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7604:	4606      	mov	r6, r0
    7606:	4628      	mov	r0, r5
    7608:	f007 fad1 	bl	ebae <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    760c:	1a30      	subs	r0, r6, r0
    760e:	b2c0      	uxtb	r0, r0
    7610:	f007 fb22 	bl	ec58 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    7614:	4601      	mov	r1, r0
    7616:	4835      	ldr	r0, [pc, #212]	; (76ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    7618:	6842      	ldr	r2, [r0, #4]
    761a:	4411      	add	r1, r2
    761c:	6041      	str	r1, [r0, #4]
    761e:	4628      	mov	r0, r5
    7620:	f007 fae3 	bl	ebea <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7624:	4628      	mov	r0, r5
    7626:	f007 faa5 	bl	eb74 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    762a:	4601      	mov	r1, r0
    762c:	4620      	mov	r0, r4
    762e:	f007 fa64 	bl	eafa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    7632:	4d2f      	ldr	r5, [pc, #188]	; (76f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    7634:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    7638:	2100      	movs	r1, #0
    763a:	6868      	ldr	r0, [r5, #4]
    763c:	8001      	strh	r1, [r0, #0]
    763e:	f007 fa72 	bl	eb26 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    7642:	8860      	ldrh	r0, [r4, #2]
    7644:	2813      	cmp	r0, #19
    7646:	d013      	beq.n	7670 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    7648:	dc09      	bgt.n	765e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    764a:	2810      	cmp	r0, #16
    764c:	d036      	beq.n	76bc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    764e:	2812      	cmp	r0, #18
    7650:	d109      	bne.n	7666 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    7652:	e031      	b.n	76b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    7654:	4620      	mov	r0, r4
    7656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    765a:	f000 bb37 	b.w	7ccc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>
    765e:	2815      	cmp	r0, #21
    7660:	d00f      	beq.n	7682 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    7662:	281d      	cmp	r0, #29
    7664:	d00d      	beq.n	7682 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    7666:	f240 6171 	movw	r1, #1649	; 0x671
    766a:	202d      	movs	r0, #45	; 0x2d
    766c:	f7fd fb04 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7670:	2100      	movs	r1, #0
    7672:	6868      	ldr	r0, [r5, #4]
    7674:	f006 fedd 	bl	e432 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7678:	2101      	movs	r1, #1
    767a:	6868      	ldr	r0, [r5, #4]
    767c:	f007 fa53 	bl	eb26 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    7680:	e020      	b.n	76c4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    7682:	2101      	movs	r1, #1
    7684:	6868      	ldr	r0, [r5, #4]
    7686:	f006 fed4 	bl	e432 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    768a:	2101      	movs	r1, #1
    768c:	6868      	ldr	r0, [r5, #4]
    768e:	f007 fa4a 	bl	eb26 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    7692:	b136      	cbz	r6, 76a2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    7694:	f104 0157 	add.w	r1, r4, #87	; 0x57
    7698:	6868      	ldr	r0, [r5, #4]
    769a:	f006 fee5 	bl	e468 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    769e:	2101      	movs	r1, #1
    76a0:	e006      	b.n	76b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    76a2:	f104 0150 	add.w	r1, r4, #80	; 0x50
    76a6:	6868      	ldr	r0, [r5, #4]
    76a8:	f006 fede 	bl	e468 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    76ac:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    76b0:	6868      	ldr	r0, [r5, #4]
    76b2:	f006 fedf 	bl	e474 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    76b6:	e005      	b.n	76c4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    76b8:	2106      	movs	r1, #6
    76ba:	e000      	b.n	76be <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    76bc:	2102      	movs	r1, #2
    76be:	6868      	ldr	r0, [r5, #4]
    76c0:	f006 feb7 	bl	e432 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    76c4:	4620      	mov	r0, r4
    76c6:	f000 fcaf 	bl	8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    76ca:	8860      	ldrh	r0, [r4, #2]
    76cc:	281d      	cmp	r0, #29
    76ce:	d006      	beq.n	76de <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    76d0:	2815      	cmp	r0, #21
    76d2:	d004      	beq.n	76de <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    76d4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    76d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    76d8:	6868      	ldr	r0, [r5, #4]
    76da:	f006 fe9a 	bl	e412 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    76de:	4639      	mov	r1, r7
    76e0:	4620      	mov	r0, r4
    76e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    76e6:	f000 b9e7 	b.w	7ab8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    76ea:	0000      	.short	0x0000
    76ec:	20000eec 	.word	0x20000eec
    76f0:	200000ec 	.word	0x200000ec
    76f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    76f8:	4d2e      	ldr	r5, [pc, #184]	; (77b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    76fa:	4607      	mov	r7, r0
    76fc:	7828      	ldrb	r0, [r5, #0]
    76fe:	2802      	cmp	r0, #2
    7700:	d005      	beq.n	770e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    7702:	7828      	ldrb	r0, [r5, #0]
    7704:	2803      	cmp	r0, #3
    7706:	d002      	beq.n	770e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    7708:	f44f 6150 	mov.w	r1, #3328	; 0xd00
    770c:	e029      	b.n	7762 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x192>
    770e:	4c2a      	ldr	r4, [pc, #168]	; (77b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    7710:	6820      	ldr	r0, [r4, #0]
    7712:	7b01      	ldrb	r1, [r0, #12]
    7714:	b109      	cbz	r1, 771a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    7716:	f007 f9fb 	bl	eb10 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    771a:	6860      	ldr	r0, [r4, #4]
    771c:	f04f 0800 	mov.w	r8, #0
    7720:	7802      	ldrb	r2, [r0, #0]
    7722:	f002 060f 	and.w	r6, r2, #15
    7726:	b357      	cbz	r7, 777e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    7728:	6821      	ldr	r1, [r4, #0]
    772a:	f101 0349 	add.w	r3, r1, #73	; 0x49
    772e:	f891 1048 	ldrb.w	r1, [r1, #72]	; 0x48
    7732:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
    7736:	d122      	bne.n	777e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    7738:	2206      	movs	r2, #6
    773a:	4619      	mov	r1, r3
    773c:	3009      	adds	r0, #9
    773e:	f005 f8df 	bl	c900 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7742:	b9e0      	cbnz	r0, 777e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    7744:	4641      	mov	r1, r8
    7746:	6860      	ldr	r0, [r4, #4]
    7748:	f006 fe53 	bl	e3f2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    774c:	b1b8      	cbz	r0, 777e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    774e:	782a      	ldrb	r2, [r5, #0]
    7750:	6820      	ldr	r0, [r4, #0]
    7752:	4631      	mov	r1, r6
    7754:	2a02      	cmp	r2, #2
    7756:	d007      	beq.n	7768 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
    7758:	782a      	ldrb	r2, [r5, #0]
    775a:	2a03      	cmp	r2, #3
    775c:	d004      	beq.n	7768 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
    775e:	f640 41d9 	movw	r1, #3289	; 0xcd9
    7762:	202d      	movs	r0, #45	; 0x2d
    7764:	f7fd fa88 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7768:	68a2      	ldr	r2, [r4, #8]
    776a:	782b      	ldrb	r3, [r5, #0]
    776c:	6952      	ldr	r2, [r2, #20]
    776e:	f06f 0607 	mvn.w	r6, #7
    7772:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    7776:	58d2      	ldr	r2, [r2, r3]
    7778:	4790      	blx	r2
    777a:	4606      	mov	r6, r0
    777c:	e000      	b.n	7780 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1b0>
    777e:	2601      	movs	r6, #1
    7780:	7ba8      	ldrb	r0, [r5, #14]
    7782:	b118      	cbz	r0, 778c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1bc>
    7784:	f004 f84a 	bl	b81c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7788:	f003 fe2c 	bl	b3e4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    778c:	2e00      	cmp	r6, #0
    778e:	d00f      	beq.n	77b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e0>
    7790:	6820      	ldr	r0, [r4, #0]
    7792:	f007 fa77 	bl	ec84 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7796:	b130      	cbz	r0, 77a6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d6>
    7798:	f004 f864 	bl	b864 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    779c:	68a0      	ldr	r0, [r4, #8]
    779e:	6880      	ldr	r0, [r0, #8]
    77a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    77a4:	4700      	bx	r0
    77a6:	6820      	ldr	r0, [r4, #0]
    77a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    77ac:	f000 ba8e 	b.w	7ccc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>
    77b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    77b4:	20000eec 	.word	0x20000eec
    77b8:	200000ec 	.word	0x200000ec
    77bc:	b510      	push	{r4, lr}
    77be:	2903      	cmp	r1, #3
    77c0:	d002      	beq.n	77c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    77c2:	2905      	cmp	r1, #5
    77c4:	d10a      	bne.n	77dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    77c6:	e002      	b.n	77ce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    77c8:	f000 fb7e 	bl	7ec8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e8>
    77cc:	e003      	b.n	77d6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    77ce:	4904      	ldr	r1, [pc, #16]	; (77e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    77d0:	6809      	ldr	r1, [r1, #0]
    77d2:	b109      	cbz	r1, 77d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    77d4:	4788      	blx	r1
    77d6:	b108      	cbz	r0, 77dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    77d8:	2000      	movs	r0, #0
    77da:	bd10      	pop	{r4, pc}
    77dc:	2001      	movs	r0, #1
    77de:	bd10      	pop	{r4, pc}
    77e0:	200000f8 	.word	0x200000f8
    77e4:	4a09      	ldr	r2, [pc, #36]	; (780c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    77e6:	0003      	movs	r3, r0
    77e8:	6810      	ldr	r0, [r2, #0]
    77ea:	d001      	beq.n	77f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    77ec:	f000 ba6e 	b.w	7ccc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>
    77f0:	2900      	cmp	r1, #0
    77f2:	d009      	beq.n	7808 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    77f4:	6891      	ldr	r1, [r2, #8]
    77f6:	4a06      	ldr	r2, [pc, #24]	; (7810 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    77f8:	6909      	ldr	r1, [r1, #16]
    77fa:	7812      	ldrb	r2, [r2, #0]
    77fc:	f06f 030f 	mvn.w	r3, #15
    7800:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    7804:	5889      	ldr	r1, [r1, r2]
    7806:	4708      	bx	r1
    7808:	4770      	bx	lr
    780a:	0000      	.short	0x0000
    780c:	200000ec 	.word	0x200000ec
    7810:	20000eec 	.word	0x20000eec
    7814:	b570      	push	{r4, r5, r6, lr}
    7816:	4604      	mov	r4, r0
    7818:	8840      	ldrh	r0, [r0, #2]
    781a:	2810      	cmp	r0, #16
    781c:	d019      	beq.n	7852 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    781e:	4d10      	ldr	r5, [pc, #64]	; (7860 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    7820:	7ba8      	ldrb	r0, [r5, #14]
    7822:	b120      	cbz	r0, 782e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    7824:	f003 fdfe 	bl	b424 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    7828:	2040      	movs	r0, #64	; 0x40
    782a:	f004 f807 	bl	b83c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    782e:	480d      	ldr	r0, [pc, #52]	; (7864 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    7830:	6840      	ldr	r0, [r0, #4]
    7832:	f004 fab1 	bl	bd98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7836:	78a0      	ldrb	r0, [r4, #2]
    7838:	0740      	lsls	r0, r0, #29
    783a:	d404      	bmi.n	7846 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    783c:	2100      	movs	r1, #0
    783e:	7922      	ldrb	r2, [r4, #4]
    7840:	4608      	mov	r0, r1
    7842:	f004 fb33 	bl	beac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7846:	2000      	movs	r0, #0
    7848:	f004 f948 	bl	badc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    784c:	2002      	movs	r0, #2
    784e:	7028      	strb	r0, [r5, #0]
    7850:	bd70      	pop	{r4, r5, r6, pc}
    7852:	4620      	mov	r0, r4
    7854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7858:	2101      	movs	r1, #1
    785a:	f7ff bec1 	b.w	75e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    785e:	0000      	.short	0x0000
    7860:	20000eec 	.word	0x20000eec
    7864:	200000ec 	.word	0x200000ec
    7868:	b510      	push	{r4, lr}
    786a:	4c12      	ldr	r4, [pc, #72]	; (78b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    786c:	6820      	ldr	r0, [r4, #0]
    786e:	f000 f825 	bl	78bc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    7872:	6820      	ldr	r0, [r4, #0]
    7874:	f007 fa06 	bl	ec84 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7878:	2800      	cmp	r0, #0
    787a:	6820      	ldr	r0, [r4, #0]
    787c:	d00b      	beq.n	7896 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    787e:	490e      	ldr	r1, [pc, #56]	; (78b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    7880:	780a      	ldrb	r2, [r1, #0]
    7882:	2a02      	cmp	r2, #2
    7884:	d00b      	beq.n	789e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    7886:	780a      	ldrb	r2, [r1, #0]
    7888:	2a03      	cmp	r2, #3
    788a:	d008      	beq.n	789e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    788c:	f640 4107 	movw	r1, #3079	; 0xc07
    7890:	202d      	movs	r0, #45	; 0x2d
    7892:	f7fd f9f1 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    789a:	f000 ba17 	b.w	7ccc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>
    789e:	68a2      	ldr	r2, [r4, #8]
    78a0:	7809      	ldrb	r1, [r1, #0]
    78a2:	68d2      	ldr	r2, [r2, #12]
    78a4:	f06f 0307 	mvn.w	r3, #7
    78a8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    78ac:	5851      	ldr	r1, [r2, r1]
    78ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    78b2:	4708      	bx	r1
    78b4:	200000ec 	.word	0x200000ec
    78b8:	20000eec 	.word	0x20000eec
    78bc:	b510      	push	{r4, lr}
    78be:	7b01      	ldrb	r1, [r0, #12]
    78c0:	b109      	cbz	r1, 78c6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    78c2:	f007 f925 	bl	eb10 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    78c6:	4805      	ldr	r0, [pc, #20]	; (78dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
    78c8:	7b80      	ldrb	r0, [r0, #14]
    78ca:	2800      	cmp	r0, #0
    78cc:	d005      	beq.n	78da <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
    78ce:	f003 ffa5 	bl	b81c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    78d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    78d6:	f003 bd85 	b.w	b3e4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    78da:	bd10      	pop	{r4, pc}
    78dc:	20000eec 	.word	0x20000eec

000078e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    78e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    78e4:	4d59      	ldr	r5, [pc, #356]	; (7a4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    78e6:	4604      	mov	r4, r0
    78e8:	b088      	sub	sp, #32
    78ea:	7828      	ldrb	r0, [r5, #0]
    78ec:	bbf0      	cbnz	r0, 796c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    78ee:	7820      	ldrb	r0, [r4, #0]
    78f0:	28ff      	cmp	r0, #255	; 0xff
    78f2:	d03c      	beq.n	796e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    78f4:	2600      	movs	r6, #0
    78f6:	81ae      	strh	r6, [r5, #12]
    78f8:	606e      	str	r6, [r5, #4]
    78fa:	706e      	strb	r6, [r5, #1]
    78fc:	70ae      	strb	r6, [r5, #2]
    78fe:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
    7902:	4b53      	ldr	r3, [pc, #332]	; (7a50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>)
    7904:	f8df 814c 	ldr.w	r8, [pc, #332]	; 7a54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>
    7908:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    790a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    790e:	f8d8 0008 	ldr.w	r0, [r8, #8]
    7912:	6840      	ldr	r0, [r0, #4]
    7914:	9003      	str	r0, [sp, #12]
    7916:	4668      	mov	r0, sp
    7918:	f004 f8b4 	bl	ba84 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    791c:	f004 f9ac 	bl	bc78 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    7920:	f004 fc0c 	bl	c13c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    7924:	f003 ff7a 	bl	b81c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7928:	f003 fd5c 	bl	b3e4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    792c:	484a      	ldr	r0, [pc, #296]	; (7a58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
    792e:	f004 fafd 	bl	bf2c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    7932:	4847      	ldr	r0, [pc, #284]	; (7a50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>)
    7934:	1f00      	subs	r0, r0, #4
    7936:	f004 fb03 	bl	bf40 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    793a:	f104 0020 	add.w	r0, r4, #32
    793e:	4607      	mov	r7, r0
    7940:	f007 f953 	bl	ebea <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    7944:	4638      	mov	r0, r7
    7946:	f007 f915 	bl	eb74 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    794a:	4601      	mov	r1, r0
    794c:	4620      	mov	r0, r4
    794e:	f007 f8d4 	bl	eafa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    7952:	f994 000e 	ldrsb.w	r0, [r4, #14]
    7956:	f004 fa19 	bl	bd8c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    795a:	7921      	ldrb	r1, [r4, #4]
    795c:	2000      	movs	r0, #0
    795e:	f004 f815 	bl	b98c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    7962:	60a8      	str	r0, [r5, #8]
    7964:	b138      	cbz	r0, 7976 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x96>
    7966:	7ea0      	ldrb	r0, [r4, #26]
    7968:	b968      	cbnz	r0, 7986 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    796a:	e007      	b.n	797c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9c>
    796c:	e7ff      	b.n	796e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    796e:	200c      	movs	r0, #12
    7970:	b008      	add	sp, #32
    7972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7976:	2001      	movs	r0, #1
    7978:	7028      	strb	r0, [r5, #0]
    797a:	e064      	b.n	7a46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x166>
    797c:	7e20      	ldrb	r0, [r4, #24]
    797e:	b910      	cbnz	r0, 7986 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    7980:	78a0      	ldrb	r0, [r4, #2]
    7982:	0740      	lsls	r0, r0, #29
    7984:	d52b      	bpl.n	79de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    7986:	f004 fe58 	bl	c63a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    798a:	4682      	mov	sl, r0
    798c:	4651      	mov	r1, sl
    798e:	6c60      	ldr	r0, [r4, #68]	; 0x44
    7990:	f7fa fddc 	bl	254c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7994:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 7a5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>
    7998:	4607      	mov	r7, r0
    799a:	fb90 f1f9 	sdiv	r1, r0, r9
    799e:	fb09 7011 	mls	r0, r9, r1, r7
    79a2:	4241      	negs	r1, r0
    79a4:	4650      	mov	r0, sl
    79a6:	f7fa fd9f 	bl	24e8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    79aa:	6460      	str	r0, [r4, #68]	; 0x44
    79ac:	fb97 f0f9 	sdiv	r0, r7, r9
    79b0:	6c21      	ldr	r1, [r4, #64]	; 0x40
    79b2:	4408      	add	r0, r1
    79b4:	6420      	str	r0, [r4, #64]	; 0x40
    79b6:	f7fe ff1f 	bl	67f8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    79ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
    79bc:	4288      	cmp	r0, r1
    79be:	d80e      	bhi.n	79de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    79c0:	e9c4 6a10 	strd	r6, sl, [r4, #64]	; 0x40
    79c4:	2101      	movs	r1, #1
    79c6:	4620      	mov	r0, r4
    79c8:	f007 f85b 	bl	ea82 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    79cc:	78a0      	ldrb	r0, [r4, #2]
    79ce:	0740      	lsls	r0, r0, #29
    79d0:	d505      	bpl.n	79de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    79d2:	7e20      	ldrb	r0, [r4, #24]
    79d4:	b118      	cbz	r0, 79de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    79d6:	2101      	movs	r1, #1
    79d8:	4620      	mov	r0, r4
    79da:	f000 faaf 	bl	7f3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    79de:	f104 0130 	add.w	r1, r4, #48	; 0x30
    79e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    79e4:	f006 f8e2 	bl	dbac <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    79e8:	f104 0138 	add.w	r1, r4, #56	; 0x38
    79ec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    79ee:	f006 f8e0 	bl	dbb2 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    79f2:	f7fe ff67 	bl	68c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    79f6:	f8d8 0004 	ldr.w	r0, [r8, #4]
    79fa:	1cc0      	adds	r0, r0, #3
    79fc:	f006 f999 	bl	dd32 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    7a00:	73a8      	strb	r0, [r5, #14]
    7a02:	78a0      	ldrb	r0, [r4, #2]
    7a04:	07c0      	lsls	r0, r0, #31
    7a06:	d01e      	beq.n	7a46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x166>
    7a08:	a904      	add	r1, sp, #16
    7a0a:	2000      	movs	r0, #0
    7a0c:	f005 ffa8 	bl	d960 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7a10:	b120      	cbz	r0, 7a1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13c>
    7a12:	f640 11ce 	movw	r1, #2510	; 0x9ce
    7a16:	202d      	movs	r0, #45	; 0x2d
    7a18:	f7fd f92e 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a1c:	20ff      	movs	r0, #255	; 0xff
    7a1e:	73e8      	strb	r0, [r5, #15]
    7a20:	e00c      	b.n	7a3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15c>
    7a22:	9806      	ldr	r0, [sp, #24]
    7a24:	69e1      	ldr	r1, [r4, #28]
    7a26:	4281      	cmp	r1, r0
    7a28:	d008      	beq.n	7a3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15c>
    7a2a:	7881      	ldrb	r1, [r0, #2]
    7a2c:	73e9      	strb	r1, [r5, #15]
    7a2e:	f8d0 1003 	ldr.w	r1, [r0, #3]
    7a32:	6129      	str	r1, [r5, #16]
    7a34:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7a38:	82a8      	strh	r0, [r5, #20]
    7a3a:	e004      	b.n	7a46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x166>
    7a3c:	a804      	add	r0, sp, #16
    7a3e:	f7fd fb61 	bl	5104 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7a42:	2800      	cmp	r0, #0
    7a44:	d0ed      	beq.n	7a22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x142>
    7a46:	2000      	movs	r0, #0
    7a48:	e792      	b.n	7970 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x90>
    7a4a:	0000      	.short	0x0000
    7a4c:	20000eec 	.word	0x20000eec
    7a50:	00008050 	.word	0x00008050
    7a54:	200000ec 	.word	0x200000ec
    7a58:	8e89bed6 	.word	0x8e89bed6
    7a5c:	000f4240 	.word	0x000f4240
    7a60:	b510      	push	{r4, lr}
    7a62:	4604      	mov	r4, r0
    7a64:	f7ff ff3c 	bl	78e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    7a68:	2800      	cmp	r0, #0
    7a6a:	d108      	bne.n	7a7e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19e>
    7a6c:	4804      	ldr	r0, [pc, #16]	; (7a80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1a0>)
    7a6e:	7800      	ldrb	r0, [r0, #0]
    7a70:	2801      	cmp	r0, #1
    7a72:	d003      	beq.n	7a7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>
    7a74:	2100      	movs	r1, #0
    7a76:	4620      	mov	r0, r4
    7a78:	f7ff fdb2 	bl	75e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7a7c:	2000      	movs	r0, #0
    7a7e:	bd10      	pop	{r4, pc}
    7a80:	20000eec 	.word	0x20000eec
    7a84:	480a      	ldr	r0, [pc, #40]	; (7ab0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    7a86:	b510      	push	{r4, lr}
    7a88:	490a      	ldr	r1, [pc, #40]	; (7ab4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>)
    7a8a:	6804      	ldr	r4, [r0, #0]
    7a8c:	7808      	ldrb	r0, [r1, #0]
    7a8e:	2800      	cmp	r0, #0
    7a90:	d00d      	beq.n	7aae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ce>
    7a92:	7808      	ldrb	r0, [r1, #0]
    7a94:	2802      	cmp	r0, #2
    7a96:	d002      	beq.n	7a9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1be>
    7a98:	7808      	ldrb	r0, [r1, #0]
    7a9a:	2803      	cmp	r0, #3
    7a9c:	d102      	bne.n	7aa4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c4>
    7a9e:	4620      	mov	r0, r4
    7aa0:	f7ff ff0c 	bl	78bc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    7aa4:	4620      	mov	r0, r4
    7aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7aaa:	f000 b90f 	b.w	7ccc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>
    7aae:	bd10      	pop	{r4, pc}
    7ab0:	200000ec 	.word	0x200000ec
    7ab4:	20000eec 	.word	0x20000eec
    7ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7abc:	4604      	mov	r4, r0
    7abe:	4827      	ldr	r0, [pc, #156]	; (7b5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    7ac0:	460d      	mov	r5, r1
    7ac2:	6840      	ldr	r0, [r0, #4]
    7ac4:	f004 f968 	bl	bd98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7ac8:	4e25      	ldr	r6, [pc, #148]	; (7b60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>)
    7aca:	2004      	movs	r0, #4
    7acc:	7030      	strb	r0, [r6, #0]
    7ace:	b325      	cbz	r5, 7b1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    7ad0:	8860      	ldrh	r0, [r4, #2]
    7ad2:	2810      	cmp	r0, #16
    7ad4:	d02a      	beq.n	7b2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24c>
    7ad6:	f104 0020 	add.w	r0, r4, #32
    7ada:	4680      	mov	r8, r0
    7adc:	68b5      	ldr	r5, [r6, #8]
    7ade:	f007 f83d 	bl	eb5c <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7ae2:	4607      	mov	r7, r0
    7ae4:	4640      	mov	r0, r8
    7ae6:	f007 f862 	bl	ebae <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7aea:	1a38      	subs	r0, r7, r0
    7aec:	1e40      	subs	r0, r0, #1
    7aee:	b2c0      	uxtb	r0, r0
    7af0:	8861      	ldrh	r1, [r4, #2]
    7af2:	2228      	movs	r2, #40	; 0x28
    7af4:	f000 fae8 	bl	80c8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    7af8:	4405      	add	r5, r0
    7afa:	78a0      	ldrb	r0, [r4, #2]
    7afc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7b00:	b130      	cbz	r0, 7b10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x230>
    7b02:	6870      	ldr	r0, [r6, #4]
    7b04:	4405      	add	r5, r0
    7b06:	f007 f8ab 	bl	ec60 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    7b0a:	4428      	add	r0, r5
    7b0c:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
    7b10:	7922      	ldrb	r2, [r4, #4]
    7b12:	4629      	mov	r1, r5
    7b14:	2000      	movs	r0, #0
    7b16:	f004 f94d 	bl	bdb4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    7b1a:	8860      	ldrh	r0, [r4, #2]
    7b1c:	2813      	cmp	r0, #19
    7b1e:	d013      	beq.n	7b48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    7b20:	dc09      	bgt.n	7b36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    7b22:	2810      	cmp	r0, #16
    7b24:	d017      	beq.n	7b56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x276>
    7b26:	2812      	cmp	r0, #18
    7b28:	d109      	bne.n	7b3e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25e>
    7b2a:	e00d      	b.n	7b48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    7b2c:	7921      	ldrb	r1, [r4, #4]
    7b2e:	2000      	movs	r0, #0
    7b30:	f003 fee0 	bl	b8f4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    7b34:	e7f1      	b.n	7b1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    7b36:	2815      	cmp	r0, #21
    7b38:	d006      	beq.n	7b48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    7b3a:	281d      	cmp	r0, #29
    7b3c:	d004      	beq.n	7b48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    7b3e:	f640 518e 	movw	r1, #3470	; 0xd8e
    7b42:	202d      	movs	r0, #45	; 0x2d
    7b44:	f7fd f898 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b48:	7922      	ldrb	r2, [r4, #4]
    7b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7b4e:	2101      	movs	r1, #1
    7b50:	2000      	movs	r0, #0
    7b52:	f004 b9ab 	b.w	beac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b5a:	0000      	.short	0x0000
    7b5c:	200000ec 	.word	0x200000ec
    7b60:	20000eec 	.word	0x20000eec
    7b64:	b510      	push	{r4, lr}
    7b66:	4604      	mov	r4, r0
    7b68:	7800      	ldrb	r0, [r0, #0]
    7b6a:	460b      	mov	r3, r1
    7b6c:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    7b70:	29ff      	cmp	r1, #255	; 0xff
    7b72:	d010      	beq.n	7b96 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b6>
    7b74:	f104 0297 	add.w	r2, r4, #151	; 0x97
    7b78:	1e51      	subs	r1, r2, #1
    7b7a:	4618      	mov	r0, r3
    7b7c:	f7fe fdba 	bl	66f4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7b80:	b130      	cbz	r0, 7b90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b0>
    7b82:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    7b86:	f040 0002 	orr.w	r0, r0, #2
    7b8a:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    7b8e:	e011      	b.n	7bb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d4>
    7b90:	f640 71c5 	movw	r1, #4037	; 0xfc5
    7b94:	e020      	b.n	7bd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f8>
    7b96:	4812      	ldr	r0, [pc, #72]	; (7be0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>)
    7b98:	6840      	ldr	r0, [r0, #4]
    7b9a:	7801      	ldrb	r1, [r0, #0]
    7b9c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7ba0:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
    7ba4:	f8d0 1003 	ldr.w	r1, [r0, #3]
    7ba8:	f8c4 1097 	str.w	r1, [r4, #151]	; 0x97
    7bac:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7bb0:	f8a4 009b 	strh.w	r0, [r4, #155]	; 0x9b
    7bb4:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    7bb8:	287f      	cmp	r0, #127	; 0x7f
    7bba:	d00b      	beq.n	7bd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f4>
    7bbc:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    7bc0:	207f      	movs	r0, #127	; 0x7f
    7bc2:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    7bc6:	347e      	adds	r4, #126	; 0x7e
    7bc8:	2001      	movs	r0, #1
    7bca:	75a0      	strb	r0, [r4, #22]
    7bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7bd0:	f003 b81c 	b.w	ac0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7bd4:	f44f 6164 	mov.w	r1, #3648	; 0xe40
    7bd8:	202d      	movs	r0, #45	; 0x2d
    7bda:	f7fd f84d 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bde:	0000      	.short	0x0000
    7be0:	200000ec 	.word	0x200000ec
    7be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7be8:	4690      	mov	r8, r2
    7bea:	460e      	mov	r6, r1
    7bec:	4604      	mov	r4, r0
    7bee:	2903      	cmp	r1, #3
    7bf0:	d004      	beq.n	7bfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31c>
    7bf2:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    7bf6:	b108      	cbz	r0, 7bfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31c>
    7bf8:	2001      	movs	r0, #1
    7bfa:	e000      	b.n	7bfe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31e>
    7bfc:	2000      	movs	r0, #0
    7bfe:	4681      	mov	r9, r0
    7c00:	f003 fe2a 	bl	b858 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    7c04:	4605      	mov	r5, r0
    7c06:	2e03      	cmp	r6, #3
    7c08:	d003      	beq.n	7c12 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
    7c0a:	2701      	movs	r7, #1
    7c0c:	2e05      	cmp	r6, #5
    7c0e:	d005      	beq.n	7c1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    7c10:	e008      	b.n	7c24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x344>
    7c12:	78a0      	ldrb	r0, [r4, #2]
    7c14:	2702      	movs	r7, #2
    7c16:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7c1a:	e001      	b.n	7c20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x340>
    7c1c:	78a0      	ldrb	r0, [r4, #2]
    7c1e:	07c0      	lsls	r0, r0, #31
    7c20:	2800      	cmp	r0, #0
    7c22:	d04a      	beq.n	7cba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    7c24:	f1b9 0f00 	cmp.w	r9, #0
    7c28:	d146      	bne.n	7cb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    7c2a:	4826      	ldr	r0, [pc, #152]	; (7cc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e4>)
    7c2c:	7b80      	ldrb	r0, [r0, #14]
    7c2e:	b140      	cbz	r0, 7c42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x362>
    7c30:	f006 f882 	bl	dd38 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    7c34:	f888 0000 	strb.w	r0, [r8]
    7c38:	28ff      	cmp	r0, #255	; 0xff
    7c3a:	d002      	beq.n	7c42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x362>
    7c3c:	f7fe fd74 	bl	6728 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7c40:	4305      	orrs	r5, r0
    7c42:	4e21      	ldr	r6, [pc, #132]	; (7cc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>)
    7c44:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    7c48:	6870      	ldr	r0, [r6, #4]
    7c4a:	7801      	ldrb	r1, [r0, #0]
    7c4c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7c50:	4291      	cmp	r1, r2
    7c52:	d106      	bne.n	7c62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x382>
    7c54:	2206      	movs	r2, #6
    7c56:	f104 0150 	add.w	r1, r4, #80	; 0x50
    7c5a:	1cc0      	adds	r0, r0, #3
    7c5c:	f004 fe50 	bl	c900 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7c60:	b130      	cbz	r0, 7c70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x390>
    7c62:	2000      	movs	r0, #0
    7c64:	f898 1000 	ldrb.w	r1, [r8]
    7c68:	29ff      	cmp	r1, #255	; 0xff
    7c6a:	d007      	beq.n	7c7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39c>
    7c6c:	b9a8      	cbnz	r0, 7c9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ba>
    7c6e:	e001      	b.n	7c74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x394>
    7c70:	2001      	movs	r0, #1
    7c72:	e7f7      	b.n	7c64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x384>
    7c74:	7e60      	ldrb	r0, [r4, #25]
    7c76:	4288      	cmp	r0, r1
    7c78:	d00f      	beq.n	7c9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ba>
    7c7a:	e008      	b.n	7c8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ae>
    7c7c:	b138      	cbz	r0, 7c8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ae>
    7c7e:	6871      	ldr	r1, [r6, #4]
    7c80:	f811 0b03 	ldrb.w	r0, [r1], #3
    7c84:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7c88:	f006 feb9 	bl	e9fe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7c8c:	b128      	cbz	r0, 7c9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ba>
    7c8e:	2000      	movs	r0, #0
    7c90:	78a1      	ldrb	r1, [r4, #2]
    7c92:	0749      	lsls	r1, r1, #29
    7c94:	d503      	bpl.n	7c9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    7c96:	b990      	cbnz	r0, 7cbe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    7c98:	e00e      	b.n	7cb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    7c9a:	2001      	movs	r0, #1
    7c9c:	e7f8      	b.n	7c90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b0>
    7c9e:	b975      	cbnz	r5, 7cbe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    7ca0:	7be0      	ldrb	r0, [r4, #15]
    7ca2:	b108      	cbz	r0, 7ca8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    7ca4:	42b8      	cmp	r0, r7
    7ca6:	d107      	bne.n	7cb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    7ca8:	6871      	ldr	r1, [r6, #4]
    7caa:	f811 0b03 	ldrb.w	r0, [r1], #3
    7cae:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7cb2:	f006 fea4 	bl	e9fe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7cb6:	b110      	cbz	r0, 7cbe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    7cb8:	2000      	movs	r0, #0
    7cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7cbe:	2001      	movs	r0, #1
    7cc0:	e7fb      	b.n	7cba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    7cc2:	0000      	.short	0x0000
    7cc4:	20000eec 	.word	0x20000eec
    7cc8:	200000ec 	.word	0x200000ec
    7ccc:	b570      	push	{r4, r5, r6, lr}
    7cce:	4604      	mov	r4, r0
    7cd0:	6a80      	ldr	r0, [r0, #40]	; 0x28
    7cd2:	4d13      	ldr	r5, [pc, #76]	; (7d20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x440>)
    7cd4:	1c40      	adds	r0, r0, #1
    7cd6:	62a0      	str	r0, [r4, #40]	; 0x28
    7cd8:	7ba8      	ldrb	r0, [r5, #14]
    7cda:	2600      	movs	r6, #0
    7cdc:	b120      	cbz	r0, 7ce8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x408>
    7cde:	f003 fd9d 	bl	b81c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7ce2:	f003 fb7f 	bl	b3e4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7ce6:	73ae      	strb	r6, [r5, #14]
    7ce8:	702e      	strb	r6, [r5, #0]
    7cea:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    7cee:	b108      	cbz	r0, 7cf4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    7cf0:	2101      	movs	r1, #1
    7cf2:	e00f      	b.n	7d14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x434>
    7cf4:	7b60      	ldrb	r0, [r4, #13]
    7cf6:	b160      	cbz	r0, 7d12 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x432>
    7cf8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    7cfa:	4288      	cmp	r0, r1
    7cfc:	d809      	bhi.n	7d12 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x432>
    7cfe:	2101      	movs	r1, #1
    7d00:	4620      	mov	r0, r4
    7d02:	f006 ffd4 	bl	ecae <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    7d06:	78a0      	ldrb	r0, [r4, #2]
    7d08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7d0c:	07c0      	lsls	r0, r0, #31
    7d0e:	f002 bf7d 	b.w	ac0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7d12:	2100      	movs	r1, #0
    7d14:	4620      	mov	r0, r4
    7d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7d1a:	f006 bfc8 	b.w	ecae <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    7d1e:	0000      	.short	0x0000
    7d20:	20000eec 	.word	0x20000eec
    7d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7d28:	4604      	mov	r4, r0
    7d2a:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    7d2e:	4617      	mov	r7, r2
    7d30:	460d      	mov	r5, r1
    7d32:	f88d 0000 	strb.w	r0, [sp]
    7d36:	9800      	ldr	r0, [sp, #0]
    7d38:	9000      	str	r0, [sp, #0]
    7d3a:	f89d 0000 	ldrb.w	r0, [sp]
    7d3e:	b110      	cbz	r0, 7d46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x466>
    7d40:	f640 413b 	movw	r1, #3131	; 0xc3b
    7d44:	e054      	b.n	7df0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x510>
    7d46:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    7d4a:	8828      	ldrh	r0, [r5, #0]
    7d4c:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    7d50:	2b00      	cmp	r3, #0
    7d52:	d15d      	bne.n	7e10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x530>
    7d54:	68e8      	ldr	r0, [r5, #12]
    7d56:	f006 f84d 	bl	ddf4 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7d5a:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    7d5e:	8aa8      	ldrh	r0, [r5, #20]
    7d60:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    7d64:	8ae8      	ldrh	r0, [r5, #22]
    7d66:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    7d6a:	f895 0175 	ldrb.w	r0, [r5, #373]	; 0x175
    7d6e:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    7d72:	7e21      	ldrb	r1, [r4, #24]
    7d74:	f104 0849 	add.w	r8, r4, #73	; 0x49
    7d78:	2600      	movs	r6, #0
    7d7a:	b129      	cbz	r1, 7d88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a8>
    7d7c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7d80:	4641      	mov	r1, r8
    7d82:	f006 fd54 	bl	e82e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    7d86:	b940      	cbnz	r0, 7d9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ba>
    7d88:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    7d8c:	b170      	cbz	r0, 7dac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4cc>
    7d8e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7d92:	4641      	mov	r1, r8
    7d94:	f006 fd42 	bl	e81c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    7d98:	b140      	cbz	r0, 7dac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4cc>
    7d9a:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    7d9e:	f8c4 0072 	str.w	r0, [r4, #114]	; 0x72
    7da2:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    7da6:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    7daa:	e003      	b.n	7db4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d4>
    7dac:	f8c4 6072 	str.w	r6, [r4, #114]	; 0x72
    7db0:	f8a4 6076 	strh.w	r6, [r4, #118]	; 0x76
    7db4:	4817      	ldr	r0, [pc, #92]	; (7e14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x534>)
    7db6:	2fff      	cmp	r7, #255	; 0xff
    7db8:	6840      	ldr	r0, [r0, #4]
    7dba:	7801      	ldrb	r1, [r0, #0]
    7dbc:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7dc0:	f884 106b 	strb.w	r1, [r4, #107]	; 0x6b
    7dc4:	f850 1f03 	ldr.w	r1, [r0, #3]!
    7dc8:	d015      	beq.n	7df6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x516>
    7dca:	67a1      	str	r1, [r4, #120]	; 0x78
    7dcc:	8880      	ldrh	r0, [r0, #4]
    7dce:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    7dd2:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    7dd6:	1e51      	subs	r1, r2, #1
    7dd8:	4638      	mov	r0, r7
    7dda:	f7fe fc8b 	bl	66f4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7dde:	b128      	cbz	r0, 7dec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50c>
    7de0:	f814 0f6b 	ldrb.w	r0, [r4, #107]!
    7de4:	f040 0002 	orr.w	r0, r0, #2
    7de8:	7020      	strb	r0, [r4, #0]
    7dea:	e00a      	b.n	7e02 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x522>
    7dec:	f640 415c 	movw	r1, #3164	; 0xc5c
    7df0:	202d      	movs	r0, #45	; 0x2d
    7df2:	f7fc ff41 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7df6:	f844 1f6c 	str.w	r1, [r4, #108]!
    7dfa:	8880      	ldrh	r0, [r0, #4]
    7dfc:	80a0      	strh	r0, [r4, #4]
    7dfe:	60e6      	str	r6, [r4, #12]
    7e00:	8226      	strh	r6, [r4, #16]
    7e02:	8828      	ldrh	r0, [r5, #0]
    7e04:	f7fd fb60 	bl	54c8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7e08:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7e0c:	f005 bc85 	b.w	d71a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    7e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7e14:	200000ec 	.word	0x200000ec
    7e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7e1c:	4604      	mov	r4, r0
    7e1e:	20ff      	movs	r0, #255	; 0xff
    7e20:	f88d 0000 	strb.w	r0, [sp]
    7e24:	2601      	movs	r6, #1
    7e26:	466a      	mov	r2, sp
    7e28:	2105      	movs	r1, #5
    7e2a:	4620      	mov	r0, r4
    7e2c:	f7ff feda 	bl	7be4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    7e30:	b3f0      	cbz	r0, 7eb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d0>
    7e32:	4d23      	ldr	r5, [pc, #140]	; (7ec0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
    7e34:	4f23      	ldr	r7, [pc, #140]	; (7ec4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>)
    7e36:	46b0      	mov	r8, r6
    7e38:	6868      	ldr	r0, [r5, #4]
    7e3a:	7bfa      	ldrb	r2, [r7, #15]
    7e3c:	f04f 0900 	mov.w	r9, #0
    7e40:	7801      	ldrb	r1, [r0, #0]
    7e42:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7e46:	4291      	cmp	r1, r2
    7e48:	d106      	bne.n	7e58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x578>
    7e4a:	2206      	movs	r2, #6
    7e4c:	f107 0110 	add.w	r1, r7, #16
    7e50:	1cc0      	adds	r0, r0, #3
    7e52:	f004 fd55 	bl	c900 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7e56:	b358      	cbz	r0, 7eb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d0>
    7e58:	686a      	ldr	r2, [r5, #4]
    7e5a:	69e0      	ldr	r0, [r4, #28]
    7e5c:	7812      	ldrb	r2, [r2, #0]
    7e5e:	f810 1f85 	ldrb.w	r1, [r0, #133]!
    7e62:	f3c2 1240 	ubfx	r2, r2, #5, #1
    7e66:	4011      	ands	r1, r2
    7e68:	7001      	strb	r1, [r0, #0]
    7e6a:	2201      	movs	r2, #1
    7e6c:	4620      	mov	r0, r4
    7e6e:	69e1      	ldr	r1, [r4, #28]
    7e70:	f000 f892 	bl	7f98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b8>
    7e74:	2300      	movs	r3, #0
    7e76:	f89d 2000 	ldrb.w	r2, [sp]
    7e7a:	4620      	mov	r0, r4
    7e7c:	69e1      	ldr	r1, [r4, #28]
    7e7e:	f7ff ff51 	bl	7d24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x444>
    7e82:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
    7e86:	f002 fec1 	bl	ac0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7e8a:	f887 9000 	strb.w	r9, [r7]
    7e8e:	2105      	movs	r1, #5
    7e90:	69e0      	ldr	r0, [r4, #28]
    7e92:	f000 fa1d 	bl	82d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    7e96:	6868      	ldr	r0, [r5, #4]
    7e98:	69e1      	ldr	r1, [r4, #28]
    7e9a:	f8d0 2003 	ldr.w	r2, [r0, #3]
    7e9e:	f841 2f03 	str.w	r2, [r1, #3]!
    7ea2:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    7ea6:	808a      	strh	r2, [r1, #4]
    7ea8:	7800      	ldrb	r0, [r0, #0]
    7eaa:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7eae:	e000      	b.n	7eb2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d2>
    7eb0:	e002      	b.n	7eb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d8>
    7eb2:	69e1      	ldr	r1, [r4, #28]
    7eb4:	7088      	strb	r0, [r1, #2]
    7eb6:	e000      	b.n	7eba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5da>
    7eb8:	2600      	movs	r6, #0
    7eba:	4630      	mov	r0, r6
    7ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7ec0:	200000ec 	.word	0x200000ec
    7ec4:	20000eec 	.word	0x20000eec
    7ec8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    7eca:	4604      	mov	r4, r0
    7ecc:	20ff      	movs	r0, #255	; 0xff
    7ece:	f88d 0000 	strb.w	r0, [sp]
    7ed2:	2501      	movs	r5, #1
    7ed4:	466a      	mov	r2, sp
    7ed6:	2103      	movs	r1, #3
    7ed8:	4620      	mov	r0, r4
    7eda:	f7ff fe83 	bl	7be4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    7ede:	b328      	cbz	r0, 7f2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64c>
    7ee0:	7b20      	ldrb	r0, [r4, #12]
    7ee2:	b168      	cbz	r0, 7f00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    7ee4:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
    7ee8:	f88d 0004 	strb.w	r0, [sp, #4]
    7eec:	9801      	ldr	r0, [sp, #4]
    7eee:	9001      	str	r0, [sp, #4]
    7ef0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7ef4:	b920      	cbnz	r0, 7f00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    7ef6:	f89d 1000 	ldrb.w	r1, [sp]
    7efa:	4620      	mov	r0, r4
    7efc:	f7ff fe32 	bl	7b64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    7f00:	4e0c      	ldr	r6, [pc, #48]	; (7f34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x654>)
    7f02:	2100      	movs	r1, #0
    7f04:	6870      	ldr	r0, [r6, #4]
    7f06:	8001      	strh	r1, [r0, #0]
    7f08:	2104      	movs	r1, #4
    7f0a:	f006 fa92 	bl	e432 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7f0e:	4620      	mov	r0, r4
    7f10:	f000 f88a 	bl	8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    7f14:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    7f16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    7f18:	6870      	ldr	r0, [r6, #4]
    7f1a:	f006 fac1 	bl	e4a0 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    7f1e:	4906      	ldr	r1, [pc, #24]	; (7f38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
    7f20:	2005      	movs	r0, #5
    7f22:	7008      	strb	r0, [r1, #0]
    7f24:	6870      	ldr	r0, [r6, #4]
    7f26:	f003 ff37 	bl	bd98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7f2a:	e000      	b.n	7f2e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64e>
    7f2c:	2500      	movs	r5, #0
    7f2e:	4628      	mov	r0, r5
    7f30:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    7f32:	0000      	.short	0x0000
    7f34:	200000ec 	.word	0x200000ec
    7f38:	20000eec 	.word	0x20000eec
    7f3c:	b570      	push	{r4, r5, r6, lr}
    7f3e:	4604      	mov	r4, r0
    7f40:	460e      	mov	r6, r1
    7f42:	7e40      	ldrb	r0, [r0, #25]
    7f44:	f7fe fba4 	bl	6690 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    7f48:	0005      	movs	r5, r0
    7f4a:	d019      	beq.n	7f80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    7f4c:	2110      	movs	r1, #16
    7f4e:	f006 f8dd 	bl	e10c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7f52:	2800      	cmp	r0, #0
    7f54:	d114      	bne.n	7f80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    7f56:	2001      	movs	r0, #1
    7f58:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    7f5c:	f104 0157 	add.w	r1, r4, #87	; 0x57
    7f60:	4632      	mov	r2, r6
    7f62:	460c      	mov	r4, r1
    7f64:	4628      	mov	r0, r5
    7f66:	f005 fe89 	bl	dc7c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7f6a:	4621      	mov	r1, r4
    7f6c:	4c05      	ldr	r4, [pc, #20]	; (7f84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>)
    7f6e:	6860      	ldr	r0, [r4, #4]
    7f70:	f006 fa7a 	bl	e468 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7f74:	6860      	ldr	r0, [r4, #4]
    7f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7f7a:	2101      	movs	r1, #1
    7f7c:	f006 ba7a 	b.w	e474 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7f80:	bd70      	pop	{r4, r5, r6, pc}
    7f82:	0000      	.short	0x0000
    7f84:	200000ec 	.word	0x200000ec
    7f88:	4802      	ldr	r0, [pc, #8]	; (7f94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b4>)
    7f8a:	2101      	movs	r1, #1
    7f8c:	6800      	ldr	r0, [r0, #0]
    7f8e:	f7ff bb27 	b.w	75e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7f92:	0000      	.short	0x0000
    7f94:	200000ec 	.word	0x200000ec
    7f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f9c:	4e21      	ldr	r6, [pc, #132]	; (8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    7f9e:	4680      	mov	r8, r0
    7fa0:	460c      	mov	r4, r1
    7fa2:	6870      	ldr	r0, [r6, #4]
    7fa4:	4615      	mov	r5, r2
    7fa6:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    7faa:	6121      	str	r1, [r4, #16]
    7fac:	8881      	ldrh	r1, [r0, #4]
    7fae:	8321      	strh	r1, [r4, #24]
    7fb0:	7981      	ldrb	r1, [r0, #6]
    7fb2:	76a1      	strb	r1, [r4, #26]
    7fb4:	8940      	ldrh	r0, [r0, #10]
    7fb6:	f005 ff19 	bl	ddec <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    7fba:	4607      	mov	r7, r0
    7fbc:	60e0      	str	r0, [r4, #12]
    7fbe:	6870      	ldr	r0, [r6, #4]
    7fc0:	4639      	mov	r1, r7
    7fc2:	7d80      	ldrb	r0, [r0, #22]
    7fc4:	f006 f89d 	bl	e102 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    7fc8:	83a0      	strh	r0, [r4, #28]
    7fca:	6870      	ldr	r0, [r6, #4]
    7fcc:	4639      	mov	r1, r7
    7fce:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    7fd2:	f006 f892 	bl	e0fa <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    7fd6:	6220      	str	r0, [r4, #32]
    7fd8:	6870      	ldr	r0, [r6, #4]
    7fda:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    7fde:	82a1      	strh	r1, [r4, #20]
    7fe0:	8841      	ldrh	r1, [r0, #2]
    7fe2:	82e1      	strh	r1, [r4, #22]
    7fe4:	6841      	ldr	r1, [r0, #4]
    7fe6:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    7fea:	7a01      	ldrb	r1, [r0, #8]
    7fec:	f884 108a 	strb.w	r1, [r4, #138]	; 0x8a
    7ff0:	7a41      	ldrb	r1, [r0, #9]
    7ff2:	f001 011f 	and.w	r1, r1, #31
    7ff6:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
    7ffa:	7a40      	ldrb	r0, [r0, #9]
    7ffc:	0940      	lsrs	r0, r0, #5
    7ffe:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
    8002:	f104 0062 	add.w	r0, r4, #98	; 0x62
    8006:	7205      	strb	r5, [r0, #8]
    8008:	7245      	strb	r5, [r0, #9]
    800a:	2101      	movs	r1, #1
    800c:	7281      	strb	r1, [r0, #10]
    800e:	2100      	movs	r1, #0
    8010:	3836      	subs	r0, #54	; 0x36
    8012:	f006 fb84 	bl	e71e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    8016:	f898 000e 	ldrb.w	r0, [r8, #14]
    801a:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    801e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8022:	0000      	.short	0x0000
    8024:	200000ec 	.word	0x200000ec
    8028:	b570      	push	{r4, r5, r6, lr}
    802a:	4d07      	ldr	r5, [pc, #28]	; (8048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>)
    802c:	4604      	mov	r4, r0
    802e:	f100 0149 	add.w	r1, r0, #73	; 0x49
    8032:	6868      	ldr	r0, [r5, #4]
    8034:	f006 fa25 	bl	e482 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    8038:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    803c:	6868      	ldr	r0, [r5, #4]
    803e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8042:	f006 ba24 	b.w	e48e <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    8046:	0000      	.short	0x0000
    8048:	200000ec 	.word	0x200000ec
    804c:	00555555 	.word	0x00555555
    8050:	00007869 	.word	0x00007869
    8054:	000076f5 	.word	0x000076f5
    8058:	000077e5 	.word	0x000077e5
    805c:	00000000 	.word	0x00000000
    8060:	000077bd 	.word	0x000077bd
    8064:	00007815 	.word	0x00007815
    8068:	0000ea25 	.word	0x0000ea25
    806c:	0000ea2b 	.word	0x0000ea2b
    8070:	00007a61 	.word	0x00007a61
    8074:	00007a85 	.word	0x00007a85
    8078:	00007f89 	.word	0x00007f89
    807c:	0000806c 	.word	0x0000806c
    8080:	00008064 	.word	0x00008064
    8084:	00008060 	.word	0x00008060

00008088 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    8088:	b510      	push	{r4, lr}
    808a:	1e42      	subs	r2, r0, #1
    808c:	2a02      	cmp	r2, #2
    808e:	d901      	bls.n	8094 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    8090:	21ca      	movs	r1, #202	; 0xca
    8092:	e009      	b.n	80a8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    8094:	1e40      	subs	r0, r0, #1
    8096:	2910      	cmp	r1, #16
    8098:	d009      	beq.n	80ae <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    809a:	2912      	cmp	r1, #18
    809c:	d00c      	beq.n	80b8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    809e:	2913      	cmp	r1, #19
    80a0:	d00a      	beq.n	80b8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    80a2:	2915      	cmp	r1, #21
    80a4:	d005      	beq.n	80b2 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    80a6:	21d8      	movs	r1, #216	; 0xd8
    80a8:	202f      	movs	r0, #47	; 0x2f
    80aa:	f7fc fde5 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80ae:	4905      	ldr	r1, [pc, #20]	; (80c4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    80b0:	e004      	b.n	80bc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    80b2:	4904      	ldr	r1, [pc, #16]	; (80c4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    80b4:	1d89      	adds	r1, r1, #6
    80b6:	e001      	b.n	80bc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    80b8:	4902      	ldr	r1, [pc, #8]	; (80c4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    80ba:	1f89      	subs	r1, r1, #6
    80bc:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    80c0:	bd10      	pop	{r4, pc}
    80c2:	0000      	.short	0x0000
    80c4:	0000ec78 	.word	0x0000ec78

000080c8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    80c8:	1e42      	subs	r2, r0, #1
    80ca:	b510      	push	{r4, lr}
    80cc:	b2d2      	uxtb	r2, r2
    80ce:	2a01      	cmp	r2, #1
    80d0:	d903      	bls.n	80da <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    80d2:	291d      	cmp	r1, #29
    80d4:	d001      	beq.n	80da <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    80d6:	21ee      	movs	r1, #238	; 0xee
    80d8:	e00d      	b.n	80f6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    80da:	2913      	cmp	r1, #19
    80dc:	d013      	beq.n	8106 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    80de:	dc04      	bgt.n	80ea <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    80e0:	2910      	cmp	r1, #16
    80e2:	d00b      	beq.n	80fc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    80e4:	2912      	cmp	r1, #18
    80e6:	d104      	bne.n	80f2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    80e8:	e00d      	b.n	8106 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    80ea:	2915      	cmp	r1, #21
    80ec:	d008      	beq.n	8100 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    80ee:	291d      	cmp	r1, #29
    80f0:	d00e      	beq.n	8110 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    80f2:	f44f 7181 	mov.w	r1, #258	; 0x102
    80f6:	202f      	movs	r0, #47	; 0x2f
    80f8:	f7fc fdbe 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80fc:	4807      	ldr	r0, [pc, #28]	; (811c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    80fe:	e004      	b.n	810a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    8100:	4806      	ldr	r0, [pc, #24]	; (811c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    8102:	3008      	adds	r0, #8
    8104:	e001      	b.n	810a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    8106:	4805      	ldr	r0, [pc, #20]	; (811c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    8108:	1d00      	adds	r0, r0, #4
    810a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    810e:	bd10      	pop	{r4, pc}
    8110:	f240 315a 	movw	r1, #858	; 0x35a
    8114:	fb10 f001 	smulbb	r0, r0, r1
    8118:	bd10      	pop	{r4, pc}
    811a:	0000      	.short	0x0000
    811c:	0000ec66 	.word	0x0000ec66

00008120 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>:
    8120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8124:	4604      	mov	r4, r0
    8126:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    812a:	4615      	mov	r5, r2
    812c:	460f      	mov	r7, r1
    812e:	2800      	cmp	r0, #0
    8130:	d15b      	bne.n	81ea <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xca>
    8132:	4621      	mov	r1, r4
    8134:	4843      	ldr	r0, [pc, #268]	; (8244 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x124>)
    8136:	f7fb f8c7 	bl	32c8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    813a:	4606      	mov	r6, r0
    813c:	2820      	cmp	r0, #32
    813e:	d054      	beq.n	81ea <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xca>
    8140:	2234      	movs	r2, #52	; 0x34
    8142:	2100      	movs	r1, #0
    8144:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    8148:	f004 fc66 	bl	ca18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    814c:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
    8150:	2601      	movs	r6, #1
    8152:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
    8156:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
    815a:	b15f      	cbz	r7, 8174 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x54>
    815c:	2101      	movs	r1, #1
    815e:	f507 7092 	add.w	r0, r7, #292	; 0x124
    8162:	f7fc fe31 	bl	4dc8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    8166:	f897 0124 	ldrb.w	r0, [r7, #292]	; 0x124
    816a:	f000 0007 	and.w	r0, r0, #7
    816e:	1c40      	adds	r0, r0, #1
    8170:	f887 0124 	strb.w	r0, [r7, #292]	; 0x124
    8174:	4620      	mov	r0, r4
    8176:	f006 ff5f 	bl	f038 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2dc>
    817a:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    817e:	2003      	movs	r0, #3
    8180:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    8184:	f884 60c3 	strb.w	r6, [r4, #195]	; 0xc3
    8188:	2700      	movs	r7, #0
    818a:	f804 7fb8 	strb.w	r7, [r4, #184]!
    818e:	f7fa fb07 	bl	27a0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8192:	8921      	ldrh	r1, [r4, #8]
    8194:	3cb8      	subs	r4, #184	; 0xb8
    8196:	4288      	cmp	r0, r1
    8198:	d800      	bhi.n	819c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x7c>
    819a:	4608      	mov	r0, r1
    819c:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
    81a0:	fa1f f880 	uxth.w	r8, r0
    81a4:	4620      	mov	r0, r4
    81a6:	f006 fbea 	bl	e97e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    81aa:	b308      	cbz	r0, 81f0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd0>
    81ac:	f008 f962 	bl	10474 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    81b0:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    81b4:	b281      	uxth	r1, r0
    81b6:	4628      	mov	r0, r5
    81b8:	f004 fa73 	bl	c6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    81bc:	4428      	add	r0, r5
    81be:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    81c2:	34a4      	adds	r4, #164	; 0xa4
    81c4:	f004 fa39 	bl	c63a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    81c8:	4641      	mov	r1, r8
    81ca:	f7fa f98d 	bl	24e8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    81ce:	6220      	str	r0, [r4, #32]
    81d0:	f804 7c03 	strb.w	r7, [r4, #-3]
    81d4:	7126      	strb	r6, [r4, #4]
    81d6:	2001      	movs	r0, #1
    81d8:	f006 fd3e 	bl	ec58 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    81dc:	f500 7084 	add.w	r0, r0, #264	; 0x108
    81e0:	1a28      	subs	r0, r5, r0
    81e2:	62a7      	str	r7, [r4, #40]	; 0x28
    81e4:	60a0      	str	r0, [r4, #8]
    81e6:	3ca4      	subs	r4, #164	; 0xa4
    81e8:	e017      	b.n	821a <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xfa>
    81ea:	200c      	movs	r0, #12
    81ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    81f0:	4620      	mov	r0, r4
    81f2:	f006 fe74 	bl	eede <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x182>
    81f6:	f844 0fbc 	str.w	r0, [r4, #188]!
    81fa:	f804 6c1b 	strb.w	r6, [r4, #-27]
    81fe:	f004 fa1c 	bl	c63a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8202:	4606      	mov	r6, r0
    8204:	2000      	movs	r0, #0
    8206:	f006 ffc3 	bl	f190 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x434>
    820a:	eb00 0108 	add.w	r1, r0, r8
    820e:	4630      	mov	r0, r6
    8210:	f7fa f96a 	bl	24e8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8214:	6125      	str	r5, [r4, #16]
    8216:	60a0      	str	r0, [r4, #8]
    8218:	3cbc      	subs	r4, #188	; 0xbc
    821a:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    821e:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    8222:	f006 ff07 	bl	f034 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    8226:	b138      	cbz	r0, 8238 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x118>
    8228:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
    822c:	2100      	movs	r1, #0
    822e:	4620      	mov	r0, r4
    8230:	f006 fbc7 	bl	e9c2 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    8234:	2000      	movs	r0, #0
    8236:	e7d9      	b.n	81ec <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xcc>
    8238:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    823c:	2030      	movs	r0, #48	; 0x30
    823e:	f7fc fd1b 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8242:	0000      	.short	0x0000
    8244:	00008941 	.word	0x00008941

00008248 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>:
    8248:	4803      	ldr	r0, [pc, #12]	; (8258 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x10>)
    824a:	2100      	movs	r1, #0
    824c:	7001      	strb	r1, [r0, #0]
    824e:	2201      	movs	r2, #1
    8250:	7082      	strb	r2, [r0, #2]
    8252:	7041      	strb	r1, [r0, #1]
    8254:	f006 bd6b 	b.w	ed2e <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    8258:	200000fc 	.word	0x200000fc

0000825c <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>:
    825c:	4901      	ldr	r1, [pc, #4]	; (8264 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x8>)
    825e:	7008      	strb	r0, [r1, #0]
    8260:	4770      	bx	lr
    8262:	0000      	.short	0x0000
    8264:	200000fc 	.word	0x200000fc

00008268 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>:
    8268:	4905      	ldr	r1, [pc, #20]	; (8280 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ+0x18>)
    826a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    826e:	fbb1 f1f2 	udiv	r1, r1, r2
    8272:	b510      	push	{r4, lr}
    8274:	f501 7123 	add.w	r1, r1, #652	; 0x28c
    8278:	f006 fa6a 	bl	e750 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    827c:	b280      	uxth	r0, r0
    827e:	bd10      	pop	{r4, pc}
    8280:	0001527d 	.word	0x0001527d

00008284 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    8284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8288:	4c10      	ldr	r4, [pc, #64]	; (82cc <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    828a:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    828e:	f003 fc8d 	bl	bbac <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8292:	4606      	mov	r6, r0
    8294:	7820      	ldrb	r0, [r4, #0]
    8296:	b128      	cbz	r0, 82a4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    8298:	4632      	mov	r2, r6
    829a:	4639      	mov	r1, r7
    829c:	4628      	mov	r0, r5
    829e:	f005 fdaf 	bl	de00 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    82a2:	4605      	mov	r5, r0
    82a4:	6860      	ldr	r0, [r4, #4]
    82a6:	4285      	cmp	r5, r0
    82a8:	d005      	beq.n	82b6 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    82aa:	68e1      	ldr	r1, [r4, #12]
    82ac:	1a28      	subs	r0, r5, r0
    82ae:	4408      	add	r0, r1
    82b0:	60e0      	str	r0, [r4, #12]
    82b2:	f7fb f913 	bl	34dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    82b6:	6065      	str	r5, [r4, #4]
    82b8:	42ae      	cmp	r6, r5
    82ba:	d801      	bhi.n	82c0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    82bc:	7860      	ldrb	r0, [r4, #1]
    82be:	b110      	cbz	r0, 82c6 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    82c0:	2000      	movs	r0, #0
    82c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    82c6:	2001      	movs	r0, #1
    82c8:	e7fb      	b.n	82c2 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    82ca:	0000      	.short	0x0000
    82cc:	200000fc 	.word	0x200000fc

000082d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    82d0:	b570      	push	{r4, r5, r6, lr}
    82d2:	4c22      	ldr	r4, [pc, #136]	; (835c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c>)
    82d4:	4605      	mov	r5, r0
    82d6:	2906      	cmp	r1, #6
    82d8:	d23c      	bcs.n	8354 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x84>
    82da:	e8df f001 	tbb	[pc, r1]
    82de:	0b05      	.short	0x0b05
    82e0:	250f0e03 	.word	0x250f0e03
    82e4:	2100      	movs	r1, #0
    82e6:	e000      	b.n	82ea <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a>
    82e8:	2101      	movs	r1, #1
    82ea:	4628      	mov	r0, r5
    82ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82f0:	f000 b8ec 	b.w	84cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1fc>
    82f4:	2003      	movs	r0, #3
    82f6:	f885 0134 	strb.w	r0, [r5, #308]	; 0x134
    82fa:	bd70      	pop	{r4, r5, r6, pc}
    82fc:	f003 fc8a 	bl	bc14 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    8300:	f8c5 0170 	str.w	r0, [r5, #368]	; 0x170
    8304:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    8308:	f008 f94d 	bl	105a6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    830c:	f8d5 1170 	ldr.w	r1, [r5, #368]	; 0x170
    8310:	1a08      	subs	r0, r1, r0
    8312:	6861      	ldr	r1, [r4, #4]
    8314:	4401      	add	r1, r0
    8316:	6061      	str	r1, [r4, #4]
    8318:	68a1      	ldr	r1, [r4, #8]
    831a:	4408      	add	r0, r1
    831c:	60a0      	str	r0, [r4, #8]
    831e:	4628      	mov	r0, r5
    8320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8324:	f006 be19 	b.w	ef5a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1fe>
    8328:	f003 fc40 	bl	bbac <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    832c:	4601      	mov	r1, r0
    832e:	2200      	movs	r2, #0
    8330:	69a0      	ldr	r0, [r4, #24]
    8332:	f006 fee3 	bl	f0fc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x3a0>
    8336:	69a0      	ldr	r0, [r4, #24]
    8338:	4909      	ldr	r1, [pc, #36]	; (8360 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x90>)
    833a:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    833e:	f890 00a0 	ldrb.w	r0, [r0, #160]	; 0xa0
    8342:	f7fa fe83 	bl	304c <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    8346:	2800      	cmp	r0, #0
    8348:	d1d7      	bne.n	82fa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2a>
    834a:	f240 7161 	movw	r1, #1889	; 0x761
    834e:	2030      	movs	r0, #48	; 0x30
    8350:	f7fc fc92 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8354:	f44f 61ef 	mov.w	r1, #1912	; 0x778
    8358:	e7f9      	b.n	834e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e>
    835a:	0000      	.short	0x0000
    835c:	200000fc 	.word	0x200000fc
    8360:	0000f1bb 	.word	0x0000f1bb
    8364:	b510      	push	{r4, lr}
    8366:	280c      	cmp	r0, #12
    8368:	d304      	bcc.n	8374 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa4>
    836a:	f240 3103 	movw	r1, #771	; 0x303
    836e:	2006      	movs	r0, #6
    8370:	f7fc fc82 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8374:	4901      	ldr	r1, [pc, #4]	; (837c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac>)
    8376:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    837a:	bd10      	pop	{r4, pc}
    837c:	0000f3b4 	.word	0x0000f3b4
    8380:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    8382:	4c18      	ldr	r4, [pc, #96]	; (83e4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x114>)
    8384:	2001      	movs	r0, #1
    8386:	7060      	strb	r0, [r4, #1]
    8388:	f64f 75ff 	movw	r5, #65535	; 0xffff
    838c:	e00b      	b.n	83a6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd6>
    838e:	2100      	movs	r1, #0
    8390:	f005 fadc 	bl	d94c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8394:	0006      	movs	r6, r0
    8396:	d010      	beq.n	83ba <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xea>
    8398:	f896 0168 	ldrb.w	r0, [r6, #360]	; 0x168
    839c:	f7fa fe88 	bl	30b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    83a0:	4630      	mov	r0, r6
    83a2:	f006 fe9e 	bl	f0e2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x386>
    83a6:	4669      	mov	r1, sp
    83a8:	2000      	movs	r0, #0
    83aa:	f005 fad9 	bl	d960 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    83ae:	b180      	cbz	r0, 83d2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    83b0:	f44f 7187 	mov.w	r1, #270	; 0x10e
    83b4:	2030      	movs	r0, #48	; 0x30
    83b6:	f7fc fc5f 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    83ba:	f44f 7197 	mov.w	r1, #302	; 0x12e
    83be:	e7f9      	b.n	83b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xe4>
    83c0:	9802      	ldr	r0, [sp, #8]
    83c2:	b130      	cbz	r0, 83d2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    83c4:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    83c8:	b119      	cbz	r1, 83d2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    83ca:	8800      	ldrh	r0, [r0, #0]
    83cc:	42a8      	cmp	r0, r5
    83ce:	d1de      	bne.n	838e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbe>
    83d0:	e004      	b.n	83dc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x10c>
    83d2:	4668      	mov	r0, sp
    83d4:	f7fc fe96 	bl	5104 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    83d8:	2800      	cmp	r0, #0
    83da:	d0f1      	beq.n	83c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xf0>
    83dc:	2000      	movs	r0, #0
    83de:	7060      	strb	r0, [r4, #1]
    83e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    83e2:	0000      	.short	0x0000
    83e4:	200000fc 	.word	0x200000fc
    83e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    83ec:	4604      	mov	r4, r0
    83ee:	4836      	ldr	r0, [pc, #216]	; (84c8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1f8>)
    83f0:	461e      	mov	r6, r3
    83f2:	4690      	mov	r8, r2
    83f4:	7880      	ldrb	r0, [r0, #2]
    83f6:	4689      	mov	r9, r1
    83f8:	2500      	movs	r5, #0
    83fa:	b368      	cbz	r0, 8458 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    83fc:	f7fc f8d4 	bl	45a8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    8400:	b350      	cbz	r0, 8458 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    8402:	f8b4 0120 	ldrh.w	r0, [r4, #288]	; 0x120
    8406:	2802      	cmp	r0, #2
    8408:	d326      	bcc.n	8458 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    840a:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    840e:	2802      	cmp	r0, #2
    8410:	d022      	beq.n	8458 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    8412:	f894 014a 	ldrb.w	r0, [r4, #330]	; 0x14a
    8416:	b9f8      	cbnz	r0, 8458 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    8418:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    841c:	f7ff ffa2 	bl	8364 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    8420:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    8424:	b281      	uxth	r1, r0
    8426:	8031      	strh	r1, [r6, #0]
    8428:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    842c:	2700      	movs	r7, #0
    842e:	2801      	cmp	r0, #1
    8430:	d015      	beq.n	845e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18e>
    8432:	68e0      	ldr	r0, [r4, #12]
    8434:	f004 f935 	bl	c6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8438:	f8b4 210e 	ldrh.w	r2, [r4, #270]	; 0x10e
    843c:	b280      	uxth	r0, r0
    843e:	4442      	add	r2, r8
    8440:	eba2 0109 	sub.w	r1, r2, r9
    8444:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    8448:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    844c:	1a82      	subs	r2, r0, r2
    844e:	fb01 7502 	mla	r5, r1, r2, r7
    8452:	2001      	movs	r0, #1
    8454:	f884 014a 	strb.w	r0, [r4, #330]	; 0x14a
    8458:	4628      	mov	r0, r5
    845a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    845e:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    8462:	2803      	cmp	r0, #3
    8464:	d02c      	beq.n	84c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1f0>
    8466:	2101      	movs	r1, #1
    8468:	2000      	movs	r0, #0
    846a:	f005 fd83 	bl	df74 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    846e:	6a21      	ldr	r1, [r4, #32]
    8470:	1847      	adds	r7, r0, r1
    8472:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    8476:	8831      	ldrh	r1, [r6, #0]
    8478:	34d0      	adds	r4, #208	; 0xd0
    847a:	f004 f912 	bl	c6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    847e:	6da2      	ldr	r2, [r4, #88]	; 0x58
    8480:	6e21      	ldr	r1, [r4, #96]	; 0x60
    8482:	1a82      	subs	r2, r0, r2
    8484:	fb01 5502 	mla	r5, r1, r2, r5
    8488:	65a0      	str	r0, [r4, #88]	; 0x58
    848a:	8831      	ldrh	r1, [r6, #0]
    848c:	4638      	mov	r0, r7
    848e:	f004 f908 	bl	c6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8492:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    8494:	66a0      	str	r0, [r4, #104]	; 0x68
    8496:	1a41      	subs	r1, r0, r1
    8498:	440d      	add	r5, r1
    849a:	8831      	ldrh	r1, [r6, #0]
    849c:	f854 0cc4 	ldr.w	r0, [r4, #-196]
    84a0:	f004 f8ff 	bl	c6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    84a4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    84a6:	4442      	add	r2, r8
    84a8:	eba2 0109 	sub.w	r1, r2, r9
    84ac:	6e22      	ldr	r2, [r4, #96]	; 0x60
    84ae:	1a89      	subs	r1, r1, r2
    84b0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    84b2:	1e49      	subs	r1, r1, #1
    84b4:	1a82      	subs	r2, r0, r2
    84b6:	fb01 5502 	mla	r5, r1, r2, r5
    84ba:	66e0      	str	r0, [r4, #108]	; 0x6c
    84bc:	3cd0      	subs	r4, #208	; 0xd0
    84be:	e7c8      	b.n	8452 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x182>
    84c0:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    84c4:	e7d3      	b.n	846e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x19e>
    84c6:	0000      	.short	0x0000
    84c8:	200000fc 	.word	0x200000fc
    84cc:	b538      	push	{r3, r4, r5, lr}
    84ce:	2500      	movs	r5, #0
    84d0:	4604      	mov	r4, r0
    84d2:	2901      	cmp	r1, #1
    84d4:	d102      	bne.n	84dc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x20c>
    84d6:	4811      	ldr	r0, [pc, #68]	; (851c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24c>)
    84d8:	7840      	ldrb	r0, [r0, #1]
    84da:	b178      	cbz	r0, 84fc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22c>
    84dc:	2004      	movs	r0, #4
    84de:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    84e2:	bf00      	nop
    84e4:	f006 fd32 	bl	ef4c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f0>
    84e8:	f8a4 5166 	strh.w	r5, [r4, #358]	; 0x166
    84ec:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    84f0:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    84f4:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    84f8:	77e5      	strb	r5, [r4, #31]
    84fa:	bd38      	pop	{r3, r4, r5, pc}
    84fc:	9500      	str	r5, [sp, #0]
    84fe:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    8502:	2301      	movs	r3, #1
    8504:	2200      	movs	r2, #0
    8506:	4620      	mov	r0, r4
    8508:	f000 f80a 	bl	8520 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    850c:	2800      	cmp	r0, #0
    850e:	d0e9      	beq.n	84e4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x214>
    8510:	f240 61d4 	movw	r1, #1748	; 0x6d4
    8514:	2030      	movs	r0, #48	; 0x30
    8516:	f7fc fbaf 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    851a:	0000      	.short	0x0000
    851c:	200000fc 	.word	0x200000fc
    8520:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8524:	4604      	mov	r4, r0
    8526:	b085      	sub	sp, #20
    8528:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    852c:	469a      	mov	sl, r3
    852e:	e9cd 3000 	strd	r3, r0, [sp]
    8532:	460f      	mov	r7, r1
    8534:	f007 ff9e 	bl	10474 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    8538:	4605      	mov	r5, r0
    853a:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    853e:	f7ff ff11 	bl	8364 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    8542:	4428      	add	r0, r5
    8544:	f8ad 0008 	strh.w	r0, [sp, #8]
    8548:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    854c:	280d      	cmp	r0, #13
    854e:	d004      	beq.n	855a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x28a>
    8550:	2000      	movs	r0, #0
    8552:	9003      	str	r0, [sp, #12]
    8554:	9807      	ldr	r0, [sp, #28]
    8556:	b110      	cbz	r0, 855e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x28e>
    8558:	e02e      	b.n	85b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2e8>
    855a:	2001      	movs	r0, #1
    855c:	e7f9      	b.n	8552 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x282>
    855e:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    8562:	2803      	cmp	r0, #3
    8564:	d128      	bne.n	85b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2e8>
    8566:	9803      	ldr	r0, [sp, #12]
    8568:	b330      	cbz	r0, 85b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2e8>
    856a:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
    856e:	42b8      	cmp	r0, r7
    8570:	d122      	bne.n	85b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2e8>
    8572:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    8576:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    857a:	68e0      	ldr	r0, [r4, #12]
    857c:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
    8580:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
    8584:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    8588:	4408      	add	r0, r1
    858a:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    858e:	4620      	mov	r0, r4
    8590:	f006 ff26 	bl	f3e0 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    8594:	f8d4 0198 	ldr.w	r0, [r4, #408]	; 0x198
    8598:	6220      	str	r0, [r4, #32]
    859a:	f8b4 0196 	ldrh.w	r0, [r4, #406]	; 0x196
    859e:	83a0      	strh	r0, [r4, #28]
    85a0:	f8d4 019c 	ldr.w	r0, [r4, #412]	; 0x19c
    85a4:	60e0      	str	r0, [r4, #12]
    85a6:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
    85aa:	82a0      	strh	r0, [r4, #20]
    85ac:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
    85b0:	82e0      	strh	r0, [r4, #22]
    85b2:	2002      	movs	r0, #2
    85b4:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    85b8:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    85bc:	f504 75a6 	add.w	r5, r4, #332	; 0x14c
    85c0:	1a38      	subs	r0, r7, r0
    85c2:	fa0f f980 	sxth.w	r9, r0
    85c6:	f8b4 0164 	ldrh.w	r0, [r4, #356]	; 0x164
    85ca:	1a38      	subs	r0, r7, r0
    85cc:	fa0f f880 	sxth.w	r8, r0
    85d0:	f1b8 0f00 	cmp.w	r8, #0
    85d4:	da06      	bge.n	85e4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x314>
    85d6:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    85da:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
    85de:	2001      	movs	r0, #1
    85e0:	46c8      	mov	r8, r9
    85e2:	9000      	str	r0, [sp, #0]
    85e4:	ab02      	add	r3, sp, #8
    85e6:	464a      	mov	r2, r9
    85e8:	4641      	mov	r1, r8
    85ea:	4620      	mov	r0, r4
    85ec:	f7ff fefc 	bl	83e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x118>
    85f0:	9004      	str	r0, [sp, #16]
    85f2:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    85f6:	f8df b344 	ldr.w	fp, [pc, #836]	; 893c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66c>
    85fa:	b140      	cbz	r0, 860e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x33e>
    85fc:	2801      	cmp	r0, #1
    85fe:	d07d      	beq.n	86fc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x42c>
    8600:	2802      	cmp	r0, #2
    8602:	d052      	beq.n	86aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3da>
    8604:	2803      	cmp	r0, #3
    8606:	d07a      	beq.n	86fe <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x42e>
    8608:	f240 5157 	movw	r1, #1367	; 0x557
    860c:	e192      	b.n	8934 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>
    860e:	2101      	movs	r1, #1
    8610:	2000      	movs	r0, #0
    8612:	f005 fcaf 	bl	df74 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8616:	4606      	mov	r6, r0
    8618:	6a20      	ldr	r0, [r4, #32]
    861a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    861e:	4430      	add	r0, r6
    8620:	f004 f83f 	bl	c6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8624:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    8628:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    862c:	68e0      	ldr	r0, [r4, #12]
    862e:	f004 f838 	bl	c6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8632:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    8636:	a901      	add	r1, sp, #4
    8638:	4668      	mov	r0, sp
    863a:	f003 fa1b 	bl	ba74 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    863e:	e9dd 1200 	ldrd	r1, r2, [sp]
    8642:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    8646:	f7fa ffff 	bl	3648 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    864a:	4681      	mov	r9, r0
    864c:	4620      	mov	r0, r4
    864e:	f006 fc6f 	bl	ef30 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d4>
    8652:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8656:	f8d4 816c 	ldr.w	r8, [r4, #364]	; 0x16c
    865a:	f007 ffb2 	bl	105c2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    865e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8662:	4401      	add	r1, r0
    8664:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8668:	fbb1 f0f0 	udiv	r0, r1, r0
    866c:	6a21      	ldr	r1, [r4, #32]
    866e:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    8672:	4431      	add	r1, r6
    8674:	1a08      	subs	r0, r1, r0
    8676:	1a81      	subs	r1, r0, r2
    8678:	4441      	add	r1, r8
    867a:	3920      	subs	r1, #32
    867c:	eba1 0609 	sub.w	r6, r1, r9
    8680:	0050      	lsls	r0, r2, #1
    8682:	8ba1      	ldrh	r1, [r4, #28]
    8684:	3060      	adds	r0, #96	; 0x60
    8686:	4401      	add	r1, r0
    8688:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    868c:	f006 fcc0 	bl	f010 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2b4>
    8690:	3022      	adds	r0, #34	; 0x22
    8692:	f8cb 0010 	str.w	r0, [fp, #16]
    8696:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    869a:	4659      	mov	r1, fp
    869c:	1a30      	subs	r0, r6, r0
    869e:	f5b0 7fd8 	cmp.w	r0, #432	; 0x1b0
    86a2:	d259      	bcs.n	8758 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x488>
    86a4:	f44f 619e 	mov.w	r1, #1264	; 0x4f0
    86a8:	e144      	b.n	8934 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>
    86aa:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
    86ae:	6a20      	ldr	r0, [r4, #32]
    86b0:	4408      	add	r0, r1
    86b2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    86b6:	f003 fff4 	bl	c6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    86ba:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    86be:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    86c2:	68e0      	ldr	r0, [r4, #12]
    86c4:	f003 ffed 	bl	c6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    86c8:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    86cc:	4620      	mov	r0, r4
    86ce:	f006 fc2f 	bl	ef30 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d4>
    86d2:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
    86d6:	bb10      	cbnz	r0, 871e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x44e>
    86d8:	f1ba 0f00 	cmp.w	sl, #0
    86dc:	d01f      	beq.n	871e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x44e>
    86de:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    86e2:	4640      	mov	r0, r8
    86e4:	f007 ff6d 	bl	105c2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    86e8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    86ec:	4401      	add	r1, r0
    86ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    86f2:	fbb1 f0f0 	udiv	r0, r1, r0
    86f6:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    86fa:	e001      	b.n	8700 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x430>
    86fc:	e02d      	b.n	875a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x48a>
    86fe:	e049      	b.n	8794 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4c4>
    8700:	4408      	add	r0, r1
    8702:	6a22      	ldr	r2, [r4, #32]
    8704:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
    8708:	4411      	add	r1, r2
    870a:	1a0e      	subs	r6, r1, r0
    870c:	4640      	mov	r0, r8
    870e:	f007 ff4a 	bl	105a6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8712:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    8716:	1a08      	subs	r0, r1, r0
    8718:	4406      	add	r6, r0
    871a:	3e20      	subs	r6, #32
    871c:	e006      	b.n	872c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x45c>
    871e:	6a21      	ldr	r1, [r4, #32]
    8720:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    8724:	4408      	add	r0, r1
    8726:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    872a:	1a46      	subs	r6, r0, r1
    872c:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    8730:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
    8734:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    8738:	fb01 0002 	mla	r0, r1, r2, r0
    873c:	0040      	lsls	r0, r0, #1
    873e:	8ba1      	ldrh	r1, [r4, #28]
    8740:	3060      	adds	r0, #96	; 0x60
    8742:	4401      	add	r1, r0
    8744:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8748:	f006 fc62 	bl	f010 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2b4>
    874c:	f8cb 0010 	str.w	r0, [fp, #16]
    8750:	2001      	movs	r0, #1
    8752:	4659      	mov	r1, fp
    8754:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    8758:	e062      	b.n	8820 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x550>
    875a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    875e:	68e0      	ldr	r0, [r4, #12]
    8760:	f8b4 210e 	ldrh.w	r2, [r4, #270]	; 0x10e
    8764:	1a46      	subs	r6, r0, r1
    8766:	eb02 0009 	add.w	r0, r2, r9
    876a:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    876e:	f8d4 c128 	ldr.w	ip, [r4, #296]	; 0x128
    8772:	1a80      	subs	r0, r0, r2
    8774:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    8778:	1e40      	subs	r0, r0, #1
    877a:	fb0c 3202 	mla	r2, ip, r2, r3
    877e:	fb00 2001 	mla	r0, r0, r1, r2
    8782:	0040      	lsls	r0, r0, #1
    8784:	8ba1      	ldrh	r1, [r4, #28]
    8786:	3060      	adds	r0, #96	; 0x60
    8788:	4401      	add	r1, r0
    878a:	fb06 f608 	mul.w	r6, r6, r8
    878e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8792:	e040      	b.n	8816 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x546>
    8794:	68e0      	ldr	r0, [r4, #12]
    8796:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    879a:	fb00 f008 	mul.w	r0, r0, r8
    879e:	fb08 0611 	mls	r6, r8, r1, r0
    87a2:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    87a6:	2824      	cmp	r0, #36	; 0x24
    87a8:	d003      	beq.n	87b2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4e2>
    87aa:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    87ae:	2824      	cmp	r0, #36	; 0x24
    87b0:	d109      	bne.n	87c6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4f6>
    87b2:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
    87b6:	1a38      	subs	r0, r7, r0
    87b8:	b200      	sxth	r0, r0
    87ba:	2800      	cmp	r0, #0
    87bc:	db03      	blt.n	87c6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4f6>
    87be:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
    87c2:	b100      	cbz	r0, 87c6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4f6>
    87c4:	9001      	str	r0, [sp, #4]
    87c6:	9800      	ldr	r0, [sp, #0]
    87c8:	b1d8      	cbz	r0, 8802 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x532>
    87ca:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
    87ce:	b9c0      	cbnz	r0, 8802 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x532>
    87d0:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
    87d4:	2800      	cmp	r0, #0
    87d6:	d07c      	beq.n	88d2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x602>
    87d8:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    87dc:	f007 fef1 	bl	105c2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    87e0:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    87e4:	4401      	add	r1, r0
    87e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    87ea:	fbb1 f0f0 	udiv	r0, r1, r0
    87ee:	1a36      	subs	r6, r6, r0
    87f0:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    87f4:	f007 fed7 	bl	105a6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    87f8:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    87fc:	1a08      	subs	r0, r1, r0
    87fe:	4406      	add	r6, r0
    8800:	3e20      	subs	r6, #32
    8802:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    8806:	eb01 0009 	add.w	r0, r1, r9
    880a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    880e:	4348      	muls	r0, r1
    8810:	0041      	lsls	r1, r0, #1
    8812:	3160      	adds	r1, #96	; 0x60
    8814:	9801      	ldr	r0, [sp, #4]
    8816:	f006 fbfb 	bl	f010 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2b4>
    881a:	4659      	mov	r1, fp
    881c:	f8cb 0010 	str.w	r0, [fp, #16]
    8820:	9804      	ldr	r0, [sp, #16]
    8822:	6909      	ldr	r1, [r1, #16]
    8824:	1a33      	subs	r3, r6, r0
    8826:	f8d4 613c 	ldr.w	r6, [r4, #316]	; 0x13c
    882a:	68e0      	ldr	r0, [r4, #12]
    882c:	1b80      	subs	r0, r0, r6
    882e:	f2a0 203e 	subw	r0, r0, #574	; 0x23e
    8832:	f8cb 0014 	str.w	r0, [fp, #20]
    8836:	4281      	cmp	r1, r0
    8838:	d800      	bhi.n	883c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x56c>
    883a:	4608      	mov	r0, r1
    883c:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    8840:	2000      	movs	r0, #0
    8842:	7028      	strb	r0, [r5, #0]
    8844:	2064      	movs	r0, #100	; 0x64
    8846:	8128      	strh	r0, [r5, #8]
    8848:	4619      	mov	r1, r3
    884a:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    884e:	f7f9 fe4b 	bl	24e8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8852:	60e8      	str	r0, [r5, #12]
    8854:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8858:	f005 ff4b 	bl	e6f2 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    885c:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    8860:	4408      	add	r0, r1
    8862:	6068      	str	r0, [r5, #4]
    8864:	68e8      	ldr	r0, [r5, #12]
    8866:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
    886a:	f8a4 7164 	strh.w	r7, [r4, #356]	; 0x164
    886e:	2001      	movs	r0, #1
    8870:	72a8      	strb	r0, [r5, #10]
    8872:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
    8876:	1bc9      	subs	r1, r1, r7
    8878:	b209      	sxth	r1, r1
    887a:	2900      	cmp	r1, #0
    887c:	dd01      	ble.n	8882 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5b2>
    887e:	2103      	movs	r1, #3
    8880:	72a9      	strb	r1, [r5, #10]
    8882:	9903      	ldr	r1, [sp, #12]
    8884:	b331      	cbz	r1, 88d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x604>
    8886:	f1ba 0f00 	cmp.w	sl, #0
    888a:	d026      	beq.n	88da <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x60a>
    888c:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
    8890:	b392      	cbz	r2, 88f8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x628>
    8892:	f8b4 1122 	ldrh.w	r1, [r4, #290]	; 0x122
    8896:	bf00      	nop
    8898:	f8a4 1122 	strh.w	r1, [r4, #290]	; 0x122
    889c:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
    88a0:	1c49      	adds	r1, r1, #1
    88a2:	434b      	muls	r3, r1
    88a4:	4293      	cmp	r3, r2
    88a6:	d218      	bcs.n	88da <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x60a>
    88a8:	7aa9      	ldrb	r1, [r5, #10]
    88aa:	1e49      	subs	r1, r1, #1
    88ac:	2900      	cmp	r1, #0
    88ae:	dd14      	ble.n	88da <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x60a>
    88b0:	72a8      	strb	r0, [r5, #10]
    88b2:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    88b6:	2101      	movs	r1, #1
    88b8:	1c40      	adds	r0, r0, #1
    88ba:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    88be:	f504 7092 	add.w	r0, r4, #292	; 0x124
    88c2:	f7fc fa65 	bl	4d90 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    88c6:	f894 0124 	ldrb.w	r0, [r4, #292]	; 0x124
    88ca:	f000 0007 	and.w	r0, r0, #7
    88ce:	1c40      	adds	r0, r0, #1
    88d0:	e001      	b.n	88d6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x606>
    88d2:	e012      	b.n	88fa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x62a>
    88d4:	e014      	b.n	8900 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x630>
    88d6:	f884 0124 	strb.w	r0, [r4, #292]	; 0x124
    88da:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    88de:	4629      	mov	r1, r5
    88e0:	f006 fba8 	bl	f034 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    88e4:	b320      	cbz	r0, 8930 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x660>
    88e6:	9807      	ldr	r0, [sp, #28]
    88e8:	f080 0001 	eor.w	r0, r0, #1
    88ec:	f884 0148 	strb.w	r0, [r4, #328]	; 0x148
    88f0:	2000      	movs	r0, #0
    88f2:	b009      	add	sp, #36	; 0x24
    88f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    88f8:	e018      	b.n	892c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x65c>
    88fa:	f240 5142 	movw	r1, #1346	; 0x542
    88fe:	e019      	b.n	8934 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>
    8900:	f1ba 0f00 	cmp.w	sl, #0
    8904:	d1c2      	bne.n	888c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5bc>
    8906:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    890a:	2800      	cmp	r0, #0
    890c:	d0e5      	beq.n	88da <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x60a>
    890e:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    8912:	68e0      	ldr	r0, [r4, #12]
    8914:	1a41      	subs	r1, r0, r1
    8916:	4628      	mov	r0, r5
    8918:	f005 fb3e 	bl	df98 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    891c:	0400      	lsls	r0, r0, #16
    891e:	0c00      	lsrs	r0, r0, #16
    8920:	d0db      	beq.n	88da <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x60a>
    8922:	9912      	ldr	r1, [sp, #72]	; 0x48
    8924:	b101      	cbz	r1, 8928 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x658>
    8926:	8008      	strh	r0, [r1, #0]
    8928:	2001      	movs	r0, #1
    892a:	e7e2      	b.n	88f2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x622>
    892c:	2100      	movs	r1, #0
    892e:	e7b3      	b.n	8898 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5c8>
    8930:	f240 51a2 	movw	r1, #1442	; 0x5a2
    8934:	2030      	movs	r0, #48	; 0x30
    8936:	f7fc f99f 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    893a:	0000      	.short	0x0000
    893c:	200000fc 	.word	0x200000fc
    8940:	b570      	push	{r4, r5, r6, lr}
    8942:	b140      	cbz	r0, 8956 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x686>
    8944:	2909      	cmp	r1, #9
    8946:	d24a      	bcs.n	89de <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70e>
    8948:	e8df f001 	tbb	[pc, r1]
    894c:	3d3d1707 	.word	0x3d3d1707
    8950:	412b4939 	.word	0x412b4939
    8954:	0045      	.short	0x0045
    8956:	21d3      	movs	r1, #211	; 0xd3
    8958:	e03e      	b.n	89d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x708>
    895a:	4922      	ldr	r1, [pc, #136]	; (89e4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x714>)
    895c:	4604      	mov	r4, r0
    895e:	6188      	str	r0, [r1, #24]
    8960:	f7fe fe0e 	bl	7580 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    8964:	b110      	cbz	r0, 896c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x69c>
    8966:	f240 217f 	movw	r1, #639	; 0x27f
    896a:	e035      	b.n	89d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x708>
    896c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    8970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8974:	38f7      	subs	r0, #247	; 0xf7
    8976:	f7fa bdb1 	b.w	34dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    897a:	4605      	mov	r5, r0
    897c:	f005 ffff 	bl	e97e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    8980:	b9a8      	cbnz	r0, 89ae <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6de>
    8982:	4628      	mov	r0, r5
    8984:	f006 faab 	bl	eede <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x182>
    8988:	4604      	mov	r4, r0
    898a:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    898e:	42a0      	cmp	r0, r4
    8990:	d20b      	bcs.n	89aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6da>
    8992:	1a20      	subs	r0, r4, r0
    8994:	2104      	movs	r1, #4
    8996:	f7f9 fcd5 	bl	2344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    899a:	b130      	cbz	r0, 89aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6da>
    899c:	4628      	mov	r0, r5
    899e:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    89a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    89a6:	f005 bfbf 	b.w	e928 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    89aa:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    89ae:	4628      	mov	r0, r5
    89b0:	f7fe fe02 	bl	75b8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    89b4:	2800      	cmp	r0, #0
    89b6:	d014      	beq.n	89e2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x712>
    89b8:	f240 21b3 	movw	r1, #691	; 0x2b3
    89bc:	e00c      	b.n	89d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x708>
    89be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    89c2:	f003 badd 	b.w	bf80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    89c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    89ca:	f006 ba24 	b.w	ee16 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xba>
    89ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    89d2:	f006 ba7b 	b.w	eecc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x170>
    89d6:	21f5      	movs	r1, #245	; 0xf5
    89d8:	2030      	movs	r0, #48	; 0x30
    89da:	f7fc f94d 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89de:	21f9      	movs	r1, #249	; 0xf9
    89e0:	e7fa      	b.n	89d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x708>
    89e2:	bd70      	pop	{r4, r5, r6, pc}
    89e4:	200000fc 	.word	0x200000fc
    89e8:	b570      	push	{r4, r5, r6, lr}
    89ea:	4604      	mov	r4, r0
    89ec:	f7f9 fed8 	bl	27a0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    89f0:	2864      	cmp	r0, #100	; 0x64
    89f2:	d901      	bls.n	89f8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x728>
    89f4:	4605      	mov	r5, r0
    89f6:	e000      	b.n	89fa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x72a>
    89f8:	2564      	movs	r5, #100	; 0x64
    89fa:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    89fe:	2128      	movs	r1, #40	; 0x28
    8a00:	f006 fa07 	bl	ee12 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    8a04:	4428      	add	r0, r5
    8a06:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    8a0a:	f500 700e 	add.w	r0, r0, #568	; 0x238
    8a0e:	180e      	adds	r6, r1, r0
    8a10:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8a14:	2128      	movs	r1, #40	; 0x28
    8a16:	f006 f9fc 	bl	ee12 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    8a1a:	f500 7227 	add.w	r2, r0, #668	; 0x29c
    8a1e:	4620      	mov	r0, r4
    8a20:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    8a22:	f005 fe05 	bl	e630 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8a26:	4605      	mov	r5, r0
    8a28:	4632      	mov	r2, r6
    8a2a:	4620      	mov	r0, r4
    8a2c:	68e1      	ldr	r1, [r4, #12]
    8a2e:	f005 fdff 	bl	e630 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8a32:	4907      	ldr	r1, [pc, #28]	; (8a50 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x780>)
    8a34:	4285      	cmp	r5, r0
    8a36:	6088      	str	r0, [r1, #8]
    8a38:	d200      	bcs.n	8a3c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x76c>
    8a3a:	4628      	mov	r0, r5
    8a3c:	6048      	str	r0, [r1, #4]
    8a3e:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    8a42:	f2a0 1065 	subw	r0, r0, #357	; 0x165
    8a46:	60c8      	str	r0, [r1, #12]
    8a48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8a4c:	f7fa bd46 	b.w	34dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8a50:	200000fc 	.word	0x200000fc

00008a54 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    8a54:	4806      	ldr	r0, [pc, #24]	; (8a70 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    8a56:	4905      	ldr	r1, [pc, #20]	; (8a6c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    8a58:	6501      	str	r1, [r0, #80]	; 0x50
    8a5a:	4906      	ldr	r1, [pc, #24]	; (8a74 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    8a5c:	6541      	str	r1, [r0, #84]	; 0x54
    8a5e:	4807      	ldr	r0, [pc, #28]	; (8a7c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    8a60:	4905      	ldr	r1, [pc, #20]	; (8a78 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    8a62:	6501      	str	r1, [r0, #80]	; 0x50
    8a64:	4906      	ldr	r1, [pc, #24]	; (8a80 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    8a66:	6541      	str	r1, [r0, #84]	; 0x54
    8a68:	4770      	bx	lr
    8a6a:	0000      	.short	0x0000
    8a6c:	00009fb5 	.word	0x00009fb5
    8a70:	2000012c 	.word	0x2000012c
    8a74:	0000a091 	.word	0x0000a091
    8a78:	0000a6ed 	.word	0x0000a6ed
    8a7c:	20000190 	.word	0x20000190
    8a80:	0000a71d 	.word	0x0000a71d

00008a84 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    8a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a86:	460d      	mov	r5, r1
    8a88:	4607      	mov	r7, r0
    8a8a:	2100      	movs	r1, #0
    8a8c:	f004 ff5e 	bl	d94c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8a90:	1e04      	subs	r4, r0, #0
    8a92:	d04f      	beq.n	8b34 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    8a94:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
    8a98:	2800      	cmp	r0, #0
    8a9a:	d04b      	beq.n	8b34 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    8a9c:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    8aa0:	f88d 0000 	strb.w	r0, [sp]
    8aa4:	9800      	ldr	r0, [sp, #0]
    8aa6:	9000      	str	r0, [sp, #0]
    8aa8:	f89d 0000 	ldrb.w	r0, [sp]
    8aac:	2600      	movs	r6, #0
    8aae:	b1d8      	cbz	r0, 8ae8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x64>
    8ab0:	706e      	strb	r6, [r5, #1]
    8ab2:	2007      	movs	r0, #7
    8ab4:	7028      	strb	r0, [r5, #0]
    8ab6:	e00b      	b.n	8ad0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4c>
    8ab8:	f884 61b8 	strb.w	r6, [r4, #440]	; 0x1b8
    8abc:	84a6      	strh	r6, [r4, #36]	; 0x24
    8abe:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
    8ac2:	6068      	str	r0, [r5, #4]
    8ac4:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
    8ac8:	60a8      	str	r0, [r5, #8]
    8aca:	f8b4 01c2 	ldrh.w	r0, [r4, #450]	; 0x1c2
    8ace:	81a8      	strh	r0, [r5, #12]
    8ad0:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    8ad4:	f88d 0000 	strb.w	r0, [sp]
    8ad8:	9800      	ldr	r0, [sp, #0]
    8ada:	9000      	str	r0, [sp, #0]
    8adc:	f89d 0000 	ldrb.w	r0, [sp]
    8ae0:	2800      	cmp	r0, #0
    8ae2:	d1e9      	bne.n	8ab8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    8ae4:	712e      	strb	r6, [r5, #4]
    8ae6:	e10b      	b.n	8d00 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8ae8:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    8aec:	b3a0      	cbz	r0, 8b58 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd4>
    8aee:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    8af2:	280b      	cmp	r0, #11
    8af4:	d016      	beq.n	8b24 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    8af6:	280c      	cmp	r0, #12
    8af8:	d004      	beq.n	8b04 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    8afa:	f640 21e9 	movw	r1, #2793	; 0xae9
    8afe:	2031      	movs	r0, #49	; 0x31
    8b00:	f7fc f8ba 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b04:	8820      	ldrh	r0, [r4, #0]
    8b06:	f7fc fcdf 	bl	54c8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8b0a:	4607      	mov	r7, r0
    8b0c:	f004 fde4 	bl	d6d8 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    8b10:	b978      	cbnz	r0, 8b32 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xae>
    8b12:	706e      	strb	r6, [r5, #1]
    8b14:	200c      	movs	r0, #12
    8b16:	7028      	strb	r0, [r5, #0]
    8b18:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    8b1c:	7128      	strb	r0, [r5, #4]
    8b1e:	8820      	ldrh	r0, [r4, #0]
    8b20:	80e8      	strh	r0, [r5, #6]
    8b22:	e013      	b.n	8b4c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xc8>
    8b24:	8820      	ldrh	r0, [r4, #0]
    8b26:	f7fc fccf 	bl	54c8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8b2a:	4607      	mov	r7, r0
    8b2c:	f004 fdd4 	bl	d6d8 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    8b30:	b108      	cbz	r0, 8b36 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    8b32:	2000      	movs	r0, #0
    8b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8b36:	706e      	strb	r6, [r5, #1]
    8b38:	200b      	movs	r0, #11
    8b3a:	7028      	strb	r0, [r5, #0]
    8b3c:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    8b40:	7128      	strb	r0, [r5, #4]
    8b42:	8820      	ldrh	r0, [r4, #0]
    8b44:	80e8      	strh	r0, [r5, #6]
    8b46:	f894 01ca 	ldrb.w	r0, [r4, #458]	; 0x1ca
    8b4a:	7228      	strb	r0, [r5, #8]
    8b4c:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
    8b50:	4638      	mov	r0, r7
    8b52:	f004 fddc 	bl	d70e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    8b56:	e0d3      	b.n	8d00 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8b58:	e7ff      	b.n	8b5a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    8b5a:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    8b5e:	f88d 0000 	strb.w	r0, [sp]
    8b62:	9800      	ldr	r0, [sp, #0]
    8b64:	9000      	str	r0, [sp, #0]
    8b66:	f89d 0000 	ldrb.w	r0, [sp]
    8b6a:	b130      	cbz	r0, 8b7a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    8b6c:	706e      	strb	r6, [r5, #1]
    8b6e:	200e      	movs	r0, #14
    8b70:	7028      	strb	r0, [r5, #0]
    8b72:	80af      	strh	r7, [r5, #4]
    8b74:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
    8b78:	e0c2      	b.n	8d00 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8b7a:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
    8b7e:	f88d 0000 	strb.w	r0, [sp]
    8b82:	9800      	ldr	r0, [sp, #0]
    8b84:	9000      	str	r0, [sp, #0]
    8b86:	f89d 0000 	ldrb.w	r0, [sp]
    8b8a:	b198      	cbz	r0, 8bb4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    8b8c:	706e      	strb	r6, [r5, #1]
    8b8e:	2008      	movs	r0, #8
    8b90:	7028      	strb	r0, [r5, #0]
    8b92:	8820      	ldrh	r0, [r4, #0]
    8b94:	80a8      	strh	r0, [r5, #4]
    8b96:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    8b9a:	f8c5 1006 	str.w	r1, [r5, #6]
    8b9e:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
    8ba2:	f8c5 100a 	str.w	r1, [r5, #10]
    8ba6:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
    8baa:	81e8      	strh	r0, [r5, #14]
    8bac:	f504 74e6 	add.w	r4, r4, #460	; 0x1cc
    8bb0:	7026      	strb	r6, [r4, #0]
    8bb2:	e0a5      	b.n	8d00 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8bb4:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    8bb8:	f88d 0000 	strb.w	r0, [sp]
    8bbc:	9800      	ldr	r0, [sp, #0]
    8bbe:	9000      	str	r0, [sp, #0]
    8bc0:	f89d 0000 	ldrb.w	r0, [sp]
    8bc4:	b1a0      	cbz	r0, 8bf0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
    8bc6:	706e      	strb	r6, [r5, #1]
    8bc8:	2016      	movs	r0, #22
    8bca:	7028      	strb	r0, [r5, #0]
    8bcc:	e005      	b.n	8bda <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x156>
    8bce:	bf00      	nop
    8bd0:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
    8bd4:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
    8bd8:	6068      	str	r0, [r5, #4]
    8bda:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    8bde:	f88d 0000 	strb.w	r0, [sp]
    8be2:	9800      	ldr	r0, [sp, #0]
    8be4:	9000      	str	r0, [sp, #0]
    8be6:	f89d 0000 	ldrb.w	r0, [sp]
    8bea:	2800      	cmp	r0, #0
    8bec:	d1f0      	bne.n	8bd0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14c>
    8bee:	e087      	b.n	8d00 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8bf0:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
    8bf4:	f88d 0000 	strb.w	r0, [sp]
    8bf8:	9800      	ldr	r0, [sp, #0]
    8bfa:	9000      	str	r0, [sp, #0]
    8bfc:	f89d 0000 	ldrb.w	r0, [sp]
    8c00:	b170      	cbz	r0, 8c20 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x19c>
    8c02:	706e      	strb	r6, [r5, #1]
    8c04:	2006      	movs	r0, #6
    8c06:	7028      	strb	r0, [r5, #0]
    8c08:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    8c0c:	6068      	str	r0, [r5, #4]
    8c0e:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
    8c12:	60a8      	str	r0, [r5, #8]
    8c14:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
    8c18:	60e8      	str	r0, [r5, #12]
    8c1a:	f504 7403 	add.w	r4, r4, #524	; 0x20c
    8c1e:	e03a      	b.n	8c96 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x212>
    8c20:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    8c24:	f88d 0000 	strb.w	r0, [sp]
    8c28:	9800      	ldr	r0, [sp, #0]
    8c2a:	9000      	str	r0, [sp, #0]
    8c2c:	f89d 0000 	ldrb.w	r0, [sp]
    8c30:	b1d0      	cbz	r0, 8c68 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
    8c32:	706e      	strb	r6, [r5, #1]
    8c34:	2012      	movs	r0, #18
    8c36:	7028      	strb	r0, [r5, #0]
    8c38:	e00b      	b.n	8c52 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ce>
    8c3a:	bf00      	nop
    8c3c:	f884 61da 	strb.w	r6, [r4, #474]	; 0x1da
    8c40:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
    8c44:	6068      	str	r0, [r5, #4]
    8c46:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
    8c4a:	60a8      	str	r0, [r5, #8]
    8c4c:	f8d4 01e4 	ldr.w	r0, [r4, #484]	; 0x1e4
    8c50:	60e8      	str	r0, [r5, #12]
    8c52:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    8c56:	f88d 0000 	strb.w	r0, [sp]
    8c5a:	9800      	ldr	r0, [sp, #0]
    8c5c:	9000      	str	r0, [sp, #0]
    8c5e:	f89d 0000 	ldrb.w	r0, [sp]
    8c62:	2800      	cmp	r0, #0
    8c64:	d1ea      	bne.n	8c3c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b8>
    8c66:	e04b      	b.n	8d00 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8c68:	f894 01e8 	ldrb.w	r0, [r4, #488]	; 0x1e8
    8c6c:	f88d 0000 	strb.w	r0, [sp]
    8c70:	9800      	ldr	r0, [sp, #0]
    8c72:	9000      	str	r0, [sp, #0]
    8c74:	f89d 0000 	ldrb.w	r0, [sp]
    8c78:	b180      	cbz	r0, 8c9c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x218>
    8c7a:	706e      	strb	r6, [r5, #1]
    8c7c:	2018      	movs	r0, #24
    8c7e:	7028      	strb	r0, [r5, #0]
    8c80:	f8d4 01ea 	ldr.w	r0, [r4, #490]	; 0x1ea
    8c84:	6068      	str	r0, [r5, #4]
    8c86:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
    8c8a:	60a8      	str	r0, [r5, #8]
    8c8c:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    8c90:	81a8      	strh	r0, [r5, #12]
    8c92:	f504 74f5 	add.w	r4, r4, #490	; 0x1ea
    8c96:	f804 6c02 	strb.w	r6, [r4, #-2]
    8c9a:	e031      	b.n	8d00 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8c9c:	f894 01fc 	ldrb.w	r0, [r4, #508]	; 0x1fc
    8ca0:	f88d 0000 	strb.w	r0, [sp]
    8ca4:	9800      	ldr	r0, [sp, #0]
    8ca6:	9000      	str	r0, [sp, #0]
    8ca8:	f89d 0000 	ldrb.w	r0, [sp]
    8cac:	b138      	cbz	r0, 8cbe <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x23a>
    8cae:	2019      	movs	r0, #25
    8cb0:	7028      	strb	r0, [r5, #0]
    8cb2:	f8d4 01fe 	ldr.w	r0, [r4, #510]	; 0x1fe
    8cb6:	6068      	str	r0, [r5, #4]
    8cb8:	f884 61fc 	strb.w	r6, [r4, #508]	; 0x1fc
    8cbc:	e020      	b.n	8d00 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8cbe:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    8cc2:	f88d 0000 	strb.w	r0, [sp]
    8cc6:	9800      	ldr	r0, [sp, #0]
    8cc8:	9000      	str	r0, [sp, #0]
    8cca:	f89d 0000 	ldrb.w	r0, [sp]
    8cce:	2800      	cmp	r0, #0
    8cd0:	f43f af30 	beq.w	8b34 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    8cd4:	706e      	strb	r6, [r5, #1]
    8cd6:	2013      	movs	r0, #19
    8cd8:	7028      	strb	r0, [r5, #0]
    8cda:	e007      	b.n	8cec <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x268>
    8cdc:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
    8ce0:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
    8ce4:	6068      	str	r0, [r5, #4]
    8ce6:	f8b4 0208 	ldrh.w	r0, [r4, #520]	; 0x208
    8cea:	8128      	strh	r0, [r5, #8]
    8cec:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    8cf0:	f88d 0000 	strb.w	r0, [sp]
    8cf4:	9800      	ldr	r0, [sp, #0]
    8cf6:	9000      	str	r0, [sp, #0]
    8cf8:	f89d 0000 	ldrb.w	r0, [sp]
    8cfc:	2800      	cmp	r0, #0
    8cfe:	d1ed      	bne.n	8cdc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x258>
    8d00:	2001      	movs	r0, #1
    8d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008d04 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    8d04:	481b      	ldr	r0, [pc, #108]	; (8d74 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x70>)
    8d06:	491a      	ldr	r1, [pc, #104]	; (8d70 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x6c>)
    8d08:	6081      	str	r1, [r0, #8]
    8d0a:	491b      	ldr	r1, [pc, #108]	; (8d78 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    8d0c:	6041      	str	r1, [r0, #4]
    8d0e:	491b      	ldr	r1, [pc, #108]	; (8d7c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    8d10:	6001      	str	r1, [r0, #0]
    8d12:	491b      	ldr	r1, [pc, #108]	; (8d80 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    8d14:	6281      	str	r1, [r0, #40]	; 0x28
    8d16:	491b      	ldr	r1, [pc, #108]	; (8d84 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    8d18:	62c1      	str	r1, [r0, #44]	; 0x2c
    8d1a:	491b      	ldr	r1, [pc, #108]	; (8d88 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    8d1c:	60c1      	str	r1, [r0, #12]
    8d1e:	491b      	ldr	r1, [pc, #108]	; (8d8c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    8d20:	6181      	str	r1, [r0, #24]
    8d22:	491b      	ldr	r1, [pc, #108]	; (8d90 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    8d24:	6301      	str	r1, [r0, #48]	; 0x30
    8d26:	491b      	ldr	r1, [pc, #108]	; (8d94 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    8d28:	6201      	str	r1, [r0, #32]
    8d2a:	491b      	ldr	r1, [pc, #108]	; (8d98 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    8d2c:	64c1      	str	r1, [r0, #76]	; 0x4c
    8d2e:	491b      	ldr	r1, [pc, #108]	; (8d9c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    8d30:	6481      	str	r1, [r0, #72]	; 0x48
    8d32:	491b      	ldr	r1, [pc, #108]	; (8da0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    8d34:	6441      	str	r1, [r0, #68]	; 0x44
    8d36:	491b      	ldr	r1, [pc, #108]	; (8da4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    8d38:	6341      	str	r1, [r0, #52]	; 0x34
    8d3a:	491b      	ldr	r1, [pc, #108]	; (8da8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    8d3c:	61c1      	str	r1, [r0, #28]
    8d3e:	481c      	ldr	r0, [pc, #112]	; (8db0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    8d40:	491a      	ldr	r1, [pc, #104]	; (8dac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    8d42:	6081      	str	r1, [r0, #8]
    8d44:	491b      	ldr	r1, [pc, #108]	; (8db4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    8d46:	61c1      	str	r1, [r0, #28]
    8d48:	491b      	ldr	r1, [pc, #108]	; (8db8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    8d4a:	6241      	str	r1, [r0, #36]	; 0x24
    8d4c:	491b      	ldr	r1, [pc, #108]	; (8dbc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    8d4e:	62c1      	str	r1, [r0, #44]	; 0x2c
    8d50:	491b      	ldr	r1, [pc, #108]	; (8dc0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    8d52:	6101      	str	r1, [r0, #16]
    8d54:	491b      	ldr	r1, [pc, #108]	; (8dc4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    8d56:	6141      	str	r1, [r0, #20]
    8d58:	491b      	ldr	r1, [pc, #108]	; (8dc8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    8d5a:	6441      	str	r1, [r0, #68]	; 0x44
    8d5c:	6341      	str	r1, [r0, #52]	; 0x34
    8d5e:	491b      	ldr	r1, [pc, #108]	; (8dcc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    8d60:	6181      	str	r1, [r0, #24]
    8d62:	491b      	ldr	r1, [pc, #108]	; (8dd0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    8d64:	6301      	str	r1, [r0, #48]	; 0x30
    8d66:	491b      	ldr	r1, [pc, #108]	; (8dd4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    8d68:	6481      	str	r1, [r0, #72]	; 0x48
    8d6a:	491b      	ldr	r1, [pc, #108]	; (8dd8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    8d6c:	64c1      	str	r1, [r0, #76]	; 0x4c
    8d6e:	4770      	bx	lr
    8d70:	0000a441 	.word	0x0000a441
    8d74:	2000012c 	.word	0x2000012c
    8d78:	00009d7d 	.word	0x00009d7d
    8d7c:	00009dd9 	.word	0x00009dd9
    8d80:	0000a159 	.word	0x0000a159
    8d84:	0000a19d 	.word	0x0000a19d
    8d88:	00009e85 	.word	0x00009e85
    8d8c:	0000a419 	.word	0x0000a419
    8d90:	0000a55d 	.word	0x0000a55d
    8d94:	00009f31 	.word	0x00009f31
    8d98:	0000a12d 	.word	0x0000a12d
    8d9c:	0000a101 	.word	0x0000a101
    8da0:	0000a3d9 	.word	0x0000a3d9
    8da4:	0000a409 	.word	0x0000a409
    8da8:	0000a475 	.word	0x0000a475
    8dac:	0000a8d5 	.word	0x0000a8d5
    8db0:	20000190 	.word	0x20000190
    8db4:	0000a8fd 	.word	0x0000a8fd
    8db8:	0000a6bd 	.word	0x0000a6bd
    8dbc:	0000a795 	.word	0x0000a795
    8dc0:	0000a691 	.word	0x0000a691
    8dc4:	0000a83d 	.word	0x0000a83d
    8dc8:	0000a819 	.word	0x0000a819
    8dcc:	0000a861 	.word	0x0000a861
    8dd0:	0000a955 	.word	0x0000a955
    8dd4:	0000a74d 	.word	0x0000a74d
    8dd8:	0000a77d 	.word	0x0000a77d

00008ddc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    8ddc:	4806      	ldr	r0, [pc, #24]	; (8df8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    8dde:	4905      	ldr	r1, [pc, #20]	; (8df4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    8de0:	6581      	str	r1, [r0, #88]	; 0x58
    8de2:	4906      	ldr	r1, [pc, #24]	; (8dfc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    8de4:	6601      	str	r1, [r0, #96]	; 0x60
    8de6:	4807      	ldr	r0, [pc, #28]	; (8e04 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    8de8:	4905      	ldr	r1, [pc, #20]	; (8e00 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    8dea:	6581      	str	r1, [r0, #88]	; 0x58
    8dec:	4906      	ldr	r1, [pc, #24]	; (8e08 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    8dee:	65c1      	str	r1, [r0, #92]	; 0x5c
    8df0:	4770      	bx	lr
    8df2:	0000      	.short	0x0000
    8df4:	0000a1bd 	.word	0x0000a1bd
    8df8:	2000012c 	.word	0x2000012c
    8dfc:	0000a295 	.word	0x0000a295
    8e00:	0000a7c1 	.word	0x0000a7c1
    8e04:	20000190 	.word	0x20000190
    8e08:	0000a7f1 	.word	0x0000a7f1

00008e0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    8e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8e10:	2601      	movs	r6, #1
    8e12:	4c7c      	ldr	r4, [pc, #496]	; (9004 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    8e14:	2500      	movs	r5, #0
    8e16:	f366 0107 	bfi	r1, r6, #0, #8
    8e1a:	8065      	strh	r5, [r4, #2]
    8e1c:	7065      	strb	r5, [r4, #1]
    8e1e:	7025      	strb	r5, [r4, #0]
    8e20:	60a0      	str	r0, [r4, #8]
    8e22:	4689      	mov	r9, r1
    8e24:	4680      	mov	r8, r0
    8e26:	f880 6103 	strb.w	r6, [r0, #259]	; 0x103
    8e2a:	8800      	ldrh	r0, [r0, #0]
    8e2c:	f7fc fb62 	bl	54f4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8e30:	b180      	cbz	r0, 8e54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    8e32:	68a0      	ldr	r0, [r4, #8]
    8e34:	8800      	ldrh	r0, [r0, #0]
    8e36:	f7fc fdfb 	bl	5a30 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    8e3a:	68a0      	ldr	r0, [r4, #8]
    8e3c:	8800      	ldrh	r0, [r0, #0]
    8e3e:	f7fc fd9f 	bl	5980 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    8e42:	68a0      	ldr	r0, [r4, #8]
    8e44:	f8b0 10fa 	ldrh.w	r1, [r0, #250]	; 0xfa
    8e48:	b1c9      	cbz	r1, 8e7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    8e4a:	3070      	adds	r0, #112	; 0x70
    8e4c:	f006 fb0c 	bl	f468 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8e50:	b118      	cbz	r0, 8e5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e>
    8e52:	e014      	b.n	8e7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    8e54:	f640 31c4 	movw	r1, #3012	; 0xbc4
    8e58:	e06b      	b.n	8f32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x126>
    8e5a:	68a0      	ldr	r0, [r4, #8]
    8e5c:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    8e60:	f88d 1000 	strb.w	r1, [sp]
    8e64:	9900      	ldr	r1, [sp, #0]
    8e66:	9100      	str	r1, [sp, #0]
    8e68:	f89d 1000 	ldrb.w	r1, [sp]
    8e6c:	b139      	cbz	r1, 8e7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    8e6e:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    8e72:	2301      	movs	r3, #1
    8e74:	4619      	mov	r1, r3
    8e76:	3070      	adds	r0, #112	; 0x70
    8e78:	f004 ffd5 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e7c:	b180      	cbz	r0, 8ea0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94>
    8e7e:	68a0      	ldr	r0, [r4, #8]
    8e80:	3070      	adds	r0, #112	; 0x70
    8e82:	f006 faf1 	bl	f468 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8e86:	b128      	cbz	r0, 8e94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88>
    8e88:	68a0      	ldr	r0, [r4, #8]
    8e8a:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    8e8e:	bf00      	nop
    8e90:	f000 fbb0 	bl	95f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>
    8e94:	68a0      	ldr	r0, [r4, #8]
    8e96:	f890 1105 	ldrb.w	r1, [r0, #261]	; 0x105
    8e9a:	b189      	cbz	r1, 8ec0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb4>
    8e9c:	80a5      	strh	r5, [r4, #4]
    8e9e:	e01e      	b.n	8ede <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2>
    8ea0:	68a0      	ldr	r0, [r4, #8]
    8ea2:	f8a0 50a8 	strh.w	r5, [r0, #168]	; 0xa8
    8ea6:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    8eaa:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
    8eae:	2100      	movs	r1, #0
    8eb0:	2002      	movs	r0, #2
    8eb2:	f000 fe41 	bl	9b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    8eb6:	68a0      	ldr	r0, [r4, #8]
    8eb8:	f880 5102 	strb.w	r5, [r0, #258]	; 0x102
    8ebc:	2002      	movs	r0, #2
    8ebe:	e7e7      	b.n	8e90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    8ec0:	f890 11b8 	ldrb.w	r1, [r0, #440]	; 0x1b8
    8ec4:	f88d 1000 	strb.w	r1, [sp]
    8ec8:	9900      	ldr	r1, [sp, #0]
    8eca:	9100      	str	r1, [sp, #0]
    8ecc:	f89d 1000 	ldrb.w	r1, [sp]
    8ed0:	b919      	cbnz	r1, 8eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    8ed2:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    8ed4:	8a82      	ldrh	r2, [r0, #20]
    8ed6:	4291      	cmp	r1, r2
    8ed8:	d800      	bhi.n	8edc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0>
    8eda:	8a81      	ldrh	r1, [r0, #20]
    8edc:	80a1      	strh	r1, [r4, #4]
    8ede:	f830 1ffe 	ldrh.w	r1, [r0, #254]!
    8ee2:	1e49      	subs	r1, r1, #1
    8ee4:	b28f      	uxth	r7, r1
    8ee6:	f830 1f02 	ldrh.w	r1, [r0, #2]!
    8eea:	4439      	add	r1, r7
    8eec:	f820 195c 	strh.w	r1, [r0], #-92
    8ef0:	8801      	ldrh	r1, [r0, #0]
    8ef2:	4439      	add	r1, r7
    8ef4:	8001      	strh	r1, [r0, #0]
    8ef6:	f001 fd5b 	bl	a9b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba4>
    8efa:	b120      	cbz	r0, 8f06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfa>
    8efc:	68a0      	ldr	r0, [r4, #8]
    8efe:	f850 1f98 	ldr.w	r1, [r0, #152]!
    8f02:	4439      	add	r1, r7
    8f04:	6001      	str	r1, [r0, #0]
    8f06:	68a1      	ldr	r1, [r4, #8]
    8f08:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
    8f0c:	2801      	cmp	r0, #1
    8f0e:	d802      	bhi.n	8f16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a>
    8f10:	1c40      	adds	r0, r0, #1
    8f12:	f8a1 00fa 	strh.w	r0, [r1, #250]	; 0xfa
    8f16:	b10f      	cbz	r7, 8f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x110>
    8f18:	f881 510c 	strb.w	r5, [r1, #268]	; 0x10c
    8f1c:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
    8f20:	f8b1 20fe 	ldrh.w	r2, [r1, #254]	; 0xfe
    8f24:	f101 0070 	add.w	r0, r1, #112	; 0x70
    8f28:	f005 f8ff 	bl	e12a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    8f2c:	b120      	cbz	r0, 8f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c>
    8f2e:	f640 4108 	movw	r1, #3080	; 0xc08
    8f32:	2031      	movs	r0, #49	; 0x31
    8f34:	f7fb fea0 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f38:	68a0      	ldr	r0, [r4, #8]
    8f3a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8f3e:	290b      	cmp	r1, #11
    8f40:	d001      	beq.n	8f46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13a>
    8f42:	290c      	cmp	r1, #12
    8f44:	d118      	bne.n	8f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    8f46:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    8f4a:	f8b0 3194 	ldrh.w	r3, [r0, #404]	; 0x194
    8f4e:	1ad2      	subs	r2, r2, r3
    8f50:	b212      	sxth	r2, r2
    8f52:	2a00      	cmp	r2, #0
    8f54:	db10      	blt.n	8f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    8f56:	f8d0 1196 	ldr.w	r1, [r0, #406]	; 0x196
    8f5a:	f8c0 1086 	str.w	r1, [r0, #134]	; 0x86
    8f5e:	f890 119a 	ldrb.w	r1, [r0, #410]	; 0x19a
    8f62:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    8f66:	2103      	movs	r1, #3
    8f68:	f7fd fdcc 	bl	6b04 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    8f6c:	68a0      	ldr	r0, [r4, #8]
    8f6e:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    8f72:	f880 60be 	strb.w	r6, [r0, #190]	; 0xbe
    8f76:	e026      	b.n	8fc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8f78:	2924      	cmp	r1, #36	; 0x24
    8f7a:	d111      	bne.n	8fa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8f7c:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    8f80:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
    8f84:	1a89      	subs	r1, r1, r2
    8f86:	b209      	sxth	r1, r1
    8f88:	2900      	cmp	r1, #0
    8f8a:	db09      	blt.n	8fa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8f8c:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    8f90:	f000 fe82 	bl	9c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    8f94:	2800      	cmp	r0, #0
    8f96:	68a0      	ldr	r0, [r4, #8]
    8f98:	f880 51ae 	strb.w	r5, [r0, #430]	; 0x1ae
    8f9c:	d029      	beq.n	8ff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    8f9e:	e012      	b.n	8fc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8fa0:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8fa4:	2924      	cmp	r1, #36	; 0x24
    8fa6:	d001      	beq.n	8fac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    8fa8:	2925      	cmp	r1, #37	; 0x25
    8faa:	d10c      	bne.n	8fc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8fac:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    8fb0:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
    8fb4:	1a89      	subs	r1, r1, r2
    8fb6:	b209      	sxth	r1, r1
    8fb8:	2900      	cmp	r1, #0
    8fba:	db04      	blt.n	8fc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8fbc:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    8fc0:	f000 fe6a 	bl	9c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    8fc4:	b1a8      	cbz	r0, 8ff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    8fc6:	4810      	ldr	r0, [pc, #64]	; (9008 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    8fc8:	9000      	str	r0, [sp, #0]
    8fca:	4b10      	ldr	r3, [pc, #64]	; (900c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    8fcc:	4a10      	ldr	r2, [pc, #64]	; (9010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>)
    8fce:	4641      	mov	r1, r8
    8fd0:	4648      	mov	r0, r9
    8fd2:	f7fc fde3 	bl	5b9c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8fd6:	68a0      	ldr	r0, [r4, #8]
    8fd8:	2301      	movs	r3, #1
    8fda:	2105      	movs	r1, #5
    8fdc:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8fe0:	3070      	adds	r0, #112	; 0x70
    8fe2:	f004 ff20 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8fe6:	2800      	cmp	r0, #0
    8fe8:	d009      	beq.n	8ffe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    8fea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8fee:	f7fc bdcf 	b.w	5b90 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8ff2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8ff6:	2100      	movs	r1, #0
    8ff8:	4608      	mov	r0, r1
    8ffa:	f000 bbd5 	b.w	97a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x99c>
    8ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9002:	0000      	.short	0x0000
    9004:	20000118 	.word	0x20000118
    9008:	000097a9 	.word	0x000097a9
    900c:	000092ad 	.word	0x000092ad
    9010:	00009be5 	.word	0x00009be5
    9014:	b570      	push	{r4, r5, r6, lr}
    9016:	4c0f      	ldr	r4, [pc, #60]	; (9054 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x248>)
    9018:	68a5      	ldr	r5, [r4, #8]
    901a:	f895 107d 	ldrb.w	r1, [r5, #125]	; 0x7d
    901e:	2920      	cmp	r1, #32
    9020:	d002      	beq.n	9028 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    9022:	2926      	cmp	r1, #38	; 0x26
    9024:	d003      	beq.n	902e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x222>
    9026:	e011      	b.n	904c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    9028:	f000 fe84 	bl	9d34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    902c:	e008      	b.n	9040 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x234>
    902e:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
    9032:	2301      	movs	r3, #1
    9034:	210b      	movs	r1, #11
    9036:	f105 0070 	add.w	r0, r5, #112	; 0x70
    903a:	f004 fef4 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    903e:	b138      	cbz	r0, 9050 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x244>
    9040:	68a1      	ldr	r1, [r4, #8]
    9042:	2000      	movs	r0, #0
    9044:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9048:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
    904c:	2000      	movs	r0, #0
    904e:	bd70      	pop	{r4, r5, r6, pc}
    9050:	202a      	movs	r0, #42	; 0x2a
    9052:	e7e9      	b.n	9028 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    9054:	20000118 	.word	0x20000118
    9058:	4804      	ldr	r0, [pc, #16]	; (906c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x260>)
    905a:	2100      	movs	r1, #0
    905c:	6880      	ldr	r0, [r0, #8]
    905e:	f820 1fb0 	strh.w	r1, [r0, #176]!
    9062:	7881      	ldrb	r1, [r0, #2]
    9064:	1c49      	adds	r1, r1, #1
    9066:	7081      	strb	r1, [r0, #2]
    9068:	4770      	bx	lr
    906a:	0000      	.short	0x0000
    906c:	20000118 	.word	0x20000118
    9070:	4807      	ldr	r0, [pc, #28]	; (9090 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x284>)
    9072:	b510      	push	{r4, lr}
    9074:	6881      	ldr	r1, [r0, #8]
    9076:	f811 0fb2 	ldrb.w	r0, [r1, #178]!
    907a:	1e40      	subs	r0, r0, #1
    907c:	b240      	sxtb	r0, r0
    907e:	7008      	strb	r0, [r1, #0]
    9080:	2800      	cmp	r0, #0
    9082:	da04      	bge.n	908e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x282>
    9084:	f44f 71c9 	mov.w	r1, #402	; 0x192
    9088:	2031      	movs	r0, #49	; 0x31
    908a:	f7fb fdf5 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    908e:	bd10      	pop	{r4, pc}
    9090:	20000118 	.word	0x20000118
    9094:	491a      	ldr	r1, [pc, #104]	; (9100 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f4>)
    9096:	b508      	push	{r3, lr}
    9098:	6889      	ldr	r1, [r1, #8]
    909a:	f891 207e 	ldrb.w	r2, [r1, #126]	; 0x7e
    909e:	b1b8      	cbz	r0, 90d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    90a0:	2a10      	cmp	r2, #16
    90a2:	d006      	beq.n	90b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2a6>
    90a4:	2a14      	cmp	r2, #20
    90a6:	d007      	beq.n	90b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    90a8:	2a15      	cmp	r2, #21
    90aa:	d008      	beq.n	90be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    90ac:	2a1b      	cmp	r2, #27
    90ae:	d122      	bne.n	90f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ea>
    90b0:	e008      	b.n	90c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>
    90b2:	2101      	movs	r1, #1
    90b4:	200b      	movs	r0, #11
    90b6:	e007      	b.n	90c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    90b8:	f001 faac 	bl	a614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1808>
    90bc:	e006      	b.n	90cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>
    90be:	f000 fd59 	bl	9b74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>
    90c2:	e003      	b.n	90cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>
    90c4:	2101      	movs	r1, #1
    90c6:	2006      	movs	r0, #6
    90c8:	f000 fd36 	bl	9b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    90cc:	2001      	movs	r0, #1
    90ce:	bd08      	pop	{r3, pc}
    90d0:	2a21      	cmp	r2, #33	; 0x21
    90d2:	d110      	bne.n	90f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ea>
    90d4:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    90d8:	2802      	cmp	r0, #2
    90da:	d00e      	beq.n	90fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    90dc:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    90e0:	2801      	cmp	r0, #1
    90e2:	d108      	bne.n	90f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ea>
    90e4:	f891 01af 	ldrb.w	r0, [r1, #431]	; 0x1af
    90e8:	f88d 0000 	strb.w	r0, [sp]
    90ec:	9800      	ldr	r0, [sp, #0]
    90ee:	9000      	str	r0, [sp, #0]
    90f0:	f89d 0000 	ldrb.w	r0, [sp]
    90f4:	b108      	cbz	r0, 90fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    90f6:	2000      	movs	r0, #0
    90f8:	bd08      	pop	{r3, pc}
    90fa:	2101      	movs	r1, #1
    90fc:	2017      	movs	r0, #23
    90fe:	e7e3      	b.n	90c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    9100:	20000118 	.word	0x20000118
    9104:	b538      	push	{r3, r4, r5, lr}
    9106:	2800      	cmp	r0, #0
    9108:	d16b      	bne.n	91e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    910a:	4c37      	ldr	r4, [pc, #220]	; (91e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3dc>)
    910c:	68a0      	ldr	r0, [r4, #8]
    910e:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9112:	07ca      	lsls	r2, r1, #31
    9114:	d002      	beq.n	911c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x310>
    9116:	2101      	movs	r1, #1
    9118:	2009      	movs	r0, #9
    911a:	e05b      	b.n	91d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
    911c:	078a      	lsls	r2, r1, #30
    911e:	d50a      	bpl.n	9136 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x32a>
    9120:	2101      	movs	r1, #1
    9122:	200c      	movs	r0, #12
    9124:	f000 fd08 	bl	9b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    9128:	68a0      	ldr	r0, [r4, #8]
    912a:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
    912e:	f041 0101 	orr.w	r1, r1, #1
    9132:	7001      	strb	r1, [r0, #0]
    9134:	e050      	b.n	91d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3cc>
    9136:	074a      	lsls	r2, r1, #29
    9138:	d502      	bpl.n	9140 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x334>
    913a:	2101      	movs	r1, #1
    913c:	2013      	movs	r0, #19
    913e:	e049      	b.n	91d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
    9140:	070a      	lsls	r2, r1, #28
    9142:	d505      	bpl.n	9150 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x344>
    9144:	f810 1fe9 	ldrb.w	r1, [r0, #233]!
    9148:	7141      	strb	r1, [r0, #5]
    914a:	2101      	movs	r1, #1
    914c:	2007      	movs	r0, #7
    914e:	e041      	b.n	91d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
    9150:	f011 0f30 	tst.w	r1, #48	; 0x30
    9154:	d045      	beq.n	91e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    9156:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
    915a:	f88d 1000 	strb.w	r1, [sp]
    915e:	9900      	ldr	r1, [sp, #0]
    9160:	9100      	str	r1, [sp, #0]
    9162:	f89d 1000 	ldrb.w	r1, [sp]
    9166:	bbc9      	cbnz	r1, 91dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
    9168:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
    916c:	f88d 1000 	strb.w	r1, [sp]
    9170:	9900      	ldr	r1, [sp, #0]
    9172:	9100      	str	r1, [sp, #0]
    9174:	f89d 1000 	ldrb.w	r1, [sp]
    9178:	b1c9      	cbz	r1, 91ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a2>
    917a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    917e:	2924      	cmp	r1, #36	; 0x24
    9180:	d02d      	beq.n	91de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d2>
    9182:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9186:	2924      	cmp	r1, #36	; 0x24
    9188:	d029      	beq.n	91de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d2>
    918a:	2300      	movs	r3, #0
    918c:	f500 72cb 	add.w	r2, r0, #406	; 0x196
    9190:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
    9194:	f005 fa3e 	bl	e614 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9198:	68a0      	ldr	r0, [r4, #8]
    919a:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    919e:	f021 0120 	bic.w	r1, r1, #32
    91a2:	f041 0110 	orr.w	r1, r1, #16
    91a6:	7001      	strb	r1, [r0, #0]
    91a8:	2100      	movs	r1, #0
    91aa:	f880 1125 	strb.w	r1, [r0, #293]	; 0x125
    91ae:	68a0      	ldr	r0, [r4, #8]
    91b0:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    91b4:	06c9      	lsls	r1, r1, #27
    91b6:	d514      	bpl.n	91e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    91b8:	f005 fa47 	bl	e64a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    91bc:	f000 f910 	bl	93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    91c0:	68a1      	ldr	r1, [r4, #8]
    91c2:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    91c6:	8bc2      	ldrh	r2, [r0, #30]
    91c8:	f821 2fee 	strh.w	r2, [r1, #238]!
    91cc:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    91ce:	8048      	strh	r0, [r1, #2]
    91d0:	2101      	movs	r1, #1
    91d2:	2015      	movs	r0, #21
    91d4:	f000 fcb0 	bl	9b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    91d8:	2001      	movs	r0, #1
    91da:	bd38      	pop	{r3, r4, r5, pc}
    91dc:	e001      	b.n	91e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    91de:	2301      	movs	r3, #1
    91e0:	e7d4      	b.n	918c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x380>
    91e2:	2000      	movs	r0, #0
    91e4:	e7f9      	b.n	91da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ce>
    91e6:	0000      	.short	0x0000
    91e8:	20000118 	.word	0x20000118
    91ec:	b570      	push	{r4, r5, r6, lr}
    91ee:	460d      	mov	r5, r1
    91f0:	4606      	mov	r6, r0
    91f2:	f005 f886 	bl	e302 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    91f6:	4604      	mov	r4, r0
    91f8:	4630      	mov	r0, r6
    91fa:	f005 f88e 	bl	e31a <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    91fe:	4629      	mov	r1, r5
    9200:	f000 f81e 	bl	9240 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x434>
    9204:	b1b8      	cbz	r0, 9236 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    9206:	4620      	mov	r0, r4
    9208:	f004 fea6 	bl	df58 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    920c:	0001      	movs	r1, r0
    920e:	d00d      	beq.n	922c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    9210:	480a      	ldr	r0, [pc, #40]	; (923c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x430>)
    9212:	6880      	ldr	r0, [r0, #8]
    9214:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    9218:	428a      	cmp	r2, r1
    921a:	d007      	beq.n	922c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    921c:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    9220:	2901      	cmp	r1, #1
    9222:	d005      	beq.n	9230 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x424>
    9224:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    9228:	4220      	tst	r0, r4
    922a:	d004      	beq.n	9236 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    922c:	2001      	movs	r0, #1
    922e:	bd70      	pop	{r4, r5, r6, pc}
    9230:	f890 01b1 	ldrb.w	r0, [r0, #433]	; 0x1b1
    9234:	e7f8      	b.n	9228 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    9236:	2000      	movs	r0, #0
    9238:	bd70      	pop	{r4, r5, r6, pc}
    923a:	0000      	.short	0x0000
    923c:	20000118 	.word	0x20000118
    9240:	b570      	push	{r4, r5, r6, lr}
    9242:	460d      	mov	r5, r1
    9244:	4604      	mov	r4, r0
    9246:	f004 fe87 	bl	df58 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    924a:	b350      	cbz	r0, 92a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    924c:	4916      	ldr	r1, [pc, #88]	; (92a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49c>)
    924e:	6889      	ldr	r1, [r1, #8]
    9250:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    9254:	4282      	cmp	r2, r0
    9256:	d024      	beq.n	92a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    9258:	f891 31ae 	ldrb.w	r3, [r1, #430]	; 0x1ae
    925c:	2b01      	cmp	r3, #1
    925e:	d005      	beq.n	926c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    9260:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    9264:	4223      	tst	r3, r4
    9266:	d013      	beq.n	9290 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    9268:	b11d      	cbz	r5, 9272 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    926a:	e01a      	b.n	92a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    926c:	f891 31b0 	ldrb.w	r3, [r1, #432]	; 0x1b0
    9270:	e7f8      	b.n	9264 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x458>
    9272:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    9276:	4221      	tst	r1, r4
    9278:	d113      	bne.n	92a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    927a:	b15a      	cbz	r2, 9294 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x488>
    927c:	2a04      	cmp	r2, #4
    927e:	d00e      	beq.n	929e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    9280:	2804      	cmp	r0, #4
    9282:	d00c      	beq.n	929e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    9284:	2a08      	cmp	r2, #8
    9286:	d00a      	beq.n	929e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    9288:	2808      	cmp	r0, #8
    928a:	d008      	beq.n	929e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    928c:	4282      	cmp	r2, r0
    928e:	d908      	bls.n	92a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    9290:	2000      	movs	r0, #0
    9292:	bd70      	pop	{r4, r5, r6, pc}
    9294:	f240 1155 	movw	r1, #341	; 0x155
    9298:	2006      	movs	r0, #6
    929a:	f7fb fced 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    929e:	4282      	cmp	r2, r0
    92a0:	d3f6      	bcc.n	9290 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    92a2:	2001      	movs	r0, #1
    92a4:	bd70      	pop	{r4, r5, r6, pc}
    92a6:	0000      	.short	0x0000
    92a8:	20000118 	.word	0x20000118
    92ac:	490c      	ldr	r1, [pc, #48]	; (92e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d4>)
    92ae:	4602      	mov	r2, r0
    92b0:	7848      	ldrb	r0, [r1, #1]
    92b2:	b998      	cbnz	r0, 92dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d0>
    92b4:	4608      	mov	r0, r1
    92b6:	6880      	ldr	r0, [r0, #8]
    92b8:	b142      	cbz	r2, 92cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c0>
    92ba:	7889      	ldrb	r1, [r1, #2]
    92bc:	0709      	lsls	r1, r1, #28
    92be:	d503      	bpl.n	92c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4bc>
    92c0:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
    92c4:	2808      	cmp	r0, #8
    92c6:	d009      	beq.n	92dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d0>
    92c8:	2001      	movs	r0, #1
    92ca:	4770      	bx	lr
    92cc:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    92d0:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    92d2:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    92d4:	428a      	cmp	r2, r1
    92d6:	d801      	bhi.n	92dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d0>
    92d8:	f7fe bfd4 	b.w	8284 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    92dc:	2000      	movs	r0, #0
    92de:	4770      	bx	lr
    92e0:	20000118 	.word	0x20000118
    92e4:	b538      	push	{r3, r4, r5, lr}
    92e6:	4c3d      	ldr	r4, [pc, #244]	; (93dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>)
    92e8:	4605      	mov	r5, r0
    92ea:	68a0      	ldr	r0, [r4, #8]
    92ec:	3070      	adds	r0, #112	; 0x70
    92ee:	f006 f8bb 	bl	f468 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    92f2:	2800      	cmp	r0, #0
    92f4:	d170      	bne.n	93d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    92f6:	2d00      	cmp	r5, #0
    92f8:	d16e      	bne.n	93d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    92fa:	68a0      	ldr	r0, [r4, #8]
    92fc:	2301      	movs	r3, #1
    92fe:	4619      	mov	r1, r3
    9300:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    9304:	3070      	adds	r0, #112	; 0x70
    9306:	f004 fd8e 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    930a:	2800      	cmp	r0, #0
    930c:	d164      	bne.n	93d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    930e:	68a0      	ldr	r0, [r4, #8]
    9310:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    9314:	f88d 1000 	strb.w	r1, [sp]
    9318:	9900      	ldr	r1, [sp, #0]
    931a:	9100      	str	r1, [sp, #0]
    931c:	f89d 1000 	ldrb.w	r1, [sp]
    9320:	b149      	cbz	r1, 9336 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52a>
    9322:	2100      	movs	r1, #0
    9324:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
    9328:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    932c:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
    9330:	2100      	movs	r1, #0
    9332:	2002      	movs	r0, #2
    9334:	e045      	b.n	93c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b6>
    9336:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    933a:	2301      	movs	r3, #1
    933c:	2104      	movs	r1, #4
    933e:	3070      	adds	r0, #112	; 0x70
    9340:	f004 fd71 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9344:	4605      	mov	r5, r0
    9346:	f7ff fedd 	bl	9104 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    934a:	2800      	cmp	r0, #0
    934c:	d144      	bne.n	93d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    934e:	4628      	mov	r0, r5
    9350:	f7ff fea0 	bl	9094 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x288>
    9354:	2800      	cmp	r0, #0
    9356:	d13f      	bne.n	93d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    9358:	68a0      	ldr	r0, [r4, #8]
    935a:	2301      	movs	r3, #1
    935c:	2100      	movs	r1, #0
    935e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9362:	3070      	adds	r0, #112	; 0x70
    9364:	f004 fd5f 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9368:	b178      	cbz	r0, 938a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57e>
    936a:	68a0      	ldr	r0, [r4, #8]
    936c:	2301      	movs	r3, #1
    936e:	2104      	movs	r1, #4
    9370:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9374:	3070      	adds	r0, #112	; 0x70
    9376:	f004 fd56 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    937a:	b930      	cbnz	r0, 938a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57e>
    937c:	68a0      	ldr	r0, [r4, #8]
    937e:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
    9382:	b110      	cbz	r0, 938a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57e>
    9384:	2100      	movs	r1, #0
    9386:	2012      	movs	r0, #18
    9388:	e01b      	b.n	93c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b6>
    938a:	68a0      	ldr	r0, [r4, #8]
    938c:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9390:	290a      	cmp	r1, #10
    9392:	d01a      	beq.n	93ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    9394:	2d00      	cmp	r5, #0
    9396:	d11f      	bne.n	93d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    9398:	f000 fb1a 	bl	99d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc4>
    939c:	2800      	cmp	r0, #0
    939e:	d11b      	bne.n	93d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    93a0:	68a0      	ldr	r0, [r4, #8]
    93a2:	2301      	movs	r3, #1
    93a4:	2100      	movs	r1, #0
    93a6:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    93aa:	3070      	adds	r0, #112	; 0x70
    93ac:	f004 fd3b 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    93b0:	2800      	cmp	r0, #0
    93b2:	d011      	beq.n	93d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    93b4:	68a0      	ldr	r0, [r4, #8]
    93b6:	f890 018c 	ldrb.w	r0, [r0, #396]	; 0x18c
    93ba:	2800      	cmp	r0, #0
    93bc:	d00c      	beq.n	93d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    93be:	2100      	movs	r1, #0
    93c0:	20ff      	movs	r0, #255	; 0xff
    93c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    93c6:	f000 bbb7 	b.w	9b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    93ca:	f810 1fea 	ldrb.w	r1, [r0, #234]!
    93ce:	7101      	strb	r1, [r0, #4]
    93d0:	2100      	movs	r1, #0
    93d2:	2007      	movs	r0, #7
    93d4:	e7f5      	b.n	93c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b6>
    93d6:	e7ff      	b.n	93d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    93d8:	bd38      	pop	{r3, r4, r5, pc}
    93da:	0000      	.short	0x0000
    93dc:	20000118 	.word	0x20000118
    93e0:	480a      	ldr	r0, [pc, #40]	; (940c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>)
    93e2:	b510      	push	{r4, lr}
    93e4:	6881      	ldr	r1, [r0, #8]
    93e6:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    93ea:	2801      	cmp	r0, #1
    93ec:	d009      	beq.n	9402 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f6>
    93ee:	8808      	ldrh	r0, [r1, #0]
    93f0:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
    93f4:	312c      	adds	r1, #44	; 0x2c
    93f6:	f005 f8e9 	bl	e5cc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    93fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    93fe:	f001 bc05 	b.w	ac0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9402:	2002      	movs	r0, #2
    9404:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    9408:	bd10      	pop	{r4, pc}
    940a:	0000      	.short	0x0000
    940c:	20000118 	.word	0x20000118
    9410:	b570      	push	{r4, r5, r6, lr}
    9412:	4c25      	ldr	r4, [pc, #148]	; (94a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>)
    9414:	0005      	movs	r5, r0
    9416:	d12f      	bne.n	9478 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9418:	f000 f8a4 	bl	9564 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x758>
    941c:	f000 f848 	bl	94b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>
    9420:	0005      	movs	r5, r0
    9422:	d129      	bne.n	9478 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9424:	8860      	ldrh	r0, [r4, #2]
    9426:	0741      	lsls	r1, r0, #29
    9428:	d506      	bpl.n	9438 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    942a:	68a1      	ldr	r1, [r4, #8]
    942c:	f891 1080 	ldrb.w	r1, [r1, #128]	; 0x80
    9430:	2907      	cmp	r1, #7
    9432:	d101      	bne.n	9438 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    9434:	2101      	movs	r1, #1
    9436:	7021      	strb	r1, [r4, #0]
    9438:	0780      	lsls	r0, r0, #30
    943a:	d512      	bpl.n	9462 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    943c:	68e0      	ldr	r0, [r4, #12]
    943e:	78c0      	ldrb	r0, [r0, #3]
    9440:	2819      	cmp	r0, #25
    9442:	d205      	bcs.n	9450 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    9444:	4919      	ldr	r1, [pc, #100]	; (94ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>)
    9446:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    944a:	b109      	cbz	r1, 9450 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    944c:	4788      	blx	r1
    944e:	e008      	b.n	9462 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    9450:	28ff      	cmp	r0, #255	; 0xff
    9452:	d004      	beq.n	945e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
    9454:	f240 714d 	movw	r1, #1869	; 0x74d
    9458:	2031      	movs	r0, #49	; 0x31
    945a:	f7fb fc0d 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    945e:	f001 f90b 	bl	a678 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x186c>
    9462:	78a0      	ldrb	r0, [r4, #2]
    9464:	06c0      	lsls	r0, r0, #27
    9466:	d507      	bpl.n	9478 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9468:	68a0      	ldr	r0, [r4, #8]
    946a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    946e:	290b      	cmp	r1, #11
    9470:	d102      	bne.n	9478 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9472:	210c      	movs	r1, #12
    9474:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9478:	7860      	ldrb	r0, [r4, #1]
    947a:	0700      	lsls	r0, r0, #28
    947c:	d511      	bpl.n	94a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x696>
    947e:	68a0      	ldr	r0, [r4, #8]
    9480:	2301      	movs	r3, #1
    9482:	2105      	movs	r1, #5
    9484:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9488:	3070      	adds	r0, #112	; 0x70
    948a:	f004 fccc 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    948e:	b128      	cbz	r0, 949c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x690>
    9490:	68a1      	ldr	r1, [r4, #8]
    9492:	2508      	movs	r5, #8
    9494:	2000      	movs	r0, #0
    9496:	f881 01c4 	strb.w	r0, [r1, #452]	; 0x1c4
    949a:	e002      	b.n	94a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x696>
    949c:	2000      	movs	r0, #0
    949e:	f7fc fc4d 	bl	5d3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    94a2:	4628      	mov	r0, r5
    94a4:	bd70      	pop	{r4, r5, r6, pc}
    94a6:	0000      	.short	0x0000
    94a8:	20000118 	.word	0x20000118
    94ac:	20000190 	.word	0x20000190
    94b0:	b570      	push	{r4, r5, r6, lr}
    94b2:	4c2a      	ldr	r4, [pc, #168]	; (955c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    94b4:	2000      	movs	r0, #0
    94b6:	78a1      	ldrb	r1, [r4, #2]
    94b8:	07c9      	lsls	r1, r1, #31
    94ba:	d015      	beq.n	94e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6dc>
    94bc:	6920      	ldr	r0, [r4, #16]
    94be:	2301      	movs	r3, #1
    94c0:	2105      	movs	r1, #5
    94c2:	78c5      	ldrb	r5, [r0, #3]
    94c4:	68a0      	ldr	r0, [r4, #8]
    94c6:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    94ca:	3070      	adds	r0, #112	; 0x70
    94cc:	f004 fcab 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94d0:	b158      	cbz	r0, 94ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6de>
    94d2:	1ead      	subs	r5, r5, #2
    94d4:	2d0a      	cmp	r5, #10
    94d6:	d206      	bcs.n	94e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    94d8:	e8df f005 	tbb	[pc, r5]
    94dc:	05050707 	.word	0x05050707
    94e0:	05050707 	.word	0x05050707
    94e4:	0707      	.short	0x0707
    94e6:	2008      	movs	r0, #8
    94e8:	bd70      	pop	{r4, r5, r6, pc}
    94ea:	6920      	ldr	r0, [r4, #16]
    94ec:	f7fd fc34 	bl	6d58 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    94f0:	b138      	cbz	r0, 9502 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f6>
    94f2:	6920      	ldr	r0, [r4, #16]
    94f4:	78c5      	ldrb	r5, [r0, #3]
    94f6:	b145      	cbz	r5, 950a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
    94f8:	2d01      	cmp	r5, #1
    94fa:	d006      	beq.n	950a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
    94fc:	2d16      	cmp	r5, #22
    94fe:	d118      	bne.n	9532 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    9500:	e003      	b.n	950a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
    9502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9506:	f000 bd3d 	b.w	9f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    950a:	68a0      	ldr	r0, [r4, #8]
    950c:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    9510:	f004 fcd7 	bl	dec2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9514:	b168      	cbz	r0, 9532 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    9516:	68a1      	ldr	r1, [r4, #8]
    9518:	f891 007d 	ldrb.w	r0, [r1, #125]	; 0x7d
    951c:	281f      	cmp	r0, #31
    951e:	d008      	beq.n	9532 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    9520:	2820      	cmp	r0, #32
    9522:	d003      	beq.n	952c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x720>
    9524:	2d16      	cmp	r5, #22
    9526:	d00c      	beq.n	9542 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x736>
    9528:	2002      	movs	r0, #2
    952a:	bd70      	pop	{r4, r5, r6, pc}
    952c:	2026      	movs	r0, #38	; 0x26
    952e:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9532:	2d19      	cmp	r5, #25
    9534:	d207      	bcs.n	9546 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73a>
    9536:	480a      	ldr	r0, [pc, #40]	; (9560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x754>)
    9538:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    953c:	b118      	cbz	r0, 9546 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73a>
    953e:	4780      	blx	r0
    9540:	e003      	b.n	954a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73e>
    9542:	2020      	movs	r0, #32
    9544:	bd70      	pop	{r4, r5, r6, pc}
    9546:	f000 fd1d 	bl	9f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    954a:	68a2      	ldr	r2, [r4, #8]
    954c:	e9f2 1332 	ldrd	r1, r3, [r2, #200]!	; 0xc8
    9550:	1c49      	adds	r1, r1, #1
    9552:	f143 0300 	adc.w	r3, r3, #0
    9556:	e9c2 1300 	strd	r1, r3, [r2]
    955a:	bd70      	pop	{r4, r5, r6, pc}
    955c:	20000118 	.word	0x20000118
    9560:	2000012c 	.word	0x2000012c
    9564:	b570      	push	{r4, r5, r6, lr}
    9566:	4c22      	ldr	r4, [pc, #136]	; (95f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>)
    9568:	78a0      	ldrb	r0, [r4, #2]
    956a:	0700      	lsls	r0, r0, #28
    956c:	d53e      	bpl.n	95ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    956e:	68a0      	ldr	r0, [r4, #8]
    9570:	3070      	adds	r0, #112	; 0x70
    9572:	f005 ff79 	bl	f468 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9576:	b148      	cbz	r0, 958c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x780>
    9578:	68a0      	ldr	r0, [r4, #8]
    957a:	21fe      	movs	r1, #254	; 0xfe
    957c:	2500      	movs	r5, #0
    957e:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    9582:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9586:	2919      	cmp	r1, #25
    9588:	d10c      	bne.n	95a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x798>
    958a:	e004      	b.n	9596 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78a>
    958c:	f240 7157 	movw	r1, #1879	; 0x757
    9590:	2031      	movs	r0, #49	; 0x31
    9592:	f7fb fb71 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9596:	f880 50b3 	strb.w	r5, [r0, #179]	; 0xb3
    959a:	f7ff fd69 	bl	9070 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    959e:	68a0      	ldr	r0, [r4, #8]
    95a0:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    95a4:	68a0      	ldr	r0, [r4, #8]
    95a6:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    95aa:	291f      	cmp	r1, #31
    95ac:	d002      	beq.n	95b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7a8>
    95ae:	2927      	cmp	r1, #39	; 0x27
    95b0:	d113      	bne.n	95da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    95b2:	e00b      	b.n	95cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c0>
    95b4:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    95b8:	f004 fc83 	bl	dec2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    95bc:	b108      	cbz	r0, 95c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b6>
    95be:	2026      	movs	r0, #38	; 0x26
    95c0:	e000      	b.n	95c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b8>
    95c2:	2020      	movs	r0, #32
    95c4:	68a1      	ldr	r1, [r4, #8]
    95c6:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    95ca:	e006      	b.n	95da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    95cc:	2101      	movs	r1, #1
    95ce:	f880 118d 	strb.w	r1, [r0, #397]	; 0x18d
    95d2:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    95d6:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    95da:	68a0      	ldr	r0, [r4, #8]
    95dc:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    95e0:	2908      	cmp	r1, #8
    95e2:	d103      	bne.n	95ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    95e4:	2102      	movs	r1, #2
    95e6:	7021      	strb	r1, [r4, #0]
    95e8:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    95ec:	bd70      	pop	{r4, r5, r6, pc}
    95ee:	0000      	.short	0x0000
    95f0:	20000118 	.word	0x20000118
    95f4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    95f6:	4605      	mov	r5, r0
    95f8:	4668      	mov	r0, sp
    95fa:	f7fc fa03 	bl	5a04 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    95fe:	b318      	cbz	r0, 9648 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x83c>
    9600:	2222      	movs	r2, #34	; 0x22
    9602:	2100      	movs	r1, #0
    9604:	9800      	ldr	r0, [sp, #0]
    9606:	f003 fa07 	bl	ca18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    960a:	2103      	movs	r1, #3
    960c:	9800      	ldr	r0, [sp, #0]
    960e:	f004 fed8 	bl	e3c2 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    9612:	9800      	ldr	r0, [sp, #0]
    9614:	7801      	ldrb	r1, [r0, #0]
    9616:	f021 0110 	bic.w	r1, r1, #16
    961a:	7001      	strb	r1, [r0, #0]
    961c:	4629      	mov	r1, r5
    961e:	f7fd fbc7 	bl	6db0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    9622:	2100      	movs	r1, #0
    9624:	4c5f      	ldr	r4, [pc, #380]	; (97a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x998>)
    9626:	f644 162f 	movw	r6, #18735	; 0x492f
    962a:	2d0e      	cmp	r5, #14
    962c:	d07e      	beq.n	972c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    962e:	dc0e      	bgt.n	964e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x842>
    9630:	f1a5 0502 	sub.w	r5, r5, #2
    9634:	2d0c      	cmp	r5, #12
    9636:	d21c      	bcs.n	9672 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x866>
    9638:	e8df f005 	tbb	[pc, r5]
    963c:	aa491b1e 	.word	0xaa491b1e
    9640:	551b1eaa 	.word	0x551b1eaa
    9644:	3034aa1b 	.word	0x3034aa1b
    9648:	f640 1182 	movw	r1, #2434	; 0x982
    964c:	e0a6      	b.n	979c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    964e:	2d15      	cmp	r5, #21
    9650:	d05c      	beq.n	970c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x900>
    9652:	dc08      	bgt.n	9666 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x85a>
    9654:	2d11      	cmp	r5, #17
    9656:	d014      	beq.n	9682 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x876>
    9658:	2d12      	cmp	r5, #18
    965a:	d01e      	beq.n	969a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88e>
    965c:	2d13      	cmp	r5, #19
    965e:	d01c      	beq.n	969a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88e>
    9660:	2d14      	cmp	r5, #20
    9662:	d106      	bne.n	9672 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x866>
    9664:	e052      	b.n	970c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x900>
    9666:	2d16      	cmp	r5, #22
    9668:	d027      	beq.n	96ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8ae>
    966a:	2d17      	cmp	r5, #23
    966c:	d069      	beq.n	9742 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x936>
    966e:	2dff      	cmp	r5, #255	; 0xff
    9670:	d072      	beq.n	9758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94c>
    9672:	f640 11f8 	movw	r1, #2552	; 0x9f8
    9676:	e091      	b.n	979c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    9678:	68a1      	ldr	r1, [r4, #8]
    967a:	9800      	ldr	r0, [sp, #0]
    967c:	f891 10ee 	ldrb.w	r1, [r1, #238]	; 0xee
    9680:	e00e      	b.n	96a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x894>
    9682:	68a0      	ldr	r0, [r4, #8]
    9684:	f890 10ee 	ldrb.w	r1, [r0, #238]	; 0xee
    9688:	9800      	ldr	r0, [sp, #0]
    968a:	f004 fe76 	bl	e37a <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    968e:	68a0      	ldr	r0, [r4, #8]
    9690:	f890 10ef 	ldrb.w	r1, [r0, #239]	; 0xef
    9694:	9800      	ldr	r0, [sp, #0]
    9696:	f004 fe72 	bl	e37e <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    969a:	e079      	b.n	9790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    969c:	9800      	ldr	r0, [sp, #0]
    969e:	2106      	movs	r1, #6
    96a0:	7101      	strb	r1, [r0, #4]
    96a2:	e075      	b.n	9790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    96a4:	9800      	ldr	r0, [sp, #0]
    96a6:	220b      	movs	r2, #11
    96a8:	7102      	strb	r2, [r0, #4]
    96aa:	2259      	movs	r2, #89	; 0x59
    96ac:	7142      	strb	r2, [r0, #5]
    96ae:	7181      	strb	r1, [r0, #6]
    96b0:	21b0      	movs	r1, #176	; 0xb0
    96b2:	71c1      	strb	r1, [r0, #7]
    96b4:	2112      	movs	r1, #18
    96b6:	7201      	strb	r1, [r0, #8]
    96b8:	e06a      	b.n	9790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    96ba:	9800      	ldr	r0, [sp, #0]
    96bc:	f8d4 1008 	ldr.w	r1, [r4, #8]
    96c0:	f891 21b0 	ldrb.w	r2, [r1, #432]	; 0x1b0
    96c4:	7102      	strb	r2, [r0, #4]
    96c6:	f891 11b1 	ldrb.w	r1, [r1, #433]	; 0x1b1
    96ca:	7141      	strb	r1, [r0, #5]
    96cc:	e060      	b.n	9790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    96ce:	68a1      	ldr	r1, [r4, #8]
    96d0:	9800      	ldr	r0, [sp, #0]
    96d2:	f501 718c 	add.w	r1, r1, #280	; 0x118
    96d6:	f004 fe65 	bl	e3a4 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    96da:	68a1      	ldr	r1, [r4, #8]
    96dc:	9800      	ldr	r0, [sp, #0]
    96de:	31e4      	adds	r1, #228	; 0xe4
    96e0:	f004 fe5d 	bl	e39e <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    96e4:	e054      	b.n	9790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    96e6:	9101      	str	r1, [sp, #4]
    96e8:	9102      	str	r1, [sp, #8]
    96ea:	f001 fe39 	bl	b360 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    96ee:	68a1      	ldr	r1, [r4, #8]
    96f0:	4030      	ands	r0, r6
    96f2:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
    96f6:	4001      	ands	r1, r0
    96f8:	f88d 1004 	strb.w	r1, [sp, #4]
    96fc:	0a00      	lsrs	r0, r0, #8
    96fe:	f88d 0005 	strb.w	r0, [sp, #5]
    9702:	a901      	add	r1, sp, #4
    9704:	9800      	ldr	r0, [sp, #0]
    9706:	f004 fe57 	bl	e3b8 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    970a:	e041      	b.n	9790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    970c:	68a0      	ldr	r0, [r4, #8]
    970e:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    9712:	9800      	ldr	r0, [sp, #0]
    9714:	f004 fe5d 	bl	e3d2 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    9718:	68a0      	ldr	r0, [r4, #8]
    971a:	f8b0 10f0 	ldrh.w	r1, [r0, #240]	; 0xf0
    971e:	9800      	ldr	r0, [sp, #0]
    9720:	f004 fe5b 	bl	e3da <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    9724:	68a0      	ldr	r0, [r4, #8]
    9726:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    972a:	e000      	b.n	972e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    972c:	e015      	b.n	975a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    972e:	9800      	ldr	r0, [sp, #0]
    9730:	f004 fe57 	bl	e3e2 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    9734:	68a0      	ldr	r0, [r4, #8]
    9736:	f8b0 10ee 	ldrh.w	r1, [r0, #238]	; 0xee
    973a:	9800      	ldr	r0, [sp, #0]
    973c:	f004 fe55 	bl	e3ea <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    9740:	e026      	b.n	9790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    9742:	68a1      	ldr	r1, [r4, #8]
    9744:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    9748:	2801      	cmp	r0, #1
    974a:	9800      	ldr	r0, [sp, #0]
    974c:	d0b8      	beq.n	96c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8b4>
    974e:	f811 2f66 	ldrb.w	r2, [r1, #102]!
    9752:	7102      	strb	r2, [r0, #4]
    9754:	7849      	ldrb	r1, [r1, #1]
    9756:	e7b8      	b.n	96ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8be>
    9758:	e012      	b.n	9780 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x974>
    975a:	9101      	str	r1, [sp, #4]
    975c:	9102      	str	r1, [sp, #8]
    975e:	f001 fdff 	bl	b360 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9762:	68a1      	ldr	r1, [r4, #8]
    9764:	4030      	ands	r0, r6
    9766:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
    976a:	4001      	ands	r1, r0
    976c:	f88d 1004 	strb.w	r1, [sp, #4]
    9770:	0a00      	lsrs	r0, r0, #8
    9772:	f88d 0005 	strb.w	r0, [sp, #5]
    9776:	a901      	add	r1, sp, #4
    9778:	9800      	ldr	r0, [sp, #0]
    977a:	f004 fe18 	bl	e3ae <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    977e:	e007      	b.n	9790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    9780:	68a0      	ldr	r0, [r4, #8]
    9782:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
    9786:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
    978a:	9800      	ldr	r0, [sp, #0]
    978c:	f004 fdf9 	bl	e382 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    9790:	f7fc f912 	bl	59b8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    9794:	2800      	cmp	r0, #0
    9796:	d104      	bne.n	97a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
    9798:	f640 11fc 	movw	r1, #2556	; 0x9fc
    979c:	2031      	movs	r0, #49	; 0x31
    979e:	f7fb fa6b 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    97a4:	20000118 	.word	0x20000118
    97a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    97ac:	4c87      	ldr	r4, [pc, #540]	; (99cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc0>)
    97ae:	4682      	mov	sl, r0
    97b0:	4689      	mov	r9, r1
    97b2:	68a0      	ldr	r0, [r4, #8]
    97b4:	8800      	ldrh	r0, [r0, #0]
    97b6:	f7fb fe9d 	bl	54f4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    97ba:	0006      	movs	r6, r0
    97bc:	d00a      	beq.n	97d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c8>
    97be:	8860      	ldrh	r0, [r4, #2]
    97c0:	f04f 0500 	mov.w	r5, #0
    97c4:	05c0      	lsls	r0, r0, #23
    97c6:	68a0      	ldr	r0, [r4, #8]
    97c8:	d509      	bpl.n	97de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    97ca:	f8a0 50a4 	strh.w	r5, [r0, #164]	; 0xa4
    97ce:	f880 510c 	strb.w	r5, [r0, #268]	; 0x10c
    97d2:	e008      	b.n	97e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9da>
    97d4:	f640 51a2 	movw	r1, #3490	; 0xda2
    97d8:	2031      	movs	r0, #49	; 0x31
    97da:	f7fb fa4d 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97de:	f830 1fa4 	ldrh.w	r1, [r0, #164]!
    97e2:	1c49      	adds	r1, r1, #1
    97e4:	8001      	strh	r1, [r0, #0]
    97e6:	f001 f8e3 	bl	a9b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba4>
    97ea:	f04f 0801 	mov.w	r8, #1
    97ee:	b320      	cbz	r0, 983a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
    97f0:	8860      	ldrh	r0, [r4, #2]
    97f2:	0500      	lsls	r0, r0, #20
    97f4:	d506      	bpl.n	9804 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    97f6:	68a0      	ldr	r0, [r4, #8]
    97f8:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    97fc:	b111      	cbz	r1, 9804 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    97fe:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    9802:	e01a      	b.n	983a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
    9804:	68a0      	ldr	r0, [r4, #8]
    9806:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    980a:	1c49      	adds	r1, r1, #1
    980c:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    9810:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    9814:	428b      	cmp	r3, r1
    9816:	d301      	bcc.n	981c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa10>
    9818:	1a5a      	subs	r2, r3, r1
    981a:	e000      	b.n	981e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa12>
    981c:	2200      	movs	r2, #0
    981e:	88a7      	ldrh	r7, [r4, #4]
    9820:	1d7f      	adds	r7, r7, #5
    9822:	42ba      	cmp	r2, r7
    9824:	d801      	bhi.n	982a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
    9826:	f880 80a2 	strb.w	r8, [r0, #162]	; 0xa2
    982a:	4299      	cmp	r1, r3
    982c:	d305      	bcc.n	983a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
    982e:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    9832:	f880 81fa 	strb.w	r8, [r0, #506]	; 0x1fa
    9836:	f001 f9e9 	bl	ac0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    983a:	8860      	ldrh	r0, [r4, #2]
    983c:	f04f 0702 	mov.w	r7, #2
    9840:	f410 7f40 	tst.w	r0, #768	; 0x300
    9844:	d00e      	beq.n	9864 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa58>
    9846:	68a0      	ldr	r0, [r4, #8]
    9848:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    984c:	b111      	cbz	r1, 9854 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa48>
    984e:	2903      	cmp	r1, #3
    9850:	d108      	bne.n	9864 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa58>
    9852:	e002      	b.n	985a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4e>
    9854:	f880 8081 	strb.w	r8, [r0, #129]	; 0x81
    9858:	e001      	b.n	985e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa52>
    985a:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    985e:	2101      	movs	r1, #1
    9860:	f7fe fd36 	bl	82d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9864:	68a0      	ldr	r0, [r4, #8]
    9866:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    986a:	2901      	cmp	r1, #1
    986c:	d104      	bne.n	9878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6c>
    986e:	8861      	ldrh	r1, [r4, #2]
    9870:	0549      	lsls	r1, r1, #21
    9872:	d501      	bpl.n	9878 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6c>
    9874:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    9878:	f1ba 0f00 	cmp.w	sl, #0
    987c:	d176      	bne.n	996c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb60>
    987e:	78a1      	ldrb	r1, [r4, #2]
    9880:	0649      	lsls	r1, r1, #25
    9882:	d502      	bpl.n	988a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    9884:	f8a0 5120 	strh.w	r5, [r0, #288]	; 0x120
    9888:	e004      	b.n	9894 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa88>
    988a:	f8b0 1120 	ldrh.w	r1, [r0, #288]	; 0x120
    988e:	1c49      	adds	r1, r1, #1
    9890:	f8a0 1120 	strh.w	r1, [r0, #288]	; 0x120
    9894:	4648      	mov	r0, r9
    9896:	f7ff fdbb 	bl	9410 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x604>
    989a:	ea40 0009 	orr.w	r0, r0, r9
    989e:	4681      	mov	r9, r0
    98a0:	f7ff fd20 	bl	92e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d8>
    98a4:	68a7      	ldr	r7, [r4, #8]
    98a6:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
    98aa:	1c40      	adds	r0, r0, #1
    98ac:	f8a7 0100 	strh.w	r0, [r7, #256]	; 0x100
    98b0:	f897 0104 	ldrb.w	r0, [r7, #260]	; 0x104
    98b4:	b128      	cbz	r0, 98c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xab6>
    98b6:	f7fc faaf 	bl	5e18 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    98ba:	b1b0      	cbz	r0, 98ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
    98bc:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    98c0:	e013      	b.n	98ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
    98c2:	f7fc f921 	bl	5b08 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    98c6:	b108      	cbz	r0, 98cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac0>
    98c8:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    98cc:	f7fc f916 	bl	5afc <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    98d0:	b158      	cbz	r0, 98ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
    98d2:	f897 010c 	ldrb.w	r0, [r7, #268]	; 0x10c
    98d6:	1c40      	adds	r0, r0, #1
    98d8:	b2c0      	uxtb	r0, r0
    98da:	f887 010c 	strb.w	r0, [r7, #268]	; 0x10c
    98de:	2802      	cmp	r0, #2
    98e0:	d903      	bls.n	98ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
    98e2:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    98e6:	f887 510c 	strb.w	r5, [r7, #268]	; 0x10c
    98ea:	68a0      	ldr	r0, [r4, #8]
    98ec:	2301      	movs	r3, #1
    98ee:	2100      	movs	r1, #0
    98f0:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    98f4:	3070      	adds	r0, #112	; 0x70
    98f6:	f004 fa96 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98fa:	b920      	cbnz	r0, 9906 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xafa>
    98fc:	68a0      	ldr	r0, [r4, #8]
    98fe:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    9902:	280c      	cmp	r0, #12
    9904:	d15e      	bne.n	99c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
    9906:	68a0      	ldr	r0, [r4, #8]
    9908:	2301      	movs	r3, #1
    990a:	2100      	movs	r1, #0
    990c:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9910:	3070      	adds	r0, #112	; 0x70
    9912:	f004 fa88 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9916:	b350      	cbz	r0, 996e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    9918:	68a0      	ldr	r0, [r4, #8]
    991a:	2301      	movs	r3, #1
    991c:	2100      	movs	r1, #0
    991e:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    9922:	3070      	adds	r0, #112	; 0x70
    9924:	f004 fa7f 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9928:	b308      	cbz	r0, 996e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    992a:	68a0      	ldr	r0, [r4, #8]
    992c:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    9930:	2902      	cmp	r1, #2
    9932:	d147      	bne.n	99c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
    9934:	f890 010c 	ldrb.w	r0, [r0, #268]	; 0x10c
    9938:	b9c8      	cbnz	r0, 996e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    993a:	4630      	mov	r0, r6
    993c:	f003 fd54 	bl	d3e8 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    9940:	b1a8      	cbz	r0, 996e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    9942:	68a0      	ldr	r0, [r4, #8]
    9944:	3070      	adds	r0, #112	; 0x70
    9946:	f005 fd8f 	bl	f468 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    994a:	b980      	cbnz	r0, 996e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    994c:	68a1      	ldr	r1, [r4, #8]
    994e:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
    9952:	2801      	cmp	r0, #1
    9954:	d936      	bls.n	99c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
    9956:	f881 8102 	strb.w	r8, [r1, #258]	; 0x102
    995a:	f8b1 20a6 	ldrh.w	r2, [r1, #166]	; 0xa6
    995e:	f8b1 00a4 	ldrh.w	r0, [r1, #164]	; 0xa4
    9962:	1e93      	subs	r3, r2, #2
    9964:	4298      	cmp	r0, r3
    9966:	db03      	blt.n	9970 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9968:	2001      	movs	r0, #1
    996a:	e004      	b.n	9976 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6a>
    996c:	e01c      	b.n	99a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb9c>
    996e:	e029      	b.n	99c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
    9970:	1a10      	subs	r0, r2, r0
    9972:	1e40      	subs	r0, r0, #1
    9974:	b280      	uxth	r0, r0
    9976:	f8b1 2100 	ldrh.w	r2, [r1, #256]	; 0x100
    997a:	88a3      	ldrh	r3, [r4, #4]
    997c:	429a      	cmp	r2, r3
    997e:	d301      	bcc.n	9984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb78>
    9980:	2201      	movs	r2, #1
    9982:	e002      	b.n	998a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7e>
    9984:	1a9a      	subs	r2, r3, r2
    9986:	1c52      	adds	r2, r2, #1
    9988:	b292      	uxth	r2, r2
    998a:	4290      	cmp	r0, r2
    998c:	d900      	bls.n	9990 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb84>
    998e:	4610      	mov	r0, r2
    9990:	2801      	cmp	r0, #1
    9992:	d101      	bne.n	9998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb8c>
    9994:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
    9998:	68a1      	ldr	r1, [r4, #8]
    999a:	f8b1 2074 	ldrh.w	r2, [r1, #116]	; 0x74
    999e:	4410      	add	r0, r2
    99a0:	f8a1 00fc 	strh.w	r0, [r1, #252]	; 0xfc
    99a4:	f001 f8ce 	bl	ab44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d38>
    99a8:	78a0      	ldrb	r0, [r4, #2]
    99aa:	464a      	mov	r2, r9
    99ac:	f3c0 1180 	ubfx	r1, r0, #6, #1
    99b0:	4650      	mov	r0, sl
    99b2:	f001 f811 	bl	a9d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bcc>
    99b6:	68a0      	ldr	r0, [r4, #8]
    99b8:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    99bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    99c0:	f7fb bfe4 	b.w	598c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    99c4:	2001      	movs	r0, #1
    99c6:	68a1      	ldr	r1, [r4, #8]
    99c8:	e7e4      	b.n	9994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
    99ca:	0000      	.short	0x0000
    99cc:	20000118 	.word	0x20000118
    99d0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    99d2:	4c58      	ldr	r4, [pc, #352]	; (9b34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd28>)
    99d4:	2301      	movs	r3, #1
    99d6:	2100      	movs	r1, #0
    99d8:	68a0      	ldr	r0, [r4, #8]
    99da:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    99de:	3070      	adds	r0, #112	; 0x70
    99e0:	f004 fa21 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99e4:	2800      	cmp	r0, #0
    99e6:	d07d      	beq.n	9ae4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd8>
    99e8:	68a0      	ldr	r0, [r4, #8]
    99ea:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    99ee:	2500      	movs	r5, #0
    99f0:	b139      	cbz	r1, 9a02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbf6>
    99f2:	2100      	movs	r1, #0
    99f4:	200e      	movs	r0, #14
    99f6:	f000 f89f 	bl	9b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    99fa:	68a0      	ldr	r0, [r4, #8]
    99fc:	f880 51b5 	strb.w	r5, [r0, #437]	; 0x1b5
    9a00:	e095      	b.n	9b2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd22>
    9a02:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    9a06:	b119      	cbz	r1, 9a10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc04>
    9a08:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    9a0c:	0789      	lsls	r1, r1, #30
    9a0e:	d016      	beq.n	9a3e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc32>
    9a10:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
    9a14:	f88d 1004 	strb.w	r1, [sp, #4]
    9a18:	9901      	ldr	r1, [sp, #4]
    9a1a:	9101      	str	r1, [sp, #4]
    9a1c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9a20:	b141      	cbz	r1, 9a34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc28>
    9a22:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
    9a26:	f88d 1000 	strb.w	r1, [sp]
    9a2a:	9900      	ldr	r1, [sp, #0]
    9a2c:	9100      	str	r1, [sp, #0]
    9a2e:	f89d 1000 	ldrb.w	r1, [sp]
    9a32:	b189      	cbz	r1, 9a58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc4c>
    9a34:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    9a38:	2901      	cmp	r1, #1
    9a3a:	d02f      	beq.n	9a9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc90>
    9a3c:	e071      	b.n	9b22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd16>
    9a3e:	2100      	movs	r1, #0
    9a40:	200c      	movs	r0, #12
    9a42:	f000 f879 	bl	9b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    9a46:	68a0      	ldr	r0, [r4, #8]
    9a48:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
    9a4c:	f041 0101 	orr.w	r1, r1, #1
    9a50:	7001      	strb	r1, [r0, #0]
    9a52:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
    9a56:	e06a      	b.n	9b2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd22>
    9a58:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9a5c:	2924      	cmp	r1, #36	; 0x24
    9a5e:	d01b      	beq.n	9a98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8c>
    9a60:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9a64:	2924      	cmp	r1, #36	; 0x24
    9a66:	d017      	beq.n	9a98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8c>
    9a68:	f05f 0300 	movs.w	r3, #0
    9a6c:	f500 72cb 	add.w	r2, r0, #406	; 0x196
    9a70:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
    9a74:	f004 fdce 	bl	e614 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9a78:	68a0      	ldr	r0, [r4, #8]
    9a7a:	f880 51a4 	strb.w	r5, [r0, #420]	; 0x1a4
    9a7e:	2100      	movs	r1, #0
    9a80:	2014      	movs	r0, #20
    9a82:	f000 f859 	bl	9b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    9a86:	68a1      	ldr	r1, [r4, #8]
    9a88:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    9a8c:	8bc2      	ldrh	r2, [r0, #30]
    9a8e:	f821 2fee 	strh.w	r2, [r1, #238]!
    9a92:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9a94:	8048      	strh	r0, [r1, #2]
    9a96:	e04a      	b.n	9b2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd22>
    9a98:	2301      	movs	r3, #1
    9a9a:	e7e7      	b.n	9a6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    9a9c:	f890 11af 	ldrb.w	r1, [r0, #431]	; 0x1af
    9aa0:	f88d 1000 	strb.w	r1, [sp]
    9aa4:	9900      	ldr	r1, [sp, #0]
    9aa6:	9100      	str	r1, [sp, #0]
    9aa8:	f89d 1000 	ldrb.w	r1, [sp]
    9aac:	bb31      	cbnz	r1, 9afc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf0>
    9aae:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9ab2:	2301      	movs	r3, #1
    9ab4:	210b      	movs	r1, #11
    9ab6:	3070      	adds	r0, #112	; 0x70
    9ab8:	f004 f9b5 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9abc:	b9f0      	cbnz	r0, 9afc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf0>
    9abe:	68a0      	ldr	r0, [r4, #8]
    9ac0:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    9ac4:	f005 fcd8 	bl	f478 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9ac8:	4605      	mov	r5, r0
    9aca:	68a0      	ldr	r0, [r4, #8]
    9acc:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    9ad0:	f005 fcd2 	bl	f478 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9ad4:	4606      	mov	r6, r0
    9ad6:	68a0      	ldr	r0, [r4, #8]
    9ad8:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
    9adc:	4628      	mov	r0, r5
    9ade:	f005 fcd6 	bl	f48e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9ae2:	e000      	b.n	9ae6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcda>
    9ae4:	e01e      	b.n	9b24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    9ae6:	b150      	cbz	r0, 9afe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf2>
    9ae8:	68a0      	ldr	r0, [r4, #8]
    9aea:	f890 11b1 	ldrb.w	r1, [r0, #433]	; 0x1b1
    9aee:	4630      	mov	r0, r6
    9af0:	f005 fccd 	bl	f48e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9af4:	b118      	cbz	r0, 9afe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf2>
    9af6:	2000      	movs	r0, #0
    9af8:	f000 f91c 	bl	9d34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    9afc:	e011      	b.n	9b22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd16>
    9afe:	68a0      	ldr	r0, [r4, #8]
    9b00:	2301      	movs	r3, #1
    9b02:	2103      	movs	r1, #3
    9b04:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9b08:	3070      	adds	r0, #112	; 0x70
    9b0a:	f004 f98c 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b0e:	b940      	cbnz	r0, 9b22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd16>
    9b10:	68a0      	ldr	r0, [r4, #8]
    9b12:	2301      	movs	r3, #1
    9b14:	2102      	movs	r1, #2
    9b16:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9b1a:	3070      	adds	r0, #112	; 0x70
    9b1c:	f004 f983 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b20:	b108      	cbz	r0, 9b26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1a>
    9b22:	2000      	movs	r0, #0
    9b24:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9b26:	2100      	movs	r1, #0
    9b28:	2016      	movs	r0, #22
    9b2a:	f000 f805 	bl	9b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    9b2e:	2001      	movs	r0, #1
    9b30:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9b32:	0000      	.short	0x0000
    9b34:	20000118 	.word	0x20000118
    9b38:	b570      	push	{r4, r5, r6, lr}
    9b3a:	4c0d      	ldr	r4, [pc, #52]	; (9b70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd64>)
    9b3c:	4606      	mov	r6, r0
    9b3e:	460d      	mov	r5, r1
    9b40:	68a0      	ldr	r0, [r4, #8]
    9b42:	3070      	adds	r0, #112	; 0x70
    9b44:	f005 fc90 	bl	f468 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9b48:	b120      	cbz	r0, 9b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd48>
    9b4a:	f640 210f 	movw	r1, #2575	; 0xa0f
    9b4e:	2031      	movs	r0, #49	; 0x31
    9b50:	f7fb f892 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b54:	68a2      	ldr	r2, [r4, #8]
    9b56:	2000      	movs	r0, #0
    9b58:	f882 60ec 	strb.w	r6, [r2, #236]	; 0xec
    9b5c:	b115      	cbz	r5, 9b64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd58>
    9b5e:	f8a2 00b0 	strh.w	r0, [r2, #176]	; 0xb0
    9b62:	bd70      	pop	{r4, r5, r6, pc}
    9b64:	f822 0faa 	strh.w	r0, [r2, #170]!
    9b68:	2001      	movs	r0, #1
    9b6a:	7110      	strb	r0, [r2, #4]
    9b6c:	bd70      	pop	{r4, r5, r6, pc}
    9b6e:	0000      	.short	0x0000
    9b70:	20000118 	.word	0x20000118
    9b74:	b570      	push	{r4, r5, r6, lr}
    9b76:	4d1a      	ldr	r5, [pc, #104]	; (9be0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    9b78:	2600      	movs	r6, #0
    9b7a:	68ac      	ldr	r4, [r5, #8]
    9b7c:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
    9b80:	2801      	cmp	r0, #1
    9b82:	d00a      	beq.n	9b9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd8e>
    9b84:	2802      	cmp	r0, #2
    9b86:	d129      	bne.n	9bdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    9b88:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    9b8c:	2106      	movs	r1, #6
    9b8e:	b1a0      	cbz	r0, 9bba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    9b90:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
    9b94:	2101      	movs	r1, #1
    9b96:	2002      	movs	r0, #2
    9b98:	e01b      	b.n	9bd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    9b9a:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    9b9e:	2800      	cmp	r0, #0
    9ba0:	d11c      	bne.n	9bdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    9ba2:	2200      	movs	r2, #0
    9ba4:	f504 70be 	add.w	r0, r4, #380	; 0x17c
    9ba8:	f504 7188 	add.w	r1, r4, #272	; 0x110
    9bac:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    9bb0:	f004 f8f1 	bl	dd96 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9bb4:	2101      	movs	r1, #1
    9bb6:	2005      	movs	r0, #5
    9bb8:	e00b      	b.n	9bd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    9bba:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    9bbe:	0740      	lsls	r0, r0, #29
    9bc0:	d505      	bpl.n	9bce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc2>
    9bc2:	2011      	movs	r0, #17
    9bc4:	2203      	movs	r2, #3
    9bc6:	f804 2fee 	strb.w	r2, [r4, #238]!
    9bca:	7061      	strb	r1, [r4, #1]
    9bcc:	e000      	b.n	9bd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
    9bce:	200d      	movs	r0, #13
    9bd0:	2101      	movs	r1, #1
    9bd2:	f7ff ffb1 	bl	9b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    9bd6:	68a8      	ldr	r0, [r5, #8]
    9bd8:	f880 617b 	strb.w	r6, [r0, #379]	; 0x17b
    9bdc:	bd70      	pop	{r4, r5, r6, pc}
    9bde:	0000      	.short	0x0000
    9be0:	20000118 	.word	0x20000118
    9be4:	b570      	push	{r4, r5, r6, lr}
    9be6:	4a2b      	ldr	r2, [pc, #172]	; (9c94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe88>)
    9be8:	4603      	mov	r3, r0
    9bea:	8850      	ldrh	r0, [r2, #2]
    9bec:	4318      	orrs	r0, r3
    9bee:	8050      	strh	r0, [r2, #2]
    9bf0:	4610      	mov	r0, r2
    9bf2:	2b40      	cmp	r3, #64	; 0x40
    9bf4:	6880      	ldr	r0, [r0, #8]
    9bf6:	d00d      	beq.n	9c14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe08>
    9bf8:	079e      	lsls	r6, r3, #30
    9bfa:	f04f 0500 	mov.w	r5, #0
    9bfe:	f04f 0401 	mov.w	r4, #1
    9c02:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    9c06:	d50c      	bpl.n	9c22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe16>
    9c08:	b14e      	cbz	r6, 9c1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe12>
    9c0a:	f640 510f 	movw	r1, #3343	; 0xd0f
    9c0e:	2031      	movs	r0, #49	; 0x31
    9c10:	f7fb f832 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9c18:	2104      	movs	r1, #4
    9c1a:	f7fe bb59 	b.w	82d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9c1e:	60d1      	str	r1, [r2, #12]
    9c20:	e01c      	b.n	9c5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe50>
    9c22:	b1c6      	cbz	r6, 9c56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    9c24:	6111      	str	r1, [r2, #16]
    9c26:	78c9      	ldrb	r1, [r1, #3]
    9c28:	2906      	cmp	r1, #6
    9c2a:	d002      	beq.n	9c32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe26>
    9c2c:	290b      	cmp	r1, #11
    9c2e:	d112      	bne.n	9c56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    9c30:	e009      	b.n	9c46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3a>
    9c32:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9c36:	2917      	cmp	r1, #23
    9c38:	d10d      	bne.n	9c56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    9c3a:	2100      	movs	r1, #0
    9c3c:	e9c0 1130 	strd	r1, r1, [r0, #192]	; 0xc0
    9c40:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
    9c44:	e007      	b.n	9c56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    9c46:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9c4a:	2911      	cmp	r1, #17
    9c4c:	d103      	bne.n	9c56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    9c4e:	f880 5082 	strb.w	r5, [r0, #130]	; 0x82
    9c52:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
    9c56:	0799      	lsls	r1, r3, #30
    9c58:	d516      	bpl.n	9c88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    9c5a:	68d1      	ldr	r1, [r2, #12]
    9c5c:	78c9      	ldrb	r1, [r1, #3]
    9c5e:	2905      	cmp	r1, #5
    9c60:	d002      	beq.n	9c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5c>
    9c62:	290b      	cmp	r1, #11
    9c64:	d110      	bne.n	9c88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    9c66:	e009      	b.n	9c7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe70>
    9c68:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9c6c:	2915      	cmp	r1, #21
    9c6e:	d10b      	bne.n	9c88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    9c70:	2100      	movs	r1, #0
    9c72:	e9e0 1132 	strd	r1, r1, [r0, #200]!	; 0xc8
    9c76:	f800 4c45 	strb.w	r4, [r0, #-69]
    9c7a:	e005      	b.n	9c88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    9c7c:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9c80:	2910      	cmp	r1, #16
    9c82:	d101      	bne.n	9c88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    9c84:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
    9c88:	0698      	lsls	r0, r3, #26
    9c8a:	d501      	bpl.n	9c90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    9c8c:	2008      	movs	r0, #8
    9c8e:	7050      	strb	r0, [r2, #1]
    9c90:	bd70      	pop	{r4, r5, r6, pc}
    9c92:	0000      	.short	0x0000
    9c94:	20000118 	.word	0x20000118
    9c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c9c:	4c24      	ldr	r4, [pc, #144]	; (9d30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf24>)
    9c9e:	2501      	movs	r5, #1
    9ca0:	68a2      	ldr	r2, [r4, #8]
    9ca2:	f892 0196 	ldrb.w	r0, [r2, #406]	; 0x196
    9ca6:	b108      	cbz	r0, 9cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    9ca8:	2701      	movs	r7, #1
    9caa:	e000      	b.n	9cae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea2>
    9cac:	2700      	movs	r7, #0
    9cae:	f892 1197 	ldrb.w	r1, [r2, #407]	; 0x197
    9cb2:	b109      	cbz	r1, 9cb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    9cb4:	2601      	movs	r6, #1
    9cb6:	e000      	b.n	9cba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeae>
    9cb8:	2600      	movs	r6, #0
    9cba:	b90f      	cbnz	r7, 9cc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb4>
    9cbc:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    9cc0:	b90e      	cbnz	r6, 9cc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
    9cc2:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    9cc6:	f102 0362 	add.w	r3, r2, #98	; 0x62
    9cca:	7218      	strb	r0, [r3, #8]
    9ccc:	7259      	strb	r1, [r3, #9]
    9cce:	2001      	movs	r0, #1
    9cd0:	7298      	strb	r0, [r3, #10]
    9cd2:	f892 01ae 	ldrb.w	r0, [r2, #430]	; 0x1ae
    9cd6:	2801      	cmp	r0, #1
    9cd8:	d001      	beq.n	9cde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    9cda:	b907      	cbnz	r7, 9cde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    9cdc:	b116      	cbz	r6, 9ce4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed8>
    9cde:	2000      	movs	r0, #0
    9ce0:	f000 f828 	bl	9d34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    9ce4:	68a0      	ldr	r0, [r4, #8]
    9ce6:	302c      	adds	r0, #44	; 0x2c
    9ce8:	f004 fd03 	bl	e6f2 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9cec:	4606      	mov	r6, r0
    9cee:	68a0      	ldr	r0, [r4, #8]
    9cf0:	f004 fcab 	bl	e64a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9cf4:	b1c0      	cbz	r0, 9d28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1c>
    9cf6:	68a0      	ldr	r0, [r4, #8]
    9cf8:	302c      	adds	r0, #44	; 0x2c
    9cfa:	f004 fcfa 	bl	e6f2 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9cfe:	68a1      	ldr	r1, [r4, #8]
    9d00:	4607      	mov	r7, r0
    9d02:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
    9d06:	8808      	ldrh	r0, [r1, #0]
    9d08:	312c      	adds	r1, #44	; 0x2c
    9d0a:	f004 fc5f 	bl	e5cc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9d0e:	42be      	cmp	r6, r7
    9d10:	d20a      	bcs.n	9d28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1c>
    9d12:	f7f8 fbd9 	bl	24c8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    9d16:	4601      	mov	r1, r0
    9d18:	1bb8      	subs	r0, r7, r6
    9d1a:	2864      	cmp	r0, #100	; 0x64
    9d1c:	d200      	bcs.n	9d20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf14>
    9d1e:	2064      	movs	r0, #100	; 0x64
    9d20:	f7f8 fb10 	bl	2344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    9d24:	b100      	cbz	r0, 9d28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1c>
    9d26:	2500      	movs	r5, #0
    9d28:	4628      	mov	r0, r5
    9d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9d2e:	0000      	.short	0x0000
    9d30:	20000118 	.word	0x20000118
    9d34:	b510      	push	{r4, lr}
    9d36:	4c10      	ldr	r4, [pc, #64]	; (9d78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf6c>)
    9d38:	68a1      	ldr	r1, [r4, #8]
    9d3a:	880a      	ldrh	r2, [r1, #0]
    9d3c:	f8a1 2206 	strh.w	r2, [r1, #518]	; 0x206
    9d40:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
    9d44:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    9d48:	f005 fb96 	bl	f478 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9d4c:	68a1      	ldr	r1, [r4, #8]
    9d4e:	f881 0208 	strb.w	r0, [r1, #520]	; 0x208
    9d52:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    9d56:	f005 fb8f 	bl	f478 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9d5a:	68a2      	ldr	r2, [r4, #8]
    9d5c:	f202 2102 	addw	r1, r2, #514	; 0x202
    9d60:	f882 0209 	strb.w	r0, [r2, #521]	; 0x209
    9d64:	2001      	movs	r0, #1
    9d66:	7008      	strb	r0, [r1, #0]
    9d68:	2000      	movs	r0, #0
    9d6a:	f882 01ae 	strb.w	r0, [r2, #430]	; 0x1ae
    9d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9d72:	f000 bf4b 	b.w	ac0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9d76:	0000      	.short	0x0000
    9d78:	20000118 	.word	0x20000118
    9d7c:	b510      	push	{r4, lr}
    9d7e:	4c15      	ldr	r4, [pc, #84]	; (9dd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc8>)
    9d80:	2301      	movs	r3, #1
    9d82:	2100      	movs	r1, #0
    9d84:	68a0      	ldr	r0, [r4, #8]
    9d86:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9d8a:	3070      	adds	r0, #112	; 0x70
    9d8c:	f004 f84b 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d90:	b190      	cbz	r0, 9db8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfac>
    9d92:	6920      	ldr	r0, [r4, #16]
    9d94:	f004 fa8e 	bl	e2b4 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    9d98:	68a1      	ldr	r1, [r4, #8]
    9d9a:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    9d9e:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    9da2:	f005 fb82 	bl	f4aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9da6:	b148      	cbz	r0, 9dbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb0>
    9da8:	68a0      	ldr	r0, [r4, #8]
    9daa:	2128      	movs	r1, #40	; 0x28
    9dac:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    9db0:	3076      	adds	r0, #118	; 0x76
    9db2:	2101      	movs	r1, #1
    9db4:	7781      	strb	r1, [r0, #30]
    9db6:	e00b      	b.n	9dd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc4>
    9db8:	2001      	movs	r0, #1
    9dba:	bd10      	pop	{r4, pc}
    9dbc:	68a1      	ldr	r1, [r4, #8]
    9dbe:	6920      	ldr	r0, [r4, #16]
    9dc0:	f501 71cb 	add.w	r1, r1, #406	; 0x196
    9dc4:	f004 fa71 	bl	e2aa <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    9dc8:	68a1      	ldr	r1, [r4, #8]
    9dca:	200b      	movs	r0, #11
    9dcc:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9dd0:	2000      	movs	r0, #0
    9dd2:	bd10      	pop	{r4, pc}
    9dd4:	20000118 	.word	0x20000118
    9dd8:	b570      	push	{r4, r5, r6, lr}
    9dda:	4c29      	ldr	r4, [pc, #164]	; (9e80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1074>)
    9ddc:	2301      	movs	r3, #1
    9dde:	2100      	movs	r1, #0
    9de0:	68a0      	ldr	r0, [r4, #8]
    9de2:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9de6:	3070      	adds	r0, #112	; 0x70
    9de8:	f004 f81d 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9dec:	b1b8      	cbz	r0, 9e1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1012>
    9dee:	2100      	movs	r1, #0
    9df0:	6920      	ldr	r0, [r4, #16]
    9df2:	f004 fa32 	bl	e25a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    9df6:	b1a0      	cbz	r0, 9e22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1016>
    9df8:	6920      	ldr	r0, [r4, #16]
    9dfa:	68a1      	ldr	r1, [r4, #8]
    9dfc:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    9e00:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    9e04:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    9e08:	f005 fb4f 	bl	f4aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9e0c:	b168      	cbz	r0, 9e2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x101e>
    9e0e:	68a0      	ldr	r0, [r4, #8]
    9e10:	2128      	movs	r1, #40	; 0x28
    9e12:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    9e16:	3076      	adds	r0, #118	; 0x76
    9e18:	2101      	movs	r1, #1
    9e1a:	7781      	strb	r1, [r0, #30]
    9e1c:	e02e      	b.n	9e7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1070>
    9e1e:	2001      	movs	r0, #1
    9e20:	bd70      	pop	{r4, r5, r6, pc}
    9e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9e26:	f000 b8ad 	b.w	9f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    9e2a:	6920      	ldr	r0, [r4, #16]
    9e2c:	f004 fa45 	bl	e2ba <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    9e30:	f003 ffdc 	bl	ddec <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    9e34:	4605      	mov	r5, r0
    9e36:	68a0      	ldr	r0, [r4, #8]
    9e38:	4629      	mov	r1, r5
    9e3a:	f8c0 519c 	str.w	r5, [r0, #412]	; 0x19c
    9e3e:	6920      	ldr	r0, [r4, #16]
    9e40:	7900      	ldrb	r0, [r0, #4]
    9e42:	f004 f95e 	bl	e102 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    9e46:	68a1      	ldr	r1, [r4, #8]
    9e48:	f8a1 0196 	strh.w	r0, [r1, #406]	; 0x196
    9e4c:	6920      	ldr	r0, [r4, #16]
    9e4e:	4629      	mov	r1, r5
    9e50:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    9e54:	f004 f951 	bl	e0fa <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    9e58:	68a1      	ldr	r1, [r4, #8]
    9e5a:	f8c1 0198 	str.w	r0, [r1, #408]	; 0x198
    9e5e:	6920      	ldr	r0, [r4, #16]
    9e60:	f004 fa2e 	bl	e2c0 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    9e64:	68a1      	ldr	r1, [r4, #8]
    9e66:	f8a1 01a0 	strh.w	r0, [r1, #416]	; 0x1a0
    9e6a:	6920      	ldr	r0, [r4, #16]
    9e6c:	f004 fa2b 	bl	e2c6 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    9e70:	68a1      	ldr	r1, [r4, #8]
    9e72:	f8a1 01a2 	strh.w	r0, [r1, #418]	; 0x1a2
    9e76:	200d      	movs	r0, #13
    9e78:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9e7c:	2000      	movs	r0, #0
    9e7e:	bd70      	pop	{r4, r5, r6, pc}
    9e80:	20000118 	.word	0x20000118
    9e84:	b538      	push	{r3, r4, r5, lr}
    9e86:	4c29      	ldr	r4, [pc, #164]	; (9f2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1120>)
    9e88:	2301      	movs	r3, #1
    9e8a:	2100      	movs	r1, #0
    9e8c:	68a0      	ldr	r0, [r4, #8]
    9e8e:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9e92:	3070      	adds	r0, #112	; 0x70
    9e94:	f003 ffc7 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e98:	b970      	cbnz	r0, 9eb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ac>
    9e9a:	68a0      	ldr	r0, [r4, #8]
    9e9c:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9ea0:	2a12      	cmp	r2, #18
    9ea2:	d009      	beq.n	9eb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ac>
    9ea4:	2301      	movs	r3, #1
    9ea6:	2105      	movs	r1, #5
    9ea8:	3070      	adds	r0, #112	; 0x70
    9eaa:	f003 ffbc 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9eae:	b108      	cbz	r0, 9eb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a8>
    9eb0:	2008      	movs	r0, #8
    9eb2:	bd38      	pop	{r3, r4, r5, pc}
    9eb4:	2001      	movs	r0, #1
    9eb6:	bd38      	pop	{r3, r4, r5, pc}
    9eb8:	68a0      	ldr	r0, [r4, #8]
    9eba:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    9ebe:	b908      	cbnz	r0, 9ec4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>
    9ec0:	f7ff f8ca 	bl	9058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    9ec4:	68a1      	ldr	r1, [r4, #8]
    9ec6:	6920      	ldr	r0, [r4, #16]
    9ec8:	f501 7188 	add.w	r1, r1, #272	; 0x110
    9ecc:	f004 fa0a 	bl	e2e4 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    9ed0:	68a1      	ldr	r1, [r4, #8]
    9ed2:	6920      	ldr	r0, [r4, #16]
    9ed4:	31e0      	adds	r1, #224	; 0xe0
    9ed6:	f004 f9fc 	bl	e2d2 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    9eda:	68a1      	ldr	r1, [r4, #8]
    9edc:	f891 01cc 	ldrb.w	r0, [r1, #460]	; 0x1cc
    9ee0:	f88d 0000 	strb.w	r0, [sp]
    9ee4:	9800      	ldr	r0, [sp, #0]
    9ee6:	9000      	str	r0, [sp, #0]
    9ee8:	f89d 0000 	ldrb.w	r0, [sp]
    9eec:	b120      	cbz	r0, 9ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ec>
    9eee:	f44f 7128 	mov.w	r1, #672	; 0x2a0
    9ef2:	2031      	movs	r0, #49	; 0x31
    9ef4:	f7fa fec0 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ef8:	8808      	ldrh	r0, [r1, #0]
    9efa:	f8a1 01ce 	strh.w	r0, [r1, #462]	; 0x1ce
    9efe:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
    9f02:	6920      	ldr	r0, [r4, #16]
    9f04:	f004 f9e9 	bl	e2da <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    9f08:	68a1      	ldr	r1, [r4, #8]
    9f0a:	6920      	ldr	r0, [r4, #16]
    9f0c:	f501 71ec 	add.w	r1, r1, #472	; 0x1d8
    9f10:	f004 f9dc 	bl	e2cc <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    9f14:	68a0      	ldr	r0, [r4, #8]
    9f16:	4601      	mov	r1, r0
    9f18:	2201      	movs	r2, #1
    9f1a:	f880 21cc 	strb.w	r2, [r0, #460]	; 0x1cc
    9f1e:	2014      	movs	r0, #20
    9f20:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9f24:	f000 fe72 	bl	ac0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9f28:	2000      	movs	r0, #0
    9f2a:	bd38      	pop	{r3, r4, r5, pc}
    9f2c:	20000118 	.word	0x20000118
    9f30:	b51c      	push	{r2, r3, r4, lr}
    9f32:	4c13      	ldr	r4, [pc, #76]	; (9f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>)
    9f34:	68a0      	ldr	r0, [r4, #8]
    9f36:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9f3a:	07c0      	lsls	r0, r0, #31
    9f3c:	d001      	beq.n	9f42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1136>
    9f3e:	2001      	movs	r0, #1
    9f40:	bd1c      	pop	{r2, r3, r4, pc}
    9f42:	4669      	mov	r1, sp
    9f44:	6920      	ldr	r0, [r4, #16]
    9f46:	f004 f9d3 	bl	e2f0 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    9f4a:	f001 fa09 	bl	b360 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9f4e:	f644 112f 	movw	r1, #18735	; 0x492f
    9f52:	4008      	ands	r0, r1
    9f54:	f89d 2000 	ldrb.w	r2, [sp]
    9f58:	68a1      	ldr	r1, [r4, #8]
    9f5a:	4002      	ands	r2, r0
    9f5c:	f801 2fbc 	strb.w	r2, [r1, #188]!
    9f60:	f89d 2001 	ldrb.w	r2, [sp, #1]
    9f64:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    9f68:	7048      	strb	r0, [r1, #1]
    9f6a:	f7ff f875 	bl	9058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    9f6e:	68a0      	ldr	r0, [r4, #8]
    9f70:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9f74:	f041 0101 	orr.w	r1, r1, #1
    9f78:	7001      	strb	r1, [r0, #0]
    9f7a:	2000      	movs	r0, #0
    9f7c:	bd1c      	pop	{r2, r3, r4, pc}
    9f7e:	0000      	.short	0x0000
    9f80:	20000118 	.word	0x20000118
    9f84:	4a0a      	ldr	r2, [pc, #40]	; (9fb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    9f86:	b510      	push	{r4, lr}
    9f88:	6890      	ldr	r0, [r2, #8]
    9f8a:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9f8e:	070b      	lsls	r3, r1, #28
    9f90:	d501      	bpl.n	9f96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x118a>
    9f92:	2001      	movs	r0, #1
    9f94:	bd10      	pop	{r4, pc}
    9f96:	f041 0108 	orr.w	r1, r1, #8
    9f9a:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9f9e:	6911      	ldr	r1, [r2, #16]
    9fa0:	78c9      	ldrb	r1, [r1, #3]
    9fa2:	f880 10e9 	strb.w	r1, [r0, #233]	; 0xe9
    9fa6:	f7ff f857 	bl	9058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    9faa:	2000      	movs	r0, #0
    9fac:	bd10      	pop	{r4, pc}
    9fae:	0000      	.short	0x0000
    9fb0:	20000118 	.word	0x20000118
    9fb4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9fb8:	4c34      	ldr	r4, [pc, #208]	; (a08c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1280>)
    9fba:	68a0      	ldr	r0, [r4, #8]
    9fbc:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9fc0:	f010 0f30 	tst.w	r0, #48	; 0x30
    9fc4:	d002      	beq.n	9fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>
    9fc6:	2001      	movs	r0, #1
    9fc8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9fcc:	6920      	ldr	r0, [r4, #16]
    9fce:	f004 f9aa 	bl	e326 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9fd2:	b318      	cbz	r0, a01c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1210>
    9fd4:	6920      	ldr	r0, [r4, #16]
    9fd6:	f004 f998 	bl	e30a <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9fda:	4607      	mov	r7, r0
    9fdc:	6920      	ldr	r0, [r4, #16]
    9fde:	f004 f998 	bl	e312 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9fe2:	4606      	mov	r6, r0
    9fe4:	6920      	ldr	r0, [r4, #16]
    9fe6:	f004 f98e 	bl	e306 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9fea:	4605      	mov	r5, r0
    9fec:	6920      	ldr	r0, [r4, #16]
    9fee:	f004 f98e 	bl	e30e <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9ff2:	4601      	mov	r1, r0
    9ff4:	9700      	str	r7, [sp, #0]
    9ff6:	68a0      	ldr	r0, [r4, #8]
    9ff8:	4633      	mov	r3, r6
    9ffa:	462a      	mov	r2, r5
    9ffc:	302c      	adds	r0, #44	; 0x2c
    9ffe:	f004 fbb2 	bl	e766 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a002:	78a0      	ldrb	r0, [r4, #2]
    a004:	0780      	lsls	r0, r0, #30
    a006:	d503      	bpl.n	a010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1204>
    a008:	68e0      	ldr	r0, [r4, #12]
    a00a:	78c0      	ldrb	r0, [r0, #3]
    a00c:	2814      	cmp	r0, #20
    a00e:	d009      	beq.n	a024 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
    a010:	68a0      	ldr	r0, [r4, #8]
    a012:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    a016:	281c      	cmp	r0, #28
    a018:	d004      	beq.n	a024 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
    a01a:	e007      	b.n	a02c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1220>
    a01c:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a020:	f7ff bfb0 	b.w	9f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    a024:	68a1      	ldr	r1, [r4, #8]
    a026:	2001      	movs	r0, #1
    a028:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    a02c:	68a1      	ldr	r1, [r4, #8]
    a02e:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    a032:	2801      	cmp	r0, #1
    a034:	d011      	beq.n	a05a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124e>
    a036:	f891 01a5 	ldrb.w	r0, [r1, #421]	; 0x1a5
    a03a:	f88d 0004 	strb.w	r0, [sp, #4]
    a03e:	9801      	ldr	r0, [sp, #4]
    a040:	9001      	str	r0, [sp, #4]
    a042:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a046:	b940      	cbnz	r0, a05a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124e>
    a048:	f891 01a4 	ldrb.w	r0, [r1, #420]	; 0x1a4
    a04c:	f88d 0000 	strb.w	r0, [sp]
    a050:	9800      	ldr	r0, [sp, #0]
    a052:	9000      	str	r0, [sp, #0]
    a054:	f89d 0000 	ldrb.w	r0, [sp]
    a058:	b128      	cbz	r0, a066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x125a>
    a05a:	f811 0f7f 	ldrb.w	r0, [r1, #127]!
    a05e:	f040 0010 	orr.w	r0, r0, #16
    a062:	7008      	strb	r0, [r1, #0]
    a064:	e00d      	b.n	a082 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1276>
    a066:	f891 007f 	ldrb.w	r0, [r1, #127]	; 0x7f
    a06a:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
    a06e:	f040 0020 	orr.w	r0, r0, #32
    a072:	f881 007f 	strb.w	r0, [r1, #127]	; 0x7f
    a076:	f831 0b2c 	ldrh.w	r0, [r1], #44
    a07a:	f004 fb7b 	bl	e774 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    a07e:	f000 fdc5 	bl	ac0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a082:	f7fe ffe9 	bl	9058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    a086:	2000      	movs	r0, #0
    a088:	e79e      	b.n	9fc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11bc>
    a08a:	0000      	.short	0x0000
    a08c:	20000118 	.word	0x20000118
    a090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a092:	4c1a      	ldr	r4, [pc, #104]	; (a0fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f0>)
    a094:	2301      	movs	r3, #1
    a096:	210a      	movs	r1, #10
    a098:	68a0      	ldr	r0, [r4, #8]
    a09a:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a09e:	3070      	adds	r0, #112	; 0x70
    a0a0:	f003 fec1 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a0a4:	b338      	cbz	r0, a0f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ea>
    a0a6:	6920      	ldr	r0, [r4, #16]
    a0a8:	f004 f93d 	bl	e326 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a0ac:	b1c8      	cbz	r0, a0e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d6>
    a0ae:	6920      	ldr	r0, [r4, #16]
    a0b0:	f004 f92b 	bl	e30a <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a0b4:	4607      	mov	r7, r0
    a0b6:	6920      	ldr	r0, [r4, #16]
    a0b8:	f004 f92b 	bl	e312 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a0bc:	4606      	mov	r6, r0
    a0be:	6920      	ldr	r0, [r4, #16]
    a0c0:	f004 f921 	bl	e306 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a0c4:	4605      	mov	r5, r0
    a0c6:	6920      	ldr	r0, [r4, #16]
    a0c8:	f004 f921 	bl	e30e <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a0cc:	4601      	mov	r1, r0
    a0ce:	9700      	str	r7, [sp, #0]
    a0d0:	68a0      	ldr	r0, [r4, #8]
    a0d2:	4633      	mov	r3, r6
    a0d4:	462a      	mov	r2, r5
    a0d6:	302c      	adds	r0, #44	; 0x2c
    a0d8:	f004 fb45 	bl	e766 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a0dc:	68a0      	ldr	r0, [r4, #8]
    a0de:	f004 fab4 	bl	e64a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a0e2:	68a1      	ldr	r1, [r4, #8]
    a0e4:	2000      	movs	r0, #0
    a0e6:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
    a0ea:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a0ee:	f7ff f977 	bl	93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    a0f2:	2000      	movs	r0, #0
    a0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a0f6:	2001      	movs	r0, #1
    a0f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a0fa:	0000      	.short	0x0000
    a0fc:	20000118 	.word	0x20000118
    a100:	b510      	push	{r4, lr}
    a102:	4c09      	ldr	r4, [pc, #36]	; (a128 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x131c>)
    a104:	68a0      	ldr	r0, [r4, #8]
    a106:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    a10a:	0740      	lsls	r0, r0, #29
    a10c:	d501      	bpl.n	a112 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1306>
    a10e:	2001      	movs	r0, #1
    a110:	bd10      	pop	{r4, pc}
    a112:	f7fe ffa1 	bl	9058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    a116:	68a0      	ldr	r0, [r4, #8]
    a118:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    a11c:	f041 0104 	orr.w	r1, r1, #4
    a120:	7001      	strb	r1, [r0, #0]
    a122:	2000      	movs	r0, #0
    a124:	bd10      	pop	{r4, pc}
    a126:	0000      	.short	0x0000
    a128:	20000118 	.word	0x20000118
    a12c:	b510      	push	{r4, lr}
    a12e:	4c09      	ldr	r4, [pc, #36]	; (a154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1348>)
    a130:	2301      	movs	r3, #1
    a132:	2109      	movs	r1, #9
    a134:	68a0      	ldr	r0, [r4, #8]
    a136:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a13a:	3070      	adds	r0, #112	; 0x70
    a13c:	f003 fe73 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a140:	2800      	cmp	r0, #0
    a142:	d006      	beq.n	a152 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1346>
    a144:	68a1      	ldr	r1, [r4, #8]
    a146:	2000      	movs	r0, #0
    a148:	f801 0fa2 	strb.w	r0, [r1, #162]!
    a14c:	7308      	strb	r0, [r1, #12]
    a14e:	f801 0c25 	strb.w	r0, [r1, #-37]
    a152:	bd10      	pop	{r4, pc}
    a154:	20000118 	.word	0x20000118
    a158:	b510      	push	{r4, lr}
    a15a:	4c0f      	ldr	r4, [pc, #60]	; (a198 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138c>)
    a15c:	2301      	movs	r3, #1
    a15e:	2100      	movs	r1, #0
    a160:	68a0      	ldr	r0, [r4, #8]
    a162:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    a166:	3070      	adds	r0, #112	; 0x70
    a168:	f003 fe5d 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a16c:	b138      	cbz	r0, a17e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1372>
    a16e:	f7fe ff73 	bl	9058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    a172:	68a1      	ldr	r1, [r4, #8]
    a174:	2010      	movs	r0, #16
    a176:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    a17a:	2000      	movs	r0, #0
    a17c:	bd10      	pop	{r4, pc}
    a17e:	68a0      	ldr	r0, [r4, #8]
    a180:	2301      	movs	r3, #1
    a182:	2105      	movs	r1, #5
    a184:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    a188:	3070      	adds	r0, #112	; 0x70
    a18a:	f003 fe4c 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a18e:	b108      	cbz	r0, a194 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1388>
    a190:	2008      	movs	r0, #8
    a192:	bd10      	pop	{r4, pc}
    a194:	2001      	movs	r0, #1
    a196:	bd10      	pop	{r4, pc}
    a198:	20000118 	.word	0x20000118
    a19c:	4806      	ldr	r0, [pc, #24]	; (a1b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13ac>)
    a19e:	6880      	ldr	r0, [r0, #8]
    a1a0:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a1a4:	2911      	cmp	r1, #17
    a1a6:	d001      	beq.n	a1ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13a0>
    a1a8:	2002      	movs	r0, #2
    a1aa:	4770      	bx	lr
    a1ac:	2112      	movs	r1, #18
    a1ae:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a1b2:	2000      	movs	r0, #0
    a1b4:	4770      	bx	lr
    a1b6:	0000      	.short	0x0000
    a1b8:	20000118 	.word	0x20000118
    a1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a1be:	4c34      	ldr	r4, [pc, #208]	; (a290 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1484>)
    a1c0:	2301      	movs	r3, #1
    a1c2:	210b      	movs	r1, #11
    a1c4:	68a0      	ldr	r0, [r4, #8]
    a1c6:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    a1ca:	3070      	adds	r0, #112	; 0x70
    a1cc:	f003 fe2b 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1d0:	bb78      	cbnz	r0, a232 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1426>
    a1d2:	68a0      	ldr	r0, [r4, #8]
    a1d4:	2301      	movs	r3, #1
    a1d6:	2100      	movs	r1, #0
    a1d8:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    a1dc:	3070      	adds	r0, #112	; 0x70
    a1de:	f003 fe22 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1e2:	b320      	cbz	r0, a22e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1422>
    a1e4:	68a0      	ldr	r0, [r4, #8]
    a1e6:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    a1ea:	2824      	cmp	r0, #36	; 0x24
    a1ec:	d022      	beq.n	a234 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>
    a1ee:	6920      	ldr	r0, [r4, #16]
    a1f0:	f004 f8b5 	bl	e35e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    a1f4:	b300      	cbz	r0, a238 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x142c>
    a1f6:	68a0      	ldr	r0, [r4, #8]
    a1f8:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    a1fc:	f041 0104 	orr.w	r1, r1, #4
    a200:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    a204:	6921      	ldr	r1, [r4, #16]
    a206:	794a      	ldrb	r2, [r1, #5]
    a208:	f002 0207 	and.w	r2, r2, #7
    a20c:	f880 2063 	strb.w	r2, [r0, #99]	; 0x63
    a210:	7909      	ldrb	r1, [r1, #4]
    a212:	f001 0107 	and.w	r1, r1, #7
    a216:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
    a21a:	f890 31af 	ldrb.w	r3, [r0, #431]	; 0x1af
    a21e:	f88d 3000 	strb.w	r3, [sp]
    a222:	9b00      	ldr	r3, [sp, #0]
    a224:	9300      	str	r3, [sp, #0]
    a226:	f89d 3000 	ldrb.w	r3, [sp]
    a22a:	bb43      	cbnz	r3, a27e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1472>
    a22c:	e008      	b.n	a240 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1434>
    a22e:	2001      	movs	r0, #1
    a230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a232:	e7ff      	b.n	a234 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>
    a234:	2020      	movs	r0, #32
    a236:	e7fb      	b.n	a230 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
    a238:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a23c:	f7ff bea2 	b.w	9f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    a240:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
    a244:	2b01      	cmp	r3, #1
    a246:	d01a      	beq.n	a27e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1472>
    a248:	f100 036a 	add.w	r3, r0, #106	; 0x6a
    a24c:	2501      	movs	r5, #1
    a24e:	785e      	ldrb	r6, [r3, #1]
    a250:	428e      	cmp	r6, r1
    a252:	d106      	bne.n	a262 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1456>
    a254:	7819      	ldrb	r1, [r3, #0]
    a256:	4291      	cmp	r1, r2
    a258:	d103      	bne.n	a262 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1456>
    a25a:	2102      	movs	r1, #2
    a25c:	f880 11ae 	strb.w	r1, [r0, #430]	; 0x1ae
    a260:	e00d      	b.n	a27e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1472>
    a262:	f500 71ff 	add.w	r1, r0, #510	; 0x1fe
    a266:	8802      	ldrh	r2, [r0, #0]
    a268:	f821 2902 	strh.w	r2, [r1], #-2
    a26c:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    a270:	710a      	strb	r2, [r1, #4]
    a272:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    a276:	7148      	strb	r0, [r1, #5]
    a278:	700d      	strb	r5, [r1, #0]
    a27a:	f000 fcc7 	bl	ac0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a27e:	68a1      	ldr	r1, [r4, #8]
    a280:	2021      	movs	r0, #33	; 0x21
    a282:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    a286:	f7fe fee7 	bl	9058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    a28a:	2000      	movs	r0, #0
    a28c:	e7d0      	b.n	a230 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
    a28e:	0000      	.short	0x0000
    a290:	20000118 	.word	0x20000118
    a294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a298:	4c4e      	ldr	r4, [pc, #312]	; (a3d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    a29a:	68a0      	ldr	r0, [r4, #8]
    a29c:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    a2a0:	2920      	cmp	r1, #32
    a2a2:	d009      	beq.n	a2b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ac>
    a2a4:	f05f 0700 	movs.w	r7, #0
    a2a8:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a2ac:	2922      	cmp	r1, #34	; 0x22
    a2ae:	d005      	beq.n	a2bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b0>
    a2b0:	b387      	cbz	r7, a314 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1508>
    a2b2:	f100 057d 	add.w	r5, r0, #125	; 0x7d
    a2b6:	e003      	b.n	a2c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b4>
    a2b8:	2701      	movs	r7, #1
    a2ba:	e7f5      	b.n	a2a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
    a2bc:	f100 057e 	add.w	r5, r0, #126	; 0x7e
    a2c0:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
    a2c4:	f041 0104 	orr.w	r1, r1, #4
    a2c8:	7001      	strb	r1, [r0, #0]
    a2ca:	6920      	ldr	r0, [r4, #16]
    a2cc:	f7fc fd54 	bl	6d78 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    a2d0:	f04f 0801 	mov.w	r8, #1
    a2d4:	2600      	movs	r6, #0
    a2d6:	b308      	cbz	r0, a31c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1510>
    a2d8:	4639      	mov	r1, r7
    a2da:	6920      	ldr	r0, [r4, #16]
    a2dc:	f7fe ff86 	bl	91ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e0>
    a2e0:	b1e0      	cbz	r0, a31c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1510>
    a2e2:	466a      	mov	r2, sp
    a2e4:	6921      	ldr	r1, [r4, #16]
    a2e6:	68a0      	ldr	r0, [r4, #8]
    a2e8:	f003 fec1 	bl	e06e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    a2ec:	b388      	cbz	r0, a352 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1546>
    a2ee:	6920      	ldr	r0, [r4, #16]
    a2f0:	f004 f811 	bl	e316 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    a2f4:	68a1      	ldr	r1, [r4, #8]
    a2f6:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    a2fa:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    a2fe:	f005 f8d4 	bl	f4aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a302:	b338      	cbz	r0, a354 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1548>
    a304:	68a0      	ldr	r0, [r4, #8]
    a306:	2128      	movs	r1, #40	; 0x28
    a308:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    a30c:	3076      	adds	r0, #118	; 0x76
    a30e:	f880 801e 	strb.w	r8, [r0, #30]
    a312:	e053      	b.n	a3bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    a314:	e7ff      	b.n	a316 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    a316:	2002      	movs	r0, #2
    a318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a31c:	68a0      	ldr	r0, [r4, #8]
    a31e:	f04f 0900 	mov.w	r9, #0
    a322:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    a326:	2901      	cmp	r1, #1
    a328:	d015      	beq.n	a356 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x154a>
    a32a:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
    a32e:	b1f7      	cbz	r7, a36e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
    a330:	6920      	ldr	r0, [r4, #16]
    a332:	68a1      	ldr	r1, [r4, #8]
    a334:	78c0      	ldrb	r0, [r0, #3]
    a336:	f881 00ea 	strb.w	r0, [r1, #234]	; 0xea
    a33a:	fa08 f200 	lsl.w	r2, r8, r0
    a33e:	f3c2 6000 	ubfx	r0, r2, #24, #1
    a342:	b160      	cbz	r0, a35e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1552>
    a344:	200a      	movs	r0, #10
    a346:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a34a:	f891 00ae 	ldrb.w	r0, [r1, #174]	; 0xae
    a34e:	b9a0      	cbnz	r0, a37a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156e>
    a350:	e008      	b.n	a364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1558>
    a352:	e014      	b.n	a37e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1572>
    a354:	e027      	b.n	a3a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x159a>
    a356:	201e      	movs	r0, #30
    a358:	f7ff fcec 	bl	9d34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    a35c:	e7e7      	b.n	a32e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1522>
    a35e:	f240 31cb 	movw	r1, #971	; 0x3cb
    a362:	e001      	b.n	a368 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x155c>
    a364:	f240 31d3 	movw	r1, #979	; 0x3d3
    a368:	2031      	movs	r0, #49	; 0x31
    a36a:	f7fa fc85 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a36e:	702e      	strb	r6, [r5, #0]
    a370:	f7fe fe7e 	bl	9070 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a374:	f7ff fe06 	bl	9f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    a378:	4681      	mov	r9, r0
    a37a:	4648      	mov	r0, r9
    a37c:	e7cc      	b.n	a318 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150c>
    a37e:	68a0      	ldr	r0, [r4, #8]
    a380:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    a384:	2901      	cmp	r1, #1
    a386:	d009      	beq.n	a39c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1590>
    a388:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
    a38c:	68a0      	ldr	r0, [r4, #8]
    a38e:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    a392:	428d      	cmp	r5, r1
    a394:	d112      	bne.n	a3bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    a396:	f880 607e 	strb.w	r6, [r0, #126]	; 0x7e
    a39a:	e00f      	b.n	a3bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    a39c:	2000      	movs	r0, #0
    a39e:	f7ff fcc9 	bl	9d34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    a3a2:	702e      	strb	r6, [r5, #0]
    a3a4:	e7f2      	b.n	a38c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1580>
    a3a6:	68a0      	ldr	r0, [r4, #8]
    a3a8:	f89d 1000 	ldrb.w	r1, [sp]
    a3ac:	f880 1196 	strb.w	r1, [r0, #406]	; 0x196
    a3b0:	f89d 1001 	ldrb.w	r1, [sp, #1]
    a3b4:	f880 1197 	strb.w	r1, [r0, #407]	; 0x197
    a3b8:	2024      	movs	r0, #36	; 0x24
    a3ba:	7028      	strb	r0, [r5, #0]
    a3bc:	68a0      	ldr	r0, [r4, #8]
    a3be:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    a3c2:	428d      	cmp	r5, r1
    a3c4:	d102      	bne.n	a3cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    a3c6:	f7fe fe53 	bl	9070 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a3ca:	e001      	b.n	a3d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    a3cc:	f880 60ae 	strb.w	r6, [r0, #174]	; 0xae
    a3d0:	2000      	movs	r0, #0
    a3d2:	e7a1      	b.n	a318 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150c>
    a3d4:	20000118 	.word	0x20000118
    a3d8:	b510      	push	{r4, lr}
    a3da:	4c0a      	ldr	r4, [pc, #40]	; (a404 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f8>)
    a3dc:	68a0      	ldr	r0, [r4, #8]
    a3de:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
    a3e2:	f041 0104 	orr.w	r1, r1, #4
    a3e6:	7001      	strb	r1, [r0, #0]
    a3e8:	6920      	ldr	r0, [r4, #16]
    a3ea:	f003 ffc2 	bl	e372 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    a3ee:	2816      	cmp	r0, #22
    a3f0:	d001      	beq.n	a3f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ea>
    a3f2:	2000      	movs	r0, #0
    a3f4:	bd10      	pop	{r4, pc}
    a3f6:	6920      	ldr	r0, [r4, #16]
    a3f8:	f003 ffbd 	bl	e376 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    a3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a400:	f7fe be08 	b.w	9014 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x208>
    a404:	20000118 	.word	0x20000118
    a408:	4802      	ldr	r0, [pc, #8]	; (a414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1608>)
    a40a:	6900      	ldr	r0, [r0, #16]
    a40c:	7900      	ldrb	r0, [r0, #4]
    a40e:	f7fe be01 	b.w	9014 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x208>
    a412:	0000      	.short	0x0000
    a414:	20000118 	.word	0x20000118
    a418:	b510      	push	{r4, lr}
    a41a:	4c08      	ldr	r4, [pc, #32]	; (a43c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>)
    a41c:	68a0      	ldr	r0, [r4, #8]
    a41e:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    a422:	2817      	cmp	r0, #23
    a424:	d001      	beq.n	a42a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161e>
    a426:	2002      	movs	r0, #2
    a428:	bd10      	pop	{r4, pc}
    a42a:	f7fe fe21 	bl	9070 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a42e:	68a1      	ldr	r1, [r4, #8]
    a430:	201b      	movs	r0, #27
    a432:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    a436:	2000      	movs	r0, #0
    a438:	bd10      	pop	{r4, pc}
    a43a:	0000      	.short	0x0000
    a43c:	20000118 	.word	0x20000118
    a440:	b510      	push	{r4, lr}
    a442:	4c0b      	ldr	r4, [pc, #44]	; (a470 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1664>)
    a444:	2301      	movs	r3, #1
    a446:	4619      	mov	r1, r3
    a448:	68a0      	ldr	r0, [r4, #8]
    a44a:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    a44e:	3070      	adds	r0, #112	; 0x70
    a450:	f003 fce9 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a454:	b108      	cbz	r0, a45a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x164e>
    a456:	2000      	movs	r0, #0
    a458:	bd10      	pop	{r4, pc}
    a45a:	6920      	ldr	r0, [r4, #16]
    a45c:	f003 ff5f 	bl	e31e <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    a460:	68a1      	ldr	r1, [r4, #8]
    a462:	f881 017a 	strb.w	r0, [r1, #378]	; 0x17a
    a466:	2007      	movs	r0, #7
    a468:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    a46c:	e7f3      	b.n	a456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x164a>
    a46e:	0000      	.short	0x0000
    a470:	20000118 	.word	0x20000118
    a474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a478:	4d37      	ldr	r5, [pc, #220]	; (a558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174c>)
    a47a:	2600      	movs	r6, #0
    a47c:	4628      	mov	r0, r5
    a47e:	68a9      	ldr	r1, [r5, #8]
    a480:	6900      	ldr	r0, [r0, #16]
    a482:	2701      	movs	r7, #1
    a484:	f891 307d 	ldrb.w	r3, [r1, #125]	; 0x7d
    a488:	7900      	ldrb	r0, [r0, #4]
    a48a:	2b0e      	cmp	r3, #14
    a48c:	d101      	bne.n	a492 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1686>
    a48e:	2812      	cmp	r0, #18
    a490:	d006      	beq.n	a4a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1694>
    a492:	4a31      	ldr	r2, [pc, #196]	; (a558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174c>)
    a494:	2400      	movs	r4, #0
    a496:	6892      	ldr	r2, [r2, #8]
    a498:	32bc      	adds	r2, #188	; 0xbc
    a49a:	2b1c      	cmp	r3, #28
    a49c:	d004      	beq.n	a4a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x169c>
    a49e:	e005      	b.n	a4ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a0>
    a4a0:	f7ff fe44 	bl	a12c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1320>
    a4a4:	4606      	mov	r6, r0
    a4a6:	e053      	b.n	a550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    a4a8:	2814      	cmp	r0, #20
    a4aa:	d002      	beq.n	a4b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a6>
    a4ac:	2b04      	cmp	r3, #4
    a4ae:	d00b      	beq.n	a4c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    a4b0:	e00c      	b.n	a4cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c0>
    a4b2:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
    a4b6:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
    a4ba:	2105      	movs	r1, #5
    a4bc:	4610      	mov	r0, r2
    a4be:	f004 ff85 	bl	f3cc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x670>
    a4c2:	f7fe ff8d 	bl	93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    a4c6:	e043      	b.n	a550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    a4c8:	280e      	cmp	r0, #14
    a4ca:	d002      	beq.n	a4d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c6>
    a4cc:	2b20      	cmp	r3, #32
    a4ce:	d00f      	beq.n	a4f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e4>
    a4d0:	e010      	b.n	a4f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e8>
    a4d2:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
    a4d6:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
    a4da:	8808      	ldrh	r0, [r1, #0]
    a4dc:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
    a4e0:	201a      	movs	r0, #26
    a4e2:	f881 020c 	strb.w	r0, [r1, #524]	; 0x20c
    a4e6:	f881 720a 	strb.w	r7, [r1, #522]	; 0x20a
    a4ea:	f000 fb8f 	bl	ac0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a4ee:	e02f      	b.n	a550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    a4f0:	2816      	cmp	r0, #22
    a4f2:	d006      	beq.n	a502 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f6>
    a4f4:	2b26      	cmp	r3, #38	; 0x26
    a4f6:	d101      	bne.n	a4fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f0>
    a4f8:	2816      	cmp	r0, #22
    a4fa:	d002      	beq.n	a502 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f6>
    a4fc:	2817      	cmp	r0, #23
    a4fe:	d014      	beq.n	a52a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x171e>
    a500:	e026      	b.n	a550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    a502:	f801 4f7d 	strb.w	r4, [r1, #125]!
    a506:	f881 4031 	strb.w	r4, [r1, #49]	; 0x31
    a50a:	7848      	ldrb	r0, [r1, #1]
    a50c:	2821      	cmp	r0, #33	; 0x21
    a50e:	d01f      	beq.n	a550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    a510:	2108      	movs	r1, #8
    a512:	4610      	mov	r0, r2
    a514:	f004 ff5a 	bl	f3cc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x670>
    a518:	68a8      	ldr	r0, [r5, #8]
    a51a:	210b      	movs	r1, #11
    a51c:	30bc      	adds	r0, #188	; 0xbc
    a51e:	f004 ff55 	bl	f3cc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x670>
    a522:	201a      	movs	r0, #26
    a524:	f7ff fc06 	bl	9d34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    a528:	e012      	b.n	a550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    a52a:	f891 007e 	ldrb.w	r0, [r1, #126]	; 0x7e
    a52e:	2822      	cmp	r0, #34	; 0x22
    a530:	d10e      	bne.n	a550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    a532:	f881 407e 	strb.w	r4, [r1, #126]	; 0x7e
    a536:	f7fe fd9b 	bl	9070 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a53a:	68a8      	ldr	r0, [r5, #8]
    a53c:	f890 01ae 	ldrb.w	r0, [r0, #430]	; 0x1ae
    a540:	2801      	cmp	r0, #1
    a542:	d102      	bne.n	a54a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x173e>
    a544:	2000      	movs	r0, #0
    a546:	f7ff fbf5 	bl	9d34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    a54a:	68a8      	ldr	r0, [r5, #8]
    a54c:	f880 41ae 	strb.w	r4, [r0, #430]	; 0x1ae
    a550:	4630      	mov	r0, r6
    a552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a556:	0000      	.short	0x0000
    a558:	20000118 	.word	0x20000118
    a55c:	b570      	push	{r4, r5, r6, lr}
    a55e:	4c2c      	ldr	r4, [pc, #176]	; (a610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1804>)
    a560:	68a0      	ldr	r0, [r4, #8]
    a562:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a566:	0789      	lsls	r1, r1, #30
    a568:	d507      	bpl.n	a57a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176e>
    a56a:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a56e:	2301      	movs	r3, #1
    a570:	2108      	movs	r1, #8
    a572:	3070      	adds	r0, #112	; 0x70
    a574:	f003 fc57 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a578:	b1e8      	cbz	r0, a5b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17aa>
    a57a:	68a0      	ldr	r0, [r4, #8]
    a57c:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
    a580:	0780      	lsls	r0, r0, #30
    a582:	d412      	bmi.n	a5aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x179e>
    a584:	6920      	ldr	r0, [r4, #16]
    a586:	f003 fecc 	bl	e322 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    a58a:	68a1      	ldr	r1, [r4, #8]
    a58c:	f881 00b7 	strb.w	r0, [r1, #183]	; 0xb7
    a590:	6920      	ldr	r0, [r4, #16]
    a592:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    a596:	f8a1 20b8 	strh.w	r2, [r1, #184]	; 0xb8
    a59a:	8840      	ldrh	r0, [r0, #2]
    a59c:	f8a1 00ba 	strh.w	r0, [r1, #186]	; 0xba
    a5a0:	f811 0fb6 	ldrb.w	r0, [r1, #182]!
    a5a4:	f040 0002 	orr.w	r0, r0, #2
    a5a8:	7008      	strb	r0, [r1, #0]
    a5aa:	68a0      	ldr	r0, [r4, #8]
    a5ac:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    a5b0:	07c9      	lsls	r1, r1, #31
    a5b2:	d002      	beq.n	a5ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a5b4:	e010      	b.n	a5d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17cc>
    a5b6:	2001      	movs	r0, #1
    a5b8:	bd70      	pop	{r4, r5, r6, pc}
    a5ba:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a5be:	078a      	lsls	r2, r1, #30
    a5c0:	d504      	bpl.n	a5cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c0>
    a5c2:	f44f 7137 	mov.w	r1, #732	; 0x2dc
    a5c6:	2031      	movs	r0, #49	; 0x31
    a5c8:	f7fa fb56 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5cc:	f041 0102 	orr.w	r1, r1, #2
    a5d0:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    a5d4:	f7fe fd40 	bl	9058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    a5d8:	68a0      	ldr	r0, [r4, #8]
    a5da:	2500      	movs	r5, #0
    a5dc:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    a5e0:	2906      	cmp	r1, #6
    a5e2:	d105      	bne.n	a5f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17e4>
    a5e4:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    a5e8:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    a5ec:	f000 fb0e 	bl	ac0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a5f0:	68a0      	ldr	r0, [r4, #8]
    a5f2:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    a5f6:	b149      	cbz	r1, a60c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1800>
    a5f8:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    a5fc:	f000 fb06 	bl	ac0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a600:	68a0      	ldr	r0, [r4, #8]
    a602:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    a606:	b909      	cbnz	r1, a60c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1800>
    a608:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    a60c:	2000      	movs	r0, #0
    a60e:	bd70      	pop	{r4, r5, r6, pc}
    a610:	20000118 	.word	0x20000118
    a614:	b510      	push	{r4, lr}
    a616:	4c17      	ldr	r4, [pc, #92]	; (a674 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>)
    a618:	68a3      	ldr	r3, [r4, #8]
    a61a:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
    a61e:	2808      	cmp	r0, #8
    a620:	d20e      	bcs.n	a640 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1834>
    a622:	f100 0208 	add.w	r2, r0, #8
    a626:	f1c0 0008 	rsb	r0, r0, #8
    a62a:	b2c1      	uxtb	r1, r0
    a62c:	1898      	adds	r0, r3, r2
    a62e:	f500 7088 	add.w	r0, r0, #272	; 0x110
    a632:	f7fa fbad 	bl	4d90 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a636:	68a1      	ldr	r1, [r4, #8]
    a638:	f811 2ff2 	ldrb.w	r2, [r1, #242]!
    a63c:	4410      	add	r0, r2
    a63e:	7008      	strb	r0, [r1, #0]
    a640:	68a3      	ldr	r3, [r4, #8]
    a642:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
    a646:	3808      	subs	r0, #8
    a648:	2804      	cmp	r0, #4
    a64a:	d211      	bcs.n	a670 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1864>
    a64c:	1d02      	adds	r2, r0, #4
    a64e:	f1c0 0004 	rsb	r0, r0, #4
    a652:	b2c1      	uxtb	r1, r0
    a654:	1898      	adds	r0, r3, r2
    a656:	30e0      	adds	r0, #224	; 0xe0
    a658:	f7fa fb9a 	bl	4d90 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a65c:	68a0      	ldr	r0, [r4, #8]
    a65e:	2100      	movs	r1, #0
    a660:	f880 10f2 	strb.w	r1, [r0, #242]	; 0xf2
    a664:	2101      	movs	r1, #1
    a666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a66a:	2004      	movs	r0, #4
    a66c:	f7ff ba64 	b.w	9b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    a670:	bd10      	pop	{r4, pc}
    a672:	0000      	.short	0x0000
    a674:	20000118 	.word	0x20000118
    a678:	4804      	ldr	r0, [pc, #16]	; (a68c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1880>)
    a67a:	2127      	movs	r1, #39	; 0x27
    a67c:	6880      	ldr	r0, [r0, #8]
    a67e:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    a682:	2100      	movs	r1, #0
    a684:	f880 118c 	strb.w	r1, [r0, #396]	; 0x18c
    a688:	4770      	bx	lr
    a68a:	0000      	.short	0x0000
    a68c:	20000118 	.word	0x20000118
    a690:	4809      	ldr	r0, [pc, #36]	; (a6b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ac>)
    a692:	b510      	push	{r4, lr}
    a694:	6880      	ldr	r0, [r0, #8]
    a696:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a69a:	2914      	cmp	r1, #20
    a69c:	d004      	beq.n	a6a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x189c>
    a69e:	f240 619a 	movw	r1, #1690	; 0x69a
    a6a2:	2031      	movs	r0, #49	; 0x31
    a6a4:	f7fa fae8 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6a8:	2101      	movs	r1, #1
    a6aa:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
    a6ae:	2115      	movs	r1, #21
    a6b0:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a6b4:	bd10      	pop	{r4, pc}
    a6b6:	0000      	.short	0x0000
    a6b8:	20000118 	.word	0x20000118
    a6bc:	b510      	push	{r4, lr}
    a6be:	4c0a      	ldr	r4, [pc, #40]	; (a6e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18dc>)
    a6c0:	68a0      	ldr	r0, [r4, #8]
    a6c2:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    a6c6:	07c0      	lsls	r0, r0, #31
    a6c8:	d008      	beq.n	a6dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18d0>
    a6ca:	f7fe fcd1 	bl	9070 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a6ce:	68a0      	ldr	r0, [r4, #8]
    a6d0:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    a6d4:	f021 0101 	bic.w	r1, r1, #1
    a6d8:	7001      	strb	r1, [r0, #0]
    a6da:	bd10      	pop	{r4, pc}
    a6dc:	f240 6183 	movw	r1, #1667	; 0x683
    a6e0:	2031      	movs	r0, #49	; 0x31
    a6e2:	f7fa fac9 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6e6:	0000      	.short	0x0000
    a6e8:	20000118 	.word	0x20000118
    a6ec:	b510      	push	{r4, lr}
    a6ee:	4c0a      	ldr	r4, [pc, #40]	; (a718 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190c>)
    a6f0:	2301      	movs	r3, #1
    a6f2:	2100      	movs	r1, #0
    a6f4:	68a0      	ldr	r0, [r4, #8]
    a6f6:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a6fa:	3070      	adds	r0, #112	; 0x70
    a6fc:	f003 fb93 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a700:	b120      	cbz	r0, a70c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1900>
    a702:	68a1      	ldr	r1, [r4, #8]
    a704:	201c      	movs	r0, #28
    a706:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a70a:	bd10      	pop	{r4, pc}
    a70c:	f44f 61e1 	mov.w	r1, #1800	; 0x708
    a710:	2031      	movs	r0, #49	; 0x31
    a712:	f7fa fab1 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a716:	0000      	.short	0x0000
    a718:	20000118 	.word	0x20000118
    a71c:	480a      	ldr	r0, [pc, #40]	; (a748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x193c>)
    a71e:	b510      	push	{r4, lr}
    a720:	6880      	ldr	r0, [r0, #8]
    a722:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a726:	f3c1 1201 	ubfx	r2, r1, #4, #2
    a72a:	2a01      	cmp	r2, #1
    a72c:	d004      	beq.n	a738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x192c>
    a72e:	f240 710f 	movw	r1, #1807	; 0x70f
    a732:	2031      	movs	r0, #49	; 0x31
    a734:	f7fa faa0 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a738:	f021 0110 	bic.w	r1, r1, #16
    a73c:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    a740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a744:	f7fe bc94 	b.w	9070 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a748:	20000118 	.word	0x20000118
    a74c:	b510      	push	{r4, lr}
    a74e:	4c0a      	ldr	r4, [pc, #40]	; (a778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196c>)
    a750:	2301      	movs	r3, #1
    a752:	2100      	movs	r1, #0
    a754:	68a0      	ldr	r0, [r4, #8]
    a756:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a75a:	3070      	adds	r0, #112	; 0x70
    a75c:	f003 fb63 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a760:	b120      	cbz	r0, a76c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1960>
    a762:	68a1      	ldr	r1, [r4, #8]
    a764:	200e      	movs	r0, #14
    a766:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a76a:	bd10      	pop	{r4, pc}
    a76c:	f240 61fb 	movw	r1, #1787	; 0x6fb
    a770:	2031      	movs	r0, #49	; 0x31
    a772:	f7fa fa81 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a776:	0000      	.short	0x0000
    a778:	20000118 	.word	0x20000118
    a77c:	4804      	ldr	r0, [pc, #16]	; (a790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1984>)
    a77e:	6880      	ldr	r0, [r0, #8]
    a780:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    a784:	f021 0104 	bic.w	r1, r1, #4
    a788:	7001      	strb	r1, [r0, #0]
    a78a:	f7fe bc71 	b.w	9070 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a78e:	0000      	.short	0x0000
    a790:	20000118 	.word	0x20000118
    a794:	4809      	ldr	r0, [pc, #36]	; (a7bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>)
    a796:	b510      	push	{r4, lr}
    a798:	6880      	ldr	r0, [r0, #8]
    a79a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a79e:	2910      	cmp	r1, #16
    a7a0:	d004      	beq.n	a7ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a0>
    a7a2:	f240 6192 	movw	r1, #1682	; 0x692
    a7a6:	2031      	movs	r0, #49	; 0x31
    a7a8:	f7fa fa66 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7ac:	2101      	movs	r1, #1
    a7ae:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
    a7b2:	2111      	movs	r1, #17
    a7b4:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a7b8:	bd10      	pop	{r4, pc}
    a7ba:	0000      	.short	0x0000
    a7bc:	20000118 	.word	0x20000118
    a7c0:	b510      	push	{r4, lr}
    a7c2:	4c0a      	ldr	r4, [pc, #40]	; (a7ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e0>)
    a7c4:	2301      	movs	r3, #1
    a7c6:	2100      	movs	r1, #0
    a7c8:	68a0      	ldr	r0, [r4, #8]
    a7ca:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a7ce:	3070      	adds	r0, #112	; 0x70
    a7d0:	f003 fb29 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a7d4:	b120      	cbz	r0, a7e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d4>
    a7d6:	68a1      	ldr	r1, [r4, #8]
    a7d8:	201f      	movs	r0, #31
    a7da:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a7de:	bd10      	pop	{r4, pc}
    a7e0:	f240 711b 	movw	r1, #1819	; 0x71b
    a7e4:	2031      	movs	r0, #49	; 0x31
    a7e6:	f7fa fa47 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7ea:	0000      	.short	0x0000
    a7ec:	20000118 	.word	0x20000118
    a7f0:	4808      	ldr	r0, [pc, #32]	; (a814 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a08>)
    a7f2:	b510      	push	{r4, lr}
    a7f4:	6880      	ldr	r0, [r0, #8]
    a7f6:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a7fa:	2921      	cmp	r1, #33	; 0x21
    a7fc:	d005      	beq.n	a80a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19fe>
    a7fe:	b121      	cbz	r1, a80a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19fe>
    a800:	f240 7122 	movw	r1, #1826	; 0x722
    a804:	2031      	movs	r0, #49	; 0x31
    a806:	f7fa fa37 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a80a:	2122      	movs	r1, #34	; 0x22
    a80c:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a810:	bd10      	pop	{r4, pc}
    a812:	0000      	.short	0x0000
    a814:	20000118 	.word	0x20000118
    a818:	4807      	ldr	r0, [pc, #28]	; (a838 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2c>)
    a81a:	b510      	push	{r4, lr}
    a81c:	6880      	ldr	r0, [r0, #8]
    a81e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a822:	2915      	cmp	r1, #21
    a824:	d004      	beq.n	a830 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a24>
    a826:	f240 61a7 	movw	r1, #1703	; 0x6a7
    a82a:	2031      	movs	r0, #49	; 0x31
    a82c:	f7fa fa24 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a830:	2119      	movs	r1, #25
    a832:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a836:	bd10      	pop	{r4, pc}
    a838:	20000118 	.word	0x20000118
    a83c:	4807      	ldr	r0, [pc, #28]	; (a85c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a50>)
    a83e:	b510      	push	{r4, lr}
    a840:	6880      	ldr	r0, [r0, #8]
    a842:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a846:	2915      	cmp	r1, #21
    a848:	d004      	beq.n	a854 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a48>
    a84a:	f240 61a1 	movw	r1, #1697	; 0x6a1
    a84e:	2031      	movs	r0, #49	; 0x31
    a850:	f7fa fa12 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a854:	2117      	movs	r1, #23
    a856:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a85a:	bd10      	pop	{r4, pc}
    a85c:	20000118 	.word	0x20000118
    a860:	b570      	push	{r4, r5, r6, lr}
    a862:	4d1b      	ldr	r5, [pc, #108]	; (a8d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac4>)
    a864:	68a8      	ldr	r0, [r5, #8]
    a866:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a86a:	291b      	cmp	r1, #27
    a86c:	d002      	beq.n	a874 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a68>
    a86e:	f240 61c1 	movw	r1, #1729	; 0x6c1
    a872:	e007      	b.n	a884 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a78>
    a874:	2400      	movs	r4, #0
    a876:	f880 40b3 	strb.w	r4, [r0, #179]	; 0xb3
    a87a:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    a87e:	b121      	cbz	r1, a88a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a7e>
    a880:	f240 61c5 	movw	r1, #1733	; 0x6c5
    a884:	2031      	movs	r0, #49	; 0x31
    a886:	f7fa f9f7 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a88a:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    a88e:	b141      	cbz	r1, a8a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a96>
    a890:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
    a894:	8801      	ldrh	r1, [r0, #0]
    a896:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    a89a:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
    a89e:	210c      	movs	r1, #12
    a8a0:	e008      	b.n	a8b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aa8>
    a8a2:	8801      	ldrh	r1, [r0, #0]
    a8a4:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    a8a8:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
    a8ac:	2101      	movs	r1, #1
    a8ae:	f880 11ca 	strb.w	r1, [r0, #458]	; 0x1ca
    a8b2:	210b      	movs	r1, #11
    a8b4:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
    a8b8:	8800      	ldrh	r0, [r0, #0]
    a8ba:	f7fa fe05 	bl	54c8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    a8be:	f002 ff2c 	bl	d71a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    a8c2:	f000 f9a3 	bl	ac0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a8c6:	68a8      	ldr	r0, [r5, #8]
    a8c8:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
    a8cc:	bd70      	pop	{r4, r5, r6, pc}
    a8ce:	0000      	.short	0x0000
    a8d0:	20000118 	.word	0x20000118
    a8d4:	b510      	push	{r4, lr}
    a8d6:	4c08      	ldr	r4, [pc, #32]	; (a8f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aec>)
    a8d8:	2301      	movs	r3, #1
    a8da:	4619      	mov	r1, r3
    a8dc:	68a0      	ldr	r0, [r4, #8]
    a8de:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    a8e2:	3070      	adds	r0, #112	; 0x70
    a8e4:	f003 fa9f 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a8e8:	2800      	cmp	r0, #0
    a8ea:	d103      	bne.n	a8f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae8>
    a8ec:	68a1      	ldr	r1, [r4, #8]
    a8ee:	2008      	movs	r0, #8
    a8f0:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    a8f4:	bd10      	pop	{r4, pc}
    a8f6:	0000      	.short	0x0000
    a8f8:	20000118 	.word	0x20000118
    a8fc:	4814      	ldr	r0, [pc, #80]	; (a950 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b44>)
    a8fe:	b510      	push	{r4, lr}
    a900:	68c1      	ldr	r1, [r0, #12]
    a902:	6880      	ldr	r0, [r0, #8]
    a904:	7909      	ldrb	r1, [r1, #4]
    a906:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a90a:	2a0a      	cmp	r2, #10
    a90c:	d109      	bne.n	a922 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b16>
    a90e:	f890 20ea 	ldrb.w	r2, [r0, #234]	; 0xea
    a912:	428a      	cmp	r2, r1
    a914:	d105      	bne.n	a922 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b16>
    a916:	2100      	movs	r1, #0
    a918:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    a91c:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
    a920:	bd10      	pop	{r4, pc}
    a922:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
    a926:	0713      	lsls	r3, r2, #28
    a928:	d507      	bpl.n	a93a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b2e>
    a92a:	f022 0108 	bic.w	r1, r2, #8
    a92e:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    a932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a936:	f7fe bb9b 	b.w	9070 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a93a:	29ff      	cmp	r1, #255	; 0xff
    a93c:	d004      	beq.n	a948 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b3c>
    a93e:	f240 617d 	movw	r1, #1661	; 0x67d
    a942:	2031      	movs	r0, #49	; 0x31
    a944:	f7fa f998 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a94c:	f7ff be94 	b.w	a678 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x186c>
    a950:	20000118 	.word	0x20000118
    a954:	b510      	push	{r4, lr}
    a956:	4c15      	ldr	r4, [pc, #84]	; (a9ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba0>)
    a958:	68a0      	ldr	r0, [r4, #8]
    a95a:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    a95e:	0789      	lsls	r1, r1, #30
    a960:	d411      	bmi.n	a986 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b7a>
    a962:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a966:	2301      	movs	r3, #1
    a968:	2100      	movs	r1, #0
    a96a:	3070      	adds	r0, #112	; 0x70
    a96c:	f003 fa5b 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a970:	b120      	cbz	r0, a97c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b70>
    a972:	68a1      	ldr	r1, [r4, #8]
    a974:	2006      	movs	r0, #6
    a976:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a97a:	e009      	b.n	a990 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b84>
    a97c:	f240 61e7 	movw	r1, #1767	; 0x6e7
    a980:	2031      	movs	r0, #49	; 0x31
    a982:	f7fa f979 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a986:	2100      	movs	r1, #0
    a988:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
    a98c:	f880 11b4 	strb.w	r1, [r0, #436]	; 0x1b4
    a990:	68a0      	ldr	r0, [r4, #8]
    a992:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    a996:	0780      	lsls	r0, r0, #30
    a998:	d507      	bpl.n	a9aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b9e>
    a99a:	f7fe fb69 	bl	9070 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a99e:	68a0      	ldr	r0, [r4, #8]
    a9a0:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    a9a4:	f021 0102 	bic.w	r1, r1, #2
    a9a8:	7001      	strb	r1, [r0, #0]
    a9aa:	bd10      	pop	{r4, pc}
    a9ac:	20000118 	.word	0x20000118
    a9b0:	4808      	ldr	r0, [pc, #32]	; (a9d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc8>)
    a9b2:	b510      	push	{r4, lr}
    a9b4:	6880      	ldr	r0, [r0, #8]
    a9b6:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    a9ba:	b941      	cbnz	r1, a9ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc2>
    a9bc:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    a9c0:	2301      	movs	r3, #1
    a9c2:	2106      	movs	r1, #6
    a9c4:	3070      	adds	r0, #112	; 0x70
    a9c6:	f003 fa2e 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a9ca:	2800      	cmp	r0, #0
    a9cc:	d000      	beq.n	a9d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>
    a9ce:	2001      	movs	r0, #1
    a9d0:	bd10      	pop	{r4, pc}
    a9d2:	0000      	.short	0x0000
    a9d4:	20000118 	.word	0x20000118
    a9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a9da:	4c59      	ldr	r4, [pc, #356]	; (ab40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d34>)
    a9dc:	4606      	mov	r6, r0
    a9de:	4615      	mov	r5, r2
    a9e0:	68a0      	ldr	r0, [r4, #8]
    a9e2:	b109      	cbz	r1, a9e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bdc>
    a9e4:	2100      	movs	r1, #0
    a9e6:	e004      	b.n	a9f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be6>
    a9e8:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
    a9ec:	f8b0 20fe 	ldrh.w	r2, [r0, #254]	; 0xfe
    a9f0:	4411      	add	r1, r2
    a9f2:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
    a9f6:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    a9fa:	f88d 1000 	strb.w	r1, [sp]
    a9fe:	9900      	ldr	r1, [sp, #0]
    aa00:	9100      	str	r1, [sp, #0]
    aa02:	f89d 1000 	ldrb.w	r1, [sp]
    aa06:	b939      	cbnz	r1, aa18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c0c>
    aa08:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    aa0c:	2301      	movs	r3, #1
    aa0e:	4619      	mov	r1, r3
    aa10:	3070      	adds	r0, #112	; 0x70
    aa12:	f003 fa08 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aa16:	b130      	cbz	r0, aa26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c1a>
    aa18:	68a0      	ldr	r0, [r4, #8]
    aa1a:	f830 1fa8 	ldrh.w	r1, [r0, #168]!
    aa1e:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    aa22:	4411      	add	r1, r2
    aa24:	8001      	strh	r1, [r0, #0]
    aa26:	68a0      	ldr	r0, [r4, #8]
    aa28:	f890 20ae 	ldrb.w	r2, [r0, #174]	; 0xae
    aa2c:	b132      	cbz	r2, aa3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c30>
    aa2e:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
    aa32:	f8b0 30fe 	ldrh.w	r3, [r0, #254]	; 0xfe
    aa36:	4419      	add	r1, r3
    aa38:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
    aa3c:	f990 30b2 	ldrsb.w	r3, [r0, #178]	; 0xb2
    aa40:	2b00      	cmp	r3, #0
    aa42:	dd06      	ble.n	aa52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c46>
    aa44:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    aa48:	f8b0 70fe 	ldrh.w	r7, [r0, #254]	; 0xfe
    aa4c:	4439      	add	r1, r7
    aa4e:	f8a0 10b0 	strh.w	r1, [r0, #176]	; 0xb0
    aa52:	2101      	movs	r1, #1
    aa54:	273d      	movs	r7, #61	; 0x3d
    aa56:	b116      	cbz	r6, aa5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c52>
    aa58:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
    aa5c:	e012      	b.n	aa84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c78>
    aa5e:	7824      	ldrb	r4, [r4, #0]
    aa60:	2c02      	cmp	r4, #2
    aa62:	d009      	beq.n	aa78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c6c>
    aa64:	2c01      	cmp	r4, #1
    aa66:	d011      	beq.n	aa8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c80>
    aa68:	b33d      	cbz	r5, aaba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cae>
    aa6a:	f100 0294 	add.w	r2, r0, #148	; 0x94
    aa6e:	7011      	strb	r1, [r2, #0]
    aa70:	06e9      	lsls	r1, r5, #27
    aa72:	d50e      	bpl.n	aa92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c86>
    aa74:	211e      	movs	r1, #30
    aa76:	e018      	b.n	aaaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c9e>
    aa78:	f890 20ee 	ldrb.w	r2, [r0, #238]	; 0xee
    aa7c:	2a06      	cmp	r2, #6
    aa7e:	d044      	beq.n	ab0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cfe>
    aa80:	2216      	movs	r2, #22
    aa82:	e042      	b.n	ab0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cfe>
    aa84:	f100 0294 	add.w	r2, r0, #148	; 0x94
    aa88:	7011      	strb	r1, [r2, #0]
    aa8a:	e047      	b.n	ab1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d10>
    aa8c:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
    aa90:	e03b      	b.n	ab0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cfe>
    aa92:	0729      	lsls	r1, r5, #28
    aa94:	d502      	bpl.n	aa9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c90>
    aa96:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
    aa9a:	e03f      	b.n	ab1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d10>
    aa9c:	06a9      	lsls	r1, r5, #26
    aa9e:	d501      	bpl.n	aaa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c98>
    aaa0:	2123      	movs	r1, #35	; 0x23
    aaa2:	e002      	b.n	aaaa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c9e>
    aaa4:	07a9      	lsls	r1, r5, #30
    aaa6:	d003      	beq.n	aab0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca4>
    aaa8:	212a      	movs	r1, #42	; 0x2a
    aaaa:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    aaae:	e035      	b.n	ab1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d10>
    aab0:	f640 41bc 	movw	r1, #3260	; 0xcbc
    aab4:	2031      	movs	r0, #49	; 0x31
    aab6:	f7fa f8df 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aaba:	b12a      	cbz	r2, aac8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cbc>
    aabc:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
    aac0:	f8b0 40ac 	ldrh.w	r4, [r0, #172]	; 0xac
    aac4:	42a2      	cmp	r2, r4
    aac6:	d216      	bcs.n	aaf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cea>
    aac8:	2b00      	cmp	r3, #0
    aaca:	dd05      	ble.n	aad8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ccc>
    aacc:	f8b0 20b0 	ldrh.w	r2, [r0, #176]	; 0xb0
    aad0:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
    aad4:	429a      	cmp	r2, r3
    aad6:	d20e      	bcs.n	aaf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cea>
    aad8:	f8b0 30a8 	ldrh.w	r3, [r0, #168]	; 0xa8
    aadc:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    aae0:	4293      	cmp	r3, r2
    aae2:	d30a      	bcc.n	aafa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cee>
    aae4:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    aae8:	f88d 3000 	strb.w	r3, [sp]
    aaec:	9b00      	ldr	r3, [sp, #0]
    aaee:	9300      	str	r3, [sp, #0]
    aaf0:	f89d 3000 	ldrb.w	r3, [sp]
    aaf4:	b10b      	cbz	r3, aafa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cee>
    aaf6:	2222      	movs	r2, #34	; 0x22
    aaf8:	e007      	b.n	ab0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cfe>
    aafa:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
    aafe:	b13b      	cbz	r3, ab10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d04>
    ab00:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    ab04:	4293      	cmp	r3, r2
    ab06:	d309      	bcc.n	ab1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d10>
    ab08:	2208      	movs	r2, #8
    ab0a:	f880 2095 	strb.w	r2, [r0, #149]	; 0x95
    ab0e:	e7b9      	b.n	aa84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c78>
    ab10:	f8b0 20a4 	ldrh.w	r2, [r0, #164]	; 0xa4
    ab14:	2a06      	cmp	r2, #6
    ab16:	d301      	bcc.n	ab1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d10>
    ab18:	223e      	movs	r2, #62	; 0x3e
    ab1a:	e7f6      	b.n	ab0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cfe>
    ab1c:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
    ab20:	f88d 1000 	strb.w	r1, [sp]
    ab24:	9900      	ldr	r1, [sp, #0]
    ab26:	9100      	str	r1, [sp, #0]
    ab28:	f89d 1000 	ldrb.w	r1, [sp]
    ab2c:	b119      	cbz	r1, ab36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d2a>
    ab2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ab32:	f004 bc8a 	b.w	f44a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    ab36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ab3a:	2100      	movs	r1, #0
    ab3c:	f7fd bbc8 	b.w	82d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    ab40:	20000118 	.word	0x20000118
    ab44:	b570      	push	{r4, r5, r6, lr}
    ab46:	4d2d      	ldr	r5, [pc, #180]	; (abfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1df0>)
    ab48:	68a8      	ldr	r0, [r5, #8]
    ab4a:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    ab4e:	b151      	cbz	r1, ab66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d5a>
    ab50:	2901      	cmp	r1, #1
    ab52:	d008      	beq.n	ab66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d5a>
    ab54:	2902      	cmp	r1, #2
    ab56:	d009      	beq.n	ab6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d60>
    ab58:	2903      	cmp	r1, #3
    ab5a:	d007      	beq.n	ab6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d60>
    ab5c:	f640 217a 	movw	r1, #2682	; 0xa7a
    ab60:	2031      	movs	r0, #49	; 0x31
    ab62:	f7fa f889 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab66:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
    ab6a:	e035      	b.n	abd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dcc>
    ab6c:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    ab70:	2908      	cmp	r1, #8
    ab72:	d034      	beq.n	abde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd2>
    ab74:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
    ab78:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    ab7c:	2400      	movs	r4, #0
    ab7e:	1c8b      	adds	r3, r1, #2
    ab80:	429a      	cmp	r2, r3
    ab82:	d306      	bcc.n	ab92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d86>
    ab84:	1a51      	subs	r1, r2, r1
    ab86:	1e89      	subs	r1, r1, #2
    ab88:	040c      	lsls	r4, r1, #16
    ab8a:	0c24      	lsrs	r4, r4, #16
    ab8c:	d001      	beq.n	ab92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d86>
    ab8e:	1e64      	subs	r4, r4, #1
    ab90:	b2a4      	uxth	r4, r4
    ab92:	f890 10a2 	ldrb.w	r1, [r0, #162]	; 0xa2
    ab96:	b139      	cbz	r1, aba8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d9c>
    ab98:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    ab9c:	2301      	movs	r3, #1
    ab9e:	2109      	movs	r1, #9
    aba0:	3070      	adds	r0, #112	; 0x70
    aba2:	f003 f940 	bl	de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aba6:	b330      	cbz	r0, abf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dea>
    aba8:	f7ff ff02 	bl	a9b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba4>
    abac:	b168      	cbz	r0, abca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbe>
    abae:	68a9      	ldr	r1, [r5, #8]
    abb0:	2000      	movs	r0, #0
    abb2:	3198      	adds	r1, #152	; 0x98
    abb4:	c906      	ldmia	r1, {r1, r2}
    abb6:	1c8b      	adds	r3, r1, #2
    abb8:	429a      	cmp	r2, r3
    abba:	d303      	bcc.n	abc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1db8>
    abbc:	1a50      	subs	r0, r2, r1
    abbe:	1e80      	subs	r0, r0, #2
    abc0:	d000      	beq.n	abc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1db8>
    abc2:	1e40      	subs	r0, r0, #1
    abc4:	42a0      	cmp	r0, r4
    abc6:	d200      	bcs.n	abca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbe>
    abc8:	b284      	uxth	r4, r0
    abca:	b10c      	cbz	r4, abd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc4>
    abcc:	1e64      	subs	r4, r4, #1
    abce:	b2a4      	uxth	r4, r4
    abd0:	68a8      	ldr	r0, [r5, #8]
    abd2:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
    abd6:	4421      	add	r1, r4
    abd8:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    abdc:	bd70      	pop	{r4, r5, r6, pc}
    abde:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
    abe2:	2903      	cmp	r1, #3
    abe4:	d3bf      	bcc.n	ab66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d5a>
    abe6:	f830 1f74 	ldrh.w	r1, [r0, #116]!
    abea:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    abec:	4411      	add	r1, r2
    abee:	1c49      	adds	r1, r1, #1
    abf0:	f8a0 1084 	strh.w	r1, [r0, #132]	; 0x84
    abf4:	bd70      	pop	{r4, r5, r6, pc}
    abf6:	2400      	movs	r4, #0
    abf8:	e7ea      	b.n	abd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dc4>
    abfa:	0000      	.short	0x0000
    abfc:	20000118 	.word	0x20000118

0000ac00 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    ac00:	4901      	ldr	r1, [pc, #4]	; (ac08 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    ac02:	7008      	strb	r0, [r1, #0]
    ac04:	4770      	bx	lr
    ac06:	0000      	.short	0x0000
    ac08:	20000297 	.word	0x20000297

0000ac0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    ac0c:	4801      	ldr	r0, [pc, #4]	; (ac14 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    ac0e:	7800      	ldrb	r0, [r0, #0]
    ac10:	f7f9 be5a 	b.w	48c8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    ac14:	20000297 	.word	0x20000297

0000ac18 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    ac18:	4903      	ldr	r1, [pc, #12]	; (ac28 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    ac1a:	888a      	ldrh	r2, [r1, #4]
    ac1c:	8002      	strh	r2, [r0, #0]
    ac1e:	7889      	ldrb	r1, [r1, #2]
    ac20:	7081      	strb	r1, [r0, #2]
    ac22:	2000      	movs	r0, #0
    ac24:	4770      	bx	lr
    ac26:	0000      	.short	0x0000
    ac28:	20000ed0 	.word	0x20000ed0

0000ac2c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    ac2c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ac2e:	460c      	mov	r4, r1
    ac30:	4605      	mov	r5, r0
    ac32:	8800      	ldrh	r0, [r0, #0]
    ac34:	4669      	mov	r1, sp
    ac36:	f003 f8cc 	bl	ddd2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ac3a:	0001      	movs	r1, r0
    ac3c:	f04f 0000 	mov.w	r0, #0
    ac40:	d005      	beq.n	ac4e <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
    ac42:	f8c4 0002 	str.w	r0, [r4, #2]
    ac46:	71a0      	strb	r0, [r4, #6]
    ac48:	8020      	strh	r0, [r4, #0]
    ac4a:	2002      	movs	r0, #2
    ac4c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ac4e:	9901      	ldr	r1, [sp, #4]
    ac50:	f111 0170 	adds.w	r1, r1, #112	; 0x70
    ac54:	f881 004e 	strb.w	r0, [r1, #78]	; 0x4e
    ac58:	f8d1 2016 	ldr.w	r2, [r1, #22]
    ac5c:	f8c4 2002 	str.w	r2, [r4, #2]
    ac60:	7e8a      	ldrb	r2, [r1, #26]
    ac62:	71a2      	strb	r2, [r4, #6]
    ac64:	882a      	ldrh	r2, [r5, #0]
    ac66:	8022      	strh	r2, [r4, #0]
    ac68:	f891 204e 	ldrb.w	r2, [r1, #78]	; 0x4e
    ac6c:	f88d 2008 	strb.w	r2, [sp, #8]
    ac70:	9a02      	ldr	r2, [sp, #8]
    ac72:	9202      	str	r2, [sp, #8]
    ac74:	f89d 2008 	ldrb.w	r2, [sp, #8]
    ac78:	2a00      	cmp	r2, #0
    ac7a:	d1eb      	bne.n	ac54 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
    ac7c:	2000      	movs	r0, #0
    ac7e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ac80 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    ac80:	b51c      	push	{r2, r3, r4, lr}
    ac82:	8800      	ldrh	r0, [r0, #0]
    ac84:	4669      	mov	r1, sp
    ac86:	f003 f8a4 	bl	ddd2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ac8a:	2800      	cmp	r0, #0
    ac8c:	d10b      	bne.n	aca6 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
    ac8e:	480b      	ldr	r0, [pc, #44]	; (acbc <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
    ac90:	7800      	ldrb	r0, [r0, #0]
    ac92:	b188      	cbz	r0, acb8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
    ac94:	9801      	ldr	r0, [sp, #4]
    ac96:	f005 fafd 	bl	10294 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x320>
    ac9a:	b128      	cbz	r0, aca8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    ac9c:	9801      	ldr	r0, [sp, #4]
    ac9e:	f890 01b5 	ldrb.w	r0, [r0, #437]	; 0x1b5
    aca2:	b118      	cbz	r0, acac <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    aca4:	203a      	movs	r0, #58	; 0x3a
    aca6:	bd1c      	pop	{r2, r3, r4, pc}
    aca8:	2002      	movs	r0, #2
    acaa:	bd1c      	pop	{r2, r3, r4, pc}
    acac:	9901      	ldr	r1, [sp, #4]
    acae:	2001      	movs	r0, #1
    acb0:	f881 01b5 	strb.w	r0, [r1, #437]	; 0x1b5
    acb4:	2000      	movs	r0, #0
    acb6:	bd1c      	pop	{r2, r3, r4, pc}
    acb8:	2011      	movs	r0, #17
    acba:	bd1c      	pop	{r2, r3, r4, pc}
    acbc:	200001f4 	.word	0x200001f4

0000acc0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    acc0:	b510      	push	{r4, lr}
    acc2:	4604      	mov	r4, r0
    acc4:	f005 fadd 	bl	10282 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    acc8:	b130      	cbz	r0, acd8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    acca:	4804      	ldr	r0, [pc, #16]	; (acdc <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    accc:	8881      	ldrh	r1, [r0, #4]
    acce:	8021      	strh	r1, [r4, #0]
    acd0:	88c0      	ldrh	r0, [r0, #6]
    acd2:	8060      	strh	r0, [r4, #2]
    acd4:	2000      	movs	r0, #0
    acd6:	bd10      	pop	{r4, pc}
    acd8:	2001      	movs	r0, #1
    acda:	bd10      	pop	{r4, pc}
    acdc:	200001fc 	.word	0x200001fc

0000ace0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    ace0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ace2:	4605      	mov	r5, r0
    ace4:	f000 fb3c 	bl	b360 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    ace8:	f3c0 2000 	ubfx	r0, r0, #8, #1
    acec:	b310      	cbz	r0, ad34 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    acee:	2400      	movs	r4, #0
    acf0:	a802      	add	r0, sp, #8
    acf2:	f88d 4004 	strb.w	r4, [sp, #4]
    acf6:	f88d 4008 	strb.w	r4, [sp, #8]
    acfa:	9000      	str	r0, [sp, #0]
    acfc:	78aa      	ldrb	r2, [r5, #2]
    acfe:	7869      	ldrb	r1, [r5, #1]
    ad00:	7828      	ldrb	r0, [r5, #0]
    ad02:	ab01      	add	r3, sp, #4
    ad04:	f005 fb17 	bl	10336 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
    ad08:	2800      	cmp	r0, #0
    ad0a:	d112      	bne.n	ad32 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    ad0c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ad10:	f005 fa18 	bl	10144 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    ad14:	b180      	cbz	r0, ad38 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    ad16:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ad1a:	f005 fa13 	bl	10144 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    ad1e:	b158      	cbz	r0, ad38 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    ad20:	4806      	ldr	r0, [pc, #24]	; (ad3c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    ad22:	f89d 1004 	ldrb.w	r1, [sp, #4]
    ad26:	7481      	strb	r1, [r0, #18]
    ad28:	f89d 1008 	ldrb.w	r1, [sp, #8]
    ad2c:	74c1      	strb	r1, [r0, #19]
    ad2e:	8284      	strh	r4, [r0, #20]
    ad30:	2000      	movs	r0, #0
    ad32:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ad34:	2001      	movs	r0, #1
    ad36:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ad38:	2011      	movs	r0, #17
    ad3a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ad3c:	20000ed0 	.word	0x20000ed0

0000ad40 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    ad40:	7801      	ldrb	r1, [r0, #0]
    ad42:	b179      	cbz	r1, ad64 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    ad44:	7841      	ldrb	r1, [r0, #1]
    ad46:	b169      	cbz	r1, ad64 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    ad48:	8841      	ldrh	r1, [r0, #2]
    ad4a:	291b      	cmp	r1, #27
    ad4c:	d30a      	bcc.n	ad64 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    ad4e:	8881      	ldrh	r1, [r0, #4]
    ad50:	291b      	cmp	r1, #27
    ad52:	d307      	bcc.n	ad64 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    ad54:	4904      	ldr	r1, [pc, #16]	; (ad68 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    ad56:	6802      	ldr	r2, [r0, #0]
    ad58:	f8c1 2002 	str.w	r2, [r1, #2]
    ad5c:	8880      	ldrh	r0, [r0, #4]
    ad5e:	80c8      	strh	r0, [r1, #6]
    ad60:	2000      	movs	r0, #0
    ad62:	4770      	bx	lr
    ad64:	2012      	movs	r0, #18
    ad66:	4770      	bx	lr
    ad68:	20000ed0 	.word	0x20000ed0

0000ad6c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    ad6c:	6800      	ldr	r0, [r0, #0]
    ad6e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ad72:	4288      	cmp	r0, r1
    ad74:	d303      	bcc.n	ad7e <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    ad76:	4903      	ldr	r1, [pc, #12]	; (ad84 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    ad78:	6088      	str	r0, [r1, #8]
    ad7a:	2000      	movs	r0, #0
    ad7c:	4770      	bx	lr
    ad7e:	2012      	movs	r0, #18
    ad80:	4770      	bx	lr
    ad82:	0000      	.short	0x0000
    ad84:	20000ed0 	.word	0x20000ed0

0000ad88 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    ad88:	4a03      	ldr	r2, [pc, #12]	; (ad98 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    ad8a:	e9d2 1200 	ldrd	r1, r2, [r2]
    ad8e:	6001      	str	r1, [r0, #0]
    ad90:	6042      	str	r2, [r0, #4]
    ad92:	2000      	movs	r0, #0
    ad94:	4770      	bx	lr
    ad96:	0000      	.short	0x0000
    ad98:	0000b200 	.word	0x0000b200

0000ad9c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    ad9c:	b510      	push	{r4, lr}
    ad9e:	2005      	movs	r0, #5
    ada0:	f000 fad4 	bl	b34c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    ada4:	f7fd fe56 	bl	8a54 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    ada8:	4902      	ldr	r1, [pc, #8]	; (adb4 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    adaa:	4801      	ldr	r0, [pc, #4]	; (adb0 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    adac:	6048      	str	r0, [r1, #4]
    adae:	bd10      	pop	{r4, pc}
    adb0:	0000ae41 	.word	0x0000ae41
    adb4:	200001f4 	.word	0x200001f4

0000adb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    adb8:	b510      	push	{r4, lr}
    adba:	f002 ff5e 	bl	dc7a <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    adbe:	f7fb fc73 	bl	66a8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    adc2:	f000 fadd 	bl	b380 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    adc6:	480f      	ldr	r0, [pc, #60]	; (ae04 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
    adc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    adcc:	4b0e      	ldr	r3, [pc, #56]	; (ae08 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50>)
    adce:	81c1      	strh	r1, [r0, #14]
    add0:	8201      	strh	r1, [r0, #16]
    add2:	2100      	movs	r1, #0
    add4:	75c1      	strb	r1, [r0, #23]
    add6:	8301      	strh	r1, [r0, #24]
    add8:	8001      	strh	r1, [r0, #0]
    adda:	221b      	movs	r2, #27
    addc:	801a      	strh	r2, [r3, #0]
    adde:	f44f 74a4 	mov.w	r4, #328	; 0x148
    ade2:	805c      	strh	r4, [r3, #2]
    ade4:	809a      	strh	r2, [r3, #4]
    ade6:	80dc      	strh	r4, [r3, #6]
    ade8:	7481      	strb	r1, [r0, #18]
    adea:	74c1      	strb	r1, [r0, #19]
    adec:	2303      	movs	r3, #3
    adee:	7083      	strb	r3, [r0, #2]
    adf0:	2302      	movs	r3, #2
    adf2:	70c3      	strb	r3, [r0, #3]
    adf4:	8082      	strh	r2, [r0, #4]
    adf6:	80c2      	strh	r2, [r0, #6]
    adf8:	f640 62a6 	movw	r2, #3750	; 0xea6
    adfc:	6082      	str	r2, [r0, #8]
    adfe:	7581      	strb	r1, [r0, #22]
    ae00:	7301      	strb	r1, [r0, #12]
    ae02:	bd10      	pop	{r4, pc}
    ae04:	20000ed0 	.word	0x20000ed0
    ae08:	200001fc 	.word	0x200001fc

0000ae0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    ae0c:	b510      	push	{r4, lr}
    ae0e:	b158      	cbz	r0, ae28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c>
    ae10:	490a      	ldr	r1, [pc, #40]	; (ae3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>)
    ae12:	780a      	ldrb	r2, [r1, #0]
    ae14:	b16a      	cbz	r2, ae32 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26>
    ae16:	2200      	movs	r2, #0
    ae18:	7042      	strb	r2, [r0, #1]
    ae1a:	2303      	movs	r3, #3
    ae1c:	7003      	strb	r3, [r0, #0]
    ae1e:	2301      	movs	r3, #1
    ae20:	7103      	strb	r3, [r0, #4]
    ae22:	700a      	strb	r2, [r1, #0]
    ae24:	4618      	mov	r0, r3
    ae26:	bd10      	pop	{r4, pc}
    ae28:	f641 1146 	movw	r1, #6470	; 0x1946
    ae2c:	2039      	movs	r0, #57	; 0x39
    ae2e:	f7f9 ff23 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ae36:	f7fb bfcf 	b.w	6dd8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    ae3a:	0000      	.short	0x0000
    ae3c:	20000ed0 	.word	0x20000ed0
    ae40:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae44:	4692      	mov	sl, r2
    ae46:	460f      	mov	r7, r1
    ae48:	4681      	mov	r9, r0
    ae4a:	f005 fa1a 	bl	10282 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    ae4e:	2800      	cmp	r0, #0
    ae50:	d063      	beq.n	af1a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    ae52:	4933      	ldr	r1, [pc, #204]	; (af20 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>)
    ae54:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
    ae58:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
    ae5c:	8808      	ldrh	r0, [r1, #0]
    ae5e:	4290      	cmp	r0, r2
    ae60:	d300      	bcc.n	ae64 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    ae62:	4610      	mov	r0, r2
    ae64:	4680      	mov	r8, r0
    ae66:	8888      	ldrh	r0, [r1, #4]
    ae68:	42b0      	cmp	r0, r6
    ae6a:	d200      	bcs.n	ae6e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    ae6c:	4606      	mov	r6, r0
    ae6e:	884c      	ldrh	r4, [r1, #2]
    ae70:	f640 0048 	movw	r0, #2120	; 0x848
    ae74:	4284      	cmp	r4, r0
    ae76:	d300      	bcc.n	ae7a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6e>
    ae78:	4604      	mov	r4, r0
    ae7a:	88cd      	ldrh	r5, [r1, #6]
    ae7c:	4285      	cmp	r5, r0
    ae7e:	d300      	bcc.n	ae82 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x76>
    ae80:	4605      	mov	r5, r0
    ae82:	4284      	cmp	r4, r0
    ae84:	d300      	bcc.n	ae88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7c>
    ae86:	4604      	mov	r4, r0
    ae88:	f44f 71a4 	mov.w	r1, #328	; 0x148
    ae8c:	2e1b      	cmp	r6, #27
    ae8e:	d001      	beq.n	ae94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    ae90:	428d      	cmp	r5, r1
    ae92:	d104      	bne.n	ae9e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x92>
    ae94:	f1b8 0f1b 	cmp.w	r8, #27
    ae98:	d03f      	beq.n	af1a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    ae9a:	428c      	cmp	r4, r1
    ae9c:	d03d      	beq.n	af1a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    ae9e:	466a      	mov	r2, sp
    aea0:	4651      	mov	r1, sl
    aea2:	4648      	mov	r0, r9
    aea4:	f005 f971 	bl	1018a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    aea8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    aeac:	4641      	mov	r1, r8
    aeae:	4540      	cmp	r0, r8
    aeb0:	d900      	bls.n	aeb4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    aeb2:	4608      	mov	r0, r1
    aeb4:	80f8      	strh	r0, [r7, #6]
    aeb6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    aeba:	42a1      	cmp	r1, r4
    aebc:	d800      	bhi.n	aec0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>
    aebe:	460c      	mov	r4, r1
    aec0:	813c      	strh	r4, [r7, #8]
    aec2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    aec6:	42b1      	cmp	r1, r6
    aec8:	d800      	bhi.n	aecc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    aeca:	460e      	mov	r6, r1
    aecc:	807e      	strh	r6, [r7, #2]
    aece:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    aed2:	42a9      	cmp	r1, r5
    aed4:	d900      	bls.n	aed8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    aed6:	4629      	mov	r1, r5
    aed8:	80b9      	strh	r1, [r7, #4]
    aeda:	2201      	movs	r2, #1
    aedc:	703a      	strb	r2, [r7, #0]
    aede:	381b      	subs	r0, #27
    aee0:	28e0      	cmp	r0, #224	; 0xe0
    aee2:	d902      	bls.n	aeea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xde>
    aee4:	f640 4172 	movw	r1, #3186	; 0xc72
    aee8:	e014      	b.n	af14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    aeea:	3e1b      	subs	r6, #27
    aeec:	2ee0      	cmp	r6, #224	; 0xe0
    aeee:	d902      	bls.n	aef6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    aef0:	f640 4174 	movw	r1, #3188	; 0xc74
    aef4:	e00e      	b.n	af14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    aef6:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    aefa:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    aefe:	4284      	cmp	r4, r0
    af00:	d902      	bls.n	af08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    af02:	f640 4176 	movw	r1, #3190	; 0xc76
    af06:	e005      	b.n	af14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    af08:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    af0c:	4281      	cmp	r1, r0
    af0e:	d904      	bls.n	af1a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    af10:	f640 4178 	movw	r1, #3192	; 0xc78
    af14:	2039      	movs	r0, #57	; 0x39
    af16:	f7f9 feaf 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af1a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af1e:	0000      	.short	0x0000
    af20:	200001fc 	.word	0x200001fc

0000af24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    af24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    af28:	b088      	sub	sp, #32
    af2a:	460c      	mov	r4, r1
    af2c:	4606      	mov	r6, r0
    af2e:	f003 fd33 	bl	e998 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    af32:	b198      	cbz	r0, af5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    af34:	4630      	mov	r0, r6
    af36:	f003 fd22 	bl	e97e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    af3a:	b130      	cbz	r0, af4a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    af3c:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    af40:	2012      	movs	r0, #18
    af42:	2900      	cmp	r1, #0
    af44:	d00b      	beq.n	af5e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    af46:	2980      	cmp	r1, #128	; 0x80
    af48:	d809      	bhi.n	af5e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    af4a:	4630      	mov	r0, r6
    af4c:	f003 fd06 	bl	e95c <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    af50:	b140      	cbz	r0, af64 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    af52:	4630      	mov	r0, r6
    af54:	f003 fc7e 	bl	e854 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    af58:	b130      	cbz	r0, af68 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    af5a:	e009      	b.n	af70 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    af5c:	2042      	movs	r0, #66	; 0x42
    af5e:	b008      	add	sp, #32
    af60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    af64:	200c      	movs	r0, #12
    af66:	e7fa      	b.n	af5e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    af68:	4630      	mov	r0, r6
    af6a:	f003 fd02 	bl	e972 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    af6e:	b3a8      	cbz	r0, afdc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    af70:	4630      	mov	r0, r6
    af72:	f003 fed9 	bl	ed28 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    af76:	2800      	cmp	r0, #0
    af78:	d1f4      	bne.n	af64 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    af7a:	4630      	mov	r0, r6
    af7c:	f003 fc85 	bl	e88a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    af80:	2800      	cmp	r0, #0
    af82:	d1ef      	bne.n	af64 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    af84:	4630      	mov	r0, r6
    af86:	f7fc f97b 	bl	7280 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    af8a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    af8e:	f242 7110 	movw	r1, #10000	; 0x2710
    af92:	fb00 f801 	mul.w	r8, r0, r1
    af96:	78e1      	ldrb	r1, [r4, #3]
    af98:	4630      	mov	r0, r6
    af9a:	f003 fcd6 	bl	e94a <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    af9e:	4630      	mov	r0, r6
    afa0:	f003 fce9 	bl	e976 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    afa4:	b1e8      	cbz	r0, afe2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    afa6:	2200      	movs	r2, #0
    afa8:	4611      	mov	r1, r2
    afaa:	a801      	add	r0, sp, #4
    afac:	f7fa f8d0 	bl	5150 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    afb0:	0004      	movs	r4, r0
    afb2:	d06a      	beq.n	b08a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    afb4:	2100      	movs	r1, #0
    afb6:	f7fb fda5 	bl	6b04 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    afba:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    afbe:	8020      	strh	r0, [r4, #0]
    afc0:	4621      	mov	r1, r4
    afc2:	4630      	mov	r0, r6
    afc4:	f003 fcfb 	bl	e9be <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    afc8:	f005 f95b 	bl	10282 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    afcc:	4d3a      	ldr	r5, [pc, #232]	; (b0b8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    afce:	2800      	cmp	r0, #0
    afd0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    afd4:	d00f      	beq.n	aff6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    afd6:	88aa      	ldrh	r2, [r5, #4]
    afd8:	88e9      	ldrh	r1, [r5, #6]
    afda:	e00e      	b.n	affa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    afdc:	e7ff      	b.n	afde <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    afde:	2012      	movs	r0, #18
    afe0:	e7bd      	b.n	af5e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    afe2:	4642      	mov	r2, r8
    afe4:	2100      	movs	r1, #0
    afe6:	4630      	mov	r0, r6
    afe8:	f7fd f89a 	bl	8120 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    afec:	2800      	cmp	r0, #0
    afee:	d0b6      	beq.n	af5e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    aff0:	f241 413b 	movw	r1, #5179	; 0x143b
    aff4:	e053      	b.n	b09e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    aff6:	221b      	movs	r2, #27
    aff8:	4611      	mov	r1, r2
    affa:	84c2      	strh	r2, [r0, #38]	; 0x26
    affc:	8501      	strh	r1, [r0, #40]	; 0x28
    affe:	68a8      	ldr	r0, [r5, #8]
    b000:	62e0      	str	r0, [r4, #44]	; 0x2c
    b002:	f641 574c 	movw	r7, #7500	; 0x1d4c
    b006:	4630      	mov	r0, r6
    b008:	f003 fcbd 	bl	e986 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    b00c:	b910      	cbnz	r0, b014 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    b00e:	4630      	mov	r0, r6
    b010:	f003 fcd3 	bl	e9ba <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    b014:	60e7      	str	r7, [r4, #12]
    b016:	8821      	ldrh	r1, [r4, #0]
    b018:	f8ad 1008 	strh.w	r1, [sp, #8]
    b01c:	7ca9      	ldrb	r1, [r5, #18]
    b01e:	f88d 100a 	strb.w	r1, [sp, #10]
    b022:	7ce9      	ldrb	r1, [r5, #19]
    b024:	f88d 100b 	strb.w	r1, [sp, #11]
    b028:	8aa9      	ldrh	r1, [r5, #20]
    b02a:	f8ad 100c 	strh.w	r1, [sp, #12]
    b02e:	a905      	add	r1, sp, #20
    b030:	9100      	str	r1, [sp, #0]
    b032:	2001      	movs	r0, #1
    b034:	ab04      	add	r3, sp, #16
    b036:	aa02      	add	r2, sp, #8
    b038:	4621      	mov	r1, r4
    b03a:	f005 f8e3 	bl	10204 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x290>
    b03e:	b140      	cbz	r0, b052 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    b040:	2100      	movs	r1, #0
    b042:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b046:	f7fa f8ad 	bl	51a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    b04a:	b1f0      	cbz	r0, b08a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    b04c:	f241 4187 	movw	r1, #5255	; 0x1487
    b050:	e025      	b.n	b09e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    b052:	f89d 0010 	ldrb.w	r0, [sp, #16]
    b056:	f88d 0018 	strb.w	r0, [sp, #24]
    b05a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    b05e:	f88d 0019 	strb.w	r0, [sp, #25]
    b062:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    b066:	f8ad 001a 	strh.w	r0, [sp, #26]
    b06a:	a906      	add	r1, sp, #24
    b06c:	4620      	mov	r0, r4
    b06e:	f002 ff6f 	bl	df50 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    b072:	78e8      	ldrb	r0, [r5, #3]
    b074:	9000      	str	r0, [sp, #0]
    b076:	78ab      	ldrb	r3, [r5, #2]
    b078:	88ea      	ldrh	r2, [r5, #6]
    b07a:	88a9      	ldrh	r1, [r5, #4]
    b07c:	8820      	ldrh	r0, [r4, #0]
    b07e:	f7fa f95d 	bl	533c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    b082:	b120      	cbz	r0, b08e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    b084:	f241 4192 	movw	r1, #5266	; 0x1492
    b088:	e009      	b.n	b09e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    b08a:	2009      	movs	r0, #9
    b08c:	e767      	b.n	af5e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b08e:	4642      	mov	r2, r8
    b090:	4621      	mov	r1, r4
    b092:	4630      	mov	r0, r6
    b094:	f7fd f844 	bl	8120 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    b098:	b120      	cbz	r0, b0a4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    b09a:	f241 4194 	movw	r1, #5268	; 0x1494
    b09e:	2039      	movs	r0, #57	; 0x39
    b0a0:	f7f9 fdea 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0a4:	4805      	ldr	r0, [pc, #20]	; (b0bc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    b0a6:	6843      	ldr	r3, [r0, #4]
    b0a8:	b123      	cbz	r3, b0b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    b0aa:	2200      	movs	r2, #0
    b0ac:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
    b0b0:	4620      	mov	r0, r4
    b0b2:	4798      	blx	r3
    b0b4:	2000      	movs	r0, #0
    b0b6:	e752      	b.n	af5e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b0b8:	20000ed0 	.word	0x20000ed0
    b0bc:	200001f4 	.word	0x200001f4
    b0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b0c4:	b088      	sub	sp, #32
    b0c6:	4604      	mov	r4, r0
    b0c8:	8800      	ldrh	r0, [r0, #0]
    b0ca:	a906      	add	r1, sp, #24
    b0cc:	f002 fe81 	bl	ddd2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b0d0:	2800      	cmp	r0, #0
    b0d2:	d147      	bne.n	b164 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    b0d4:	9807      	ldr	r0, [sp, #28]
    b0d6:	2700      	movs	r7, #0
    b0d8:	f890 11e8 	ldrb.w	r1, [r0, #488]	; 0x1e8
    b0dc:	f88d 1008 	strb.w	r1, [sp, #8]
    b0e0:	9902      	ldr	r1, [sp, #8]
    b0e2:	9102      	str	r1, [sp, #8]
    b0e4:	f89d 1008 	ldrb.w	r1, [sp, #8]
    b0e8:	f88d 100c 	strb.w	r1, [sp, #12]
    b0ec:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    b0f0:	3070      	adds	r0, #112	; 0x70
    b0f2:	0689      	lsls	r1, r1, #26
    b0f4:	d502      	bpl.n	b0fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>
    b0f6:	f89d 100c 	ldrb.w	r1, [sp, #12]
    b0fa:	b149      	cbz	r1, b110 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    b0fc:	f05f 0100 	movs.w	r1, #0
    b100:	f88d 1004 	strb.w	r1, [sp, #4]
    b104:	2105      	movs	r1, #5
    b106:	304c      	adds	r0, #76	; 0x4c
    b108:	f004 f9db 	bl	f4c2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    b10c:	b110      	cbz	r0, b114 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
    b10e:	e004      	b.n	b11a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
    b110:	2101      	movs	r1, #1
    b112:	e7f5      	b.n	b100 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
    b114:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b118:	b318      	cbz	r0, b162 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23e>
    b11a:	8921      	ldrh	r1, [r4, #8]
    b11c:	88e0      	ldrh	r0, [r4, #6]
    b11e:	f005 f826 	bl	1016e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    b122:	2800      	cmp	r0, #0
    b124:	d11e      	bne.n	b164 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    b126:	88a1      	ldrh	r1, [r4, #4]
    b128:	8860      	ldrh	r0, [r4, #2]
    b12a:	f005 f820 	bl	1016e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    b12e:	2800      	cmp	r0, #0
    b130:	d118      	bne.n	b164 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    b132:	8921      	ldrh	r1, [r4, #8]
    b134:	88e0      	ldrh	r0, [r4, #6]
    b136:	f005 f810 	bl	1015a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    b13a:	2800      	cmp	r0, #0
    b13c:	d112      	bne.n	b164 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    b13e:	88a1      	ldrh	r1, [r4, #4]
    b140:	8860      	ldrh	r0, [r4, #2]
    b142:	f005 f80a 	bl	1015a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    b146:	0006      	movs	r6, r0
    b148:	d10c      	bne.n	b164 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    b14a:	9807      	ldr	r0, [sp, #28]
    b14c:	f500 75d2 	add.w	r5, r0, #420	; 0x1a4
    b150:	f04f 0801 	mov.w	r8, #1
    b154:	f885 8001 	strb.w	r8, [r5, #1]
    b158:	f89d 100c 	ldrb.w	r1, [sp, #12]
    b15c:	b129      	cbz	r1, b16a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    b15e:	263a      	movs	r6, #58	; 0x3a
    b160:	e02f      	b.n	b1c2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29e>
    b162:	201a      	movs	r0, #26
    b164:	b008      	add	sp, #32
    b166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b16a:	4639      	mov	r1, r7
    b16c:	aa03      	add	r2, sp, #12
    b16e:	f005 f80c 	bl	1018a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    b172:	8861      	ldrh	r1, [r4, #2]
    b174:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    b178:	4281      	cmp	r1, r0
    b17a:	d200      	bcs.n	b17e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25a>
    b17c:	4608      	mov	r0, r1
    b17e:	80e8      	strh	r0, [r5, #6]
    b180:	88a1      	ldrh	r1, [r4, #4]
    b182:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    b186:	4281      	cmp	r1, r0
    b188:	d200      	bcs.n	b18c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>
    b18a:	4608      	mov	r0, r1
    b18c:	8128      	strh	r0, [r5, #8]
    b18e:	88e2      	ldrh	r2, [r4, #6]
    b190:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    b194:	428a      	cmp	r2, r1
    b196:	d200      	bcs.n	b19a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x276>
    b198:	4611      	mov	r1, r2
    b19a:	8069      	strh	r1, [r5, #2]
    b19c:	8922      	ldrh	r2, [r4, #8]
    b19e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    b1a2:	428a      	cmp	r2, r1
    b1a4:	d200      	bcs.n	b1a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x284>
    b1a6:	4611      	mov	r1, r2
    b1a8:	f640 0248 	movw	r2, #2120	; 0x848
    b1ac:	80a9      	strh	r1, [r5, #4]
    b1ae:	4291      	cmp	r1, r2
    b1b0:	d300      	bcc.n	b1b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x290>
    b1b2:	4611      	mov	r1, r2
    b1b4:	80a9      	strh	r1, [r5, #4]
    b1b6:	4290      	cmp	r0, r2
    b1b8:	d200      	bcs.n	b1bc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    b1ba:	4602      	mov	r2, r0
    b1bc:	812a      	strh	r2, [r5, #8]
    b1be:	f885 8000 	strb.w	r8, [r5]
    b1c2:	706f      	strb	r7, [r5, #1]
    b1c4:	4630      	mov	r0, r6
    b1c6:	e7cd      	b.n	b164 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    b1c8:	b510      	push	{r4, lr}
    b1ca:	4604      	mov	r4, r0
    b1cc:	88c1      	ldrh	r1, [r0, #6]
    b1ce:	8880      	ldrh	r0, [r0, #4]
    b1d0:	f004 ffcd 	bl	1016e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    b1d4:	2800      	cmp	r0, #0
    b1d6:	d10f      	bne.n	b1f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    b1d8:	8861      	ldrh	r1, [r4, #2]
    b1da:	8820      	ldrh	r0, [r4, #0]
    b1dc:	f004 ffc7 	bl	1016e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    b1e0:	2800      	cmp	r0, #0
    b1e2:	d109      	bne.n	b1f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    b1e4:	4805      	ldr	r0, [pc, #20]	; (b1fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>)
    b1e6:	88a1      	ldrh	r1, [r4, #4]
    b1e8:	8081      	strh	r1, [r0, #4]
    b1ea:	8821      	ldrh	r1, [r4, #0]
    b1ec:	8001      	strh	r1, [r0, #0]
    b1ee:	88e1      	ldrh	r1, [r4, #6]
    b1f0:	80c1      	strh	r1, [r0, #6]
    b1f2:	8861      	ldrh	r1, [r4, #2]
    b1f4:	8041      	strh	r1, [r0, #2]
    b1f6:	2000      	movs	r0, #0
    b1f8:	bd10      	pop	{r4, pc}
    b1fa:	0000      	.short	0x0000
    b1fc:	200001fc 	.word	0x200001fc
    b200:	0b12b00b 	.word	0x0b12b00b
    b204:	12b00059 	.word	0x12b00059
    b208:	05060708 	.word	0x05060708
    b20c:	00020304 	.word	0x00020304
    b210:	f0f4f8fc 	.word	0xf0f4f8fc
    b214:	0304d8ec 	.word	0x0304d8ec
    b218:	f4f8fc00 	.word	0xf4f8fc00
    b21c:	00d8ecf0 	.word	0x00d8ecf0

0000b220 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    b220:	b510      	push	{r4, lr}
    b222:	f7ff fced 	bl	ac00 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    b226:	4804      	ldr	r0, [pc, #16]	; (b238 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    b228:	6840      	ldr	r0, [r0, #4]
    b22a:	f005 f8fc 	bl	10426 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    b22e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b232:	f004 be38 	b.w	fea6 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    b236:	0000      	.short	0x0000
    b238:	20000204 	.word	0x20000204

0000b23c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    b23c:	b510      	push	{r4, lr}
    b23e:	4c07      	ldr	r4, [pc, #28]	; (b25c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    b240:	68a0      	ldr	r0, [r4, #8]
    b242:	f005 f8f0 	bl	10426 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    b246:	68e0      	ldr	r0, [r4, #12]
    b248:	f005 f8ed 	bl	10426 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    b24c:	f002 fd15 	bl	dc7a <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    b250:	f7fb fa2a 	bl	66a8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    b254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b258:	f7ff bdae 	b.w	adb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    b25c:	20000204 	.word	0x20000204

0000b260 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    b260:	b500      	push	{lr}
    b262:	4905      	ldr	r1, [pc, #20]	; (b278 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    b264:	4805      	ldr	r0, [pc, #20]	; (b27c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b266:	f005 f8bf 	bl	103e8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b26a:	4804      	ldr	r0, [pc, #16]	; (b27c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b26c:	4904      	ldr	r1, [pc, #16]	; (b280 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    b26e:	1d00      	adds	r0, r0, #4
    b270:	f85d eb04 	ldr.w	lr, [sp], #4
    b274:	f005 b8b8 	b.w	103e8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b278:	20000214 	.word	0x20000214
    b27c:	20000208 	.word	0x20000208
    b280:	2000021c 	.word	0x2000021c

0000b284 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    b284:	b500      	push	{lr}
    b286:	4908      	ldr	r1, [pc, #32]	; (b2a8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    b288:	4808      	ldr	r0, [pc, #32]	; (b2ac <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b28a:	f005 f8ad 	bl	103e8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b28e:	4807      	ldr	r0, [pc, #28]	; (b2ac <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b290:	4907      	ldr	r1, [pc, #28]	; (b2b0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    b292:	1d00      	adds	r0, r0, #4
    b294:	f005 f8a8 	bl	103e8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b298:	4804      	ldr	r0, [pc, #16]	; (b2ac <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b29a:	4906      	ldr	r1, [pc, #24]	; (b2b4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    b29c:	3008      	adds	r0, #8
    b29e:	f85d eb04 	ldr.w	lr, [sp], #4
    b2a2:	f005 b8a1 	b.w	103e8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b2a6:	0000      	.short	0x0000
    b2a8:	20000240 	.word	0x20000240
    b2ac:	20000208 	.word	0x20000208
    b2b0:	20000248 	.word	0x20000248
    b2b4:	20000238 	.word	0x20000238

0000b2b8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    b2b8:	4801      	ldr	r0, [pc, #4]	; (b2c0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    b2ba:	7800      	ldrb	r0, [r0, #0]
    b2bc:	4770      	bx	lr
    b2be:	0000      	.short	0x0000
    b2c0:	20000204 	.word	0x20000204
    b2c4:	b510      	push	{r4, lr}
    b2c6:	f7fc f953 	bl	7570 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    b2ca:	f7fc ffbd 	bl	8248 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>
    b2ce:	4805      	ldr	r0, [pc, #20]	; (b2e4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x2c>)
    b2d0:	f7fc f934 	bl	753c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    b2d4:	4905      	ldr	r1, [pc, #20]	; (b2ec <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x34>)
    b2d6:	4804      	ldr	r0, [pc, #16]	; (b2e8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x30>)
    b2d8:	6008      	str	r0, [r1, #0]
    b2da:	4906      	ldr	r1, [pc, #24]	; (b2f4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x3c>)
    b2dc:	4804      	ldr	r0, [pc, #16]	; (b2f0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x38>)
    b2de:	6008      	str	r0, [r1, #0]
    b2e0:	bd10      	pop	{r4, pc}
    b2e2:	0000      	.short	0x0000
    b2e4:	20001359 	.word	0x20001359
    b2e8:	00007341 	.word	0x00007341
    b2ec:	20000224 	.word	0x20000224
    b2f0:	00006e79 	.word	0x00006e79
    b2f4:	20000228 	.word	0x20000228
    b2f8:	490c      	ldr	r1, [pc, #48]	; (b32c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x74>)
    b2fa:	b510      	push	{r4, lr}
    b2fc:	2001      	movs	r0, #1
    b2fe:	7008      	strb	r0, [r1, #0]
    b300:	f7fc f966 	bl	75d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    b304:	f7fd fcfe 	bl	8d04 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    b308:	f002 fca5 	bl	dc56 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    b30c:	4808      	ldr	r0, [pc, #32]	; (b330 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x78>)
    b30e:	f7fa fc2b 	bl	5b68 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    b312:	2000      	movs	r0, #0
    b314:	f7f9 fe8c 	bl	5030 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    b318:	4907      	ldr	r1, [pc, #28]	; (b338 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x80>)
    b31a:	4806      	ldr	r0, [pc, #24]	; (b334 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x7c>)
    b31c:	6008      	str	r0, [r1, #0]
    b31e:	4908      	ldr	r1, [pc, #32]	; (b340 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x88>)
    b320:	4806      	ldr	r0, [pc, #24]	; (b33c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x84>)
    b322:	6008      	str	r0, [r1, #0]
    b324:	4908      	ldr	r1, [pc, #32]	; (b348 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x90>)
    b326:	4807      	ldr	r0, [pc, #28]	; (b344 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8c>)
    b328:	6008      	str	r0, [r1, #0]
    b32a:	bd10      	pop	{r4, pc}
    b32c:	20000204 	.word	0x20000204
    b330:	20001359 	.word	0x20001359
    b334:	00005b15 	.word	0x00005b15
    b338:	20000234 	.word	0x20000234
    b33c:	00008a85 	.word	0x00008a85
    b340:	20000230 	.word	0x20000230
    b344:	00006eed 	.word	0x00006eed
    b348:	2000022c 	.word	0x2000022c

0000b34c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    b34c:	2101      	movs	r1, #1
    b34e:	4081      	lsls	r1, r0
    b350:	4802      	ldr	r0, [pc, #8]	; (b35c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    b352:	6802      	ldr	r2, [r0, #0]
    b354:	4311      	orrs	r1, r2
    b356:	6001      	str	r1, [r0, #0]
    b358:	4770      	bx	lr
    b35a:	0000      	.short	0x0000
    b35c:	20000250 	.word	0x20000250

0000b360 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    b360:	4801      	ldr	r0, [pc, #4]	; (b368 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    b362:	6800      	ldr	r0, [r0, #0]
    b364:	4770      	bx	lr
    b366:	0000      	.short	0x0000
    b368:	20000250 	.word	0x20000250

0000b36c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    b36c:	4803      	ldr	r0, [pc, #12]	; (b37c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    b36e:	8800      	ldrh	r0, [r0, #0]
    b370:	f3c0 2000 	ubfx	r0, r0, #8, #1
    b374:	0040      	lsls	r0, r0, #1
    b376:	1c40      	adds	r0, r0, #1
    b378:	4770      	bx	lr
    b37a:	0000      	.short	0x0000
    b37c:	20000250 	.word	0x20000250

0000b380 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    b380:	b510      	push	{r4, lr}
    b382:	f7f9 f8ed 	bl	4560 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    b386:	2200      	movs	r2, #0
    b388:	4b08      	ldr	r3, [pc, #32]	; (b3ac <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    b38a:	4611      	mov	r1, r2
    b38c:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    b390:	4284      	cmp	r4, r0
    b392:	d303      	bcc.n	b39c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    b394:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    b398:	7882      	ldrb	r2, [r0, #2]
    b39a:	e003      	b.n	b3a4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    b39c:	1c49      	adds	r1, r1, #1
    b39e:	b2c9      	uxtb	r1, r1
    b3a0:	290c      	cmp	r1, #12
    b3a2:	d3f3      	bcc.n	b38c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    b3a4:	4802      	ldr	r0, [pc, #8]	; (b3b0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    b3a6:	7002      	strb	r2, [r0, #0]
    b3a8:	bd10      	pop	{r4, pc}
    b3aa:	0000      	.short	0x0000
    b3ac:	00010478 	.word	0x00010478
    b3b0:	20000298 	.word	0x20000298

0000b3b4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    b3b4:	b570      	push	{r4, r5, r6, lr}
    b3b6:	4605      	mov	r5, r0
    b3b8:	4616      	mov	r6, r2
    b3ba:	460c      	mov	r4, r1
    b3bc:	2002      	movs	r0, #2
    b3be:	f000 f9f9 	bl	b7b4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b3c2:	4906      	ldr	r1, [pc, #24]	; (b3dc <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    b3c4:	2001      	movs	r0, #1
    b3c6:	1ef6      	subs	r6, r6, #3
    b3c8:	7008      	strb	r0, [r1, #0]
    b3ca:	4805      	ldr	r0, [pc, #20]	; (b3e0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b3cc:	6006      	str	r6, [r0, #0]
    b3ce:	4804      	ldr	r0, [pc, #16]	; (b3e0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b3d0:	3808      	subs	r0, #8
    b3d2:	6005      	str	r5, [r0, #0]
    b3d4:	1f00      	subs	r0, r0, #4
    b3d6:	6004      	str	r4, [r0, #0]
    b3d8:	bd70      	pop	{r4, r5, r6, pc}
    b3da:	0000      	.short	0x0000
    b3dc:	20000299 	.word	0x20000299
    b3e0:	4000f510 	.word	0x4000f510

0000b3e4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    b3e4:	b510      	push	{r4, lr}
    b3e6:	4c0c      	ldr	r4, [pc, #48]	; (b418 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    b3e8:	7820      	ldrb	r0, [r4, #0]
    b3ea:	b180      	cbz	r0, b40e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    b3ec:	490b      	ldr	r1, [pc, #44]	; (b41c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    b3ee:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b3f2:	6008      	str	r0, [r1, #0]
    b3f4:	f000 f86a 	bl	b4cc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b3f8:	2100      	movs	r1, #0
    b3fa:	b120      	cbz	r0, b406 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    b3fc:	2001      	movs	r0, #1
    b3fe:	7060      	strb	r0, [r4, #1]
    b400:	4807      	ldr	r0, [pc, #28]	; (b420 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    b402:	6800      	ldr	r0, [r0, #0]
    b404:	e001      	b.n	b40a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    b406:	7061      	strb	r1, [r4, #1]
    b408:	2010      	movs	r0, #16
    b40a:	70a0      	strb	r0, [r4, #2]
    b40c:	7021      	strb	r1, [r4, #0]
    b40e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b412:	2000      	movs	r0, #0
    b414:	f000 b9ce 	b.w	b7b4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b418:	20000299 	.word	0x20000299
    b41c:	4001f508 	.word	0x4001f508
    b420:	4000f400 	.word	0x4000f400

0000b424 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    b424:	b510      	push	{r4, lr}
    b426:	2002      	movs	r0, #2
    b428:	f000 f9c4 	bl	b7b4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b42c:	4904      	ldr	r1, [pc, #16]	; (b440 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    b42e:	2001      	movs	r0, #1
    b430:	7008      	strb	r0, [r1, #0]
    b432:	f000 f859 	bl	b4e8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    b436:	4903      	ldr	r1, [pc, #12]	; (b444 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    b438:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b43c:	6008      	str	r0, [r1, #0]
    b43e:	bd10      	pop	{r4, pc}
    b440:	20000299 	.word	0x20000299
    b444:	4001f504 	.word	0x4001f504

0000b448 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    b448:	4803      	ldr	r0, [pc, #12]	; (b458 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    b44a:	2100      	movs	r1, #0
    b44c:	7001      	strb	r1, [r0, #0]
    b44e:	7041      	strb	r1, [r0, #1]
    b450:	2110      	movs	r1, #16
    b452:	7081      	strb	r1, [r0, #2]
    b454:	4770      	bx	lr
    b456:	0000      	.short	0x0000
    b458:	20000299 	.word	0x20000299

0000b45c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    b45c:	4807      	ldr	r0, [pc, #28]	; (b47c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    b45e:	b510      	push	{r4, lr}
    b460:	7801      	ldrb	r1, [r0, #0]
    b462:	b141      	cbz	r1, b476 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    b464:	f000 f832 	bl	b4cc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b468:	b118      	cbz	r0, b472 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    b46a:	4805      	ldr	r0, [pc, #20]	; (b480 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    b46c:	6800      	ldr	r0, [r0, #0]
    b46e:	b2c0      	uxtb	r0, r0
    b470:	bd10      	pop	{r4, pc}
    b472:	2010      	movs	r0, #16
    b474:	bd10      	pop	{r4, pc}
    b476:	7880      	ldrb	r0, [r0, #2]
    b478:	bd10      	pop	{r4, pc}
    b47a:	0000      	.short	0x0000
    b47c:	20000299 	.word	0x20000299
    b480:	4000f400 	.word	0x4000f400

0000b484 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    b484:	4808      	ldr	r0, [pc, #32]	; (b4a8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    b486:	b510      	push	{r4, lr}
    b488:	7801      	ldrb	r1, [r0, #0]
    b48a:	b159      	cbz	r1, b4a4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    b48c:	4807      	ldr	r0, [pc, #28]	; (b4ac <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    b48e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b492:	b128      	cbz	r0, b4a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    b494:	f000 f80c 	bl	b4b0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b498:	2800      	cmp	r0, #0
    b49a:	d000      	beq.n	b49e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    b49c:	2001      	movs	r0, #1
    b49e:	bd10      	pop	{r4, pc}
    b4a0:	2002      	movs	r0, #2
    b4a2:	bd10      	pop	{r4, pc}
    b4a4:	7840      	ldrb	r0, [r0, #1]
    b4a6:	bd10      	pop	{r4, pc}
    b4a8:	20000299 	.word	0x20000299
    b4ac:	4000f000 	.word	0x4000f000
    b4b0:	4805      	ldr	r0, [pc, #20]	; (b4c8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    b4b2:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    b4b6:	b111      	cbz	r1, b4be <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    b4b8:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b4bc:	b108      	cbz	r0, b4c2 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    b4be:	2000      	movs	r0, #0
    b4c0:	4770      	bx	lr
    b4c2:	2001      	movs	r0, #1
    b4c4:	4770      	bx	lr
    b4c6:	0000      	.short	0x0000
    b4c8:	4000f000 	.word	0x4000f000
    b4cc:	4805      	ldr	r0, [pc, #20]	; (b4e4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    b4ce:	b510      	push	{r4, lr}
    b4d0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b4d4:	b120      	cbz	r0, b4e0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b4d6:	f7ff ffeb 	bl	b4b0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b4da:	b108      	cbz	r0, b4e0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b4dc:	2001      	movs	r0, #1
    b4de:	bd10      	pop	{r4, pc}
    b4e0:	2000      	movs	r0, #0
    b4e2:	bd10      	pop	{r4, pc}
    b4e4:	4000f000 	.word	0x4000f000
    b4e8:	4804      	ldr	r0, [pc, #16]	; (b4fc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    b4ea:	2100      	movs	r1, #0
    b4ec:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b4f0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b4f4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b4f8:	4770      	bx	lr
    b4fa:	0000      	.short	0x0000
    b4fc:	4000f000 	.word	0x4000f000

0000b500 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    b500:	4a08      	ldr	r2, [pc, #32]	; (b524 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    b502:	b510      	push	{r4, lr}
    b504:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b508:	4907      	ldr	r1, [pc, #28]	; (b528 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    b50a:	4610      	mov	r0, r2
    b50c:	f7f9 fa88 	bl	4a20 <mpsl_fem_lna_configuration_set>
    b510:	2800      	cmp	r0, #0
    b512:	d005      	beq.n	b520 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b514:	1c40      	adds	r0, r0, #1
    b516:	d003      	beq.n	b520 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b518:	217d      	movs	r1, #125	; 0x7d
    b51a:	2040      	movs	r0, #64	; 0x40
    b51c:	f7f9 fbac 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b520:	bd10      	pop	{r4, pc}
    b522:	0000      	.short	0x0000
    b524:	20000254 	.word	0x20000254
    b528:	0000b558 	.word	0x0000b558

0000b52c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    b52c:	4a08      	ldr	r2, [pc, #32]	; (b550 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    b52e:	b510      	push	{r4, lr}
    b530:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b534:	4907      	ldr	r1, [pc, #28]	; (b554 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    b536:	4610      	mov	r0, r2
    b538:	f7f9 fa7e 	bl	4a38 <mpsl_fem_pa_configuration_set>
    b53c:	2800      	cmp	r0, #0
    b53e:	d005      	beq.n	b54c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b540:	1c40      	adds	r0, r0, #1
    b542:	d003      	beq.n	b54c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b544:	2172      	movs	r1, #114	; 0x72
    b546:	2040      	movs	r0, #64	; 0x40
    b548:	f7f9 fb96 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b54c:	bd10      	pop	{r4, pc}
    b54e:	0000      	.short	0x0000
    b550:	20000254 	.word	0x20000254
    b554:	0000b558 	.word	0x0000b558
    b558:	00000001 	.word	0x00000001
    b55c:	40001110 	.word	0x40001110
	...

0000b570 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    b570:	4a07      	ldr	r2, [pc, #28]	; (b590 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    b572:	b510      	push	{r4, lr}
    b574:	7853      	ldrb	r3, [r2, #1]
    b576:	b133      	cbz	r3, b586 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    b578:	4b06      	ldr	r3, [pc, #24]	; (b594 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    b57a:	6019      	str	r1, [r3, #0]
    b57c:	1d19      	adds	r1, r3, #4
    b57e:	6008      	str	r0, [r1, #0]
    b580:	2001      	movs	r0, #1
    b582:	7090      	strb	r0, [r2, #2]
    b584:	bd10      	pop	{r4, pc}
    b586:	21ba      	movs	r1, #186	; 0xba
    b588:	203c      	movs	r0, #60	; 0x3c
    b58a:	f7f9 fb75 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b58e:	0000      	.short	0x0000
    b590:	2000029c 	.word	0x2000029c
    b594:	4000f50c 	.word	0x4000f50c

0000b598 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    b598:	4809      	ldr	r0, [pc, #36]	; (b5c0 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    b59a:	b510      	push	{r4, lr}
    b59c:	7801      	ldrb	r1, [r0, #0]
    b59e:	b151      	cbz	r1, b5b6 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    b5a0:	7880      	ldrb	r0, [r0, #2]
    b5a2:	b140      	cbz	r0, b5b6 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    b5a4:	4907      	ldr	r1, [pc, #28]	; (b5c4 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    b5a6:	2000      	movs	r0, #0
    b5a8:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    b5ac:	4906      	ldr	r1, [pc, #24]	; (b5c8 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    b5ae:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    b5b2:	6008      	str	r0, [r1, #0]
    b5b4:	bd10      	pop	{r4, pc}
    b5b6:	21e1      	movs	r1, #225	; 0xe1
    b5b8:	203c      	movs	r0, #60	; 0x3c
    b5ba:	f7f9 fb5d 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5be:	0000      	.short	0x0000
    b5c0:	2000029c 	.word	0x2000029c
    b5c4:	4000f000 	.word	0x4000f000
    b5c8:	4001f504 	.word	0x4001f504

0000b5cc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    b5cc:	b570      	push	{r4, r5, r6, lr}
    b5ce:	4c0b      	ldr	r4, [pc, #44]	; (b5fc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    b5d0:	2500      	movs	r5, #0
    b5d2:	7820      	ldrb	r0, [r4, #0]
    b5d4:	b158      	cbz	r0, b5ee <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    b5d6:	f000 f8e5 	bl	b7a4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b5da:	4809      	ldr	r0, [pc, #36]	; (b600 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    b5dc:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b5e0:	b118      	cbz	r0, b5ea <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    b5e2:	4808      	ldr	r0, [pc, #32]	; (b604 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    b5e4:	6800      	ldr	r0, [r0, #0]
    b5e6:	70e0      	strb	r0, [r4, #3]
    b5e8:	e000      	b.n	b5ec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    b5ea:	70e5      	strb	r5, [r4, #3]
    b5ec:	7025      	strb	r5, [r4, #0]
    b5ee:	2000      	movs	r0, #0
    b5f0:	f000 f8e0 	bl	b7b4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b5f4:	7065      	strb	r5, [r4, #1]
    b5f6:	70a5      	strb	r5, [r4, #2]
    b5f8:	bd70      	pop	{r4, r5, r6, pc}
    b5fa:	0000      	.short	0x0000
    b5fc:	2000029c 	.word	0x2000029c
    b600:	4000f000 	.word	0x4000f000
    b604:	4000f400 	.word	0x4000f400

0000b608 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    b608:	480d      	ldr	r0, [pc, #52]	; (b640 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    b60a:	b510      	push	{r4, lr}
    b60c:	7801      	ldrb	r1, [r0, #0]
    b60e:	b191      	cbz	r1, b636 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    b610:	7880      	ldrb	r0, [r0, #2]
    b612:	b180      	cbz	r0, b636 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    b614:	490b      	ldr	r1, [pc, #44]	; (b644 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    b616:	2000      	movs	r0, #0
    b618:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    b61c:	4a0a      	ldr	r2, [pc, #40]	; (b648 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    b61e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b622:	6010      	str	r0, [r2, #0]
    b624:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    b628:	2a01      	cmp	r2, #1
    b62a:	d103      	bne.n	b634 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    b62c:	604a      	str	r2, [r1, #4]
    b62e:	4906      	ldr	r1, [pc, #24]	; (b648 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    b630:	1d09      	adds	r1, r1, #4
    b632:	6008      	str	r0, [r1, #0]
    b634:	bd10      	pop	{r4, pc}
    b636:	21d1      	movs	r1, #209	; 0xd1
    b638:	203c      	movs	r0, #60	; 0x3c
    b63a:	f7f9 fb1d 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b63e:	0000      	.short	0x0000
    b640:	2000029c 	.word	0x2000029c
    b644:	4000f000 	.word	0x4000f000
    b648:	4001f504 	.word	0x4001f504

0000b64c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    b64c:	4803      	ldr	r0, [pc, #12]	; (b65c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    b64e:	2100      	movs	r1, #0
    b650:	7001      	strb	r1, [r0, #0]
    b652:	7041      	strb	r1, [r0, #1]
    b654:	7081      	strb	r1, [r0, #2]
    b656:	70c1      	strb	r1, [r0, #3]
    b658:	4770      	bx	lr
    b65a:	0000      	.short	0x0000
    b65c:	2000029c 	.word	0x2000029c

0000b660 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    b660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b664:	4605      	mov	r5, r0
    b666:	461c      	mov	r4, r3
    b668:	4690      	mov	r8, r2
    b66a:	460f      	mov	r7, r1
    b66c:	2001      	movs	r0, #1
    b66e:	f000 f8a1 	bl	b7b4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b672:	4e12      	ldr	r6, [pc, #72]	; (b6bc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    b674:	4812      	ldr	r0, [pc, #72]	; (b6c0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b676:	7134      	strb	r4, [r6, #4]
    b678:	6007      	str	r7, [r0, #0]
    b67a:	4911      	ldr	r1, [pc, #68]	; (b6c0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b67c:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    b680:	1f09      	subs	r1, r1, #4
    b682:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    b686:	6008      	str	r0, [r1, #0]
    b688:	f001 f8fa 	bl	c880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b68c:	b938      	cbnz	r0, b69e <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    b68e:	480c      	ldr	r0, [pc, #48]	; (b6c0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b690:	3010      	adds	r0, #16
    b692:	6801      	ldr	r1, [r0, #0]
    b694:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    b698:	ea41 0108 	orr.w	r1, r1, r8
    b69c:	6001      	str	r1, [r0, #0]
    b69e:	f000 f881 	bl	b7a4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b6a2:	b93d      	cbnz	r5, b6b4 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    b6a4:	4808      	ldr	r0, [pc, #32]	; (b6c8 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    b6a6:	4a07      	ldr	r2, [pc, #28]	; (b6c4 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    b6a8:	4906      	ldr	r1, [pc, #24]	; (b6c4 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    b6aa:	3afc      	subs	r2, #252	; 0xfc
    b6ac:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b6b0:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    b6b4:	2001      	movs	r0, #1
    b6b6:	7070      	strb	r0, [r6, #1]
    b6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b6bc:	2000029c 	.word	0x2000029c
    b6c0:	4000f508 	.word	0x4000f508
    b6c4:	4000f100 	.word	0x4000f100
    b6c8:	4001f088 	.word	0x4001f088

0000b6cc <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    b6cc:	4808      	ldr	r0, [pc, #32]	; (b6f0 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    b6ce:	b510      	push	{r4, lr}
    b6d0:	7841      	ldrb	r1, [r0, #1]
    b6d2:	b149      	cbz	r1, b6e8 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    b6d4:	2101      	movs	r1, #1
    b6d6:	7001      	strb	r1, [r0, #0]
    b6d8:	4806      	ldr	r0, [pc, #24]	; (b6f4 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    b6da:	2200      	movs	r2, #0
    b6dc:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    b6e0:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    b6e4:	6001      	str	r1, [r0, #0]
    b6e6:	bd10      	pop	{r4, pc}
    b6e8:	21c5      	movs	r1, #197	; 0xc5
    b6ea:	203c      	movs	r0, #60	; 0x3c
    b6ec:	f7f9 fac4 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b6f0:	2000029c 	.word	0x2000029c
    b6f4:	4000f000 	.word	0x4000f000

0000b6f8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    b6f8:	4806      	ldr	r0, [pc, #24]	; (b714 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    b6fa:	7801      	ldrb	r1, [r0, #0]
    b6fc:	b141      	cbz	r1, b710 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    b6fe:	4806      	ldr	r0, [pc, #24]	; (b718 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    b700:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b704:	2800      	cmp	r0, #0
    b706:	d002      	beq.n	b70e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    b708:	4804      	ldr	r0, [pc, #16]	; (b71c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    b70a:	6800      	ldr	r0, [r0, #0]
    b70c:	b2c0      	uxtb	r0, r0
    b70e:	4770      	bx	lr
    b710:	78c0      	ldrb	r0, [r0, #3]
    b712:	4770      	bx	lr
    b714:	2000029c 	.word	0x2000029c
    b718:	4000f000 	.word	0x4000f000
    b71c:	4000f400 	.word	0x4000f400

0000b720 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    b720:	4901      	ldr	r1, [pc, #4]	; (b728 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    b722:	2001      	movs	r0, #1
    b724:	6088      	str	r0, [r1, #8]
    b726:	4770      	bx	lr
    b728:	4000f000 	.word	0x4000f000

0000b72c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    b72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b730:	2800      	cmp	r0, #0
    b732:	d02e      	beq.n	b792 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    b734:	4818      	ldr	r0, [pc, #96]	; (b798 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    b736:	7800      	ldrb	r0, [r0, #0]
    b738:	b1b0      	cbz	r0, b768 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    b73a:	4d18      	ldr	r5, [pc, #96]	; (b79c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    b73c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b740:	2800      	cmp	r0, #0
    b742:	d126      	bne.n	b792 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    b744:	2702      	movs	r7, #2
    b746:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    b74a:	4c15      	ldr	r4, [pc, #84]	; (b7a0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    b74c:	6820      	ldr	r0, [r4, #0]
    b74e:	43c0      	mvns	r0, r0
    b750:	f340 1600 	sbfx	r6, r0, #4, #1
    b754:	6820      	ldr	r0, [r4, #0]
    b756:	f040 0010 	orr.w	r0, r0, #16
    b75a:	6020      	str	r0, [r4, #0]
    b75c:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    b760:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b764:	1c76      	adds	r6, r6, #1
    b766:	e009      	b.n	b77c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    b768:	f240 1153 	movw	r1, #339	; 0x153
    b76c:	203c      	movs	r0, #60	; 0x3c
    b76e:	f7f9 fa83 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b772:	bf00      	nop
    b774:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    b778:	f7f9 f8fc 	bl	4974 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b77c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b780:	2800      	cmp	r0, #0
    b782:	d0f7      	beq.n	b774 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    b784:	b91e      	cbnz	r6, b78e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    b786:	6820      	ldr	r0, [r4, #0]
    b788:	f020 0010 	bic.w	r0, r0, #16
    b78c:	6020      	str	r0, [r4, #0]
    b78e:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    b792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b796:	0000      	.short	0x0000
    b798:	2000029c 	.word	0x2000029c
    b79c:	4000f000 	.word	0x4000f000
    b7a0:	e000ed10 	.word	0xe000ed10
    b7a4:	4902      	ldr	r1, [pc, #8]	; (b7b0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    b7a6:	4801      	ldr	r0, [pc, #4]	; (b7ac <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    b7a8:	6008      	str	r0, [r1, #0]
    b7aa:	4770      	bx	lr
    b7ac:	02020000 	.word	0x02020000
    b7b0:	4001f508 	.word	0x4001f508

0000b7b4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    b7b4:	b510      	push	{r4, lr}
    b7b6:	4604      	mov	r4, r0
    b7b8:	f000 f822 	bl	b800 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    b7bc:	2c00      	cmp	r4, #0
    b7be:	d017      	beq.n	b7f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    b7c0:	4a0c      	ldr	r2, [pc, #48]	; (b7f4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b7c2:	480c      	ldr	r0, [pc, #48]	; (b7f4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b7c4:	490c      	ldr	r1, [pc, #48]	; (b7f8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    b7c6:	3214      	adds	r2, #20
    b7c8:	4b0c      	ldr	r3, [pc, #48]	; (b7fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    b7ca:	2c01      	cmp	r4, #1
    b7cc:	d005      	beq.n	b7da <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    b7ce:	2c02      	cmp	r4, #2
    b7d0:	d008      	beq.n	b7e4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    b7d2:	2183      	movs	r1, #131	; 0x83
    b7d4:	203d      	movs	r0, #61	; 0x3d
    b7d6:	f7f9 fa4f 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b7da:	2402      	movs	r4, #2
    b7dc:	6004      	str	r4, [r0, #0]
    b7de:	6011      	str	r1, [r2, #0]
    b7e0:	0620      	lsls	r0, r4, #24
    b7e2:	e004      	b.n	b7ee <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    b7e4:	2403      	movs	r4, #3
    b7e6:	6004      	str	r4, [r0, #0]
    b7e8:	6011      	str	r1, [r2, #0]
    b7ea:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b7ee:	6018      	str	r0, [r3, #0]
    b7f0:	bd10      	pop	{r4, pc}
    b7f2:	0000      	.short	0x0000
    b7f4:	4000f500 	.word	0x4000f500
    b7f8:	2000145b 	.word	0x2000145b
    b7fc:	4001f504 	.word	0x4001f504
    b800:	4804      	ldr	r0, [pc, #16]	; (b814 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    b802:	2100      	movs	r1, #0
    b804:	6001      	str	r1, [r0, #0]
    b806:	6001      	str	r1, [r0, #0]
    b808:	4903      	ldr	r1, [pc, #12]	; (b818 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    b80a:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    b80e:	6008      	str	r0, [r1, #0]
    b810:	4770      	bx	lr
    b812:	0000      	.short	0x0000
    b814:	4000f500 	.word	0x4000f500
    b818:	4001f508 	.word	0x4001f508

0000b81c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    b81c:	4805      	ldr	r0, [pc, #20]	; (b834 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    b81e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b822:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    b826:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b82a:	4903      	ldr	r1, [pc, #12]	; (b838 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    b82c:	2000      	movs	r0, #0
    b82e:	6008      	str	r0, [r1, #0]
    b830:	4770      	bx	lr
    b832:	0000      	.short	0x0000
    b834:	40001000 	.word	0x40001000
    b838:	40001560 	.word	0x40001560

0000b83c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    b83c:	4904      	ldr	r1, [pc, #16]	; (b850 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    b83e:	6008      	str	r0, [r1, #0]
    b840:	4804      	ldr	r0, [pc, #16]	; (b854 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    b842:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b846:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    b84a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b84e:	4770      	bx	lr
    b850:	40001560 	.word	0x40001560
    b854:	40001000 	.word	0x40001000

0000b858 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    b858:	4801      	ldr	r0, [pc, #4]	; (b860 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    b85a:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    b85e:	4770      	bx	lr
    b860:	20000f14 	.word	0x20000f14

0000b864 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    b864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b866:	4c1e      	ldr	r4, [pc, #120]	; (b8e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7c>)
    b868:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b86c:	2710      	movs	r7, #16
    b86e:	f3c0 1600 	ubfx	r6, r0, #4, #1
    b872:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
    b876:	2002      	movs	r0, #2
    b878:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b87c:	4819      	ldr	r0, [pc, #100]	; (b8e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x80>)
    b87e:	2500      	movs	r5, #0
    b880:	491a      	ldr	r1, [pc, #104]	; (b8ec <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>)
    b882:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    b886:	4818      	ldr	r0, [pc, #96]	; (b8e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>)
    b888:	6008      	str	r0, [r1, #0]
    b88a:	4819      	ldr	r0, [pc, #100]	; (b8f0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8c>)
    b88c:	6800      	ldr	r0, [r0, #0]
    b88e:	b1b0      	cbz	r0, b8be <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    b890:	20ff      	movs	r0, #255	; 0xff
    b892:	f88d 0000 	strb.w	r0, [sp]
    b896:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b89a:	2001      	movs	r0, #1
    b89c:	6120      	str	r0, [r4, #16]
    b89e:	e004      	b.n	b8aa <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    b8a0:	f89d 0000 	ldrb.w	r0, [sp]
    b8a4:	1e40      	subs	r0, r0, #1
    b8a6:	f88d 0000 	strb.w	r0, [sp]
    b8aa:	f89d 0000 	ldrb.w	r0, [sp]
    b8ae:	b118      	cbz	r0, b8b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x54>
    b8b0:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    b8b4:	2800      	cmp	r0, #0
    b8b6:	d0f3      	beq.n	b8a0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x3c>
    b8b8:	f89d 0000 	ldrb.w	r0, [sp]
    b8bc:	b150      	cbz	r0, b8d4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    b8be:	f000 fcb1 	bl	c224 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe8>
    b8c2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b8c6:	f000 fe29 	bl	c51c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    b8ca:	2e00      	cmp	r6, #0
    b8cc:	d001      	beq.n	b8d2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    b8ce:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
    b8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b8d4:	f240 71a3 	movw	r1, #1955	; 0x7a3
    b8d8:	203e      	movs	r0, #62	; 0x3e
    b8da:	f7f9 f9cd 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b8de:	0000      	.short	0x0000
    b8e0:	40001000 	.word	0x40001000
    b8e4:	20000f14 	.word	0x20000f14
    b8e8:	0c0e0000 	.word	0x0c0e0000
    b8ec:	4001f508 	.word	0x4001f508
    b8f0:	40001550 	.word	0x40001550

0000b8f4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    b8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b8f8:	4c1f      	ldr	r4, [pc, #124]	; (b978 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>)
    b8fa:	4607      	mov	r7, r0
    b8fc:	4688      	mov	r8, r1
    b8fe:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b902:	07c1      	lsls	r1, r0, #31
    b904:	d018      	beq.n	b938 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    b906:	4a1d      	ldr	r2, [pc, #116]	; (b97c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    b908:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    b90c:	6011      	str	r1, [r2, #0]
    b90e:	4d1c      	ldr	r5, [pc, #112]	; (b980 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    b910:	f8d5 1200 	ldr.w	r1, [r5, #512]	; 0x200
    b914:	f041 0101 	orr.w	r1, r1, #1
    b918:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
    b91c:	f040 0002 	orr.w	r0, r0, #2
    b920:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b924:	4640      	mov	r0, r8
    b926:	f000 fe5d 	bl	c5e4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b92a:	f000 fc29 	bl	c180 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b92e:	2601      	movs	r6, #1
    b930:	b13f      	cbz	r7, b942 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    b932:	2f01      	cmp	r7, #1
    b934:	d00e      	beq.n	b954 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    b936:	e016      	b.n	b966 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b938:	f240 612d 	movw	r1, #1581	; 0x62d
    b93c:	203e      	movs	r0, #62	; 0x3e
    b93e:	f7f9 f99b 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b942:	4640      	mov	r0, r8
    b944:	f000 fc3c 	bl	c1c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    b948:	4640      	mov	r0, r8
    b94a:	f000 fbfd 	bl	c148 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b94e:	7266      	strb	r6, [r4, #9]
    b950:	602e      	str	r6, [r5, #0]
    b952:	e008      	b.n	b966 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b954:	f000 fc5c 	bl	c210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    b958:	f000 fdaa 	bl	c4b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    b95c:	2002      	movs	r0, #2
    b95e:	7260      	strb	r0, [r4, #9]
    b960:	f000 fcd2 	bl	c308 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    b964:	606e      	str	r6, [r5, #4]
    b966:	4807      	ldr	r0, [pc, #28]	; (b984 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    b968:	64c6      	str	r6, [r0, #76]	; 0x4c
    b96a:	4807      	ldr	r0, [pc, #28]	; (b988 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b96c:	6801      	ldr	r1, [r0, #0]
    b96e:	4638      	mov	r0, r7
    b970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b974:	f004 be37 	b.w	105e6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b978:	20000f14 	.word	0x20000f14
    b97c:	4001f504 	.word	0x4001f504
    b980:	40001000 	.word	0x40001000
    b984:	40008000 	.word	0x40008000
    b988:	4000854c 	.word	0x4000854c

0000b98c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    b98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b990:	4d35      	ldr	r5, [pc, #212]	; (ba68 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    b992:	4606      	mov	r6, r0
    b994:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b998:	4689      	mov	r9, r1
    b99a:	6028      	str	r0, [r5, #0]
    b99c:	4c33      	ldr	r4, [pc, #204]	; (ba6c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    b99e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b9a2:	f040 0002 	orr.w	r0, r0, #2
    b9a6:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b9aa:	4608      	mov	r0, r1
    b9ac:	f000 fe1a 	bl	c5e4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b9b0:	f000 fbe6 	bl	c180 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b9b4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ba70 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    b9b8:	2700      	movs	r7, #0
    b9ba:	b116      	cbz	r6, b9c2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    b9bc:	2e01      	cmp	r6, #1
    b9be:	d027      	beq.n	ba10 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    b9c0:	e03f      	b.n	ba42 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b9c2:	4648      	mov	r0, r9
    b9c4:	f000 fbfc 	bl	c1c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    b9c8:	79e0      	ldrb	r0, [r4, #7]
    b9ca:	2801      	cmp	r0, #1
    b9cc:	d105      	bne.n	b9da <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    b9ce:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b9d2:	f041 0108 	orr.w	r1, r1, #8
    b9d6:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b9da:	4648      	mov	r0, r9
    b9dc:	f000 fbb4 	bl	c148 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b9e0:	2001      	movs	r0, #1
    b9e2:	7260      	strb	r0, [r4, #9]
    b9e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b9e6:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    b9ea:	62a0      	str	r0, [r4, #40]	; 0x28
    b9ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b9f0:	6028      	str	r0, [r5, #0]
    b9f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b9f6:	f1b9 0f02 	cmp.w	r9, #2
    b9fa:	d007      	beq.n	ba0c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    b9fc:	f640 0034 	movw	r0, #2100	; 0x834
    ba00:	f649 72ec 	movw	r2, #40940	; 0x9fec
    ba04:	4410      	add	r0, r2
    ba06:	fbb0 f7f1 	udiv	r7, r0, r1
    ba0a:	e01a      	b.n	ba42 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    ba0c:	4608      	mov	r0, r1
    ba0e:	e7f7      	b.n	ba00 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    ba10:	f000 fbfe 	bl	c210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    ba14:	f000 fd4c 	bl	c4b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    ba18:	79e0      	ldrb	r0, [r4, #7]
    ba1a:	2801      	cmp	r0, #1
    ba1c:	d105      	bne.n	ba2a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    ba1e:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    ba22:	f041 0104 	orr.w	r1, r1, #4
    ba26:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    ba2a:	2002      	movs	r0, #2
    ba2c:	7260      	strb	r0, [r4, #9]
    ba2e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    ba30:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    ba34:	62a0      	str	r0, [r4, #40]	; 0x28
    ba36:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    ba3a:	6028      	str	r0, [r5, #0]
    ba3c:	2729      	movs	r7, #41	; 0x29
    ba3e:	f000 fc63 	bl	c308 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    ba42:	f000 fc4d 	bl	c2e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a4>
    ba46:	f000 fdf5 	bl	c634 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    ba4a:	6800      	ldr	r0, [r0, #0]
    ba4c:	2801      	cmp	r0, #1
    ba4e:	d006      	beq.n	ba5e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    ba50:	2100      	movs	r1, #0
    ba52:	4630      	mov	r0, r6
    ba54:	f004 fdc7 	bl	105e6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    ba58:	4638      	mov	r0, r7
    ba5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ba5e:	f7ff ff01 	bl	b864 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ba62:	2000      	movs	r0, #0
    ba64:	e7f9      	b.n	ba5a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    ba66:	0000      	.short	0x0000
    ba68:	4001f504 	.word	0x4001f504
    ba6c:	20000f14 	.word	0x20000f14
    ba70:	40001000 	.word	0x40001000

0000ba74 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    ba74:	4a02      	ldr	r2, [pc, #8]	; (ba80 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    ba76:	6b13      	ldr	r3, [r2, #48]	; 0x30
    ba78:	6003      	str	r3, [r0, #0]
    ba7a:	6b50      	ldr	r0, [r2, #52]	; 0x34
    ba7c:	6008      	str	r0, [r1, #0]
    ba7e:	4770      	bx	lr
    ba80:	20000f14 	.word	0x20000f14

0000ba84 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    ba84:	b510      	push	{r4, lr}
    ba86:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    ba88:	4901      	ldr	r1, [pc, #4]	; (ba90 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    ba8a:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    ba8e:	bd10      	pop	{r4, pc}
    ba90:	20000f04 	.word	0x20000f04

0000ba94 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    ba94:	490e      	ldr	r1, [pc, #56]	; (bad0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3c>)
    ba96:	b510      	push	{r4, lr}
    ba98:	69ca      	ldr	r2, [r1, #28]
    ba9a:	4282      	cmp	r2, r0
    ba9c:	d302      	bcc.n	baa4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    ba9e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    baa2:	e00a      	b.n	baba <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x26>
    baa4:	2201      	movs	r2, #1
    baa6:	730a      	strb	r2, [r1, #12]
    baa8:	6108      	str	r0, [r1, #16]
    baaa:	490a      	ldr	r1, [pc, #40]	; (bad4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    baac:	644a      	str	r2, [r1, #68]	; 0x44
    baae:	4a0a      	ldr	r2, [pc, #40]	; (bad8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    bab0:	6813      	ldr	r3, [r2, #0]
    bab2:	4283      	cmp	r3, r0
    bab4:	d304      	bcc.n	bac0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2c>
    bab6:	f640 0129 	movw	r1, #2089	; 0x829
    baba:	203e      	movs	r0, #62	; 0x3e
    babc:	f7f9 f8dc 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bac0:	2300      	movs	r3, #0
    bac2:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    bac6:	6010      	str	r0, [r2, #0]
    bac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bacc:	f000 bcfe 	b.w	c4cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>
    bad0:	20000f14 	.word	0x20000f14
    bad4:	40008000 	.word	0x40008000
    bad8:	40008544 	.word	0x40008544

0000badc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    badc:	b570      	push	{r4, r5, r6, lr}
    bade:	4c10      	ldr	r4, [pc, #64]	; (bb20 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    bae0:	4606      	mov	r6, r0
    bae2:	2002      	movs	r0, #2
    bae4:	7320      	strb	r0, [r4, #12]
    bae6:	2596      	movs	r5, #150	; 0x96
    bae8:	f000 f866 	bl	bbb8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    baec:	4602      	mov	r2, r0
    baee:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    baf2:	f894 1020 	ldrb.w	r1, [r4, #32]
    baf6:	2801      	cmp	r0, #1
    baf8:	d00d      	beq.n	bb16 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3a>
    bafa:	4628      	mov	r0, r5
    bafc:	f004 fd8b 	bl	10616 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    bb00:	4908      	ldr	r1, [pc, #32]	; (bb24 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    bb02:	6120      	str	r0, [r4, #16]
    bb04:	2000      	movs	r0, #0
    bb06:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    bb0a:	6921      	ldr	r1, [r4, #16]
    bb0c:	69e0      	ldr	r0, [r4, #28]
    bb0e:	4408      	add	r0, r1
    bb10:	4905      	ldr	r1, [pc, #20]	; (bb28 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    bb12:	6008      	str	r0, [r1, #0]
    bb14:	bd70      	pop	{r4, r5, r6, pc}
    bb16:	4633      	mov	r3, r6
    bb18:	4628      	mov	r0, r5
    bb1a:	f004 fd98 	bl	1064e <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    bb1e:	e7ef      	b.n	bb00 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    bb20:	20000f14 	.word	0x20000f14
    bb24:	40008000 	.word	0x40008000
    bb28:	40008544 	.word	0x40008544

0000bb2c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    bb2c:	b510      	push	{r4, lr}
    bb2e:	f000 fec3 	bl	c8b8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bb32:	2800      	cmp	r0, #0
    bb34:	d006      	beq.n	bb44 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    bb36:	4804      	ldr	r0, [pc, #16]	; (bb48 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    bb38:	6801      	ldr	r1, [r0, #0]
    bb3a:	f021 0101 	bic.w	r1, r1, #1
    bb3e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    bb42:	6001      	str	r1, [r0, #0]
    bb44:	bd10      	pop	{r4, pc}
    bb46:	0000      	.short	0x0000
    bb48:	40001774 	.word	0x40001774

0000bb4c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    bb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb50:	2238      	movs	r2, #56	; 0x38
    bb52:	2100      	movs	r1, #0
    bb54:	4813      	ldr	r0, [pc, #76]	; (bba4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    bb56:	f000 ff5f 	bl	ca18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bb5a:	f000 fcdf 	bl	c51c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    bb5e:	f000 fe64 	bl	c82a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bb62:	4d11      	ldr	r5, [pc, #68]	; (bba8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bb64:	4e10      	ldr	r6, [pc, #64]	; (bba8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bb66:	2400      	movs	r4, #0
    bb68:	4f0f      	ldr	r7, [pc, #60]	; (bba8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bb6a:	3508      	adds	r5, #8
    bb6c:	3610      	adds	r6, #16
    bb6e:	b928      	cbnz	r0, bb7c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    bb70:	f000 fe72 	bl	c858 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bb74:	b910      	cbnz	r0, bb7c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    bb76:	f000 fe79 	bl	c86c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    bb7a:	b108      	cbz	r0, bb80 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    bb7c:	2224      	movs	r2, #36	; 0x24
    bb7e:	e006      	b.n	bb8e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    bb80:	f000 feb4 	bl	c8ec <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bb84:	b910      	cbnz	r0, bb8c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    bb86:	f000 fea7 	bl	c8d8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    bb8a:	b140      	cbz	r0, bb9e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    bb8c:	2240      	movs	r2, #64	; 0x40
    bb8e:	21ff      	movs	r1, #255	; 0xff
    bb90:	4638      	mov	r0, r7
    bb92:	f000 ff41 	bl	ca18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bb96:	602c      	str	r4, [r5, #0]
    bb98:	6034      	str	r4, [r6, #0]
    bb9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb9e:	2238      	movs	r2, #56	; 0x38
    bba0:	e7f5      	b.n	bb8e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    bba2:	0000      	.short	0x0000
    bba4:	20000f14 	.word	0x20000f14
    bba8:	40000e00 	.word	0x40000e00

0000bbac <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    bbac:	4801      	ldr	r0, [pc, #4]	; (bbb4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    bbae:	69c0      	ldr	r0, [r0, #28]
    bbb0:	4770      	bx	lr
    bbb2:	0000      	.short	0x0000
    bbb4:	20000f14 	.word	0x20000f14

0000bbb8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    bbb8:	4814      	ldr	r0, [pc, #80]	; (bc0c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    bbba:	b510      	push	{r4, lr}
    bbbc:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    bbc0:	7a40      	ldrb	r0, [r0, #9]
    bbc2:	b141      	cbz	r1, bbd6 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    bbc4:	2902      	cmp	r1, #2
    bbc6:	d00b      	beq.n	bbe0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    bbc8:	2802      	cmp	r0, #2
    bbca:	d009      	beq.n	bbe0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    bbcc:	2901      	cmp	r1, #1
    bbce:	d00b      	beq.n	bbe8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    bbd0:	2801      	cmp	r0, #1
    bbd2:	d009      	beq.n	bbe8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    bbd4:	e015      	b.n	bc02 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    bbd6:	2800      	cmp	r0, #0
    bbd8:	d1f6      	bne.n	bbc8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    bbda:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    bbde:	e00d      	b.n	bbfc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x44>
    bbe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bbe4:	f000 bc16 	b.w	c414 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    bbe8:	4809      	ldr	r0, [pc, #36]	; (bc10 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    bbea:	6800      	ldr	r0, [r0, #0]
    bbec:	f000 000f 	and.w	r0, r0, #15
    bbf0:	2803      	cmp	r0, #3
    bbf2:	d006      	beq.n	bc02 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    bbf4:	2804      	cmp	r0, #4
    bbf6:	d006      	beq.n	bc06 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4e>
    bbf8:	f240 11e7 	movw	r1, #487	; 0x1e7
    bbfc:	203e      	movs	r0, #62	; 0x3e
    bbfe:	f7f9 f83b 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc02:	2001      	movs	r0, #1
    bc04:	bd10      	pop	{r4, pc}
    bc06:	2002      	movs	r0, #2
    bc08:	bd10      	pop	{r4, pc}
    bc0a:	0000      	.short	0x0000
    bc0c:	20000f14 	.word	0x20000f14
    bc10:	40001510 	.word	0x40001510

0000bc14 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    bc14:	4801      	ldr	r0, [pc, #4]	; (bc1c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    bc16:	6980      	ldr	r0, [r0, #24]
    bc18:	4770      	bx	lr
    bc1a:	0000      	.short	0x0000
    bc1c:	20000f14 	.word	0x20000f14

0000bc20 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    bc20:	b510      	push	{r4, lr}
    bc22:	f000 fc61 	bl	c4e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>
    bc26:	f7ff fe1d 	bl	b864 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    bc2a:	f004 fc72 	bl	10512 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    bc2e:	480f      	ldr	r0, [pc, #60]	; (bc6c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    bc30:	4a0f      	ldr	r2, [pc, #60]	; (bc70 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    bc32:	6a81      	ldr	r1, [r0, #40]	; 0x28
    bc34:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    bc38:	6011      	str	r1, [r2, #0]
    bc3a:	2400      	movs	r4, #0
    bc3c:	6284      	str	r4, [r0, #40]	; 0x28
    bc3e:	7304      	strb	r4, [r0, #12]
    bc40:	61c4      	str	r4, [r0, #28]
    bc42:	6184      	str	r4, [r0, #24]
    bc44:	f000 fc50 	bl	c4e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>
    bc48:	480a      	ldr	r0, [pc, #40]	; (bc74 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    bc4a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    bc4e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    bc52:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    bc56:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    bc5a:	2001      	movs	r0, #1
    bc5c:	f004 fc92 	bl	10584 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    bc60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc64:	2001      	movs	r0, #1
    bc66:	f004 bc80 	b.w	1056a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    bc6a:	0000      	.short	0x0000
    bc6c:	20000f14 	.word	0x20000f14
    bc70:	4001f508 	.word	0x4001f508
    bc74:	40008000 	.word	0x40008000

0000bc78 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    bc78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bc7c:	2001      	movs	r0, #1
    bc7e:	f004 fc81 	bl	10584 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    bc82:	4838      	ldr	r0, [pc, #224]	; (bd64 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    bc84:	2400      	movs	r4, #0
    bc86:	6004      	str	r4, [r0, #0]
    bc88:	2601      	movs	r6, #1
    bc8a:	6006      	str	r6, [r0, #0]
    bc8c:	f000 fe04 	bl	c898 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bc90:	4d35      	ldr	r5, [pc, #212]	; (bd68 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    bc92:	b118      	cbz	r0, bc9c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x24>
    bc94:	6828      	ldr	r0, [r5, #0]
    bc96:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    bc9a:	6028      	str	r0, [r5, #0]
    bc9c:	f000 fdf0 	bl	c880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bca0:	b128      	cbz	r0, bcae <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x36>
    bca2:	6828      	ldr	r0, [r5, #0]
    bca4:	4931      	ldr	r1, [pc, #196]	; (bd6c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    bca6:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    bcaa:	4308      	orrs	r0, r1
    bcac:	6028      	str	r0, [r5, #0]
    bcae:	f000 fe03 	bl	c8b8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bcb2:	b138      	cbz	r0, bcc4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4c>
    bcb4:	482c      	ldr	r0, [pc, #176]	; (bd68 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    bcb6:	1d00      	adds	r0, r0, #4
    bcb8:	6801      	ldr	r1, [r0, #0]
    bcba:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    bcbe:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    bcc2:	6001      	str	r1, [r0, #0]
    bcc4:	4928      	ldr	r1, [pc, #160]	; (bd68 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    bcc6:	482a      	ldr	r0, [pc, #168]	; (bd70 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    bcc8:	313c      	adds	r1, #60	; 0x3c
    bcca:	6008      	str	r0, [r1, #0]
    bccc:	f7f8 fec0 	bl	4a50 <mpsl_fem_device_config_254_apply_get>
    bcd0:	b140      	cbz	r0, bce4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6c>
    bcd2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bcd6:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    bcda:	1c41      	adds	r1, r0, #1
    bcdc:	d002      	beq.n	bce4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6c>
    bcde:	4922      	ldr	r1, [pc, #136]	; (bd68 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    bce0:	3110      	adds	r1, #16
    bce2:	6008      	str	r0, [r1, #0]
    bce4:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    bce8:	6e00      	ldr	r0, [r0, #96]	; 0x60
    bcea:	1c41      	adds	r1, r0, #1
    bcec:	d004      	beq.n	bcf8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x80>
    bcee:	4921      	ldr	r1, [pc, #132]	; (bd74 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    bcf0:	680a      	ldr	r2, [r1, #0]
    bcf2:	f360 4217 	bfi	r2, r0, #16, #8
    bcf6:	600a      	str	r2, [r1, #0]
    bcf8:	491e      	ldr	r1, [pc, #120]	; (bd74 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    bcfa:	f240 605b 	movw	r0, #1627	; 0x65b
    bcfe:	3954      	subs	r1, #84	; 0x54
    bd00:	6008      	str	r0, [r1, #0]
    bd02:	1f09      	subs	r1, r1, #4
    bd04:	f240 1003 	movw	r0, #259	; 0x103
    bd08:	6008      	str	r0, [r1, #0]
    bd0a:	1f08      	subs	r0, r1, #4
    bd0c:	6006      	str	r6, [r0, #0]
    bd0e:	2001      	movs	r0, #1
    bd10:	f000 fc68 	bl	c5e4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    bd14:	4917      	ldr	r1, [pc, #92]	; (bd74 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    bd16:	f240 1001 	movw	r0, #257	; 0x101
    bd1a:	31c4      	adds	r1, #196	; 0xc4
    bd1c:	6008      	str	r0, [r1, #0]
    bd1e:	4e16      	ldr	r6, [pc, #88]	; (bd78 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    bd20:	2502      	movs	r5, #2
    bd22:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
    bd26:	4916      	ldr	r1, [pc, #88]	; (bd80 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    bd28:	4814      	ldr	r0, [pc, #80]	; (bd7c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    bd2a:	6008      	str	r0, [r1, #0]
    bd2c:	4815      	ldr	r0, [pc, #84]	; (bd84 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    bd2e:	4f16      	ldr	r7, [pc, #88]	; (bd88 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x110>)
    bd30:	f506 7600 	add.w	r6, r6, #512	; 0x200
    bd34:	8604      	strh	r4, [r0, #48]	; 0x30
    bd36:	3010      	adds	r0, #16
    bd38:	61c4      	str	r4, [r0, #28]
    bd3a:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
    bd3e:	703c      	strb	r4, [r7, #0]
    bd40:	2001      	movs	r0, #1
    bd42:	f004 fc12 	bl	1056a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    bd46:	2010      	movs	r0, #16
    bd48:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
    bd4c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    bd50:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    bd54:	6878      	ldr	r0, [r7, #4]
    bd56:	2800      	cmp	r0, #0
    bd58:	d002      	beq.n	bd60 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>
    bd5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bd5e:	4700      	bx	r0
    bd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd64:	40001ffc 	.word	0x40001ffc
    bd68:	4000173c 	.word	0x4000173c
    bd6c:	80000096 	.word	0x80000096
    bd70:	8900002c 	.word	0x8900002c
    bd74:	4000158c 	.word	0x4000158c
    bd78:	40001000 	.word	0x40001000
    bd7c:	0c0e0000 	.word	0x0c0e0000
    bd80:	4001f508 	.word	0x4001f508
    bd84:	20000f04 	.word	0x20000f04
    bd88:	2000026c 	.word	0x2000026c

0000bd8c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    bd8c:	4901      	ldr	r1, [pc, #4]	; (bd94 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    bd8e:	7508      	strb	r0, [r1, #20]
    bd90:	4770      	bx	lr
    bd92:	0000      	.short	0x0000
    bd94:	20000f14 	.word	0x20000f14

0000bd98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    bd98:	4904      	ldr	r1, [pc, #16]	; (bdac <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x14>)
    bd9a:	6008      	str	r0, [r1, #0]
    bd9c:	4804      	ldr	r0, [pc, #16]	; (bdb0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    bd9e:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    bda2:	f041 0101 	orr.w	r1, r1, #1
    bda6:	7001      	strb	r1, [r0, #0]
    bda8:	f000 ba62 	b.w	c270 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x134>
    bdac:	40001504 	.word	0x40001504
    bdb0:	20000f14 	.word	0x20000f14

0000bdb4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    bdb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bdb8:	4e35      	ldr	r6, [pc, #212]	; (be90 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    bdba:	4607      	mov	r7, r0
    bdbc:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    bdc0:	468a      	mov	sl, r1
    bdc2:	4614      	mov	r4, r2
    bdc4:	6030      	str	r0, [r6, #0]
    bdc6:	4610      	mov	r0, r2
    bdc8:	f000 fc0c 	bl	c5e4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    bdcc:	f000 f9d8 	bl	c180 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    bdd0:	f8df 90c0 	ldr.w	r9, [pc, #192]	; be94 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    bdd4:	4d30      	ldr	r5, [pc, #192]	; (be98 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    bdd6:	f04f 0801 	mov.w	r8, #1
    bdda:	b127      	cbz	r7, bde6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    bddc:	2f01      	cmp	r7, #1
    bdde:	d01d      	beq.n	be1c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    bde0:	f240 7122 	movw	r1, #1826	; 0x722
    bde4:	e04a      	b.n	be7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>
    bde6:	4620      	mov	r0, r4
    bde8:	f000 f9ea 	bl	c1c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    bdec:	4620      	mov	r0, r4
    bdee:	f000 f9ab 	bl	c148 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    bdf2:	2c02      	cmp	r4, #2
    bdf4:	d00f      	beq.n	be16 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    bdf6:	f640 0034 	movw	r0, #2100	; 0x834
    bdfa:	bf00      	nop
    bdfc:	f649 51f8 	movw	r1, #40440	; 0x9df8
    be00:	4401      	add	r1, r0
    be02:	4650      	mov	r0, sl
    be04:	f000 fb92 	bl	c52c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    be08:	4604      	mov	r4, r0
    be0a:	4648      	mov	r0, r9
    be0c:	f000 fb7a 	bl	c504 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>
    be10:	f885 8009 	strb.w	r8, [r5, #9]
    be14:	e014      	b.n	be40 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    be16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    be1a:	e7ef      	b.n	bdfc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    be1c:	f000 f9f8 	bl	c210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    be20:	f000 fb46 	bl	c4b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    be24:	f000 fa70 	bl	c308 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    be28:	f649 71ba 	movw	r1, #40890	; 0x9fba
    be2c:	4650      	mov	r0, sl
    be2e:	f000 fb7d 	bl	c52c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    be32:	4604      	mov	r4, r0
    be34:	4817      	ldr	r0, [pc, #92]	; (be94 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    be36:	1d00      	adds	r0, r0, #4
    be38:	f000 fb64 	bl	c504 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>
    be3c:	2002      	movs	r0, #2
    be3e:	7268      	strb	r0, [r5, #9]
    be40:	4816      	ldr	r0, [pc, #88]	; (be9c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    be42:	6004      	str	r4, [r0, #0]
    be44:	4917      	ldr	r1, [pc, #92]	; (bea4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    be46:	4816      	ldr	r0, [pc, #88]	; (bea0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    be48:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    be4c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    be4e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    be52:	62a8      	str	r0, [r5, #40]	; 0x28
    be54:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    be58:	6030      	str	r0, [r6, #0]
    be5a:	2110      	movs	r1, #16
    be5c:	f8c9 1304 	str.w	r1, [r9, #772]	; 0x304
    be60:	1200      	asrs	r0, r0, #8
    be62:	6030      	str	r0, [r6, #0]
    be64:	f000 fa3c 	bl	c2e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a4>
    be68:	490f      	ldr	r1, [pc, #60]	; (bea8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    be6a:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    be6e:	480b      	ldr	r0, [pc, #44]	; (be9c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    be70:	300c      	adds	r0, #12
    be72:	6800      	ldr	r0, [r0, #0]
    be74:	42a0      	cmp	r0, r4
    be76:	d304      	bcc.n	be82 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xce>
    be78:	f240 7149 	movw	r1, #1865	; 0x749
    be7c:	203e      	movs	r0, #62	; 0x3e
    be7e:	f7f8 fefb 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be82:	4621      	mov	r1, r4
    be84:	4638      	mov	r0, r7
    be86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be8a:	f004 bbac 	b.w	105e6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    be8e:	0000      	.short	0x0000
    be90:	4001f504 	.word	0x4001f504
    be94:	40001000 	.word	0x40001000
    be98:	20000f14 	.word	0x20000f14
    be9c:	40008540 	.word	0x40008540
    bea0:	40008140 	.word	0x40008140
    bea4:	4001f098 	.word	0x4001f098
    bea8:	40008000 	.word	0x40008000

0000beac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    beac:	4b0d      	ldr	r3, [pc, #52]	; (bee4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    beae:	b510      	push	{r4, lr}
    beb0:	71d8      	strb	r0, [r3, #7]
    beb2:	729a      	strb	r2, [r3, #10]
    beb4:	b151      	cbz	r1, becc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    beb6:	2002      	movs	r0, #2
    beb8:	7218      	strb	r0, [r3, #8]
    beba:	2801      	cmp	r0, #1
    bebc:	d008      	beq.n	bed0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    bebe:	2802      	cmp	r0, #2
    bec0:	d00f      	beq.n	bee2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    bec2:	f640 112a 	movw	r1, #2346	; 0x92a
    bec6:	203e      	movs	r0, #62	; 0x3e
    bec8:	f7f8 fed6 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    becc:	2001      	movs	r0, #1
    bece:	e7f3      	b.n	beb8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    bed0:	7a58      	ldrb	r0, [r3, #9]
    bed2:	2802      	cmp	r0, #2
    bed4:	d105      	bne.n	bee2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    bed6:	f000 f99b 	bl	c210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    beda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bede:	f000 bae7 	b.w	c4b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    bee2:	bd10      	pop	{r4, pc}
    bee4:	20000f14 	.word	0x20000f14

0000bee8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    bee8:	4901      	ldr	r1, [pc, #4]	; (bef0 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0x8>)
    beea:	2000      	movs	r0, #0
    beec:	6008      	str	r0, [r1, #0]
    beee:	4770      	bx	lr
    bef0:	40008540 	.word	0x40008540

0000bef4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    bef4:	490a      	ldr	r1, [pc, #40]	; (bf20 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2c>)
    bef6:	b508      	push	{r3, lr}
    bef8:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    befc:	2a01      	cmp	r2, #1
    befe:	d001      	beq.n	bf04 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>
    bf00:	2000      	movs	r0, #0
    bf02:	bd08      	pop	{r3, pc}
    bf04:	4a07      	ldr	r2, [pc, #28]	; (bf24 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    bf06:	6812      	ldr	r2, [r2, #0]
    bf08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    bf0c:	4252      	negs	r2, r2
    bf0e:	7002      	strb	r2, [r0, #0]
    bf10:	2000      	movs	r0, #0
    bf12:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    bf16:	4804      	ldr	r0, [pc, #16]	; (bf28 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    bf18:	6800      	ldr	r0, [r0, #0]
    bf1a:	9000      	str	r0, [sp, #0]
    bf1c:	2001      	movs	r0, #1
    bf1e:	bd08      	pop	{r3, pc}
    bf20:	40001000 	.word	0x40001000
    bf24:	40001548 	.word	0x40001548
    bf28:	4000111c 	.word	0x4000111c

0000bf2c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    bf2c:	4a03      	ldr	r2, [pc, #12]	; (bf3c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    bf2e:	0e01      	lsrs	r1, r0, #24
    bf30:	6011      	str	r1, [r2, #0]
    bf32:	4902      	ldr	r1, [pc, #8]	; (bf3c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    bf34:	0200      	lsls	r0, r0, #8
    bf36:	3908      	subs	r1, #8
    bf38:	6008      	str	r0, [r1, #0]
    bf3a:	4770      	bx	lr
    bf3c:	40001524 	.word	0x40001524

0000bf40 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    bf40:	6800      	ldr	r0, [r0, #0]
    bf42:	4902      	ldr	r1, [pc, #8]	; (bf4c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    bf44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bf48:	6008      	str	r0, [r1, #0]
    bf4a:	4770      	bx	lr
    bf4c:	4000153c 	.word	0x4000153c

0000bf50 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    bf50:	b510      	push	{r4, lr}
    bf52:	f000 fb23 	bl	c59c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    bf56:	4806      	ldr	r0, [pc, #24]	; (bf70 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>)
    bf58:	6800      	ldr	r0, [r0, #0]
    bf5a:	2803      	cmp	r0, #3
    bf5c:	d001      	beq.n	bf62 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x12>
    bf5e:	280b      	cmp	r0, #11
    bf60:	d104      	bne.n	bf6c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    bf62:	f240 218a 	movw	r1, #650	; 0x28a
    bf66:	203e      	movs	r0, #62	; 0x3e
    bf68:	f7f8 fe86 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf6c:	bd10      	pop	{r4, pc}
    bf6e:	0000      	.short	0x0000
    bf70:	40001550 	.word	0x40001550

0000bf74 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    bf74:	4901      	ldr	r1, [pc, #4]	; (bf7c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    bf76:	7548      	strb	r0, [r1, #21]
    bf78:	4770      	bx	lr
    bf7a:	0000      	.short	0x0000
    bf7c:	20000f14 	.word	0x20000f14

0000bf80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    bf80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bf84:	4d51      	ldr	r5, [pc, #324]	; (c0cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    bf86:	2701      	movs	r7, #1
    bf88:	64ef      	str	r7, [r5, #76]	; 0x4c
    bf8a:	4851      	ldr	r0, [pc, #324]	; (c0d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    bf8c:	f8d0 9000 	ldr.w	r9, [r0]
    bf90:	4850      	ldr	r0, [pc, #320]	; (c0d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bf92:	6800      	ldr	r0, [r0, #0]
    bf94:	4c50      	ldr	r4, [pc, #320]	; (c0d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    bf96:	e9c4 090c 	strd	r0, r9, [r4, #48]	; 0x30
    bf9a:	f000 f943 	bl	c224 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe8>
    bf9e:	494f      	ldr	r1, [pc, #316]	; (c0dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    bfa0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    bfa2:	6008      	str	r0, [r1, #0]
    bfa4:	f8df a138 	ldr.w	sl, [pc, #312]	; c0e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    bfa8:	2600      	movs	r6, #0
    bfaa:	62a6      	str	r6, [r4, #40]	; 0x28
    bfac:	f8da 1200 	ldr.w	r1, [sl, #512]	; 0x200
    bfb0:	f240 121d 	movw	r2, #285	; 0x11d
    bfb4:	4391      	bics	r1, r2
    bfb6:	f8ca 1200 	str.w	r1, [sl, #512]	; 0x200
    bfba:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    bfbe:	f8da 010c 	ldr.w	r0, [sl, #268]	; 0x10c
    bfc2:	b900      	cbnz	r0, bfc6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46>
    bfc4:	64af      	str	r7, [r5, #72]	; 0x48
    bfc6:	f000 f9b1 	bl	c32c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    bfca:	4605      	mov	r5, r0
    bfcc:	4840      	ldr	r0, [pc, #256]	; (c0d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    bfce:	1f00      	subs	r0, r0, #4
    bfd0:	6800      	ldr	r0, [r0, #0]
    bfd2:	61e0      	str	r0, [r4, #28]
    bfd4:	f7ff fdf0 	bl	bbb8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    bfd8:	f884 0020 	strb.w	r0, [r4, #32]
    bfdc:	7a60      	ldrb	r0, [r4, #9]
    bfde:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    bfe2:	61a6      	str	r6, [r4, #24]
    bfe4:	4e3f      	ldr	r6, [pc, #252]	; (c0e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    bfe6:	07a8      	lsls	r0, r5, #30
    bfe8:	d501      	bpl.n	bfee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6e>
    bfea:	6830      	ldr	r0, [r6, #0]
    bfec:	61a0      	str	r0, [r4, #24]
    bfee:	0728      	lsls	r0, r5, #28
    bff0:	d501      	bpl.n	bff6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x76>
    bff2:	6830      	ldr	r0, [r6, #0]
    bff4:	61a0      	str	r0, [r4, #24]
    bff6:	f04f 0800 	mov.w	r8, #0
    bffa:	4649      	mov	r1, r9
    bffc:	4628      	mov	r0, r5
    bffe:	f000 fa1d 	bl	c43c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    c002:	b918      	cbnz	r0, c00c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    c004:	f8ca 7010 	str.w	r7, [sl, #16]
    c008:	f04f 0801 	mov.w	r8, #1
    c00c:	4f32      	ldr	r7, [pc, #200]	; (c0d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    c00e:	07e8      	lsls	r0, r5, #31
    c010:	f1a7 0710 	sub.w	r7, r7, #16
    c014:	d002      	beq.n	c01c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x9c>
    c016:	6838      	ldr	r0, [r7, #0]
    c018:	4780      	blx	r0
    c01a:	e031      	b.n	c080 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    c01c:	07a8      	lsls	r0, r5, #30
    c01e:	d526      	bpl.n	c06e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xee>
    c020:	0768      	lsls	r0, r5, #29
    c022:	d41e      	bmi.n	c062 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    c024:	f000 fc48 	bl	c8b8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c028:	b9d8      	cbnz	r0, c062 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    c02a:	f000 fc35 	bl	c898 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c02e:	b9c0      	cbnz	r0, c062 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    c030:	482d      	ldr	r0, [pc, #180]	; (c0e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    c032:	6800      	ldr	r0, [r0, #0]
    c034:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    c038:	f3c0 6300 	ubfx	r3, r0, #24, #1
    c03c:	f000 020f 	and.w	r2, r0, #15
    c040:	f3c0 1103 	ubfx	r1, r0, #4, #4
    c044:	f3c0 2003 	ubfx	r0, r0, #8, #4
    c048:	b15b      	cbz	r3, c062 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    c04a:	b10a      	cbz	r2, c050 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd0>
    c04c:	b101      	cbz	r1, c050 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd0>
    c04e:	b940      	cbnz	r0, c062 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    c050:	4825      	ldr	r0, [pc, #148]	; (c0e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    c052:	1d00      	adds	r0, r0, #4
    c054:	6800      	ldr	r0, [r0, #0]
    c056:	b120      	cbz	r0, c062 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    c058:	f1bc 0f03 	cmp.w	ip, #3
    c05c:	d201      	bcs.n	c062 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    c05e:	f045 0504 	orr.w	r5, r5, #4
    c062:	f345 0080 	sbfx	r0, r5, #2, #1
    c066:	4641      	mov	r1, r8
    c068:	1c40      	adds	r0, r0, #1
    c06a:	687a      	ldr	r2, [r7, #4]
    c06c:	e007      	b.n	c07e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfe>
    c06e:	f015 0f28 	tst.w	r5, #40	; 0x28
    c072:	d005      	beq.n	c080 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    c074:	f345 1140 	sbfx	r1, r5, #5, #1
    c078:	68ba      	ldr	r2, [r7, #8]
    c07a:	4640      	mov	r0, r8
    c07c:	1c49      	adds	r1, r1, #1
    c07e:	4790      	blx	r2
    c080:	06e8      	lsls	r0, r5, #27
    c082:	d501      	bpl.n	c088 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    c084:	68f8      	ldr	r0, [r7, #12]
    c086:	4780      	blx	r0
    c088:	7a60      	ldrb	r0, [r4, #9]
    c08a:	2802      	cmp	r0, #2
    c08c:	d11b      	bne.n	c0c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    c08e:	7b20      	ldrb	r0, [r4, #12]
    c090:	2800      	cmp	r0, #0
    c092:	d018      	beq.n	c0c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    c094:	2802      	cmp	r0, #2
    c096:	d004      	beq.n	c0a2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x122>
    c098:	2801      	cmp	r0, #1
    c09a:	d006      	beq.n	c0aa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    c09c:	f640 3103 	movw	r1, #2819	; 0xb03
    c0a0:	e009      	b.n	c0b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x136>
    c0a2:	6921      	ldr	r1, [r4, #16]
    c0a4:	69e0      	ldr	r0, [r4, #28]
    c0a6:	4408      	add	r0, r1
    c0a8:	e008      	b.n	c0bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    c0aa:	69e1      	ldr	r1, [r4, #28]
    c0ac:	6920      	ldr	r0, [r4, #16]
    c0ae:	4288      	cmp	r0, r1
    c0b0:	d804      	bhi.n	c0bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    c0b2:	f640 3104 	movw	r1, #2820	; 0xb04
    c0b6:	203e      	movs	r0, #62	; 0x3e
    c0b8:	f7f8 fdde 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c0bc:	6030      	str	r0, [r6, #0]
    c0be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c0c2:	f000 ba03 	b.w	c4cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>
    c0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c0ca:	0000      	.short	0x0000
    c0cc:	40008000 	.word	0x40008000
    c0d0:	4000854c 	.word	0x4000854c
    c0d4:	4000b504 	.word	0x4000b504
    c0d8:	20000f14 	.word	0x20000f14
    c0dc:	4001f508 	.word	0x4001f508
    c0e0:	40001000 	.word	0x40001000
    c0e4:	40008544 	.word	0x40008544
    c0e8:	40001450 	.word	0x40001450

0000c0ec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    c0ec:	b570      	push	{r4, r5, r6, lr}
    c0ee:	4b11      	ldr	r3, [pc, #68]	; (c134 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48>)
    c0f0:	888c      	ldrh	r4, [r1, #4]
    c0f2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    c0f6:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
    c0fa:	780c      	ldrb	r4, [r1, #0]
    c0fc:	f8d1 1001 	ldr.w	r1, [r1, #1]
    c100:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    c104:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    c108:	4d0b      	ldr	r5, [pc, #44]	; (c138 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c>)
    c10a:	6829      	ldr	r1, [r5, #0]
    c10c:	f100 0608 	add.w	r6, r0, #8
    c110:	2401      	movs	r4, #1
    c112:	fa04 f306 	lsl.w	r3, r4, r6
    c116:	b132      	cbz	r2, c126 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    c118:	2a01      	cmp	r2, #1
    c11a:	d006      	beq.n	c12a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e>
    c11c:	f240 41c1 	movw	r1, #1217	; 0x4c1
    c120:	203e      	movs	r0, #62	; 0x3e
    c122:	f7f8 fda9 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c126:	4399      	bics	r1, r3
    c128:	e000      	b.n	c12c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x40>
    c12a:	4319      	orrs	r1, r3
    c12c:	4084      	lsls	r4, r0
    c12e:	430c      	orrs	r4, r1
    c130:	602c      	str	r4, [r5, #0]
    c132:	bd70      	pop	{r4, r5, r6, pc}
    c134:	40001000 	.word	0x40001000
    c138:	40001640 	.word	0x40001640

0000c13c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    c13c:	4901      	ldr	r1, [pc, #4]	; (c144 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    c13e:	2001      	movs	r0, #1
    c140:	7008      	strb	r0, [r1, #0]
    c142:	4770      	bx	lr
    c144:	2000026c 	.word	0x2000026c
    c148:	b510      	push	{r4, lr}
    c14a:	4604      	mov	r4, r0
    c14c:	f000 fbb4 	bl	c8b8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c150:	2800      	cmp	r0, #0
    c152:	d00e      	beq.n	c172 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    c154:	4a09      	ldr	r2, [pc, #36]	; (c17c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    c156:	6811      	ldr	r1, [r2, #0]
    c158:	0650      	lsls	r0, r2, #25
    c15a:	2c02      	cmp	r4, #2
    c15c:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    c160:	d008      	beq.n	c174 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    c162:	f3c0 2006 	ubfx	r0, r0, #8, #7
    c166:	bf00      	nop
    c168:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    c16c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    c170:	6010      	str	r0, [r2, #0]
    c172:	bd10      	pop	{r4, pc}
    c174:	f3c0 6006 	ubfx	r0, r0, #24, #7
    c178:	e7f6      	b.n	c168 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    c17a:	0000      	.short	0x0000
    c17c:	40001588 	.word	0x40001588
    c180:	480d      	ldr	r0, [pc, #52]	; (c1b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>)
    c182:	7d40      	ldrb	r0, [r0, #21]
    c184:	2825      	cmp	r0, #37	; 0x25
    c186:	d007      	beq.n	c198 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x5c>
    c188:	2826      	cmp	r0, #38	; 0x26
    c18a:	d007      	beq.n	c19c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x60>
    c18c:	2827      	cmp	r0, #39	; 0x27
    c18e:	d007      	beq.n	c1a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x64>
    c190:	280a      	cmp	r0, #10
    c192:	d807      	bhi.n	c1a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    c194:	2204      	movs	r2, #4
    c196:	e006      	b.n	c1a6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6a>
    c198:	2102      	movs	r1, #2
    c19a:	e007      	b.n	c1ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    c19c:	211a      	movs	r1, #26
    c19e:	e005      	b.n	c1ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    c1a0:	2150      	movs	r1, #80	; 0x50
    c1a2:	e003      	b.n	c1ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    c1a4:	2206      	movs	r2, #6
    c1a6:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    c1aa:	b2c9      	uxtb	r1, r1
    c1ac:	4a03      	ldr	r2, [pc, #12]	; (c1bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>)
    c1ae:	6011      	str	r1, [r2, #0]
    c1b0:	4902      	ldr	r1, [pc, #8]	; (c1bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>)
    c1b2:	314c      	adds	r1, #76	; 0x4c
    c1b4:	6008      	str	r0, [r1, #0]
    c1b6:	4770      	bx	lr
    c1b8:	20000f14 	.word	0x20000f14
    c1bc:	40001508 	.word	0x40001508
    c1c0:	4912      	ldr	r1, [pc, #72]	; (c20c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>)
    c1c2:	b508      	push	{r3, lr}
    c1c4:	f991 2014 	ldrsb.w	r2, [r1, #20]
    c1c8:	7d49      	ldrb	r1, [r1, #21]
    c1ca:	2801      	cmp	r0, #1
    c1cc:	d00a      	beq.n	c1e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa8>
    c1ce:	2802      	cmp	r0, #2
    c1d0:	d00a      	beq.n	c1e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xac>
    c1d2:	2804      	cmp	r0, #4
    c1d4:	d00a      	beq.n	c1ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb0>
    c1d6:	2808      	cmp	r0, #8
    c1d8:	d00a      	beq.n	c1f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    c1da:	f240 31da 	movw	r1, #986	; 0x3da
    c1de:	2006      	movs	r0, #6
    c1e0:	f7f8 fd4a 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1e4:	2000      	movs	r0, #0
    c1e6:	e004      	b.n	c1f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    c1e8:	2001      	movs	r0, #1
    c1ea:	e002      	b.n	c1f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    c1ec:	2003      	movs	r0, #3
    c1ee:	e000      	b.n	c1f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    c1f0:	2002      	movs	r0, #2
    c1f2:	466b      	mov	r3, sp
    c1f4:	f7f5 f8fe 	bl	13f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    c1f8:	b118      	cbz	r0, c202 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    c1fa:	f240 41f3 	movw	r1, #1267	; 0x4f3
    c1fe:	203e      	movs	r0, #62	; 0x3e
    c200:	e7ee      	b.n	c1e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    c202:	f99d 0000 	ldrsb.w	r0, [sp]
    c206:	f000 f9e7 	bl	c5d8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    c20a:	bd08      	pop	{r3, pc}
    c20c:	20000f14 	.word	0x20000f14
    c210:	4803      	ldr	r0, [pc, #12]	; (c220 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe4>)
    c212:	7a01      	ldrb	r1, [r0, #8]
    c214:	2901      	cmp	r1, #1
    c216:	d102      	bne.n	c21e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe2>
    c218:	7a80      	ldrb	r0, [r0, #10]
    c21a:	f7ff bfd1 	b.w	c1c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    c21e:	4770      	bx	lr
    c220:	20000f14 	.word	0x20000f14
    c224:	4805      	ldr	r0, [pc, #20]	; (c23c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x100>)
    c226:	7a40      	ldrb	r0, [r0, #9]
    c228:	2801      	cmp	r0, #1
    c22a:	d003      	beq.n	c234 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf8>
    c22c:	2802      	cmp	r0, #2
    c22e:	d103      	bne.n	c238 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xfc>
    c230:	f004 b957 	b.w	104e2 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    c234:	f004 b961 	b.w	104fa <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    c238:	4770      	bx	lr
    c23a:	0000      	.short	0x0000
    c23c:	20000f14 	.word	0x20000f14
    c240:	4809      	ldr	r0, [pc, #36]	; (c268 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12c>)
    c242:	b508      	push	{r3, lr}
    c244:	2100      	movs	r1, #0
    c246:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c24a:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    c24e:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    c252:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    c256:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    c25a:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    c25e:	4803      	ldr	r0, [pc, #12]	; (c26c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x130>)
    c260:	6800      	ldr	r0, [r0, #0]
    c262:	9000      	str	r0, [sp, #0]
    c264:	bd08      	pop	{r3, pc}
    c266:	0000      	.short	0x0000
    c268:	40001000 	.word	0x40001000
    c26c:	40001118 	.word	0x40001118
    c270:	4816      	ldr	r0, [pc, #88]	; (c2cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>)
    c272:	b510      	push	{r4, lr}
    c274:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    c278:	07c1      	lsls	r1, r0, #31
    c27a:	d026      	beq.n	c2ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    c27c:	0781      	lsls	r1, r0, #30
    c27e:	d513      	bpl.n	c2a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x16c>
    c280:	4813      	ldr	r0, [pc, #76]	; (c2d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x194>)
    c282:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c286:	f041 0101 	orr.w	r1, r1, #1
    c28a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c28e:	4811      	ldr	r0, [pc, #68]	; (c2d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x198>)
    c290:	6800      	ldr	r0, [r0, #0]
    c292:	280b      	cmp	r0, #11
    c294:	d005      	beq.n	c2a2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    c296:	280a      	cmp	r0, #10
    c298:	d003      	beq.n	c2a2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    c29a:	2803      	cmp	r0, #3
    c29c:	d001      	beq.n	c2a2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    c29e:	2802      	cmp	r0, #2
    c2a0:	d113      	bne.n	c2ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    c2a2:	f240 5123 	movw	r1, #1315	; 0x523
    c2a6:	e00d      	b.n	c2c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    c2a8:	0740      	lsls	r0, r0, #29
    c2aa:	d50e      	bpl.n	c2ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    c2ac:	4808      	ldr	r0, [pc, #32]	; (c2d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x194>)
    c2ae:	490a      	ldr	r1, [pc, #40]	; (c2d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x19c>)
    c2b0:	3008      	adds	r0, #8
    c2b2:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c2b6:	4809      	ldr	r0, [pc, #36]	; (c2dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a0>)
    c2b8:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    c2bc:	2801      	cmp	r0, #1
    c2be:	d104      	bne.n	c2ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    c2c0:	f240 512a 	movw	r1, #1322	; 0x52a
    c2c4:	203e      	movs	r0, #62	; 0x3e
    c2c6:	f7f8 fcd7 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2ca:	bd10      	pop	{r4, pc}
    c2cc:	20000f14 	.word	0x20000f14
    c2d0:	40001000 	.word	0x40001000
    c2d4:	40001550 	.word	0x40001550
    c2d8:	4001f098 	.word	0x4001f098
    c2dc:	40008000 	.word	0x40008000
    c2e0:	4808      	ldr	r0, [pc, #32]	; (c304 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c8>)
    c2e2:	4601      	mov	r1, r0
    c2e4:	79c2      	ldrb	r2, [r0, #7]
    c2e6:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    c2ea:	b112      	cbz	r2, c2f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b6>
    c2ec:	2a01      	cmp	r2, #1
    c2ee:	d003      	beq.n	c2f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    c2f0:	e006      	b.n	c300 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c4>
    c2f2:	f041 0102 	orr.w	r1, r1, #2
    c2f6:	e001      	b.n	c2fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    c2f8:	f041 0104 	orr.w	r1, r1, #4
    c2fc:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    c300:	f7ff bfb6 	b.w	c270 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x134>
    c304:	20000f14 	.word	0x20000f14
    c308:	b510      	push	{r4, lr}
    c30a:	f000 fad5 	bl	c8b8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c30e:	2800      	cmp	r0, #0
    c310:	d108      	bne.n	c324 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    c312:	f000 fac1 	bl	c898 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c316:	2800      	cmp	r0, #0
    c318:	d104      	bne.n	c324 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    c31a:	4803      	ldr	r0, [pc, #12]	; (c328 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ec>)
    c31c:	6801      	ldr	r1, [r0, #0]
    c31e:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    c322:	6001      	str	r1, [r0, #0]
    c324:	bd10      	pop	{r4, pc}
    c326:	0000      	.short	0x0000
    c328:	40001568 	.word	0x40001568
    c32c:	b538      	push	{r3, r4, r5, lr}
    c32e:	4d32      	ldr	r5, [pc, #200]	; (c3f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2bc>)
    c330:	2400      	movs	r4, #0
    c332:	7b28      	ldrb	r0, [r5, #12]
    c334:	b120      	cbz	r0, c340 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    c336:	4831      	ldr	r0, [pc, #196]	; (c3fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c0>)
    c338:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
    c33c:	2801      	cmp	r0, #1
    c33e:	d007      	beq.n	c350 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x214>
    c340:	2200      	movs	r2, #0
    c342:	7a69      	ldrb	r1, [r5, #9]
    c344:	482e      	ldr	r0, [pc, #184]	; (c400 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>)
    c346:	2901      	cmp	r1, #1
    c348:	d004      	beq.n	c354 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x218>
    c34a:	2902      	cmp	r1, #2
    c34c:	d00a      	beq.n	c364 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x228>
    c34e:	e019      	b.n	c384 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    c350:	2201      	movs	r2, #1
    c352:	e7f6      	b.n	c342 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x206>
    c354:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    c358:	2901      	cmp	r1, #1
    c35a:	d001      	beq.n	c360 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c35c:	2400      	movs	r4, #0
    c35e:	e011      	b.n	c384 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    c360:	2408      	movs	r4, #8
    c362:	e00f      	b.n	c384 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    c364:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    c368:	2901      	cmp	r1, #1
    c36a:	d006      	beq.n	c37a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    c36c:	2100      	movs	r1, #0
    c36e:	4b25      	ldr	r3, [pc, #148]	; (c404 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>)
    c370:	681b      	ldr	r3, [r3, #0]
    c372:	2b01      	cmp	r3, #1
    c374:	d003      	beq.n	c37e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x242>
    c376:	2404      	movs	r4, #4
    c378:	e002      	b.n	c380 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    c37a:	2102      	movs	r1, #2
    c37c:	e7f7      	b.n	c36e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x232>
    c37e:	2400      	movs	r4, #0
    c380:	430c      	orrs	r4, r1
    c382:	4314      	orrs	r4, r2
    c384:	f014 0f0b 	tst.w	r4, #11
    c388:	d105      	bne.n	c396 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x25a>
    c38a:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    c38e:	2901      	cmp	r1, #1
    c390:	d029      	beq.n	c3e6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2aa>
    c392:	2100      	movs	r1, #0
    c394:	430c      	orrs	r4, r1
    c396:	491c      	ldr	r1, [pc, #112]	; (c408 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>)
    c398:	7809      	ldrb	r1, [r1, #0]
    c39a:	b1d1      	cbz	r1, c3d2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x296>
    c39c:	491b      	ldr	r1, [pc, #108]	; (c40c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>)
    c39e:	6809      	ldr	r1, [r1, #0]
    c3a0:	f011 0fff 	tst.w	r1, #255	; 0xff
    c3a4:	d003      	beq.n	c3ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x272>
    c3a6:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    c3aa:	2a01      	cmp	r2, #1
    c3ac:	d000      	beq.n	c3b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>
    c3ae:	2200      	movs	r2, #0
    c3b0:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
    c3b4:	f011 0fff 	tst.w	r1, #255	; 0xff
    c3b8:	d003      	beq.n	c3c2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x286>
    c3ba:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    c3be:	2801      	cmp	r0, #1
    c3c0:	d000      	beq.n	c3c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x288>
    c3c2:	2000      	movs	r0, #0
    c3c4:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    c3c8:	480e      	ldr	r0, [pc, #56]	; (c404 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>)
    c3ca:	3010      	adds	r0, #16
    c3cc:	6800      	ldr	r0, [r0, #0]
    c3ce:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    c3d2:	f7ff ff35 	bl	c240 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>
    c3d6:	06e0      	lsls	r0, r4, #27
    c3d8:	d509      	bpl.n	c3ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    c3da:	0720      	lsls	r0, r4, #28
    c3dc:	d407      	bmi.n	c3ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    c3de:	7a68      	ldrb	r0, [r5, #9]
    c3e0:	2801      	cmp	r0, #1
    c3e2:	d002      	beq.n	c3ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ae>
    c3e4:	e003      	b.n	c3ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    c3e6:	2110      	movs	r1, #16
    c3e8:	e7d4      	b.n	c394 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x258>
    c3ea:	f044 0420 	orr.w	r4, r4, #32
    c3ee:	4808      	ldr	r0, [pc, #32]	; (c410 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d4>)
    c3f0:	6800      	ldr	r0, [r0, #0]
    c3f2:	9000      	str	r0, [sp, #0]
    c3f4:	4620      	mov	r0, r4
    c3f6:	bd38      	pop	{r3, r4, r5, pc}
    c3f8:	20000f14 	.word	0x20000f14
    c3fc:	40008000 	.word	0x40008000
    c400:	40001000 	.word	0x40001000
    c404:	40001400 	.word	0x40001400
    c408:	2000026c 	.word	0x2000026c
    c40c:	40001640 	.word	0x40001640
    c410:	40008144 	.word	0x40008144
    c414:	4808      	ldr	r0, [pc, #32]	; (c438 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2fc>)
    c416:	b510      	push	{r4, lr}
    c418:	6800      	ldr	r0, [r0, #0]
    c41a:	f000 000f 	and.w	r0, r0, #15
    c41e:	2803      	cmp	r0, #3
    c420:	d006      	beq.n	c430 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    c422:	2804      	cmp	r0, #4
    c424:	d006      	beq.n	c434 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f8>
    c426:	f240 2112 	movw	r1, #530	; 0x212
    c42a:	203e      	movs	r0, #62	; 0x3e
    c42c:	f7f8 fc24 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c430:	2001      	movs	r0, #1
    c432:	bd10      	pop	{r4, pc}
    c434:	2002      	movs	r0, #2
    c436:	bd10      	pop	{r4, pc}
    c438:	40001510 	.word	0x40001510
    c43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c440:	4c19      	ldr	r4, [pc, #100]	; (c4a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36c>)
    c442:	460d      	mov	r5, r1
    c444:	7a21      	ldrb	r1, [r4, #8]
    c446:	b129      	cbz	r1, c454 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>
    c448:	f010 0f11 	tst.w	r0, #17
    c44c:	d00b      	beq.n	c466 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x32a>
    c44e:	f7ff fa09 	bl	b864 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c452:	e027      	b.n	c4a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    c454:	4915      	ldr	r1, [pc, #84]	; (c4ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x370>)
    c456:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c45a:	6008      	str	r0, [r1, #0]
    c45c:	f000 f85e 	bl	c51c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    c460:	2000      	movs	r0, #0
    c462:	7320      	strb	r0, [r4, #12]
    c464:	e01e      	b.n	c4a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    c466:	2901      	cmp	r1, #1
    c468:	d001      	beq.n	c46e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x332>
    c46a:	2601      	movs	r6, #1
    c46c:	e000      	b.n	c470 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    c46e:	2600      	movs	r6, #0
    c470:	79e0      	ldrb	r0, [r4, #7]
    c472:	2801      	cmp	r0, #1
    c474:	d00e      	beq.n	c494 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    c476:	2700      	movs	r7, #0
    c478:	f000 f850 	bl	c51c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    c47c:	2196      	movs	r1, #150	; 0x96
    c47e:	4630      	mov	r0, r6
    c480:	f000 f862 	bl	c548 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40c>
    c484:	4601      	mov	r1, r0
    c486:	b14f      	cbz	r7, c49c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x360>
    c488:	353b      	adds	r5, #59	; 0x3b
    c48a:	428d      	cmp	r5, r1
    c48c:	d904      	bls.n	c498 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    c48e:	2000      	movs	r0, #0
    c490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c494:	2701      	movs	r7, #1
    c496:	e7ef      	b.n	c478 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>
    c498:	2001      	movs	r0, #1
    c49a:	71e0      	strb	r0, [r4, #7]
    c49c:	7aa2      	ldrb	r2, [r4, #10]
    c49e:	4630      	mov	r0, r6
    c4a0:	f7ff fc88 	bl	bdb4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c4a4:	2001      	movs	r0, #1
    c4a6:	e7f3      	b.n	c490 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    c4a8:	20000f14 	.word	0x20000f14
    c4ac:	4001f508 	.word	0x4001f508
    c4b0:	4805      	ldr	r0, [pc, #20]	; (c4c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    c4b2:	2100      	movs	r1, #0
    c4b4:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    c4b8:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c4bc:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c4c0:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c4c4:	4770      	bx	lr
    c4c6:	0000      	.short	0x0000
    c4c8:	40001000 	.word	0x40001000
    c4cc:	4804      	ldr	r0, [pc, #16]	; (c4e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    c4ce:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c4d0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c4d4:	6281      	str	r1, [r0, #40]	; 0x28
    c4d6:	4903      	ldr	r1, [pc, #12]	; (c4e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>)
    c4d8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c4dc:	6008      	str	r0, [r1, #0]
    c4de:	4770      	bx	lr
    c4e0:	20000f14 	.word	0x20000f14
    c4e4:	4001f504 	.word	0x4001f504
    c4e8:	4905      	ldr	r1, [pc, #20]	; (c500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    c4ea:	2000      	movs	r0, #0
    c4ec:	6008      	str	r0, [r1, #0]
    c4ee:	1f09      	subs	r1, r1, #4
    c4f0:	6008      	str	r0, [r1, #0]
    c4f2:	1f09      	subs	r1, r1, #4
    c4f4:	6008      	str	r0, [r1, #0]
    c4f6:	4902      	ldr	r1, [pc, #8]	; (c500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    c4f8:	1d09      	adds	r1, r1, #4
    c4fa:	6008      	str	r0, [r1, #0]
    c4fc:	4770      	bx	lr
    c4fe:	0000      	.short	0x0000
    c500:	40008548 	.word	0x40008548
    c504:	4903      	ldr	r1, [pc, #12]	; (c514 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d8>)
    c506:	79c9      	ldrb	r1, [r1, #7]
    c508:	2900      	cmp	r1, #0
    c50a:	d102      	bne.n	c512 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d6>
    c50c:	4902      	ldr	r1, [pc, #8]	; (c518 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    c50e:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c512:	4770      	bx	lr
    c514:	20000f14 	.word	0x20000f14
    c518:	4001f098 	.word	0x4001f098
    c51c:	4802      	ldr	r0, [pc, #8]	; (c528 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c51e:	2100      	movs	r1, #0
    c520:	71c1      	strb	r1, [r0, #7]
    c522:	7201      	strb	r1, [r0, #8]
    c524:	7241      	strb	r1, [r0, #9]
    c526:	4770      	bx	lr
    c528:	20000f14 	.word	0x20000f14
    c52c:	4a05      	ldr	r2, [pc, #20]	; (c544 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>)
    c52e:	79d2      	ldrb	r2, [r2, #7]
    c530:	2a01      	cmp	r2, #1
    c532:	d006      	beq.n	c542 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    c534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c538:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    c53c:	fbb1 f1f2 	udiv	r1, r1, r2
    c540:	1a40      	subs	r0, r0, r1
    c542:	4770      	bx	lr
    c544:	20000f14 	.word	0x20000f14
    c548:	b570      	push	{r4, r5, r6, lr}
    c54a:	4c13      	ldr	r4, [pc, #76]	; (c598 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>)
    c54c:	4603      	mov	r3, r0
    c54e:	460d      	mov	r5, r1
    c550:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    c554:	2000      	movs	r0, #0
    c556:	b15a      	cbz	r2, c570 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    c558:	4621      	mov	r1, r4
    c55a:	f891 1020 	ldrb.w	r1, [r1, #32]
    c55e:	b163      	cbz	r3, c57a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x43e>
    c560:	2b01      	cmp	r3, #1
    c562:	d111      	bne.n	c588 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44c>
    c564:	2a01      	cmp	r2, #1
    c566:	4628      	mov	r0, r5
    c568:	d012      	beq.n	c590 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    c56a:	f004 f894 	bl	10696 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c56e:	e009      	b.n	c584 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c570:	f240 7166 	movw	r1, #1894	; 0x766
    c574:	203e      	movs	r0, #62	; 0x3e
    c576:	f7f8 fb7f 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c57a:	2a01      	cmp	r2, #1
    c57c:	4628      	mov	r0, r5
    c57e:	d004      	beq.n	c58a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44e>
    c580:	f004 f897 	bl	106b2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c584:	69e1      	ldr	r1, [r4, #28]
    c586:	4408      	add	r0, r1
    c588:	bd70      	pop	{r4, r5, r6, pc}
    c58a:	f004 f8ac 	bl	106e6 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c58e:	e7f9      	b.n	c584 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c590:	f004 f89a 	bl	106c8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c594:	e7f6      	b.n	c584 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    c596:	0000      	.short	0x0000
    c598:	20000f14 	.word	0x20000f14
    c59c:	b510      	push	{r4, lr}
    c59e:	2200      	movs	r2, #0
    c5a0:	2901      	cmp	r1, #1
    c5a2:	d008      	beq.n	c5b6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47a>
    c5a4:	2902      	cmp	r1, #2
    c5a6:	d004      	beq.n	c5b2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    c5a8:	f240 2169 	movw	r1, #617	; 0x269
    c5ac:	203e      	movs	r0, #62	; 0x3e
    c5ae:	f7f8 fb63 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c5b6:	4905      	ldr	r1, [pc, #20]	; (c5cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x490>)
    c5b8:	430a      	orrs	r2, r1
    c5ba:	4905      	ldr	r1, [pc, #20]	; (c5d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>)
    c5bc:	600a      	str	r2, [r1, #0]
    c5be:	4905      	ldr	r1, [pc, #20]	; (c5d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x498>)
    c5c0:	4308      	orrs	r0, r1
    c5c2:	4903      	ldr	r1, [pc, #12]	; (c5d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>)
    c5c4:	1d09      	adds	r1, r1, #4
    c5c6:	6008      	str	r0, [r1, #0]
    c5c8:	bd10      	pop	{r4, pc}
    c5ca:	0000      	.short	0x0000
    c5cc:	00100108 	.word	0x00100108
    c5d0:	40001514 	.word	0x40001514
    c5d4:	02030000 	.word	0x02030000

0000c5d8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    c5d8:	4901      	ldr	r1, [pc, #4]	; (c5e0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    c5da:	b2c0      	uxtb	r0, r0
    c5dc:	6008      	str	r0, [r1, #0]
    c5de:	4770      	bx	lr
    c5e0:	4000150c 	.word	0x4000150c

0000c5e4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    c5e4:	b510      	push	{r4, lr}
    c5e6:	4907      	ldr	r1, [pc, #28]	; (c604 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    c5e8:	2801      	cmp	r0, #1
    c5ea:	d005      	beq.n	c5f8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    c5ec:	2802      	cmp	r0, #2
    c5ee:	d005      	beq.n	c5fc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    c5f0:	218b      	movs	r1, #139	; 0x8b
    c5f2:	203f      	movs	r0, #63	; 0x3f
    c5f4:	f7f8 fb40 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5f8:	2003      	movs	r0, #3
    c5fa:	e000      	b.n	c5fe <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    c5fc:	2004      	movs	r0, #4
    c5fe:	6008      	str	r0, [r1, #0]
    c600:	bd10      	pop	{r4, pc}
    c602:	0000      	.short	0x0000
    c604:	40001510 	.word	0x40001510

0000c608 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    c608:	4770      	bx	lr
    c60a:	2100      	movs	r1, #0
    c60c:	7081      	strb	r1, [r0, #2]
    c60e:	7001      	strb	r1, [r0, #0]
    c610:	7041      	strb	r1, [r0, #1]
    c612:	4770      	bx	lr

0000c614 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    c614:	b570      	push	{r4, r5, r6, lr}
    c616:	f7f4 ff07 	bl	1428 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c61a:	4605      	mov	r5, r0
    c61c:	2400      	movs	r4, #0
    c61e:	e006      	b.n	c62e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    c620:	4620      	mov	r0, r4
    c622:	f7f4 ff07 	bl	1434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c626:	f7ff fff0 	bl	c60a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    c62a:	1c64      	adds	r4, r4, #1
    c62c:	b2e4      	uxtb	r4, r4
    c62e:	42ac      	cmp	r4, r5
    c630:	d3f6      	bcc.n	c620 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    c632:	bd70      	pop	{r4, r5, r6, pc}

0000c634 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    c634:	2000      	movs	r0, #0
    c636:	f7f7 bcb5 	b.w	3fa4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000c63a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    c63a:	b510      	push	{r4, lr}
    c63c:	f7f7 f99e 	bl	397c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    c640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c644:	f000 b800 	b.w	c648 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000c648 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    c648:	0a41      	lsrs	r1, r0, #9
    c64a:	f643 5209 	movw	r2, #15625	; 0x3d09
    c64e:	4351      	muls	r1, r2
    c650:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c654:	fb10 f002 	smulbb	r0, r0, r2
    c658:	f500 7080 	add.w	r0, r0, #256	; 0x100
    c65c:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    c660:	4770      	bx	lr

0000c662 <MPSL_IRQ_RADIO_Handler>:
    c662:	f7f5 bf97 	b.w	2594 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    c666:	2800      	cmp	r0, #0
    c668:	db09      	blt.n	c67e <MPSL_IRQ_RADIO_Handler+0x1c>
    c66a:	f000 021f 	and.w	r2, r0, #31
    c66e:	2101      	movs	r1, #1
    c670:	4091      	lsls	r1, r2
    c672:	0940      	lsrs	r0, r0, #5
    c674:	0080      	lsls	r0, r0, #2
    c676:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c67a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c67e:	4770      	bx	lr
    c680:	2800      	cmp	r0, #0
    c682:	db0d      	blt.n	c6a0 <MPSL_IRQ_RADIO_Handler+0x3e>
    c684:	f000 021f 	and.w	r2, r0, #31
    c688:	2101      	movs	r1, #1
    c68a:	4091      	lsls	r1, r2
    c68c:	0940      	lsrs	r0, r0, #5
    c68e:	0080      	lsls	r0, r0, #2
    c690:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c694:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c698:	f3bf 8f4f 	dsb	sy
    c69c:	f3bf 8f6f 	isb	sy
    c6a0:	4770      	bx	lr

0000c6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c6a2:	b570      	push	{r4, r5, r6, lr}
    c6a4:	4602      	mov	r2, r0
    c6a6:	2000      	movs	r0, #0
    c6a8:	2900      	cmp	r1, #0
    c6aa:	d01d      	beq.n	c6e8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    c6ac:	fba2 0101 	umull	r0, r1, r2, r1
    c6b0:	0a40      	lsrs	r0, r0, #9
    c6b2:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    c6b6:	0a49      	lsrs	r1, r1, #9
    c6b8:	1c40      	adds	r0, r0, #1
    c6ba:	f141 0100 	adc.w	r1, r1, #0
    c6be:	f240 72a1 	movw	r2, #1953	; 0x7a1
    c6c2:	1883      	adds	r3, r0, r2
    c6c4:	f141 0100 	adc.w	r1, r1, #0
    c6c8:	1c5b      	adds	r3, r3, #1
    c6ca:	f141 0400 	adc.w	r4, r1, #0
    c6ce:	2100      	movs	r1, #0
    c6d0:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    c6d4:	41a1      	sbcs	r1, r4
    c6d6:	d203      	bcs.n	c6e0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    c6d8:	2171      	movs	r1, #113	; 0x71
    c6da:	206d      	movs	r0, #109	; 0x6d
    c6dc:	f7f8 f824 	bl	4728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c6e0:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    c6e4:	fbb0 f0f2 	udiv	r0, r0, r2
    c6e8:	bd70      	pop	{r4, r5, r6, pc}
    c6ea:	5840      	ldr	r0, [r0, r1]
    c6ec:	2800      	cmp	r0, #0
    c6ee:	d000      	beq.n	c6f2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    c6f0:	2001      	movs	r0, #1
    c6f2:	4770      	bx	lr
    c6f4:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    c6f8:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    c6fc:	f002 0201 	and.w	r2, r2, #1
    c700:	03c0      	lsls	r0, r0, #15
    c702:	d503      	bpl.n	c70c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c704:	428a      	cmp	r2, r1
    c706:	d101      	bne.n	c70c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c708:	2001      	movs	r0, #1
    c70a:	4770      	bx	lr
    c70c:	2000      	movs	r0, #0
    c70e:	4770      	bx	lr

0000c710 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    c710:	b510      	push	{r4, lr}
    c712:	2101      	movs	r1, #1
    c714:	0788      	lsls	r0, r1, #30
    c716:	f7f7 ffc5 	bl	46a4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c71a:	2800      	cmp	r0, #0
    c71c:	d000      	beq.n	c720 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    c71e:	2001      	movs	r0, #1
    c720:	bd10      	pop	{r4, pc}

0000c722 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    c722:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c726:	2101      	movs	r1, #1
    c728:	6001      	str	r1, [r0, #0]
    c72a:	4770      	bx	lr

0000c72c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    c72c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c730:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    c734:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    c738:	f002 0203 	and.w	r2, r2, #3
    c73c:	03c9      	lsls	r1, r1, #15
    c73e:	d503      	bpl.n	c748 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c740:	4282      	cmp	r2, r0
    c742:	d101      	bne.n	c748 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c744:	2001      	movs	r0, #1
    c746:	4770      	bx	lr
    c748:	2000      	movs	r0, #0
    c74a:	4770      	bx	lr

0000c74c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    c74c:	b510      	push	{r4, lr}
    c74e:	2100      	movs	r1, #0
    c750:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c754:	f7f7 ffa6 	bl	46a4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c758:	2800      	cmp	r0, #0
    c75a:	d000      	beq.n	c75e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    c75c:	2001      	movs	r0, #1
    c75e:	bd10      	pop	{r4, pc}
    c760:	2800      	cmp	r0, #0
    c762:	db09      	blt.n	c778 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    c764:	f000 021f 	and.w	r2, r0, #31
    c768:	2101      	movs	r1, #1
    c76a:	4091      	lsls	r1, r2
    c76c:	0940      	lsrs	r0, r0, #5
    c76e:	0080      	lsls	r0, r0, #2
    c770:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c774:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c778:	4770      	bx	lr
    c77a:	2800      	cmp	r0, #0
    c77c:	db0d      	blt.n	c79a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    c77e:	f000 021f 	and.w	r2, r0, #31
    c782:	2101      	movs	r1, #1
    c784:	4091      	lsls	r1, r2
    c786:	0940      	lsrs	r0, r0, #5
    c788:	0080      	lsls	r0, r0, #2
    c78a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c78e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c792:	f3bf 8f4f 	dsb	sy
    c796:	f3bf 8f6f 	isb	sy
    c79a:	4770      	bx	lr
    c79c:	00021000 	.word	0x00021000
    c7a0:	000000fa 	.word	0x000000fa
    c7a4:	71a053fe 	.word	0x71a053fe
    c7a8:	1095eb1b 	.word	0x1095eb1b
    c7ac:	c946cf33 	.word	0xc946cf33
    c7b0:	5ebe9563 	.word	0x5ebe9563
    c7b4:	736e3829 	.word	0x736e3829
    c7b8:	2800      	cmp	r0, #0
    c7ba:	db09      	blt.n	c7d0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    c7bc:	f000 021f 	and.w	r2, r0, #31
    c7c0:	2101      	movs	r1, #1
    c7c2:	4091      	lsls	r1, r2
    c7c4:	0940      	lsrs	r0, r0, #5
    c7c6:	0080      	lsls	r0, r0, #2
    c7c8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c7cc:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c7d0:	4770      	bx	lr

0000c7d2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    c7d2:	f3ef 8110 	mrs	r1, PRIMASK
    c7d6:	b672      	cpsid	i
    c7d8:	7802      	ldrb	r2, [r0, #0]
    c7da:	2a01      	cmp	r2, #1
    c7dc:	d001      	beq.n	c7e2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    c7de:	2201      	movs	r2, #1
    c7e0:	e000      	b.n	c7e4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    c7e2:	2200      	movs	r2, #0
    c7e4:	2301      	movs	r3, #1
    c7e6:	7003      	strb	r3, [r0, #0]
    c7e8:	b901      	cbnz	r1, c7ec <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    c7ea:	b662      	cpsie	i
    c7ec:	b10a      	cbz	r2, c7f2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    c7ee:	2000      	movs	r0, #0
    c7f0:	4770      	bx	lr
    c7f2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c7f6:	4770      	bx	lr

0000c7f8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    c7f8:	2100      	movs	r1, #0
    c7fa:	7001      	strb	r1, [r0, #0]
    c7fc:	4608      	mov	r0, r1
    c7fe:	4770      	bx	lr

0000c800 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    c800:	f3ef 8110 	mrs	r1, PRIMASK
    c804:	b672      	cpsid	i
    c806:	2200      	movs	r2, #0
    c808:	7002      	strb	r2, [r0, #0]
    c80a:	b901      	cbnz	r1, c80e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    c80c:	b662      	cpsie	i
    c80e:	2000      	movs	r0, #0
    c810:	4770      	bx	lr

0000c812 <mpsl_low_priority_process>:
    c812:	f7f8 b875 	b.w	4900 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000c816 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    c816:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c81a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c81e:	280f      	cmp	r0, #15
    c820:	d001      	beq.n	c826 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    c822:	2000      	movs	r0, #0
    c824:	4770      	bx	lr
    c826:	2001      	movs	r0, #1
    c828:	4770      	bx	lr

0000c82a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    c82a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c82e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c832:	280a      	cmp	r0, #10
    c834:	d001      	beq.n	c83a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    c836:	2000      	movs	r0, #0
    c838:	4770      	bx	lr
    c83a:	2001      	movs	r0, #1
    c83c:	4770      	bx	lr

0000c83e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    c83e:	b500      	push	{lr}
    c840:	f7ff fff3 	bl	c82a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c844:	b120      	cbz	r0, c850 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    c846:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c84a:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c84e:	b108      	cbz	r0, c854 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    c850:	2000      	movs	r0, #0
    c852:	bd00      	pop	{pc}
    c854:	2001      	movs	r0, #1
    c856:	bd00      	pop	{pc}

0000c858 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    c858:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c85c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c860:	280e      	cmp	r0, #14
    c862:	d001      	beq.n	c868 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    c864:	2000      	movs	r0, #0
    c866:	4770      	bx	lr
    c868:	2001      	movs	r0, #1
    c86a:	4770      	bx	lr

0000c86c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    c86c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c870:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c874:	2810      	cmp	r0, #16
    c876:	d001      	beq.n	c87c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    c878:	2000      	movs	r0, #0
    c87a:	4770      	bx	lr
    c87c:	2001      	movs	r0, #1
    c87e:	4770      	bx	lr

0000c880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    c880:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c884:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c888:	2806      	cmp	r0, #6
    c88a:	d003      	beq.n	c894 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c88c:	1c40      	adds	r0, r0, #1
    c88e:	d001      	beq.n	c894 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c890:	2000      	movs	r0, #0
    c892:	4770      	bx	lr
    c894:	2001      	movs	r0, #1
    c896:	4770      	bx	lr

0000c898 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    c898:	b500      	push	{lr}
    c89a:	f7ff fff1 	bl	c880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c89e:	b148      	cbz	r0, c8b4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c8a0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c8a4:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c8a8:	2806      	cmp	r0, #6
    c8aa:	d303      	bcc.n	c8b4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c8ac:	1c40      	adds	r0, r0, #1
    c8ae:	d001      	beq.n	c8b4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c8b0:	2001      	movs	r0, #1
    c8b2:	bd00      	pop	{pc}
    c8b4:	2000      	movs	r0, #0
    c8b6:	bd00      	pop	{pc}

0000c8b8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    c8b8:	b500      	push	{lr}
    c8ba:	f7ff ffe1 	bl	c880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c8be:	b138      	cbz	r0, c8d0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    c8c0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c8c4:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c8c8:	2806      	cmp	r0, #6
    c8ca:	d303      	bcc.n	c8d4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c8cc:	1c40      	adds	r0, r0, #1
    c8ce:	d001      	beq.n	c8d4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c8d0:	2000      	movs	r0, #0
    c8d2:	bd00      	pop	{pc}
    c8d4:	2001      	movs	r0, #1
    c8d6:	bd00      	pop	{pc}

0000c8d8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    c8d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c8dc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c8e0:	280d      	cmp	r0, #13
    c8e2:	d001      	beq.n	c8e8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    c8e4:	2000      	movs	r0, #0
    c8e6:	4770      	bx	lr
    c8e8:	2001      	movs	r0, #1
    c8ea:	4770      	bx	lr

0000c8ec <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    c8ec:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c8f0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c8f4:	2808      	cmp	r0, #8
    c8f6:	d001      	beq.n	c8fc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    c8f8:	2000      	movs	r0, #0
    c8fa:	4770      	bx	lr
    c8fc:	2001      	movs	r0, #1
    c8fe:	4770      	bx	lr

0000c900 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    c900:	2a00      	cmp	r2, #0
    c902:	bf04      	itt	eq
    c904:	2000      	moveq	r0, #0
    c906:	4770      	bxeq	lr
    c908:	1e52      	subs	r2, r2, #1
    c90a:	d007      	beq.n	c91c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    c90c:	7803      	ldrb	r3, [r0, #0]
    c90e:	f891 c000 	ldrb.w	ip, [r1]
    c912:	4563      	cmp	r3, ip
    c914:	bf04      	itt	eq
    c916:	1c40      	addeq	r0, r0, #1
    c918:	1c49      	addeq	r1, r1, #1
    c91a:	d0f5      	beq.n	c908 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    c91c:	7800      	ldrb	r0, [r0, #0]
    c91e:	7809      	ldrb	r1, [r1, #0]
    c920:	1a40      	subs	r0, r0, r1
    c922:	4770      	bx	lr

0000c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    c924:	b4f0      	push	{r4, r5, r6, r7}
    c926:	ea80 0c01 	eor.w	ip, r0, r1
    c92a:	4603      	mov	r3, r0
    c92c:	f01c 0f03 	tst.w	ip, #3
    c930:	d13c      	bne.n	c9ac <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c932:	f013 0f03 	tst.w	r3, #3
    c936:	d00b      	beq.n	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    c938:	2a00      	cmp	r2, #0
    c93a:	bf04      	itt	eq
    c93c:	bcf0      	popeq	{r4, r5, r6, r7}
    c93e:	4770      	bxeq	lr
    c940:	f811 cb01 	ldrb.w	ip, [r1], #1
    c944:	f803 cb01 	strb.w	ip, [r3], #1
    c948:	1e52      	subs	r2, r2, #1
    c94a:	f013 0f03 	tst.w	r3, #3
    c94e:	d1f3      	bne.n	c938 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    c950:	2a03      	cmp	r2, #3
    c952:	d94f      	bls.n	c9f4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c954:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c958:	d24c      	bcs.n	c9f4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c95a:	f1c2 0c00 	rsb	ip, r2, #0
    c95e:	ea4f 74ec 	mov.w	r4, ip, asr #31
    c962:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    c966:	ea4f 0cac 	mov.w	ip, ip, asr #2
    c96a:	f1cc 0c00 	rsb	ip, ip, #0
    c96e:	f1bc 0f00 	cmp.w	ip, #0
    c972:	dd1b      	ble.n	c9ac <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c974:	1f0d      	subs	r5, r1, #4
    c976:	1f1c      	subs	r4, r3, #4
    c978:	f01c 0f01 	tst.w	ip, #1
    c97c:	d003      	beq.n	c986 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    c97e:	f855 6f04 	ldr.w	r6, [r5, #4]!
    c982:	f844 6f04 	str.w	r6, [r4, #4]!
    c986:	ea5f 066c 	movs.w	r6, ip, asr #1
    c98a:	d007      	beq.n	c99c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    c98c:	686f      	ldr	r7, [r5, #4]
    c98e:	6067      	str	r7, [r4, #4]
    c990:	f855 7f08 	ldr.w	r7, [r5, #8]!
    c994:	f844 7f08 	str.w	r7, [r4, #8]!
    c998:	1e76      	subs	r6, r6, #1
    c99a:	d1f7      	bne.n	c98c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    c99c:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    c9a0:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    c9a4:	f1cc 0c00 	rsb	ip, ip, #0
    c9a8:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    c9ac:	2a00      	cmp	r2, #0
    c9ae:	bf04      	itt	eq
    c9b0:	bcf0      	popeq	{r4, r5, r6, r7}
    c9b2:	4770      	bxeq	lr
    c9b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c9b8:	d226      	bcs.n	ca08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c9ba:	2a00      	cmp	r2, #0
    c9bc:	bfdc      	itt	le
    c9be:	bcf0      	pople	{r4, r5, r6, r7}
    c9c0:	4770      	bxle	lr
    c9c2:	1e49      	subs	r1, r1, #1
    c9c4:	1e5b      	subs	r3, r3, #1
    c9c6:	f012 0f01 	tst.w	r2, #1
    c9ca:	d003      	beq.n	c9d4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    c9cc:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c9d0:	f803 cf01 	strb.w	ip, [r3, #1]!
    c9d4:	1052      	asrs	r2, r2, #1
    c9d6:	bf04      	itt	eq
    c9d8:	bcf0      	popeq	{r4, r5, r6, r7}
    c9da:	4770      	bxeq	lr
    c9dc:	f891 c001 	ldrb.w	ip, [r1, #1]
    c9e0:	f883 c001 	strb.w	ip, [r3, #1]
    c9e4:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    c9e8:	f803 cf02 	strb.w	ip, [r3, #2]!
    c9ec:	1e52      	subs	r2, r2, #1
    c9ee:	d1f5      	bne.n	c9dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    c9f0:	bcf0      	pop	{r4, r5, r6, r7}
    c9f2:	4770      	bx	lr
    c9f4:	2a04      	cmp	r2, #4
    c9f6:	d3d9      	bcc.n	c9ac <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c9f8:	f851 cb04 	ldr.w	ip, [r1], #4
    c9fc:	1f12      	subs	r2, r2, #4
    c9fe:	f843 cb04 	str.w	ip, [r3], #4
    ca02:	2a04      	cmp	r2, #4
    ca04:	d2f8      	bcs.n	c9f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    ca06:	e7d1      	b.n	c9ac <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    ca08:	f811 cb01 	ldrb.w	ip, [r1], #1
    ca0c:	f803 cb01 	strb.w	ip, [r3], #1
    ca10:	1e52      	subs	r2, r2, #1
    ca12:	d1f9      	bne.n	ca08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    ca14:	bcf0      	pop	{r4, r5, r6, r7}
    ca16:	4770      	bx	lr

0000ca18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    ca18:	b470      	push	{r4, r5, r6}
    ca1a:	4603      	mov	r3, r0
    ca1c:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    ca20:	f010 0f03 	tst.w	r0, #3
    ca24:	d009      	beq.n	ca3a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    ca26:	2a00      	cmp	r2, #0
    ca28:	bf04      	itt	eq
    ca2a:	bc70      	popeq	{r4, r5, r6}
    ca2c:	4770      	bxeq	lr
    ca2e:	f803 cb01 	strb.w	ip, [r3], #1
    ca32:	1e52      	subs	r2, r2, #1
    ca34:	f013 0f03 	tst.w	r3, #3
    ca38:	d1f5      	bne.n	ca26 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    ca3a:	b2c9      	uxtb	r1, r1
    ca3c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    ca40:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    ca44:	2a03      	cmp	r2, #3
    ca46:	d939      	bls.n	cabc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    ca48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ca4c:	d236      	bcs.n	cabc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    ca4e:	4251      	negs	r1, r2
    ca50:	17cc      	asrs	r4, r1, #31
    ca52:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    ca56:	1089      	asrs	r1, r1, #2
    ca58:	424e      	negs	r6, r1
    ca5a:	2e00      	cmp	r6, #0
    ca5c:	dd11      	ble.n	ca82 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    ca5e:	1f19      	subs	r1, r3, #4
    ca60:	f016 0f01 	tst.w	r6, #1
    ca64:	bf18      	it	ne
    ca66:	f841 5f04 	strne.w	r5, [r1, #4]!
    ca6a:	1074      	asrs	r4, r6, #1
    ca6c:	d004      	beq.n	ca78 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    ca6e:	604d      	str	r5, [r1, #4]
    ca70:	f841 5f08 	str.w	r5, [r1, #8]!
    ca74:	1e64      	subs	r4, r4, #1
    ca76:	d1fa      	bne.n	ca6e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    ca78:	4271      	negs	r1, r6
    ca7a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    ca7e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    ca82:	2a00      	cmp	r2, #0
    ca84:	bf04      	itt	eq
    ca86:	bc70      	popeq	{r4, r5, r6}
    ca88:	4770      	bxeq	lr
    ca8a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ca8e:	d21d      	bcs.n	cacc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    ca90:	2a00      	cmp	r2, #0
    ca92:	bfdc      	itt	le
    ca94:	bc70      	pople	{r4, r5, r6}
    ca96:	4770      	bxle	lr
    ca98:	1e59      	subs	r1, r3, #1
    ca9a:	f012 0f01 	tst.w	r2, #1
    ca9e:	bf18      	it	ne
    caa0:	f801 cf01 	strbne.w	ip, [r1, #1]!
    caa4:	1052      	asrs	r2, r2, #1
    caa6:	bf04      	itt	eq
    caa8:	bc70      	popeq	{r4, r5, r6}
    caaa:	4770      	bxeq	lr
    caac:	f881 c001 	strb.w	ip, [r1, #1]
    cab0:	f801 cf02 	strb.w	ip, [r1, #2]!
    cab4:	1e52      	subs	r2, r2, #1
    cab6:	d1f9      	bne.n	caac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    cab8:	bc70      	pop	{r4, r5, r6}
    caba:	4770      	bx	lr
    cabc:	2a04      	cmp	r2, #4
    cabe:	d3e0      	bcc.n	ca82 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    cac0:	1f12      	subs	r2, r2, #4
    cac2:	f843 5b04 	str.w	r5, [r3], #4
    cac6:	2a04      	cmp	r2, #4
    cac8:	d2fa      	bcs.n	cac0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    caca:	e7da      	b.n	ca82 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    cacc:	f803 cb01 	strb.w	ip, [r3], #1
    cad0:	1e52      	subs	r2, r2, #1
    cad2:	d1fb      	bne.n	cacc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    cad4:	bc70      	pop	{r4, r5, r6}
    cad6:	4770      	bx	lr
    cad8:	f04f 30ff 	mov.w	r0, #4294967295
    cadc:	4770      	bx	lr
    cade:	2000      	movs	r0, #0
    cae0:	4770      	bx	lr
    cae2:	2000      	movs	r0, #0
    cae4:	4770      	bx	lr
    cae6:	f04f 30ff 	mov.w	r0, #4294967295
    caea:	4770      	bx	lr
    caec:	4770      	bx	lr
    caee:	4770      	bx	lr
    caf0:	2000      	movs	r0, #0
    caf2:	4770      	bx	lr
    caf4:	f04f 30ff 	mov.w	r0, #4294967295
    caf8:	4770      	bx	lr
    cafa:	f04f 30ff 	mov.w	r0, #4294967295
    cafe:	4770      	bx	lr
    cb00:	2100      	movs	r1, #0
    cb02:	7001      	strb	r1, [r0, #0]
    cb04:	4770      	bx	lr
    cb06:	f04f 30ff 	mov.w	r0, #4294967295
    cb0a:	4770      	bx	lr
    cb0c:	f04f 30ff 	mov.w	r0, #4294967295
    cb10:	4770      	bx	lr
    cb12:	2000      	movs	r0, #0
    cb14:	4770      	bx	lr
    cb16:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    cb1a:	4605      	mov	r5, r0
    cb1c:	f100 0003 	add.w	r0, r0, #3
    cb20:	f020 0003 	bic.w	r0, r0, #3
    cb24:	460c      	mov	r4, r1
    cb26:	9000      	str	r0, [sp, #0]
    cb28:	7849      	ldrb	r1, [r1, #1]
    cb2a:	f88d 1004 	strb.w	r1, [sp, #4]
    cb2e:	78a1      	ldrb	r1, [r4, #2]
    cb30:	0016      	movs	r6, r2
    cb32:	f88d 1005 	strb.w	r1, [sp, #5]
    cb36:	d000      	beq.n	cb3a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x122>
    cb38:	2000      	movs	r0, #0
    cb3a:	a901      	add	r1, sp, #4
    cb3c:	f7f8 faa2 	bl	5084 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    cb40:	9900      	ldr	r1, [sp, #0]
    cb42:	4408      	add	r0, r1
    cb44:	9000      	str	r0, [sp, #0]
    cb46:	78a1      	ldrb	r1, [r4, #2]
    cb48:	b141      	cbz	r1, cb5c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x144>
    cb4a:	8a63      	ldrh	r3, [r4, #18]
    cb4c:	78e2      	ldrb	r2, [r4, #3]
    cb4e:	b106      	cbz	r6, cb52 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x13a>
    cb50:	2000      	movs	r0, #0
    cb52:	f7f8 fd27 	bl	55a4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    cb56:	9900      	ldr	r1, [sp, #0]
    cb58:	4408      	add	r0, r1
    cb5a:	9000      	str	r0, [sp, #0]
    cb5c:	4632      	mov	r2, r6
    cb5e:	4621      	mov	r1, r4
    cb60:	4668      	mov	r0, sp
    cb62:	f000 f808 	bl	cb76 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x15e>
    cb66:	9800      	ldr	r0, [sp, #0]
    cb68:	1dc0      	adds	r0, r0, #7
    cb6a:	f020 0007 	bic.w	r0, r0, #7
    cb6e:	9000      	str	r0, [sp, #0]
    cb70:	1b40      	subs	r0, r0, r5
    cb72:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    cb76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cb7a:	4606      	mov	r6, r0
    cb7c:	460c      	mov	r4, r1
    cb7e:	7808      	ldrb	r0, [r1, #0]
    cb80:	7849      	ldrb	r1, [r1, #1]
    cb82:	2700      	movs	r7, #0
    cb84:	4408      	add	r0, r1
    cb86:	4691      	mov	r9, r2
    cb88:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    cb8c:	463d      	mov	r5, r7
    cb8e:	e00e      	b.n	cbae <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x196>
    cb90:	7a23      	ldrb	r3, [r4, #8]
    cb92:	2b02      	cmp	r3, #2
    cb94:	d200      	bcs.n	cb98 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x180>
    cb96:	2302      	movs	r3, #2
    cb98:	79e2      	ldrb	r2, [r4, #7]
    cb9a:	2a03      	cmp	r2, #3
    cb9c:	d200      	bcs.n	cba0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x188>
    cb9e:	2203      	movs	r2, #3
    cba0:	79a1      	ldrb	r1, [r4, #6]
    cba2:	7960      	ldrb	r0, [r4, #5]
    cba4:	f000 fef8 	bl	d998 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    cba8:	1c6d      	adds	r5, r5, #1
    cbaa:	4407      	add	r7, r0
    cbac:	b2ed      	uxtb	r5, r5
    cbae:	4545      	cmp	r5, r8
    cbb0:	d3ee      	bcc.n	cb90 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x178>
    cbb2:	6830      	ldr	r0, [r6, #0]
    cbb4:	1cc0      	adds	r0, r0, #3
    cbb6:	f020 0003 	bic.w	r0, r0, #3
    cbba:	6030      	str	r0, [r6, #0]
    cbbc:	f1b9 0f00 	cmp.w	r9, #0
    cbc0:	d000      	beq.n	cbc4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x1ac>
    cbc2:	2000      	movs	r0, #0
    cbc4:	463a      	mov	r2, r7
    cbc6:	4641      	mov	r1, r8
    cbc8:	f7f8 fc36 	bl	5438 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    cbcc:	6831      	ldr	r1, [r6, #0]
    cbce:	4408      	add	r0, r1
    cbd0:	6030      	str	r0, [r6, #0]
    cbd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000cbd6 <sdc_soc_ecb_block_encrypt>:
    cbd6:	b530      	push	{r4, r5, lr}
    cbd8:	460d      	mov	r5, r1
    cbda:	b08d      	sub	sp, #52	; 0x34
    cbdc:	4614      	mov	r4, r2
    cbde:	4601      	mov	r1, r0
    cbe0:	2210      	movs	r2, #16
    cbe2:	4668      	mov	r0, sp
    cbe4:	f7ff fe9e 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cbe8:	2210      	movs	r2, #16
    cbea:	4629      	mov	r1, r5
    cbec:	a804      	add	r0, sp, #16
    cbee:	f7ff fe99 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cbf2:	4668      	mov	r0, sp
    cbf4:	f7f8 fdec 	bl	57d0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    cbf8:	b118      	cbz	r0, cc02 <sdc_soc_ecb_block_encrypt+0x2c>
    cbfa:	f06f 0015 	mvn.w	r0, #21
    cbfe:	b00d      	add	sp, #52	; 0x34
    cc00:	bd30      	pop	{r4, r5, pc}
    cc02:	2210      	movs	r2, #16
    cc04:	4620      	mov	r0, r4
    cc06:	a908      	add	r1, sp, #32
    cc08:	f7ff fe8c 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cc0c:	2000      	movs	r0, #0
    cc0e:	e7f6      	b.n	cbfe <sdc_soc_ecb_block_encrypt+0x28>

0000cc10 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    cc10:	2000      	movs	r0, #0
    cc12:	4770      	bx	lr

0000cc14 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    cc14:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    cc16:	4604      	mov	r4, r0
    cc18:	1d01      	adds	r1, r0, #4
    cc1a:	4668      	mov	r0, sp
    cc1c:	f7fa fa04 	bl	7028 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    cc20:	2800      	cmp	r0, #0
    cc22:	d004      	beq.n	cc2e <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    cc24:	4669      	mov	r1, sp
    cc26:	4620      	mov	r0, r4
    cc28:	f000 f848 	bl	ccbc <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    cc2c:	2001      	movs	r0, #1
    cc2e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000cc30 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    cc30:	b50e      	push	{r1, r2, r3, lr}
    cc32:	4601      	mov	r1, r0
    cc34:	4668      	mov	r0, sp
    cc36:	f000 f827 	bl	cc88 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    cc3a:	4668      	mov	r0, sp
    cc3c:	f7fa fa1e 	bl	707c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    cc40:	bd0e      	pop	{r1, r2, r3, pc}

0000cc42 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    cc42:	b510      	push	{r4, lr}
    cc44:	4604      	mov	r4, r0
    cc46:	4620      	mov	r0, r4
    cc48:	f7f8 f90a 	bl	4e60 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    cc4c:	2800      	cmp	r0, #0
    cc4e:	d006      	beq.n	cc5e <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    cc50:	78a1      	ldrb	r1, [r4, #2]
    cc52:	7820      	ldrb	r0, [r4, #0]
    cc54:	f000 f804 	bl	cc60 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    cc58:	2800      	cmp	r0, #0
    cc5a:	d0f4      	beq.n	cc46 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    cc5c:	2001      	movs	r0, #1
    cc5e:	bd10      	pop	{r4, pc}
    cc60:	b570      	push	{r4, r5, r6, lr}
    cc62:	460c      	mov	r4, r1
    cc64:	4605      	mov	r5, r0
    cc66:	f7f8 f96d 	bl	4f44 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    cc6a:	2800      	cmp	r0, #0
    cc6c:	d002      	beq.n	cc74 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    cc6e:	2d3e      	cmp	r5, #62	; 0x3e
    cc70:	d001      	beq.n	cc76 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    cc72:	2001      	movs	r0, #1
    cc74:	bd70      	pop	{r4, r5, r6, pc}
    cc76:	2c12      	cmp	r4, #18
    cc78:	d004      	beq.n	cc84 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    cc7a:	4620      	mov	r0, r4
    cc7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cc80:	f7f8 b97c 	b.w	4f7c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cc84:	2000      	movs	r0, #0
    cc86:	bd70      	pop	{r4, r5, r6, pc}

0000cc88 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    cc88:	880a      	ldrh	r2, [r1, #0]
    cc8a:	f3c2 020b 	ubfx	r2, r2, #0, #12
    cc8e:	8002      	strh	r2, [r0, #0]
    cc90:	884a      	ldrh	r2, [r1, #2]
    cc92:	8042      	strh	r2, [r0, #2]
    cc94:	784a      	ldrb	r2, [r1, #1]
    cc96:	0993      	lsrs	r3, r2, #6
    cc98:	2200      	movs	r2, #0
    cc9a:	7142      	strb	r2, [r0, #5]
    cc9c:	784b      	ldrb	r3, [r1, #1]
    cc9e:	f3c3 1301 	ubfx	r3, r3, #4, #2
    cca2:	b11b      	cbz	r3, ccac <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    cca4:	2b01      	cmp	r3, #1
    cca6:	d005      	beq.n	ccb4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    cca8:	2b02      	cmp	r3, #2
    ccaa:	d005      	beq.n	ccb8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    ccac:	7102      	strb	r2, [r0, #4]
    ccae:	1d09      	adds	r1, r1, #4
    ccb0:	6081      	str	r1, [r0, #8]
    ccb2:	4770      	bx	lr
    ccb4:	2201      	movs	r2, #1
    ccb6:	e7f9      	b.n	ccac <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    ccb8:	2202      	movs	r2, #2
    ccba:	e7f7      	b.n	ccac <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000ccbc <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    ccbc:	b510      	push	{r4, lr}
    ccbe:	460c      	mov	r4, r1
    ccc0:	7809      	ldrb	r1, [r1, #0]
    ccc2:	7001      	strb	r1, [r0, #0]
    ccc4:	7841      	ldrb	r1, [r0, #1]
    ccc6:	f021 010f 	bic.w	r1, r1, #15
    ccca:	7041      	strb	r1, [r0, #1]
    cccc:	8822      	ldrh	r2, [r4, #0]
    ccce:	f3c2 2203 	ubfx	r2, r2, #8, #4
    ccd2:	4311      	orrs	r1, r2
    ccd4:	7041      	strb	r1, [r0, #1]
    ccd6:	78a2      	ldrb	r2, [r4, #2]
    ccd8:	7082      	strb	r2, [r0, #2]
    ccda:	8862      	ldrh	r2, [r4, #2]
    ccdc:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    cce0:	0a12      	lsrs	r2, r2, #8
    cce2:	70c2      	strb	r2, [r0, #3]
    cce4:	7041      	strb	r1, [r0, #1]
    cce6:	7922      	ldrb	r2, [r4, #4]
    cce8:	f002 0203 	and.w	r2, r2, #3
    ccec:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    ccf0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    ccf4:	7041      	strb	r1, [r0, #1]
    ccf6:	7962      	ldrb	r2, [r4, #5]
    ccf8:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    ccfc:	7041      	strb	r1, [r0, #1]
    ccfe:	68a1      	ldr	r1, [r4, #8]
    cd00:	1d02      	adds	r2, r0, #4
    cd02:	4291      	cmp	r1, r2
    cd04:	d006      	beq.n	cd14 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    cd06:	8862      	ldrh	r2, [r4, #2]
    cd08:	2afb      	cmp	r2, #251	; 0xfb
    cd0a:	d300      	bcc.n	cd0e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    cd0c:	22fb      	movs	r2, #251	; 0xfb
    cd0e:	1d00      	adds	r0, r0, #4
    cd10:	f7ff fe08 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd14:	78a0      	ldrb	r0, [r4, #2]
    cd16:	1d00      	adds	r0, r0, #4
    cd18:	b2c0      	uxtb	r0, r0
    cd1a:	bd10      	pop	{r4, pc}

0000cd1c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    cd1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd20:	4604      	mov	r4, r0
    cd22:	780f      	ldrb	r7, [r1, #0]
    cd24:	2000      	movs	r0, #0
    cd26:	250c      	movs	r5, #12
    cd28:	2605      	movs	r6, #5
    cd2a:	223e      	movs	r2, #62	; 0x3e
    cd2c:	23ff      	movs	r3, #255	; 0xff
    cd2e:	2f1b      	cmp	r7, #27
    cd30:	d27d      	bcs.n	ce2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    cd32:	e8df f007 	tbb	[pc, r7]
    cd36:	0eea      	.short	0x0eea
    cd38:	632d2725 	.word	0x632d2725
    cd3c:	af9b816d 	.word	0xaf9b816d
    cd40:	e2c7bcb1 	.word	0xe2c7bcb1
    cd44:	31eaeaf4 	.word	0x31eaeaf4
    cd48:	f1fdd5d2 	.word	0xf1fdd5d2
    cd4c:	edeeeff0 	.word	0xedeeeff0
    cd50:	00ec      	.short	0x00ec
    cd52:	7025      	strb	r5, [r4, #0]
    cd54:	7908      	ldrb	r0, [r1, #4]
    cd56:	70a0      	strb	r0, [r4, #2]
    cd58:	7948      	ldrb	r0, [r1, #5]
    cd5a:	70e0      	strb	r0, [r4, #3]
    cd5c:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    cd60:	0a00      	lsrs	r0, r0, #8
    cd62:	7120      	strb	r0, [r4, #4]
    cd64:	79c8      	ldrb	r0, [r1, #7]
    cd66:	7160      	strb	r0, [r4, #5]
    cd68:	7a08      	ldrb	r0, [r1, #8]
    cd6a:	71a0      	strb	r0, [r4, #6]
    cd6c:	8908      	ldrh	r0, [r1, #8]
    cd6e:	0a00      	lsrs	r0, r0, #8
    cd70:	71e0      	strb	r0, [r4, #7]
    cd72:	7a88      	ldrb	r0, [r1, #10]
    cd74:	7220      	strb	r0, [r4, #8]
    cd76:	8948      	ldrh	r0, [r1, #10]
    cd78:	0a00      	lsrs	r0, r0, #8
    cd7a:	7260      	strb	r0, [r4, #9]
    cd7c:	2008      	movs	r0, #8
    cd7e:	e0c2      	b.n	cf06 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cd80:	2010      	movs	r0, #16
    cd82:	e000      	b.n	cd86 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    cd84:	201a      	movs	r0, #26
    cd86:	7020      	strb	r0, [r4, #0]
    cd88:	7908      	ldrb	r0, [r1, #4]
    cd8a:	70a0      	strb	r0, [r4, #2]
    cd8c:	2001      	movs	r0, #1
    cd8e:	e0ba      	b.n	cf06 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cd90:	4620      	mov	r0, r4
    cd92:	f000 f946 	bl	d022 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    cd96:	e0b4      	b.n	cf02 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
    cd98:	7022      	strb	r2, [r4, #0]
    cd9a:	200a      	movs	r0, #10
    cd9c:	70a0      	strb	r0, [r4, #2]
    cd9e:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    cda2:	70e0      	strb	r0, [r4, #3]
    cda4:	7888      	ldrb	r0, [r1, #2]
    cda6:	7120      	strb	r0, [r4, #4]
    cda8:	8848      	ldrh	r0, [r1, #2]
    cdaa:	0a00      	lsrs	r0, r0, #8
    cdac:	7160      	strb	r0, [r4, #5]
    cdae:	7908      	ldrb	r0, [r1, #4]
    cdb0:	71a0      	strb	r0, [r4, #6]
    cdb2:	7948      	ldrb	r0, [r1, #5]
    cdb4:	71e0      	strb	r0, [r4, #7]
    cdb6:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cdba:	60a0      	str	r0, [r4, #8]
    cdbc:	8948      	ldrh	r0, [r1, #10]
    cdbe:	81a0      	strh	r0, [r4, #12]
    cdc0:	68c8      	ldr	r0, [r1, #12]
    cdc2:	f8c4 000e 	str.w	r0, [r4, #14]
    cdc6:	8a08      	ldrh	r0, [r1, #16]
    cdc8:	8260      	strh	r0, [r4, #18]
    cdca:	f8d1 0012 	ldr.w	r0, [r1, #18]
    cdce:	6160      	str	r0, [r4, #20]
    cdd0:	8ac8      	ldrh	r0, [r1, #22]
    cdd2:	8320      	strh	r0, [r4, #24]
    cdd4:	7e08      	ldrb	r0, [r1, #24]
    cdd6:	76a0      	strb	r0, [r4, #26]
    cdd8:	8b08      	ldrh	r0, [r1, #24]
    cdda:	0a00      	lsrs	r0, r0, #8
    cddc:	76e0      	strb	r0, [r4, #27]
    cdde:	7e88      	ldrb	r0, [r1, #26]
    cde0:	7720      	strb	r0, [r4, #28]
    cde2:	8b48      	ldrh	r0, [r1, #26]
    cde4:	0a00      	lsrs	r0, r0, #8
    cde6:	7760      	strb	r0, [r4, #29]
    cde8:	7f08      	ldrb	r0, [r1, #28]
    cdea:	77a0      	strb	r0, [r4, #30]
    cdec:	8b88      	ldrh	r0, [r1, #28]
    cdee:	0a00      	lsrs	r0, r0, #8
    cdf0:	77e0      	strb	r0, [r4, #31]
    cdf2:	7f88      	ldrb	r0, [r1, #30]
    cdf4:	f884 0020 	strb.w	r0, [r4, #32]
    cdf8:	201f      	movs	r0, #31
    cdfa:	e084      	b.n	cf06 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cdfc:	7022      	strb	r2, [r4, #0]
    cdfe:	2014      	movs	r0, #20
    ce00:	70a0      	strb	r0, [r4, #2]
    ce02:	7908      	ldrb	r0, [r1, #4]
    ce04:	70e0      	strb	r0, [r4, #3]
    ce06:	8888      	ldrh	r0, [r1, #4]
    ce08:	0a00      	lsrs	r0, r0, #8
    ce0a:	7120      	strb	r0, [r4, #4]
    ce0c:	7988      	ldrb	r0, [r1, #6]
    ce0e:	e0a7      	b.n	cf60 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    ce10:	7022      	strb	r2, [r4, #0]
    ce12:	2004      	movs	r0, #4
    ce14:	70a0      	strb	r0, [r4, #2]
    ce16:	7908      	ldrb	r0, [r1, #4]
    ce18:	70e0      	strb	r0, [r4, #3]
    ce1a:	7988      	ldrb	r0, [r1, #6]
    ce1c:	7120      	strb	r0, [r4, #4]
    ce1e:	88c8      	ldrh	r0, [r1, #6]
    ce20:	0a00      	lsrs	r0, r0, #8
    ce22:	7160      	strb	r0, [r4, #5]
    ce24:	6888      	ldr	r0, [r1, #8]
    ce26:	f8c4 0006 	str.w	r0, [r4, #6]
    ce2a:	68c8      	ldr	r0, [r1, #12]
    ce2c:	e000      	b.n	ce30 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    ce2e:	e06c      	b.n	cf0a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
    ce30:	f8c4 000a 	str.w	r0, [r4, #10]
    ce34:	200c      	movs	r0, #12
    ce36:	e066      	b.n	cf06 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    ce38:	7022      	strb	r2, [r4, #0]
    ce3a:	2003      	movs	r0, #3
    ce3c:	70a0      	strb	r0, [r4, #2]
    ce3e:	7908      	ldrb	r0, [r1, #4]
    ce40:	70e0      	strb	r0, [r4, #3]
    ce42:	7988      	ldrb	r0, [r1, #6]
    ce44:	7120      	strb	r0, [r4, #4]
    ce46:	88c8      	ldrh	r0, [r1, #6]
    ce48:	0a00      	lsrs	r0, r0, #8
    ce4a:	7160      	strb	r0, [r4, #5]
    ce4c:	7a08      	ldrb	r0, [r1, #8]
    ce4e:	71a0      	strb	r0, [r4, #6]
    ce50:	8908      	ldrh	r0, [r1, #8]
    ce52:	0a00      	lsrs	r0, r0, #8
    ce54:	71e0      	strb	r0, [r4, #7]
    ce56:	7a88      	ldrb	r0, [r1, #10]
    ce58:	7220      	strb	r0, [r4, #8]
    ce5a:	8948      	ldrh	r0, [r1, #10]
    ce5c:	0a00      	lsrs	r0, r0, #8
    ce5e:	7260      	strb	r0, [r4, #9]
    ce60:	7b08      	ldrb	r0, [r1, #12]
    ce62:	72a0      	strb	r0, [r4, #10]
    ce64:	8988      	ldrh	r0, [r1, #12]
    ce66:	0a00      	lsrs	r0, r0, #8
    ce68:	72e0      	strb	r0, [r4, #11]
    ce6a:	e0d8      	b.n	d01e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
    ce6c:	7022      	strb	r2, [r4, #0]
    ce6e:	70a6      	strb	r6, [r4, #2]
    ce70:	7908      	ldrb	r0, [r1, #4]
    ce72:	70e0      	strb	r0, [r4, #3]
    ce74:	8888      	ldrh	r0, [r1, #4]
    ce76:	0a00      	lsrs	r0, r0, #8
    ce78:	7120      	strb	r0, [r4, #4]
    ce7a:	f8d1 0006 	ldr.w	r0, [r1, #6]
    ce7e:	f8c4 0005 	str.w	r0, [r4, #5]
    ce82:	f8d1 000a 	ldr.w	r0, [r1, #10]
    ce86:	f8c4 0009 	str.w	r0, [r4, #9]
    ce8a:	89c8      	ldrh	r0, [r1, #14]
    ce8c:	f8a4 000d 	strh.w	r0, [r4, #13]
    ce90:	200d      	movs	r0, #13
    ce92:	e038      	b.n	cf06 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    ce94:	2011      	movs	r0, #17
    ce96:	e043      	b.n	cf20 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    ce98:	7026      	strb	r6, [r4, #0]
    ce9a:	7908      	ldrb	r0, [r1, #4]
    ce9c:	70a0      	strb	r0, [r4, #2]
    ce9e:	7948      	ldrb	r0, [r1, #5]
    cea0:	70e0      	strb	r0, [r4, #3]
    cea2:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    cea6:	0a00      	lsrs	r0, r0, #8
    cea8:	7120      	strb	r0, [r4, #4]
    ceaa:	79c8      	ldrb	r0, [r1, #7]
    ceac:	e058      	b.n	cf60 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    ceae:	2008      	movs	r0, #8
    ceb0:	7020      	strb	r0, [r4, #0]
    ceb2:	7908      	ldrb	r0, [r1, #4]
    ceb4:	70a0      	strb	r0, [r4, #2]
    ceb6:	7988      	ldrb	r0, [r1, #6]
    ceb8:	70e0      	strb	r0, [r4, #3]
    ceba:	88c8      	ldrh	r0, [r1, #6]
    cebc:	0a00      	lsrs	r0, r0, #8
    cebe:	7120      	strb	r0, [r4, #4]
    cec0:	7a08      	ldrb	r0, [r1, #8]
    cec2:	e04d      	b.n	cf60 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    cec4:	2030      	movs	r0, #48	; 0x30
    cec6:	7020      	strb	r0, [r4, #0]
    cec8:	7908      	ldrb	r0, [r1, #4]
    ceca:	70a0      	strb	r0, [r4, #2]
    cecc:	7988      	ldrb	r0, [r1, #6]
    cece:	70e0      	strb	r0, [r4, #3]
    ced0:	88c8      	ldrh	r0, [r1, #6]
    ced2:	0a00      	lsrs	r0, r0, #8
    ced4:	7120      	strb	r0, [r4, #4]
    ced6:	2003      	movs	r0, #3
    ced8:	e015      	b.n	cf06 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    ceda:	7022      	strb	r2, [r4, #0]
    cedc:	2007      	movs	r0, #7
    cede:	e044      	b.n	cf6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24e>
    cee0:	7022      	strb	r2, [r4, #0]
    cee2:	70a5      	strb	r5, [r4, #2]
    cee4:	7908      	ldrb	r0, [r1, #4]
    cee6:	70e0      	strb	r0, [r4, #3]
    cee8:	7988      	ldrb	r0, [r1, #6]
    ceea:	7120      	strb	r0, [r4, #4]
    ceec:	88c8      	ldrh	r0, [r1, #6]
    ceee:	0a00      	lsrs	r0, r0, #8
    cef0:	7160      	strb	r0, [r4, #5]
    cef2:	7a08      	ldrb	r0, [r1, #8]
    cef4:	71a0      	strb	r0, [r4, #6]
    cef6:	7a48      	ldrb	r0, [r1, #9]
    cef8:	e027      	b.n	cf4a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22e>
    cefa:	4620      	mov	r0, r4
    cefc:	1d09      	adds	r1, r1, #4
    cefe:	f7f7 fff3 	bl	4ee8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    cf02:	2800      	cmp	r0, #0
    cf04:	d001      	beq.n	cf0a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
    cf06:	7060      	strb	r0, [r4, #1]
    cf08:	1c80      	adds	r0, r0, #2
    cf0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cf0e:	e073      	b.n	cff8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    cf10:	e047      	b.n	cfa2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    cf12:	e028      	b.n	cf66 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    cf14:	e053      	b.n	cfbe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a2>
    cf16:	e061      	b.n	cfdc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    cf18:	e01a      	b.n	cf50 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    cf1a:	e009      	b.n	cf30 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x214>
    cf1c:	e7ff      	b.n	cf1e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x202>
    cf1e:	2057      	movs	r0, #87	; 0x57
    cf20:	7020      	strb	r0, [r4, #0]
    cf22:	7908      	ldrb	r0, [r1, #4]
    cf24:	70a0      	strb	r0, [r4, #2]
    cf26:	8888      	ldrh	r0, [r1, #4]
    cf28:	0a00      	lsrs	r0, r0, #8
    cf2a:	70e0      	strb	r0, [r4, #3]
    cf2c:	2002      	movs	r0, #2
    cf2e:	e7ea      	b.n	cf06 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cf30:	7022      	strb	r2, [r4, #0]
    cf32:	2012      	movs	r0, #18
    cf34:	70a0      	strb	r0, [r4, #2]
    cf36:	7908      	ldrb	r0, [r1, #4]
    cf38:	70e0      	strb	r0, [r4, #3]
    cf3a:	7948      	ldrb	r0, [r1, #5]
    cf3c:	7120      	strb	r0, [r4, #4]
    cf3e:	7988      	ldrb	r0, [r1, #6]
    cf40:	7160      	strb	r0, [r4, #5]
    cf42:	88c8      	ldrh	r0, [r1, #6]
    cf44:	0a00      	lsrs	r0, r0, #8
    cf46:	71a0      	strb	r0, [r4, #6]
    cf48:	7a08      	ldrb	r0, [r1, #8]
    cf4a:	71e0      	strb	r0, [r4, #7]
    cf4c:	2006      	movs	r0, #6
    cf4e:	e7da      	b.n	cf06 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cf50:	7023      	strb	r3, [r4, #0]
    cf52:	20a1      	movs	r0, #161	; 0xa1
    cf54:	70a0      	strb	r0, [r4, #2]
    cf56:	7908      	ldrb	r0, [r1, #4]
    cf58:	70e0      	strb	r0, [r4, #3]
    cf5a:	7948      	ldrb	r0, [r1, #5]
    cf5c:	7120      	strb	r0, [r4, #4]
    cf5e:	2000      	movs	r0, #0
    cf60:	7160      	strb	r0, [r4, #5]
    cf62:	2004      	movs	r0, #4
    cf64:	e7cf      	b.n	cf06 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cf66:	7023      	strb	r3, [r4, #0]
    cf68:	20a2      	movs	r0, #162	; 0xa2
    cf6a:	70a0      	strb	r0, [r4, #2]
    cf6c:	7908      	ldrb	r0, [r1, #4]
    cf6e:	70e0      	strb	r0, [r4, #3]
    cf70:	8888      	ldrh	r0, [r1, #4]
    cf72:	0a00      	lsrs	r0, r0, #8
    cf74:	7120      	strb	r0, [r4, #4]
    cf76:	7988      	ldrb	r0, [r1, #6]
    cf78:	7160      	strb	r0, [r4, #5]
    cf7a:	88c8      	ldrh	r0, [r1, #6]
    cf7c:	0a00      	lsrs	r0, r0, #8
    cf7e:	71a0      	strb	r0, [r4, #6]
    cf80:	7a08      	ldrb	r0, [r1, #8]
    cf82:	71e0      	strb	r0, [r4, #7]
    cf84:	8908      	ldrh	r0, [r1, #8]
    cf86:	0a00      	lsrs	r0, r0, #8
    cf88:	7220      	strb	r0, [r4, #8]
    cf8a:	7a88      	ldrb	r0, [r1, #10]
    cf8c:	7260      	strb	r0, [r4, #9]
    cf8e:	8948      	ldrh	r0, [r1, #10]
    cf90:	0a00      	lsrs	r0, r0, #8
    cf92:	72a0      	strb	r0, [r4, #10]
    cf94:	7b08      	ldrb	r0, [r1, #12]
    cf96:	72e0      	strb	r0, [r4, #11]
    cf98:	8988      	ldrh	r0, [r1, #12]
    cf9a:	0a00      	lsrs	r0, r0, #8
    cf9c:	7320      	strb	r0, [r4, #12]
    cf9e:	200b      	movs	r0, #11
    cfa0:	e7b1      	b.n	cf06 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cfa2:	7023      	strb	r3, [r4, #0]
    cfa4:	20a3      	movs	r0, #163	; 0xa3
    cfa6:	70a0      	strb	r0, [r4, #2]
    cfa8:	7908      	ldrb	r0, [r1, #4]
    cfaa:	70e0      	strb	r0, [r4, #3]
    cfac:	8888      	ldrh	r0, [r1, #4]
    cfae:	0a00      	lsrs	r0, r0, #8
    cfb0:	7120      	strb	r0, [r4, #4]
    cfb2:	7988      	ldrb	r0, [r1, #6]
    cfb4:	7160      	strb	r0, [r4, #5]
    cfb6:	79c8      	ldrb	r0, [r1, #7]
    cfb8:	71a0      	strb	r0, [r4, #6]
    cfba:	2005      	movs	r0, #5
    cfbc:	e7a3      	b.n	cf06 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cfbe:	7022      	strb	r2, [r4, #0]
    cfc0:	2013      	movs	r0, #19
    cfc2:	70a0      	strb	r0, [r4, #2]
    cfc4:	7908      	ldrb	r0, [r1, #4]
    cfc6:	70e0      	strb	r0, [r4, #3]
    cfc8:	7948      	ldrb	r0, [r1, #5]
    cfca:	7120      	strb	r0, [r4, #4]
    cfcc:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cfd0:	f8c4 0005 	str.w	r0, [r4, #5]
    cfd4:	8948      	ldrh	r0, [r1, #10]
    cfd6:	f8a4 0009 	strh.w	r0, [r4, #9]
    cfda:	e020      	b.n	d01e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
    cfdc:	7023      	strb	r3, [r4, #0]
    cfde:	20a4      	movs	r0, #164	; 0xa4
    cfe0:	70a0      	strb	r0, [r4, #2]
    cfe2:	7908      	ldrb	r0, [r1, #4]
    cfe4:	70e0      	strb	r0, [r4, #3]
    cfe6:	8888      	ldrh	r0, [r1, #4]
    cfe8:	0a00      	lsrs	r0, r0, #8
    cfea:	7120      	strb	r0, [r4, #4]
    cfec:	7988      	ldrb	r0, [r1, #6]
    cfee:	7160      	strb	r0, [r4, #5]
    cff0:	79c8      	ldrb	r0, [r1, #7]
    cff2:	71a0      	strb	r0, [r4, #6]
    cff4:	2007      	movs	r0, #7
    cff6:	e786      	b.n	cf06 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cff8:	7023      	strb	r3, [r4, #0]
    cffa:	2080      	movs	r0, #128	; 0x80
    cffc:	70a0      	strb	r0, [r4, #2]
    cffe:	888a      	ldrh	r2, [r1, #4]
    d000:	f8a4 2003 	strh.w	r2, [r4, #3]
    d004:	88ca      	ldrh	r2, [r1, #6]
    d006:	f8a4 2005 	strh.w	r2, [r4, #5]
    d00a:	7a0a      	ldrb	r2, [r1, #8]
    d00c:	71e2      	strb	r2, [r4, #7]
    d00e:	7a4a      	ldrb	r2, [r1, #9]
    d010:	8122      	strh	r2, [r4, #8]
    d012:	7a8a      	ldrb	r2, [r1, #10]
    d014:	72a2      	strb	r2, [r4, #10]
    d016:	7ac9      	ldrb	r1, [r1, #11]
    d018:	f001 0101 	and.w	r1, r1, #1
    d01c:	72e1      	strb	r1, [r4, #11]
    d01e:	200a      	movs	r0, #10
    d020:	e771      	b.n	cf06 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

0000d022 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    d022:	223e      	movs	r2, #62	; 0x3e
    d024:	7002      	strb	r2, [r0, #0]
    d026:	2201      	movs	r2, #1
    d028:	7082      	strb	r2, [r0, #2]
    d02a:	790a      	ldrb	r2, [r1, #4]
    d02c:	70c2      	strb	r2, [r0, #3]
    d02e:	798a      	ldrb	r2, [r1, #6]
    d030:	7102      	strb	r2, [r0, #4]
    d032:	88ca      	ldrh	r2, [r1, #6]
    d034:	0a12      	lsrs	r2, r2, #8
    d036:	7142      	strb	r2, [r0, #5]
    d038:	7a0a      	ldrb	r2, [r1, #8]
    d03a:	7182      	strb	r2, [r0, #6]
    d03c:	7a4a      	ldrb	r2, [r1, #9]
    d03e:	71c2      	strb	r2, [r0, #7]
    d040:	f8d1 200a 	ldr.w	r2, [r1, #10]
    d044:	6082      	str	r2, [r0, #8]
    d046:	89ca      	ldrh	r2, [r1, #14]
    d048:	8182      	strh	r2, [r0, #12]
    d04a:	7c0a      	ldrb	r2, [r1, #16]
    d04c:	7382      	strb	r2, [r0, #14]
    d04e:	8a0a      	ldrh	r2, [r1, #16]
    d050:	0a12      	lsrs	r2, r2, #8
    d052:	73c2      	strb	r2, [r0, #15]
    d054:	7c8a      	ldrb	r2, [r1, #18]
    d056:	7402      	strb	r2, [r0, #16]
    d058:	8a4a      	ldrh	r2, [r1, #18]
    d05a:	0a12      	lsrs	r2, r2, #8
    d05c:	7442      	strb	r2, [r0, #17]
    d05e:	7d0a      	ldrb	r2, [r1, #20]
    d060:	7482      	strb	r2, [r0, #18]
    d062:	8a8a      	ldrh	r2, [r1, #20]
    d064:	0a12      	lsrs	r2, r2, #8
    d066:	74c2      	strb	r2, [r0, #19]
    d068:	7d89      	ldrb	r1, [r1, #22]
    d06a:	7501      	strb	r1, [r0, #20]
    d06c:	2013      	movs	r0, #19
    d06e:	4770      	bx	lr

0000d070 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    d070:	223e      	movs	r2, #62	; 0x3e
    d072:	7002      	strb	r2, [r0, #0]
    d074:	2201      	movs	r2, #1
    d076:	7082      	strb	r2, [r0, #2]
    d078:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    d07c:	70c2      	strb	r2, [r0, #3]
    d07e:	788a      	ldrb	r2, [r1, #2]
    d080:	7102      	strb	r2, [r0, #4]
    d082:	884a      	ldrh	r2, [r1, #2]
    d084:	0a12      	lsrs	r2, r2, #8
    d086:	7142      	strb	r2, [r0, #5]
    d088:	790a      	ldrb	r2, [r1, #4]
    d08a:	7182      	strb	r2, [r0, #6]
    d08c:	794a      	ldrb	r2, [r1, #5]
    d08e:	71c2      	strb	r2, [r0, #7]
    d090:	f8d1 2006 	ldr.w	r2, [r1, #6]
    d094:	6082      	str	r2, [r0, #8]
    d096:	894a      	ldrh	r2, [r1, #10]
    d098:	8182      	strh	r2, [r0, #12]
    d09a:	7e0a      	ldrb	r2, [r1, #24]
    d09c:	7382      	strb	r2, [r0, #14]
    d09e:	8b0a      	ldrh	r2, [r1, #24]
    d0a0:	0a12      	lsrs	r2, r2, #8
    d0a2:	73c2      	strb	r2, [r0, #15]
    d0a4:	7e8a      	ldrb	r2, [r1, #26]
    d0a6:	7402      	strb	r2, [r0, #16]
    d0a8:	8b4a      	ldrh	r2, [r1, #26]
    d0aa:	0a12      	lsrs	r2, r2, #8
    d0ac:	7442      	strb	r2, [r0, #17]
    d0ae:	7f0a      	ldrb	r2, [r1, #28]
    d0b0:	7482      	strb	r2, [r0, #18]
    d0b2:	8b8a      	ldrh	r2, [r1, #28]
    d0b4:	0a12      	lsrs	r2, r2, #8
    d0b6:	74c2      	strb	r2, [r0, #19]
    d0b8:	7f89      	ldrb	r1, [r1, #30]
    d0ba:	7501      	strb	r1, [r0, #20]
    d0bc:	2113      	movs	r1, #19
    d0be:	7041      	strb	r1, [r0, #1]
    d0c0:	4608      	mov	r0, r1
    d0c2:	4770      	bx	lr

0000d0c4 <sdc_hci_data_get>:
    d0c4:	b510      	push	{r4, lr}
    d0c6:	b120      	cbz	r0, d0d2 <sdc_hci_data_get+0xe>
    d0c8:	f7ff fda4 	bl	cc14 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    d0cc:	b120      	cbz	r0, d0d8 <sdc_hci_data_get+0x14>
    d0ce:	2000      	movs	r0, #0
    d0d0:	bd10      	pop	{r4, pc}
    d0d2:	f06f 0015 	mvn.w	r0, #21
    d0d6:	bd10      	pop	{r4, pc}
    d0d8:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d0dc:	bd10      	pop	{r4, pc}

0000d0de <sdc_hci_data_put>:
    d0de:	b510      	push	{r4, lr}
    d0e0:	f06f 0415 	mvn.w	r4, #21
    d0e4:	b120      	cbz	r0, d0f0 <sdc_hci_data_put+0x12>
    d0e6:	f7ff fda3 	bl	cc30 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d0ea:	b108      	cbz	r0, d0f0 <sdc_hci_data_put+0x12>
    d0ec:	2000      	movs	r0, #0
    d0ee:	bd10      	pop	{r4, pc}
    d0f0:	4620      	mov	r0, r4
    d0f2:	bd10      	pop	{r4, pc}

0000d0f4 <sdc_hci_evt_get>:
    d0f4:	b510      	push	{r4, lr}
    d0f6:	b120      	cbz	r0, d102 <sdc_hci_evt_get+0xe>
    d0f8:	f7ff fda3 	bl	cc42 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    d0fc:	b120      	cbz	r0, d108 <sdc_hci_evt_get+0x14>
    d0fe:	2000      	movs	r0, #0
    d100:	bd10      	pop	{r4, pc}
    d102:	f06f 0015 	mvn.w	r0, #21
    d106:	bd10      	pop	{r4, pc}
    d108:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d10c:	bd10      	pop	{r4, pc}

0000d10e <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d10e:	f002 be4a 	b.w	fda6 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d112 <sdc_hci_cmd_cb_read_transmit_power_level>:
    d112:	f002 be8c 	b.w	fe2e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d116 <sdc_hci_cmd_cb_set_event_mask>:
    d116:	b510      	push	{r4, lr}
    d118:	f7f7 ff44 	bl	4fa4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d11c:	2000      	movs	r0, #0
    d11e:	bd10      	pop	{r4, pc}

0000d120 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d120:	b510      	push	{r4, lr}
    d122:	f7f7 ff4d 	bl	4fc0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d126:	2000      	movs	r0, #0
    d128:	bd10      	pop	{r4, pc}

0000d12a <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d12a:	f002 be9c 	b.w	fe66 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d12e <sdc_hci_cmd_vs_conn_event_extend>:
    d12e:	b508      	push	{r3, lr}
    d130:	7800      	ldrb	r0, [r0, #0]
    d132:	f88d 0000 	strb.w	r0, [sp]
    d136:	4668      	mov	r0, sp
    d138:	f002 fd4c 	bl	fbd4 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d13c:	bd08      	pop	{r3, pc}

0000d13e <sdc_hci_cmd_vs_conn_update>:
    d13e:	2001      	movs	r0, #1
    d140:	4770      	bx	lr

0000d142 <sdc_hci_cmd_vs_event_length_set>:
    d142:	f7fd be13 	b.w	ad6c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d146 <sdc_hci_cmd_vs_llpm_mode_set>:
    d146:	2001      	movs	r0, #1
    d148:	4770      	bx	lr

0000d14a <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d14a:	7800      	ldrb	r0, [r0, #0]
    d14c:	b100      	cbz	r0, d150 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d14e:	2001      	movs	r0, #1
    d150:	f002 bcc5 	b.w	fade <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d154 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d154:	b570      	push	{r4, r5, r6, lr}
    d156:	4605      	mov	r5, r0
    d158:	2210      	movs	r2, #16
    d15a:	2100      	movs	r1, #0
    d15c:	f7ff fc5c 	bl	ca18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d160:	2210      	movs	r2, #16
    d162:	2100      	movs	r1, #0
    d164:	f105 0010 	add.w	r0, r5, #16
    d168:	f7ff fc56 	bl	ca18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d16c:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d170:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d174:	1c40      	adds	r0, r0, #1
    d176:	d10b      	bne.n	d190 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d178:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d17c:	1c40      	adds	r0, r0, #1
    d17e:	d107      	bne.n	d190 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d180:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d184:	1c40      	adds	r0, r0, #1
    d186:	d103      	bne.n	d190 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d188:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d18c:	1c40      	adds	r0, r0, #1
    d18e:	d00b      	beq.n	d1a8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d190:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d194:	6128      	str	r0, [r5, #16]
    d196:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d19a:	6168      	str	r0, [r5, #20]
    d19c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d1a0:	61a8      	str	r0, [r5, #24]
    d1a2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d1a6:	61e8      	str	r0, [r5, #28]
    d1a8:	2000      	movs	r0, #0
    d1aa:	f7f8 fc91 	bl	5ad0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d1ae:	b918      	cbnz	r0, d1b8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d1b0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d1b4:	07c0      	lsls	r0, r0, #31
    d1b6:	d118      	bne.n	d1ea <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d1b8:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d1bc:	1c40      	adds	r0, r0, #1
    d1be:	d10b      	bne.n	d1d8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d1c0:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d1c4:	1c40      	adds	r0, r0, #1
    d1c6:	d107      	bne.n	d1d8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d1c8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d1cc:	1c40      	adds	r0, r0, #1
    d1ce:	d103      	bne.n	d1d8 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d1d0:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d1d4:	1c40      	adds	r0, r0, #1
    d1d6:	d008      	beq.n	d1ea <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d1d8:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d1dc:	6028      	str	r0, [r5, #0]
    d1de:	6860      	ldr	r0, [r4, #4]
    d1e0:	6068      	str	r0, [r5, #4]
    d1e2:	68a0      	ldr	r0, [r4, #8]
    d1e4:	60a8      	str	r0, [r5, #8]
    d1e6:	68e0      	ldr	r0, [r4, #12]
    d1e8:	60e8      	str	r0, [r5, #12]
    d1ea:	2000      	movs	r0, #0
    d1ec:	bd70      	pop	{r4, r5, r6, pc}

0000d1ee <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d1ee:	b570      	push	{r4, r5, r6, lr}
    d1f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d1f4:	4604      	mov	r4, r0
    d1f6:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d1fa:	1c40      	adds	r0, r0, #1
    d1fc:	d105      	bne.n	d20a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d1fe:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d202:	43c0      	mvns	r0, r0
    d204:	0400      	lsls	r0, r0, #16
    d206:	0c00      	lsrs	r0, r0, #16
    d208:	d03a      	beq.n	d280 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    d20a:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d20e:	07c0      	lsls	r0, r0, #31
    d210:	d036      	beq.n	d280 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    d212:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d216:	f8c4 0001 	str.w	r0, [r4, #1]
    d21a:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d21e:	f8a4 0005 	strh.w	r0, [r4, #5]
    d222:	79a0      	ldrb	r0, [r4, #6]
    d224:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d228:	71a0      	strb	r0, [r4, #6]
    d22a:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d22e:	1c40      	adds	r0, r0, #1
    d230:	d00f      	beq.n	d252 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    d232:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d236:	1c40      	adds	r0, r0, #1
    d238:	d00b      	beq.n	d252 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    d23a:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d23e:	1c40      	adds	r0, r0, #1
    d240:	d007      	beq.n	d252 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    d242:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d246:	1c40      	adds	r0, r0, #1
    d248:	d003      	beq.n	d252 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    d24a:	2000      	movs	r0, #0
    d24c:	f7f8 fc40 	bl	5ad0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d250:	b140      	cbz	r0, d264 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d252:	2210      	movs	r2, #16
    d254:	2100      	movs	r1, #0
    d256:	1de0      	adds	r0, r4, #7
    d258:	f7ff fbde 	bl	ca18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d25c:	2001      	movs	r0, #1
    d25e:	7020      	strb	r0, [r4, #0]
    d260:	2000      	movs	r0, #0
    d262:	bd70      	pop	{r4, r5, r6, pc}
    d264:	f855 0f90 	ldr.w	r0, [r5, #144]!
    d268:	f8c4 0007 	str.w	r0, [r4, #7]
    d26c:	6868      	ldr	r0, [r5, #4]
    d26e:	f8c4 000b 	str.w	r0, [r4, #11]
    d272:	68a8      	ldr	r0, [r5, #8]
    d274:	f8c4 000f 	str.w	r0, [r4, #15]
    d278:	68e8      	ldr	r0, [r5, #12]
    d27a:	f8c4 0013 	str.w	r0, [r4, #19]
    d27e:	e7ed      	b.n	d25c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    d280:	2000      	movs	r0, #0
    d282:	e7ec      	b.n	d25e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x70>

0000d284 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d284:	f002 bc98 	b.w	fbb8 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d288 <sdc_hci_cmd_ip_read_bd_addr>:
    d288:	f002 bd9e 	b.w	fdc8 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d28c <sdc_hci_cmd_ip_read_local_version_information>:
    d28c:	f7fd bd7c 	b.w	ad88 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d290 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    d290:	f002 b97c 	b.w	f58c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000d294 <sdc_hci_cmd_le_add_device_to_white_list>:
    d294:	f002 b995 	b.w	f5c2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d298 <sdc_hci_cmd_le_clear_resolving_list>:
    d298:	f002 b9aa 	b.w	f5f0 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000d29c <sdc_hci_cmd_le_clear_white_list>:
    d29c:	f002 b9b5 	b.w	f60a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d2a0 <sdc_hci_cmd_le_encrypt>:
    d2a0:	f002 b9bd 	b.w	f61e <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d2a4 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    d2a4:	8802      	ldrh	r2, [r0, #0]
    d2a6:	800a      	strh	r2, [r1, #0]
    d2a8:	f002 b9c2 	b.w	f630 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000d2ac <sdc_hci_cmd_le_long_term_key_request_reply>:
    d2ac:	8802      	ldrh	r2, [r0, #0]
    d2ae:	800a      	strh	r2, [r1, #0]
    d2b0:	f002 b9d7 	b.w	f662 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000d2b4 <sdc_hci_cmd_le_rand>:
    d2b4:	f002 b9ff 	b.w	f6b6 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d2b8 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    d2b8:	f002 ba03 	b.w	f6c2 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000d2bc <sdc_hci_cmd_le_read_buffer_size>:
    d2bc:	f7fd bcac 	b.w	ac18 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d2c0 <sdc_hci_cmd_le_read_channel_map>:
    d2c0:	f7fd bcb4 	b.w	ac2c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d2c4 <sdc_hci_cmd_le_read_max_data_length>:
    d2c4:	f002 ba06 	b.w	f6d4 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d2c8 <sdc_hci_cmd_le_read_phy>:
    d2c8:	f002 ba14 	b.w	f6f4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d2cc <sdc_hci_cmd_le_read_remote_features>:
    d2cc:	f7fd bcd8 	b.w	ac80 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d2d0 <sdc_hci_cmd_le_read_resolving_list_size>:
    d2d0:	f002 ba3b 	b.w	f74a <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000d2d4 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d2d4:	f7fd bcf4 	b.w	acc0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d2d8 <sdc_hci_cmd_le_read_transmit_power>:
    d2d8:	f002 ba3b 	b.w	f752 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d2dc <sdc_hci_cmd_le_read_white_list_size>:
    d2dc:	f002 ba42 	b.w	f764 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d2e0 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    d2e0:	f002 ba44 	b.w	f76c <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000d2e4 <sdc_hci_cmd_le_remove_device_from_white_list>:
    d2e4:	f002 ba5b 	b.w	f79e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d2e8 <sdc_hci_cmd_le_set_address_resolution_enable>:
    d2e8:	f002 ba6e 	b.w	f7c8 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000d2ec <sdc_hci_cmd_le_set_adv_data>:
    d2ec:	f002 ba7a 	b.w	f7e4 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000d2f0 <sdc_hci_cmd_le_set_adv_enable>:
    d2f0:	f002 ba8d 	b.w	f80e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000d2f4 <sdc_hci_cmd_le_set_adv_params>:
    d2f4:	f002 babe 	b.w	f874 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000d2f8 <sdc_hci_cmd_le_set_data_length>:
    d2f8:	f002 bb51 	b.w	f99e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d2fc <sdc_hci_cmd_le_set_default_phy>:
    d2fc:	f7fd bcf0 	b.w	ace0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d300 <sdc_hci_cmd_le_set_event_mask>:
    d300:	b510      	push	{r4, lr}
    d302:	f7f7 fe49 	bl	4f98 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d306:	2000      	movs	r0, #0
    d308:	bd10      	pop	{r4, pc}

0000d30a <sdc_hci_cmd_le_set_phy>:
    d30a:	f002 bb6f 	b.w	f9ec <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d30e <sdc_hci_cmd_le_set_privacy_mode>:
    d30e:	f002 bb8d 	b.w	fa2c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000d312 <sdc_hci_cmd_le_set_random_address>:
    d312:	f002 bba1 	b.w	fa58 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d316 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    d316:	f002 bbad 	b.w	fa74 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000d31a <sdc_hci_cmd_le_set_scan_response_data>:
    d31a:	f002 bbb4 	b.w	fa86 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000d31e <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d31e:	f002 bbc7 	b.w	fab0 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d322 <sdc_hci_cmd_lc_disconnect>:
    d322:	f002 b8df 	b.w	f4e4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d326 <sdc_hci_cmd_lc_read_remote_version_information>:
    d326:	f002 bd5b 	b.w	fde0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d32a:	b570      	push	{r4, r5, r6, lr}
    d32c:	880b      	ldrh	r3, [r1, #0]
    d32e:	7f04      	ldrb	r4, [r0, #28]
    d330:	f100 0524 	add.w	r5, r0, #36	; 0x24
    d334:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    d338:	8802      	ldrh	r2, [r0, #0]
    d33a:	4435      	add	r5, r6
    d33c:	1da4      	adds	r4, r4, #6
    d33e:	882d      	ldrh	r5, [r5, #0]
    d340:	4422      	add	r2, r4
    d342:	b292      	uxth	r2, r2
    d344:	4425      	add	r5, r4
    d346:	1e54      	subs	r4, r2, #1
    d348:	442c      	add	r4, r5
    d34a:	fb94 f4f2 	sdiv	r4, r4, r2
    d34e:	fb02 6204 	mla	r2, r2, r4, r6
    d352:	8840      	ldrh	r0, [r0, #2]
    d354:	b292      	uxth	r2, r2
    d356:	4290      	cmp	r0, r2
    d358:	d903      	bls.n	d362 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d35a:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d35e:	4310      	orrs	r0, r2
    d360:	e002      	b.n	d368 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d362:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d366:	4398      	bics	r0, r3
    d368:	8008      	strh	r0, [r1, #0]
    d36a:	bd70      	pop	{r4, r5, r6, pc}
    d36c:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    d370:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d374:	429a      	cmp	r2, r3
    d376:	d107      	bne.n	d388 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d378:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d37c:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d380:	4288      	cmp	r0, r1
    d382:	d001      	beq.n	d388 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d384:	2001      	movs	r0, #1
    d386:	4770      	bx	lr
    d388:	2000      	movs	r0, #0
    d38a:	4770      	bx	lr

0000d38c <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    d38c:	b570      	push	{r4, r5, r6, lr}
    d38e:	7f00      	ldrb	r0, [r0, #28]
    d390:	461c      	mov	r4, r3
    d392:	1d80      	adds	r0, r0, #6
    d394:	4408      	add	r0, r1
    d396:	4613      	mov	r3, r2
    d398:	8809      	ldrh	r1, [r1, #0]
    d39a:	9a04      	ldr	r2, [sp, #16]
    d39c:	1cc9      	adds	r1, r1, #3
    d39e:	b289      	uxth	r1, r1
    d3a0:	1915      	adds	r5, r2, r4
    d3a2:	1ec0      	subs	r0, r0, #3
    d3a4:	428d      	cmp	r5, r1
    d3a6:	d805      	bhi.n	d3b4 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    d3a8:	1881      	adds	r1, r0, r2
    d3aa:	4622      	mov	r2, r4
    d3ac:	4618      	mov	r0, r3
    d3ae:	f7ff fab9 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d3b2:	e000      	b.n	d3b6 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    d3b4:	2400      	movs	r4, #0
    d3b6:	4620      	mov	r0, r4
    d3b8:	bd70      	pop	{r4, r5, r6, pc}

0000d3ba <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    d3ba:	b570      	push	{r4, r5, r6, lr}
    d3bc:	7f00      	ldrb	r0, [r0, #28]
    d3be:	461c      	mov	r4, r3
    d3c0:	1d80      	adds	r0, r0, #6
    d3c2:	4408      	add	r0, r1
    d3c4:	4613      	mov	r3, r2
    d3c6:	8809      	ldrh	r1, [r1, #0]
    d3c8:	9a04      	ldr	r2, [sp, #16]
    d3ca:	1cc9      	adds	r1, r1, #3
    d3cc:	b289      	uxth	r1, r1
    d3ce:	1915      	adds	r5, r2, r4
    d3d0:	1ec0      	subs	r0, r0, #3
    d3d2:	428d      	cmp	r5, r1
    d3d4:	d805      	bhi.n	d3e2 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    d3d6:	4410      	add	r0, r2
    d3d8:	4622      	mov	r2, r4
    d3da:	4619      	mov	r1, r3
    d3dc:	f7ff faa2 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d3e0:	e000      	b.n	d3e4 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    d3e2:	2400      	movs	r4, #0
    d3e4:	4620      	mov	r0, r4
    d3e6:	bd70      	pop	{r4, r5, r6, pc}

0000d3e8 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d3e8:	8881      	ldrh	r1, [r0, #4]
    d3ea:	88c0      	ldrh	r0, [r0, #6]
    d3ec:	4288      	cmp	r0, r1
    d3ee:	d101      	bne.n	d3f4 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d3f0:	2001      	movs	r0, #1
    d3f2:	4770      	bx	lr
    d3f4:	2000      	movs	r0, #0
    d3f6:	4770      	bx	lr

0000d3f8 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    d3f8:	8881      	ldrh	r1, [r0, #4]
    d3fa:	8900      	ldrh	r0, [r0, #8]
    d3fc:	4288      	cmp	r0, r1
    d3fe:	d101      	bne.n	d404 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    d400:	2001      	movs	r0, #1
    d402:	4770      	bx	lr
    d404:	2000      	movs	r0, #0
    d406:	4770      	bx	lr

0000d408 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d408:	b570      	push	{r4, r5, r6, lr}
    d40a:	4604      	mov	r4, r0
    d40c:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d410:	8880      	ldrh	r0, [r0, #4]
    d412:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d416:	4401      	add	r1, r0
    d418:	8a20      	ldrh	r0, [r4, #16]
    d41a:	2800      	cmp	r0, #0
    d41c:	d01a      	beq.n	d454 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d41e:	89a2      	ldrh	r2, [r4, #12]
    d420:	2500      	movs	r5, #0
    d422:	4410      	add	r0, r2
    d424:	b280      	uxth	r0, r0
    d426:	81a0      	strh	r0, [r4, #12]
    d428:	880a      	ldrh	r2, [r1, #0]
    d42a:	4290      	cmp	r0, r2
    d42c:	d905      	bls.n	d43a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    d42e:	f240 1163 	movw	r1, #355	; 0x163
    d432:	f04f 0014 	mov.w	r0, #20
    d436:	f7f7 fc1f 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d43a:	d109      	bne.n	d450 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d43c:	69a0      	ldr	r0, [r4, #24]
    d43e:	b108      	cbz	r0, d444 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    d440:	7f40      	ldrb	r0, [r0, #29]
    d442:	7088      	strb	r0, [r1, #2]
    d444:	f104 0104 	add.w	r1, r4, #4
    d448:	4620      	mov	r0, r4
    d44a:	f7ff ff6e 	bl	d32a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d44e:	81a5      	strh	r5, [r4, #12]
    d450:	8225      	strh	r5, [r4, #16]
    d452:	2001      	movs	r0, #1
    d454:	bd70      	pop	{r4, r5, r6, pc}

0000d456 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d458:	4604      	mov	r4, r0
    d45a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    d45e:	88c0      	ldrh	r0, [r0, #6]
    d460:	460e      	mov	r6, r1
    d462:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d466:	8a60      	ldrh	r0, [r4, #18]
    d468:	19d9      	adds	r1, r3, r7
    d46a:	b108      	cbz	r0, d470 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    d46c:	42b0      	cmp	r0, r6
    d46e:	d201      	bcs.n	d474 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    d470:	2000      	movs	r0, #0
    d472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d474:	89e0      	ldrh	r0, [r4, #14]
    d476:	2500      	movs	r5, #0
    d478:	b140      	cbz	r0, d48c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    d47a:	f8b1 c000 	ldrh.w	ip, [r1]
    d47e:	4560      	cmp	r0, ip
    d480:	d008      	beq.n	d494 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d482:	f240 214b 	movw	r1, #587	; 0x24b
    d486:	2014      	movs	r0, #20
    d488:	f7f7 fbf6 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d48c:	7f60      	ldrb	r0, [r4, #29]
    d48e:	7088      	strb	r0, [r1, #2]
    d490:	800d      	strh	r5, [r1, #0]
    d492:	e00e      	b.n	d4b2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d494:	f894 c01c 	ldrb.w	ip, [r4, #28]
    d498:	4418      	add	r0, r3
    d49a:	f10c 0c06 	add.w	ip, ip, #6
    d49e:	44bc      	add	ip, r7
    d4a0:	4460      	add	r0, ip
    d4a2:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    d4a6:	f820 cc03 	strh.w	ip, [r0, #-3]
    d4aa:	f894 c020 	ldrb.w	ip, [r4, #32]
    d4ae:	f800 cc01 	strb.w	ip, [r0, #-1]
    d4b2:	89e0      	ldrh	r0, [r4, #14]
    d4b4:	4430      	add	r0, r6
    d4b6:	81e0      	strh	r0, [r4, #14]
    d4b8:	8808      	ldrh	r0, [r1, #0]
    d4ba:	4430      	add	r0, r6
    d4bc:	8008      	strh	r0, [r1, #0]
    d4be:	b19a      	cbz	r2, d4e8 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    d4c0:	1da1      	adds	r1, r4, #6
    d4c2:	4620      	mov	r0, r4
    d4c4:	f7ff ff31 	bl	d32a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d4c8:	81e5      	strh	r5, [r4, #14]
    d4ca:	7f60      	ldrb	r0, [r4, #29]
    d4cc:	1c40      	adds	r0, r0, #1
    d4ce:	7760      	strb	r0, [r4, #29]
    d4d0:	7da0      	ldrb	r0, [r4, #22]
    d4d2:	f88d 0000 	strb.w	r0, [sp]
    d4d6:	9800      	ldr	r0, [sp, #0]
    d4d8:	9000      	str	r0, [sp, #0]
    d4da:	f89d 0000 	ldrb.w	r0, [sp]
    d4de:	b178      	cbz	r0, d500 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d4e0:	88e0      	ldrh	r0, [r4, #6]
    d4e2:	82a0      	strh	r0, [r4, #20]
    d4e4:	75a5      	strb	r5, [r4, #22]
    d4e6:	e00b      	b.n	d500 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d4e8:	7f20      	ldrb	r0, [r4, #28]
    d4ea:	89e1      	ldrh	r1, [r4, #14]
    d4ec:	1d80      	adds	r0, r0, #6
    d4ee:	4438      	add	r0, r7
    d4f0:	4419      	add	r1, r3
    d4f2:	4408      	add	r0, r1
    d4f4:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d4f8:	83e1      	strh	r1, [r4, #30]
    d4fa:	7880      	ldrb	r0, [r0, #2]
    d4fc:	f884 0020 	strb.w	r0, [r4, #32]
    d500:	8265      	strh	r5, [r4, #18]
    d502:	2001      	movs	r0, #1
    d504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d506 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d506:	b510      	push	{r4, lr}
    d508:	4604      	mov	r4, r0
    d50a:	88c0      	ldrh	r0, [r0, #6]
    d50c:	88a1      	ldrh	r1, [r4, #4]
    d50e:	4281      	cmp	r1, r0
    d510:	d007      	beq.n	d522 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d512:	89a0      	ldrh	r0, [r4, #12]
    d514:	b928      	cbnz	r0, d522 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d516:	8a20      	ldrh	r0, [r4, #16]
    d518:	b918      	cbnz	r0, d522 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d51a:	88a0      	ldrh	r0, [r4, #4]
    d51c:	8aa1      	ldrh	r1, [r4, #20]
    d51e:	4288      	cmp	r0, r1
    d520:	d101      	bne.n	d526 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    d522:	2000      	movs	r0, #0
    d524:	bd10      	pop	{r4, pc}
    d526:	1d21      	adds	r1, r4, #4
    d528:	4620      	mov	r0, r4
    d52a:	f7ff fefe 	bl	d32a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d52e:	2000      	movs	r0, #0
    d530:	8220      	strh	r0, [r4, #16]
    d532:	2001      	movs	r0, #1
    d534:	bd10      	pop	{r4, pc}

0000d536 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d536:	b510      	push	{r4, lr}
    d538:	4604      	mov	r4, r0
    d53a:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d53e:	88c0      	ldrh	r0, [r0, #6]
    d540:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d544:	4402      	add	r2, r0
    d546:	8820      	ldrh	r0, [r4, #0]
    d548:	2845      	cmp	r0, #69	; 0x45
    d54a:	d200      	bcs.n	d54e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d54c:	2045      	movs	r0, #69	; 0x45
    d54e:	4288      	cmp	r0, r1
    d550:	d204      	bcs.n	d55c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d552:	f240 1119 	movw	r1, #281	; 0x119
    d556:	2014      	movs	r0, #20
    d558:	f7f7 fb8e 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d55c:	7de0      	ldrb	r0, [r4, #23]
    d55e:	2800      	cmp	r0, #0
    d560:	d003      	beq.n	d56a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d562:	8810      	ldrh	r0, [r2, #0]
    d564:	4288      	cmp	r0, r1
    d566:	d201      	bcs.n	d56c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d568:	2000      	movs	r0, #0
    d56a:	bd10      	pop	{r4, pc}
    d56c:	8011      	strh	r1, [r2, #0]
    d56e:	1da1      	adds	r1, r4, #6
    d570:	4620      	mov	r0, r4
    d572:	f7ff feda 	bl	d32a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d576:	2000      	movs	r0, #0
    d578:	75e0      	strb	r0, [r4, #23]
    d57a:	2001      	movs	r0, #1
    d57c:	bd10      	pop	{r4, pc}

0000d57e <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    d57e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d582:	8941      	ldrh	r1, [r0, #10]
    d584:	8886      	ldrh	r6, [r0, #4]
    d586:	4604      	mov	r4, r0
    d588:	2500      	movs	r5, #0
    d58a:	f100 070a 	add.w	r7, r0, #10
    d58e:	e006      	b.n	d59e <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    d590:	4639      	mov	r1, r7
    d592:	4620      	mov	r0, r4
    d594:	f7ff fec9 	bl	d32a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d598:	1c6d      	adds	r5, r5, #1
    d59a:	8961      	ldrh	r1, [r4, #10]
    d59c:	b2ad      	uxth	r5, r5
    d59e:	42b1      	cmp	r1, r6
    d5a0:	d1f6      	bne.n	d590 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    d5a2:	4628      	mov	r0, r5
    d5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d5a8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d5a8:	b530      	push	{r4, r5, lr}
    d5aa:	88c4      	ldrh	r4, [r0, #6]
    d5ac:	8881      	ldrh	r1, [r0, #4]
    d5ae:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d5b2:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d5b6:	4413      	add	r3, r2
    d5b8:	8882      	ldrh	r2, [r0, #4]
    d5ba:	8a85      	ldrh	r5, [r0, #20]
    d5bc:	42aa      	cmp	r2, r5
    d5be:	d012      	beq.n	d5e6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d5c0:	42a1      	cmp	r1, r4
    d5c2:	d010      	beq.n	d5e6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d5c4:	8981      	ldrh	r1, [r0, #12]
    d5c6:	b971      	cbnz	r1, d5e6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d5c8:	6982      	ldr	r2, [r0, #24]
    d5ca:	b172      	cbz	r2, d5ea <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d5cc:	4610      	mov	r0, r2
    d5ce:	f7ff ff13 	bl	d3f8 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    d5d2:	b950      	cbnz	r0, d5ea <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d5d4:	8910      	ldrh	r0, [r2, #8]
    d5d6:	3224      	adds	r2, #36	; 0x24
    d5d8:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d5dc:	4410      	add	r0, r2
    d5de:	7899      	ldrb	r1, [r3, #2]
    d5e0:	7880      	ldrb	r0, [r0, #2]
    d5e2:	4288      	cmp	r0, r1
    d5e4:	d101      	bne.n	d5ea <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d5e6:	2000      	movs	r0, #0
    d5e8:	bd30      	pop	{r4, r5, pc}
    d5ea:	4618      	mov	r0, r3
    d5ec:	bd30      	pop	{r4, r5, pc}

0000d5ee <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d5ee:	7f00      	ldrb	r0, [r0, #28]
    d5f0:	1d80      	adds	r0, r0, #6
    d5f2:	4408      	add	r0, r1
    d5f4:	1ec0      	subs	r0, r0, #3
    d5f6:	6010      	str	r0, [r2, #0]
    d5f8:	8808      	ldrh	r0, [r1, #0]
    d5fa:	4770      	bx	lr

0000d5fc <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d600:	460e      	mov	r6, r1
    d602:	88c1      	ldrh	r1, [r0, #6]
    d604:	8902      	ldrh	r2, [r0, #8]
    d606:	4604      	mov	r4, r0
    d608:	f100 0824 	add.w	r8, r0, #36	; 0x24
    d60c:	8800      	ldrh	r0, [r0, #0]
    d60e:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    d612:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    d616:	2845      	cmp	r0, #69	; 0x45
    d618:	d200      	bcs.n	d61c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d61a:	2045      	movs	r0, #69	; 0x45
    d61c:	42b0      	cmp	r0, r6
    d61e:	d203      	bcs.n	d628 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d620:	21db      	movs	r1, #219	; 0xdb
    d622:	2014      	movs	r0, #20
    d624:	f7f7 fb28 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d628:	4610      	mov	r0, r2
    d62a:	f7ff fe9f 	bl	d36c <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d62e:	b110      	cbz	r0, d636 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d630:	2000      	movs	r0, #0
    d632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d636:	42af      	cmp	r7, r5
    d638:	d908      	bls.n	d64c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d63a:	7f21      	ldrb	r1, [r4, #28]
    d63c:	1b78      	subs	r0, r7, r5
    d63e:	1a40      	subs	r0, r0, r1
    d640:	1f80      	subs	r0, r0, #6
    d642:	4286      	cmp	r6, r0
    d644:	dd02      	ble.n	d64c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d646:	2000      	movs	r0, #0
    d648:	75e0      	strb	r0, [r4, #23]
    d64a:	e7f1      	b.n	d630 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d64c:	eb08 0005 	add.w	r0, r8, r5
    d650:	2101      	movs	r1, #1
    d652:	8006      	strh	r6, [r0, #0]
    d654:	75e1      	strb	r1, [r4, #23]
    d656:	e7ec      	b.n	d632 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d658 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d658:	b538      	push	{r3, r4, r5, lr}
    d65a:	88c4      	ldrh	r4, [r0, #6]
    d65c:	8881      	ldrh	r1, [r0, #4]
    d65e:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d662:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d666:	441a      	add	r2, r3
    d668:	42a1      	cmp	r1, r4
    d66a:	d010      	beq.n	d68e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d66c:	8983      	ldrh	r3, [r0, #12]
    d66e:	8a05      	ldrh	r5, [r0, #16]
    d670:	8812      	ldrh	r2, [r2, #0]
    d672:	442b      	add	r3, r5
    d674:	4293      	cmp	r3, r2
    d676:	d308      	bcc.n	d68a <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d678:	f8ad 1000 	strh.w	r1, [sp]
    d67c:	4669      	mov	r1, sp
    d67e:	f7ff fe54 	bl	d32a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d682:	f8bd 0000 	ldrh.w	r0, [sp]
    d686:	42a0      	cmp	r0, r4
    d688:	d001      	beq.n	d68e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d68a:	2001      	movs	r0, #1
    d68c:	bd38      	pop	{r3, r4, r5, pc}
    d68e:	2000      	movs	r0, #0
    d690:	bd38      	pop	{r3, r4, r5, pc}

0000d692 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d692:	b570      	push	{r4, r5, r6, lr}
    d694:	88c6      	ldrh	r6, [r0, #6]
    d696:	8885      	ldrh	r5, [r0, #4]
    d698:	4603      	mov	r3, r0
    d69a:	f100 0424 	add.w	r4, r0, #36	; 0x24
    d69e:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    d6a2:	4420      	add	r0, r4
    d6a4:	42b5      	cmp	r5, r6
    d6a6:	d102      	bne.n	d6ae <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d6a8:	2000      	movs	r0, #0
    d6aa:	8218      	strh	r0, [r3, #16]
    d6ac:	bd70      	pop	{r4, r5, r6, pc}
    d6ae:	8804      	ldrh	r4, [r0, #0]
    d6b0:	899d      	ldrh	r5, [r3, #12]
    d6b2:	7f1e      	ldrb	r6, [r3, #28]
    d6b4:	1b64      	subs	r4, r4, r5
    d6b6:	4435      	add	r5, r6
    d6b8:	4428      	add	r0, r5
    d6ba:	880d      	ldrh	r5, [r1, #0]
    d6bc:	b2a4      	uxth	r4, r4
    d6be:	1cc0      	adds	r0, r0, #3
    d6c0:	42a5      	cmp	r5, r4
    d6c2:	d900      	bls.n	d6c6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d6c4:	800c      	strh	r4, [r1, #0]
    d6c6:	899c      	ldrh	r4, [r3, #12]
    d6c8:	b124      	cbz	r4, d6d4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d6ca:	2400      	movs	r4, #0
    d6cc:	7014      	strb	r4, [r2, #0]
    d6ce:	8809      	ldrh	r1, [r1, #0]
    d6d0:	8219      	strh	r1, [r3, #16]
    d6d2:	bd70      	pop	{r4, r5, r6, pc}
    d6d4:	2401      	movs	r4, #1
    d6d6:	e7f9      	b.n	d6cc <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d6d8 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    d6d8:	b508      	push	{r3, lr}
    d6da:	8a81      	ldrh	r1, [r0, #20]
    d6dc:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d6e0:	3aff      	subs	r2, #255	; 0xff
    d6e2:	d008      	beq.n	d6f6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    d6e4:	7d82      	ldrb	r2, [r0, #22]
    d6e6:	f88d 2000 	strb.w	r2, [sp]
    d6ea:	9a00      	ldr	r2, [sp, #0]
    d6ec:	9200      	str	r2, [sp, #0]
    d6ee:	f89d 2000 	ldrb.w	r2, [sp]
    d6f2:	b952      	cbnz	r2, d70a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    d6f4:	e004      	b.n	d700 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    d6f6:	f44f 7162 	mov.w	r1, #904	; 0x388
    d6fa:	2014      	movs	r0, #20
    d6fc:	f7f7 fabc 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d700:	8880      	ldrh	r0, [r0, #4]
    d702:	4281      	cmp	r1, r0
    d704:	d101      	bne.n	d70a <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    d706:	2000      	movs	r0, #0
    d708:	bd08      	pop	{r3, pc}
    d70a:	2001      	movs	r0, #1
    d70c:	bd08      	pop	{r3, pc}

0000d70e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    d70e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d712:	8281      	strh	r1, [r0, #20]
    d714:	2100      	movs	r1, #0
    d716:	7581      	strb	r1, [r0, #22]
    d718:	4770      	bx	lr

0000d71a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    d71a:	b510      	push	{r4, lr}
    d71c:	8a81      	ldrh	r1, [r0, #20]
    d71e:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d722:	3aff      	subs	r2, #255	; 0xff
    d724:	d004      	beq.n	d730 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    d726:	f44f 7159 	mov.w	r1, #868	; 0x364
    d72a:	2014      	movs	r0, #20
    d72c:	f7f7 faa4 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d730:	88c1      	ldrh	r1, [r0, #6]
    d732:	8281      	strh	r1, [r0, #20]
    d734:	89c1      	ldrh	r1, [r0, #14]
    d736:	b109      	cbz	r1, d73c <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    d738:	2101      	movs	r1, #1
    d73a:	e000      	b.n	d73e <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    d73c:	2100      	movs	r1, #0
    d73e:	7581      	strb	r1, [r0, #22]
    d740:	bd10      	pop	{r4, pc}

0000d742 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d746:	461d      	mov	r5, r3
    d748:	4616      	mov	r6, r2
    d74a:	9f06      	ldr	r7, [sp, #24]
    d74c:	460b      	mov	r3, r1
    d74e:	4604      	mov	r4, r0
    d750:	463a      	mov	r2, r7
    d752:	4629      	mov	r1, r5
    d754:	4630      	mov	r0, r6
    d756:	f000 f84f 	bl	d7f8 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d75a:	4283      	cmp	r3, r0
    d75c:	d201      	bcs.n	d762 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d75e:	21a8      	movs	r1, #168	; 0xa8
    d760:	e018      	b.n	d794 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d762:	1ce0      	adds	r0, r4, #3
    d764:	f020 0103 	bic.w	r1, r0, #3
    d768:	4620      	mov	r0, r4
    d76a:	42a1      	cmp	r1, r4
    d76c:	d001      	beq.n	d772 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    d76e:	21a9      	movs	r1, #169	; 0xa9
    d770:	e010      	b.n	d794 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d772:	2224      	movs	r2, #36	; 0x24
    d774:	2100      	movs	r1, #0
    d776:	f7ff f94f 	bl	ca18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d77a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d77e:	82a0      	strh	r0, [r4, #20]
    d780:	19a8      	adds	r0, r5, r6
    d782:	1d80      	adds	r0, r0, #6
    d784:	4378      	muls	r0, r7
    d786:	b280      	uxth	r0, r0
    d788:	7725      	strb	r5, [r4, #28]
    d78a:	8060      	strh	r0, [r4, #2]
    d78c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d790:	d903      	bls.n	d79a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    d792:	21af      	movs	r1, #175	; 0xaf
    d794:	2014      	movs	r0, #20
    d796:	f7f7 fa6f 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d79a:	8026      	strh	r6, [r4, #0]
    d79c:	2000      	movs	r0, #0
    d79e:	7760      	strb	r0, [r4, #29]
    d7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d7a4 <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    d7a4:	6181      	str	r1, [r0, #24]
    d7a6:	6188      	str	r0, [r1, #24]
    d7a8:	4770      	bx	lr

0000d7aa <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d7aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d7ae:	460b      	mov	r3, r1
    d7b0:	4604      	mov	r4, r0
    d7b2:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d7b6:	8905      	ldrh	r5, [r0, #8]
    d7b8:	8946      	ldrh	r6, [r0, #10]
    d7ba:	8880      	ldrh	r0, [r0, #4]
    d7bc:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    d7c0:	4439      	add	r1, r7
    d7c2:	460f      	mov	r7, r1
    d7c4:	4285      	cmp	r5, r0
    d7c6:	d102      	bne.n	d7ce <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    d7c8:	2000      	movs	r0, #0
    d7ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d7ce:	b10a      	cbz	r2, d7d4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    d7d0:	1cc8      	adds	r0, r1, #3
    d7d2:	6010      	str	r0, [r2, #0]
    d7d4:	b123      	cbz	r3, d7e0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    d7d6:	7f22      	ldrb	r2, [r4, #28]
    d7d8:	1cf9      	adds	r1, r7, #3
    d7da:	4618      	mov	r0, r3
    d7dc:	f7ff f8a2 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d7e0:	883f      	ldrh	r7, [r7, #0]
    d7e2:	f104 0108 	add.w	r1, r4, #8
    d7e6:	4620      	mov	r0, r4
    d7e8:	f7ff fd9f 	bl	d32a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d7ec:	42b5      	cmp	r5, r6
    d7ee:	d101      	bne.n	d7f4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    d7f0:	8920      	ldrh	r0, [r4, #8]
    d7f2:	8160      	strh	r0, [r4, #10]
    d7f4:	4638      	mov	r0, r7
    d7f6:	e7e8      	b.n	d7ca <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000d7f8 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d7f8:	4401      	add	r1, r0
    d7fa:	1d89      	adds	r1, r1, #6
    d7fc:	4351      	muls	r1, r2
    d7fe:	b28a      	uxth	r2, r1
    d800:	2100      	movs	r1, #0
    d802:	2845      	cmp	r0, #69	; 0x45
    d804:	d201      	bcs.n	d80a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    d806:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    d80a:	3224      	adds	r2, #36	; 0x24
    d80c:	1850      	adds	r0, r2, r1
    d80e:	b280      	uxth	r0, r0
    d810:	4770      	bx	lr

0000d812 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d812:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d816:	4688      	mov	r8, r1
    d818:	88c1      	ldrh	r1, [r0, #6]
    d81a:	4604      	mov	r4, r0
    d81c:	8900      	ldrh	r0, [r0, #8]
    d81e:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    d822:	f104 0524 	add.w	r5, r4, #36	; 0x24
    d826:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d82a:	eb05 0906 	add.w	r9, r5, r6
    d82e:	f7ff fd9d 	bl	d36c <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d832:	2200      	movs	r2, #0
    d834:	b998      	cbnz	r0, d85e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d836:	8820      	ldrh	r0, [r4, #0]
    d838:	2845      	cmp	r0, #69	; 0x45
    d83a:	d200      	bcs.n	d83e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d83c:	2045      	movs	r0, #69	; 0x45
    d83e:	42b7      	cmp	r7, r6
    d840:	d906      	bls.n	d850 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d842:	7f23      	ldrb	r3, [r4, #28]
    d844:	1bb9      	subs	r1, r7, r6
    d846:	1ac9      	subs	r1, r1, r3
    d848:	1f89      	subs	r1, r1, #6
    d84a:	4281      	cmp	r1, r0
    d84c:	da00      	bge.n	d850 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d84e:	4608      	mov	r0, r1
    d850:	89e1      	ldrh	r1, [r4, #14]
    d852:	b111      	cbz	r1, d85a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d854:	f8b9 3000 	ldrh.w	r3, [r9]
    d858:	1ac0      	subs	r0, r0, r3
    d85a:	4540      	cmp	r0, r8
    d85c:	da03      	bge.n	d866 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d85e:	8262      	strh	r2, [r4, #18]
    d860:	2000      	movs	r0, #0
    d862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d866:	7f20      	ldrb	r0, [r4, #28]
    d868:	4429      	add	r1, r5
    d86a:	1d80      	adds	r0, r0, #6
    d86c:	4430      	add	r0, r6
    d86e:	4408      	add	r0, r1
    d870:	f8a4 8012 	strh.w	r8, [r4, #18]
    d874:	1ec0      	subs	r0, r0, #3
    d876:	e7f4      	b.n	d862 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d878 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    d878:	2100      	movs	r1, #0
    d87a:	81c1      	strh	r1, [r0, #14]
    d87c:	8241      	strh	r1, [r0, #18]
    d87e:	7581      	strb	r1, [r0, #22]
    d880:	4770      	bx	lr

0000d882 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d882:	b570      	push	{r4, r5, r6, lr}
    d884:	2300      	movs	r3, #0
    d886:	2908      	cmp	r1, #8
    d888:	d204      	bcs.n	d894 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    d88a:	f240 11cb 	movw	r1, #459	; 0x1cb
    d88e:	2015      	movs	r0, #21
    d890:	f7f7 f9f2 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d894:	6802      	ldr	r2, [r0, #0]
    d896:	b90a      	cbnz	r2, d89c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d898:	e01e      	b.n	d8d8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d89a:	4610      	mov	r0, r2
    d89c:	6802      	ldr	r2, [r0, #0]
    d89e:	8893      	ldrh	r3, [r2, #4]
    d8a0:	428b      	cmp	r3, r1
    d8a2:	d002      	beq.n	d8aa <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    d8a4:	6813      	ldr	r3, [r2, #0]
    d8a6:	2b00      	cmp	r3, #0
    d8a8:	d1f7      	bne.n	d89a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    d8aa:	8894      	ldrh	r4, [r2, #4]
    d8ac:	4613      	mov	r3, r2
    d8ae:	428c      	cmp	r4, r1
    d8b0:	d101      	bne.n	d8b6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    d8b2:	6811      	ldr	r1, [r2, #0]
    d8b4:	e00d      	b.n	d8d2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    d8b6:	f101 0508 	add.w	r5, r1, #8
    d8ba:	b2ae      	uxth	r6, r5
    d8bc:	2500      	movs	r5, #0
    d8be:	42b4      	cmp	r4, r6
    d8c0:	d309      	bcc.n	d8d6 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    d8c2:	1a64      	subs	r4, r4, r1
    d8c4:	4411      	add	r1, r2
    d8c6:	600d      	str	r5, [r1, #0]
    d8c8:	808c      	strh	r4, [r1, #4]
    d8ca:	6802      	ldr	r2, [r0, #0]
    d8cc:	6812      	ldr	r2, [r2, #0]
    d8ce:	6002      	str	r2, [r0, #0]
    d8d0:	600a      	str	r2, [r1, #0]
    d8d2:	6001      	str	r1, [r0, #0]
    d8d4:	e000      	b.n	d8d8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d8d6:	2300      	movs	r3, #0
    d8d8:	4618      	mov	r0, r3
    d8da:	bd70      	pop	{r4, r5, r6, pc}

0000d8dc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d8dc:	b510      	push	{r4, lr}
    d8de:	000c      	movs	r4, r1
    d8e0:	d006      	beq.n	d8f0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    d8e2:	2c08      	cmp	r4, #8
    d8e4:	d209      	bcs.n	d8fa <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    d8e6:	f240 1195 	movw	r1, #405	; 0x195
    d8ea:	2015      	movs	r0, #21
    d8ec:	f7f7 f9c4 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d8f0:	b108      	cbz	r0, d8f6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d8f2:	2100      	movs	r1, #0
    d8f4:	6001      	str	r1, [r0, #0]
    d8f6:	2000      	movs	r0, #0
    d8f8:	bd10      	pop	{r4, pc}
    d8fa:	b118      	cbz	r0, d904 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    d8fc:	b2a1      	uxth	r1, r4
    d8fe:	6800      	ldr	r0, [r0, #0]
    d900:	f000 f814 	bl	d92c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d904:	1d20      	adds	r0, r4, #4
    d906:	bd10      	pop	{r4, pc}

0000d908 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d908:	2100      	movs	r1, #0
    d90a:	6802      	ldr	r2, [r0, #0]
    d90c:	e003      	b.n	d916 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d90e:	8893      	ldrh	r3, [r2, #4]
    d910:	6812      	ldr	r2, [r2, #0]
    d912:	4419      	add	r1, r3
    d914:	b289      	uxth	r1, r1
    d916:	2a00      	cmp	r2, #0
    d918:	d1f9      	bne.n	d90e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d91a:	f000 b807 	b.w	d92c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d91e <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d91e:	2300      	movs	r3, #0
    d920:	600b      	str	r3, [r1, #0]
    d922:	808a      	strh	r2, [r1, #4]
    d924:	6802      	ldr	r2, [r0, #0]
    d926:	600a      	str	r2, [r1, #0]
    d928:	6001      	str	r1, [r0, #0]
    d92a:	4770      	bx	lr
    d92c:	2300      	movs	r3, #0
    d92e:	6043      	str	r3, [r0, #4]
    d930:	1d02      	adds	r2, r0, #4
    d932:	8101      	strh	r1, [r0, #8]
    d934:	6002      	str	r2, [r0, #0]
    d936:	4770      	bx	lr

0000d938 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    d938:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    d93c:	3bff      	subs	r3, #255	; 0xff
    d93e:	d001      	beq.n	d944 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    d940:	2902      	cmp	r1, #2
    d942:	d301      	bcc.n	d948 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    d944:	2000      	movs	r0, #0
    d946:	4770      	bx	lr
    d948:	f7f7 bc5e 	b.w	5208 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000d94c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d94c:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d950:	3aff      	subs	r2, #255	; 0xff
    d952:	d001      	beq.n	d958 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    d954:	2902      	cmp	r1, #2
    d956:	d301      	bcc.n	d95c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    d958:	2000      	movs	r0, #0
    d95a:	4770      	bx	lr
    d95c:	f7f7 bc8e 	b.w	527c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000d960 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    d960:	b570      	push	{r4, r5, r6, lr}
    d962:	4605      	mov	r5, r0
    d964:	460c      	mov	r4, r1
    d966:	4608      	mov	r0, r1
    d968:	f000 f96e 	bl	dc48 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    d96c:	b108      	cbz	r0, d972 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    d96e:	2010      	movs	r0, #16
    d970:	bd70      	pop	{r4, r5, r6, pc}
    d972:	2d02      	cmp	r5, #2
    d974:	d301      	bcc.n	d97a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    d976:	2007      	movs	r0, #7
    d978:	bd70      	pop	{r4, r5, r6, pc}
    d97a:	7025      	strb	r5, [r4, #0]
    d97c:	2000      	movs	r0, #0
    d97e:	8060      	strh	r0, [r4, #2]
    d980:	bd70      	pop	{r4, r5, r6, pc}
    d982:	b510      	push	{r4, lr}
    d984:	4604      	mov	r4, r0
    d986:	f7f7 fcc5 	bl	5314 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    d98a:	42a0      	cmp	r0, r4
    d98c:	d901      	bls.n	d992 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    d98e:	2001      	movs	r0, #1
    d990:	bd10      	pop	{r4, pc}
    d992:	2000      	movs	r0, #0
    d994:	bd10      	pop	{r4, pc}
    d996:	4770      	bx	lr

0000d998 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d998:	b570      	push	{r4, r5, r6, lr}
    d99a:	460e      	mov	r6, r1
    d99c:	461d      	mov	r5, r3
    d99e:	4611      	mov	r1, r2
    d9a0:	f000 f811 	bl	d9c6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    d9a4:	4604      	mov	r4, r0
    d9a6:	4629      	mov	r1, r5
    d9a8:	4630      	mov	r0, r6
    d9aa:	f000 f803 	bl	d9b4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    d9ae:	4420      	add	r0, r4
    d9b0:	1d00      	adds	r0, r0, #4
    d9b2:	bd70      	pop	{r4, r5, r6, pc}
    d9b4:	b510      	push	{r4, lr}
    d9b6:	460a      	mov	r2, r1
    d9b8:	2101      	movs	r1, #1
    d9ba:	f7ff ff1d 	bl	d7f8 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d9be:	1cc0      	adds	r0, r0, #3
    d9c0:	f020 0003 	bic.w	r0, r0, #3
    d9c4:	bd10      	pop	{r4, pc}
    d9c6:	b510      	push	{r4, lr}
    d9c8:	460a      	mov	r2, r1
    d9ca:	2101      	movs	r1, #1
    d9cc:	f7ff ff14 	bl	d7f8 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d9d0:	1cc0      	adds	r0, r0, #3
    d9d2:	f020 0003 	bic.w	r0, r0, #3
    d9d6:	bd10      	pop	{r4, pc}
    d9d8:	b109      	cbz	r1, d9de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d9da:	2100      	movs	r1, #0
    d9dc:	e000      	b.n	d9e0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x48>
    d9de:	2102      	movs	r1, #2
    d9e0:	1843      	adds	r3, r0, r1
    d9e2:	7d1a      	ldrb	r2, [r3, #20]
    d9e4:	2a02      	cmp	r2, #2
    d9e6:	d008      	beq.n	d9fa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    d9e8:	7d5b      	ldrb	r3, [r3, #21]
    d9ea:	2b02      	cmp	r3, #2
    d9ec:	d009      	beq.n	da02 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    d9ee:	2a03      	cmp	r2, #3
    d9f0:	d003      	beq.n	d9fa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    d9f2:	2b03      	cmp	r3, #3
    d9f4:	d005      	beq.n	da02 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    d9f6:	2000      	movs	r0, #0
    d9f8:	4770      	bx	lr
    d9fa:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d9fe:	8b00      	ldrh	r0, [r0, #24]
    da00:	4770      	bx	lr
    da02:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    da06:	8b40      	ldrh	r0, [r0, #26]
    da08:	4770      	bx	lr
    da0a:	b109      	cbz	r1, da10 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    da0c:	2100      	movs	r1, #0
    da0e:	e000      	b.n	da12 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
    da10:	2102      	movs	r1, #2
    da12:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    da16:	8b01      	ldrh	r1, [r0, #24]
    da18:	b911      	cbnz	r1, da20 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x88>
    da1a:	8b40      	ldrh	r0, [r0, #26]
    da1c:	2800      	cmp	r0, #0
    da1e:	d000      	beq.n	da22 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8a>
    da20:	2001      	movs	r0, #1
    da22:	4770      	bx	lr
    da24:	b538      	push	{r3, r4, r5, lr}
    da26:	7883      	ldrb	r3, [r0, #2]
    da28:	f88d 3000 	strb.w	r3, [sp]
    da2c:	9b00      	ldr	r3, [sp, #0]
    da2e:	9300      	str	r3, [sp, #0]
    da30:	f89d 3000 	ldrb.w	r3, [sp]
    da34:	b953      	cbnz	r3, da4c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb4>
    da36:	b10a      	cbz	r2, da3c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa4>
    da38:	2300      	movs	r3, #0
    da3a:	e000      	b.n	da3e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa6>
    da3c:	2302      	movs	r3, #2
    da3e:	18c2      	adds	r2, r0, r3
    da40:	7d14      	ldrb	r4, [r2, #20]
    da42:	2c02      	cmp	r4, #2
    da44:	d004      	beq.n	da50 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    da46:	7d52      	ldrb	r2, [r2, #21]
    da48:	2a02      	cmp	r2, #2
    da4a:	d004      	beq.n	da56 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbe>
    da4c:	2000      	movs	r0, #0
    da4e:	bd38      	pop	{r3, r4, r5, pc}
    da50:	461a      	mov	r2, r3
    da52:	1c5b      	adds	r3, r3, #1
    da54:	e000      	b.n	da58 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    da56:	1c5a      	adds	r2, r3, #1
    da58:	b181      	cbz	r1, da7c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe4>
    da5a:	18c5      	adds	r5, r0, r3
    da5c:	2400      	movs	r4, #0
    da5e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    da62:	752c      	strb	r4, [r5, #20]
    da64:	831c      	strh	r4, [r3, #24]
    da66:	2303      	movs	r3, #3
    da68:	1884      	adds	r4, r0, r2
    da6a:	7523      	strb	r3, [r4, #20]
    da6c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    da70:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    da74:	685b      	ldr	r3, [r3, #4]
    da76:	600b      	str	r3, [r1, #0]
    da78:	8b00      	ldrh	r0, [r0, #24]
    da7a:	8088      	strh	r0, [r1, #4]
    da7c:	2001      	movs	r0, #1
    da7e:	bd38      	pop	{r3, r4, r5, pc}
    da80:	b510      	push	{r4, lr}
    da82:	b109      	cbz	r1, da88 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf0>
    da84:	2100      	movs	r1, #0
    da86:	e000      	b.n	da8a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf2>
    da88:	2102      	movs	r1, #2
    da8a:	1843      	adds	r3, r0, r1
    da8c:	7d1c      	ldrb	r4, [r3, #20]
    da8e:	4294      	cmp	r4, r2
    da90:	d103      	bne.n	da9a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>
    da92:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    da96:	8b00      	ldrh	r0, [r0, #24]
    da98:	bd10      	pop	{r4, pc}
    da9a:	7d5b      	ldrb	r3, [r3, #21]
    da9c:	4293      	cmp	r3, r2
    da9e:	d103      	bne.n	daa8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x110>
    daa0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    daa4:	8b40      	ldrh	r0, [r0, #26]
    daa6:	bd10      	pop	{r4, pc}
    daa8:	2000      	movs	r0, #0
    daaa:	bd10      	pop	{r4, pc}
    daac:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    dab0:	d201      	bcs.n	dab6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11e>
    dab2:	0841      	lsrs	r1, r0, #1
    dab4:	e000      	b.n	dab8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x120>
    dab6:	21ff      	movs	r1, #255	; 0xff
    dab8:	1a40      	subs	r0, r0, r1
    daba:	f240 6172 	movw	r1, #1650	; 0x672
    dabe:	4288      	cmp	r0, r1
    dac0:	db00      	blt.n	dac4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x12c>
    dac2:	4608      	mov	r0, r1
    dac4:	b280      	uxth	r0, r0
    dac6:	4770      	bx	lr

0000dac8 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    dac8:	2101      	movs	r1, #1
    daca:	f7ff bf85 	b.w	d9d8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>

0000dace <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    dace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dad2:	4606      	mov	r6, r0
    dad4:	f342 0780 	sbfx	r7, r2, #2, #1
    dad8:	7848      	ldrb	r0, [r1, #1]
    dada:	460c      	mov	r4, r1
    dadc:	f022 0504 	bic.w	r5, r2, #4
    dae0:	1c7f      	adds	r7, r7, #1
    dae2:	b100      	cbz	r0, dae6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    dae4:	b90d      	cbnz	r5, daea <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    dae6:	4328      	orrs	r0, r5
    dae8:	d104      	bne.n	daf4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    daea:	b145      	cbz	r5, dafe <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    daec:	2100      	movs	r1, #0
    daee:	4620      	mov	r0, r4
    daf0:	f7f7 fd18 	bl	5524 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    daf4:	2101      	movs	r1, #1
    daf6:	70a1      	strb	r1, [r4, #2]
    daf8:	b11f      	cbz	r7, db02 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    dafa:	2000      	movs	r0, #0
    dafc:	e002      	b.n	db04 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    dafe:	2101      	movs	r1, #1
    db00:	e7f5      	b.n	daee <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    db02:	2002      	movs	r0, #2
    db04:	1822      	adds	r2, r4, r0
    db06:	7d12      	ldrb	r2, [r2, #20]
    db08:	2a03      	cmp	r2, #3
    db0a:	d102      	bne.n	db12 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    db0c:	2d02      	cmp	r5, #2
    db0e:	d000      	beq.n	db12 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    db10:	1c40      	adds	r0, r0, #1
    db12:	1822      	adds	r2, r4, r0
    db14:	7511      	strb	r1, [r2, #20]
    db16:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    db1a:	2200      	movs	r2, #0
    db1c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    db20:	830a      	strh	r2, [r1, #24]
    db22:	6840      	ldr	r0, [r0, #4]
    db24:	70a2      	strb	r2, [r4, #2]
    db26:	4631      	mov	r1, r6
    db28:	f362 010f 	bfi	r1, r2, #0, #16
    db2c:	e9c6 0100 	strd	r0, r1, [r6]
    db30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000db34 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    db34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db38:	461e      	mov	r6, r3
    db3a:	4613      	mov	r3, r2
    db3c:	4604      	mov	r4, r0
    db3e:	b109      	cbz	r1, db44 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    db40:	2000      	movs	r0, #0
    db42:	e000      	b.n	db46 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    db44:	2002      	movs	r0, #2
    db46:	2101      	movs	r1, #1
    db48:	70a1      	strb	r1, [r4, #2]
    db4a:	1821      	adds	r1, r4, r0
    db4c:	7d0a      	ldrb	r2, [r1, #20]
    db4e:	2a01      	cmp	r2, #1
    db50:	d003      	beq.n	db5a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    db52:	7d49      	ldrb	r1, [r1, #21]
    db54:	2901      	cmp	r1, #1
    db56:	d10c      	bne.n	db72 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    db58:	1c40      	adds	r0, r0, #1
    db5a:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    db5e:	2700      	movs	r7, #0
    db60:	8b29      	ldrh	r1, [r5, #24]
    db62:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    db66:	198a      	adds	r2, r1, r6
    db68:	4562      	cmp	r2, ip
    db6a:	d905      	bls.n	db78 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    db6c:	4420      	add	r0, r4
    db6e:	832f      	strh	r7, [r5, #24]
    db70:	7507      	strb	r7, [r0, #20]
    db72:	2000      	movs	r0, #0
    db74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db78:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    db7c:	4632      	mov	r2, r6
    db7e:	6840      	ldr	r0, [r0, #4]
    db80:	4408      	add	r0, r1
    db82:	4619      	mov	r1, r3
    db84:	f7fe fece 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db88:	8b28      	ldrh	r0, [r5, #24]
    db8a:	4430      	add	r0, r6
    db8c:	8328      	strh	r0, [r5, #24]
    db8e:	70a7      	strb	r7, [r4, #2]
    db90:	2001      	movs	r0, #1
    db92:	e7ef      	b.n	db74 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000db94 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    db94:	2202      	movs	r2, #2
    db96:	2100      	movs	r1, #0
    db98:	f7ff bf72 	b.w	da80 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000db9c <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    db9c:	b510      	push	{r4, lr}
    db9e:	2101      	movs	r1, #1
    dba0:	f7ff ff33 	bl	da0a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
    dba4:	2800      	cmp	r0, #0
    dba6:	d000      	beq.n	dbaa <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    dba8:	2001      	movs	r0, #1
    dbaa:	bd10      	pop	{r4, pc}

0000dbac <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    dbac:	2201      	movs	r2, #1
    dbae:	f7ff bf39 	b.w	da24 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000dbb2 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    dbb2:	2200      	movs	r2, #0
    dbb4:	f7ff bf36 	b.w	da24 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000dbb8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    dbb8:	b570      	push	{r4, r5, r6, lr}
    dbba:	b109      	cbz	r1, dbc0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    dbbc:	2300      	movs	r3, #0
    dbbe:	e000      	b.n	dbc2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    dbc0:	2302      	movs	r3, #2
    dbc2:	2101      	movs	r1, #1
    dbc4:	7081      	strb	r1, [r0, #2]
    dbc6:	18c1      	adds	r1, r0, r3
    dbc8:	2402      	movs	r4, #2
    dbca:	7d0d      	ldrb	r5, [r1, #20]
    dbcc:	2d01      	cmp	r5, #1
    dbce:	d007      	beq.n	dbe0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    dbd0:	7d4d      	ldrb	r5, [r1, #21]
    dbd2:	2d01      	cmp	r5, #1
    dbd4:	d009      	beq.n	dbea <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    dbd6:	f44f 718b 	mov.w	r1, #278	; 0x116
    dbda:	2009      	movs	r0, #9
    dbdc:	f7f7 f84c 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbe0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    dbe4:	831a      	strh	r2, [r3, #24]
    dbe6:	750c      	strb	r4, [r1, #20]
    dbe8:	e003      	b.n	dbf2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    dbea:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    dbee:	835a      	strh	r2, [r3, #26]
    dbf0:	754c      	strb	r4, [r1, #21]
    dbf2:	2100      	movs	r1, #0
    dbf4:	7081      	strb	r1, [r0, #2]
    dbf6:	bd70      	pop	{r4, r5, r6, pc}

0000dbf8 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    dbf8:	2101      	movs	r1, #1
    dbfa:	7001      	strb	r1, [r0, #0]
    dbfc:	4770      	bx	lr

0000dbfe <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    dbfe:	2201      	movs	r2, #1
    dc00:	4611      	mov	r1, r2
    dc02:	f7ff bf3d 	b.w	da80 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000dc06 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    dc06:	2201      	movs	r2, #1
    dc08:	2100      	movs	r1, #0
    dc0a:	f7ff bf39 	b.w	da80 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000dc0e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    dc0e:	2100      	movs	r1, #0
    dc10:	f7ff bee2 	b.w	d9d8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    dc14:	2800      	cmp	r0, #0
    dc16:	db09      	blt.n	dc2c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    dc18:	f000 021f 	and.w	r2, r0, #31
    dc1c:	2101      	movs	r1, #1
    dc1e:	4091      	lsls	r1, r2
    dc20:	0940      	lsrs	r0, r0, #5
    dc22:	0080      	lsls	r0, r0, #2
    dc24:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dc28:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    dc2c:	4770      	bx	lr

0000dc2e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    dc2e:	f7f7 bdcf 	b.w	57d0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000dc32 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    dc32:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    dc36:	2000      	movs	r0, #0
    dc38:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    dc3c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    dc40:	2001      	movs	r0, #1
    dc42:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    dc46:	4770      	bx	lr

0000dc48 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    dc48:	b108      	cbz	r0, dc4e <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    dc4a:	2000      	movs	r0, #0
    dc4c:	4770      	bx	lr
    dc4e:	2001      	movs	r0, #1
    dc50:	4770      	bx	lr

0000dc52 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    dc52:	f7f7 bf03 	b.w	5a5c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000dc56 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    dc56:	f7f7 bef1 	b.w	5a3c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000dc5a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    dc5a:	b510      	push	{r4, lr}
    dc5c:	2900      	cmp	r1, #0
    dc5e:	4604      	mov	r4, r0
    dc60:	f04f 0106 	mov.w	r1, #6
    dc64:	d002      	beq.n	dc6c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    dc66:	f7f7 f893 	bl	4d90 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dc6a:	e001      	b.n	dc70 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    dc6c:	f7f7 f8ac 	bl	4dc8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dc70:	7960      	ldrb	r0, [r4, #5]
    dc72:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    dc76:	7160      	strb	r0, [r4, #5]
    dc78:	bd10      	pop	{r4, pc}

0000dc7a <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    dc7a:	4770      	bx	lr

0000dc7c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    dc7c:	b530      	push	{r4, r5, lr}
    dc7e:	460c      	mov	r4, r1
    dc80:	4605      	mov	r5, r0
    dc82:	b08d      	sub	sp, #52	; 0x34
    dc84:	f04f 0103 	mov.w	r1, #3
    dc88:	f104 0003 	add.w	r0, r4, #3
    dc8c:	b112      	cbz	r2, dc94 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    dc8e:	f7f7 f87f 	bl	4d90 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dc92:	e001      	b.n	dc98 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    dc94:	f7f7 f898 	bl	4dc8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dc98:	7960      	ldrb	r0, [r4, #5]
    dc9a:	220d      	movs	r2, #13
    dc9c:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    dca0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    dca4:	7160      	strb	r0, [r4, #5]
    dca6:	2100      	movs	r1, #0
    dca8:	a804      	add	r0, sp, #16
    dcaa:	f7fe feb5 	bl	ca18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dcae:	78e0      	ldrb	r0, [r4, #3]
    dcb0:	f88d 001f 	strb.w	r0, [sp, #31]
    dcb4:	7920      	ldrb	r0, [r4, #4]
    dcb6:	f88d 001e 	strb.w	r0, [sp, #30]
    dcba:	7960      	ldrb	r0, [r4, #5]
    dcbc:	f88d 001d 	strb.w	r0, [sp, #29]
    dcc0:	2210      	movs	r2, #16
    dcc2:	4629      	mov	r1, r5
    dcc4:	4668      	mov	r0, sp
    dcc6:	f7fe fe2d 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dcca:	4668      	mov	r0, sp
    dccc:	f7ff ffaf 	bl	dc2e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    dcd0:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    dcd4:	7020      	strb	r0, [r4, #0]
    dcd6:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    dcda:	7060      	strb	r0, [r4, #1]
    dcdc:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    dce0:	70a0      	strb	r0, [r4, #2]
    dce2:	b00d      	add	sp, #52	; 0x34
    dce4:	bd30      	pop	{r4, r5, pc}

0000dce6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    dce6:	f7f8 ba97 	b.w	6218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    dcea:	07c1      	lsls	r1, r0, #31
    dcec:	d001      	beq.n	dcf2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    dcee:	2001      	movs	r0, #1
    dcf0:	4770      	bx	lr
    dcf2:	0780      	lsls	r0, r0, #30
    dcf4:	d501      	bpl.n	dcfa <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    dcf6:	2002      	movs	r0, #2
    dcf8:	4770      	bx	lr
    dcfa:	2000      	movs	r0, #0
    dcfc:	4770      	bx	lr
    dcfe:	b510      	push	{r4, lr}
    dd00:	2801      	cmp	r0, #1
    dd02:	d008      	beq.n	dd16 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    dd04:	2802      	cmp	r0, #2
    dd06:	d004      	beq.n	dd12 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    dd08:	f240 319a 	movw	r1, #922	; 0x39a
    dd0c:	2006      	movs	r0, #6
    dd0e:	f7f6 ffb3 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd12:	2001      	movs	r0, #1
    dd14:	bd10      	pop	{r4, pc}
    dd16:	2000      	movs	r0, #0
    dd18:	bd10      	pop	{r4, pc}
    dd1a:	2900      	cmp	r1, #0
    dd1c:	d004      	beq.n	dd28 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    dd1e:	2801      	cmp	r0, #1
    dd20:	d003      	beq.n	dd2a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    dd22:	2901      	cmp	r1, #1
    dd24:	d001      	beq.n	dd2a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    dd26:	2002      	movs	r0, #2
    dd28:	4770      	bx	lr
    dd2a:	2001      	movs	r0, #1
    dd2c:	4770      	bx	lr
    dd2e:	f7ff bcb0 	b.w	d692 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000dd32 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    dd32:	2101      	movs	r1, #1
    dd34:	f7f8 be00 	b.w	6938 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000dd38 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    dd38:	b510      	push	{r4, lr}
    dd3a:	f002 fbc0 	bl	104be <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    dd3e:	b118      	cbz	r0, dd48 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    dd40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dd44:	f7fd bb8a 	b.w	b45c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    dd48:	20ff      	movs	r0, #255	; 0xff
    dd4a:	bd10      	pop	{r4, pc}

0000dd4c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    dd4c:	b510      	push	{r4, lr}
    dd4e:	f7f8 fe3b 	bl	69c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    dd52:	2810      	cmp	r0, #16
    dd54:	d003      	beq.n	dd5e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    dd56:	f7f8 fe07 	bl	6968 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    dd5a:	2810      	cmp	r0, #16
    dd5c:	d100      	bne.n	dd60 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    dd5e:	2008      	movs	r0, #8
    dd60:	bd10      	pop	{r4, pc}

0000dd62 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    dd62:	b510      	push	{r4, lr}
    dd64:	f7f8 fe30 	bl	69c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    dd68:	2810      	cmp	r0, #16
    dd6a:	d007      	beq.n	dd7c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    dd6c:	f7f8 fdfc 	bl	6968 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    dd70:	2810      	cmp	r0, #16
    dd72:	d003      	beq.n	dd7c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    dd74:	f7f8 fe70 	bl	6a58 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    dd78:	2001      	movs	r0, #1
    dd7a:	bd10      	pop	{r4, pc}
    dd7c:	2000      	movs	r0, #0
    dd7e:	bd10      	pop	{r4, pc}

0000dd80 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    dd80:	b510      	push	{r4, lr}
    dd82:	f7f8 fe21 	bl	69c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    dd86:	2810      	cmp	r0, #16
    dd88:	d003      	beq.n	dd92 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    dd8a:	f7f8 fead 	bl	6ae8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    dd8e:	2001      	movs	r0, #1
    dd90:	bd10      	pop	{r4, pc}
    dd92:	2000      	movs	r0, #0
    dd94:	bd10      	pop	{r4, pc}

0000dd96 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    dd96:	b570      	push	{r4, r5, r6, lr}
    dd98:	460e      	mov	r6, r1
    dd9a:	b08c      	sub	sp, #48	; 0x30
    dd9c:	4614      	mov	r4, r2
    dd9e:	4601      	mov	r1, r0
    dda0:	461d      	mov	r5, r3
    dda2:	2210      	movs	r2, #16
    dda4:	4668      	mov	r0, sp
    dda6:	f000 f91a 	bl	dfde <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ddaa:	2210      	movs	r2, #16
    ddac:	4631      	mov	r1, r6
    ddae:	a804      	add	r0, sp, #16
    ddb0:	f000 f915 	bl	dfde <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ddb4:	4668      	mov	r0, sp
    ddb6:	f7ff ff3a 	bl	dc2e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    ddba:	a908      	add	r1, sp, #32
    ddbc:	f04f 0210 	mov.w	r2, #16
    ddc0:	4628      	mov	r0, r5
    ddc2:	b11c      	cbz	r4, ddcc <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    ddc4:	f000 f90b 	bl	dfde <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ddc8:	b00c      	add	sp, #48	; 0x30
    ddca:	bd70      	pop	{r4, r5, r6, pc}
    ddcc:	f7fe fdaa 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ddd0:	e7fa      	b.n	ddc8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000ddd2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    ddd2:	b510      	push	{r4, lr}
    ddd4:	460c      	mov	r4, r1
    ddd6:	2100      	movs	r1, #0
    ddd8:	f7ff fdb8 	bl	d94c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    dddc:	6060      	str	r0, [r4, #4]
    ddde:	b118      	cbz	r0, dde8 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    dde0:	2001      	movs	r0, #1
    dde2:	7020      	strb	r0, [r4, #0]
    dde4:	2000      	movs	r0, #0
    dde6:	bd10      	pop	{r4, pc}
    dde8:	2002      	movs	r0, #2
    ddea:	bd10      	pop	{r4, pc}

0000ddec <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    ddec:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ddf0:	4348      	muls	r0, r1
    ddf2:	4770      	bx	lr

0000ddf4 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    ddf4:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ddf8:	fbb0 f0f1 	udiv	r0, r0, r1
    ddfc:	b280      	uxth	r0, r0
    ddfe:	4770      	bx	lr

0000de00 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    de00:	b570      	push	{r4, r5, r6, lr}
    de02:	4604      	mov	r4, r0
    de04:	4290      	cmp	r0, r2
    de06:	d20b      	bcs.n	de20 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    de08:	1b10      	subs	r0, r2, r4
    de0a:	2864      	cmp	r0, #100	; 0x64
    de0c:	d200      	bcs.n	de10 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    de0e:	2064      	movs	r0, #100	; 0x64
    de10:	1825      	adds	r5, r4, r0
    de12:	428d      	cmp	r5, r1
    de14:	d803      	bhi.n	de1e <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    de16:	2104      	movs	r1, #4
    de18:	f7f4 fa94 	bl	2344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    de1c:	b108      	cbz	r0, de22 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    de1e:	4620      	mov	r0, r4
    de20:	bd70      	pop	{r4, r5, r6, pc}
    de22:	4628      	mov	r0, r5
    de24:	bd70      	pop	{r4, r5, r6, pc}

0000de26 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    de26:	b510      	push	{r4, lr}
    de28:	f1a2 030f 	sub.w	r3, r2, #15
    de2c:	290c      	cmp	r1, #12
    de2e:	d244      	bcs.n	deba <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de30:	e8df f001 	tbb	[pc, r1]
    de34:	120d0806 	.word	0x120d0806
    de38:	241c1815 	.word	0x241c1815
    de3c:	312a4127 	.word	0x312a4127
    de40:	b3c2      	cbz	r2, deb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    de42:	e03a      	b.n	deba <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de44:	2a07      	cmp	r2, #7
    de46:	d03a      	beq.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de48:	2a08      	cmp	r2, #8
    de4a:	d038      	beq.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de4c:	e035      	b.n	deba <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de4e:	2a0c      	cmp	r2, #12
    de50:	d035      	beq.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de52:	2a0b      	cmp	r2, #11
    de54:	d033      	beq.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de56:	e030      	b.n	deba <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de58:	2a0d      	cmp	r2, #13
    de5a:	d030      	beq.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de5c:	e02d      	b.n	deba <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de5e:	2b0c      	cmp	r3, #12
    de60:	d92d      	bls.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de62:	e02a      	b.n	deba <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de64:	3a10      	subs	r2, #16
    de66:	2a0b      	cmp	r2, #11
    de68:	d929      	bls.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de6a:	e026      	b.n	deba <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de6c:	2b03      	cmp	r3, #3
    de6e:	d926      	bls.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de70:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    de74:	b308      	cbz	r0, deba <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de76:	2a1b      	cmp	r2, #27
    de78:	d921      	bls.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de7a:	e01e      	b.n	deba <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de7c:	2a04      	cmp	r2, #4
    de7e:	d01e      	beq.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de80:	e01b      	b.n	deba <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de82:	2a06      	cmp	r2, #6
    de84:	d01b      	beq.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de86:	e018      	b.n	deba <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de88:	2a1c      	cmp	r2, #28
    de8a:	d018      	beq.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de8c:	2a1d      	cmp	r2, #29
    de8e:	d016      	beq.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de90:	2a1e      	cmp	r2, #30
    de92:	d014      	beq.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de94:	e011      	b.n	deba <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de96:	2a1f      	cmp	r2, #31
    de98:	d011      	beq.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de9a:	2a20      	cmp	r2, #32
    de9c:	d00f      	beq.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de9e:	2a21      	cmp	r2, #33	; 0x21
    dea0:	d00d      	beq.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dea2:	2a22      	cmp	r2, #34	; 0x22
    dea4:	d00b      	beq.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dea6:	2a23      	cmp	r2, #35	; 0x23
    dea8:	d009      	beq.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    deaa:	2a24      	cmp	r2, #36	; 0x24
    deac:	d007      	beq.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    deae:	2a26      	cmp	r2, #38	; 0x26
    deb0:	d005      	beq.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    deb2:	e002      	b.n	deba <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    deb4:	e003      	b.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    deb6:	2a0e      	cmp	r2, #14
    deb8:	d001      	beq.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    deba:	2000      	movs	r0, #0
    debc:	bd10      	pop	{r4, pc}
    debe:	2001      	movs	r0, #1
    dec0:	bd10      	pop	{r4, pc}

0000dec2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    dec2:	280c      	cmp	r0, #12
    dec4:	d013      	beq.n	deee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dec6:	280b      	cmp	r0, #11
    dec8:	d011      	beq.n	deee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    deca:	280d      	cmp	r0, #13
    decc:	d00f      	beq.n	deee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dece:	281f      	cmp	r0, #31
    ded0:	d00d      	beq.n	deee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ded2:	2820      	cmp	r0, #32
    ded4:	d00b      	beq.n	deee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ded6:	2821      	cmp	r0, #33	; 0x21
    ded8:	d009      	beq.n	deee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    deda:	2822      	cmp	r0, #34	; 0x22
    dedc:	d007      	beq.n	deee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dede:	2823      	cmp	r0, #35	; 0x23
    dee0:	d005      	beq.n	deee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dee2:	2824      	cmp	r0, #36	; 0x24
    dee4:	d003      	beq.n	deee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dee6:	2826      	cmp	r0, #38	; 0x26
    dee8:	d001      	beq.n	deee <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    deea:	2000      	movs	r0, #0
    deec:	4770      	bx	lr
    deee:	2001      	movs	r0, #1
    def0:	4770      	bx	lr

0000def2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    def2:	f011 0f0c 	tst.w	r1, #12
    def6:	d016      	beq.n	df26 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    def8:	074a      	lsls	r2, r1, #29
    defa:	f44f 7116 	mov.w	r1, #600	; 0x258
    defe:	2a00      	cmp	r2, #0
    df00:	da02      	bge.n	df08 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    df02:	f04f 0210 	mov.w	r2, #16
    df06:	e001      	b.n	df0c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    df08:	f04f 0240 	mov.w	r2, #64	; 0x40
    df0c:	da01      	bge.n	df12 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    df0e:	f04f 0196 	mov.w	r1, #150	; 0x96
    df12:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    df16:	eba0 0301 	sub.w	r3, r0, r1
    df1a:	4288      	cmp	r0, r1
    df1c:	d910      	bls.n	df40 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    df1e:	fb93 f0f2 	sdiv	r0, r3, r2
    df22:	b280      	uxth	r0, r0
    df24:	4770      	bx	lr
    df26:	2902      	cmp	r1, #2
    df28:	d002      	beq.n	df30 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    df2a:	2870      	cmp	r0, #112	; 0x70
    df2c:	d80a      	bhi.n	df44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    df2e:	e007      	b.n	df40 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    df30:	283c      	cmp	r0, #60	; 0x3c
    df32:	d905      	bls.n	df40 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    df34:	383c      	subs	r0, #60	; 0x3c
    df36:	17c1      	asrs	r1, r0, #31
    df38:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    df3c:	1080      	asrs	r0, r0, #2
    df3e:	e7f0      	b.n	df22 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    df40:	2000      	movs	r0, #0
    df42:	e7ee      	b.n	df22 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    df44:	3870      	subs	r0, #112	; 0x70
    df46:	17c1      	asrs	r1, r0, #31
    df48:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    df4c:	10c0      	asrs	r0, r0, #3
    df4e:	e7e8      	b.n	df22 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000df50 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    df50:	6809      	ldr	r1, [r1, #0]
    df52:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    df56:	4770      	bx	lr

0000df58 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    df58:	07c1      	lsls	r1, r0, #31
    df5a:	d001      	beq.n	df60 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    df5c:	2001      	movs	r0, #1
    df5e:	4770      	bx	lr
    df60:	0781      	lsls	r1, r0, #30
    df62:	d501      	bpl.n	df68 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    df64:	2002      	movs	r0, #2
    df66:	4770      	bx	lr
    df68:	0740      	lsls	r0, r0, #29
    df6a:	d501      	bpl.n	df70 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    df6c:	2008      	movs	r0, #8
    df6e:	4770      	bx	lr
    df70:	2000      	movs	r0, #0
    df72:	4770      	bx	lr

0000df74 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    df74:	b510      	push	{r4, lr}
    df76:	f640 12c4 	movw	r2, #2500	; 0x9c4
    df7a:	2901      	cmp	r1, #1
    df7c:	d006      	beq.n	df8c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    df7e:	2902      	cmp	r1, #2
    df80:	d005      	beq.n	df8e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    df82:	f240 31c6 	movw	r1, #966	; 0x3c6
    df86:	2029      	movs	r0, #41	; 0x29
    df88:	f7f6 fe76 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df8c:	b108      	cbz	r0, df92 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    df8e:	4610      	mov	r0, r2
    df90:	bd10      	pop	{r4, pc}
    df92:	f240 40e2 	movw	r0, #1250	; 0x4e2
    df96:	bd10      	pop	{r4, pc}

0000df98 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    df98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df9c:	460c      	mov	r4, r1
    df9e:	4605      	mov	r5, r0
    dfa0:	68c6      	ldr	r6, [r0, #12]
    dfa2:	f7f4 fdd5 	bl	2b50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    dfa6:	b198      	cbz	r0, dfd0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    dfa8:	b1bc      	cbz	r4, dfda <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    dfaa:	4630      	mov	r0, r6
    dfac:	68e9      	ldr	r1, [r5, #12]
    dfae:	f7f4 facd 	bl	254c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    dfb2:	2800      	cmp	r0, #0
    dfb4:	dd11      	ble.n	dfda <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    dfb6:	4420      	add	r0, r4
    dfb8:	1e40      	subs	r0, r0, #1
    dfba:	fbb0 f7f4 	udiv	r7, r0, r4
    dfbe:	fb07 f104 	mul.w	r1, r7, r4
    dfc2:	4630      	mov	r0, r6
    dfc4:	f7f4 fa90 	bl	24e8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    dfc8:	60e8      	str	r0, [r5, #12]
    dfca:	4638      	mov	r0, r7
    dfcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dfd0:	f240 214b 	movw	r1, #587	; 0x24b
    dfd4:	2029      	movs	r0, #41	; 0x29
    dfd6:	f7f6 fe4f 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dfda:	2000      	movs	r0, #0
    dfdc:	e7f6      	b.n	dfcc <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000dfde <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    dfde:	b530      	push	{r4, r5, lr}
    dfe0:	4613      	mov	r3, r2
    dfe2:	e006      	b.n	dff2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    dfe4:	18cc      	adds	r4, r1, r3
    dfe6:	1ad5      	subs	r5, r2, r3
    dfe8:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    dfec:	1e5b      	subs	r3, r3, #1
    dfee:	5544      	strb	r4, [r0, r5]
    dff0:	b2db      	uxtb	r3, r3
    dff2:	2b00      	cmp	r3, #0
    dff4:	d1f6      	bne.n	dfe4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    dff6:	bd30      	pop	{r4, r5, pc}

0000dff8 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    dff8:	b538      	push	{r3, r4, r5, lr}
    dffa:	4605      	mov	r5, r0
    dffc:	460c      	mov	r4, r1
    dffe:	4668      	mov	r0, sp
    e000:	f7fd ff78 	bl	bef4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e004:	b310      	cbz	r0, e04c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    e006:	f99d 0000 	ldrsb.w	r0, [sp]
    e00a:	7260      	strb	r0, [r4, #9]
    e00c:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    e010:	72a1      	strb	r1, [r4, #10]
    e012:	f994 100b 	ldrsb.w	r1, [r4, #11]
    e016:	2200      	movs	r2, #0
    e018:	1a41      	subs	r1, r0, r1
    e01a:	d500      	bpl.n	e01e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    e01c:	4249      	negs	r1, r1
    e01e:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    e022:	428b      	cmp	r3, r1
    e024:	dc10      	bgt.n	e048 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e026:	2bff      	cmp	r3, #255	; 0xff
    e028:	d00e      	beq.n	e048 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e02a:	7b21      	ldrb	r1, [r4, #12]
    e02c:	1c49      	adds	r1, r1, #1
    e02e:	b2c9      	uxtb	r1, r1
    e030:	7321      	strb	r1, [r4, #12]
    e032:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    e036:	4299      	cmp	r1, r3
    e038:	d802      	bhi.n	e040 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    e03a:	7ae1      	ldrb	r1, [r4, #11]
    e03c:	297f      	cmp	r1, #127	; 0x7f
    e03e:	d103      	bne.n	e048 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e040:	72e0      	strb	r0, [r4, #11]
    e042:	2000      	movs	r0, #0
    e044:	7320      	strb	r0, [r4, #12]
    e046:	2201      	movs	r2, #1
    e048:	4610      	mov	r0, r2
    e04a:	bd38      	pop	{r3, r4, r5, pc}
    e04c:	207f      	movs	r0, #127	; 0x7f
    e04e:	7260      	strb	r0, [r4, #9]
    e050:	2000      	movs	r0, #0
    e052:	bd38      	pop	{r3, r4, r5, pc}

0000e054 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    e054:	2300      	movs	r3, #0
    e056:	6283      	str	r3, [r0, #40]	; 0x28
    e058:	8602      	strh	r2, [r0, #48]	; 0x30
    e05a:	f240 2371 	movw	r3, #625	; 0x271
    e05e:	435a      	muls	r2, r3
    e060:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    e064:	1e52      	subs	r2, r2, #1
    e066:	fbb2 f1f1 	udiv	r1, r2, r1
    e06a:	62c1      	str	r1, [r0, #44]	; 0x2c
    e06c:	4770      	bx	lr

0000e06e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    e06e:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e072:	4607      	mov	r7, r0
    e074:	4690      	mov	r8, r2
    e076:	468b      	mov	fp, r1
    e078:	2601      	movs	r6, #1
    e07a:	4608      	mov	r0, r1
    e07c:	f000 f941 	bl	e302 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    e080:	4682      	mov	sl, r0
    e082:	4658      	mov	r0, fp
    e084:	f000 f949 	bl	e31a <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    e088:	4681      	mov	r9, r0
    e08a:	f7ff ff65 	bl	df58 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    e08e:	4604      	mov	r4, r0
    e090:	4650      	mov	r0, sl
    e092:	f7ff ff61 	bl	df58 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    e096:	4605      	mov	r5, r0
    e098:	ea54 0005 	orrs.w	r0, r4, r5
    e09c:	d100      	bne.n	e0a0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    e09e:	2600      	movs	r6, #0
    e0a0:	f7fd f964 	bl	b36c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    e0a4:	ea10 0f09 	tst.w	r0, r9
    e0a8:	d100      	bne.n	e0ac <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    e0aa:	2400      	movs	r4, #0
    e0ac:	f7fd f95e 	bl	b36c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    e0b0:	ea10 0f0a 	tst.w	r0, sl
    e0b4:	d100      	bne.n	e0b8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    e0b6:	2500      	movs	r5, #0
    e0b8:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    e0bc:	42a0      	cmp	r0, r4
    e0be:	d100      	bne.n	e0c2 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    e0c0:	2400      	movs	r4, #0
    e0c2:	f888 4000 	strb.w	r4, [r8]
    e0c6:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    e0ca:	42a8      	cmp	r0, r5
    e0cc:	d100      	bne.n	e0d0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    e0ce:	2500      	movs	r5, #0
    e0d0:	f888 5001 	strb.w	r5, [r8, #1]
    e0d4:	b974      	cbnz	r4, e0f4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e0d6:	b96d      	cbnz	r5, e0f4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e0d8:	4658      	mov	r0, fp
    e0da:	f000 f91c 	bl	e316 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    e0de:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
    e0e2:	1a40      	subs	r0, r0, r1
    e0e4:	b200      	sxth	r0, r0
    e0e6:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    e0ea:	4288      	cmp	r0, r1
    e0ec:	dc01      	bgt.n	e0f2 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    e0ee:	2800      	cmp	r0, #0
    e0f0:	dc00      	bgt.n	e0f4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e0f2:	2600      	movs	r6, #0
    e0f4:	4630      	mov	r0, r6
    e0f6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000e0fa <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    e0fa:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e0fe:	4348      	muls	r0, r1
    e100:	4770      	bx	lr

0000e102 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    e102:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e106:	fb10 f001 	smulbb	r0, r0, r1
    e10a:	4770      	bx	lr

0000e10c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    e10c:	b510      	push	{r4, lr}
    e10e:	2300      	movs	r3, #0
    e110:	461a      	mov	r2, r3
    e112:	e003      	b.n	e11c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    e114:	5c84      	ldrb	r4, [r0, r2]
    e116:	4323      	orrs	r3, r4
    e118:	1c52      	adds	r2, r2, #1
    e11a:	b2d2      	uxtb	r2, r2
    e11c:	428a      	cmp	r2, r1
    e11e:	d3f9      	bcc.n	e114 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    e120:	b10b      	cbz	r3, e126 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    e122:	2000      	movs	r0, #0
    e124:	bd10      	pop	{r4, pc}
    e126:	2001      	movs	r0, #1
    e128:	bd10      	pop	{r4, pc}

0000e12a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    e12a:	b510      	push	{r4, lr}
    e12c:	4604      	mov	r4, r0
    e12e:	f890 0020 	ldrb.w	r0, [r0, #32]
    e132:	b108      	cbz	r0, e138 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    e134:	2825      	cmp	r0, #37	; 0x25
    e136:	d901      	bls.n	e13c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    e138:	2012      	movs	r0, #18
    e13a:	bd10      	pop	{r4, pc}
    e13c:	b12a      	cbz	r2, e14a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    e13e:	7d60      	ldrb	r0, [r4, #21]
    e140:	b128      	cbz	r0, e14e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    e142:	2801      	cmp	r0, #1
    e144:	d009      	beq.n	e15a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    e146:	201f      	movs	r0, #31
    e148:	bd10      	pop	{r4, pc}
    e14a:	2000      	movs	r0, #0
    e14c:	bd10      	pop	{r4, pc}
    e14e:	4620      	mov	r0, r4
    e150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e154:	4611      	mov	r1, r2
    e156:	f7f8 bdbb 	b.w	6cd0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    e15a:	88a2      	ldrh	r2, [r4, #4]
    e15c:	6909      	ldr	r1, [r1, #16]
    e15e:	f104 0015 	add.w	r0, r4, #21
    e162:	f7f8 fd61 	bl	6c28 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    e166:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    e16a:	e7ee      	b.n	e14a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000e16c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    e16c:	b530      	push	{r4, r5, lr}
    e16e:	1c42      	adds	r2, r0, #1
    e170:	428a      	cmp	r2, r1
    e172:	d004      	beq.n	e17e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    e174:	680a      	ldr	r2, [r1, #0]
    e176:	f8c0 2001 	str.w	r2, [r0, #1]
    e17a:	7909      	ldrb	r1, [r1, #4]
    e17c:	7141      	strb	r1, [r0, #5]
    e17e:	7941      	ldrb	r1, [r0, #5]
    e180:	f001 011f 	and.w	r1, r1, #31
    e184:	7141      	strb	r1, [r0, #5]
    e186:	2100      	movs	r1, #0
    e188:	72c1      	strb	r1, [r0, #11]
    e18a:	1843      	adds	r3, r0, r1
    e18c:	1c49      	adds	r1, r1, #1
    e18e:	785c      	ldrb	r4, [r3, #1]
    e190:	b2c9      	uxtb	r1, r1
    e192:	f004 0201 	and.w	r2, r4, #1
    e196:	0864      	lsrs	r4, r4, #1
    e198:	f004 0501 	and.w	r5, r4, #1
    e19c:	4415      	add	r5, r2
    e19e:	0862      	lsrs	r2, r4, #1
    e1a0:	f002 0401 	and.w	r4, r2, #1
    e1a4:	442c      	add	r4, r5
    e1a6:	0852      	lsrs	r2, r2, #1
    e1a8:	f002 0501 	and.w	r5, r2, #1
    e1ac:	442c      	add	r4, r5
    e1ae:	0852      	lsrs	r2, r2, #1
    e1b0:	f002 0501 	and.w	r5, r2, #1
    e1b4:	442c      	add	r4, r5
    e1b6:	0852      	lsrs	r2, r2, #1
    e1b8:	f002 0501 	and.w	r5, r2, #1
    e1bc:	442c      	add	r4, r5
    e1be:	0852      	lsrs	r2, r2, #1
    e1c0:	f002 0501 	and.w	r5, r2, #1
    e1c4:	442c      	add	r4, r5
    e1c6:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    e1ca:	719a      	strb	r2, [r3, #6]
    e1cc:	7ac3      	ldrb	r3, [r0, #11]
    e1ce:	2905      	cmp	r1, #5
    e1d0:	441a      	add	r2, r3
    e1d2:	72c2      	strb	r2, [r0, #11]
    e1d4:	d3d9      	bcc.n	e18a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    e1d6:	bd30      	pop	{r4, r5, pc}
    e1d8:	b570      	push	{r4, r5, r6, lr}
    e1da:	f8d0 201f 	ldr.w	r2, [r0, #31]
    e1de:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    e1e2:	f012 0fff 	tst.w	r2, #255	; 0xff
    e1e6:	f023 031f 	bic.w	r3, r3, #31
    e1ea:	d108      	bne.n	e1fe <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e1ec:	f3c2 2407 	ubfx	r4, r2, #8, #8
    e1f0:	b92c      	cbnz	r4, e1fe <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e1f2:	f3c2 4407 	ubfx	r4, r2, #16, #8
    e1f6:	b914      	cbnz	r4, e1fe <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e1f8:	0e12      	lsrs	r2, r2, #24
    e1fa:	d100      	bne.n	e1fe <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e1fc:	b35b      	cbz	r3, e256 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e1fe:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    e202:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    e206:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    e20a:	7d83      	ldrb	r3, [r0, #22]
    e20c:	b141      	cbz	r1, e220 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    e20e:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e212:	d905      	bls.n	e220 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    e214:	f640 5107 	movw	r1, #3335	; 0xd07
    e218:	428a      	cmp	r2, r1
    e21a:	d801      	bhi.n	e220 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    e21c:	2101      	movs	r1, #1
    e21e:	e000      	b.n	e222 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    e220:	2100      	movs	r1, #0
    e222:	7846      	ldrb	r6, [r0, #1]
    e224:	2e22      	cmp	r6, #34	; 0x22
    e226:	d116      	bne.n	e256 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e228:	b959      	cbnz	r1, e242 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
    e22a:	1f91      	subs	r1, r2, #6
    e22c:	f640 467a 	movw	r6, #3194	; 0xc7a
    e230:	42b1      	cmp	r1, r6
    e232:	d810      	bhi.n	e256 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e234:	b17b      	cbz	r3, e256 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e236:	2b08      	cmp	r3, #8
    e238:	d80d      	bhi.n	e256 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e23a:	4293      	cmp	r3, r2
    e23c:	d20b      	bcs.n	e256 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e23e:	4294      	cmp	r4, r2
    e240:	d809      	bhi.n	e256 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e242:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    e246:	d206      	bcs.n	e256 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e248:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    e24c:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    e250:	d801      	bhi.n	e256 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e252:	2001      	movs	r0, #1
    e254:	bd70      	pop	{r4, r5, r6, pc}
    e256:	2000      	movs	r0, #0
    e258:	bd70      	pop	{r4, r5, r6, pc}

0000e25a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    e25a:	b570      	push	{r4, r5, r6, lr}
    e25c:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    e260:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    e264:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    e268:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    e26c:	88c0      	ldrh	r0, [r0, #6]
    e26e:	b131      	cbz	r1, e27e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    e270:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e274:	d903      	bls.n	e27e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    e276:	f640 5107 	movw	r1, #3335	; 0xd07
    e27a:	428a      	cmp	r2, r1
    e27c:	d90b      	bls.n	e296 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    e27e:	1f91      	subs	r1, r2, #6
    e280:	f640 467a 	movw	r6, #3194	; 0xc7a
    e284:	42b1      	cmp	r1, r6
    e286:	d80e      	bhi.n	e2a6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e288:	b16b      	cbz	r3, e2a6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e28a:	2b08      	cmp	r3, #8
    e28c:	d80b      	bhi.n	e2a6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e28e:	4293      	cmp	r3, r2
    e290:	d209      	bcs.n	e2a6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e292:	4294      	cmp	r4, r2
    e294:	d807      	bhi.n	e2a6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e296:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    e29a:	d204      	bcs.n	e2a6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e29c:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    e2a0:	d801      	bhi.n	e2a6 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e2a2:	2001      	movs	r0, #1
    e2a4:	bd70      	pop	{r4, r5, r6, pc}
    e2a6:	2000      	movs	r0, #0
    e2a8:	bd70      	pop	{r4, r5, r6, pc}

0000e2aa <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    e2aa:	6842      	ldr	r2, [r0, #4]
    e2ac:	600a      	str	r2, [r1, #0]
    e2ae:	7a00      	ldrb	r0, [r0, #8]
    e2b0:	7108      	strb	r0, [r1, #4]
    e2b2:	4770      	bx	lr

0000e2b4 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    e2b4:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e2b8:	4770      	bx	lr

0000e2ba <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    e2ba:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    e2be:	4770      	bx	lr

0000e2c0 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    e2c0:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e2c4:	4770      	bx	lr

0000e2c6 <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    e2c6:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    e2ca:	4770      	bx	lr

0000e2cc <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    e2cc:	8980      	ldrh	r0, [r0, #12]
    e2ce:	8008      	strh	r0, [r1, #0]
    e2d0:	4770      	bx	lr

0000e2d2 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    e2d2:	f8d0 0016 	ldr.w	r0, [r0, #22]
    e2d6:	6008      	str	r0, [r1, #0]
    e2d8:	4770      	bx	lr

0000e2da <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    e2da:	6842      	ldr	r2, [r0, #4]
    e2dc:	600a      	str	r2, [r1, #0]
    e2de:	6880      	ldr	r0, [r0, #8]
    e2e0:	6048      	str	r0, [r1, #4]
    e2e2:	4770      	bx	lr

0000e2e4 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    e2e4:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    e2e8:	600a      	str	r2, [r1, #0]
    e2ea:	6840      	ldr	r0, [r0, #4]
    e2ec:	6048      	str	r0, [r1, #4]
    e2ee:	4770      	bx	lr

0000e2f0 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    e2f0:	6842      	ldr	r2, [r0, #4]
    e2f2:	600a      	str	r2, [r1, #0]
    e2f4:	6880      	ldr	r0, [r0, #8]
    e2f6:	6048      	str	r0, [r1, #4]
    e2f8:	4770      	bx	lr

0000e2fa <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    e2fa:	7800      	ldrb	r0, [r0, #0]
    e2fc:	f000 0003 	and.w	r0, r0, #3
    e300:	4770      	bx	lr

0000e302 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    e302:	7900      	ldrb	r0, [r0, #4]
    e304:	4770      	bx	lr

0000e306 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    e306:	8880      	ldrh	r0, [r0, #4]
    e308:	4770      	bx	lr

0000e30a <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    e30a:	88c0      	ldrh	r0, [r0, #6]
    e30c:	4770      	bx	lr

0000e30e <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    e30e:	8900      	ldrh	r0, [r0, #8]
    e310:	4770      	bx	lr

0000e312 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    e312:	8940      	ldrh	r0, [r0, #10]
    e314:	4770      	bx	lr

0000e316 <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    e316:	88c0      	ldrh	r0, [r0, #6]
    e318:	4770      	bx	lr

0000e31a <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    e31a:	7940      	ldrb	r0, [r0, #5]
    e31c:	4770      	bx	lr

0000e31e <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    e31e:	7900      	ldrb	r0, [r0, #4]
    e320:	4770      	bx	lr

0000e322 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    e322:	7900      	ldrb	r0, [r0, #4]
    e324:	4770      	bx	lr

0000e326 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    e326:	8901      	ldrh	r1, [r0, #8]
    e328:	291b      	cmp	r1, #27
    e32a:	d30c      	bcc.n	e346 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e32c:	8941      	ldrh	r1, [r0, #10]
    e32e:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e332:	4291      	cmp	r1, r2
    e334:	d307      	bcc.n	e346 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e336:	8881      	ldrh	r1, [r0, #4]
    e338:	291b      	cmp	r1, #27
    e33a:	d304      	bcc.n	e346 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e33c:	88c0      	ldrh	r0, [r0, #6]
    e33e:	4290      	cmp	r0, r2
    e340:	d301      	bcc.n	e346 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e342:	2001      	movs	r0, #1
    e344:	4770      	bx	lr
    e346:	2000      	movs	r0, #0
    e348:	4770      	bx	lr

0000e34a <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    e34a:	b510      	push	{r4, lr}
    e34c:	29fb      	cmp	r1, #251	; 0xfb
    e34e:	d904      	bls.n	e35a <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    e350:	f44f 61af 	mov.w	r1, #1400	; 0x578
    e354:	202a      	movs	r0, #42	; 0x2a
    e356:	f7f6 fc8f 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e35a:	7041      	strb	r1, [r0, #1]
    e35c:	bd10      	pop	{r4, pc}

0000e35e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    e35e:	7901      	ldrb	r1, [r0, #4]
    e360:	0749      	lsls	r1, r1, #29
    e362:	d004      	beq.n	e36e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    e364:	7940      	ldrb	r0, [r0, #5]
    e366:	0740      	lsls	r0, r0, #29
    e368:	d001      	beq.n	e36e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    e36a:	2001      	movs	r0, #1
    e36c:	4770      	bx	lr
    e36e:	2000      	movs	r0, #0
    e370:	4770      	bx	lr

0000e372 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    e372:	7900      	ldrb	r0, [r0, #4]
    e374:	4770      	bx	lr

0000e376 <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    e376:	7940      	ldrb	r0, [r0, #5]
    e378:	4770      	bx	lr

0000e37a <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    e37a:	7101      	strb	r1, [r0, #4]
    e37c:	4770      	bx	lr

0000e37e <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    e37e:	7141      	strb	r1, [r0, #5]
    e380:	4770      	bx	lr

0000e382 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    e382:	b510      	push	{r4, lr}
    e384:	2a1b      	cmp	r2, #27
    e386:	d904      	bls.n	e392 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    e388:	f240 31df 	movw	r1, #991	; 0x3df
    e38c:	202a      	movs	r0, #42	; 0x2a
    e38e:	f7f6 fc73 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e392:	7042      	strb	r2, [r0, #1]
    e394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e398:	1cc0      	adds	r0, r0, #3
    e39a:	f7fe bac3 	b.w	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000e39e <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    e39e:	6809      	ldr	r1, [r1, #0]
    e3a0:	60c1      	str	r1, [r0, #12]
    e3a2:	4770      	bx	lr

0000e3a4 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    e3a4:	680a      	ldr	r2, [r1, #0]
    e3a6:	6042      	str	r2, [r0, #4]
    e3a8:	6849      	ldr	r1, [r1, #4]
    e3aa:	6081      	str	r1, [r0, #8]
    e3ac:	4770      	bx	lr

0000e3ae <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    e3ae:	680a      	ldr	r2, [r1, #0]
    e3b0:	6042      	str	r2, [r0, #4]
    e3b2:	6849      	ldr	r1, [r1, #4]
    e3b4:	6081      	str	r1, [r0, #8]
    e3b6:	4770      	bx	lr

0000e3b8 <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    e3b8:	680a      	ldr	r2, [r1, #0]
    e3ba:	6042      	str	r2, [r0, #4]
    e3bc:	6849      	ldr	r1, [r1, #4]
    e3be:	6081      	str	r1, [r0, #8]
    e3c0:	4770      	bx	lr

0000e3c2 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    e3c2:	7802      	ldrb	r2, [r0, #0]
    e3c4:	f001 0103 	and.w	r1, r1, #3
    e3c8:	f022 0203 	bic.w	r2, r2, #3
    e3cc:	430a      	orrs	r2, r1
    e3ce:	7002      	strb	r2, [r0, #0]
    e3d0:	4770      	bx	lr

0000e3d2 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    e3d2:	7101      	strb	r1, [r0, #4]
    e3d4:	0a09      	lsrs	r1, r1, #8
    e3d6:	7141      	strb	r1, [r0, #5]
    e3d8:	4770      	bx	lr

0000e3da <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    e3da:	7181      	strb	r1, [r0, #6]
    e3dc:	0a09      	lsrs	r1, r1, #8
    e3de:	71c1      	strb	r1, [r0, #7]
    e3e0:	4770      	bx	lr

0000e3e2 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    e3e2:	7201      	strb	r1, [r0, #8]
    e3e4:	0a09      	lsrs	r1, r1, #8
    e3e6:	7241      	strb	r1, [r0, #9]
    e3e8:	4770      	bx	lr

0000e3ea <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    e3ea:	7281      	strb	r1, [r0, #10]
    e3ec:	0a09      	lsrs	r1, r1, #8
    e3ee:	72c1      	strb	r1, [r0, #11]
    e3f0:	4770      	bx	lr

0000e3f2 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    e3f2:	7802      	ldrb	r2, [r0, #0]
    e3f4:	f002 020f 	and.w	r2, r2, #15
    e3f8:	2a03      	cmp	r2, #3
    e3fa:	d003      	beq.n	e404 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
    e3fc:	2a05      	cmp	r2, #5
    e3fe:	d104      	bne.n	e40a <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
    e400:	f7ff beea 	b.w	e1d8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    e404:	7840      	ldrb	r0, [r0, #1]
    e406:	280c      	cmp	r0, #12
    e408:	d001      	beq.n	e40e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
    e40a:	2000      	movs	r0, #0
    e40c:	4770      	bx	lr
    e40e:	2001      	movs	r0, #1
    e410:	4770      	bx	lr

0000e412 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    e412:	b570      	push	{r4, r5, r6, lr}
    e414:	4614      	mov	r4, r2
    e416:	4605      	mov	r5, r0
    e418:	2a1f      	cmp	r2, #31
    e41a:	d903      	bls.n	e424 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    e41c:	21b2      	movs	r1, #178	; 0xb2
    e41e:	202a      	movs	r0, #42	; 0x2a
    e420:	f7f6 fc2a 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e424:	f105 0009 	add.w	r0, r5, #9
    e428:	f7fe fa7c 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e42c:	1da4      	adds	r4, r4, #6
    e42e:	706c      	strb	r4, [r5, #1]
    e430:	bd70      	pop	{r4, r5, r6, pc}

0000e432 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    e432:	b510      	push	{r4, lr}
    e434:	7802      	ldrb	r2, [r0, #0]
    e436:	f001 030f 	and.w	r3, r1, #15
    e43a:	f022 020f 	bic.w	r2, r2, #15
    e43e:	431a      	orrs	r2, r3
    e440:	7002      	strb	r2, [r0, #0]
    e442:	2907      	cmp	r1, #7
    e444:	d20c      	bcs.n	e460 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    e446:	e8df f001 	tbb	[pc, r1]
    e44a:	0604      	.short	0x0604
    e44c:	08040604 	.word	0x08040604
    e450:	0004      	.short	0x0004
    e452:	2106      	movs	r1, #6
    e454:	e002      	b.n	e45c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    e456:	210c      	movs	r1, #12
    e458:	e000      	b.n	e45c <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    e45a:	2122      	movs	r1, #34	; 0x22
    e45c:	7041      	strb	r1, [r0, #1]
    e45e:	bd10      	pop	{r4, pc}
    e460:	216e      	movs	r1, #110	; 0x6e
    e462:	202a      	movs	r0, #42	; 0x2a
    e464:	f7f6 fc08 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e468 <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    e468:	680a      	ldr	r2, [r1, #0]
    e46a:	f840 2f09 	str.w	r2, [r0, #9]!
    e46e:	8889      	ldrh	r1, [r1, #4]
    e470:	8081      	strh	r1, [r0, #4]
    e472:	4770      	bx	lr

0000e474 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    e474:	7802      	ldrb	r2, [r0, #0]
    e476:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    e47a:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e47e:	7002      	strb	r2, [r0, #0]
    e480:	4770      	bx	lr

0000e482 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    e482:	680a      	ldr	r2, [r1, #0]
    e484:	f840 2f03 	str.w	r2, [r0, #3]!
    e488:	8889      	ldrh	r1, [r1, #4]
    e48a:	8081      	strh	r1, [r0, #4]
    e48c:	4770      	bx	lr

0000e48e <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    e48e:	7802      	ldrb	r2, [r0, #0]
    e490:	2340      	movs	r3, #64	; 0x40
    e492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    e496:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e49a:	430a      	orrs	r2, r1
    e49c:	7002      	strb	r2, [r0, #0]
    e49e:	4770      	bx	lr

0000e4a0 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    e4a0:	b570      	push	{r4, r5, r6, lr}
    e4a2:	4614      	mov	r4, r2
    e4a4:	4605      	mov	r5, r0
    e4a6:	2a1f      	cmp	r2, #31
    e4a8:	d903      	bls.n	e4b2 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    e4aa:	21d4      	movs	r1, #212	; 0xd4
    e4ac:	202a      	movs	r0, #42	; 0x2a
    e4ae:	f7f6 fbe3 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4b2:	f105 0009 	add.w	r0, r5, #9
    e4b6:	f7fe fa35 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e4ba:	1da4      	adds	r4, r4, #6
    e4bc:	706c      	strb	r4, [r5, #1]
    e4be:	bd70      	pop	{r4, r5, r6, pc}

0000e4c0 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    e4c0:	2101      	movs	r1, #1
    e4c2:	f000 b853 	b.w	e56c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>

0000e4c6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    e4c6:	6841      	ldr	r1, [r0, #4]
    e4c8:	2200      	movs	r2, #0
    e4ca:	f891 3102 	ldrb.w	r3, [r1, #258]	; 0x102
    e4ce:	2b00      	cmp	r3, #0
    e4d0:	d004      	beq.n	e4dc <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    e4d2:	f881 2102 	strb.w	r2, [r1, #258]	; 0x102
    e4d6:	6840      	ldr	r0, [r0, #4]
    e4d8:	f000 bc40 	b.w	ed5c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>
    e4dc:	4770      	bx	lr
    e4de:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e4e2:	460e      	mov	r6, r1
    e4e4:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    e4e8:	4617      	mov	r7, r2
    e4ea:	39ff      	subs	r1, #255	; 0xff
    e4ec:	d014      	beq.n	e518 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    e4ee:	8030      	strh	r0, [r6, #0]
    e4f0:	2100      	movs	r1, #0
    e4f2:	7171      	strb	r1, [r6, #5]
    e4f4:	f7f6 ffe8 	bl	54c8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e4f8:	4604      	mov	r4, r0
    e4fa:	f7ff f855 	bl	d5a8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    e4fe:	0005      	movs	r5, r0
    e500:	d00a      	beq.n	e518 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    e502:	4620      	mov	r0, r4
    e504:	4629      	mov	r1, r5
    e506:	aa01      	add	r2, sp, #4
    e508:	f7ff f871 	bl	d5ee <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    e50c:	8070      	strh	r0, [r6, #2]
    e50e:	b130      	cbz	r0, e51e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x58>
    e510:	28fb      	cmp	r0, #251	; 0xfb
    e512:	d906      	bls.n	e522 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x5c>
    e514:	21c9      	movs	r1, #201	; 0xc9
    e516:	e026      	b.n	e566 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    e518:	2000      	movs	r0, #0
    e51a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e51e:	21c8      	movs	r1, #200	; 0xc8
    e520:	e021      	b.n	e566 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    e522:	9801      	ldr	r0, [sp, #4]
    e524:	f7ff fee9 	bl	e2fa <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    e528:	2801      	cmp	r0, #1
    e52a:	d003      	beq.n	e534 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    e52c:	2802      	cmp	r0, #2
    e52e:	d001      	beq.n	e534 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    e530:	21d8      	movs	r1, #216	; 0xd8
    e532:	e018      	b.n	e566 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    e534:	7130      	strb	r0, [r6, #4]
    e536:	4629      	mov	r1, r5
    e538:	8873      	ldrh	r3, [r6, #2]
    e53a:	2503      	movs	r5, #3
    e53c:	4620      	mov	r0, r4
    e53e:	463a      	mov	r2, r7
    e540:	9500      	str	r5, [sp, #0]
    e542:	f7fe ff23 	bl	d38c <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    e546:	4620      	mov	r0, r4
    e548:	60b7      	str	r7, [r6, #8]
    e54a:	f7fe ffdc 	bl	d506 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    e54e:	b138      	cbz	r0, e560 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9a>
    e550:	2100      	movs	r1, #0
    e552:	4620      	mov	r0, r4
    e554:	460a      	mov	r2, r1
    e556:	f7ff f928 	bl	d7aa <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    e55a:	b118      	cbz	r0, e564 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9e>
    e55c:	2001      	movs	r0, #1
    e55e:	e7dc      	b.n	e51a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x54>
    e560:	21e8      	movs	r1, #232	; 0xe8
    e562:	e000      	b.n	e566 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    e564:	21ed      	movs	r1, #237	; 0xed
    e566:	202b      	movs	r0, #43	; 0x2b
    e568:	f7f6 fb86 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e56c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e570:	4604      	mov	r4, r0
    e572:	460e      	mov	r6, r1
    e574:	2000      	movs	r0, #0
    e576:	f7f6 fd77 	bl	5068 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e57a:	4605      	mov	r5, r0
    e57c:	2000      	movs	r0, #0
    e57e:	b916      	cbnz	r6, e586 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc0>
    e580:	2001      	movs	r0, #1
    e582:	f7f6 fd71 	bl	5068 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e586:	2600      	movs	r6, #0
    e588:	46b0      	mov	r8, r6
    e58a:	182f      	adds	r7, r5, r0
    e58c:	e017      	b.n	e5be <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xf8>
    e58e:	8820      	ldrh	r0, [r4, #0]
    e590:	1c40      	adds	r0, r0, #1
    e592:	b280      	uxth	r0, r0
    e594:	8020      	strh	r0, [r4, #0]
    e596:	42b8      	cmp	r0, r7
    e598:	d302      	bcc.n	e5a0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xda>
    e59a:	4640      	mov	r0, r8
    e59c:	f8a4 8000 	strh.w	r8, [r4]
    e5a0:	b280      	uxth	r0, r0
    e5a2:	42a8      	cmp	r0, r5
    e5a4:	d304      	bcc.n	e5b0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    e5a6:	42b8      	cmp	r0, r7
    e5a8:	d202      	bcs.n	e5b0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    e5aa:	2000      	movs	r0, #0
    e5ac:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e5b0:	4669      	mov	r1, sp
    e5b2:	f7ff fc0e 	bl	ddd2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e5b6:	2800      	cmp	r0, #0
    e5b8:	d0f8      	beq.n	e5ac <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>
    e5ba:	1c76      	adds	r6, r6, #1
    e5bc:	b2f6      	uxtb	r6, r6
    e5be:	42b7      	cmp	r7, r6
    e5c0:	d8e5      	bhi.n	e58e <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc8>
    e5c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e5c6:	8020      	strh	r0, [r4, #0]
    e5c8:	2012      	movs	r0, #18
    e5ca:	e7ef      	b.n	e5ac <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>

0000e5cc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    e5cc:	b570      	push	{r4, r5, r6, lr}
    e5ce:	8050      	strh	r0, [r2, #2]
    e5d0:	890c      	ldrh	r4, [r1, #8]
    e5d2:	8094      	strh	r4, [r2, #4]
    e5d4:	898b      	ldrh	r3, [r1, #12]
    e5d6:	80d3      	strh	r3, [r2, #6]
    e5d8:	8948      	ldrh	r0, [r1, #10]
    e5da:	8110      	strh	r0, [r2, #8]
    e5dc:	89cd      	ldrh	r5, [r1, #14]
    e5de:	8155      	strh	r5, [r2, #10]
    e5e0:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    e5e2:	42ae      	cmp	r6, r5
    e5e4:	d108      	bne.n	e5f8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e5e6:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    e5e8:	4285      	cmp	r5, r0
    e5ea:	d105      	bne.n	e5f8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e5ec:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    e5ee:	429d      	cmp	r5, r3
    e5f0:	d102      	bne.n	e5f8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e5f2:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    e5f4:	42a3      	cmp	r3, r4
    e5f6:	d001      	beq.n	e5fc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    e5f8:	2301      	movs	r3, #1
    e5fa:	e000      	b.n	e5fe <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    e5fc:	2300      	movs	r3, #0
    e5fe:	7313      	strb	r3, [r2, #12]
    e600:	8548      	strh	r0, [r1, #42]	; 0x2a
    e602:	8950      	ldrh	r0, [r2, #10]
    e604:	85c8      	strh	r0, [r1, #46]	; 0x2e
    e606:	8890      	ldrh	r0, [r2, #4]
    e608:	8588      	strh	r0, [r1, #44]	; 0x2c
    e60a:	88d0      	ldrh	r0, [r2, #6]
    e60c:	8608      	strh	r0, [r1, #48]	; 0x30
    e60e:	2001      	movs	r0, #1
    e610:	7010      	strb	r0, [r2, #0]
    e612:	bd70      	pop	{r4, r5, r6, pc}

0000e614 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e614:	b510      	push	{r4, lr}
    e616:	888c      	ldrh	r4, [r1, #4]
    e618:	890a      	ldrh	r2, [r1, #8]
    e61a:	884b      	ldrh	r3, [r1, #2]
    e61c:	88c9      	ldrh	r1, [r1, #6]
    e61e:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e622:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e626:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e62a:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e62e:	bd10      	pop	{r4, pc}

0000e630 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e630:	b570      	push	{r4, r5, r6, lr}
    e632:	4615      	mov	r5, r2
    e634:	460c      	mov	r4, r1
    e636:	f000 f8c7 	bl	e7c8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e63a:	3096      	adds	r0, #150	; 0x96
    e63c:	4428      	add	r0, r5
    e63e:	42a0      	cmp	r0, r4
    e640:	d801      	bhi.n	e646 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e642:	1a20      	subs	r0, r4, r0
    e644:	bd70      	pop	{r4, r5, r6, pc}
    e646:	2000      	movs	r0, #0
    e648:	bd70      	pop	{r4, r5, r6, pc}

0000e64a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e64a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e64e:	4604      	mov	r4, r0
    e650:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e652:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e654:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e658:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e65c:	4285      	cmp	r5, r0
    e65e:	d300      	bcc.n	e662 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e660:	4605      	mov	r5, r0
    e662:	4620      	mov	r0, r4
    e664:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e668:	f000 f89e 	bl	e7a8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e66c:	4601      	mov	r1, r0
    e66e:	86e5      	strh	r5, [r4, #54]	; 0x36
    e670:	8761      	strh	r1, [r4, #58]	; 0x3a
    e672:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e674:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e678:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e67a:	4680      	mov	r8, r0
    e67c:	42aa      	cmp	r2, r5
    e67e:	d200      	bcs.n	e682 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e680:	462a      	mov	r2, r5
    e682:	428b      	cmp	r3, r1
    e684:	d200      	bcs.n	e688 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e686:	460b      	mov	r3, r1
    e688:	8202      	strh	r2, [r0, #16]
    e68a:	f8a8 3012 	strh.w	r3, [r8, #18]
    e68e:	42bd      	cmp	r5, r7
    e690:	d101      	bne.n	e696 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e692:	42b1      	cmp	r1, r6
    e694:	d001      	beq.n	e69a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e696:	2001      	movs	r0, #1
    e698:	e000      	b.n	e69c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e69a:	2000      	movs	r0, #0
    e69c:	4681      	mov	r9, r0
    e69e:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e6a2:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e6a6:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e6a8:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e6aa:	4285      	cmp	r5, r0
    e6ac:	d300      	bcc.n	e6b0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e6ae:	4605      	mov	r5, r0
    e6b0:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e6b4:	4620      	mov	r0, r4
    e6b6:	f000 f87f 	bl	e7b8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e6ba:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e6be:	2902      	cmp	r1, #2
    e6c0:	d108      	bne.n	e6d4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e6c2:	42af      	cmp	r7, r5
    e6c4:	d200      	bcs.n	e6c8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e6c6:	463d      	mov	r5, r7
    e6c8:	4286      	cmp	r6, r0
    e6ca:	d200      	bcs.n	e6ce <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e6cc:	4630      	mov	r0, r6
    e6ce:	2100      	movs	r1, #0
    e6d0:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e6d4:	f8a8 5008 	strh.w	r5, [r8, #8]
    e6d8:	f8a8 000c 	strh.w	r0, [r8, #12]
    e6dc:	42bd      	cmp	r5, r7
    e6de:	d101      	bne.n	e6e4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e6e0:	42b0      	cmp	r0, r6
    e6e2:	d001      	beq.n	e6e8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e6e4:	2001      	movs	r0, #1
    e6e6:	e000      	b.n	e6ea <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e6e8:	2000      	movs	r0, #0
    e6ea:	ea40 0009 	orr.w	r0, r0, r9
    e6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e6f2 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e6f2:	6840      	ldr	r0, [r0, #4]
    e6f4:	4770      	bx	lr

0000e6f6 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e6f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e6fa:	4616      	mov	r6, r2
    e6fc:	460f      	mov	r7, r1
    e6fe:	4604      	mov	r4, r0
    e700:	f000 f862 	bl	e7c8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e704:	4605      	mov	r5, r0
    e706:	463a      	mov	r2, r7
    e708:	68e1      	ldr	r1, [r4, #12]
    e70a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e70c:	f000 f847 	bl	e79e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    e710:	19a9      	adds	r1, r5, r6
    e712:	4281      	cmp	r1, r0
    e714:	d300      	bcc.n	e718 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e716:	4608      	mov	r0, r1
    e718:	6320      	str	r0, [r4, #48]	; 0x30
    e71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e71e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e71e:	221b      	movs	r2, #27
    e720:	8402      	strh	r2, [r0, #32]
    e722:	8382      	strh	r2, [r0, #28]
    e724:	82c2      	strh	r2, [r0, #22]
    e726:	8282      	strh	r2, [r0, #20]
    e728:	8142      	strh	r2, [r0, #10]
    e72a:	8202      	strh	r2, [r0, #16]
    e72c:	8102      	strh	r2, [r0, #8]
    e72e:	8542      	strh	r2, [r0, #42]	; 0x2a
    e730:	8582      	strh	r2, [r0, #44]	; 0x2c
    e732:	8482      	strh	r2, [r0, #36]	; 0x24
    e734:	2900      	cmp	r1, #0
    e736:	d10a      	bne.n	e74e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e738:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e73c:	8441      	strh	r1, [r0, #34]	; 0x22
    e73e:	83c1      	strh	r1, [r0, #30]
    e740:	8341      	strh	r1, [r0, #26]
    e742:	8301      	strh	r1, [r0, #24]
    e744:	81c1      	strh	r1, [r0, #14]
    e746:	8241      	strh	r1, [r0, #18]
    e748:	8181      	strh	r1, [r0, #12]
    e74a:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e74c:	8601      	strh	r1, [r0, #48]	; 0x30
    e74e:	4770      	bx	lr

0000e750 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e750:	6800      	ldr	r0, [r0, #0]
    e752:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e756:	4290      	cmp	r0, r2
    e758:	d903      	bls.n	e762 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e75a:	1a40      	subs	r0, r0, r1
    e75c:	389c      	subs	r0, #156	; 0x9c
    e75e:	0840      	lsrs	r0, r0, #1
    e760:	4770      	bx	lr
    e762:	2000      	movs	r0, #0
    e764:	4770      	bx	lr

0000e766 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e766:	b510      	push	{r4, lr}
    e768:	9c02      	ldr	r4, [sp, #8]
    e76a:	8281      	strh	r1, [r0, #20]
    e76c:	82c2      	strh	r2, [r0, #22]
    e76e:	8303      	strh	r3, [r0, #24]
    e770:	8344      	strh	r4, [r0, #26]
    e772:	bd10      	pop	{r4, pc}

0000e774 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    e774:	8050      	strh	r0, [r2, #2]
    e776:	8a88      	ldrh	r0, [r1, #20]
    e778:	8090      	strh	r0, [r2, #4]
    e77a:	8ac8      	ldrh	r0, [r1, #22]
    e77c:	80d0      	strh	r0, [r2, #6]
    e77e:	8b08      	ldrh	r0, [r1, #24]
    e780:	8110      	strh	r0, [r2, #8]
    e782:	8b48      	ldrh	r0, [r1, #26]
    e784:	8150      	strh	r0, [r2, #10]
    e786:	2001      	movs	r0, #1
    e788:	7010      	strb	r0, [r2, #0]
    e78a:	4770      	bx	lr
    e78c:	2902      	cmp	r1, #2
    e78e:	d003      	beq.n	e798 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    e790:	00c0      	lsls	r0, r0, #3
    e792:	3070      	adds	r0, #112	; 0x70
    e794:	b280      	uxth	r0, r0
    e796:	4770      	bx	lr
    e798:	0080      	lsls	r0, r0, #2
    e79a:	303c      	adds	r0, #60	; 0x3c
    e79c:	e7fa      	b.n	e794 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    e79e:	4288      	cmp	r0, r1
    e7a0:	d300      	bcc.n	e7a4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    e7a2:	4608      	mov	r0, r1
    e7a4:	1a80      	subs	r0, r0, r2
    e7a6:	4770      	bx	lr
    e7a8:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e7ac:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e7b0:	4281      	cmp	r1, r0
    e7b2:	d200      	bcs.n	e7b6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    e7b4:	4608      	mov	r0, r1
    e7b6:	4770      	bx	lr
    e7b8:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e7bc:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e7c0:	4281      	cmp	r1, r0
    e7c2:	d200      	bcs.n	e7c6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    e7c4:	4608      	mov	r0, r1
    e7c6:	4770      	bx	lr
    e7c8:	2196      	movs	r1, #150	; 0x96
    e7ca:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e7ce:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e7d2:	f000 b800 	b.w	e7d6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    e7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e7da:	460d      	mov	r5, r1
    e7dc:	4606      	mov	r6, r0
    e7de:	4698      	mov	r8, r3
    e7e0:	4617      	mov	r7, r2
    e7e2:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e7e4:	4611      	mov	r1, r2
    e7e6:	f7ff ffd1 	bl	e78c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e7ea:	4604      	mov	r4, r0
    e7ec:	4639      	mov	r1, r7
    e7ee:	4630      	mov	r0, r6
    e7f0:	f7ff ffe2 	bl	e7b8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e7f4:	42a0      	cmp	r0, r4
    e7f6:	d200      	bcs.n	e7fa <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    e7f8:	4604      	mov	r4, r0
    e7fa:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e7fc:	4641      	mov	r1, r8
    e7fe:	f7ff ffc5 	bl	e78c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e802:	4607      	mov	r7, r0
    e804:	4641      	mov	r1, r8
    e806:	4630      	mov	r0, r6
    e808:	f7ff ffce 	bl	e7a8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e80c:	42b8      	cmp	r0, r7
    e80e:	d300      	bcc.n	e812 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    e810:	4638      	mov	r0, r7
    e812:	4420      	add	r0, r4
    e814:	4428      	add	r0, r5
    e816:	1d80      	adds	r0, r0, #6
    e818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e81c:	2801      	cmp	r0, #1
    e81e:	d102      	bne.n	e826 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    e820:	7948      	ldrb	r0, [r1, #5]
    e822:	0980      	lsrs	r0, r0, #6
    e824:	d001      	beq.n	e82a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    e826:	2000      	movs	r0, #0
    e828:	4770      	bx	lr
    e82a:	2001      	movs	r0, #1
    e82c:	4770      	bx	lr
    e82e:	2801      	cmp	r0, #1
    e830:	d106      	bne.n	e840 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    e832:	7948      	ldrb	r0, [r1, #5]
    e834:	2101      	movs	r1, #1
    e836:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e83a:	d101      	bne.n	e840 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    e83c:	2001      	movs	r0, #1
    e83e:	4770      	bx	lr
    e840:	2000      	movs	r0, #0
    e842:	4770      	bx	lr
    e844:	2802      	cmp	r0, #2
    e846:	d003      	beq.n	e850 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    e848:	2803      	cmp	r0, #3
    e84a:	d001      	beq.n	e850 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    e84c:	2000      	movs	r0, #0
    e84e:	4770      	bx	lr
    e850:	2001      	movs	r0, #1
    e852:	4770      	bx	lr

0000e854 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    e854:	b510      	push	{r4, lr}
    e856:	4604      	mov	r4, r0
    e858:	7c00      	ldrb	r0, [r0, #16]
    e85a:	f7ff fff3 	bl	e844 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    e85e:	b148      	cbz	r0, e874 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e860:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    e864:	f104 0150 	add.w	r1, r4, #80	; 0x50
    e868:	f7ff fa70 	bl	dd4c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e86c:	2808      	cmp	r0, #8
    e86e:	d001      	beq.n	e874 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e870:	2001      	movs	r0, #1
    e872:	bd10      	pop	{r4, pc}
    e874:	7c20      	ldrb	r0, [r4, #16]
    e876:	b118      	cbz	r0, e880 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e878:	2802      	cmp	r0, #2
    e87a:	d001      	beq.n	e880 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e87c:	7de0      	ldrb	r0, [r4, #23]
    e87e:	bd10      	pop	{r4, pc}
    e880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e884:	2000      	movs	r0, #0
    e886:	f7f7 b923 	b.w	5ad0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000e88a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    e88a:	b508      	push	{r3, lr}
    e88c:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
    e890:	f88d 1000 	strb.w	r1, [sp]
    e894:	9900      	ldr	r1, [sp, #0]
    e896:	9100      	str	r1, [sp, #0]
    e898:	f89d 1000 	ldrb.w	r1, [sp]
    e89c:	b109      	cbz	r1, e8a2 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    e89e:	2001      	movs	r0, #1
    e8a0:	bd08      	pop	{r3, pc}
    e8a2:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    e8a6:	f88d 0000 	strb.w	r0, [sp]
    e8aa:	9800      	ldr	r0, [sp, #0]
    e8ac:	9000      	str	r0, [sp, #0]
    e8ae:	f89d 0000 	ldrb.w	r0, [sp]
    e8b2:	2000      	movs	r0, #0
    e8b4:	bd08      	pop	{r3, pc}

0000e8b6 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    e8b6:	20ff      	movs	r0, #255	; 0xff
    e8b8:	7008      	strb	r0, [r1, #0]
    e8ba:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    e8bc:	f7ff b99c 	b.w	dbf8 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000e8c0 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    e8c0:	b51c      	push	{r2, r3, r4, lr}
    e8c2:	4604      	mov	r4, r0
    e8c4:	22d4      	movs	r2, #212	; 0xd4
    e8c6:	2100      	movs	r1, #0
    e8c8:	f7fe f8a6 	bl	ca18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e8cc:	20ff      	movs	r0, #255	; 0xff
    e8ce:	7020      	strb	r0, [r4, #0]
    e8d0:	207f      	movs	r0, #127	; 0x7f
    e8d2:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    e8d6:	2013      	movs	r0, #19
    e8d8:	8060      	strh	r0, [r4, #2]
    e8da:	f7f6 feb5 	bl	5648 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    e8de:	4601      	mov	r1, r0
    e8e0:	62e0      	str	r0, [r4, #44]	; 0x2c
    e8e2:	2200      	movs	r2, #0
    e8e4:	4668      	mov	r0, sp
    e8e6:	f7ff f8f2 	bl	dace <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e8ea:	2200      	movs	r2, #0
    e8ec:	2101      	movs	r1, #1
    e8ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e8f0:	f7ff f962 	bl	dbb8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e8f4:	2204      	movs	r2, #4
    e8f6:	4668      	mov	r0, sp
    e8f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    e8fa:	f7ff f8e8 	bl	dace <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e8fe:	2200      	movs	r2, #0
    e900:	4611      	mov	r1, r2
    e902:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e904:	f7ff f958 	bl	dbb8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e908:	2000      	movs	r0, #0
    e90a:	73a0      	strb	r0, [r4, #14]
    e90c:	f104 0020 	add.w	r0, r4, #32
    e910:	e8bd 401c 	ldmia.w	sp!, {r2, r3, r4, lr}
    e914:	f000 b962 	b.w	ebdc <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000e918 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    e918:	7880      	ldrb	r0, [r0, #2]
    e91a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e91e:	b108      	cbz	r0, e924 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    e920:	2000      	movs	r0, #0
    e922:	4770      	bx	lr
    e924:	201f      	movs	r0, #31
    e926:	4770      	bx	lr

0000e928 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    e928:	f7f9 b9d0 	b.w	7ccc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>

0000e92c <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    e92c:	6880      	ldr	r0, [r0, #8]
    e92e:	4770      	bx	lr

0000e930 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    e930:	2001      	movs	r0, #1
    e932:	4770      	bx	lr

0000e934 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    e934:	b510      	push	{r4, lr}
    e936:	4604      	mov	r4, r0
    e938:	3020      	adds	r0, #32
    e93a:	f000 f90f 	bl	eb5c <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    e93e:	8861      	ldrh	r1, [r4, #2]
    e940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e944:	2228      	movs	r2, #40	; 0x28
    e946:	f7f9 bb9f 	b.w	8088 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000e94a <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    e94a:	2200      	movs	r2, #0
    e94c:	6282      	str	r2, [r0, #40]	; 0x28
    e94e:	8843      	ldrh	r3, [r0, #2]
    e950:	2b1d      	cmp	r3, #29
    e952:	d001      	beq.n	e958 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    e954:	7341      	strb	r1, [r0, #13]
    e956:	4770      	bx	lr
    e958:	7342      	strb	r2, [r0, #13]
    e95a:	4770      	bx	lr

0000e95c <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    e95c:	b510      	push	{r4, lr}
    e95e:	2400      	movs	r4, #0
    e960:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    e962:	f7ff f917 	bl	db94 <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    e966:	b100      	cbz	r0, e96a <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    e968:	2001      	movs	r0, #1
    e96a:	4384      	bics	r4, r0
    e96c:	f084 0001 	eor.w	r0, r4, #1
    e970:	bd10      	pop	{r4, pc}

0000e972 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    e972:	2000      	movs	r0, #0
    e974:	4770      	bx	lr

0000e976 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    e976:	7880      	ldrb	r0, [r0, #2]
    e978:	f000 0001 	and.w	r0, r0, #1
    e97c:	4770      	bx	lr

0000e97e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    e97e:	7880      	ldrb	r0, [r0, #2]
    e980:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e984:	4770      	bx	lr

0000e986 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    e986:	2001      	movs	r0, #1
    e988:	4770      	bx	lr

0000e98a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    e98a:	7880      	ldrb	r0, [r0, #2]
    e98c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    e990:	4770      	bx	lr

0000e992 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    e992:	f990 000e 	ldrsb.w	r0, [r0, #14]
    e996:	4770      	bx	lr

0000e998 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    e998:	7800      	ldrb	r0, [r0, #0]
    e99a:	28ff      	cmp	r0, #255	; 0xff
    e99c:	d001      	beq.n	e9a2 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    e99e:	2001      	movs	r0, #1
    e9a0:	4770      	bx	lr
    e9a2:	2000      	movs	r0, #0
    e9a4:	4770      	bx	lr

0000e9a6 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    e9a6:	680a      	ldr	r2, [r1, #0]
    e9a8:	f840 2f11 	str.w	r2, [r0, #17]!
    e9ac:	8889      	ldrh	r1, [r1, #4]
    e9ae:	8081      	strh	r1, [r0, #4]
    e9b0:	2101      	movs	r1, #1
    e9b2:	7181      	strb	r1, [r0, #6]
    e9b4:	4770      	bx	lr

0000e9b6 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    e9b6:	7b00      	ldrb	r0, [r0, #12]
    e9b8:	4770      	bx	lr

0000e9ba <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    e9ba:	2001      	movs	r0, #1
    e9bc:	4770      	bx	lr

0000e9be <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    e9be:	61c1      	str	r1, [r0, #28]
    e9c0:	4770      	bx	lr

0000e9c2 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    e9c2:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    e9c6:	4770      	bx	lr

0000e9c8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    e9c8:	b570      	push	{r4, r5, r6, lr}
    e9ca:	4604      	mov	r4, r0
    e9cc:	7880      	ldrb	r0, [r0, #2]
    e9ce:	2501      	movs	r5, #1
    e9d0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e9d4:	b138      	cbz	r0, e9e6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    e9d6:	233c      	movs	r3, #60	; 0x3c
    e9d8:	22ff      	movs	r2, #255	; 0xff
    e9da:	4620      	mov	r0, r4
    e9dc:	69e1      	ldr	r1, [r4, #28]
    e9de:	f7f9 f9a1 	bl	7d24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x444>
    e9e2:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    e9e6:	78a0      	ldrb	r0, [r4, #2]
    e9e8:	07c0      	lsls	r0, r0, #31
    e9ea:	f7fc f90f 	bl	ac0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e9ee:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    e9f2:	bd70      	pop	{r4, r5, r6, pc}

0000e9f4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    e9f4:	7bc0      	ldrb	r0, [r0, #15]
    e9f6:	2800      	cmp	r0, #0
    e9f8:	d000      	beq.n	e9fc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    e9fa:	2001      	movs	r0, #1
    e9fc:	4770      	bx	lr
    e9fe:	b510      	push	{r4, lr}
    ea00:	f7ff f9a4 	bl	dd4c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    ea04:	4604      	mov	r4, r0
    ea06:	f7f7 ff0b 	bl	6820 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    ea0a:	b138      	cbz	r0, ea1c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    ea0c:	4620      	mov	r0, r4
    ea0e:	f7f7 fe3f 	bl	6690 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    ea12:	b118      	cbz	r0, ea1c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    ea14:	2110      	movs	r1, #16
    ea16:	f7ff fb79 	bl	e10c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    ea1a:	b108      	cbz	r0, ea20 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    ea1c:	2000      	movs	r0, #0
    ea1e:	bd10      	pop	{r4, pc}
    ea20:	2001      	movs	r0, #1
    ea22:	bd10      	pop	{r4, pc}
    ea24:	2101      	movs	r1, #1
    ea26:	f7f8 bddb 	b.w	75e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    ea2a:	2101      	movs	r1, #1
    ea2c:	f7f8 bdd8 	b.w	75e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    ea30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea34:	4604      	mov	r4, r0
    ea36:	2700      	movs	r7, #0
    ea38:	704f      	strb	r7, [r1, #1]
    ea3a:	2011      	movs	r0, #17
    ea3c:	460d      	mov	r5, r1
    ea3e:	7008      	strb	r0, [r1, #0]
    ea40:	2220      	movs	r2, #32
    ea42:	f104 0166 	add.w	r1, r4, #102	; 0x66
    ea46:	1d28      	adds	r0, r5, #4
    ea48:	f7fd ff6c 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ea4c:	2601      	movs	r6, #1
    ea4e:	722e      	strb	r6, [r5, #8]
    ea50:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    ea54:	7928      	ldrb	r0, [r5, #4]
    ea56:	2800      	cmp	r0, #0
    ea58:	d111      	bne.n	ea7e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8a>
    ea5a:	88e8      	ldrh	r0, [r5, #6]
    ea5c:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    ea60:	69e0      	ldr	r0, [r4, #28]
    ea62:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    ea66:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
    ea6a:	f884 608e 	strb.w	r6, [r4, #142]	; 0x8e
    ea6e:	8800      	ldrh	r0, [r0, #0]
    ea70:	f7f6 fd2a 	bl	54c8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    ea74:	f7fe fe4b 	bl	d70e <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    ea78:	69e0      	ldr	r0, [r4, #28]
    ea7a:	f880 6070 	strb.w	r6, [r0, #112]	; 0x70
    ea7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ea82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea86:	4604      	mov	r4, r0
    ea88:	460f      	mov	r7, r1
    ea8a:	7e40      	ldrb	r0, [r0, #25]
    ea8c:	f7f7 fdc0 	bl	6610 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    ea90:	4606      	mov	r6, r0
    ea92:	7e20      	ldrb	r0, [r4, #24]
    ea94:	f104 0549 	add.w	r5, r4, #73	; 0x49
    ea98:	b120      	cbz	r0, eaa4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    ea9a:	b11e      	cbz	r6, eaa4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    ea9c:	7e60      	ldrb	r0, [r4, #25]
    ea9e:	f7f7 fdab 	bl	65f8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    eaa2:	b1a0      	cbz	r0, eace <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xda>
    eaa4:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    eaa8:	2800      	cmp	r0, #0
    eaaa:	d024      	beq.n	eaf6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    eaac:	7ea0      	ldrb	r0, [r4, #26]
    eaae:	2800      	cmp	r0, #0
    eab0:	d021      	beq.n	eaf6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    eab2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    eab6:	4629      	mov	r1, r5
    eab8:	f7ff feb9 	bl	e82e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    eabc:	b1a8      	cbz	r0, eaea <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    eabe:	f7f7 fd97 	bl	65f0 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    eac2:	463a      	mov	r2, r7
    eac4:	4629      	mov	r1, r5
    eac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    eaca:	f7ff b8d7 	b.w	dc7c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    eace:	2001      	movs	r0, #1
    ead0:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    ead4:	463a      	mov	r2, r7
    ead6:	4629      	mov	r1, r5
    ead8:	4630      	mov	r0, r6
    eada:	f7ff f8cf 	bl	dc7c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    eade:	7e61      	ldrb	r1, [r4, #25]
    eae0:	4628      	mov	r0, r5
    eae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    eae6:	f7f7 bd9f 	b.w	6628 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    eaea:	4639      	mov	r1, r7
    eaec:	4628      	mov	r0, r5
    eaee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    eaf2:	f7ff b8b2 	b.w	dc5a <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    eaf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eafa:	b510      	push	{r4, lr}
    eafc:	4604      	mov	r4, r0
    eafe:	4608      	mov	r0, r1
    eb00:	f7fd fa38 	bl	bf74 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    eb04:	7921      	ldrb	r1, [r4, #4]
    eb06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb0a:	2025      	movs	r0, #37	; 0x25
    eb0c:	f001 bd69 	b.w	105e2 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    eb10:	b510      	push	{r4, lr}
    eb12:	4604      	mov	r4, r0
    eb14:	3026      	adds	r0, #38	; 0x26
    eb16:	f7fd f9ed 	bl	bef4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    eb1a:	2800      	cmp	r0, #0
    eb1c:	d102      	bne.n	eb24 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    eb1e:	207f      	movs	r0, #127	; 0x7f
    eb20:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    eb24:	bd10      	pop	{r4, pc}
    eb26:	7802      	ldrb	r2, [r0, #0]
    eb28:	2320      	movs	r3, #32
    eb2a:	f022 0220 	bic.w	r2, r2, #32
    eb2e:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    eb32:	430a      	orrs	r2, r1
    eb34:	7002      	strb	r2, [r0, #0]
    eb36:	4770      	bx	lr

0000eb38 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    eb38:	b570      	push	{r4, r5, r6, lr}
    eb3a:	7001      	strb	r1, [r0, #0]
    eb3c:	7042      	strb	r2, [r0, #1]
    eb3e:	4614      	mov	r4, r2
    eb40:	460d      	mov	r5, r1
    eb42:	7880      	ldrb	r0, [r0, #2]
    eb44:	f000 f87f 	bl	ec46 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    eb48:	fb10 f005 	smulbb	r0, r0, r5
    eb4c:	4360      	muls	r0, r4
    eb4e:	28ff      	cmp	r0, #255	; 0xff
    eb50:	d303      	bcc.n	eb5a <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    eb52:	215c      	movs	r1, #92	; 0x5c
    eb54:	202e      	movs	r0, #46	; 0x2e
    eb56:	f7f6 f88f 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb5a:	bd70      	pop	{r4, r5, r6, pc}

0000eb5c <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    eb5c:	b510      	push	{r4, lr}
    eb5e:	4604      	mov	r4, r0
    eb60:	7880      	ldrb	r0, [r0, #2]
    eb62:	f000 f870 	bl	ec46 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    eb66:	7861      	ldrb	r1, [r4, #1]
    eb68:	7822      	ldrb	r2, [r4, #0]
    eb6a:	fb11 f102 	smulbb	r1, r1, r2
    eb6e:	4348      	muls	r0, r1
    eb70:	b2c0      	uxtb	r0, r0
    eb72:	bd10      	pop	{r4, pc}

0000eb74 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    eb74:	b510      	push	{r4, lr}
    eb76:	4604      	mov	r4, r0
    eb78:	f000 f84d 	bl	ec16 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    eb7c:	7961      	ldrb	r1, [r4, #5]
    eb7e:	1c49      	adds	r1, r1, #1
    eb80:	b2c9      	uxtb	r1, r1
    eb82:	7161      	strb	r1, [r4, #5]
    eb84:	7862      	ldrb	r2, [r4, #1]
    eb86:	4291      	cmp	r1, r2
    eb88:	d10b      	bne.n	eba2 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    eb8a:	2200      	movs	r2, #0
    eb8c:	7162      	strb	r2, [r4, #5]
    eb8e:	78e1      	ldrb	r1, [r4, #3]
    eb90:	4301      	orrs	r1, r0
    eb92:	70e1      	strb	r1, [r4, #3]
    eb94:	78a3      	ldrb	r3, [r4, #2]
    eb96:	4299      	cmp	r1, r3
    eb98:	d103      	bne.n	eba2 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    eb9a:	70e2      	strb	r2, [r4, #3]
    eb9c:	7921      	ldrb	r1, [r4, #4]
    eb9e:	1c49      	adds	r1, r1, #1
    eba0:	7121      	strb	r1, [r4, #4]
    eba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eba6:	f000 b825 	b.w	ebf4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000ebaa <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    ebaa:	7081      	strb	r1, [r0, #2]
    ebac:	4770      	bx	lr

0000ebae <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    ebae:	b570      	push	{r4, r5, r6, lr}
    ebb0:	4604      	mov	r4, r0
    ebb2:	7880      	ldrb	r0, [r0, #2]
    ebb4:	f000 f847 	bl	ec46 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ebb8:	7861      	ldrb	r1, [r4, #1]
    ebba:	fb11 f500 	smulbb	r5, r1, r0
    ebbe:	78e0      	ldrb	r0, [r4, #3]
    ebc0:	f000 f841 	bl	ec46 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ebc4:	7861      	ldrb	r1, [r4, #1]
    ebc6:	7962      	ldrb	r2, [r4, #5]
    ebc8:	fb10 2001 	smlabb	r0, r0, r1, r2
    ebcc:	7821      	ldrb	r1, [r4, #0]
    ebce:	7922      	ldrb	r2, [r4, #4]
    ebd0:	1a89      	subs	r1, r1, r2
    ebd2:	fb11 f105 	smulbb	r1, r1, r5
    ebd6:	1a08      	subs	r0, r1, r0
    ebd8:	b2c0      	uxtb	r0, r0
    ebda:	bd70      	pop	{r4, r5, r6, pc}

0000ebdc <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    ebdc:	2100      	movs	r1, #0
    ebde:	6001      	str	r1, [r0, #0]
    ebe0:	8081      	strh	r1, [r0, #4]
    ebe2:	2101      	movs	r1, #1
    ebe4:	7041      	strb	r1, [r0, #1]
    ebe6:	7001      	strb	r1, [r0, #0]
    ebe8:	4770      	bx	lr

0000ebea <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    ebea:	2100      	movs	r1, #0
    ebec:	70c1      	strb	r1, [r0, #3]
    ebee:	7141      	strb	r1, [r0, #5]
    ebf0:	7101      	strb	r1, [r0, #4]
    ebf2:	4770      	bx	lr
    ebf4:	b510      	push	{r4, lr}
    ebf6:	2801      	cmp	r0, #1
    ebf8:	d007      	beq.n	ec0a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    ebfa:	2802      	cmp	r0, #2
    ebfc:	d007      	beq.n	ec0e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    ebfe:	2804      	cmp	r0, #4
    ec00:	d007      	beq.n	ec12 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    ec02:	2139      	movs	r1, #57	; 0x39
    ec04:	202e      	movs	r0, #46	; 0x2e
    ec06:	f7f6 f837 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec0a:	2025      	movs	r0, #37	; 0x25
    ec0c:	bd10      	pop	{r4, pc}
    ec0e:	2026      	movs	r0, #38	; 0x26
    ec10:	bd10      	pop	{r4, pc}
    ec12:	2027      	movs	r0, #39	; 0x27
    ec14:	bd10      	pop	{r4, pc}
    ec16:	4601      	mov	r1, r0
    ec18:	2000      	movs	r0, #0
    ec1a:	788a      	ldrb	r2, [r1, #2]
    ec1c:	07d3      	lsls	r3, r2, #31
    ec1e:	d002      	beq.n	ec26 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    ec20:	78cb      	ldrb	r3, [r1, #3]
    ec22:	07db      	lsls	r3, r3, #31
    ec24:	d006      	beq.n	ec34 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    ec26:	0793      	lsls	r3, r2, #30
    ec28:	d506      	bpl.n	ec38 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    ec2a:	78cb      	ldrb	r3, [r1, #3]
    ec2c:	079b      	lsls	r3, r3, #30
    ec2e:	d403      	bmi.n	ec38 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    ec30:	2002      	movs	r0, #2
    ec32:	4770      	bx	lr
    ec34:	2001      	movs	r0, #1
    ec36:	4770      	bx	lr
    ec38:	0752      	lsls	r2, r2, #29
    ec3a:	d5fc      	bpl.n	ec36 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    ec3c:	78c9      	ldrb	r1, [r1, #3]
    ec3e:	0749      	lsls	r1, r1, #29
    ec40:	d4f9      	bmi.n	ec36 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    ec42:	2004      	movs	r0, #4
    ec44:	4770      	bx	lr
    ec46:	f3c0 0180 	ubfx	r1, r0, #2, #1
    ec4a:	f3c0 0240 	ubfx	r2, r0, #1, #1
    ec4e:	4411      	add	r1, r2
    ec50:	f000 0001 	and.w	r0, r0, #1
    ec54:	4408      	add	r0, r1
    ec56:	4770      	bx	lr

0000ec58 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    ec58:	f240 315a 	movw	r1, #858	; 0x35a
    ec5c:	4348      	muls	r0, r1
    ec5e:	4770      	bx	lr

0000ec60 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    ec60:	f240 20ef 	movw	r0, #751	; 0x2ef
    ec64:	4770      	bx	lr
    ec66:	020e      	.short	0x020e
    ec68:	0630041c 	.word	0x0630041c
    ec6c:	035a0c60 	.word	0x035a0c60
    ec70:	05c506b4 	.word	0x05c506b4
    ec74:	12250bf5 	.word	0x12250bf5
    ec78:	03b101a3 	.word	0x03b101a3
    ec7c:	02ef05bf 	.word	0x02ef05bf
    ec80:	09a30649 	.word	0x09a30649

0000ec84 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    ec84:	b510      	push	{r4, lr}
    ec86:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    ec8a:	b109      	cbz	r1, ec90 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    ec8c:	2000      	movs	r0, #0
    ec8e:	bd10      	pop	{r4, pc}
    ec90:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    ec94:	b949      	cbnz	r1, ecaa <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    ec96:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
    ec9a:	b131      	cbz	r1, ecaa <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    ec9c:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
    eca0:	428a      	cmp	r2, r1
    eca2:	d902      	bls.n	ecaa <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    eca4:	f7ff fe90 	bl	e9c8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    eca8:	e7f0      	b.n	ec8c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    ecaa:	2001      	movs	r0, #1
    ecac:	bd10      	pop	{r4, pc}

0000ecae <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    ecae:	b510      	push	{r4, lr}
    ecb0:	b131      	cbz	r1, ecc0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    ecb2:	2901      	cmp	r1, #1
    ecb4:	d008      	beq.n	ecc8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    ecb6:	f240 718a 	movw	r1, #1930	; 0x78a
    ecba:	2030      	movs	r0, #48	; 0x30
    ecbc:	f7f5 ffdc 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ecc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ecc4:	f000 b9d4 	b.w	f070 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x314>
    ecc8:	2100      	movs	r1, #0
    ecca:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
    ecce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ecd2:	f000 b93b 	b.w	ef4c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f0>

0000ecd6 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>:
    ecd6:	b510      	push	{r4, lr}
    ecd8:	4604      	mov	r4, r0
    ecda:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    ecde:	2800      	cmp	r0, #0
    ece0:	d019      	beq.n	ed16 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x40>
    ece2:	2001      	movs	r0, #1
    ece4:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    ece8:	4601      	mov	r1, r0
    ecea:	4620      	mov	r0, r4
    ecec:	f7ff fe69 	bl	e9c2 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    ecf0:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    ecf4:	b170      	cbz	r0, ed14 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x3e>
    ecf6:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    ecfa:	f7f4 f88b 	bl	2e14 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ecfe:	7820      	ldrb	r0, [r4, #0]
    ed00:	f7f4 f9d6 	bl	30b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    ed04:	f814 09a0 	ldrb.w	r0, [r4], #-160
    ed08:	f7f4 f9b0 	bl	306c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ed0c:	b120      	cbz	r0, ed18 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x42>
    ed0e:	2000      	movs	r0, #0
    ed10:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
    ed14:	2000      	movs	r0, #0
    ed16:	bd10      	pop	{r4, pc}
    ed18:	f240 210f 	movw	r1, #527	; 0x20f
    ed1c:	2030      	movs	r0, #48	; 0x30
    ed1e:	f7f5 ffab 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ed22 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>:
    ed22:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    ed26:	4770      	bx	lr

0000ed28 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>:
    ed28:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    ed2c:	4770      	bx	lr

0000ed2e <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>:
    ed2e:	b50e      	push	{r1, r2, r3, lr}
    ed30:	4669      	mov	r1, sp
    ed32:	2001      	movs	r0, #1
    ed34:	f7fe fe14 	bl	d960 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    ed38:	b138      	cbz	r0, ed4a <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x1c>
    ed3a:	f44f 71a1 	mov.w	r1, #322	; 0x142
    ed3e:	2030      	movs	r0, #48	; 0x30
    ed40:	f7f5 ff9a 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed44:	9802      	ldr	r0, [sp, #8]
    ed46:	f7ff ffc6 	bl	ecd6 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    ed4a:	4668      	mov	r0, sp
    ed4c:	f7f6 f9da 	bl	5104 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    ed50:	2800      	cmp	r0, #0
    ed52:	d0f7      	beq.n	ed44 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x16>
    ed54:	f7f9 fb14 	bl	8380 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb0>
    ed58:	2000      	movs	r0, #0
    ed5a:	bd0e      	pop	{r1, r2, r3, pc}

0000ed5c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>:
    ed5c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ed5e:	4604      	mov	r4, r0
    ed60:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    ed64:	2800      	cmp	r0, #0
    ed66:	d153      	bne.n	ee10 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    ed68:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    ed6c:	2803      	cmp	r0, #3
    ed6e:	d14f      	bne.n	ee10 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    ed70:	f7fd fc63 	bl	c63a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    ed74:	4601      	mov	r1, r0
    ed76:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    ed7a:	f7f3 fbe7 	bl	254c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    ed7e:	2800      	cmp	r0, #0
    ed80:	dd46      	ble.n	ee10 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    ed82:	68e1      	ldr	r1, [r4, #12]
    ed84:	b111      	cbz	r1, ed8c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x30>
    ed86:	fbb0 f0f1 	udiv	r0, r0, r1
    ed8a:	e000      	b.n	ed8e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x32>
    ed8c:	2000      	movs	r0, #0
    ed8e:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    ed92:	1c40      	adds	r0, r0, #1
    ed94:	4408      	add	r0, r1
    ed96:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
    ed9a:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    ed9e:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    eda2:	1a08      	subs	r0, r1, r0
    eda4:	b200      	sxth	r0, r0
    eda6:	2800      	cmp	r0, #0
    eda8:	dd32      	ble.n	ee10 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    edaa:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    edae:	f7f4 f831 	bl	2e14 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    edb2:	2800      	cmp	r0, #0
    edb4:	d02c      	beq.n	ee10 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    edb6:	2001      	movs	r0, #1
    edb8:	f884 0149 	strb.w	r0, [r4, #329]	; 0x149
    edbc:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
    edc0:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
    edc4:	ae01      	add	r6, sp, #4
    edc6:	1a40      	subs	r0, r0, r1
    edc8:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    edcc:	1e40      	subs	r0, r0, #1
    edce:	4408      	add	r0, r1
    edd0:	b285      	uxth	r5, r0
    edd2:	e017      	b.n	ee04 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xa8>
    edd4:	9600      	str	r6, [sp, #0]
    edd6:	f8b4 1144 	ldrh.w	r1, [r4, #324]	; 0x144
    edda:	2300      	movs	r3, #0
    eddc:	2201      	movs	r2, #1
    edde:	4620      	mov	r0, r4
    ede0:	f7f9 fb9e 	bl	8520 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    ede4:	2800      	cmp	r0, #0
    ede6:	d013      	beq.n	ee10 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    ede8:	2801      	cmp	r0, #1
    edea:	d004      	beq.n	edf6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x9a>
    edec:	f240 610c 	movw	r1, #1548	; 0x60c
    edf0:	2030      	movs	r0, #48	; 0x30
    edf2:	f7f5 ff41 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    edf6:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    edfa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    edfe:	4408      	add	r0, r1
    ee00:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
    ee04:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    ee08:	1a28      	subs	r0, r5, r0
    ee0a:	b200      	sxth	r0, r0
    ee0c:	2800      	cmp	r0, #0
    ee0e:	dae1      	bge.n	edd4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x78>
    ee10:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ee12:	2000      	movs	r0, #0
    ee14:	4770      	bx	lr
    ee16:	b570      	push	{r4, r5, r6, lr}
    ee18:	4604      	mov	r4, r0
    ee1a:	2601      	movs	r6, #1
    ee1c:	f000 f90c 	bl	f038 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2dc>
    ee20:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    ee24:	2000      	movs	r0, #0
    ee26:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    ee2a:	2001      	movs	r0, #1
    ee2c:	f884 00c3 	strb.w	r0, [r4, #195]	; 0xc3
    ee30:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    ee34:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
    ee38:	b160      	cbz	r0, ee54 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xf8>
    ee3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ee3e:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    ee42:	f7f3 fb51 	bl	24e8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    ee46:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    ee4a:	2100      	movs	r1, #0
    ee4c:	4628      	mov	r0, r5
    ee4e:	f7ff f8a3 	bl	df98 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    ee52:	e00f      	b.n	ee74 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x118>
    ee54:	4620      	mov	r0, r4
    ee56:	f7ff fd69 	bl	e92c <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    ee5a:	4606      	mov	r6, r0
    ee5c:	4631      	mov	r1, r6
    ee5e:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    ee62:	f7f3 fb41 	bl	24e8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    ee66:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    ee6a:	4631      	mov	r1, r6
    ee6c:	4628      	mov	r0, r5
    ee6e:	f7ff f893 	bl	df98 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    ee72:	1c46      	adds	r6, r0, #1
    ee74:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    ee78:	1c41      	adds	r1, r0, #1
    ee7a:	290a      	cmp	r1, #10
    ee7c:	d202      	bcs.n	ee84 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x128>
    ee7e:	4430      	add	r0, r6
    ee80:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    ee84:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    ee88:	b130      	cbz	r0, ee98 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13c>
    ee8a:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    ee8e:	1c40      	adds	r0, r0, #1
    ee90:	280a      	cmp	r0, #10
    ee92:	d301      	bcc.n	ee98 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13c>
    ee94:	2002      	movs	r0, #2
    ee96:	e000      	b.n	ee9a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13e>
    ee98:	2003      	movs	r0, #3
    ee9a:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    ee9e:	2100      	movs	r1, #0
    eea0:	4620      	mov	r0, r4
    eea2:	f000 f822 	bl	eeea <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x18e>
    eea6:	b120      	cbz	r0, eeb2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x156>
    eea8:	4620      	mov	r0, r4
    eeaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    eeae:	f000 b80d 	b.w	eecc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x170>
    eeb2:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    eeb6:	4629      	mov	r1, r5
    eeb8:	f000 f8bc 	bl	f034 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    eebc:	2800      	cmp	r0, #0
    eebe:	d104      	bne.n	eeca <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x16e>
    eec0:	f240 61ad 	movw	r1, #1709	; 0x6ad
    eec4:	2030      	movs	r0, #48	; 0x30
    eec6:	f7f5 fed7 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eeca:	bd70      	pop	{r4, r5, r6, pc}
    eecc:	b510      	push	{r4, lr}
    eece:	4604      	mov	r4, r0
    eed0:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    eed4:	f7f4 f8ca 	bl	306c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    eed8:	2000      	movs	r0, #0
    eeda:	7520      	strb	r0, [r4, #20]
    eedc:	bd10      	pop	{r4, pc}
    eede:	b510      	push	{r4, lr}
    eee0:	f7ff fd28 	bl	e934 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    eee4:	f500 7084 	add.w	r0, r0, #264	; 0x108
    eee8:	bd10      	pop	{r4, pc}
    eeea:	b570      	push	{r4, r5, r6, lr}
    eeec:	4604      	mov	r4, r0
    eeee:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
    eef2:	460d      	mov	r5, r1
    eef4:	b108      	cbz	r0, eefa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x19e>
    eef6:	2001      	movs	r0, #1
    eef8:	bd70      	pop	{r4, r5, r6, pc}
    eefa:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    eefe:	b1a8      	cbz	r0, ef2c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d0>
    ef00:	4620      	mov	r0, r4
    ef02:	f7ff fd13 	bl	e92c <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    ef06:	4405      	add	r5, r0
    ef08:	4620      	mov	r0, r4
    ef0a:	f7ff ffe8 	bl	eede <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x182>
    ef0e:	1941      	adds	r1, r0, r5
    ef10:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    ef14:	4288      	cmp	r0, r1
    ef16:	d206      	bcs.n	ef26 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1ca>
    ef18:	2001      	movs	r0, #1
    ef1a:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    ef1e:	4620      	mov	r0, r4
    ef20:	f7ff fd52 	bl	e9c8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    ef24:	e7e7      	b.n	eef6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x19a>
    ef26:	1b40      	subs	r0, r0, r5
    ef28:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    ef2c:	2000      	movs	r0, #0
    ef2e:	bd70      	pop	{r4, r5, r6, pc}
    ef30:	b510      	push	{r4, lr}
    ef32:	4604      	mov	r4, r0
    ef34:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    ef38:	f000 f9a3 	bl	f282 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x526>
    ef3c:	4602      	mov	r2, r0
    ef3e:	4620      	mov	r0, r4
    ef40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef44:	f240 1117 	movw	r1, #279	; 0x117
    ef48:	f7ff bbd5 	b.w	e6f6 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    ef4c:	b510      	push	{r4, lr}
    ef4e:	f7fc fe67 	bl	bc20 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    ef52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef56:	f7f4 b9df 	b.w	3318 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    ef5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ef5e:	4604      	mov	r4, r0
    ef60:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
    ef64:	2800      	cmp	r0, #0
    ef66:	d051      	beq.n	f00c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2b0>
    ef68:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    ef6c:	2803      	cmp	r0, #3
    ef6e:	d14d      	bne.n	f00c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2b0>
    ef70:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    ef74:	f001 fa7e 	bl	10474 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    ef78:	4605      	mov	r5, r0
    ef7a:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    ef7e:	f7f9 f9f1 	bl	8364 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    ef82:	4428      	add	r0, r5
    ef84:	b286      	uxth	r6, r0
    ef86:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    ef8a:	f7f9 f9eb 	bl	8364 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    ef8e:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    ef92:	fa1f f880 	uxth.w	r8, r0
    ef96:	4648      	mov	r0, r9
    ef98:	f001 fb05 	bl	105a6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    ef9c:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    efa0:	1a0d      	subs	r5, r1, r0
    efa2:	4648      	mov	r0, r9
    efa4:	f001 fb0d 	bl	105c2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    efa8:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    efac:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    efb0:	fbb0 f0fa 	udiv	r0, r0, sl
    efb4:	1a2d      	subs	r5, r5, r0
    efb6:	4648      	mov	r0, r9
    efb8:	f001 faf5 	bl	105a6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    efbc:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    efc0:	1a0f      	subs	r7, r1, r0
    efc2:	4648      	mov	r0, r9
    efc4:	f001 fafd 	bl	105c2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    efc8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    efcc:	4401      	add	r1, r0
    efce:	fbb1 f0fa 	udiv	r0, r1, sl
    efd2:	1a39      	subs	r1, r7, r0
    efd4:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    efd8:	4370      	muls	r0, r6
    efda:	fbb0 f2f8 	udiv	r2, r0, r8
    efde:	2029      	movs	r0, #41	; 0x29
    efe0:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    efe4:	3260      	adds	r2, #96	; 0x60
    efe6:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    efea:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    efee:	42a9      	cmp	r1, r5
    eff0:	d801      	bhi.n	eff6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x29a>
    eff2:	4285      	cmp	r5, r0
    eff4:	d901      	bls.n	effa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x29e>
    eff6:	f7f5 fab9 	bl	456c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    effa:	4631      	mov	r1, r6
    effc:	68e0      	ldr	r0, [r4, #12]
    effe:	f7fd fb50 	bl	c6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    f002:	2100      	movs	r1, #0
    f004:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    f008:	f884 114a 	strb.w	r1, [r4, #330]	; 0x14a
    f00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f010:	b570      	push	{r4, r5, r6, lr}
    f012:	460c      	mov	r4, r1
    f014:	4605      	mov	r5, r0
    f016:	f001 fad4 	bl	105c2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f01a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f01e:	4408      	add	r0, r1
    f020:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f024:	fbb0 f6f1 	udiv	r6, r0, r1
    f028:	4628      	mov	r0, r5
    f02a:	f001 fabc 	bl	105a6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f02e:	4430      	add	r0, r6
    f030:	4420      	add	r0, r4
    f032:	bd70      	pop	{r4, r5, r6, pc}
    f034:	f7f3 bbbe 	b.w	27b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f038:	b510      	push	{r4, lr}
    f03a:	4604      	mov	r4, r0
    f03c:	f7ff fca3 	bl	e986 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f040:	b1a0      	cbz	r0, f06c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x310>
    f042:	4620      	mov	r0, r4
    f044:	f7ff fc97 	bl	e976 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f048:	b918      	cbnz	r0, f052 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2f6>
    f04a:	4620      	mov	r0, r4
    f04c:	f7ff fc9d 	bl	e98a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f050:	b120      	cbz	r0, f05c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x300>
    f052:	2449      	movs	r4, #73	; 0x49
    f054:	f001 fa73 	bl	1053e <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    f058:	b928      	cbnz	r0, f066 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x30a>
    f05a:	e001      	b.n	f060 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x304>
    f05c:	2442      	movs	r4, #66	; 0x42
    f05e:	e7f9      	b.n	f054 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2f8>
    f060:	f001 fa63 	bl	1052a <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    f064:	b100      	cbz	r0, f068 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x30c>
    f066:	1de4      	adds	r4, r4, #7
    f068:	4620      	mov	r0, r4
    f06a:	bd10      	pop	{r4, pc}
    f06c:	206b      	movs	r0, #107	; 0x6b
    f06e:	bd10      	pop	{r4, pc}
    f070:	b570      	push	{r4, r5, r6, lr}
    f072:	4604      	mov	r4, r0
    f074:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
    f078:	2500      	movs	r5, #0
    f07a:	b118      	cbz	r0, f084 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x328>
    f07c:	2001      	movs	r0, #1
    f07e:	f000 f887 	bl	f190 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x434>
    f082:	4605      	mov	r5, r0
    f084:	4620      	mov	r0, r4
    f086:	f7ff fc51 	bl	e92c <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f08a:	1941      	adds	r1, r0, r5
    f08c:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    f090:	34b8      	adds	r4, #184	; 0xb8
    f092:	f7f3 fa29 	bl	24e8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    f096:	2600      	movs	r6, #0
    f098:	60e0      	str	r0, [r4, #12]
    f09a:	f804 6b0b 	strb.w	r6, [r4], #11
    f09e:	2001      	movs	r0, #1
    f0a0:	f804 0901 	strb.w	r0, [r4], #-1
    f0a4:	2003      	movs	r0, #3
    f0a6:	f804 09c2 	strb.w	r0, [r4], #-194
    f0aa:	4620      	mov	r0, r4
    f0ac:	f7ff ffc4 	bl	f038 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2dc>
    f0b0:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    f0b4:	4629      	mov	r1, r5
    f0b6:	4620      	mov	r0, r4
    f0b8:	f7ff ff17 	bl	eeea <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x18e>
    f0bc:	b930      	cbnz	r0, f0cc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x370>
    f0be:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    f0c2:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    f0c6:	f7ff ffb5 	bl	f034 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    f0ca:	b128      	cbz	r0, f0d8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x37c>
    f0cc:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
    f0d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f0d4:	f7ff bf3a 	b.w	ef4c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f0>
    f0d8:	f240 61f6 	movw	r1, #1782	; 0x6f6
    f0dc:	2030      	movs	r0, #48	; 0x30
    f0de:	f7f5 fdcb 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0e2:	b510      	push	{r4, lr}
    f0e4:	4604      	mov	r4, r0
    f0e6:	2000      	movs	r0, #0
    f0e8:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    f0ec:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    f0f0:	f7f3 ffbc 	bl	306c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f0f4:	2020      	movs	r0, #32
    f0f6:	f884 0168 	strb.w	r0, [r4, #360]	; 0x168
    f0fa:	bd10      	pop	{r4, pc}
    f0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f100:	2500      	movs	r5, #0
    f102:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
    f106:	f8d0 60c4 	ldr.w	r6, [r0, #196]	; 0xc4
    f10a:	4688      	mov	r8, r1
    f10c:	4604      	mov	r4, r0
    f10e:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    f112:	2701      	movs	r7, #1
    f114:	f880 70b5 	strb.w	r7, [r0, #181]	; 0xb5
    f118:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    f11c:	4639      	mov	r1, r7
    f11e:	34a0      	adds	r4, #160	; 0xa0
    f120:	f7f7 fcf0 	bl	6b04 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    f124:	6860      	ldr	r0, [r4, #4]
    f126:	f8c0 615c 	str.w	r6, [r0, #348]	; 0x15c
    f12a:	6861      	ldr	r1, [r4, #4]
    f12c:	7820      	ldrb	r0, [r4, #0]
    f12e:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
    f132:	6861      	ldr	r1, [r4, #4]
    f134:	f8c1 816c 	str.w	r8, [r1, #364]	; 0x16c
    f138:	6860      	ldr	r0, [r4, #4]
    f13a:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
    f13e:	6864      	ldr	r4, [r4, #4]
    f140:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    f144:	2300      	movs	r3, #0
    f146:	f8a4 5164 	strh.w	r5, [r4, #356]	; 0x164
    f14a:	461a      	mov	r2, r3
    f14c:	4619      	mov	r1, r3
    f14e:	4620      	mov	r0, r4
    f150:	9500      	str	r5, [sp, #0]
    f152:	f7f9 f9e5 	bl	8520 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    f156:	b120      	cbz	r0, f162 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x406>
    f158:	f240 2123 	movw	r1, #547	; 0x223
    f15c:	2030      	movs	r0, #48	; 0x30
    f15e:	f7f5 fd8b 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f162:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
    f166:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    f16a:	f884 7134 	strb.w	r7, [r4, #308]	; 0x134
    f16e:	f8a4 5146 	strh.w	r5, [r4, #326]	; 0x146
    f172:	f8a4 5144 	strh.w	r5, [r4, #324]	; 0x144
    f176:	f504 7498 	add.w	r4, r4, #304	; 0x130
    f17a:	7665      	strb	r5, [r4, #25]
    f17c:	f834 0cbc 	ldrh.w	r0, [r4, #-188]
    f180:	1e40      	subs	r0, r0, #1
    f182:	f824 0cbc 	strh.w	r0, [r4, #-188]
    f186:	86e5      	strh	r5, [r4, #54]	; 0x36
    f188:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f18c:	f7ff bede 	b.w	ef4c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f0>
    f190:	b508      	push	{r3, lr}
    f192:	2800      	cmp	r0, #0
    f194:	f04f 0101 	mov.w	r1, #1
    f198:	4668      	mov	r0, sp
    f19a:	d002      	beq.n	f1a2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x446>
    f19c:	f7f5 fdf8 	bl	4d90 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f1a0:	e001      	b.n	f1a6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x44a>
    f1a2:	f7f5 fe03 	bl	4dac <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    f1a6:	f89d 0000 	ldrb.w	r0, [sp]
    f1aa:	f242 7110 	movw	r1, #10000	; 0x2710
    f1ae:	0200      	lsls	r0, r0, #8
    f1b0:	fbb0 f2f1 	udiv	r2, r0, r1
    f1b4:	fb01 0012 	mls	r0, r1, r2, r0
    f1b8:	bd08      	pop	{r3, pc}
    f1ba:	b510      	push	{r4, lr}
    f1bc:	0004      	movs	r4, r0
    f1be:	d008      	beq.n	f1d2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x476>
    f1c0:	2909      	cmp	r1, #9
    f1c2:	d25c      	bcs.n	f27e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x522>
    f1c4:	e8df f001 	tbb	[pc, r1]
    f1c8:	3e3e3607 	.word	0x3e3e3607
    f1cc:	4a435b3a 	.word	0x4a435b3a
    f1d0:	0057      	.short	0x0057
    f1d2:	219c      	movs	r1, #156	; 0x9c
    f1d4:	e050      	b.n	f278 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x51c>
    f1d6:	2100      	movs	r1, #0
    f1d8:	f8c4 1170 	str.w	r1, [r4, #368]	; 0x170
    f1dc:	f894 1148 	ldrb.w	r1, [r4, #328]	; 0x148
    f1e0:	4620      	mov	r0, r4
    f1e2:	b189      	cbz	r1, f208 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4ac>
    f1e4:	f8b0 2146 	ldrh.w	r2, [r0, #326]	; 0x146
    f1e8:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    f1ec:	428a      	cmp	r2, r1
    f1ee:	d106      	bne.n	f1fe <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4a2>
    f1f0:	f8b0 20fc 	ldrh.w	r2, [r0, #252]	; 0xfc
    f1f4:	1a51      	subs	r1, r2, r1
    f1f6:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    f1fa:	4611      	mov	r1, r2
    f1fc:	e00d      	b.n	f21a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4be>
    f1fe:	1a51      	subs	r1, r2, r1
    f200:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    f204:	b291      	uxth	r1, r2
    f206:	e008      	b.n	f21a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4be>
    f208:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
    f20c:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    f210:	1a89      	subs	r1, r1, r2
    f212:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    f216:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
    f21a:	f8a0 1074 	strh.w	r1, [r0, #116]	; 0x74
    f21e:	f8d0 1158 	ldr.w	r1, [r0, #344]	; 0x158
    f222:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
    f226:	f7f9 fdf1 	bl	8e0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    f22a:	4620      	mov	r0, r4
    f22c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f230:	f7f9 bbda 	b.w	89e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x718>
    f234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f238:	f000 b905 	b.w	f446 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    f23c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f240:	f7fc be9e 	b.w	bf80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f244:	4620      	mov	r0, r4
    f246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f24a:	f000 b827 	b.w	f29c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x540>
    f24e:	2001      	movs	r0, #1
    f250:	f7f3 f868 	bl	2324 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    f254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f258:	f7fe bd45 	b.w	dce6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    f25c:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    f260:	2804      	cmp	r0, #4
    f262:	d001      	beq.n	f268 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x50c>
    f264:	21be      	movs	r1, #190	; 0xbe
    f266:	e007      	b.n	f278 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x51c>
    f268:	4620      	mov	r0, r4
    f26a:	f7ff ff3a 	bl	f0e2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x386>
    f26e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f272:	f7fb bccb 	b.w	ac0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f276:	21c7      	movs	r1, #199	; 0xc7
    f278:	2030      	movs	r0, #48	; 0x30
    f27a:	f7f5 fcfd 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f27e:	21cb      	movs	r1, #203	; 0xcb
    f280:	e7fa      	b.n	f278 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x51c>
    f282:	b510      	push	{r4, lr}
    f284:	f001 f99d 	bl	105c2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f288:	f64d 7141 	movw	r1, #57153	; 0xdf41
    f28c:	4408      	add	r0, r1
    f28e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f292:	fbb0 f0f1 	udiv	r0, r0, r1
    f296:	f200 1075 	addw	r0, r0, #373	; 0x175
    f29a:	bd10      	pop	{r4, pc}
    f29c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f29e:	4604      	mov	r4, r0
    f2a0:	f7fd f9cb 	bl	c63a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    f2a4:	4601      	mov	r1, r0
    f2a6:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    f2aa:	f7f3 f94f 	bl	254c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    f2ae:	68e1      	ldr	r1, [r4, #12]
    f2b0:	b111      	cbz	r1, f2b8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x55c>
    f2b2:	fbb0 f0f1 	udiv	r0, r0, r1
    f2b6:	e000      	b.n	f2ba <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x55e>
    f2b8:	2000      	movs	r0, #0
    f2ba:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
    f2be:	290d      	cmp	r1, #13
    f2c0:	d00c      	beq.n	f2dc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x580>
    f2c2:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
    f2c6:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    f2ca:	1813      	adds	r3, r2, r0
    f2cc:	1acb      	subs	r3, r1, r3
    f2ce:	b21b      	sxth	r3, r3
    f2d0:	2b00      	cmp	r3, #0
    f2d2:	db06      	blt.n	f2e2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x586>
    f2d4:	1c49      	adds	r1, r1, #1
    f2d6:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
    f2da:	e006      	b.n	f2ea <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x58e>
    f2dc:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    f2e0:	e012      	b.n	f308 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x5ac>
    f2e2:	1c40      	adds	r0, r0, #1
    f2e4:	4410      	add	r0, r2
    f2e6:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    f2ea:	f894 0149 	ldrb.w	r0, [r4, #329]	; 0x149
    f2ee:	f88d 0000 	strb.w	r0, [sp]
    f2f2:	9800      	ldr	r0, [sp, #0]
    f2f4:	9000      	str	r0, [sp, #0]
    f2f6:	f89d 0000 	ldrb.w	r0, [sp]
    f2fa:	b940      	cbnz	r0, f30e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x5b2>
    f2fc:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    f300:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    f304:	4288      	cmp	r0, r1
    f306:	d102      	bne.n	f30e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x5b2>
    f308:	1c40      	adds	r0, r0, #1
    f30a:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    f30e:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
    f312:	1c40      	adds	r0, r0, #1
    f314:	f8a4 0166 	strh.w	r0, [r4, #358]	; 0x166
    f318:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
    f31c:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
    f320:	1a40      	subs	r0, r0, r1
    f322:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    f326:	1e40      	subs	r0, r0, #1
    f328:	4408      	add	r0, r1
    f32a:	b285      	uxth	r5, r0
    f32c:	e026      	b.n	f37c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x620>
    f32e:	a801      	add	r0, sp, #4
    f330:	2300      	movs	r3, #0
    f332:	9000      	str	r0, [sp, #0]
    f334:	461a      	mov	r2, r3
    f336:	4620      	mov	r0, r4
    f338:	f7f9 f8f2 	bl	8520 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    f33c:	2800      	cmp	r0, #0
    f33e:	d038      	beq.n	f3b2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x656>
    f340:	2801      	cmp	r0, #1
    f342:	d004      	beq.n	f34e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x5f2>
    f344:	f240 6159 	movw	r1, #1625	; 0x659
    f348:	2030      	movs	r0, #48	; 0x30
    f34a:	f7f5 fc95 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f34e:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    f352:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
    f356:	1a42      	subs	r2, r0, r1
    f358:	b212      	sxth	r2, r2
    f35a:	2a00      	cmp	r2, #0
    f35c:	da09      	bge.n	f372 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x616>
    f35e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    f362:	4402      	add	r2, r0
    f364:	1aaa      	subs	r2, r5, r2
    f366:	b212      	sxth	r2, r2
    f368:	2a00      	cmp	r2, #0
    f36a:	da02      	bge.n	f372 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x616>
    f36c:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
    f370:	e004      	b.n	f37c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x620>
    f372:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    f376:	4408      	add	r0, r1
    f378:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    f37c:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    f380:	1a68      	subs	r0, r5, r1
    f382:	b200      	sxth	r0, r0
    f384:	2800      	cmp	r0, #0
    f386:	dad2      	bge.n	f32e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x5d2>
    f388:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    f38c:	b178      	cbz	r0, f3ae <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x652>
    f38e:	2008      	movs	r0, #8
    f390:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    f394:	2001      	movs	r0, #1
    f396:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    f39a:	4620      	mov	r0, r4
    f39c:	f000 f855 	bl	f44a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    f3a0:	4620      	mov	r0, r4
    f3a2:	f7ff fe9e 	bl	f0e2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x386>
    f3a6:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    f3aa:	f7fb bc2f 	b.w	ac0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f3ae:	203e      	movs	r0, #62	; 0x3e
    f3b0:	e7ee      	b.n	f390 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x634>
    f3b2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f3b4:	00fa01f4 	.word	0x00fa01f4
    f3b8:	00640096 	.word	0x00640096
    f3bc:	0032004b 	.word	0x0032004b
    f3c0:	0014001e 	.word	0x0014001e
    f3c4:	0005000a 	.word	0x0005000a
    f3c8:	00010002 	.word	0x00010002
    f3cc:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f3d0:	f001 0307 	and.w	r3, r1, #7
    f3d4:	7802      	ldrb	r2, [r0, #0]
    f3d6:	2101      	movs	r1, #1
    f3d8:	4099      	lsls	r1, r3
    f3da:	438a      	bics	r2, r1
    f3dc:	7002      	strb	r2, [r0, #0]
    f3de:	4770      	bx	lr

0000f3e0 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    f3e0:	b510      	push	{r4, lr}
    f3e2:	4604      	mov	r4, r0
    f3e4:	f8d0 019c 	ldr.w	r0, [r0, #412]	; 0x19c
    f3e8:	68e1      	ldr	r1, [r4, #12]
    f3ea:	4288      	cmp	r0, r1
    f3ec:	d109      	bne.n	f402 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    f3ee:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
    f3f2:	8aa2      	ldrh	r2, [r4, #20]
    f3f4:	4291      	cmp	r1, r2
    f3f6:	d104      	bne.n	f402 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    f3f8:	f8b4 11a2 	ldrh.w	r1, [r4, #418]	; 0x1a2
    f3fc:	8ae2      	ldrh	r2, [r4, #22]
    f3fe:	4291      	cmp	r1, r2
    f400:	d013      	beq.n	f42a <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4a>
    f402:	8821      	ldrh	r1, [r4, #0]
    f404:	f8a4 11bc 	strh.w	r1, [r4, #444]	; 0x1bc
    f408:	f7fe fcf4 	bl	ddf4 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    f40c:	f8a4 01be 	strh.w	r0, [r4, #446]	; 0x1be
    f410:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
    f414:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
    f418:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
    f41c:	f8a4 01c2 	strh.w	r0, [r4, #450]	; 0x1c2
    f420:	2001      	movs	r0, #1
    f422:	f884 01b8 	strb.w	r0, [r4, #440]	; 0x1b8
    f426:	f7fb fbf1 	bl	ac0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f42a:	2102      	movs	r1, #2
    f42c:	4620      	mov	r0, r4
    f42e:	f7f7 fb69 	bl	6b04 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    f432:	2000      	movs	r0, #0
    f434:	f804 0f7e 	strb.w	r0, [r4, #126]!
    f438:	2003      	movs	r0, #3
    f43a:	70e0      	strb	r0, [r4, #3]
    f43c:	bd10      	pop	{r4, pc}

0000f43e <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    f43e:	f7f5 bfcf 	b.w	53e0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f442 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    f442:	2000      	movs	r0, #0
    f444:	4770      	bx	lr

0000f446 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    f446:	f7f6 bcfd 	b.w	5e44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000f44a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    f44a:	2100      	movs	r1, #0
    f44c:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    f450:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    f454:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    f458:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    f45c:	b109      	cbz	r1, f462 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    f45e:	2102      	movs	r1, #2
    f460:	e000      	b.n	f464 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    f462:	2103      	movs	r1, #3
    f464:	f7f8 bf34 	b.w	82d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    f468:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    f46c:	28fe      	cmp	r0, #254	; 0xfe
    f46e:	d001      	beq.n	f474 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    f470:	2001      	movs	r0, #1
    f472:	4770      	bx	lr
    f474:	2000      	movs	r0, #0
    f476:	4770      	bx	lr
    f478:	b510      	push	{r4, lr}
    f47a:	2801      	cmp	r0, #1
    f47c:	d006      	beq.n	f48c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f47e:	2802      	cmp	r0, #2
    f480:	d004      	beq.n	f48c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f482:	f240 2163 	movw	r1, #611	; 0x263
    f486:	2006      	movs	r0, #6
    f488:	f7f5 fbf6 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f48c:	bd10      	pop	{r4, pc}
    f48e:	2801      	cmp	r0, #1
    f490:	d002      	beq.n	f498 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    f492:	2802      	cmp	r0, #2
    f494:	d105      	bne.n	f4a2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f496:	e002      	b.n	f49e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    f498:	2901      	cmp	r1, #1
    f49a:	d004      	beq.n	f4a6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f49c:	e001      	b.n	f4a2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f49e:	2902      	cmp	r1, #2
    f4a0:	d001      	beq.n	f4a6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f4a2:	2000      	movs	r0, #0
    f4a4:	4770      	bx	lr
    f4a6:	2001      	movs	r0, #1
    f4a8:	4770      	bx	lr
    f4aa:	1a40      	subs	r0, r0, r1
    f4ac:	b200      	sxth	r0, r0
    f4ae:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f4b2:	4288      	cmp	r0, r1
    f4b4:	dc01      	bgt.n	f4ba <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    f4b6:	2800      	cmp	r0, #0
    f4b8:	dc01      	bgt.n	f4be <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f4ba:	2001      	movs	r0, #1
    f4bc:	4770      	bx	lr
    f4be:	2000      	movs	r0, #0
    f4c0:	4770      	bx	lr
    f4c2:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f4c6:	f001 0107 	and.w	r1, r1, #7
    f4ca:	7800      	ldrb	r0, [r0, #0]
    f4cc:	2201      	movs	r2, #1
    f4ce:	408a      	lsls	r2, r1
    f4d0:	4010      	ands	r0, r2
    f4d2:	40c8      	lsrs	r0, r1
    f4d4:	4770      	bx	lr
    f4d6:	b118      	cbz	r0, f4e0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    f4d8:	2802      	cmp	r0, #2
    f4da:	d001      	beq.n	f4e0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    f4dc:	2001      	movs	r0, #1
    f4de:	4770      	bx	lr
    f4e0:	2000      	movs	r0, #0
    f4e2:	4770      	bx	lr

0000f4e4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f4e4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    f4e6:	7881      	ldrb	r1, [r0, #2]
    f4e8:	4604      	mov	r4, r0
    f4ea:	291a      	cmp	r1, #26
    f4ec:	d025      	beq.n	f53a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f4ee:	dc0e      	bgt.n	f50e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    f4f0:	2916      	cmp	r1, #22
    f4f2:	d22d      	bcs.n	f550 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f4f4:	e8df f001 	tbb	[pc, r1]
    f4f8:	2c2c2c2c 	.word	0x2c2c2c2c
    f4fc:	2c2c212c 	.word	0x2c2c212c
    f500:	2c2c2c2c 	.word	0x2c2c2c2c
    f504:	2c2c2c2c 	.word	0x2c2c2c2c
    f508:	212c2c2c 	.word	0x212c2c2c
    f50c:	2121      	.short	0x2121
    f50e:	292a      	cmp	r1, #42	; 0x2a
    f510:	d01e      	beq.n	f550 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f512:	dc0b      	bgt.n	f52c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    f514:	f1a1 011e 	sub.w	r1, r1, #30
    f518:	290c      	cmp	r1, #12
    f51a:	d219      	bcs.n	f550 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f51c:	e8df f001 	tbb	[pc, r1]
    f520:	18181818 	.word	0x18181818
    f524:	18181818 	.word	0x18181818
    f528:	0d181818 	.word	0x0d181818
    f52c:	393a      	subs	r1, #58	; 0x3a
    f52e:	2904      	cmp	r1, #4
    f530:	d20e      	bcs.n	f550 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f532:	e8df f001 	tbb	[pc, r1]
    f536:	020d      	.short	0x020d
    f538:	020d      	.short	0x020d
    f53a:	8820      	ldrh	r0, [r4, #0]
    f53c:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f540:	d206      	bcs.n	f550 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f542:	2701      	movs	r7, #1
    f544:	4669      	mov	r1, sp
    f546:	f7fe fc44 	bl	ddd2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f54a:	b118      	cbz	r0, f554 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    f54c:	2002      	movs	r0, #2
    f54e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f550:	2012      	movs	r0, #18
    f552:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f554:	9d01      	ldr	r5, [sp, #4]
    f556:	4668      	mov	r0, sp
    f558:	462e      	mov	r6, r5
    f55a:	f505 75bc 	add.w	r5, r5, #376	; 0x178
    f55e:	f206 1679 	addw	r6, r6, #377	; 0x179
    f562:	f000 fe94 	bl	1028e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x31a>
    f566:	b138      	cbz	r0, f578 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
    f568:	7828      	ldrb	r0, [r5, #0]
    f56a:	f88d 0008 	strb.w	r0, [sp, #8]
    f56e:	9802      	ldr	r0, [sp, #8]
    f570:	9002      	str	r0, [sp, #8]
    f572:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f576:	b108      	cbz	r0, f57c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
    f578:	200c      	movs	r0, #12
    f57a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f57c:	702f      	strb	r7, [r5, #0]
    f57e:	78a0      	ldrb	r0, [r4, #2]
    f580:	7030      	strb	r0, [r6, #0]
    f582:	4668      	mov	r0, sp
    f584:	f7fe ff9f 	bl	e4c6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    f588:	2000      	movs	r0, #0
    f58a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000f58c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    f58c:	b510      	push	{r4, lr}
    f58e:	4604      	mov	r4, r0
    f590:	7800      	ldrb	r0, [r0, #0]
    f592:	b118      	cbz	r0, f59c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    f594:	2801      	cmp	r0, #1
    f596:	d001      	beq.n	f59c <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    f598:	2012      	movs	r0, #18
    f59a:	bd10      	pop	{r4, pc}
    f59c:	f000 fe2b 	bl	101f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    f5a0:	b120      	cbz	r0, f5ac <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    f5a2:	f7f7 f8a1 	bl	66e8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f5a6:	b108      	cbz	r0, f5ac <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    f5a8:	200c      	movs	r0, #12
    f5aa:	bd10      	pop	{r4, pc}
    f5ac:	7820      	ldrb	r0, [r4, #0]
    f5ae:	f7ff ff92 	bl	f4d6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f5b2:	1de2      	adds	r2, r4, #7
    f5b4:	f104 0317 	add.w	r3, r4, #23
    f5b8:	1c61      	adds	r1, r4, #1
    f5ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f5be:	f7f7 b8c5 	b.w	674c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000f5c2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f5c2:	b510      	push	{r4, lr}
    f5c4:	4604      	mov	r4, r0
    f5c6:	f000 fef2 	bl	103ae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    f5ca:	b108      	cbz	r0, f5d0 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f5cc:	200c      	movs	r0, #12
    f5ce:	bd10      	pop	{r4, pc}
    f5d0:	7820      	ldrb	r0, [r4, #0]
    f5d2:	b118      	cbz	r0, f5dc <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f5d4:	2801      	cmp	r0, #1
    f5d6:	d001      	beq.n	f5dc <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f5d8:	2012      	movs	r0, #18
    f5da:	bd10      	pop	{r4, pc}
    f5dc:	f7ff ff7b 	bl	f4d6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f5e0:	1c61      	adds	r1, r4, #1
    f5e2:	f7f7 f92b 	bl	683c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    f5e6:	b108      	cbz	r0, f5ec <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    f5e8:	2000      	movs	r0, #0
    f5ea:	bd10      	pop	{r4, pc}
    f5ec:	2007      	movs	r0, #7
    f5ee:	bd10      	pop	{r4, pc}

0000f5f0 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    f5f0:	b510      	push	{r4, lr}
    f5f2:	f000 fe00 	bl	101f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    f5f6:	b120      	cbz	r0, f602 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    f5f8:	f7f7 f876 	bl	66e8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f5fc:	b108      	cbz	r0, f602 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    f5fe:	200c      	movs	r0, #12
    f600:	bd10      	pop	{r4, pc}
    f602:	f7f7 f8e9 	bl	67d8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    f606:	2000      	movs	r0, #0
    f608:	bd10      	pop	{r4, pc}

0000f60a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f60a:	b510      	push	{r4, lr}
    f60c:	f000 fecf 	bl	103ae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    f610:	b108      	cbz	r0, f616 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f612:	200c      	movs	r0, #12
    f614:	bd10      	pop	{r4, pc}
    f616:	f7f7 f939 	bl	688c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    f61a:	2000      	movs	r0, #0
    f61c:	bd10      	pop	{r4, pc}

0000f61e <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f61e:	b510      	push	{r4, lr}
    f620:	460b      	mov	r3, r1
    f622:	2201      	movs	r2, #1
    f624:	f100 0110 	add.w	r1, r0, #16
    f628:	f7fe fbb5 	bl	dd96 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f62c:	2000      	movs	r0, #0
    f62e:	bd10      	pop	{r4, pc}

0000f630 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    f630:	b510      	push	{r4, lr}
    f632:	8800      	ldrh	r0, [r0, #0]
    f634:	2100      	movs	r1, #0
    f636:	f7fe f989 	bl	d94c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f63a:	b118      	cbz	r0, f644 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    f63c:	f890 117b 	ldrb.w	r1, [r0, #379]	; 0x17b
    f640:	b111      	cbz	r1, f648 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    f642:	e007      	b.n	f654 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    f644:	2002      	movs	r0, #2
    f646:	bd10      	pop	{r4, pc}
    f648:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    f64c:	2914      	cmp	r1, #20
    f64e:	d003      	beq.n	f658 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f650:	2915      	cmp	r1, #21
    f652:	d001      	beq.n	f658 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f654:	200c      	movs	r0, #12
    f656:	bd10      	pop	{r4, pc}
    f658:	2102      	movs	r1, #2
    f65a:	f880 117b 	strb.w	r1, [r0, #379]	; 0x17b
    f65e:	2000      	movs	r0, #0
    f660:	bd10      	pop	{r4, pc}

0000f662 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    f662:	b538      	push	{r3, r4, r5, lr}
    f664:	4605      	mov	r5, r0
    f666:	8800      	ldrh	r0, [r0, #0]
    f668:	2100      	movs	r1, #0
    f66a:	f7fe f96f 	bl	d94c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f66e:	0004      	movs	r4, r0
    f670:	d003      	beq.n	f67a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    f672:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
    f676:	b110      	cbz	r0, f67e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    f678:	e010      	b.n	f69c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    f67a:	2002      	movs	r0, #2
    f67c:	bd38      	pop	{r3, r4, r5, pc}
    f67e:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    f682:	2814      	cmp	r0, #20
    f684:	d001      	beq.n	f68a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    f686:	2815      	cmp	r0, #21
    f688:	d108      	bne.n	f69c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    f68a:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
    f68e:	f88d 0000 	strb.w	r0, [sp]
    f692:	9800      	ldr	r0, [sp, #0]
    f694:	9000      	str	r0, [sp, #0]
    f696:	f89d 0000 	ldrb.w	r0, [sp]
    f69a:	b108      	cbz	r0, f6a0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3e>
    f69c:	200c      	movs	r0, #12
    f69e:	bd38      	pop	{r3, r4, r5, pc}
    f6a0:	2210      	movs	r2, #16
    f6a2:	1ca9      	adds	r1, r5, #2
    f6a4:	f504 70be 	add.w	r0, r4, #380	; 0x17c
    f6a8:	f7fd f93c 	bl	c924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f6ac:	2001      	movs	r0, #1
    f6ae:	f884 017b 	strb.w	r0, [r4, #379]	; 0x17b
    f6b2:	2000      	movs	r0, #0
    f6b4:	bd38      	pop	{r3, r4, r5, pc}

0000f6b6 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    f6b6:	b510      	push	{r4, lr}
    f6b8:	2108      	movs	r1, #8
    f6ba:	f7f5 fb85 	bl	4dc8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f6be:	2000      	movs	r0, #0
    f6c0:	bd10      	pop	{r4, pc}

0000f6c2 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    f6c2:	b510      	push	{r4, lr}
    f6c4:	4604      	mov	r4, r0
    f6c6:	f000 fdf9 	bl	102bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x348>
    f6ca:	f7ff f962 	bl	e992 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    f6ce:	7020      	strb	r0, [r4, #0]
    f6d0:	2000      	movs	r0, #0
    f6d2:	bd10      	pop	{r4, pc}

0000f6d4 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    f6d4:	b510      	push	{r4, lr}
    f6d6:	4604      	mov	r4, r0
    f6d8:	f000 fdd3 	bl	10282 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    f6dc:	b140      	cbz	r0, f6f0 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    f6de:	20fb      	movs	r0, #251	; 0xfb
    f6e0:	8020      	strh	r0, [r4, #0]
    f6e2:	f640 0148 	movw	r1, #2120	; 0x848
    f6e6:	8061      	strh	r1, [r4, #2]
    f6e8:	80a0      	strh	r0, [r4, #4]
    f6ea:	80e1      	strh	r1, [r4, #6]
    f6ec:	2000      	movs	r0, #0
    f6ee:	bd10      	pop	{r4, pc}
    f6f0:	2001      	movs	r0, #1
    f6f2:	bd10      	pop	{r4, pc}

0000f6f4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    f6f4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    f6f6:	460d      	mov	r5, r1
    f6f8:	4606      	mov	r6, r0
    f6fa:	f7fb fe31 	bl	b360 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f6fe:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f702:	b300      	cbz	r0, f746 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
    f704:	8830      	ldrh	r0, [r6, #0]
    f706:	4669      	mov	r1, sp
    f708:	f7fe fb63 	bl	ddd2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f70c:	2800      	cmp	r0, #0
    f70e:	d119      	bne.n	f744 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
    f710:	9c01      	ldr	r4, [sp, #4]
    f712:	2700      	movs	r7, #0
    f714:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    f718:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    f71c:	f000 fc46 	bl	ffac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    f720:	70a8      	strb	r0, [r5, #2]
    f722:	7860      	ldrb	r0, [r4, #1]
    f724:	f000 fc42 	bl	ffac <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    f728:	70e8      	strb	r0, [r5, #3]
    f72a:	78a0      	ldrb	r0, [r4, #2]
    f72c:	f88d 0008 	strb.w	r0, [sp, #8]
    f730:	9802      	ldr	r0, [sp, #8]
    f732:	9002      	str	r0, [sp, #8]
    f734:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f738:	3c6a      	subs	r4, #106	; 0x6a
    f73a:	2800      	cmp	r0, #0
    f73c:	d1ea      	bne.n	f714 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    f73e:	8830      	ldrh	r0, [r6, #0]
    f740:	8028      	strh	r0, [r5, #0]
    f742:	2000      	movs	r0, #0
    f744:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f746:	2001      	movs	r0, #1
    f748:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000f74a <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    f74a:	2108      	movs	r1, #8
    f74c:	7001      	strb	r1, [r0, #0]
    f74e:	2000      	movs	r0, #0
    f750:	4770      	bx	lr

0000f752 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    f752:	b510      	push	{r4, lr}
    f754:	4604      	mov	r4, r0
    f756:	20d8      	movs	r0, #216	; 0xd8
    f758:	7020      	strb	r0, [r4, #0]
    f75a:	f000 fd73 	bl	10244 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d0>
    f75e:	7060      	strb	r0, [r4, #1]
    f760:	2000      	movs	r0, #0
    f762:	bd10      	pop	{r4, pc}

0000f764 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    f764:	2108      	movs	r1, #8
    f766:	7001      	strb	r1, [r0, #0]
    f768:	2000      	movs	r0, #0
    f76a:	4770      	bx	lr

0000f76c <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    f76c:	b510      	push	{r4, lr}
    f76e:	4604      	mov	r4, r0
    f770:	7800      	ldrb	r0, [r0, #0]
    f772:	b108      	cbz	r0, f778 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    f774:	2801      	cmp	r0, #1
    f776:	d110      	bne.n	f79a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    f778:	f000 fd3d 	bl	101f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    f77c:	b120      	cbz	r0, f788 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    f77e:	f7f6 ffb3 	bl	66e8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f782:	b108      	cbz	r0, f788 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    f784:	200c      	movs	r0, #12
    f786:	bd10      	pop	{r4, pc}
    f788:	7820      	ldrb	r0, [r4, #0]
    f78a:	f7ff fea4 	bl	f4d6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f78e:	1c61      	adds	r1, r4, #1
    f790:	f7fe fae7 	bl	dd62 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    f794:	b108      	cbz	r0, f79a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    f796:	2000      	movs	r0, #0
    f798:	bd10      	pop	{r4, pc}
    f79a:	2012      	movs	r0, #18
    f79c:	bd10      	pop	{r4, pc}

0000f79e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    f79e:	b510      	push	{r4, lr}
    f7a0:	4604      	mov	r4, r0
    f7a2:	f000 fe04 	bl	103ae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    f7a6:	b108      	cbz	r0, f7ac <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    f7a8:	200c      	movs	r0, #12
    f7aa:	bd10      	pop	{r4, pc}
    f7ac:	7820      	ldrb	r0, [r4, #0]
    f7ae:	b108      	cbz	r0, f7b4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    f7b0:	2801      	cmp	r0, #1
    f7b2:	d107      	bne.n	f7c4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f7b4:	f7ff fe8f 	bl	f4d6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f7b8:	1c61      	adds	r1, r4, #1
    f7ba:	f7fe fae1 	bl	dd80 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    f7be:	b108      	cbz	r0, f7c4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f7c0:	2000      	movs	r0, #0
    f7c2:	bd10      	pop	{r4, pc}
    f7c4:	2012      	movs	r0, #18
    f7c6:	bd10      	pop	{r4, pc}

0000f7c8 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    f7c8:	b510      	push	{r4, lr}
    f7ca:	4604      	mov	r4, r0
    f7cc:	f000 fd13 	bl	101f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    f7d0:	b108      	cbz	r0, f7d6 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    f7d2:	200c      	movs	r0, #12
    f7d4:	bd10      	pop	{r4, pc}
    f7d6:	7820      	ldrb	r0, [r4, #0]
    f7d8:	f000 0001 	and.w	r0, r0, #1
    f7dc:	f7f6 ff7e 	bl	66dc <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    f7e0:	2000      	movs	r0, #0
    f7e2:	bd10      	pop	{r4, pc}

0000f7e4 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    f7e4:	b51c      	push	{r2, r3, r4, lr}
    f7e6:	4604      	mov	r4, r0
    f7e8:	f000 fd68 	bl	102bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x348>
    f7ec:	2000      	movs	r0, #0
    f7ee:	f88d 0002 	strb.w	r0, [sp, #2]
    f7f2:	2103      	movs	r1, #3
    f7f4:	f88d 1001 	strb.w	r1, [sp, #1]
    f7f8:	f814 1b01 	ldrb.w	r1, [r4], #1
    f7fc:	f88d 1003 	strb.w	r1, [sp, #3]
    f800:	f88d 0000 	strb.w	r0, [sp]
    f804:	4668      	mov	r0, sp
    f806:	9401      	str	r4, [sp, #4]
    f808:	f000 f9f8 	bl	fbfc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    f80c:	bd1c      	pop	{r2, r3, r4, pc}

0000f80e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    f80e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f810:	4605      	mov	r5, r0
    f812:	f000 fd53 	bl	102bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x348>
    f816:	4606      	mov	r6, r0
    f818:	7828      	ldrb	r0, [r5, #0]
    f81a:	2400      	movs	r4, #0
    f81c:	b160      	cbz	r0, f838 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f81e:	f88d 4000 	strb.w	r4, [sp]
    f822:	2001      	movs	r0, #1
    f824:	f10d 0101 	add.w	r1, sp, #1
    f828:	f7f6 f926 	bl	5a78 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f82c:	b120      	cbz	r0, f838 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f82e:	4668      	mov	r0, sp
    f830:	f000 f897 	bl	f962 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    f834:	2800      	cmp	r0, #0
    f836:	d112      	bne.n	f85e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f838:	f88d 400c 	strb.w	r4, [sp, #12]
    f83c:	4630      	mov	r0, r6
    f83e:	f7ff f89e 	bl	e97e <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f842:	b118      	cbz	r0, f84c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    f844:	2080      	movs	r0, #128	; 0x80
    f846:	f8ad 000d 	strh.w	r0, [sp, #13]
    f84a:	e001      	b.n	f850 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    f84c:	f8ad 400d 	strh.w	r4, [sp, #13]
    f850:	f88d 400f 	strb.w	r4, [sp, #15]
    f854:	7828      	ldrb	r0, [r5, #0]
    f856:	2801      	cmp	r0, #1
    f858:	d003      	beq.n	f862 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    f85a:	b138      	cbz	r0, f86c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    f85c:	2012      	movs	r0, #18
    f85e:	b004      	add	sp, #16
    f860:	bd70      	pop	{r4, r5, r6, pc}
    f862:	a903      	add	r1, sp, #12
    f864:	4630      	mov	r0, r6
    f866:	f7fb fb5d 	bl	af24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    f86a:	e7f8      	b.n	f85e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f86c:	4630      	mov	r0, r6
    f86e:	f000 fd3c 	bl	102ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x376>
    f872:	e7f4      	b.n	f85e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000f874 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    f874:	b530      	push	{r4, r5, lr}
    f876:	b08b      	sub	sp, #44	; 0x2c
    f878:	4604      	mov	r4, r0
    f87a:	f000 fd1f 	bl	102bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x348>
    f87e:	4602      	mov	r2, r0
    f880:	7920      	ldrb	r0, [r4, #4]
    f882:	2804      	cmp	r0, #4
    f884:	d803      	bhi.n	f88e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    f886:	8860      	ldrh	r0, [r4, #2]
    f888:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    f88c:	d902      	bls.n	f894 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    f88e:	2012      	movs	r0, #18
    f890:	b00b      	add	sp, #44	; 0x2c
    f892:	bd30      	pop	{r4, r5, pc}
    f894:	2500      	movs	r5, #0
    f896:	f88d 5004 	strb.w	r5, [sp, #4]
    f89a:	7921      	ldrb	r1, [r4, #4]
    f89c:	9500      	str	r5, [sp, #0]
    f89e:	f89d 0000 	ldrb.w	r0, [sp]
    f8a2:	2905      	cmp	r1, #5
    f8a4:	f040 0010 	orr.w	r0, r0, #16
    f8a8:	f88d 0000 	strb.w	r0, [sp]
    f8ac:	d254      	bcs.n	f958 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    f8ae:	e8df f001 	tbb	[pc, r1]
    f8b2:	0803      	.short	0x0803
    f8b4:	000b1105 	.word	0x000b1105
    f8b8:	f040 0001 	orr.w	r0, r0, #1
    f8bc:	f040 0002 	orr.w	r0, r0, #2
    f8c0:	e006      	b.n	f8d0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    f8c2:	f040 0009 	orr.w	r0, r0, #9
    f8c6:	e001      	b.n	f8cc <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    f8c8:	f040 0001 	orr.w	r0, r0, #1
    f8cc:	f040 0004 	orr.w	r0, r0, #4
    f8d0:	f88d 0000 	strb.w	r0, [sp]
    f8d4:	f8bd 0000 	ldrh.w	r0, [sp]
    f8d8:	9000      	str	r0, [sp, #0]
    f8da:	f8bd 0000 	ldrh.w	r0, [sp]
    f8de:	f8ad 0005 	strh.w	r0, [sp, #5]
    f8e2:	8821      	ldrh	r1, [r4, #0]
    f8e4:	f8dd 0006 	ldr.w	r0, [sp, #6]
    f8e8:	f361 201f 	bfi	r0, r1, #8, #24
    f8ec:	f8cd 0006 	str.w	r0, [sp, #6]
    f8f0:	8861      	ldrh	r1, [r4, #2]
    f8f2:	f8dd 0009 	ldr.w	r0, [sp, #9]
    f8f6:	f361 201f 	bfi	r0, r1, #8, #24
    f8fa:	f8cd 0009 	str.w	r0, [sp, #9]
    f8fe:	7b60      	ldrb	r0, [r4, #13]
    f900:	f88d 000d 	strb.w	r0, [sp, #13]
    f904:	7960      	ldrb	r0, [r4, #5]
    f906:	f88d 000e 	strb.w	r0, [sp, #14]
    f90a:	79a0      	ldrb	r0, [r4, #6]
    f90c:	f88d 000f 	strb.w	r0, [sp, #15]
    f910:	f8d4 0007 	ldr.w	r0, [r4, #7]
    f914:	9004      	str	r0, [sp, #16]
    f916:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    f91a:	f8ad 0014 	strh.w	r0, [sp, #20]
    f91e:	7ba0      	ldrb	r0, [r4, #14]
    f920:	f88d 0016 	strb.w	r0, [sp, #22]
    f924:	207f      	movs	r0, #127	; 0x7f
    f926:	f88d 0017 	strb.w	r0, [sp, #23]
    f92a:	2001      	movs	r0, #1
    f92c:	f88d 0018 	strb.w	r0, [sp, #24]
    f930:	f88d 5019 	strb.w	r5, [sp, #25]
    f934:	f88d 001a 	strb.w	r0, [sp, #26]
    f938:	f88d 501b 	strb.w	r5, [sp, #27]
    f93c:	4610      	mov	r0, r2
    f93e:	f7ff f83a 	bl	e9b6 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    f942:	f88d 001c 	strb.w	r0, [sp, #28]
    f946:	f88d 501d 	strb.w	r5, [sp, #29]
    f94a:	f88d 501e 	strb.w	r5, [sp, #30]
    f94e:	a909      	add	r1, sp, #36	; 0x24
    f950:	a801      	add	r0, sp, #4
    f952:	f000 f8de 	bl	fb12 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    f956:	e79b      	b.n	f890 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    f958:	f241 0193 	movw	r1, #4243	; 0x1093
    f95c:	2039      	movs	r0, #57	; 0x39
    f95e:	f7f5 f98b 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f962 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    f962:	b570      	push	{r4, r5, r6, lr}
    f964:	4604      	mov	r4, r0
    f966:	7800      	ldrb	r0, [r0, #0]
    f968:	2101      	movs	r1, #1
    f96a:	f7fd ffef 	bl	d94c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f96e:	0005      	movs	r5, r0
    f970:	d007      	beq.n	f982 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    f972:	f7ff f9d9 	bl	ed28 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f976:	b160      	cbz	r0, f992 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f978:	4628      	mov	r0, r5
    f97a:	f7ff f806 	bl	e98a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f97e:	b110      	cbz	r0, f986 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    f980:	e005      	b.n	f98e <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    f982:	2042      	movs	r0, #66	; 0x42
    f984:	bd70      	pop	{r4, r5, r6, pc}
    f986:	4628      	mov	r0, r5
    f988:	f7fe fff5 	bl	e976 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f98c:	b108      	cbz	r0, f992 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    f98e:	200c      	movs	r0, #12
    f990:	bd70      	pop	{r4, r5, r6, pc}
    f992:	1c61      	adds	r1, r4, #1
    f994:	4628      	mov	r0, r5
    f996:	f7ff f806 	bl	e9a6 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    f99a:	2000      	movs	r0, #0
    f99c:	bd70      	pop	{r4, r5, r6, pc}

0000f99e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    f99e:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f9a0:	460d      	mov	r5, r1
    f9a2:	4604      	mov	r4, r0
    f9a4:	f000 fc6d 	bl	10282 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    f9a8:	b130      	cbz	r0, f9b8 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    f9aa:	88a2      	ldrh	r2, [r4, #4]
    f9ac:	f244 2090 	movw	r0, #17040	; 0x4290
    f9b0:	4282      	cmp	r2, r0
    f9b2:	d903      	bls.n	f9bc <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    f9b4:	2012      	movs	r0, #18
    f9b6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f9b8:	2001      	movs	r0, #1
    f9ba:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f9bc:	f640 0048 	movw	r0, #2120	; 0x848
    f9c0:	4282      	cmp	r2, r0
    f9c2:	d300      	bcc.n	f9c6 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    f9c4:	4602      	mov	r2, r0
    f9c6:	8820      	ldrh	r0, [r4, #0]
    f9c8:	f8ad 0000 	strh.w	r0, [sp]
    f9cc:	8860      	ldrh	r0, [r4, #2]
    f9ce:	f8ad 0002 	strh.w	r0, [sp, #2]
    f9d2:	f8ad 2004 	strh.w	r2, [sp, #4]
    f9d6:	8860      	ldrh	r0, [r4, #2]
    f9d8:	f8ad 0006 	strh.w	r0, [sp, #6]
    f9dc:	f8ad 2008 	strh.w	r2, [sp, #8]
    f9e0:	8820      	ldrh	r0, [r4, #0]
    f9e2:	8028      	strh	r0, [r5, #0]
    f9e4:	4668      	mov	r0, sp
    f9e6:	f7fb fb6b 	bl	b0c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    f9ea:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f9ec <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    f9ec:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f9ee:	4604      	mov	r4, r0
    f9f0:	f7fb fcb6 	bl	b360 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f9f4:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f9f8:	b1b0      	cbz	r0, fa28 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    f9fa:	f10d 0007 	add.w	r0, sp, #7
    f9fe:	9000      	str	r0, [sp, #0]
    fa00:	7922      	ldrb	r2, [r4, #4]
    fa02:	78e1      	ldrb	r1, [r4, #3]
    fa04:	78a0      	ldrb	r0, [r4, #2]
    fa06:	f10d 0306 	add.w	r3, sp, #6
    fa0a:	f000 fc94 	bl	10336 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
    fa0e:	2800      	cmp	r0, #0
    fa10:	d109      	bne.n	fa26 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    fa12:	8820      	ldrh	r0, [r4, #0]
    fa14:	f8ad 0004 	strh.w	r0, [sp, #4]
    fa18:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    fa1c:	f8ad 0008 	strh.w	r0, [sp, #8]
    fa20:	a801      	add	r0, sp, #4
    fa22:	f000 f9a6 	bl	fd72 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    fa26:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fa28:	2001      	movs	r0, #1
    fa2a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fa2c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    fa2c:	b510      	push	{r4, lr}
    fa2e:	4604      	mov	r4, r0
    fa30:	f000 fbe1 	bl	101f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    fa34:	b120      	cbz	r0, fa40 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    fa36:	f7f6 fe57 	bl	66e8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fa3a:	b108      	cbz	r0, fa40 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    fa3c:	200c      	movs	r0, #12
    fa3e:	bd10      	pop	{r4, pc}
    fa40:	7820      	ldrb	r0, [r4, #0]
    fa42:	f7ff fd48 	bl	f4d6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    fa46:	79e2      	ldrb	r2, [r4, #7]
    fa48:	1c61      	adds	r1, r4, #1
    fa4a:	f7f6 fdfb 	bl	6644 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    fa4e:	b108      	cbz	r0, fa54 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    fa50:	2000      	movs	r0, #0
    fa52:	bd10      	pop	{r4, pc}
    fa54:	2002      	movs	r0, #2
    fa56:	bd10      	pop	{r4, pc}

0000fa58 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    fa58:	b510      	push	{r4, lr}
    fa5a:	4604      	mov	r4, r0
    fa5c:	2001      	movs	r0, #1
    fa5e:	f000 fac8 	bl	fff2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    fa62:	b128      	cbz	r0, fa70 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    fa64:	4621      	mov	r1, r4
    fa66:	2001      	movs	r0, #1
    fa68:	f7f6 f81e 	bl	5aa8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fa6c:	2000      	movs	r0, #0
    fa6e:	bd10      	pop	{r4, pc}
    fa70:	200c      	movs	r0, #12
    fa72:	bd10      	pop	{r4, pc}

0000fa74 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    fa74:	b510      	push	{r4, lr}
    fa76:	8800      	ldrh	r0, [r0, #0]
    fa78:	f7f6 fec4 	bl	6804 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    fa7c:	b108      	cbz	r0, fa82 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    fa7e:	2000      	movs	r0, #0
    fa80:	bd10      	pop	{r4, pc}
    fa82:	2030      	movs	r0, #48	; 0x30
    fa84:	bd10      	pop	{r4, pc}

0000fa86 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    fa86:	b51c      	push	{r2, r3, r4, lr}
    fa88:	4604      	mov	r4, r0
    fa8a:	f000 fc17 	bl	102bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x348>
    fa8e:	2000      	movs	r0, #0
    fa90:	f88d 0000 	strb.w	r0, [sp]
    fa94:	f88d 0002 	strb.w	r0, [sp, #2]
    fa98:	2003      	movs	r0, #3
    fa9a:	f88d 0001 	strb.w	r0, [sp, #1]
    fa9e:	f814 0b01 	ldrb.w	r0, [r4], #1
    faa2:	f88d 0003 	strb.w	r0, [sp, #3]
    faa6:	4668      	mov	r0, sp
    faa8:	9401      	str	r4, [sp, #4]
    faaa:	f000 f910 	bl	fcce <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    faae:	bd1c      	pop	{r2, r3, r4, pc}

0000fab0 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    fab0:	b51c      	push	{r2, r3, r4, lr}
    fab2:	4604      	mov	r4, r0
    fab4:	f000 fbe5 	bl	10282 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    fab8:	b178      	cbz	r0, fada <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    faba:	8820      	ldrh	r0, [r4, #0]
    fabc:	f8ad 0000 	strh.w	r0, [sp]
    fac0:	8860      	ldrh	r0, [r4, #2]
    fac2:	f8ad 0002 	strh.w	r0, [sp, #2]
    fac6:	8820      	ldrh	r0, [r4, #0]
    fac8:	f8ad 0004 	strh.w	r0, [sp, #4]
    facc:	8860      	ldrh	r0, [r4, #2]
    face:	f8ad 0006 	strh.w	r0, [sp, #6]
    fad2:	4668      	mov	r0, sp
    fad4:	f7fb fb78 	bl	b1c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    fad8:	bd1c      	pop	{r2, r3, r4, pc}
    fada:	2001      	movs	r0, #1
    fadc:	bd1c      	pop	{r2, r3, r4, pc}

0000fade <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    fade:	b510      	push	{r4, lr}
    fae0:	f7f6 f806 	bl	5af0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    fae4:	2000      	movs	r0, #0
    fae6:	bd10      	pop	{r4, pc}

0000fae8 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    fae8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    faea:	460c      	mov	r4, r1
    faec:	4605      	mov	r5, r0
    faee:	f000 fbc8 	bl	10282 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    faf2:	b160      	cbz	r0, fb0e <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    faf4:	4669      	mov	r1, sp
    faf6:	4628      	mov	r0, r5
    faf8:	f7fe f96b 	bl	ddd2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fafc:	2800      	cmp	r0, #0
    fafe:	d105      	bne.n	fb0c <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    fb00:	2100      	movs	r1, #0
    fb02:	4622      	mov	r2, r4
    fb04:	9801      	ldr	r0, [sp, #4]
    fb06:	f000 fb40 	bl	1018a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    fb0a:	2000      	movs	r0, #0
    fb0c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fb0e:	2001      	movs	r0, #1
    fb10:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000fb12 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    fb12:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fb16:	460f      	mov	r7, r1
    fb18:	4605      	mov	r5, r0
    fb1a:	7806      	ldrb	r6, [r0, #0]
    fb1c:	f000 fac5 	bl	100aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x136>
    fb20:	2800      	cmp	r0, #0
    fb22:	d10a      	bne.n	fb3a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    fb24:	4628      	mov	r0, r5
    fb26:	f000 fa9a 	bl	1005e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xea>
    fb2a:	2800      	cmp	r0, #0
    fb2c:	d105      	bne.n	fb3a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    fb2e:	2001      	movs	r0, #1
    fb30:	f7f5 fa9a 	bl	5068 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    fb34:	4286      	cmp	r6, r0
    fb36:	d302      	bcc.n	fb3e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    fb38:	2007      	movs	r0, #7
    fb3a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fb3e:	2101      	movs	r1, #1
    fb40:	4630      	mov	r0, r6
    fb42:	f7fd ff03 	bl	d94c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fb46:	0004      	movs	r4, r0
    fb48:	d004      	beq.n	fb54 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    fb4a:	f7ff f8ed 	bl	ed28 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    fb4e:	b150      	cbz	r0, fb66 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x54>
    fb50:	200c      	movs	r0, #12
    fb52:	e7f2      	b.n	fb3a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    fb54:	2200      	movs	r2, #0
    fb56:	2101      	movs	r1, #1
    fb58:	4630      	mov	r0, r6
    fb5a:	f7fd feed 	bl	d938 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    fb5e:	0004      	movs	r4, r0
    fb60:	d00f      	beq.n	fb82 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x70>
    fb62:	f7fe fead 	bl	e8c0 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    fb66:	4620      	mov	r0, r4
    fb68:	f7fe ff13 	bl	e992 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    fb6c:	7038      	strb	r0, [r7, #0]
    fb6e:	74e8      	strb	r0, [r5, #19]
    fb70:	4629      	mov	r1, r5
    fb72:	4620      	mov	r0, r4
    fb74:	f7f7 fc3c 	bl	73f0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    fb78:	4606      	mov	r6, r0
    fb7a:	7e68      	ldrb	r0, [r5, #25]
    fb7c:	b1d0      	cbz	r0, fbb4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
    fb7e:	b12e      	cbz	r6, fb8c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7a>
    fb80:	e018      	b.n	fbb4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
    fb82:	f44f 5191 	mov.w	r1, #4640	; 0x1220
    fb86:	2039      	movs	r0, #57	; 0x39
    fb88:	f7f5 f876 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb8c:	2200      	movs	r2, #0
    fb8e:	4668      	mov	r0, sp
    fb90:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    fb92:	f7fd ff9c 	bl	dace <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fb96:	2200      	movs	r2, #0
    fb98:	2101      	movs	r1, #1
    fb9a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fb9c:	f7fe f80c 	bl	dbb8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fba0:	2204      	movs	r2, #4
    fba2:	4668      	mov	r0, sp
    fba4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    fba6:	f7fd ff92 	bl	dace <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fbaa:	2200      	movs	r2, #0
    fbac:	4611      	mov	r1, r2
    fbae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fbb0:	f7fe f802 	bl	dbb8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fbb4:	4630      	mov	r0, r6
    fbb6:	e7c0      	b.n	fb3a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

0000fbb8 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    fbb8:	b510      	push	{r4, lr}
    fbba:	4604      	mov	r4, r0
    fbbc:	2000      	movs	r0, #0
    fbbe:	f000 fa18 	bl	fff2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    fbc2:	b128      	cbz	r0, fbd0 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    fbc4:	4621      	mov	r1, r4
    fbc6:	2000      	movs	r0, #0
    fbc8:	f7f5 ff6e 	bl	5aa8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fbcc:	2000      	movs	r0, #0
    fbce:	bd10      	pop	{r4, pc}
    fbd0:	200c      	movs	r0, #12
    fbd2:	bd10      	pop	{r4, pc}

0000fbd4 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    fbd4:	b510      	push	{r4, lr}
    fbd6:	7800      	ldrb	r0, [r0, #0]
    fbd8:	f000 0001 	and.w	r0, r0, #1
    fbdc:	f7f8 fb3e 	bl	825c <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>
    fbe0:	2000      	movs	r0, #0
    fbe2:	bd10      	pop	{r4, pc}

0000fbe4 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    fbe4:	b510      	push	{r4, lr}
    fbe6:	4604      	mov	r4, r0
    fbe8:	f000 fb4b 	bl	10282 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    fbec:	b120      	cbz	r0, fbf8 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    fbee:	4620      	mov	r0, r4
    fbf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fbf4:	f7fb ba64 	b.w	b0c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    fbf8:	2001      	movs	r0, #1
    fbfa:	bd10      	pop	{r4, pc}

0000fbfc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    fbfc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fc00:	4606      	mov	r6, r0
    fc02:	7845      	ldrb	r5, [r0, #1]
    fc04:	7800      	ldrb	r0, [r0, #0]
    fc06:	2101      	movs	r1, #1
    fc08:	f7fd fea0 	bl	d94c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fc0c:	0004      	movs	r4, r0
    fc0e:	d01e      	beq.n	fc4e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    fc10:	f7fe fe82 	bl	e918 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    fc14:	78f1      	ldrb	r1, [r6, #3]
    fc16:	4281      	cmp	r1, r0
    fc18:	d800      	bhi.n	fc1c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    fc1a:	4608      	mov	r0, r1
    fc1c:	4607      	mov	r7, r0
    fc1e:	2d04      	cmp	r5, #4
    fc20:	d018      	beq.n	fc54 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    fc22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fc24:	f7fd ffeb 	bl	dbfe <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    fc28:	4438      	add	r0, r7
    fc2a:	b281      	uxth	r1, r0
    fc2c:	4620      	mov	r0, r4
    fc2e:	2201      	movs	r2, #1
    fc30:	f000 f9f1 	bl	10016 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    fc34:	2800      	cmp	r0, #0
    fc36:	d10b      	bne.n	fc50 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    fc38:	2d03      	cmp	r5, #3
    fc3a:	d000      	beq.n	fc3e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    fc3c:	b1df      	cbz	r7, fc76 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fc3e:	4620      	mov	r0, r4
    fc40:	f7fe fea1 	bl	e986 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fc44:	7871      	ldrb	r1, [r6, #1]
    fc46:	2903      	cmp	r1, #3
    fc48:	d010      	beq.n	fc6c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    fc4a:	b9a0      	cbnz	r0, fc76 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fc4c:	e004      	b.n	fc58 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    fc4e:	2042      	movs	r0, #66	; 0x42
    fc50:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fc54:	b97f      	cbnz	r7, fc76 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fc56:	e7f2      	b.n	fc3e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    fc58:	2904      	cmp	r1, #4
    fc5a:	d107      	bne.n	fc6c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    fc5c:	4620      	mov	r0, r4
    fc5e:	f7ff f863 	bl	ed28 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    fc62:	b140      	cbz	r0, fc76 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fc64:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fc66:	f7fd ff99 	bl	db9c <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    fc6a:	b120      	cbz	r0, fc76 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fc6c:	2d01      	cmp	r5, #1
    fc6e:	d004      	beq.n	fc7a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    fc70:	2d03      	cmp	r5, #3
    fc72:	d002      	beq.n	fc7a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    fc74:	e00e      	b.n	fc94 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    fc76:	2012      	movs	r0, #18
    fc78:	e7ea      	b.n	fc50 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    fc7a:	4620      	mov	r0, r4
    fc7c:	f7fe fe83 	bl	e986 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fc80:	b108      	cbz	r0, fc86 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    fc82:	2200      	movs	r2, #0
    fc84:	e002      	b.n	fc8c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    fc86:	2d01      	cmp	r5, #1
    fc88:	d013      	beq.n	fcb2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    fc8a:	2201      	movs	r2, #1
    fc8c:	4668      	mov	r0, sp
    fc8e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    fc90:	f7fd ff1d 	bl	dace <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fc94:	2d04      	cmp	r5, #4
    fc96:	d018      	beq.n	fcca <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    fc98:	6872      	ldr	r2, [r6, #4]
    fc9a:	463b      	mov	r3, r7
    fc9c:	2101      	movs	r1, #1
    fc9e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fca0:	f7fd ff48 	bl	db34 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    fca4:	b138      	cbz	r0, fcb6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    fca6:	7870      	ldrb	r0, [r6, #1]
    fca8:	2802      	cmp	r0, #2
    fcaa:	d006      	beq.n	fcba <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    fcac:	2803      	cmp	r0, #3
    fcae:	d004      	beq.n	fcba <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    fcb0:	e00b      	b.n	fcca <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    fcb2:	2202      	movs	r2, #2
    fcb4:	e7ea      	b.n	fc8c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    fcb6:	2007      	movs	r0, #7
    fcb8:	e7ca      	b.n	fc50 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    fcba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fcbc:	f7fd ff9f 	bl	dbfe <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    fcc0:	4602      	mov	r2, r0
    fcc2:	2101      	movs	r1, #1
    fcc4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fcc6:	f7fd ff77 	bl	dbb8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fcca:	2000      	movs	r0, #0
    fccc:	e7c0      	b.n	fc50 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0000fcce <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    fcce:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fcd2:	4607      	mov	r7, r0
    fcd4:	7845      	ldrb	r5, [r0, #1]
    fcd6:	78c6      	ldrb	r6, [r0, #3]
    fcd8:	7800      	ldrb	r0, [r0, #0]
    fcda:	2101      	movs	r1, #1
    fcdc:	f7fd fe36 	bl	d94c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fce0:	0004      	movs	r4, r0
    fce2:	d003      	beq.n	fcec <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    fce4:	f7fe fe51 	bl	e98a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fce8:	b118      	cbz	r0, fcf2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    fcea:	e003      	b.n	fcf4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    fcec:	2042      	movs	r0, #66	; 0x42
    fcee:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fcf2:	2600      	movs	r6, #0
    fcf4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fcf6:	f7fd ff86 	bl	dc06 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    fcfa:	4430      	add	r0, r6
    fcfc:	b281      	uxth	r1, r0
    fcfe:	4688      	mov	r8, r1
    fd00:	4620      	mov	r0, r4
    fd02:	2201      	movs	r2, #1
    fd04:	f000 f987 	bl	10016 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    fd08:	2800      	cmp	r0, #0
    fd0a:	d1f0      	bne.n	fcee <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    fd0c:	2d04      	cmp	r5, #4
    fd0e:	d008      	beq.n	fd22 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    fd10:	2d03      	cmp	r5, #3
    fd12:	d00a      	beq.n	fd2a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    fd14:	b12e      	cbz	r6, fd22 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    fd16:	4620      	mov	r0, r4
    fd18:	f7ff f806 	bl	ed28 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    fd1c:	b118      	cbz	r0, fd26 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    fd1e:	200c      	movs	r0, #12
    fd20:	e7e5      	b.n	fcee <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    fd22:	2012      	movs	r0, #18
    fd24:	e7e3      	b.n	fcee <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    fd26:	2d01      	cmp	r5, #1
    fd28:	d10c      	bne.n	fd44 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    fd2a:	4620      	mov	r0, r4
    fd2c:	f7fe fe2b 	bl	e986 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fd30:	b108      	cbz	r0, fd36 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    fd32:	2204      	movs	r2, #4
    fd34:	e002      	b.n	fd3c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    fd36:	2d01      	cmp	r5, #1
    fd38:	d010      	beq.n	fd5c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    fd3a:	2205      	movs	r2, #5
    fd3c:	4668      	mov	r0, sp
    fd3e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    fd40:	f7fd fec5 	bl	dace <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fd44:	687a      	ldr	r2, [r7, #4]
    fd46:	4633      	mov	r3, r6
    fd48:	2100      	movs	r1, #0
    fd4a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fd4c:	f7fd fef2 	bl	db34 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    fd50:	b130      	cbz	r0, fd60 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    fd52:	2d02      	cmp	r5, #2
    fd54:	d006      	beq.n	fd64 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    fd56:	2d03      	cmp	r5, #3
    fd58:	d004      	beq.n	fd64 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    fd5a:	e008      	b.n	fd6e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    fd5c:	2206      	movs	r2, #6
    fd5e:	e7ed      	b.n	fd3c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    fd60:	2007      	movs	r0, #7
    fd62:	e7c4      	b.n	fcee <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    fd64:	4642      	mov	r2, r8
    fd66:	2100      	movs	r1, #0
    fd68:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fd6a:	f7fd ff25 	bl	dbb8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fd6e:	2000      	movs	r0, #0
    fd70:	e7bd      	b.n	fcee <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0000fd72 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    fd72:	b510      	push	{r4, lr}
    fd74:	4604      	mov	r4, r0
    fd76:	8880      	ldrh	r0, [r0, #4]
    fd78:	b128      	cbz	r0, fd86 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fd7a:	2801      	cmp	r0, #1
    fd7c:	d003      	beq.n	fd86 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fd7e:	2802      	cmp	r0, #2
    fd80:	d001      	beq.n	fd86 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fd82:	2012      	movs	r0, #18
    fd84:	bd10      	pop	{r4, pc}
    fd86:	78e0      	ldrb	r0, [r4, #3]
    fd88:	f000 f9dc 	bl	10144 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    fd8c:	b148      	cbz	r0, fda2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fd8e:	78a0      	ldrb	r0, [r4, #2]
    fd90:	f000 f9d8 	bl	10144 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    fd94:	b128      	cbz	r0, fda2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fd96:	4620      	mov	r0, r4
    fd98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fd9c:	2101      	movs	r1, #1
    fd9e:	f000 b884 	b.w	feaa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    fda2:	2011      	movs	r0, #17
    fda4:	bd10      	pop	{r4, pc}

0000fda6 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    fda6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fda8:	460c      	mov	r4, r1
    fdaa:	4605      	mov	r5, r0
    fdac:	8800      	ldrh	r0, [r0, #0]
    fdae:	4669      	mov	r1, sp
    fdb0:	f7fe f80f 	bl	ddd2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fdb4:	2800      	cmp	r0, #0
    fdb6:	d106      	bne.n	fdc6 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    fdb8:	9801      	ldr	r0, [sp, #4]
    fdba:	8829      	ldrh	r1, [r5, #0]
    fdbc:	8021      	strh	r1, [r4, #0]
    fdbe:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    fdc2:	8060      	strh	r0, [r4, #2]
    fdc4:	2000      	movs	r0, #0
    fdc6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000fdc8 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    fdc8:	b510      	push	{r4, lr}
    fdca:	4604      	mov	r4, r0
    fdcc:	4601      	mov	r1, r0
    fdce:	2000      	movs	r0, #0
    fdd0:	f7f5 fe52 	bl	5a78 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fdd4:	b910      	cbnz	r0, fddc <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    fdd6:	2000      	movs	r0, #0
    fdd8:	6020      	str	r0, [r4, #0]
    fdda:	80a0      	strh	r0, [r4, #4]
    fddc:	2000      	movs	r0, #0
    fdde:	bd10      	pop	{r4, pc}

0000fde0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    fde0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fde2:	8800      	ldrh	r0, [r0, #0]
    fde4:	4669      	mov	r1, sp
    fde6:	f7fd fff4 	bl	ddd2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fdea:	b958      	cbnz	r0, fe04 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    fdec:	4668      	mov	r0, sp
    fdee:	f000 fa4e 	bl	1028e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x31a>
    fdf2:	b138      	cbz	r0, fe04 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    fdf4:	9c01      	ldr	r4, [sp, #4]
    fdf6:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
    fdfa:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    fdfe:	3470      	adds	r4, #112	; 0x70
    fe00:	b929      	cbnz	r1, fe0e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
    fe02:	e001      	b.n	fe08 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    fe04:	2002      	movs	r0, #2
    fe06:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fe08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    fe0c:	b109      	cbz	r1, fe12 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    fe0e:	203a      	movs	r0, #58	; 0x3a
    fe10:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fe12:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
    fe16:	f04f 0501 	mov.w	r5, #1
    fe1a:	0789      	lsls	r1, r1, #30
    fe1c:	d103      	bne.n	fe26 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
    fe1e:	7005      	strb	r5, [r0, #0]
    fe20:	4668      	mov	r0, sp
    fe22:	f7fe fb50 	bl	e4c6 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    fe26:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
    fe2a:	2000      	movs	r0, #0
    fe2c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000fe2e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    fe2e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fe30:	460c      	mov	r4, r1
    fe32:	4605      	mov	r5, r0
    fe34:	8800      	ldrh	r0, [r0, #0]
    fe36:	4669      	mov	r1, sp
    fe38:	f7fd ffcb 	bl	ddd2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fe3c:	b108      	cbz	r0, fe42 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    fe3e:	2002      	movs	r0, #2
    fe40:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fe42:	78a8      	ldrb	r0, [r5, #2]
    fe44:	b130      	cbz	r0, fe54 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    fe46:	f000 f9fd 	bl	10244 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d0>
    fe4a:	70a0      	strb	r0, [r4, #2]
    fe4c:	8828      	ldrh	r0, [r5, #0]
    fe4e:	8020      	strh	r0, [r4, #0]
    fe50:	2000      	movs	r0, #0
    fe52:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fe54:	9801      	ldr	r0, [sp, #4]
    fe56:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    fe5a:	e7f6      	b.n	fe4a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000fe5c <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    fe5c:	b510      	push	{r4, lr}
    fe5e:	f7fb f9ed 	bl	b23c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    fe62:	2000      	movs	r0, #0
    fe64:	bd10      	pop	{r4, pc}

0000fe66 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    fe66:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fe6a:	4604      	mov	r4, r0
    fe6c:	8840      	ldrh	r0, [r0, #2]
    fe6e:	460d      	mov	r5, r1
    fe70:	b1b8      	cbz	r0, fea2 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    fe72:	8820      	ldrh	r0, [r4, #0]
    fe74:	4669      	mov	r1, sp
    fe76:	f7fd ffac 	bl	ddd2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fe7a:	2800      	cmp	r0, #0
    fe7c:	d10f      	bne.n	fe9e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    fe7e:	8820      	ldrh	r0, [r4, #0]
    fe80:	8028      	strh	r0, [r5, #0]
    fe82:	9e01      	ldr	r6, [sp, #4]
    fe84:	f106 050c 	add.w	r5, r6, #12
    fe88:	3670      	adds	r6, #112	; 0x70
    fe8a:	682f      	ldr	r7, [r5, #0]
    fe8c:	8862      	ldrh	r2, [r4, #2]
    fe8e:	4639      	mov	r1, r7
    fe90:	4630      	mov	r0, r6
    fe92:	f7fe f8df 	bl	e054 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    fe96:	6828      	ldr	r0, [r5, #0]
    fe98:	42b8      	cmp	r0, r7
    fe9a:	d1f6      	bne.n	fe8a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    fe9c:	2000      	movs	r0, #0
    fe9e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fea2:	2012      	movs	r0, #18
    fea4:	e7fb      	b.n	fe9e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000fea6 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    fea6:	f7fa bf87 	b.w	adb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000feaa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    feaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    feae:	b086      	sub	sp, #24
    feb0:	468a      	mov	sl, r1
    feb2:	4606      	mov	r6, r0
    feb4:	8800      	ldrh	r0, [r0, #0]
    feb6:	a901      	add	r1, sp, #4
    feb8:	f7fd ff8b 	bl	ddd2 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    febc:	2800      	cmp	r0, #0
    febe:	d138      	bne.n	ff32 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    fec0:	9802      	ldr	r0, [sp, #8]
    fec2:	f04f 0800 	mov.w	r8, #0
    fec6:	4601      	mov	r1, r0
    fec8:	4689      	mov	r9, r1
    feca:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
    fece:	f88d 1000 	strb.w	r1, [sp]
    fed2:	9900      	ldr	r1, [sp, #0]
    fed4:	9100      	str	r1, [sp, #0]
    fed6:	f89d 5000 	ldrb.w	r5, [sp]
    feda:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    fede:	3070      	adds	r0, #112	; 0x70
    fee0:	2921      	cmp	r1, #33	; 0x21
    fee2:	d100      	bne.n	fee6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    fee4:	b13d      	cbz	r5, fef6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    fee6:	2400      	movs	r4, #0
    fee8:	304c      	adds	r0, #76	; 0x4c
    feea:	2108      	movs	r1, #8
    feec:	4607      	mov	r7, r0
    feee:	f7ff fae8 	bl	f4c2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    fef2:	b110      	cbz	r0, fefa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    fef4:	e007      	b.n	ff06 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    fef6:	2401      	movs	r4, #1
    fef8:	e7f6      	b.n	fee8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    fefa:	210b      	movs	r1, #11
    fefc:	4638      	mov	r0, r7
    fefe:	f7ff fae0 	bl	f4c2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    ff02:	b900      	cbnz	r0, ff06 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    ff04:	b1a4      	cbz	r4, ff30 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
    ff06:	a804      	add	r0, sp, #16
    ff08:	9000      	str	r0, [sp, #0]
    ff0a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ff0e:	ab03      	add	r3, sp, #12
    ff10:	4632      	mov	r2, r6
    ff12:	4649      	mov	r1, r9
    ff14:	f000 f976 	bl	10204 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x290>
    ff18:	0007      	movs	r7, r0
    ff1a:	d10a      	bne.n	ff32 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    ff1c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ff20:	9c02      	ldr	r4, [sp, #8]
    ff22:	b148      	cbz	r0, ff38 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    ff24:	f504 74d7 	add.w	r4, r4, #430	; 0x1ae
    ff28:	2001      	movs	r0, #1
    ff2a:	7060      	strb	r0, [r4, #1]
    ff2c:	b94d      	cbnz	r5, ff42 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
    ff2e:	e006      	b.n	ff3e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
    ff30:	201a      	movs	r0, #26
    ff32:	b006      	add	sp, #24
    ff34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ff38:	f504 7497 	add.w	r4, r4, #302	; 0x12e
    ff3c:	e7f4      	b.n	ff28 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7e>
    ff3e:	7820      	ldrb	r0, [r4, #0]
    ff40:	b108      	cbz	r0, ff46 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    ff42:	273a      	movs	r7, #58	; 0x3a
    ff44:	e012      	b.n	ff6c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
    ff46:	f884 a000 	strb.w	sl, [r4]
    ff4a:	f89d 000c 	ldrb.w	r0, [sp, #12]
    ff4e:	70a0      	strb	r0, [r4, #2]
    ff50:	f89d 1010 	ldrb.w	r1, [sp, #16]
    ff54:	70e1      	strb	r1, [r4, #3]
    ff56:	f88d 0000 	strb.w	r0, [sp]
    ff5a:	f88d 1001 	strb.w	r1, [sp, #1]
    ff5e:	88b0      	ldrh	r0, [r6, #4]
    ff60:	f8ad 0002 	strh.w	r0, [sp, #2]
    ff64:	4669      	mov	r1, sp
    ff66:	4648      	mov	r0, r9
    ff68:	f7fd fff2 	bl	df50 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    ff6c:	f884 8001 	strb.w	r8, [r4, #1]
    ff70:	4638      	mov	r0, r7
    ff72:	e7de      	b.n	ff32 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>

0000ff74 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    ff74:	b510      	push	{r4, lr}
    ff76:	2008      	movs	r0, #8
    ff78:	f7fb f9e8 	bl	b34c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    ff7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff80:	f7f8 bf2c 	b.w	8ddc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    ff84:	f44f 71a4 	mov.w	r1, #328	; 0x148
    ff88:	4288      	cmp	r0, r1
    ff8a:	d303      	bcc.n	ff94 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
    ff8c:	f640 0148 	movw	r1, #2120	; 0x848
    ff90:	4288      	cmp	r0, r1
    ff92:	d300      	bcc.n	ff96 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
    ff94:	4608      	mov	r0, r1
    ff96:	4770      	bx	lr
    ff98:	07c1      	lsls	r1, r0, #31
    ff9a:	d001      	beq.n	ffa0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
    ff9c:	2001      	movs	r0, #1
    ff9e:	4770      	bx	lr
    ffa0:	0780      	lsls	r0, r0, #30
    ffa2:	d501      	bpl.n	ffa8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
    ffa4:	2002      	movs	r0, #2
    ffa6:	4770      	bx	lr
    ffa8:	2000      	movs	r0, #0
    ffaa:	4770      	bx	lr
    ffac:	b510      	push	{r4, lr}
    ffae:	2801      	cmp	r0, #1
    ffb0:	d006      	beq.n	ffc0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    ffb2:	2802      	cmp	r0, #2
    ffb4:	d004      	beq.n	ffc0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    ffb6:	f240 2163 	movw	r1, #611	; 0x263
    ffba:	2006      	movs	r0, #6
    ffbc:	f7f4 fe5c 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ffc0:	bd10      	pop	{r4, pc}
    ffc2:	b50e      	push	{r1, r2, r3, lr}
    ffc4:	4669      	mov	r1, sp
    ffc6:	2001      	movs	r0, #1
    ffc8:	f7fd fcca 	bl	d960 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    ffcc:	b150      	cbz	r0, ffe4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    ffce:	f240 1141 	movw	r1, #321	; 0x141
    ffd2:	2039      	movs	r0, #57	; 0x39
    ffd4:	f7f4 fe50 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ffd8:	9802      	ldr	r0, [sp, #8]
    ffda:	f7fe fea5 	bl	ed28 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    ffde:	b108      	cbz	r0, ffe4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    ffe0:	2001      	movs	r0, #1
    ffe2:	bd0e      	pop	{r1, r2, r3, pc}
    ffe4:	4668      	mov	r0, sp
    ffe6:	f7f5 f88d 	bl	5104 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    ffea:	2800      	cmp	r0, #0
    ffec:	d0f4      	beq.n	ffd8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
    ffee:	2000      	movs	r0, #0
    fff0:	bd0e      	pop	{r1, r2, r3, pc}
    fff2:	b510      	push	{r4, lr}
    fff4:	f7ff ffe5 	bl	ffc2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    fff8:	b158      	cbz	r0, 10012 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    fffa:	f000 f95f 	bl	102bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x348>
    fffe:	4604      	mov	r4, r0
   10000:	f7fe fcc3 	bl	e98a <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10004:	b918      	cbnz	r0, 1000e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
   10006:	4620      	mov	r0, r4
   10008:	f7fe fcb5 	bl	e976 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   1000c:	b108      	cbz	r0, 10012 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
   1000e:	2000      	movs	r0, #0
   10010:	bd10      	pop	{r4, pc}
   10012:	2001      	movs	r0, #1
   10014:	bd10      	pop	{r4, pc}
   10016:	b570      	push	{r4, r5, r6, lr}
   10018:	460c      	mov	r4, r1
   1001a:	4605      	mov	r5, r0
   1001c:	b112      	cbz	r2, 10024 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
   1001e:	291f      	cmp	r1, #31
   10020:	d80c      	bhi.n	1003c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xc8>
   10022:	e016      	b.n	10052 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
   10024:	f7f5 fb34 	bl	5690 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   10028:	42a0      	cmp	r0, r4
   1002a:	d201      	bcs.n	10030 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xbc>
   1002c:	2007      	movs	r0, #7
   1002e:	bd70      	pop	{r4, r5, r6, pc}
   10030:	4628      	mov	r0, r5
   10032:	f7fe fca8 	bl	e986 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10036:	b118      	cbz	r0, 10040 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
   10038:	2c1f      	cmp	r4, #31
   1003a:	d901      	bls.n	10040 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
   1003c:	2012      	movs	r0, #18
   1003e:	bd70      	pop	{r4, r5, r6, pc}
   10040:	4628      	mov	r0, r5
   10042:	f7fe fca9 	bl	e998 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10046:	b130      	cbz	r0, 10056 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe2>
   10048:	4621      	mov	r1, r4
   1004a:	4628      	mov	r0, r5
   1004c:	f7fe fc70 	bl	e930 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   10050:	b118      	cbz	r0, 1005a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe6>
   10052:	2000      	movs	r0, #0
   10054:	bd70      	pop	{r4, r5, r6, pc}
   10056:	2042      	movs	r0, #66	; 0x42
   10058:	bd70      	pop	{r4, r5, r6, pc}
   1005a:	2045      	movs	r0, #69	; 0x45
   1005c:	bd70      	pop	{r4, r5, r6, pc}
   1005e:	b510      	push	{r4, lr}
   10060:	4604      	mov	r4, r0
   10062:	7840      	ldrb	r0, [r0, #1]
   10064:	06c1      	lsls	r1, r0, #27
   10066:	d51c      	bpl.n	100a2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   10068:	07c0      	lsls	r0, r0, #31
   1006a:	d00b      	beq.n	10084 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   1006c:	f7fb f924 	bl	b2b8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   10070:	b1b8      	cbz	r0, 100a2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   10072:	7860      	ldrb	r0, [r4, #1]
   10074:	06c1      	lsls	r1, r0, #27
   10076:	d405      	bmi.n	10084 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   10078:	0700      	lsls	r0, r0, #28
   1007a:	d503      	bpl.n	10084 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   1007c:	7d20      	ldrb	r0, [r4, #20]
   1007e:	2802      	cmp	r0, #2
   10080:	d10f      	bne.n	100a2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   10082:	e010      	b.n	100a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   10084:	7d20      	ldrb	r0, [r4, #20]
   10086:	2802      	cmp	r0, #2
   10088:	d001      	beq.n	1008e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x11a>
   1008a:	7ea0      	ldrb	r0, [r4, #26]
   1008c:	b948      	cbnz	r0, 100a2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   1008e:	7860      	ldrb	r0, [r4, #1]
   10090:	0700      	lsls	r0, r0, #28
   10092:	d408      	bmi.n	100a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   10094:	f8d4 0005 	ldr.w	r0, [r4, #5]
   10098:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   1009c:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   100a0:	d201      	bcs.n	100a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   100a2:	2011      	movs	r0, #17
   100a4:	bd10      	pop	{r4, pc}
   100a6:	2000      	movs	r0, #0
   100a8:	bd10      	pop	{r4, pc}
   100aa:	b538      	push	{r3, r4, r5, lr}
   100ac:	4604      	mov	r4, r0
   100ae:	7800      	ldrb	r0, [r0, #0]
   100b0:	28ef      	cmp	r0, #239	; 0xef
   100b2:	d843      	bhi.n	1013c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   100b4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   100b8:	f8ad 0000 	strh.w	r0, [sp]
   100bc:	9800      	ldr	r0, [sp, #0]
   100be:	f000 f951 	bl	10364 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f0>
   100c2:	b3a0      	cbz	r0, 1012e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
   100c4:	7861      	ldrb	r1, [r4, #1]
   100c6:	0708      	lsls	r0, r1, #28
   100c8:	d40b      	bmi.n	100e2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x16e>
   100ca:	f8d4 0002 	ldr.w	r0, [r4, #2]
   100ce:	f8d4 3005 	ldr.w	r3, [r4, #5]
   100d2:	0a02      	lsrs	r2, r0, #8
   100d4:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   100d8:	d830      	bhi.n	1013c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   100da:	2220      	movs	r2, #32
   100dc:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   100e0:	d82c      	bhi.n	1013c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   100e2:	7a60      	ldrb	r0, [r4, #9]
   100e4:	b318      	cbz	r0, 1012e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
   100e6:	2807      	cmp	r0, #7
   100e8:	d828      	bhi.n	1013c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   100ea:	7aa0      	ldrb	r0, [r4, #10]
   100ec:	b128      	cbz	r0, 100fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   100ee:	2801      	cmp	r0, #1
   100f0:	d003      	beq.n	100fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   100f2:	2802      	cmp	r0, #2
   100f4:	d001      	beq.n	100fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   100f6:	2803      	cmp	r0, #3
   100f8:	d120      	bne.n	1013c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   100fa:	074a      	lsls	r2, r1, #29
   100fc:	d403      	bmi.n	10106 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
   100fe:	2802      	cmp	r0, #2
   10100:	d001      	beq.n	10106 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
   10102:	2803      	cmp	r0, #3
   10104:	d105      	bne.n	10112 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19e>
   10106:	7ae0      	ldrb	r0, [r4, #11]
   10108:	b108      	cbz	r0, 1010e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
   1010a:	2801      	cmp	r0, #1
   1010c:	d116      	bne.n	1013c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1010e:	0748      	lsls	r0, r1, #29
   10110:	d407      	bmi.n	10122 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   10112:	7ca0      	ldrb	r0, [r4, #18]
   10114:	b128      	cbz	r0, 10122 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   10116:	2801      	cmp	r0, #1
   10118:	d003      	beq.n	10122 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   1011a:	2802      	cmp	r0, #2
   1011c:	d001      	beq.n	10122 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   1011e:	2803      	cmp	r0, #3
   10120:	d10c      	bne.n	1013c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10122:	06c8      	lsls	r0, r1, #27
   10124:	7d20      	ldrb	r0, [r4, #20]
   10126:	d503      	bpl.n	10130 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1bc>
   10128:	2801      	cmp	r0, #1
   1012a:	d107      	bne.n	1013c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1012c:	e002      	b.n	10134 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c0>
   1012e:	e005      	b.n	1013c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10130:	2802      	cmp	r0, #2
   10132:	d003      	beq.n	1013c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10134:	7e20      	ldrb	r0, [r4, #24]
   10136:	b118      	cbz	r0, 10140 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
   10138:	2801      	cmp	r0, #1
   1013a:	d001      	beq.n	10140 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
   1013c:	2012      	movs	r0, #18
   1013e:	bd38      	pop	{r3, r4, r5, pc}
   10140:	2000      	movs	r0, #0
   10142:	bd38      	pop	{r3, r4, r5, pc}
   10144:	b510      	push	{r4, lr}
   10146:	0004      	movs	r4, r0
   10148:	d005      	beq.n	10156 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
   1014a:	f7fb f90f 	bl	b36c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1014e:	4384      	bics	r4, r0
   10150:	d001      	beq.n	10156 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
   10152:	2000      	movs	r0, #0
   10154:	bd10      	pop	{r4, pc}
   10156:	2001      	movs	r0, #1
   10158:	bd10      	pop	{r4, pc}
   1015a:	28fb      	cmp	r0, #251	; 0xfb
   1015c:	d803      	bhi.n	10166 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
   1015e:	f640 0048 	movw	r0, #2120	; 0x848
   10162:	4281      	cmp	r1, r0
   10164:	d901      	bls.n	1016a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
   10166:	2011      	movs	r0, #17
   10168:	4770      	bx	lr
   1016a:	2000      	movs	r0, #0
   1016c:	4770      	bx	lr
   1016e:	381b      	subs	r0, #27
   10170:	28e1      	cmp	r0, #225	; 0xe1
   10172:	d206      	bcs.n	10182 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
   10174:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   10178:	d303      	bcc.n	10182 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
   1017a:	f244 2090 	movw	r0, #17040	; 0x4290
   1017e:	4281      	cmp	r1, r0
   10180:	d901      	bls.n	10186 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x212>
   10182:	2012      	movs	r0, #18
   10184:	4770      	bx	lr
   10186:	2000      	movs	r0, #0
   10188:	4770      	bx	lr
   1018a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1018e:	4606      	mov	r6, r0
   10190:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   10194:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   10198:	4615      	mov	r5, r2
   1019a:	302c      	adds	r0, #44	; 0x2c
   1019c:	f7f8 f864 	bl	8268 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>
   101a0:	4680      	mov	r8, r0
   101a2:	2102      	movs	r1, #2
   101a4:	f7fd fea5 	bl	def2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   101a8:	4287      	cmp	r7, r0
   101aa:	d200      	bcs.n	101ae <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23a>
   101ac:	4638      	mov	r0, r7
   101ae:	4607      	mov	r7, r0
   101b0:	2102      	movs	r1, #2
   101b2:	4640      	mov	r0, r8
   101b4:	f7fd fe9d 	bl	def2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   101b8:	4284      	cmp	r4, r0
   101ba:	d200      	bcs.n	101be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24a>
   101bc:	4620      	mov	r0, r4
   101be:	8831      	ldrh	r1, [r6, #0]
   101c0:	8029      	strh	r1, [r5, #0]
   101c2:	2f1b      	cmp	r7, #27
   101c4:	d913      	bls.n	101ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27a>
   101c6:	2ffb      	cmp	r7, #251	; 0xfb
   101c8:	d300      	bcc.n	101cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
   101ca:	27fb      	movs	r7, #251	; 0xfb
   101cc:	806f      	strh	r7, [r5, #2]
   101ce:	281b      	cmp	r0, #27
   101d0:	d90f      	bls.n	101f2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
   101d2:	28fb      	cmp	r0, #251	; 0xfb
   101d4:	d300      	bcc.n	101d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
   101d6:	20fb      	movs	r0, #251	; 0xfb
   101d8:	80e8      	strh	r0, [r5, #6]
   101da:	4640      	mov	r0, r8
   101dc:	f7ff fed2 	bl	ff84 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
   101e0:	80a8      	strh	r0, [r5, #4]
   101e2:	4640      	mov	r0, r8
   101e4:	f7ff fece 	bl	ff84 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
   101e8:	8128      	strh	r0, [r5, #8]
   101ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   101ee:	271b      	movs	r7, #27
   101f0:	e7ec      	b.n	101cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
   101f2:	201b      	movs	r0, #27
   101f4:	e7f0      	b.n	101d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
   101f6:	b510      	push	{r4, lr}
   101f8:	f7ff fee3 	bl	ffc2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
   101fc:	2800      	cmp	r0, #0
   101fe:	d000      	beq.n	10202 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x28e>
   10200:	2001      	movs	r0, #1
   10202:	bd10      	pop	{r4, pc}
   10204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10208:	7890      	ldrb	r0, [r2, #2]
   1020a:	9e06      	ldr	r6, [sp, #24]
   1020c:	461d      	mov	r5, r3
   1020e:	4614      	mov	r4, r2
   10210:	b908      	cbnz	r0, 10216 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a2>
   10212:	f7fb f8ab 	bl	b36c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10216:	78e4      	ldrb	r4, [r4, #3]
   10218:	4607      	mov	r7, r0
   1021a:	b914      	cbnz	r4, 10222 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2ae>
   1021c:	f7fb f8a6 	bl	b36c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10220:	4604      	mov	r4, r0
   10222:	b16f      	cbz	r7, 10240 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2cc>
   10224:	b164      	cbz	r4, 10240 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2cc>
   10226:	4638      	mov	r0, r7
   10228:	f7ff feb6 	bl	ff98 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
   1022c:	4620      	mov	r0, r4
   1022e:	f7ff feb3 	bl	ff98 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
   10232:	b12f      	cbz	r7, 10240 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2cc>
   10234:	b124      	cbz	r4, 10240 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2cc>
   10236:	702f      	strb	r7, [r5, #0]
   10238:	7034      	strb	r4, [r6, #0]
   1023a:	2000      	movs	r0, #0
   1023c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10240:	2009      	movs	r0, #9
   10242:	e7fb      	b.n	1023c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c8>
   10244:	b510      	push	{r4, lr}
   10246:	f7fc fb11 	bl	c86c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   1024a:	b928      	cbnz	r0, 10258 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e4>
   1024c:	f7fc fb44 	bl	c8d8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   10250:	b910      	cbnz	r0, 10258 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e4>
   10252:	f7fc fb4b 	bl	c8ec <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   10256:	b108      	cbz	r0, 1025c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e8>
   10258:	2008      	movs	r0, #8
   1025a:	bd10      	pop	{r4, pc}
   1025c:	f7fc fadb 	bl	c816 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   10260:	b940      	cbnz	r0, 10274 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   10262:	f7fc fae2 	bl	c82a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10266:	b928      	cbnz	r0, 10274 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   10268:	f7fc faf6 	bl	c858 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   1026c:	b910      	cbnz	r0, 10274 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
   1026e:	f7fc fb07 	bl	c880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10272:	b108      	cbz	r0, 10278 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x304>
   10274:	2004      	movs	r0, #4
   10276:	bd10      	pop	{r4, pc}
   10278:	f44f 61b1 	mov.w	r1, #1416	; 0x588
   1027c:	2039      	movs	r0, #57	; 0x39
   1027e:	f7f4 fcfb 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10282:	b510      	push	{r4, lr}
   10284:	f7fb f86c 	bl	b360 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   10288:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1028c:	bd10      	pop	{r4, pc}
   1028e:	6840      	ldr	r0, [r0, #4]
   10290:	f000 b800 	b.w	10294 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x320>
   10294:	b508      	push	{r3, lr}
   10296:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
   1029a:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   1029e:	f88d 0000 	strb.w	r0, [sp]
   102a2:	9800      	ldr	r0, [sp, #0]
   102a4:	9000      	str	r0, [sp, #0]
   102a6:	f89d 0000 	ldrb.w	r0, [sp]
   102aa:	1e40      	subs	r0, r0, #1
   102ac:	4208      	tst	r0, r1
   102ae:	d003      	beq.n	102b8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x344>
   102b0:	2904      	cmp	r1, #4
   102b2:	d001      	beq.n	102b8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x344>
   102b4:	2001      	movs	r0, #1
   102b6:	bd08      	pop	{r3, pc}
   102b8:	2000      	movs	r0, #0
   102ba:	bd08      	pop	{r3, pc}
   102bc:	b510      	push	{r4, lr}
   102be:	2101      	movs	r1, #1
   102c0:	2000      	movs	r0, #0
   102c2:	f7fd fb43 	bl	d94c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   102c6:	0004      	movs	r4, r0
   102c8:	d108      	bne.n	102dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
   102ca:	2200      	movs	r2, #0
   102cc:	2101      	movs	r1, #1
   102ce:	4610      	mov	r0, r2
   102d0:	f7fd fb32 	bl	d938 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   102d4:	0004      	movs	r4, r0
   102d6:	d003      	beq.n	102e0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x36c>
   102d8:	f7fe faf2 	bl	e8c0 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   102dc:	4620      	mov	r0, r4
   102de:	bd10      	pop	{r4, pc}
   102e0:	f44f 7108 	mov.w	r1, #544	; 0x220
   102e4:	2039      	movs	r0, #57	; 0x39
   102e6:	f7f4 fcc7 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   102ea:	b570      	push	{r4, r5, r6, lr}
   102ec:	4605      	mov	r5, r0
   102ee:	f7fe fb53 	bl	e998 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   102f2:	b170      	cbz	r0, 10312 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39e>
   102f4:	4628      	mov	r0, r5
   102f6:	f7fe fd17 	bl	ed28 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
   102fa:	2800      	cmp	r0, #0
   102fc:	d008      	beq.n	10310 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39c>
   102fe:	4628      	mov	r0, r5
   10300:	f7fe fd0f 	bl	ed22 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>
   10304:	4604      	mov	r4, r0
   10306:	4628      	mov	r0, r5
   10308:	f7fe fce5 	bl	ecd6 <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
   1030c:	b118      	cbz	r0, 10316 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3a2>
   1030e:	200c      	movs	r0, #12
   10310:	bd70      	pop	{r4, r5, r6, pc}
   10312:	2042      	movs	r0, #66	; 0x42
   10314:	bd70      	pop	{r4, r5, r6, pc}
   10316:	b164      	cbz	r4, 10332 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
   10318:	8820      	ldrh	r0, [r4, #0]
   1031a:	f7fd fc9a 	bl	dc52 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   1031e:	8820      	ldrh	r0, [r4, #0]
   10320:	2100      	movs	r1, #0
   10322:	f7f4 ff3f 	bl	51a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   10326:	b120      	cbz	r0, 10332 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
   10328:	f241 41b9 	movw	r1, #5305	; 0x14b9
   1032c:	2039      	movs	r0, #57	; 0x39
   1032e:	f7f4 fca3 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10332:	2000      	movs	r0, #0
   10334:	bd70      	pop	{r4, r5, r6, pc}
   10336:	b530      	push	{r4, r5, lr}
   10338:	f340 0400 	sbfx	r4, r0, #0, #1
   1033c:	f340 0040 	sbfx	r0, r0, #1, #1
   10340:	1c40      	adds	r0, r0, #1
   10342:	9d03      	ldr	r5, [sp, #12]
   10344:	1c64      	adds	r4, r4, #1
   10346:	d000      	beq.n	1034a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d6>
   10348:	b119      	cbz	r1, 10352 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
   1034a:	b100      	cbz	r0, 1034e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3da>
   1034c:	b10a      	cbz	r2, 10352 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
   1034e:	b91c      	cbnz	r4, 10358 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e4>
   10350:	e001      	b.n	10356 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e2>
   10352:	2011      	movs	r0, #17
   10354:	bd30      	pop	{r4, r5, pc}
   10356:	2100      	movs	r1, #0
   10358:	7019      	strb	r1, [r3, #0]
   1035a:	b900      	cbnz	r0, 1035e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ea>
   1035c:	2200      	movs	r2, #0
   1035e:	702a      	strb	r2, [r5, #0]
   10360:	2000      	movs	r0, #0
   10362:	bd30      	pop	{r4, r5, pc}
   10364:	b2c0      	uxtb	r0, r0
   10366:	06c1      	lsls	r1, r0, #27
   10368:	d40c      	bmi.n	10384 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x410>
   1036a:	0681      	lsls	r1, r0, #26
   1036c:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   10370:	d503      	bpl.n	1037a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x406>
   10372:	b9d1      	cbnz	r1, 103aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   10374:	0781      	lsls	r1, r0, #30
   10376:	d418      	bmi.n	103aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   10378:	e001      	b.n	1037e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x40a>
   1037a:	2900      	cmp	r1, #0
   1037c:	d1fa      	bne.n	10374 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x400>
   1037e:	0700      	lsls	r0, r0, #28
   10380:	d413      	bmi.n	103aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   10382:	e010      	b.n	103a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
   10384:	0641      	lsls	r1, r0, #25
   10386:	d410      	bmi.n	103aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   10388:	0681      	lsls	r1, r0, #26
   1038a:	d40e      	bmi.n	103aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1038c:	07c1      	lsls	r1, r0, #31
   1038e:	ea4f 7180 	mov.w	r1, r0, lsl #30
   10392:	d004      	beq.n	1039e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
   10394:	2900      	cmp	r1, #0
   10396:	db02      	blt.n	1039e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
   10398:	0740      	lsls	r0, r0, #29
   1039a:	d404      	bmi.n	103a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
   1039c:	e005      	b.n	103aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1039e:	0701      	lsls	r1, r0, #28
   103a0:	d403      	bmi.n	103aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   103a2:	0740      	lsls	r0, r0, #29
   103a4:	d401      	bmi.n	103aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   103a6:	2001      	movs	r0, #1
   103a8:	4770      	bx	lr
   103aa:	2000      	movs	r0, #0
   103ac:	4770      	bx	lr
   103ae:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   103b0:	4669      	mov	r1, sp
   103b2:	2001      	movs	r0, #1
   103b4:	f7fd fad4 	bl	d960 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   103b8:	b178      	cbz	r0, 103da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
   103ba:	f240 115f 	movw	r1, #351	; 0x15f
   103be:	2039      	movs	r0, #57	; 0x39
   103c0:	f7f4 fc5a 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   103c4:	9c02      	ldr	r4, [sp, #8]
   103c6:	4620      	mov	r0, r4
   103c8:	f7fe fcae 	bl	ed28 <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
   103cc:	b128      	cbz	r0, 103da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
   103ce:	4620      	mov	r0, r4
   103d0:	f7fe fb10 	bl	e9f4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   103d4:	b108      	cbz	r0, 103da <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
   103d6:	2001      	movs	r0, #1
   103d8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   103da:	4668      	mov	r0, sp
   103dc:	f7f4 fe92 	bl	5104 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   103e0:	2800      	cmp	r0, #0
   103e2:	d0ef      	beq.n	103c4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
   103e4:	2000      	movs	r0, #0
   103e6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000103e8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
   103e8:	6802      	ldr	r2, [r0, #0]
   103ea:	b912      	cbnz	r2, 103f2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
   103ec:	6001      	str	r1, [r0, #0]
   103ee:	4770      	bx	lr
   103f0:	4602      	mov	r2, r0
   103f2:	6850      	ldr	r0, [r2, #4]
   103f4:	b108      	cbz	r0, 103fa <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
   103f6:	428a      	cmp	r2, r1
   103f8:	d1fa      	bne.n	103f0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
   103fa:	428a      	cmp	r2, r1
   103fc:	d0f7      	beq.n	103ee <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
   103fe:	6051      	str	r1, [r2, #4]
   10400:	4770      	bx	lr
   10402:	b510      	push	{r4, lr}
   10404:	f7fe fc93 	bl	ed2e <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
   10408:	b108      	cbz	r0, 1040e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
   1040a:	21f3      	movs	r1, #243	; 0xf3
   1040c:	e003      	b.n	10416 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
   1040e:	f7f7 f8bf 	bl	7590 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   10412:	b118      	cbz	r0, 1041c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x34>
   10414:	21f8      	movs	r1, #248	; 0xf8
   10416:	2001      	movs	r0, #1
   10418:	f7f4 fc2e 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1041c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10420:	2001      	movs	r0, #1
   10422:	f7f4 be05 	b.w	5030 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10426:	b510      	push	{r4, lr}
   10428:	4604      	mov	r4, r0
   1042a:	e002      	b.n	10432 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4a>
   1042c:	6820      	ldr	r0, [r4, #0]
   1042e:	4780      	blx	r0
   10430:	6864      	ldr	r4, [r4, #4]
   10432:	2c00      	cmp	r4, #0
   10434:	d1fa      	bne.n	1042c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x44>
   10436:	bd10      	pop	{r4, pc}
   10438:	b510      	push	{r4, lr}
   1043a:	2000      	movs	r0, #0
   1043c:	f7f4 fdf8 	bl	5030 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10440:	f7f5 f82e 	bl	54a0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   10444:	f7f5 fafa 	bl	5a3c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   10448:	f7f5 fcee 	bl	5e28 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   1044c:	2800      	cmp	r0, #0
   1044e:	d003      	beq.n	10458 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x70>
   10450:	21d0      	movs	r1, #208	; 0xd0
   10452:	2001      	movs	r0, #1
   10454:	f7f4 fc10 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10458:	bd10      	pop	{r4, pc}
   1045a:	b510      	push	{r4, lr}
   1045c:	f7ff ffd1 	bl	10402 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
   10460:	f7fe ffef 	bl	f442 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   10464:	2800      	cmp	r0, #0
   10466:	d004      	beq.n	10472 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8a>
   10468:	f240 1111 	movw	r1, #273	; 0x111
   1046c:	2001      	movs	r0, #1
   1046e:	f7f4 fc03 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10472:	bd10      	pop	{r4, pc}

00010474 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   10474:	f7f4 b874 	b.w	4560 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   10478:	000b0001 	.word	0x000b0001
   1047c:	000a0002 	.word	0x000a0002
   10480:	00090005 	.word	0x00090005
   10484:	0008000a 	.word	0x0008000a
   10488:	00070014 	.word	0x00070014
   1048c:	0006001e 	.word	0x0006001e
   10490:	00050032 	.word	0x00050032
   10494:	0004004b 	.word	0x0004004b
   10498:	00030064 	.word	0x00030064
   1049c:	00020096 	.word	0x00020096
   104a0:	000100fa 	.word	0x000100fa
   104a4:	000001f4 	.word	0x000001f4

000104a8 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   104a8:	b510      	push	{r4, lr}
   104aa:	f7fb fb4f 	bl	bb4c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   104ae:	f000 f850 	bl	10552 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   104b2:	f7fa ffc9 	bl	b448 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   104b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   104ba:	f7fb b8c7 	b.w	b64c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

000104be <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   104be:	b510      	push	{r4, lr}
   104c0:	24c8      	movs	r4, #200	; 0xc8
   104c2:	1e64      	subs	r4, r4, #1
   104c4:	b2e4      	uxtb	r4, r4
   104c6:	f7fa ffdd 	bl	b484 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   104ca:	2802      	cmp	r0, #2
   104cc:	d003      	beq.n	104d6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   104ce:	2801      	cmp	r0, #1
   104d0:	d000      	beq.n	104d4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   104d2:	2000      	movs	r0, #0
   104d4:	bd10      	pop	{r4, pc}
   104d6:	2c00      	cmp	r4, #0
   104d8:	d1f3      	bne.n	104c2 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   104da:	2193      	movs	r1, #147	; 0x93
   104dc:	203b      	movs	r0, #59	; 0x3b
   104de:	f7f4 fbcb 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000104e2 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
   104e2:	b510      	push	{r4, lr}
   104e4:	f7f4 fa96 	bl	4a14 <mpsl_fem_lna_configuration_clear>
   104e8:	2800      	cmp	r0, #0
   104ea:	d005      	beq.n	104f8 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   104ec:	1c40      	adds	r0, r0, #1
   104ee:	d003      	beq.n	104f8 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   104f0:	2150      	movs	r1, #80	; 0x50
   104f2:	2040      	movs	r0, #64	; 0x40
   104f4:	f7f4 fbc0 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   104f8:	bd10      	pop	{r4, pc}

000104fa <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
   104fa:	b510      	push	{r4, lr}
   104fc:	f7f4 fa96 	bl	4a2c <mpsl_fem_pa_configuration_clear>
   10500:	2800      	cmp	r0, #0
   10502:	d005      	beq.n	10510 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   10504:	1c40      	adds	r0, r0, #1
   10506:	d003      	beq.n	10510 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   10508:	2149      	movs	r1, #73	; 0x49
   1050a:	2040      	movs	r0, #64	; 0x40
   1050c:	f7f4 fbb4 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10510:	bd10      	pop	{r4, pc}

00010512 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
   10512:	b510      	push	{r4, lr}
   10514:	f7f4 fa78 	bl	4a08 <mpsl_fem_disable>
   10518:	2800      	cmp	r0, #0
   1051a:	d005      	beq.n	10528 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   1051c:	1c40      	adds	r0, r0, #1
   1051e:	d003      	beq.n	10528 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   10520:	2157      	movs	r1, #87	; 0x57
   10522:	2040      	movs	r0, #64	; 0x40
   10524:	f7f4 fba8 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10528:	bd10      	pop	{r4, pc}

0001052a <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
   1052a:	b510      	push	{r4, lr}
   1052c:	2100      	movs	r1, #0
   1052e:	4608      	mov	r0, r1
   10530:	f7f4 fa76 	bl	4a20 <mpsl_fem_lna_configuration_set>
   10534:	b108      	cbz	r0, 1053a <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
   10536:	2000      	movs	r0, #0
   10538:	bd10      	pop	{r4, pc}
   1053a:	2001      	movs	r0, #1
   1053c:	bd10      	pop	{r4, pc}

0001053e <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
   1053e:	b508      	push	{r3, lr}
   10540:	4668      	mov	r0, sp
   10542:	f7f4 fa7f 	bl	4a44 <mpsl_fem_pa_is_configured>
   10546:	f89d 0000 	ldrb.w	r0, [sp]
   1054a:	2800      	cmp	r0, #0
   1054c:	d000      	beq.n	10550 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
   1054e:	2001      	movs	r0, #1
   10550:	bd08      	pop	{r3, pc}

00010552 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10552:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10556:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1055a:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   1055e:	f3bf 8f4f 	dsb	sy
   10562:	f3bf 8f6f 	isb	sy
   10566:	f7fb b94b 	b.w	b800 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
   1056a:	2800      	cmp	r0, #0
   1056c:	db09      	blt.n	10582 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   1056e:	f000 021f 	and.w	r2, r0, #31
   10572:	2101      	movs	r1, #1
   10574:	4091      	lsls	r1, r2
   10576:	0940      	lsrs	r0, r0, #5
   10578:	0080      	lsls	r0, r0, #2
   1057a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1057e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10582:	4770      	bx	lr
   10584:	2800      	cmp	r0, #0
   10586:	db0d      	blt.n	105a4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10588:	f000 021f 	and.w	r2, r0, #31
   1058c:	2101      	movs	r1, #1
   1058e:	4091      	lsls	r1, r2
   10590:	0940      	lsrs	r0, r0, #5
   10592:	0080      	lsls	r0, r0, #2
   10594:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10598:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   1059c:	f3bf 8f4f 	dsb	sy
   105a0:	f3bf 8f6f 	isb	sy
   105a4:	4770      	bx	lr

000105a6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   105a6:	b510      	push	{r4, lr}
   105a8:	2801      	cmp	r0, #1
   105aa:	d006      	beq.n	105ba <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
   105ac:	2802      	cmp	r0, #2
   105ae:	d006      	beq.n	105be <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
   105b0:	f640 3164 	movw	r1, #2916	; 0xb64
   105b4:	203e      	movs	r0, #62	; 0x3e
   105b6:	f7f4 fb5f 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   105ba:	2028      	movs	r0, #40	; 0x28
   105bc:	bd10      	pop	{r4, pc}
   105be:	2018      	movs	r0, #24
   105c0:	bd10      	pop	{r4, pc}

000105c2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   105c2:	b510      	push	{r4, lr}
   105c4:	2801      	cmp	r0, #1
   105c6:	d006      	beq.n	105d6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
   105c8:	2802      	cmp	r0, #2
   105ca:	d007      	beq.n	105dc <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
   105cc:	f640 3178 	movw	r1, #2936	; 0xb78
   105d0:	203e      	movs	r0, #62	; 0x3e
   105d2:	f7f4 fb51 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   105d6:	f641 6014 	movw	r0, #7700	; 0x1e14
   105da:	bd10      	pop	{r4, pc}
   105dc:	f241 1030 	movw	r0, #4400	; 0x1130
   105e0:	bd10      	pop	{r4, pc}

000105e2 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
   105e2:	f7fb bfdb 	b.w	c59c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
   105e6:	b510      	push	{r4, lr}
   105e8:	460a      	mov	r2, r1
   105ea:	b130      	cbz	r0, 105fa <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
   105ec:	2801      	cmp	r0, #1
   105ee:	d00b      	beq.n	10608 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
   105f0:	f240 6127 	movw	r1, #1575	; 0x627
   105f4:	203e      	movs	r0, #62	; 0x3e
   105f6:	f7f4 fb3f 	bl	4c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   105fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   105fe:	f102 0128 	add.w	r1, r2, #40	; 0x28
   10602:	4610      	mov	r0, r2
   10604:	f7fa bf92 	b.w	b52c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
   10608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1060c:	f102 0129 	add.w	r1, r2, #41	; 0x29
   10610:	4610      	mov	r0, r2
   10612:	f7fa bf75 	b.w	b500 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>

00010616 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   10616:	b570      	push	{r4, r5, r6, lr}
   10618:	4605      	mov	r5, r0
   1061a:	4614      	mov	r4, r2
   1061c:	4608      	mov	r0, r1
   1061e:	f7ff ffd0 	bl	105c2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10622:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   10626:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
   1062a:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
   1062e:	4620      	mov	r0, r4
   10630:	f7ff ffc7 	bl	105c2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10634:	4428      	add	r0, r5
   10636:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1063a:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   1063e:	fbb0 f5f1 	udiv	r5, r0, r1
   10642:	4620      	mov	r0, r4
   10644:	f7ff ffaf 	bl	105a6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   10648:	4428      	add	r0, r5
   1064a:	1d40      	adds	r0, r0, #5
   1064c:	bd70      	pop	{r4, r5, r6, pc}

0001064e <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   1064e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10652:	4607      	mov	r7, r0
   10654:	461d      	mov	r5, r3
   10656:	460e      	mov	r6, r1
   10658:	4614      	mov	r4, r2
   1065a:	4610      	mov	r0, r2
   1065c:	f7ff ffb1 	bl	105c2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10660:	eb07 0147 	add.w	r1, r7, r7, lsl #1
   10664:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
   10668:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   1066c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   10670:	2e02      	cmp	r6, #2
   10672:	d00e      	beq.n	10692 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
   10674:	f240 52dc 	movw	r2, #1500	; 0x5dc
   10678:	4411      	add	r1, r2
   1067a:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
   1067e:	fbb1 f6f0 	udiv	r6, r1, r0
   10682:	4620      	mov	r0, r4
   10684:	f7ff ff8f 	bl	105a6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   10688:	4430      	add	r0, r6
   1068a:	4428      	add	r0, r5
   1068c:	1d40      	adds	r0, r0, #5
   1068e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10692:	4602      	mov	r2, r0
   10694:	e7f0      	b.n	10678 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

00010696 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   10696:	b510      	push	{r4, lr}
   10698:	4604      	mov	r4, r0
   1069a:	4608      	mov	r0, r1
   1069c:	f7ff ff91 	bl	105c2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   106a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   106a4:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   106a8:	fbb0 f0f1 	udiv	r0, r0, r1
   106ac:	1a20      	subs	r0, r4, r0
   106ae:	1e80      	subs	r0, r0, #2
   106b0:	bd10      	pop	{r4, pc}

000106b2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   106b2:	b510      	push	{r4, lr}
   106b4:	4604      	mov	r4, r0
   106b6:	4608      	mov	r0, r1
   106b8:	f7ff ff83 	bl	105c2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   106bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   106c0:	fbb0 f0f1 	udiv	r0, r0, r1
   106c4:	1a20      	subs	r0, r4, r0
   106c6:	bd10      	pop	{r4, pc}

000106c8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   106c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   106cc:	2902      	cmp	r1, #2
   106ce:	d008      	beq.n	106e2 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
   106d0:	f240 51dc 	movw	r1, #1500	; 0x5dc
   106d4:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   106d8:	fbb1 f1f2 	udiv	r1, r1, r2
   106dc:	4408      	add	r0, r1
   106de:	1e80      	subs	r0, r0, #2
   106e0:	4770      	bx	lr
   106e2:	4611      	mov	r1, r2
   106e4:	e7f6      	b.n	106d4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

000106e6 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   106e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   106ea:	2902      	cmp	r1, #2
   106ec:	d007      	beq.n	106fe <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
   106ee:	f240 51dc 	movw	r1, #1500	; 0x5dc
   106f2:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   106f6:	fbb1 f1f2 	udiv	r1, r1, r2
   106fa:	4408      	add	r0, r1
   106fc:	4770      	bx	lr
   106fe:	4611      	mov	r1, r2
   10700:	e7f7      	b.n	106f2 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
   10702:	080c      	.short	0x080c
   10704:	010d1702 	.word	0x010d1702
   10708:	09090201 	.word	0x09090201
   1070c:	02060101 	.word	0x02060101
   10710:	03181809 	.word	0x03181809
   10714:	09090101 	.word	0x09090101
   10718:	00050303 	.word	0x00050303
   1071c:	00000000 	.word	0x00000000

00010720 <hci_init>:
	}
}
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
   10720:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   10722:	4d45      	ldr	r5, [pc, #276]	; (10838 <hci_init+0x118>)
   10724:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   10728:	6899      	ldr	r1, [r3, #8]
   1072a:	f011 0101 	ands.w	r1, r1, #1
{
   1072e:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   10730:	d121      	bne.n	10776 <hci_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   10732:	aa03      	add	r2, sp, #12
   10734:	f640 4003 	movw	r0, #3075	; 0xc03
   10738:	f006 fcbc 	bl	170b4 <bt_hci_cmd_send_sync>
		if (err) {
   1073c:	4604      	mov	r4, r0
   1073e:	2800      	cmp	r0, #0
   10740:	d176      	bne.n	10830 <hci_init+0x110>
		hci_reset_complete(rsp);
   10742:	9b03      	ldr	r3, [sp, #12]
	uint8_t status = buf->data[0];
   10744:	689b      	ldr	r3, [r3, #8]
	if (status) {
   10746:	781b      	ldrb	r3, [r3, #0]
   10748:	b993      	cbnz	r3, 10770 <hci_init+0x50>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1074a:	f3bf 8f5b 	dmb	ish
   1074e:	462b      	mov	r3, r5
   10750:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   10754:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   10758:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1075c:	f3bf 8f5b 	dmb	ish
   10760:	e853 1f00 	ldrex	r1, [r3]
   10764:	e843 2000 	strex	r0, r2, [r3]
   10768:	2800      	cmp	r0, #0
   1076a:	d1f9      	bne.n	10760 <hci_init+0x40>
   1076c:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   10770:	9803      	ldr	r0, [sp, #12]
   10772:	f009 fdc7 	bl	1a304 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   10776:	aa03      	add	r2, sp, #12
   10778:	2100      	movs	r1, #0
   1077a:	f241 0003 	movw	r0, #4099	; 0x1003
   1077e:	f006 fc99 	bl	170b4 <bt_hci_cmd_send_sync>
	if (err) {
   10782:	4604      	mov	r4, r0
   10784:	2800      	cmp	r0, #0
   10786:	d153      	bne.n	10830 <hci_init+0x110>
	read_local_features_complete(rsp);
   10788:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   1078a:	482c      	ldr	r0, [pc, #176]	; (1083c <hci_init+0x11c>)
   1078c:	6899      	ldr	r1, [r3, #8]
   1078e:	2208      	movs	r2, #8
   10790:	3101      	adds	r1, #1
   10792:	f011 fbde 	bl	21f52 <memcpy>
	net_buf_unref(rsp);
   10796:	9803      	ldr	r0, [sp, #12]
   10798:	f009 fdb4 	bl	1a304 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   1079c:	4621      	mov	r1, r4
   1079e:	aa03      	add	r2, sp, #12
   107a0:	f241 0001 	movw	r0, #4097	; 0x1001
   107a4:	f006 fc86 	bl	170b4 <bt_hci_cmd_send_sync>
	if (err) {
   107a8:	4604      	mov	r4, r0
   107aa:	2800      	cmp	r0, #0
   107ac:	d140      	bne.n	10830 <hci_init+0x110>
	read_local_ver_complete(rsp);
   107ae:	9803      	ldr	r0, [sp, #12]
   107b0:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   107b2:	785a      	ldrb	r2, [r3, #1]
   107b4:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   107b8:	78d9      	ldrb	r1, [r3, #3]
   107ba:	789a      	ldrb	r2, [r3, #2]
   107bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   107c0:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   107c4:	791a      	ldrb	r2, [r3, #4]
   107c6:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   107ca:	7a19      	ldrb	r1, [r3, #8]
   107cc:	79da      	ldrb	r2, [r3, #7]
   107ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   107d2:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   107d6:	795a      	ldrb	r2, [r3, #5]
   107d8:	799b      	ldrb	r3, [r3, #6]
   107da:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   107de:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   107e2:	f009 fd8f 	bl	1a304 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   107e6:	4621      	mov	r1, r4
   107e8:	aa03      	add	r2, sp, #12
   107ea:	f241 0002 	movw	r0, #4098	; 0x1002
   107ee:	f006 fc61 	bl	170b4 <bt_hci_cmd_send_sync>
	if (err) {
   107f2:	4604      	mov	r4, r0
   107f4:	b9e0      	cbnz	r0, 10830 <hci_init+0x110>
	read_supported_commands_complete(rsp);
   107f6:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
   107f8:	4811      	ldr	r0, [pc, #68]	; (10840 <hci_init+0x120>)
   107fa:	6899      	ldr	r1, [r3, #8]
   107fc:	2240      	movs	r2, #64	; 0x40
   107fe:	3101      	adds	r1, #1
   10800:	f011 fba7 	bl	21f52 <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
   10804:	480e      	ldr	r0, [pc, #56]	; (10840 <hci_init+0x120>)
   10806:	f012 fddd 	bl	233c4 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
   1080a:	9803      	ldr	r0, [sp, #12]
   1080c:	f009 fd7a 	bl	1a304 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   10810:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   10814:	065a      	lsls	r2, r3, #25
   10816:	d41b      	bmi.n	10850 <hci_init+0x130>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   10818:	4b0a      	ldr	r3, [pc, #40]	; (10844 <hci_init+0x124>)
   1081a:	490b      	ldr	r1, [pc, #44]	; (10848 <hci_init+0x128>)
		BT_ERR("Non-LE capable controller detected!");
   1081c:	480b      	ldr	r0, [pc, #44]	; (1084c <hci_init+0x12c>)
   1081e:	1ac9      	subs	r1, r1, r3
   10820:	08c9      	lsrs	r1, r1, #3
   10822:	0189      	lsls	r1, r1, #6
   10824:	f041 0101 	orr.w	r1, r1, #1
   10828:	f011 f892 	bl	21950 <log_0>
		return -ENODEV;
   1082c:	f06f 0412 	mvn.w	r4, #18
	if (err) {
		return err;
	}

	return 0;
}
   10830:	4620      	mov	r0, r4
   10832:	b008      	add	sp, #32
   10834:	bd70      	pop	{r4, r5, r6, pc}
   10836:	bf00      	nop
   10838:	200002a8 	.word	0x200002a8
   1083c:	20000318 	.word	0x20000318
   10840:	20000320 	.word	0x20000320
   10844:	00025224 	.word	0x00025224
   10848:	00025264 	.word	0x00025264
   1084c:	00027057 	.word	0x00027057
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   10850:	4621      	mov	r1, r4
   10852:	aa03      	add	r2, sp, #12
   10854:	f242 0003 	movw	r0, #8195	; 0x2003
   10858:	f006 fc2c 	bl	170b4 <bt_hci_cmd_send_sync>
	if (err) {
   1085c:	4604      	mov	r4, r0
   1085e:	2800      	cmp	r0, #0
   10860:	d1e6      	bne.n	10830 <hci_init+0x110>
	read_le_features_complete(rsp);
   10862:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   10864:	48c0      	ldr	r0, [pc, #768]	; (10b68 <hci_init+0x448>)
   10866:	6899      	ldr	r1, [r3, #8]
   10868:	2208      	movs	r2, #8
   1086a:	3101      	adds	r1, #1
   1086c:	f011 fb71 	bl	21f52 <memcpy>
	net_buf_unref(rsp);
   10870:	9803      	ldr	r0, [sp, #12]
   10872:	f009 fd47 	bl	1a304 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   10876:	4621      	mov	r1, r4
   10878:	aa03      	add	r2, sp, #12
   1087a:	f242 0002 	movw	r0, #8194	; 0x2002
   1087e:	f006 fc19 	bl	170b4 <bt_hci_cmd_send_sync>
		if (err) {
   10882:	4604      	mov	r4, r0
   10884:	2800      	cmp	r0, #0
   10886:	d1d3      	bne.n	10830 <hci_init+0x110>
		le_read_buffer_size_complete(rsp);
   10888:	9b03      	ldr	r3, [sp, #12]
   1088a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   1088c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   10890:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   10894:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   10896:	b121      	cbz	r1, 108a2 <hci_init+0x182>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   10898:	78da      	ldrb	r2, [r3, #3]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   1089a:	48b4      	ldr	r0, [pc, #720]	; (10b6c <hci_init+0x44c>)
   1089c:	4611      	mov	r1, r2
   1089e:	f014 f995 	bl	24bcc <z_impl_k_sem_init>
		net_buf_unref(rsp);
   108a2:	9803      	ldr	r0, [sp, #12]
   108a4:	f009 fd2e 	bl	1a304 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   108a8:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   108ac:	f016 0620 	ands.w	r6, r6, #32
   108b0:	f000 80eb 	beq.w	10a8a <hci_init+0x36a>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   108b4:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   108b8:	071b      	lsls	r3, r3, #28
   108ba:	d511      	bpl.n	108e0 <hci_init+0x1c0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   108bc:	aa03      	add	r2, sp, #12
   108be:	2100      	movs	r1, #0
   108c0:	f242 001c 	movw	r0, #8220	; 0x201c
   108c4:	f006 fbf6 	bl	170b4 <bt_hci_cmd_send_sync>
		if (err) {
   108c8:	4604      	mov	r4, r0
   108ca:	2800      	cmp	r0, #0
   108cc:	d1b0      	bne.n	10830 <hci_init+0x110>
		le_read_supp_states_complete(rsp);
   108ce:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   108d0:	6883      	ldr	r3, [r0, #8]
   108d2:	f853 2f01 	ldr.w	r2, [r3, #1]!
   108d6:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   108d8:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   108dc:	f009 fd12 	bl	1a304 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   108e0:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   108e4:	069e      	lsls	r6, r3, #26
   108e6:	d524      	bpl.n	10932 <hci_init+0x212>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   108e8:	a902      	add	r1, sp, #8
   108ea:	f10d 0006 	add.w	r0, sp, #6
   108ee:	f006 fc59 	bl	171a4 <hci_le_read_max_data_len>
		if (err) {
   108f2:	4604      	mov	r4, r0
   108f4:	2800      	cmp	r0, #0
   108f6:	d19b      	bne.n	10830 <hci_init+0x110>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   108f8:	2104      	movs	r1, #4
   108fa:	f242 0024 	movw	r0, #8228	; 0x2024
   108fe:	f006 fa7d 	bl	16dfc <bt_hci_cmd_create>
		if (!buf) {
   10902:	4606      	mov	r6, r0
   10904:	2800      	cmp	r0, #0
   10906:	f000 80c7 	beq.w	10a98 <hci_init+0x378>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   1090a:	2104      	movs	r1, #4
   1090c:	3008      	adds	r0, #8
   1090e:	f013 fb4e 	bl	23fae <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   10912:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   10916:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   10918:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1091c:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1091e:	4622      	mov	r2, r4
   10920:	4631      	mov	r1, r6
   10922:	f242 0024 	movw	r0, #8228	; 0x2024
   10926:	f006 fbc5 	bl	170b4 <bt_hci_cmd_send_sync>
		if (err) {
   1092a:	4604      	mov	r4, r0
   1092c:	2800      	cmp	r0, #0
   1092e:	f47f af7f 	bne.w	10830 <hci_init+0x110>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   10932:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   10936:	065c      	lsls	r4, r3, #25
   10938:	d510      	bpl.n	1095c <hci_init+0x23c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   1093a:	aa03      	add	r2, sp, #12
   1093c:	2100      	movs	r1, #0
   1093e:	f242 002a 	movw	r0, #8234	; 0x202a
   10942:	f006 fbb7 	bl	170b4 <bt_hci_cmd_send_sync>
		if (err) {
   10946:	4604      	mov	r4, r0
   10948:	2800      	cmp	r0, #0
   1094a:	f47f af71 	bne.w	10830 <hci_init+0x110>
		le_read_resolving_list_size_complete(rsp);
   1094e:	9803      	ldr	r0, [sp, #12]
	bt_dev.le.rl_size = rp->rl_size;
   10950:	6883      	ldr	r3, [r0, #8]
   10952:	785b      	ldrb	r3, [r3, #1]
   10954:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   10958:	f009 fcd4 	bl	1a304 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1095c:	2108      	movs	r1, #8
   1095e:	f242 0001 	movw	r0, #8193	; 0x2001
   10962:	f006 fa4b 	bl	16dfc <bt_hci_cmd_create>
	if (!buf) {
   10966:	4604      	mov	r4, r0
   10968:	2800      	cmp	r0, #0
   1096a:	f000 8095 	beq.w	10a98 <hci_init+0x378>
   1096e:	2108      	movs	r1, #8
   10970:	4408      	add	r0, r1
   10972:	f013 fb1c 	bl	23fae <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   10976:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   1097a:	f011 0f40 	tst.w	r1, #64	; 0x40
   1097e:	4602      	mov	r2, r0
   10980:	f240 2302 	movw	r3, #514	; 0x202
   10984:	bf08      	it	eq
   10986:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   10988:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   1098a:	bf4c      	ite	mi
   1098c:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   10990:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   10994:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   10996:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   1099a:	bf48      	it	mi
   1099c:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   109a0:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   109a4:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   109a8:	bf18      	it	ne
   109aa:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   109ae:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   109b2:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   109b4:	bf48      	it	mi
   109b6:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   109ba:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   109bc:	bf08      	it	eq
   109be:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   109c2:	2100      	movs	r1, #0
   109c4:	f012 fbfb 	bl	231be <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   109c8:	4621      	mov	r1, r4
   109ca:	2200      	movs	r2, #0
   109cc:	f242 0001 	movw	r0, #8193	; 0x2001
   109d0:	f006 fb70 	bl	170b4 <bt_hci_cmd_send_sync>
	if (err) {
   109d4:	4604      	mov	r4, r0
   109d6:	2800      	cmp	r0, #0
   109d8:	f47f af2a 	bne.w	10830 <hci_init+0x110>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   109dc:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   109e0:	0698      	lsls	r0, r3, #26
   109e2:	d41e      	bmi.n	10a22 <hci_init+0x302>
	if (bt_dev.le.acl_mtu) {
   109e4:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
   109e8:	b9d9      	cbnz	r1, 10a22 <hci_init+0x302>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   109ea:	aa03      	add	r2, sp, #12
   109ec:	f241 0005 	movw	r0, #4101	; 0x1005
   109f0:	f006 fb60 	bl	170b4 <bt_hci_cmd_send_sync>
	if (err) {
   109f4:	4604      	mov	r4, r0
   109f6:	2800      	cmp	r0, #0
   109f8:	f47f af1a 	bne.w	10830 <hci_init+0x110>
	if (bt_dev.le.acl_mtu) {
   109fc:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   10a00:	b963      	cbnz	r3, 10a1c <hci_init+0x2fc>
	read_buffer_size_complete(rsp);
   10a02:	9b03      	ldr	r3, [sp, #12]
   10a04:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   10a06:	785a      	ldrb	r2, [r3, #1]
   10a08:	7899      	ldrb	r1, [r3, #2]
   10a0a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   10a0e:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   10a12:	889a      	ldrh	r2, [r3, #4]
   10a14:	4855      	ldr	r0, [pc, #340]	; (10b6c <hci_init+0x44c>)
   10a16:	4611      	mov	r1, r2
   10a18:	f014 f8d8 	bl	24bcc <z_impl_k_sem_init>
	net_buf_unref(rsp);
   10a1c:	9803      	ldr	r0, [sp, #12]
   10a1e:	f009 fc71 	bl	1a304 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   10a22:	2108      	movs	r1, #8
   10a24:	f640 4001 	movw	r0, #3073	; 0xc01
   10a28:	f006 f9e8 	bl	16dfc <bt_hci_cmd_create>
	if (!buf) {
   10a2c:	4604      	mov	r4, r0
   10a2e:	b398      	cbz	r0, 10a98 <hci_init+0x378>
   10a30:	2108      	movs	r1, #8
   10a32:	4408      	add	r0, r1
   10a34:	f013 fabb 	bl	23fae <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   10a38:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   10a3c:	07d9      	lsls	r1, r3, #31
   10a3e:	4602      	mov	r2, r0
   10a40:	d53f      	bpl.n	10ac2 <hci_init+0x3a2>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   10a42:	a147      	add	r1, pc, #284	; (adr r1, 10b60 <hci_init+0x440>)
   10a44:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
   10a48:	f012 fbb9 	bl	231be <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   10a4c:	4621      	mov	r1, r4
   10a4e:	2200      	movs	r2, #0
   10a50:	f640 4001 	movw	r0, #3073	; 0xc01
   10a54:	f006 fb2e 	bl	170b4 <bt_hci_cmd_send_sync>
	if (err) {
   10a58:	4604      	mov	r4, r0
   10a5a:	2800      	cmp	r0, #0
   10a5c:	f47f aee8 	bne.w	10830 <hci_init+0x110>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   10a60:	4601      	mov	r1, r0
   10a62:	aa02      	add	r2, sp, #8
   10a64:	f64f 4001 	movw	r0, #64513	; 0xfc01
   10a68:	f006 fb24 	bl	170b4 <bt_hci_cmd_send_sync>
	if (err) {
   10a6c:	4c40      	ldr	r4, [pc, #256]	; (10b70 <hci_init+0x450>)
   10a6e:	4b41      	ldr	r3, [pc, #260]	; (10b74 <hci_init+0x454>)
   10a70:	1ae4      	subs	r4, r4, r3
   10a72:	08e4      	lsrs	r4, r4, #3
   10a74:	01a4      	lsls	r4, r4, #6
   10a76:	b340      	cbz	r0, 10aca <hci_init+0x3aa>
		BT_WARN("Vendor HCI extensions not available");
   10a78:	483f      	ldr	r0, [pc, #252]	; (10b78 <hci_init+0x458>)
   10a7a:	f044 0102 	orr.w	r1, r4, #2
			BT_WARN("Failed to read supported vendor features");
   10a7e:	f010 ff67 	bl	21950 <log_0>
	err = bt_id_init();
   10a82:	f007 fcf5 	bl	18470 <bt_id_init>
   10a86:	4604      	mov	r4, r0
	if (err) {
   10a88:	e6d2      	b.n	10830 <hci_init+0x110>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   10a8a:	2102      	movs	r1, #2
   10a8c:	f640 406d 	movw	r0, #3181	; 0xc6d
   10a90:	f006 f9b4 	bl	16dfc <bt_hci_cmd_create>
		if (!buf) {
   10a94:	4604      	mov	r4, r0
   10a96:	b910      	cbnz	r0, 10a9e <hci_init+0x37e>
		return -ENOBUFS;
   10a98:	f06f 0468 	mvn.w	r4, #104	; 0x68
   10a9c:	e6c8      	b.n	10830 <hci_init+0x110>
   10a9e:	2102      	movs	r1, #2
   10aa0:	3008      	adds	r0, #8
   10aa2:	f013 fa84 	bl	23fae <net_buf_simple_add>
		cp_le->le = 0x01;
   10aa6:	2301      	movs	r3, #1
   10aa8:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   10aaa:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   10aac:	4621      	mov	r1, r4
   10aae:	4632      	mov	r2, r6
   10ab0:	f640 406d 	movw	r0, #3181	; 0xc6d
   10ab4:	f006 fafe 	bl	170b4 <bt_hci_cmd_send_sync>
		if (err) {
   10ab8:	4604      	mov	r4, r0
   10aba:	2800      	cmp	r0, #0
   10abc:	f43f aefa 	beq.w	108b4 <hci_init+0x194>
   10ac0:	e6b6      	b.n	10830 <hci_init+0x110>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   10ac2:	482e      	ldr	r0, [pc, #184]	; (10b7c <hci_init+0x45c>)
   10ac4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   10ac8:	e7be      	b.n	10a48 <hci_init+0x328>
	rp.info = (void *)rsp->data;
   10aca:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
   10acc:	482c      	ldr	r0, [pc, #176]	; (10b80 <hci_init+0x460>)
	rp.info = (void *)rsp->data;
   10ace:	689e      	ldr	r6, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
   10ad0:	f8b6 2001 	ldrh.w	r2, [r6, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   10ad4:	2a03      	cmp	r2, #3
		return plat_str[platform];
   10ad6:	bf96      	itet	ls
   10ad8:	492a      	ldrls	r1, [pc, #168]	; (10b84 <hci_init+0x464>)
	return "unknown";
   10ada:	492b      	ldrhi	r1, [pc, #172]	; (10b88 <hci_init+0x468>)
		return plat_str[platform];
   10adc:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
   10ae0:	f044 0303 	orr.w	r3, r4, #3
   10ae4:	f010 ff55 	bl	21992 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   10ae8:	f8b6 1001 	ldrh.w	r1, [r6, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
   10aec:	f8b6 2003 	ldrh.w	r2, [r6, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   10af0:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
   10af2:	f044 0303 	orr.w	r3, r4, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   10af6:	d12e      	bne.n	10b56 <hci_init+0x436>
	if (variant < ARRAY_SIZE(nordic_str)) {
   10af8:	2a03      	cmp	r2, #3
   10afa:	d82c      	bhi.n	10b56 <hci_init+0x436>
		return nordic_str[variant];
   10afc:	4923      	ldr	r1, [pc, #140]	; (10b8c <hci_init+0x46c>)
   10afe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
   10b02:	4823      	ldr	r0, [pc, #140]	; (10b90 <hci_init+0x470>)
   10b04:	f010 ff45 	bl	21992 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   10b08:	7972      	ldrb	r2, [r6, #5]
   10b0a:	4822      	ldr	r0, [pc, #136]	; (10b94 <hci_init+0x474>)
	if (variant < ARRAY_SIZE(var_str)) {
   10b0c:	2a03      	cmp	r2, #3
		return var_str[variant];
   10b0e:	bf96      	itet	ls
   10b10:	4921      	ldrls	r1, [pc, #132]	; (10b98 <hci_init+0x478>)
	return "unknown";
   10b12:	491d      	ldrhi	r1, [pc, #116]	; (10b88 <hci_init+0x468>)
		return var_str[variant];
   10b14:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   10b18:	e9cd 1203 	strd	r1, r2, [sp, #12]
   10b1c:	79b2      	ldrb	r2, [r6, #6]
   10b1e:	9205      	str	r2, [sp, #20]
   10b20:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   10b24:	9206      	str	r2, [sp, #24]
   10b26:	f8d6 2009 	ldr.w	r2, [r6, #9]
   10b2a:	9207      	str	r2, [sp, #28]
   10b2c:	f044 0303 	orr.w	r3, r4, #3
   10b30:	2205      	movs	r2, #5
   10b32:	a903      	add	r1, sp, #12
   10b34:	f010 ff62 	bl	219fc <log_n>
	net_buf_unref(rsp);
   10b38:	9802      	ldr	r0, [sp, #8]
   10b3a:	f009 fbe3 	bl	1a304 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   10b3e:	aa02      	add	r2, sp, #8
   10b40:	2100      	movs	r1, #0
   10b42:	f64f 4002 	movw	r0, #64514	; 0xfc02
   10b46:	f006 fab5 	bl	170b4 <bt_hci_cmd_send_sync>
	if (err) {
   10b4a:	4606      	mov	r6, r0
   10b4c:	b340      	cbz	r0, 10ba0 <hci_init+0x480>
		BT_WARN("Failed to read supported vendor commands");
   10b4e:	4813      	ldr	r0, [pc, #76]	; (10b9c <hci_init+0x47c>)
   10b50:	f044 0102 	orr.w	r1, r4, #2
   10b54:	e793      	b.n	10a7e <hci_init+0x35e>
		return "unknown";
   10b56:	490c      	ldr	r1, [pc, #48]	; (10b88 <hci_init+0x468>)
   10b58:	e7d3      	b.n	10b02 <hci_init+0x3e2>
   10b5a:	bf00      	nop
   10b5c:	f3af 8000 	nop.w
   10b60:	02008890 	.word	0x02008890
   10b64:	20008000 	.word	0x20008000
   10b68:	20000378 	.word	0x20000378
   10b6c:	200003a8 	.word	0x200003a8
   10b70:	00025264 	.word	0x00025264
   10b74:	00025224 	.word	0x00025224
   10b78:	0002707b 	.word	0x0002707b
   10b7c:	02008810 	.word	0x02008810
   10b80:	0002709f 	.word	0x0002709f
   10b84:	00025930 	.word	0x00025930
   10b88:	00026ceb 	.word	0x00026ceb
   10b8c:	000258f0 	.word	0x000258f0
   10b90:	000270b8 	.word	0x000270b8
   10b94:	000270d0 	.word	0x000270d0
   10b98:	00025968 	.word	0x00025968
   10b9c:	000270fd 	.word	0x000270fd
	rp.cmds = (void *)rsp->data;
   10ba0:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   10ba2:	4812      	ldr	r0, [pc, #72]	; (10bec <hci_init+0x4cc>)
   10ba4:	6899      	ldr	r1, [r3, #8]
   10ba6:	2202      	movs	r2, #2
   10ba8:	3101      	adds	r1, #1
   10baa:	f011 f9d2 	bl	21f52 <memcpy>
	net_buf_unref(rsp);
   10bae:	9802      	ldr	r0, [sp, #8]
   10bb0:	f009 fba8 	bl	1a304 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   10bb4:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   10bb8:	075b      	lsls	r3, r3, #29
   10bba:	f57f af62 	bpl.w	10a82 <hci_init+0x362>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   10bbe:	aa02      	add	r2, sp, #8
   10bc0:	4631      	mov	r1, r6
   10bc2:	f64f 4003 	movw	r0, #64515	; 0xfc03
   10bc6:	f006 fa75 	bl	170b4 <bt_hci_cmd_send_sync>
		if (err) {
   10bca:	b118      	cbz	r0, 10bd4 <hci_init+0x4b4>
			BT_WARN("Failed to read supported vendor features");
   10bcc:	4808      	ldr	r0, [pc, #32]	; (10bf0 <hci_init+0x4d0>)
   10bce:	f044 0102 	orr.w	r1, r4, #2
   10bd2:	e754      	b.n	10a7e <hci_init+0x35e>
		rp.feat = (void *)rsp->data;
   10bd4:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   10bd6:	4807      	ldr	r0, [pc, #28]	; (10bf4 <hci_init+0x4d4>)
   10bd8:	6899      	ldr	r1, [r3, #8]
   10bda:	2201      	movs	r2, #1
   10bdc:	4411      	add	r1, r2
   10bde:	f011 f9b8 	bl	21f52 <memcpy>
		net_buf_unref(rsp);
   10be2:	9802      	ldr	r0, [sp, #8]
   10be4:	f009 fb8e 	bl	1a304 <net_buf_unref>
   10be8:	e74b      	b.n	10a82 <hci_init+0x362>
   10bea:	bf00      	nop
   10bec:	20000361 	.word	0x20000361
   10bf0:	00027126 	.word	0x00027126
   10bf4:	20000360 	.word	0x20000360

00010bf8 <disconnected>:
	}
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
	printk("Disconnected (reason 0x%02x)\n", reason);
   10bf8:	4801      	ldr	r0, [pc, #4]	; (10c00 <disconnected+0x8>)
   10bfa:	f011 b8ff 	b.w	21dfc <printk>
   10bfe:	bf00      	nop
   10c00:	00025d3f 	.word	0x00025d3f

00010c04 <connected>:
	if (err) {
   10c04:	b111      	cbz	r1, 10c0c <connected+0x8>
		printk("Connection failed (err 0x%02x)\n", err);
   10c06:	4803      	ldr	r0, [pc, #12]	; (10c14 <connected+0x10>)
   10c08:	f011 b8f8 	b.w	21dfc <printk>
		printk("Connected\n");
   10c0c:	4802      	ldr	r0, [pc, #8]	; (10c18 <connected+0x14>)
   10c0e:	f011 b8f5 	b.w	21dfc <printk>
   10c12:	bf00      	nop
   10c14:	00025d5d 	.word	0x00025d5d
   10c18:	00025d7d 	.word	0x00025d7d

00010c1c <auth_cancel>:

	printk("Advertising successfully started\n");
}

static void auth_cancel(struct bt_conn *conn)
{
   10c1c:	b530      	push	{r4, r5, lr}
   10c1e:	b093      	sub	sp, #76	; 0x4c
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10c20:	f012 f80b 	bl	22c3a <bt_conn_get_dst>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   10c24:	7803      	ldrb	r3, [r0, #0]
   10c26:	4604      	mov	r4, r0
   10c28:	ad07      	add	r5, sp, #28
   10c2a:	2b03      	cmp	r3, #3
   10c2c:	d824      	bhi.n	10c78 <auth_cancel+0x5c>
   10c2e:	e8df f003 	tbb	[pc, r3]
   10c32:	1d02      	.short	0x1d02
   10c34:	211f      	.short	0x211f
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   10c36:	4913      	ldr	r1, [pc, #76]	; (10c84 <auth_cancel+0x68>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   10c38:	4628      	mov	r0, r5
   10c3a:	f011 f92a 	bl	21e92 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   10c3e:	79a3      	ldrb	r3, [r4, #6]
   10c40:	9505      	str	r5, [sp, #20]
   10c42:	7862      	ldrb	r2, [r4, #1]
   10c44:	9204      	str	r2, [sp, #16]
   10c46:	78a2      	ldrb	r2, [r4, #2]
   10c48:	9203      	str	r2, [sp, #12]
   10c4a:	78e2      	ldrb	r2, [r4, #3]
   10c4c:	9202      	str	r2, [sp, #8]
   10c4e:	7922      	ldrb	r2, [r4, #4]
   10c50:	9201      	str	r2, [sp, #4]
   10c52:	7962      	ldrb	r2, [r4, #5]
   10c54:	9200      	str	r2, [sp, #0]
   10c56:	211e      	movs	r1, #30
   10c58:	4a0b      	ldr	r2, [pc, #44]	; (10c88 <auth_cancel+0x6c>)
   10c5a:	a80a      	add	r0, sp, #40	; 0x28
   10c5c:	f011 f8db 	bl	21e16 <snprintk>

	printk("Pairing cancelled: %s\n", addr);
   10c60:	480a      	ldr	r0, [pc, #40]	; (10c8c <auth_cancel+0x70>)
   10c62:	a90a      	add	r1, sp, #40	; 0x28
   10c64:	f011 f8ca 	bl	21dfc <printk>
}
   10c68:	b013      	add	sp, #76	; 0x4c
   10c6a:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   10c6c:	4908      	ldr	r1, [pc, #32]	; (10c90 <auth_cancel+0x74>)
   10c6e:	e7e3      	b.n	10c38 <auth_cancel+0x1c>
		strcpy(type, "public-id");
   10c70:	4908      	ldr	r1, [pc, #32]	; (10c94 <auth_cancel+0x78>)
   10c72:	e7e1      	b.n	10c38 <auth_cancel+0x1c>
		strcpy(type, "random-id");
   10c74:	4908      	ldr	r1, [pc, #32]	; (10c98 <auth_cancel+0x7c>)
   10c76:	e7df      	b.n	10c38 <auth_cancel+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   10c78:	4a08      	ldr	r2, [pc, #32]	; (10c9c <auth_cancel+0x80>)
   10c7a:	210a      	movs	r1, #10
   10c7c:	4628      	mov	r0, r5
   10c7e:	f011 f8ca 	bl	21e16 <snprintk>
		break;
   10c82:	e7dc      	b.n	10c3e <auth_cancel+0x22>
   10c84:	00025d88 	.word	0x00025d88
   10c88:	00025daa 	.word	0x00025daa
   10c8c:	00025dcd 	.word	0x00025dcd
   10c90:	00025d8f 	.word	0x00025d8f
   10c94:	00025d96 	.word	0x00025d96
   10c98:	00025da0 	.word	0x00025da0
   10c9c:	000278f5 	.word	0x000278f5

00010ca0 <main>:

	bt_hrs_notify(heartrate);
}

void main(void)
{
   10ca0:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = bt_enable(NULL);
   10ca2:	2000      	movs	r0, #0
{
   10ca4:	b088      	sub	sp, #32
	err = bt_enable(NULL);
   10ca6:	f006 fde3 	bl	17870 <bt_enable>
	if (err) {
   10caa:	4606      	mov	r6, r0
   10cac:	b128      	cbz	r0, 10cba <main+0x1a>
		printk("Bluetooth init failed (err %d)\n", err);
   10cae:	4601      	mov	r1, r0
   10cb0:	481d      	ldr	r0, [pc, #116]	; (10d28 <main+0x88>)
   10cb2:	f011 f8a3 	bl	21dfc <printk>
		hrs_notify();

		/* Battery level simulation */
		bas_notify();
	}
}
   10cb6:	b008      	add	sp, #32
   10cb8:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
   10cba:	4d1c      	ldr	r5, [pc, #112]	; (10d2c <main+0x8c>)
	printk("Bluetooth initialized\n");
   10cbc:	481c      	ldr	r0, [pc, #112]	; (10d30 <main+0x90>)
   10cbe:	f011 f89d 	bl	21dfc <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
   10cc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   10cc4:	ac03      	add	r4, sp, #12
   10cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10cc8:	682b      	ldr	r3, [r5, #0]
   10cca:	6023      	str	r3, [r4, #0]
   10ccc:	4919      	ldr	r1, [pc, #100]	; (10d34 <main+0x94>)
   10cce:	9600      	str	r6, [sp, #0]
   10cd0:	4633      	mov	r3, r6
   10cd2:	2202      	movs	r2, #2
   10cd4:	a803      	add	r0, sp, #12
   10cd6:	f002 fc5b 	bl	13590 <bt_le_adv_start>
	if (err) {
   10cda:	4601      	mov	r1, r0
   10cdc:	b300      	cbz	r0, 10d20 <main+0x80>
		printk("Advertising failed to start (err %d)\n", err);
   10cde:	4816      	ldr	r0, [pc, #88]	; (10d38 <main+0x98>)
   10ce0:	f011 f88c 	bl	21dfc <printk>
	bt_conn_auth_cb_register(&auth_cb_display);
   10ce4:	4815      	ldr	r0, [pc, #84]	; (10d3c <main+0x9c>)
	heartrate++;
   10ce6:	4c16      	ldr	r4, [pc, #88]	; (10d40 <main+0xa0>)
	bt_conn_auth_cb_register(&auth_cb_display);
   10ce8:	f004 fafc 	bl	152e4 <bt_conn_auth_cb_register>
   10cec:	4625      	mov	r5, r4
	return z_impl_k_sleep(timeout);
   10cee:	2100      	movs	r1, #0
   10cf0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10cf4:	f00c f846 	bl	1cd84 <z_impl_k_sleep>
	heartrate++;
   10cf8:	7823      	ldrb	r3, [r4, #0]
   10cfa:	3301      	adds	r3, #1
   10cfc:	b2db      	uxtb	r3, r3
	if (heartrate == 160U) {
   10cfe:	2ba0      	cmp	r3, #160	; 0xa0
		heartrate = 90U;
   10d00:	bf08      	it	eq
   10d02:	235a      	moveq	r3, #90	; 0x5a
   10d04:	7023      	strb	r3, [r4, #0]
	bt_hrs_notify(heartrate);
   10d06:	7828      	ldrb	r0, [r5, #0]
   10d08:	f000 fdfc 	bl	11904 <bt_hrs_notify>
	uint8_t battery_level = bt_bas_get_battery_level();
   10d0c:	f000 f906 	bl	10f1c <bt_bas_get_battery_level>
	battery_level--;
   10d10:	3801      	subs	r0, #1
		battery_level = 100U;
   10d12:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
	bt_bas_set_battery_level(battery_level);
   10d16:	bf08      	it	eq
   10d18:	2064      	moveq	r0, #100	; 0x64
   10d1a:	f000 f905 	bl	10f28 <bt_bas_set_battery_level>
	while (1) {
   10d1e:	e7e6      	b.n	10cee <main+0x4e>
	printk("Advertising successfully started\n");
   10d20:	4808      	ldr	r0, [pc, #32]	; (10d44 <main+0xa4>)
   10d22:	f011 f86b 	bl	21dfc <printk>
   10d26:	e7dd      	b.n	10ce4 <main+0x44>
   10d28:	00025de4 	.word	0x00025de4
   10d2c:	00025330 	.word	0x00025330
   10d30:	00025e04 	.word	0x00025e04
   10d34:	00025408 	.word	0x00025408
   10d38:	00025e1b 	.word	0x00025e1b
   10d3c:	20000418 	.word	0x20000418
   10d40:	200006ff 	.word	0x200006ff
   10d44:	00025e41 	.word	0x00025e41

00010d48 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   10d48:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   10d4a:	4e26      	ldr	r6, [pc, #152]	; (10de4 <tc_aes128_set_encrypt_key+0x9c>)
{
   10d4c:	4607      	mov	r7, r0
   10d4e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   10d50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   10d52:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   10d54:	ad01      	add	r5, sp, #4
   10d56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10d58:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10d5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   10d5c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   10d60:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   10d64:	4638      	mov	r0, r7
   10d66:	2f00      	cmp	r7, #0
   10d68:	d038      	beq.n	10ddc <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   10d6a:	2c00      	cmp	r4, #0
   10d6c:	d038      	beq.n	10de0 <tc_aes128_set_encrypt_key+0x98>
   10d6e:	1f38      	subs	r0, r7, #4
   10d70:	4621      	mov	r1, r4
   10d72:	4602      	mov	r2, r0
   10d74:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   10d76:	784b      	ldrb	r3, [r1, #1]
   10d78:	780d      	ldrb	r5, [r1, #0]
   10d7a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   10d7c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   10d80:	78cd      	ldrb	r5, [r1, #3]
   10d82:	432b      	orrs	r3, r5
   10d84:	788d      	ldrb	r5, [r1, #2]
   10d86:	3104      	adds	r1, #4
   10d88:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   10d8c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   10d8e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   10d92:	d1f0      	bne.n	10d76 <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   10d94:	4c14      	ldr	r4, [pc, #80]	; (10de8 <tc_aes128_set_encrypt_key+0xa0>)
   10d96:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   10d98:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   10d9a:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   10d9c:	d116      	bne.n	10dcc <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   10d9e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   10da2:	5ca5      	ldrb	r5, [r4, r2]
   10da4:	0e1a      	lsrs	r2, r3, #24
   10da6:	5ca2      	ldrb	r2, [r4, r2]
   10da8:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   10dac:	f3c3 2507 	ubfx	r5, r3, #8, #8
   10db0:	b2db      	uxtb	r3, r3
   10db2:	5d65      	ldrb	r5, [r4, r5]
   10db4:	5ce3      	ldrb	r3, [r4, r3]
   10db6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   10dba:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   10dbe:	ad0c      	add	r5, sp, #48	; 0x30
   10dc0:	f021 0303 	bic.w	r3, r1, #3
   10dc4:	442b      	add	r3, r5
   10dc6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   10dca:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   10dcc:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   10dd0:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   10dd2:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   10dd4:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   10dd6:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   10dd8:	d1de      	bne.n	10d98 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   10dda:	2001      	movs	r0, #1
}
   10ddc:	b00d      	add	sp, #52	; 0x34
   10dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   10de0:	4620      	mov	r0, r4
   10de2:	e7fb      	b.n	10ddc <tc_aes128_set_encrypt_key+0x94>
   10de4:	00025344 	.word	0x00025344
   10de8:	00025e63 	.word	0x00025e63

00010dec <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   10dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10df0:	4615      	mov	r5, r2
   10df2:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   10df4:	4606      	mov	r6, r0
   10df6:	2800      	cmp	r0, #0
   10df8:	d058      	beq.n	10eac <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   10dfa:	2900      	cmp	r1, #0
   10dfc:	d059      	beq.n	10eb2 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   10dfe:	2a00      	cmp	r2, #0
   10e00:	d059      	beq.n	10eb6 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   10e02:	2310      	movs	r3, #16
   10e04:	460a      	mov	r2, r1
   10e06:	4668      	mov	r0, sp
   10e08:	4619      	mov	r1, r3
   10e0a:	f011 f81b 	bl	21e44 <_copy>
	add_round_key(state, s->words);
   10e0e:	4629      	mov	r1, r5
   10e10:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   10e12:	4c2a      	ldr	r4, [pc, #168]	; (10ebc <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   10e14:	f00f f996 	bl	20144 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   10e18:	f105 0710 	add.w	r7, r5, #16
   10e1c:	46a1      	mov	r9, r4
   10e1e:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   10e20:	46e8      	mov	r8, sp
{
   10e22:	466a      	mov	r2, sp
   10e24:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   10e26:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   10e28:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   10e2a:	5c61      	ldrb	r1, [r4, r1]
   10e2c:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   10e30:	d1f9      	bne.n	10e26 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   10e32:	4668      	mov	r0, sp
   10e34:	f00f f9cb 	bl	201ce <shift_rows>
	mult_row_column(t, s);
   10e38:	4669      	mov	r1, sp
   10e3a:	a804      	add	r0, sp, #16
   10e3c:	f00f fa00 	bl	20240 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   10e40:	a901      	add	r1, sp, #4
   10e42:	a805      	add	r0, sp, #20
   10e44:	f00f f9fc 	bl	20240 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   10e48:	a902      	add	r1, sp, #8
   10e4a:	a806      	add	r0, sp, #24
   10e4c:	f00f f9f8 	bl	20240 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   10e50:	a903      	add	r1, sp, #12
   10e52:	a807      	add	r0, sp, #28
   10e54:	f00f f9f4 	bl	20240 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   10e58:	2310      	movs	r3, #16
   10e5a:	4619      	mov	r1, r3
   10e5c:	eb0d 0203 	add.w	r2, sp, r3
   10e60:	4668      	mov	r0, sp
   10e62:	f010 ffef 	bl	21e44 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   10e66:	4639      	mov	r1, r7
   10e68:	4668      	mov	r0, sp
   10e6a:	3710      	adds	r7, #16
   10e6c:	f00f f96a 	bl	20144 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   10e70:	42af      	cmp	r7, r5
   10e72:	d1d5      	bne.n	10e20 <tc_aes_encrypt+0x34>
   10e74:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   10e76:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   10e7a:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   10e7c:	f819 3003 	ldrb.w	r3, [r9, r3]
   10e80:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   10e84:	d1f7      	bne.n	10e76 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   10e86:	4668      	mov	r0, sp
   10e88:	f00f f9a1 	bl	201ce <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   10e8c:	4629      	mov	r1, r5
   10e8e:	4668      	mov	r0, sp
   10e90:	f00f f958 	bl	20144 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   10e94:	2310      	movs	r3, #16
   10e96:	4619      	mov	r1, r3
   10e98:	466a      	mov	r2, sp
   10e9a:	4630      	mov	r0, r6
   10e9c:	f010 ffd2 	bl	21e44 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   10ea0:	4668      	mov	r0, sp
   10ea2:	2210      	movs	r2, #16
   10ea4:	4621      	mov	r1, r4
   10ea6:	f010 ffda 	bl	21e5e <_set>

	return TC_CRYPTO_SUCCESS;
   10eaa:	2001      	movs	r0, #1
}
   10eac:	b009      	add	sp, #36	; 0x24
   10eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   10eb2:	4608      	mov	r0, r1
   10eb4:	e7fa      	b.n	10eac <tc_aes_encrypt+0xc0>
   10eb6:	4610      	mov	r0, r2
   10eb8:	e7f8      	b.n	10eac <tc_aes_encrypt+0xc0>
   10eba:	bf00      	nop
   10ebc:	00025e63 	.word	0x00025e63

00010ec0 <blvl_ccc_cfg_changed>:
   10ec0:	4b07      	ldr	r3, [pc, #28]	; (10ee0 <blvl_ccc_cfg_changed+0x20>)
   10ec2:	4a08      	ldr	r2, [pc, #32]	; (10ee4 <blvl_ccc_cfg_changed+0x24>)
{
	ARG_UNUSED(attr);

	bool notif_enabled = (value == BT_GATT_CCC_NOTIFY);

	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
   10ec4:	4808      	ldr	r0, [pc, #32]	; (10ee8 <blvl_ccc_cfg_changed+0x28>)
   10ec6:	1ad2      	subs	r2, r2, r3
   10ec8:	08d2      	lsrs	r2, r2, #3
   10eca:	4b08      	ldr	r3, [pc, #32]	; (10eec <blvl_ccc_cfg_changed+0x2c>)
   10ecc:	0192      	lsls	r2, r2, #6
   10ece:	2901      	cmp	r1, #1
   10ed0:	bf14      	ite	ne
   10ed2:	4601      	movne	r1, r0
   10ed4:	4619      	moveq	r1, r3
   10ed6:	f042 0203 	orr.w	r2, r2, #3
   10eda:	4805      	ldr	r0, [pc, #20]	; (10ef0 <blvl_ccc_cfg_changed+0x30>)
   10edc:	f010 bd45 	b.w	2196a <log_1>
   10ee0:	00025224 	.word	0x00025224
   10ee4:	00025224 	.word	0x00025224
   10ee8:	00025f6b 	.word	0x00025f6b
   10eec:	00025f63 	.word	0x00025f63
   10ef0:	00025f74 	.word	0x00025f74

00010ef4 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   10ef4:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   10ef6:	4c08      	ldr	r4, [pc, #32]	; (10f18 <read_blvl+0x24>)
{
   10ef8:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   10efa:	7824      	ldrb	r4, [r4, #0]
   10efc:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   10f00:	2401      	movs	r4, #1
   10f02:	9402      	str	r4, [sp, #8]
   10f04:	f10d 0417 	add.w	r4, sp, #23
   10f08:	9401      	str	r4, [sp, #4]
   10f0a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   10f0e:	9400      	str	r4, [sp, #0]
   10f10:	f012 f85c 	bl	22fcc <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   10f14:	b006      	add	sp, #24
   10f16:	bd10      	pop	{r4, pc}
   10f18:	20000700 	.word	0x20000700

00010f1c <bt_bas_get_battery_level>:
}

uint8_t bt_bas_get_battery_level(void)
{
	return battery_level;
}
   10f1c:	4b01      	ldr	r3, [pc, #4]	; (10f24 <bt_bas_get_battery_level+0x8>)
   10f1e:	7818      	ldrb	r0, [r3, #0]
   10f20:	4770      	bx	lr
   10f22:	bf00      	nop
   10f24:	20000700 	.word	0x20000700

00010f28 <bt_bas_set_battery_level>:

int bt_bas_set_battery_level(uint8_t level)
{
   10f28:	b500      	push	{lr}
   10f2a:	b089      	sub	sp, #36	; 0x24
	int rc;

	if (level > 100U) {
   10f2c:	2864      	cmp	r0, #100	; 0x64
{
   10f2e:	f88d 0007 	strb.w	r0, [sp, #7]
	if (level > 100U) {
   10f32:	d819      	bhi.n	10f68 <bt_bas_set_battery_level+0x40>
		return -EINVAL;
	}

	battery_level = level;
   10f34:	4b0e      	ldr	r3, [pc, #56]	; (10f70 <bt_bas_set_battery_level+0x48>)
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   10f36:	2218      	movs	r2, #24
   10f38:	7018      	strb	r0, [r3, #0]
   10f3a:	2100      	movs	r1, #0
   10f3c:	a802      	add	r0, sp, #8
   10f3e:	f011 f813 	bl	21f68 <memset>

	params.attr = attr;
   10f42:	4b0c      	ldr	r3, [pc, #48]	; (10f74 <bt_bas_set_battery_level+0x4c>)
   10f44:	9303      	str	r3, [sp, #12]
	params.data = data;
   10f46:	f10d 0307 	add.w	r3, sp, #7
   10f4a:	9304      	str	r3, [sp, #16]
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
   10f4c:	a902      	add	r1, sp, #8
	params.len = len;
   10f4e:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
   10f50:	2000      	movs	r0, #0
	params.len = len;
   10f52:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   10f56:	f004 fff5 	bl	15f44 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
   10f5a:	f110 0f80 	cmn.w	r0, #128	; 0x80
   10f5e:	bf08      	it	eq
   10f60:	2000      	moveq	r0, #0
}
   10f62:	b009      	add	sp, #36	; 0x24
   10f64:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   10f68:	f06f 0015 	mvn.w	r0, #21
   10f6c:	e7f9      	b.n	10f62 <bt_bas_set_battery_level+0x3a>
   10f6e:	bf00      	nop
   10f70:	20000700 	.word	0x20000700
   10f74:	0002542c 	.word	0x0002542c

00010f78 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   10f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f7c:	b091      	sub	sp, #68	; 0x44
   10f7e:	468b      	mov	fp, r1
   10f80:	9002      	str	r0, [sp, #8]
   10f82:	4692      	mov	sl, r2
   10f84:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   10f86:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10f88:	f89a 0000 	ldrb.w	r0, [sl]
   10f8c:	b908      	cbnz	r0, 10f92 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   10f8e:	4628      	mov	r0, r5
   10f90:	e35e      	b.n	11650 <cbvprintf+0x6d8>
		if (*fp != '%') {
   10f92:	2825      	cmp	r0, #37	; 0x25
   10f94:	f10a 0701 	add.w	r7, sl, #1
   10f98:	d007      	beq.n	10faa <cbvprintf+0x32>
			OUTC('%');
   10f9a:	9b02      	ldr	r3, [sp, #8]
   10f9c:	4659      	mov	r1, fp
   10f9e:	4798      	blx	r3
   10fa0:	2800      	cmp	r0, #0
   10fa2:	f2c0 8355 	blt.w	11650 <cbvprintf+0x6d8>
   10fa6:	3501      	adds	r5, #1
			break;
   10fa8:	e210      	b.n	113cc <cbvprintf+0x454>
		} state = {
   10faa:	2218      	movs	r2, #24
   10fac:	2100      	movs	r1, #0
   10fae:	a80a      	add	r0, sp, #40	; 0x28
   10fb0:	f010 ffda 	bl	21f68 <memset>
	if (*sp == '%') {
   10fb4:	f89a 3001 	ldrb.w	r3, [sl, #1]
   10fb8:	2b25      	cmp	r3, #37	; 0x25
   10fba:	d078      	beq.n	110ae <cbvprintf+0x136>
   10fbc:	2200      	movs	r2, #0
   10fbe:	4694      	mov	ip, r2
   10fc0:	4616      	mov	r6, r2
   10fc2:	4696      	mov	lr, r2
   10fc4:	4610      	mov	r0, r2
   10fc6:	4639      	mov	r1, r7
		switch (*sp) {
   10fc8:	f817 3b01 	ldrb.w	r3, [r7], #1
   10fcc:	2b2b      	cmp	r3, #43	; 0x2b
   10fce:	f000 809d 	beq.w	1110c <cbvprintf+0x194>
   10fd2:	f200 8094 	bhi.w	110fe <cbvprintf+0x186>
   10fd6:	2b20      	cmp	r3, #32
   10fd8:	f000 809b 	beq.w	11112 <cbvprintf+0x19a>
   10fdc:	2b23      	cmp	r3, #35	; 0x23
   10fde:	f000 809a 	beq.w	11116 <cbvprintf+0x19e>
   10fe2:	b128      	cbz	r0, 10ff0 <cbvprintf+0x78>
   10fe4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   10fe8:	f040 0004 	orr.w	r0, r0, #4
   10fec:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   10ff0:	f1be 0f00 	cmp.w	lr, #0
   10ff4:	d005      	beq.n	11002 <cbvprintf+0x8a>
   10ff6:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   10ffa:	f040 0008 	orr.w	r0, r0, #8
   10ffe:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   11002:	b12e      	cbz	r6, 11010 <cbvprintf+0x98>
   11004:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   11008:	f040 0010 	orr.w	r0, r0, #16
   1100c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   11010:	f1bc 0f00 	cmp.w	ip, #0
   11014:	d005      	beq.n	11022 <cbvprintf+0xaa>
   11016:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   1101a:	f040 0020 	orr.w	r0, r0, #32
   1101e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   11022:	b12a      	cbz	r2, 11030 <cbvprintf+0xb8>
   11024:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1102c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   11030:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11034:	f002 0044 	and.w	r0, r2, #68	; 0x44
   11038:	2844      	cmp	r0, #68	; 0x44
   1103a:	d103      	bne.n	11044 <cbvprintf+0xcc>
		conv->flag_zero = false;
   1103c:	f36f 1286 	bfc	r2, #6, #1
   11040:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   11044:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   11048:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   1104a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1104e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   11052:	d17b      	bne.n	1114c <cbvprintf+0x1d4>
		conv->width_star = true;
   11054:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11058:	f042 0201 	orr.w	r2, r2, #1
   1105c:	1c4b      	adds	r3, r1, #1
   1105e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   11062:	781a      	ldrb	r2, [r3, #0]
   11064:	2a2e      	cmp	r2, #46	; 0x2e
   11066:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1106a:	bf0c      	ite	eq
   1106c:	2101      	moveq	r1, #1
   1106e:	2100      	movne	r1, #0
   11070:	f361 0241 	bfi	r2, r1, #1, #1
   11074:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   11078:	d174      	bne.n	11164 <cbvprintf+0x1ec>
	if (*sp == '*') {
   1107a:	785a      	ldrb	r2, [r3, #1]
   1107c:	2a2a      	cmp	r2, #42	; 0x2a
   1107e:	d06a      	beq.n	11156 <cbvprintf+0x1de>
   11080:	3301      	adds	r3, #1
	size_t val = 0;
   11082:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   11084:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   11086:	4618      	mov	r0, r3
   11088:	f810 2b01 	ldrb.w	r2, [r0], #1
   1108c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   11090:	2f09      	cmp	r7, #9
   11092:	f240 808e 	bls.w	111b2 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   11096:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   1109a:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   1109c:	f3c2 0040 	ubfx	r0, r2, #1, #1
   110a0:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   110a4:	f361 0241 	bfi	r2, r1, #1, #1
   110a8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   110ac:	e05a      	b.n	11164 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
   110ae:	f10a 0702 	add.w	r7, sl, #2
   110b2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   110b6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   110ba:	07d9      	lsls	r1, r3, #31
   110bc:	f140 8149 	bpl.w	11352 <cbvprintf+0x3da>
			width = va_arg(ap, int);
   110c0:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   110c4:	f1b9 0f00 	cmp.w	r9, #0
   110c8:	da07      	bge.n	110da <cbvprintf+0x162>
				conv->flag_dash = true;
   110ca:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   110ce:	f042 0204 	orr.w	r2, r2, #4
   110d2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
   110d6:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   110da:	075a      	lsls	r2, r3, #29
   110dc:	f140 8142 	bpl.w	11364 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
   110e0:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   110e4:	f1b8 0f00 	cmp.w	r8, #0
   110e8:	f280 8141 	bge.w	1136e <cbvprintf+0x3f6>
				conv->prec_present = false;
   110ec:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   110f0:	f36f 0341 	bfc	r3, #1, #1
   110f4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   110f8:	f04f 38ff 	mov.w	r8, #4294967295
   110fc:	e137      	b.n	1136e <cbvprintf+0x3f6>
		switch (*sp) {
   110fe:	2b2d      	cmp	r3, #45	; 0x2d
   11100:	d00c      	beq.n	1111c <cbvprintf+0x1a4>
   11102:	2b30      	cmp	r3, #48	; 0x30
   11104:	f47f af6d 	bne.w	10fe2 <cbvprintf+0x6a>
			conv->flag_zero = true;
   11108:	2201      	movs	r2, #1
	} while (loop);
   1110a:	e75c      	b.n	10fc6 <cbvprintf+0x4e>
			conv->flag_plus = true;
   1110c:	f04f 0e01 	mov.w	lr, #1
   11110:	e759      	b.n	10fc6 <cbvprintf+0x4e>
			conv->flag_space = true;
   11112:	2601      	movs	r6, #1
   11114:	e757      	b.n	10fc6 <cbvprintf+0x4e>
			conv->flag_hash = true;
   11116:	f04f 0c01 	mov.w	ip, #1
   1111a:	e754      	b.n	10fc6 <cbvprintf+0x4e>
		switch (*sp) {
   1111c:	2001      	movs	r0, #1
   1111e:	e752      	b.n	10fc6 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
   11120:	fb0c 0202 	mla	r2, ip, r2, r0
   11124:	3a30      	subs	r2, #48	; 0x30
   11126:	4633      	mov	r3, r6
   11128:	461e      	mov	r6, r3
   1112a:	f816 0b01 	ldrb.w	r0, [r6], #1
   1112e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   11132:	2f09      	cmp	r7, #9
   11134:	d9f4      	bls.n	11120 <cbvprintf+0x1a8>
	if (sp != wp) {
   11136:	4299      	cmp	r1, r3
   11138:	d093      	beq.n	11062 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   1113a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   1113e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   11140:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   11142:	f362 0141 	bfi	r1, r2, #1, #1
   11146:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   1114a:	e78a      	b.n	11062 <cbvprintf+0xea>
   1114c:	460b      	mov	r3, r1
	size_t val = 0;
   1114e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   11150:	f04f 0c0a 	mov.w	ip, #10
   11154:	e7e8      	b.n	11128 <cbvprintf+0x1b0>
		conv->prec_star = true;
   11156:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1115a:	f042 0204 	orr.w	r2, r2, #4
   1115e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   11162:	3302      	adds	r3, #2
	switch (*sp) {
   11164:	461f      	mov	r7, r3
   11166:	f817 2b01 	ldrb.w	r2, [r7], #1
   1116a:	2a6c      	cmp	r2, #108	; 0x6c
   1116c:	d041      	beq.n	111f2 <cbvprintf+0x27a>
   1116e:	d825      	bhi.n	111bc <cbvprintf+0x244>
   11170:	2a68      	cmp	r2, #104	; 0x68
   11172:	d02b      	beq.n	111cc <cbvprintf+0x254>
   11174:	2a6a      	cmp	r2, #106	; 0x6a
   11176:	d046      	beq.n	11206 <cbvprintf+0x28e>
   11178:	2a4c      	cmp	r2, #76	; 0x4c
   1117a:	d04c      	beq.n	11216 <cbvprintf+0x29e>
   1117c:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   1117e:	f817 2b01 	ldrb.w	r2, [r7], #1
   11182:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11186:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   1118a:	2a78      	cmp	r2, #120	; 0x78
   1118c:	f200 80d9 	bhi.w	11342 <cbvprintf+0x3ca>
   11190:	2a57      	cmp	r2, #87	; 0x57
   11192:	d84d      	bhi.n	11230 <cbvprintf+0x2b8>
   11194:	2a41      	cmp	r2, #65	; 0x41
   11196:	d003      	beq.n	111a0 <cbvprintf+0x228>
   11198:	3a45      	subs	r2, #69	; 0x45
   1119a:	2a02      	cmp	r2, #2
   1119c:	f200 80d1 	bhi.w	11342 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   111a0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   111a4:	2204      	movs	r2, #4
   111a6:	f362 0302 	bfi	r3, r2, #0, #3
   111aa:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   111ae:	2301      	movs	r3, #1
			break;
   111b0:	e09e      	b.n	112f0 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
   111b2:	fb06 2101 	mla	r1, r6, r1, r2
   111b6:	3930      	subs	r1, #48	; 0x30
   111b8:	4603      	mov	r3, r0
   111ba:	e764      	b.n	11086 <cbvprintf+0x10e>
	switch (*sp) {
   111bc:	2a74      	cmp	r2, #116	; 0x74
   111be:	d026      	beq.n	1120e <cbvprintf+0x296>
   111c0:	2a7a      	cmp	r2, #122	; 0x7a
   111c2:	d1db      	bne.n	1117c <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
   111c4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   111c8:	2206      	movs	r2, #6
   111ca:	e00d      	b.n	111e8 <cbvprintf+0x270>
		if (*++sp == 'h') {
   111cc:	785a      	ldrb	r2, [r3, #1]
   111ce:	2a68      	cmp	r2, #104	; 0x68
   111d0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   111d4:	d106      	bne.n	111e4 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
   111d6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   111d8:	f361 02c6 	bfi	r2, r1, #3, #4
   111dc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   111e0:	1c9f      	adds	r7, r3, #2
   111e2:	e7cc      	b.n	1117e <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
   111e4:	4613      	mov	r3, r2
   111e6:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   111e8:	f362 03c6 	bfi	r3, r2, #3, #4
   111ec:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   111f0:	e7c5      	b.n	1117e <cbvprintf+0x206>
		if (*++sp == 'l') {
   111f2:	785a      	ldrb	r2, [r3, #1]
   111f4:	2a6c      	cmp	r2, #108	; 0x6c
   111f6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   111fa:	d101      	bne.n	11200 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
   111fc:	2104      	movs	r1, #4
   111fe:	e7eb      	b.n	111d8 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
   11200:	4613      	mov	r3, r2
   11202:	2203      	movs	r2, #3
   11204:	e7f0      	b.n	111e8 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
   11206:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1120a:	2205      	movs	r2, #5
   1120c:	e7ec      	b.n	111e8 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
   1120e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11212:	2207      	movs	r2, #7
   11214:	e7e8      	b.n	111e8 <cbvprintf+0x270>
		conv->unsupported = true;
   11216:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1121a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   1121e:	f023 0302 	bic.w	r3, r3, #2
   11222:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   11226:	f043 0302 	orr.w	r3, r3, #2
   1122a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   1122e:	e7a6      	b.n	1117e <cbvprintf+0x206>
   11230:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   11234:	2920      	cmp	r1, #32
   11236:	f200 8084 	bhi.w	11342 <cbvprintf+0x3ca>
   1123a:	a001      	add	r0, pc, #4	; (adr r0, 11240 <cbvprintf+0x2c8>)
   1123c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   11240:	00011305 	.word	0x00011305
   11244:	00011343 	.word	0x00011343
   11248:	00011343 	.word	0x00011343
   1124c:	00011343 	.word	0x00011343
   11250:	00011343 	.word	0x00011343
   11254:	00011343 	.word	0x00011343
   11258:	00011343 	.word	0x00011343
   1125c:	00011343 	.word	0x00011343
   11260:	00011343 	.word	0x00011343
   11264:	000111a1 	.word	0x000111a1
   11268:	00011343 	.word	0x00011343
   1126c:	00011305 	.word	0x00011305
   11270:	000112c5 	.word	0x000112c5
   11274:	000111a1 	.word	0x000111a1
   11278:	000111a1 	.word	0x000111a1
   1127c:	000111a1 	.word	0x000111a1
   11280:	00011343 	.word	0x00011343
   11284:	000112c5 	.word	0x000112c5
   11288:	00011343 	.word	0x00011343
   1128c:	00011343 	.word	0x00011343
   11290:	00011343 	.word	0x00011343
   11294:	00011343 	.word	0x00011343
   11298:	0001130d 	.word	0x0001130d
   1129c:	00011305 	.word	0x00011305
   112a0:	00011329 	.word	0x00011329
   112a4:	00011343 	.word	0x00011343
   112a8:	00011343 	.word	0x00011343
   112ac:	00011329 	.word	0x00011329
   112b0:	00011343 	.word	0x00011343
   112b4:	00011305 	.word	0x00011305
   112b8:	00011343 	.word	0x00011343
   112bc:	00011343 	.word	0x00011343
   112c0:	00011305 	.word	0x00011305
		conv->specifier_cat = SPECIFIER_SINT;
   112c4:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   112c8:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   112ca:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   112ce:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   112d2:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   112d4:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   112d8:	bf02      	ittt	eq
   112da:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   112de:	f041 0101 	orreq.w	r1, r1, #1
   112e2:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   112e6:	2a63      	cmp	r2, #99	; 0x63
   112e8:	d131      	bne.n	1134e <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   112ea:	3b00      	subs	r3, #0
   112ec:	bf18      	it	ne
   112ee:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   112f0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   112f4:	f3c2 0140 	ubfx	r1, r2, #1, #1
   112f8:	430b      	orrs	r3, r1
   112fa:	f363 0241 	bfi	r2, r3, #1, #1
   112fe:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   11302:	e6d8      	b.n	110b6 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   11304:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   11308:	2002      	movs	r0, #2
   1130a:	e7de      	b.n	112ca <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   1130c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   11310:	f003 0378 	and.w	r3, r3, #120	; 0x78
   11314:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   11318:	2103      	movs	r1, #3
   1131a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1131e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   11320:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   11324:	4143      	adcs	r3, r0
   11326:	e7e3      	b.n	112f0 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   11328:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   1132c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   1132e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   11332:	f361 0202 	bfi	r2, r1, #0, #3
   11336:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   1133a:	bf14      	ite	ne
   1133c:	2301      	movne	r3, #1
   1133e:	2300      	moveq	r3, #0
   11340:	e7d6      	b.n	112f0 <cbvprintf+0x378>
		conv->invalid = true;
   11342:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11346:	f043 0301 	orr.w	r3, r3, #1
   1134a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   1134e:	2300      	movs	r3, #0
   11350:	e7ce      	b.n	112f0 <cbvprintf+0x378>
		} else if (conv->width_present) {
   11352:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   11356:	2a00      	cmp	r2, #0
			width = conv->width_value;
   11358:	bfb4      	ite	lt
   1135a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   1135e:	f04f 39ff 	movge.w	r9, #4294967295
   11362:	e6ba      	b.n	110da <cbvprintf+0x162>
		} else if (conv->prec_present) {
   11364:	079b      	lsls	r3, r3, #30
   11366:	f57f aec7 	bpl.w	110f8 <cbvprintf+0x180>
			precision = conv->prec_value;
   1136a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   1136e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   11372:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   11374:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   11378:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   1137c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   11380:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   11382:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   11386:	d136      	bne.n	113f6 <cbvprintf+0x47e>
			switch (length_mod) {
   11388:	1ed3      	subs	r3, r2, #3
   1138a:	2b04      	cmp	r3, #4
   1138c:	d820      	bhi.n	113d0 <cbvprintf+0x458>
   1138e:	e8df f003 	tbb	[pc, r3]
   11392:	0703      	.short	0x0703
   11394:	1f07      	.short	0x1f07
   11396:	1f          	.byte	0x1f
   11397:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   11398:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
   1139c:	17c1      	asrs	r1, r0, #31
   1139e:	e004      	b.n	113aa <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
   113a0:	3407      	adds	r4, #7
   113a2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   113a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
   113aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   113ae:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   113b2:	f013 0603 	ands.w	r6, r3, #3
   113b6:	d054      	beq.n	11462 <cbvprintf+0x4ea>
			OUTS(sp, fp);
   113b8:	9802      	ldr	r0, [sp, #8]
   113ba:	463b      	mov	r3, r7
   113bc:	4652      	mov	r2, sl
   113be:	4659      	mov	r1, fp
   113c0:	f00e ffcb 	bl	2035a <outs>
   113c4:	2800      	cmp	r0, #0
   113c6:	f2c0 8143 	blt.w	11650 <cbvprintf+0x6d8>
   113ca:	4405      	add	r5, r0
			continue;
   113cc:	46ba      	mov	sl, r7
   113ce:	e5db      	b.n	10f88 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   113d0:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
   113d4:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   113d6:	ea4f 71e0 	mov.w	r1, r0, asr #31
   113da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   113de:	d105      	bne.n	113ec <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
   113e0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   113e4:	930a      	str	r3, [sp, #40]	; 0x28
   113e6:	2300      	movs	r3, #0
   113e8:	930b      	str	r3, [sp, #44]	; 0x2c
   113ea:	e7e0      	b.n	113ae <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
   113ec:	2a02      	cmp	r2, #2
   113ee:	d1de      	bne.n	113ae <cbvprintf+0x436>
				value->sint = (short)value->sint;
   113f0:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
   113f4:	e7d2      	b.n	1139c <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   113f6:	2b02      	cmp	r3, #2
   113f8:	d123      	bne.n	11442 <cbvprintf+0x4ca>
			switch (length_mod) {
   113fa:	1ed3      	subs	r3, r2, #3
   113fc:	2b04      	cmp	r3, #4
   113fe:	d813      	bhi.n	11428 <cbvprintf+0x4b0>
   11400:	e8df f003 	tbb	[pc, r3]
   11404:	120a0a03 	.word	0x120a0a03
   11408:	12          	.byte	0x12
   11409:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   1140a:	6820      	ldr	r0, [r4, #0]
   1140c:	900a      	str	r0, [sp, #40]	; 0x28
   1140e:	2100      	movs	r1, #0
   11410:	1d23      	adds	r3, r4, #4
   11412:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   11414:	461c      	mov	r4, r3
   11416:	e7ca      	b.n	113ae <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
   11418:	3407      	adds	r4, #7
   1141a:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
   1141e:	e8f3 0102 	ldrd	r0, r1, [r3], #8
   11422:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
   11426:	e7f5      	b.n	11414 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
   11428:	f854 3b04 	ldr.w	r3, [r4], #4
   1142c:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   1142e:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
   11430:	f04f 0300 	mov.w	r3, #0
   11434:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   11436:	d0d3      	beq.n	113e0 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
   11438:	2a02      	cmp	r2, #2
   1143a:	d1b8      	bne.n	113ae <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
   1143c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   11440:	e7d0      	b.n	113e4 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
   11442:	2b04      	cmp	r3, #4
   11444:	d107      	bne.n	11456 <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
   11446:	3407      	adds	r4, #7
   11448:	f024 0407 	bic.w	r4, r4, #7
   1144c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
   11450:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   11454:	e7ab      	b.n	113ae <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
   11456:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   11458:	bf04      	itt	eq
   1145a:	f854 3b04 	ldreq.w	r3, [r4], #4
   1145e:	930a      	streq	r3, [sp, #40]	; 0x28
   11460:	e7a5      	b.n	113ae <cbvprintf+0x436>
		switch (conv->specifier) {
   11462:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   11466:	2878      	cmp	r0, #120	; 0x78
   11468:	d8b0      	bhi.n	113cc <cbvprintf+0x454>
   1146a:	2862      	cmp	r0, #98	; 0x62
   1146c:	d822      	bhi.n	114b4 <cbvprintf+0x53c>
   1146e:	2825      	cmp	r0, #37	; 0x25
   11470:	f43f ad93 	beq.w	10f9a <cbvprintf+0x22>
   11474:	2858      	cmp	r0, #88	; 0x58
   11476:	d1a9      	bne.n	113cc <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
   11478:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   1147c:	9300      	str	r3, [sp, #0]
   1147e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   11482:	ab04      	add	r3, sp, #16
   11484:	aa0c      	add	r2, sp, #48	; 0x30
   11486:	f00e ff1d 	bl	202c4 <encode_uint>
   1148a:	4682      	mov	sl, r0
			if (precision >= 0) {
   1148c:	f1b8 0f00 	cmp.w	r8, #0
   11490:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   11494:	db0c      	blt.n	114b0 <cbvprintf+0x538>
				conv->flag_zero = false;
   11496:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   1149a:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   1149e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   114a2:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   114a4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   114a8:	d902      	bls.n	114b0 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
   114aa:	eba8 0303 	sub.w	r3, r8, r3
   114ae:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   114b0:	4680      	mov	r8, r0
   114b2:	e03d      	b.n	11530 <cbvprintf+0x5b8>
   114b4:	3863      	subs	r0, #99	; 0x63
   114b6:	2815      	cmp	r0, #21
   114b8:	d888      	bhi.n	113cc <cbvprintf+0x454>
   114ba:	a101      	add	r1, pc, #4	; (adr r1, 114c0 <cbvprintf+0x548>)
   114bc:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   114c0:	00011541 	.word	0x00011541
   114c4:	000115a5 	.word	0x000115a5
   114c8:	000113cd 	.word	0x000113cd
   114cc:	000113cd 	.word	0x000113cd
   114d0:	000113cd 	.word	0x000113cd
   114d4:	000113cd 	.word	0x000113cd
   114d8:	000115a5 	.word	0x000115a5
   114dc:	000113cd 	.word	0x000113cd
   114e0:	000113cd 	.word	0x000113cd
   114e4:	000113cd 	.word	0x000113cd
   114e8:	000113cd 	.word	0x000113cd
   114ec:	00011603 	.word	0x00011603
   114f0:	000115d1 	.word	0x000115d1
   114f4:	000115d5 	.word	0x000115d5
   114f8:	000113cd 	.word	0x000113cd
   114fc:	000113cd 	.word	0x000113cd
   11500:	00011519 	.word	0x00011519
   11504:	000113cd 	.word	0x000113cd
   11508:	000115d1 	.word	0x000115d1
   1150c:	000113cd 	.word	0x000113cd
   11510:	000113cd 	.word	0x000113cd
   11514:	000115d1 	.word	0x000115d1
			if (precision >= 0) {
   11518:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   1151c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   11520:	db0a      	blt.n	11538 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
   11522:	4641      	mov	r1, r8
   11524:	4650      	mov	r0, sl
   11526:	f010 fcd8 	bl	21eda <strnlen>
			bpe = bps + len;
   1152a:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   1152e:	2600      	movs	r6, #0
		if (bps == NULL) {
   11530:	f1ba 0f00 	cmp.w	sl, #0
   11534:	d10c      	bne.n	11550 <cbvprintf+0x5d8>
   11536:	e749      	b.n	113cc <cbvprintf+0x454>
				len = strlen(bps);
   11538:	4650      	mov	r0, sl
   1153a:	f010 fcc7 	bl	21ecc <strlen>
   1153e:	e7f4      	b.n	1152a <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   11540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11542:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   11546:	2600      	movs	r6, #0
			bpe = buf + 1;
   11548:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
   1154c:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
   11550:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   11554:	b106      	cbz	r6, 11558 <cbvprintf+0x5e0>
			nj_len += 1U;
   11556:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   11558:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   1155c:	06d0      	lsls	r0, r2, #27
   1155e:	d56b      	bpl.n	11638 <cbvprintf+0x6c0>
			nj_len += 2U;
   11560:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   11562:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   11564:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   11566:	bf48      	it	mi
   11568:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   1156a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   1156c:	bf48      	it	mi
   1156e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   11570:	f1b9 0f00 	cmp.w	r9, #0
   11574:	dd79      	ble.n	1166a <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
   11576:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   1157a:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   1157e:	f3c2 0380 	ubfx	r3, r2, #2, #1
   11582:	9303      	str	r3, [sp, #12]
   11584:	0753      	lsls	r3, r2, #29
   11586:	d470      	bmi.n	1166a <cbvprintf+0x6f2>
				if (conv->flag_zero) {
   11588:	0650      	lsls	r0, r2, #25
   1158a:	d564      	bpl.n	11656 <cbvprintf+0x6de>
					if (sign != 0) {
   1158c:	b146      	cbz	r6, 115a0 <cbvprintf+0x628>
						OUTC(sign);
   1158e:	9b02      	ldr	r3, [sp, #8]
   11590:	4659      	mov	r1, fp
   11592:	4630      	mov	r0, r6
   11594:	4798      	blx	r3
   11596:	2800      	cmp	r0, #0
   11598:	db5a      	blt.n	11650 <cbvprintf+0x6d8>
						sign = 0;
   1159a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   1159c:	3501      	adds	r5, #1
						sign = 0;
   1159e:	461e      	mov	r6, r3
					pad = '0';
   115a0:	2330      	movs	r3, #48	; 0x30
   115a2:	e059      	b.n	11658 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
   115a4:	071e      	lsls	r6, r3, #28
   115a6:	d411      	bmi.n	115cc <cbvprintf+0x654>
				sign = ' ';
   115a8:	f013 0610 	ands.w	r6, r3, #16
   115ac:	bf18      	it	ne
   115ae:	2620      	movne	r6, #32
			sint = value->sint;
   115b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   115b4:	2a00      	cmp	r2, #0
   115b6:	f173 0100 	sbcs.w	r1, r3, #0
   115ba:	f6bf af5d 	bge.w	11478 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
   115be:	4252      	negs	r2, r2
   115c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   115c4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   115c8:	262d      	movs	r6, #45	; 0x2d
   115ca:	e755      	b.n	11478 <cbvprintf+0x500>
				sign = '+';
   115cc:	262b      	movs	r6, #43	; 0x2b
   115ce:	e7ef      	b.n	115b0 <cbvprintf+0x638>
		switch (conv->specifier) {
   115d0:	2600      	movs	r6, #0
   115d2:	e751      	b.n	11478 <cbvprintf+0x500>
			if (value->ptr != NULL) {
   115d4:	980a      	ldr	r0, [sp, #40]	; 0x28
   115d6:	b348      	cbz	r0, 1162c <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   115d8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   115dc:	9300      	str	r3, [sp, #0]
   115de:	aa0c      	add	r2, sp, #48	; 0x30
   115e0:	ab04      	add	r3, sp, #16
   115e2:	2100      	movs	r1, #0
   115e4:	f00e fe6e 	bl	202c4 <encode_uint>
				conv->altform_0c = true;
   115e8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   115ec:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   115f0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   115f4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   115f8:	4682      	mov	sl, r0
				conv->altform_0c = true;
   115fa:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   115fe:	2600      	movs	r6, #0
				goto prec_int_pad0;
   11600:	e744      	b.n	1148c <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
   11602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   11604:	2a07      	cmp	r2, #7
   11606:	f63f aee1 	bhi.w	113cc <cbvprintf+0x454>
   1160a:	e8df f002 	tbb	[pc, r2]
   1160e:	040d      	.short	0x040d
   11610:	08080d06 	.word	0x08080d06
   11614:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   11616:	701d      	strb	r5, [r3, #0]
		break;
   11618:	e6d8      	b.n	113cc <cbvprintf+0x454>
		*(short *)dp = (short)count;
   1161a:	801d      	strh	r5, [r3, #0]
		break;
   1161c:	e6d6      	b.n	113cc <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
   1161e:	4628      	mov	r0, r5
   11620:	17e9      	asrs	r1, r5, #31
   11622:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   11626:	e6d1      	b.n	113cc <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   11628:	601d      	str	r5, [r3, #0]
		break;
   1162a:	e6cf      	b.n	113cc <cbvprintf+0x454>
			bpe = bps + 5;
   1162c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 116f4 <cbvprintf+0x77c>
   11630:	4606      	mov	r6, r0
			bps = "(nil)";
   11632:	f1a8 0a05 	sub.w	sl, r8, #5
   11636:	e78b      	b.n	11550 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
   11638:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   1163a:	bf48      	it	mi
   1163c:	3301      	addmi	r3, #1
   1163e:	e790      	b.n	11562 <cbvprintf+0x5ea>
					OUTC(pad);
   11640:	4618      	mov	r0, r3
   11642:	9303      	str	r3, [sp, #12]
   11644:	4659      	mov	r1, fp
   11646:	9b02      	ldr	r3, [sp, #8]
   11648:	4798      	blx	r3
   1164a:	2800      	cmp	r0, #0
   1164c:	9b03      	ldr	r3, [sp, #12]
   1164e:	da04      	bge.n	1165a <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
   11650:	b011      	add	sp, #68	; 0x44
   11652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   11656:	2320      	movs	r3, #32
   11658:	444d      	add	r5, r9
   1165a:	464a      	mov	r2, r9
				while (width-- > 0) {
   1165c:	2a00      	cmp	r2, #0
   1165e:	eba5 0109 	sub.w	r1, r5, r9
   11662:	f109 39ff 	add.w	r9, r9, #4294967295
   11666:	dceb      	bgt.n	11640 <cbvprintf+0x6c8>
   11668:	460d      	mov	r5, r1
		if (sign != 0) {
   1166a:	b136      	cbz	r6, 1167a <cbvprintf+0x702>
			OUTC(sign);
   1166c:	9b02      	ldr	r3, [sp, #8]
   1166e:	4659      	mov	r1, fp
   11670:	4630      	mov	r0, r6
   11672:	4798      	blx	r3
   11674:	2800      	cmp	r0, #0
   11676:	dbeb      	blt.n	11650 <cbvprintf+0x6d8>
   11678:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   1167a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1167e:	06d9      	lsls	r1, r3, #27
   11680:	d401      	bmi.n	11686 <cbvprintf+0x70e>
   11682:	071a      	lsls	r2, r3, #28
   11684:	d506      	bpl.n	11694 <cbvprintf+0x71c>
				OUTC('0');
   11686:	9b02      	ldr	r3, [sp, #8]
   11688:	4659      	mov	r1, fp
   1168a:	2030      	movs	r0, #48	; 0x30
   1168c:	4798      	blx	r3
   1168e:	2800      	cmp	r0, #0
   11690:	dbde      	blt.n	11650 <cbvprintf+0x6d8>
   11692:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   11694:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   11698:	06db      	lsls	r3, r3, #27
   1169a:	d507      	bpl.n	116ac <cbvprintf+0x734>
				OUTC(conv->specifier);
   1169c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   116a0:	9b02      	ldr	r3, [sp, #8]
   116a2:	4659      	mov	r1, fp
   116a4:	4798      	blx	r3
   116a6:	2800      	cmp	r0, #0
   116a8:	dbd2      	blt.n	11650 <cbvprintf+0x6d8>
   116aa:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   116ac:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   116ae:	442e      	add	r6, r5
   116b0:	1b73      	subs	r3, r6, r5
   116b2:	2b00      	cmp	r3, #0
   116b4:	dc16      	bgt.n	116e4 <cbvprintf+0x76c>
			OUTS(bps, bpe);
   116b6:	9802      	ldr	r0, [sp, #8]
   116b8:	4643      	mov	r3, r8
   116ba:	4652      	mov	r2, sl
   116bc:	4659      	mov	r1, fp
   116be:	f00e fe4c 	bl	2035a <outs>
   116c2:	2800      	cmp	r0, #0
   116c4:	dbc4      	blt.n	11650 <cbvprintf+0x6d8>
   116c6:	4405      	add	r5, r0
		while (width > 0) {
   116c8:	44a9      	add	r9, r5
   116ca:	eba9 0305 	sub.w	r3, r9, r5
   116ce:	2b00      	cmp	r3, #0
   116d0:	f77f ae7c 	ble.w	113cc <cbvprintf+0x454>
			OUTC(' ');
   116d4:	9b02      	ldr	r3, [sp, #8]
   116d6:	4659      	mov	r1, fp
   116d8:	2020      	movs	r0, #32
   116da:	4798      	blx	r3
   116dc:	2800      	cmp	r0, #0
   116de:	dbb7      	blt.n	11650 <cbvprintf+0x6d8>
   116e0:	3501      	adds	r5, #1
			--width;
   116e2:	e7f2      	b.n	116ca <cbvprintf+0x752>
				OUTC('0');
   116e4:	9b02      	ldr	r3, [sp, #8]
   116e6:	4659      	mov	r1, fp
   116e8:	2030      	movs	r0, #48	; 0x30
   116ea:	4798      	blx	r3
   116ec:	2800      	cmp	r0, #0
   116ee:	dbaf      	blt.n	11650 <cbvprintf+0x6d8>
   116f0:	3501      	adds	r5, #1
   116f2:	e7dd      	b.n	116b0 <cbvprintf+0x738>
   116f4:	00025f92 	.word	0x00025f92

000116f8 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
   116f8:	4b01      	ldr	r3, [pc, #4]	; (11700 <uECC_get_rng+0x8>)
   116fa:	6818      	ldr	r0, [r3, #0]
   116fc:	4770      	bx	lr
   116fe:	bf00      	nop
   11700:	20000478 	.word	0x20000478

00011704 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   11704:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   11706:	2208      	movs	r2, #8
{
   11708:	b089      	sub	sp, #36	; 0x24
   1170a:	460c      	mov	r4, r1
   1170c:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   1170e:	f00f f852 	bl	207b6 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
   11712:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   11714:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   11716:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   11718:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   1171a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   1171c:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   1171e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   11720:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   11722:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   11724:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
   11726:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   11728:	2308      	movs	r3, #8
   1172a:	466a      	mov	r2, sp
   1172c:	4669      	mov	r1, sp
   1172e:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
   11730:	e9cd 7701 	strd	r7, r7, [sp, #4]
   11734:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   11736:	f00e ff40 	bl	205ba <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1173a:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1173c:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1173e:	466a      	mov	r2, sp
   11740:	4631      	mov	r1, r6
   11742:	4630      	mov	r0, r6
   11744:	f00e ff39 	bl	205ba <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
   11748:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1174a:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
   1174c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1174e:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
   11750:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11752:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
   11754:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   11756:	4405      	add	r5, r0
	tmp[7] = 0;
   11758:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1175c:	466a      	mov	r2, sp
   1175e:	2308      	movs	r3, #8
   11760:	4669      	mov	r1, sp
   11762:	4668      	mov	r0, sp
   11764:	f00e ff29 	bl	205ba <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   11768:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   1176a:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1176c:	2308      	movs	r3, #8
   1176e:	466a      	mov	r2, sp
   11770:	4630      	mov	r0, r6
   11772:	f00e ff22 	bl	205ba <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
   11776:	6a23      	ldr	r3, [r4, #32]
   11778:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
   1177a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1177c:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
   1177e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11780:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
   11782:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11784:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   11786:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   11788:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1178a:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   1178c:	2308      	movs	r3, #8
   1178e:	466a      	mov	r2, sp
   11790:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   11792:	e9cd 7704 	strd	r7, r7, [sp, #16]
   11796:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   11798:	f00e ff0f 	bl	205ba <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
   1179c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1179e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
   117a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
   117a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
   117a4:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
   117a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   117a8:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
   117aa:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
   117ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
   117ae:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
   117b0:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
   117b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
   117b6:	6a23      	ldr	r3, [r4, #32]
   117b8:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   117ba:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   117bc:	2308      	movs	r3, #8
   117be:	466a      	mov	r2, sp
   117c0:	4630      	mov	r0, r6
   117c2:	f00e fefa 	bl	205ba <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
   117c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   117c8:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
   117ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
   117cc:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
   117ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
   117d0:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
   117d2:	6a23      	ldr	r3, [r4, #32]
   117d4:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
   117d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   117d8:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   117da:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   117dc:	2308      	movs	r3, #8
   117de:	466a      	mov	r2, sp
   117e0:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
   117e2:	e9cd 7704 	strd	r7, r7, [sp, #16]
   117e6:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   117e8:	f00f f81b 	bl	20822 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
   117ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
   117ee:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   117f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   117f2:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   117f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   117f6:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   117f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   117fa:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
   117fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   117fe:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   11800:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11802:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11804:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11806:	2308      	movs	r3, #8
   11808:	466a      	mov	r2, sp
   1180a:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
   1180c:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11810:	f00f f807 	bl	20822 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
   11814:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11816:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   11818:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1181a:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   1181c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1181e:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   11820:	6a23      	ldr	r3, [r4, #32]
   11822:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   11824:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11826:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   11828:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
   1182a:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
   1182e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   11830:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11832:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   11834:	2308      	movs	r3, #8
   11836:	466a      	mov	r2, sp
   11838:	4630      	mov	r0, r6
   1183a:	f00e fff2 	bl	20822 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
   1183e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11840:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   11842:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
   11844:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
   11848:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1184a:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   1184c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1184e:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   11850:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
   11852:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
   11856:	6b63      	ldr	r3, [r4, #52]	; 0x34
   11858:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1185a:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   1185c:	2308      	movs	r3, #8
   1185e:	466a      	mov	r2, sp
   11860:	4630      	mov	r0, r6
   11862:	f00e ffde 	bl	20822 <uECC_vli_sub>

	if (carry < 0) {
   11866:	1a2d      	subs	r5, r5, r0
   11868:	d410      	bmi.n	1188c <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   1186a:	4c0d      	ldr	r4, [pc, #52]	; (118a0 <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
   1186c:	b935      	cbnz	r5, 1187c <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   1186e:	2208      	movs	r2, #8
   11870:	4631      	mov	r1, r6
   11872:	4620      	mov	r0, r4
   11874:	f00e ffab 	bl	207ce <uECC_vli_cmp_unsafe>
		while (carry || 
   11878:	2801      	cmp	r0, #1
   1187a:	d00f      	beq.n	1189c <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   1187c:	2308      	movs	r3, #8
   1187e:	4622      	mov	r2, r4
   11880:	4631      	mov	r1, r6
   11882:	4630      	mov	r0, r6
   11884:	f00e ffcd 	bl	20822 <uECC_vli_sub>
   11888:	1a2d      	subs	r5, r5, r0
   1188a:	e7ef      	b.n	1186c <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   1188c:	4a04      	ldr	r2, [pc, #16]	; (118a0 <vli_mmod_fast_secp256r1+0x19c>)
   1188e:	2308      	movs	r3, #8
   11890:	4631      	mov	r1, r6
   11892:	4630      	mov	r0, r6
   11894:	f00e fe91 	bl	205ba <uECC_vli_add>
		while (carry < 0);
   11898:	182d      	adds	r5, r5, r0
   1189a:	d4f8      	bmi.n	1188e <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
   1189c:	b009      	add	sp, #36	; 0x24
   1189e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   118a0:	000254d0 	.word	0x000254d0

000118a4 <hrs_init>:

static int hrs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	hrs_blsc = 0x01;
   118a4:	4b02      	ldr	r3, [pc, #8]	; (118b0 <hrs_init+0xc>)
   118a6:	2201      	movs	r2, #1
   118a8:	701a      	strb	r2, [r3, #0]

	return 0;
}
   118aa:	2000      	movs	r0, #0
   118ac:	4770      	bx	lr
   118ae:	bf00      	nop
   118b0:	2000305e 	.word	0x2000305e

000118b4 <read_blsc>:
{
   118b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
   118b6:	2401      	movs	r4, #1
   118b8:	9402      	str	r4, [sp, #8]
   118ba:	4c04      	ldr	r4, [pc, #16]	; (118cc <read_blsc+0x18>)
   118bc:	9401      	str	r4, [sp, #4]
   118be:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   118c2:	9400      	str	r4, [sp, #0]
   118c4:	f011 fb82 	bl	22fcc <bt_gatt_attr_read>
}
   118c8:	b004      	add	sp, #16
   118ca:	bd10      	pop	{r4, pc}
   118cc:	2000305e 	.word	0x2000305e

000118d0 <hrmc_ccc_cfg_changed>:
   118d0:	4b07      	ldr	r3, [pc, #28]	; (118f0 <hrmc_ccc_cfg_changed+0x20>)
   118d2:	4a08      	ldr	r2, [pc, #32]	; (118f4 <hrmc_ccc_cfg_changed+0x24>)
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
   118d4:	4808      	ldr	r0, [pc, #32]	; (118f8 <hrmc_ccc_cfg_changed+0x28>)
   118d6:	1ad2      	subs	r2, r2, r3
   118d8:	08d2      	lsrs	r2, r2, #3
   118da:	4b08      	ldr	r3, [pc, #32]	; (118fc <hrmc_ccc_cfg_changed+0x2c>)
   118dc:	0192      	lsls	r2, r2, #6
   118de:	2901      	cmp	r1, #1
   118e0:	bf14      	ite	ne
   118e2:	4601      	movne	r1, r0
   118e4:	4619      	moveq	r1, r3
   118e6:	f042 0203 	orr.w	r2, r2, #3
   118ea:	4805      	ldr	r0, [pc, #20]	; (11900 <hrmc_ccc_cfg_changed+0x30>)
   118ec:	f010 b83d 	b.w	2196a <log_1>
   118f0:	00025224 	.word	0x00025224
   118f4:	000252ac 	.word	0x000252ac
   118f8:	00025f6b 	.word	0x00025f6b
   118fc:	00025f63 	.word	0x00025f63
   11900:	00025fb5 	.word	0x00025fb5

00011904 <bt_hrs_notify>:

int bt_hrs_notify(uint16_t heartrate)
{
   11904:	b510      	push	{r4, lr}
	int rc;
	static uint8_t hrm[2];

	hrm[0] = 0x06; /* uint8, sensor contact */
   11906:	4c0d      	ldr	r4, [pc, #52]	; (1193c <bt_hrs_notify+0x38>)
{
   11908:	b086      	sub	sp, #24
	hrm[0] = 0x06; /* uint8, sensor contact */
   1190a:	2306      	movs	r3, #6
	hrm[1] = heartrate;
   1190c:	7060      	strb	r0, [r4, #1]
	memset(&params, 0, sizeof(params));
   1190e:	2218      	movs	r2, #24
   11910:	2100      	movs	r1, #0
   11912:	4668      	mov	r0, sp
	hrm[0] = 0x06; /* uint8, sensor contact */
   11914:	7023      	strb	r3, [r4, #0]
   11916:	f010 fb27 	bl	21f68 <memset>
	params.attr = attr;
   1191a:	4b09      	ldr	r3, [pc, #36]	; (11940 <bt_hrs_notify+0x3c>)
	return bt_gatt_notify_cb(conn, &params);
   1191c:	4669      	mov	r1, sp
	params.data = data;
   1191e:	e9cd 3401 	strd	r3, r4, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
   11922:	2000      	movs	r0, #0
	params.len = len;
   11924:	2302      	movs	r3, #2
   11926:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
   1192a:	f004 fb0b 	bl	15f44 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &hrs_svc.attrs[1], &hrm, sizeof(hrm));

	return rc == -ENOTCONN ? 0 : rc;
}
   1192e:	f110 0f80 	cmn.w	r0, #128	; 0x80
   11932:	bf08      	it	eq
   11934:	2000      	moveq	r0, #0
   11936:	b006      	add	sp, #24
   11938:	bd10      	pop	{r4, pc}
   1193a:	bf00      	nop
   1193c:	2000305c 	.word	0x2000305c
   11940:	00025590 	.word	0x00025590

00011944 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   11944:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   11946:	4910      	ldr	r1, [pc, #64]	; (11988 <enable_logger+0x44>)
   11948:	4810      	ldr	r0, [pc, #64]	; (1198c <enable_logger+0x48>)
{
   1194a:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   1194c:	2200      	movs	r2, #0
   1194e:	f013 f9cb 	bl	24ce8 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11952:	4d0f      	ldr	r5, [pc, #60]	; (11990 <enable_logger+0x4c>)
   11954:	490f      	ldr	r1, [pc, #60]	; (11994 <enable_logger+0x50>)
   11956:	2200      	movs	r2, #0
   11958:	2300      	movs	r3, #0
   1195a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1195e:	2400      	movs	r4, #0
   11960:	230e      	movs	r3, #14
   11962:	e9cd 3403 	strd	r3, r4, [sp, #12]
   11966:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1196a:	4b0b      	ldr	r3, [pc, #44]	; (11998 <enable_logger+0x54>)
   1196c:	9400      	str	r4, [sp, #0]
   1196e:	f44f 7240 	mov.w	r2, #768	; 0x300
   11972:	4628      	mov	r0, r5
   11974:	f00b fb36 	bl	1cfe4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   11978:	4908      	ldr	r1, [pc, #32]	; (1199c <enable_logger+0x58>)
   1197a:	4628      	mov	r0, r5
   1197c:	f013 f93c 	bl	24bf8 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   11980:	4620      	mov	r0, r4
   11982:	b009      	add	sp, #36	; 0x24
   11984:	bd30      	pop	{r4, r5, pc}
   11986:	bf00      	nop
   11988:	000119a1 	.word	0x000119a1
   1198c:	20001568 	.word	0x20001568
   11990:	200015a0 	.word	0x200015a0
   11994:	20003980 	.word	0x20003980
   11998:	00011dc1 	.word	0x00011dc1
   1199c:	00025fce 	.word	0x00025fce

000119a0 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   119a0:	4801      	ldr	r0, [pc, #4]	; (119a8 <log_process_thread_timer_expiry_fn+0x8>)
   119a2:	f00b ba83 	b.w	1ceac <z_impl_k_sem_give>
   119a6:	bf00      	nop
   119a8:	200007ec 	.word	0x200007ec

000119ac <log_core_init>:
	panic_mode = false;
   119ac:	4a0c      	ldr	r2, [pc, #48]	; (119e0 <log_core_init+0x34>)
   119ae:	2300      	movs	r3, #0
{
   119b0:	b510      	push	{r4, lr}
	panic_mode = false;
   119b2:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   119b4:	4a0b      	ldr	r2, [pc, #44]	; (119e4 <log_core_init+0x38>)
   119b6:	6013      	str	r3, [r2, #0]
		timestamp_func = default_get_timestamp;
   119b8:	4b0b      	ldr	r3, [pc, #44]	; (119e8 <log_core_init+0x3c>)
   119ba:	4a0c      	ldr	r2, [pc, #48]	; (119ec <log_core_init+0x40>)
   119bc:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   119be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   119c2:	f000 faef 	bl	11fa4 <log_output_timestamp_freq_set>
		log_msg_pool_init();
   119c6:	f000 fa79 	bl	11ebc <log_msg_pool_init>
		log_list_init(&list);
   119ca:	4809      	ldr	r0, [pc, #36]	; (119f0 <log_core_init+0x44>)
   119cc:	f010 f82c 	bl	21a28 <log_list_init>
}
   119d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   119d4:	4907      	ldr	r1, [pc, #28]	; (119f4 <log_core_init+0x48>)
   119d6:	4808      	ldr	r0, [pc, #32]	; (119f8 <log_core_init+0x4c>)
   119d8:	2308      	movs	r3, #8
   119da:	2248      	movs	r2, #72	; 0x48
   119dc:	f012 bd74 	b.w	244c8 <k_mem_slab_init>
   119e0:	20003060 	.word	0x20003060
   119e4:	20001edc 	.word	0x20001edc
   119e8:	200004b8 	.word	0x200004b8
   119ec:	00021909 	.word	0x00021909
   119f0:	20001ee4 	.word	0x20001ee4
   119f4:	20006ec8 	.word	0x20006ec8
   119f8:	20001eec 	.word	0x20001eec

000119fc <log_init>:
{
   119fc:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   119fe:	4b12      	ldr	r3, [pc, #72]	; (11a48 <log_init+0x4c>)
   11a00:	f3bf 8f5b 	dmb	ish
   11a04:	e853 5f00 	ldrex	r5, [r3]
   11a08:	1c6a      	adds	r2, r5, #1
   11a0a:	e843 2100 	strex	r1, r2, [r3]
   11a0e:	2900      	cmp	r1, #0
   11a10:	d1f8      	bne.n	11a04 <log_init+0x8>
   11a12:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   11a16:	b92d      	cbnz	r5, 11a24 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   11a18:	4c0c      	ldr	r4, [pc, #48]	; (11a4c <log_init+0x50>)
   11a1a:	4e0d      	ldr	r6, [pc, #52]	; (11a50 <log_init+0x54>)
   11a1c:	1b36      	subs	r6, r6, r4
   11a1e:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   11a20:	42b5      	cmp	r5, r6
   11a22:	db00      	blt.n	11a26 <log_init+0x2a>
}
   11a24:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   11a26:	7b23      	ldrb	r3, [r4, #12]
   11a28:	b153      	cbz	r3, 11a40 <log_init+0x44>
			if (backend->api->init != NULL) {
   11a2a:	6823      	ldr	r3, [r4, #0]
   11a2c:	699b      	ldr	r3, [r3, #24]
   11a2e:	b10b      	cbz	r3, 11a34 <log_init+0x38>
				backend->api->init(backend);
   11a30:	4620      	mov	r0, r4
   11a32:	4798      	blx	r3
			log_backend_enable(backend,
   11a34:	6863      	ldr	r3, [r4, #4]
   11a36:	2204      	movs	r2, #4
   11a38:	6819      	ldr	r1, [r3, #0]
   11a3a:	4620      	mov	r0, r4
   11a3c:	f000 fa30 	bl	11ea0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   11a40:	3501      	adds	r5, #1
   11a42:	3410      	adds	r4, #16
   11a44:	e7ec      	b.n	11a20 <log_init+0x24>
   11a46:	bf00      	nop
   11a48:	20001ee0 	.word	0x20001ee0
   11a4c:	00025304 	.word	0x00025304
   11a50:	00025304 	.word	0x00025304

00011a54 <get_msg>:
{
   11a54:	b510      	push	{r4, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   11a56:	f04f 0340 	mov.w	r3, #64	; 0x40
   11a5a:	f3ef 8411 	mrs	r4, BASEPRI
   11a5e:	f383 8812 	msr	BASEPRI_MAX, r3
   11a62:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   11a66:	4804      	ldr	r0, [pc, #16]	; (11a78 <get_msg+0x24>)
   11a68:	f00f ffee 	bl	21a48 <log_list_head_get>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   11a6c:	f384 8811 	msr	BASEPRI, r4
   11a70:	f3bf 8f6f 	isb	sy
}
   11a74:	bd10      	pop	{r4, pc}
   11a76:	bf00      	nop
   11a78:	20001ee4 	.word	0x20001ee4

00011a7c <z_log_notify_backend_enabled>:
{
   11a7c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   11a7e:	4c04      	ldr	r4, [pc, #16]	; (11a90 <z_log_notify_backend_enabled+0x14>)
   11a80:	7822      	ldrb	r2, [r4, #0]
   11a82:	b912      	cbnz	r2, 11a8a <z_log_notify_backend_enabled+0xe>
   11a84:	4803      	ldr	r0, [pc, #12]	; (11a94 <z_log_notify_backend_enabled+0x18>)
   11a86:	f00b fa11 	bl	1ceac <z_impl_k_sem_give>
	backend_attached = true;
   11a8a:	2301      	movs	r3, #1
   11a8c:	7023      	strb	r3, [r4, #0]
}
   11a8e:	bd10      	pop	{r4, pc}
   11a90:	2000305f 	.word	0x2000305f
   11a94:	200007ec 	.word	0x200007ec

00011a98 <z_log_dropped>:
   11a98:	4b0c      	ldr	r3, [pc, #48]	; (11acc <z_log_dropped+0x34>)
   11a9a:	f3bf 8f5b 	dmb	ish
   11a9e:	e853 2f00 	ldrex	r2, [r3]
   11aa2:	3201      	adds	r2, #1
   11aa4:	e843 2100 	strex	r1, r2, [r3]
   11aa8:	2900      	cmp	r1, #0
   11aaa:	d1f8      	bne.n	11a9e <z_log_dropped+0x6>
   11aac:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11ab0:	f3bf 8f5b 	dmb	ish
   11ab4:	4b06      	ldr	r3, [pc, #24]	; (11ad0 <z_log_dropped+0x38>)
   11ab6:	e853 2f00 	ldrex	r2, [r3]
   11aba:	3a01      	subs	r2, #1
   11abc:	e843 2100 	strex	r1, r2, [r3]
   11ac0:	2900      	cmp	r1, #0
   11ac2:	d1f8      	bne.n	11ab6 <z_log_dropped+0x1e>
   11ac4:	f3bf 8f5b 	dmb	ish
}
   11ac8:	4770      	bx	lr
   11aca:	bf00      	nop
   11acc:	20001edc 	.word	0x20001edc
   11ad0:	20001ed8 	.word	0x20001ed8

00011ad4 <z_log_dropped_read_and_clear>:
}
   11ad4:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11ad6:	4b06      	ldr	r3, [pc, #24]	; (11af0 <z_log_dropped_read_and_clear+0x1c>)
   11ad8:	f3bf 8f5b 	dmb	ish
   11adc:	4602      	mov	r2, r0
   11ade:	e853 0f00 	ldrex	r0, [r3]
   11ae2:	e843 2100 	strex	r1, r2, [r3]
   11ae6:	2900      	cmp	r1, #0
   11ae8:	d1f9      	bne.n	11ade <z_log_dropped_read_and_clear+0xa>
   11aea:	f3bf 8f5b 	dmb	ish
   11aee:	4770      	bx	lr
   11af0:	20001edc 	.word	0x20001edc

00011af4 <dropped_notify>:
{
   11af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   11af6:	f7ff ffed 	bl	11ad4 <z_log_dropped_read_and_clear>
   11afa:	4c0a      	ldr	r4, [pc, #40]	; (11b24 <dropped_notify+0x30>)
   11afc:	4d0a      	ldr	r5, [pc, #40]	; (11b28 <dropped_notify+0x34>)
   11afe:	1b2d      	subs	r5, r5, r4
   11b00:	4607      	mov	r7, r0
   11b02:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   11b04:	2600      	movs	r6, #0
   11b06:	42ae      	cmp	r6, r5
   11b08:	db00      	blt.n	11b0c <dropped_notify+0x18>
}
   11b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   11b0c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   11b0e:	795b      	ldrb	r3, [r3, #5]
   11b10:	b12b      	cbz	r3, 11b1e <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
   11b12:	6823      	ldr	r3, [r4, #0]
   11b14:	691b      	ldr	r3, [r3, #16]
   11b16:	b113      	cbz	r3, 11b1e <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
   11b18:	4639      	mov	r1, r7
   11b1a:	4620      	mov	r0, r4
   11b1c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   11b1e:	3601      	adds	r6, #1
   11b20:	3410      	adds	r4, #16
   11b22:	e7f0      	b.n	11b06 <dropped_notify+0x12>
   11b24:	00025304 	.word	0x00025304
   11b28:	00025304 	.word	0x00025304

00011b2c <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   11b2c:	4b16      	ldr	r3, [pc, #88]	; (11b88 <z_log_strdup+0x5c>)
   11b2e:	4298      	cmp	r0, r3
{
   11b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11b32:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   11b34:	d302      	bcc.n	11b3c <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   11b36:	4b15      	ldr	r3, [pc, #84]	; (11b8c <z_log_strdup+0x60>)
   11b38:	4298      	cmp	r0, r3
   11b3a:	d320      	bcc.n	11b7e <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   11b3c:	4814      	ldr	r0, [pc, #80]	; (11b90 <z_log_strdup+0x64>)
   11b3e:	2200      	movs	r2, #0
   11b40:	2300      	movs	r3, #0
   11b42:	a901      	add	r1, sp, #4
   11b44:	f00a fc88 	bl	1c458 <k_mem_slab_alloc>
	if (err != 0) {
   11b48:	4605      	mov	r5, r0
   11b4a:	b9d8      	cbnz	r0, 11b84 <z_log_strdup+0x58>
   11b4c:	2201      	movs	r2, #1
   11b4e:	9b01      	ldr	r3, [sp, #4]
   11b50:	f3bf 8f5b 	dmb	ish
   11b54:	e853 1f00 	ldrex	r1, [r3]
   11b58:	e843 2000 	strex	r0, r2, [r3]
   11b5c:	2800      	cmp	r0, #0
   11b5e:	d1f9      	bne.n	11b54 <z_log_strdup+0x28>
   11b60:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   11b64:	9801      	ldr	r0, [sp, #4]
   11b66:	4621      	mov	r1, r4
   11b68:	2241      	movs	r2, #65	; 0x41
   11b6a:	3004      	adds	r0, #4
   11b6c:	f010 f99b 	bl	21ea6 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   11b70:	9c01      	ldr	r4, [sp, #4]
   11b72:	237e      	movs	r3, #126	; 0x7e
   11b74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   11b78:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	return dup->buf;
   11b7c:	3404      	adds	r4, #4
}
   11b7e:	4620      	mov	r0, r4
   11b80:	b003      	add	sp, #12
   11b82:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
   11b84:	4c03      	ldr	r4, [pc, #12]	; (11b94 <z_log_strdup+0x68>)
   11b86:	e7fa      	b.n	11b7e <z_log_strdup+0x52>
   11b88:	00024f14 	.word	0x00024f14
   11b8c:	00027cec 	.word	0x00027cec
   11b90:	20001eec 	.word	0x20001eec
   11b94:	00025fd6 	.word	0x00025fd6

00011b98 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   11b98:	b150      	cbz	r0, 11bb0 <log_is_strdup+0x18>
   11b9a:	4b06      	ldr	r3, [pc, #24]	; (11bb4 <log_is_strdup+0x1c>)
   11b9c:	4298      	cmp	r0, r3
   11b9e:	d306      	bcc.n	11bae <log_is_strdup+0x16>
   11ba0:	f503 7310 	add.w	r3, r3, #576	; 0x240
   11ba4:	4298      	cmp	r0, r3
   11ba6:	bf2c      	ite	cs
   11ba8:	2000      	movcs	r0, #0
   11baa:	2001      	movcc	r0, #1
   11bac:	4770      	bx	lr
   11bae:	2000      	movs	r0, #0
}
   11bb0:	4770      	bx	lr
   11bb2:	bf00      	nop
   11bb4:	20006ec8 	.word	0x20006ec8

00011bb8 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
   11bb8:	4b43      	ldr	r3, [pc, #268]	; (11cc8 <z_impl_log_process+0x110>)
   11bba:	781b      	ldrb	r3, [r3, #0]
{
   11bbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bc0:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   11bc2:	b903      	cbnz	r3, 11bc6 <z_impl_log_process+0xe>
   11bc4:	b300      	cbz	r0, 11c08 <z_impl_log_process+0x50>
	msg = get_msg();
   11bc6:	f7ff ff45 	bl	11a54 <get_msg>
	if (msg.msg) {
   11bca:	4605      	mov	r5, r0
   11bcc:	b178      	cbz	r0, 11bee <z_impl_log_process+0x36>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11bce:	f3bf 8f5b 	dmb	ish
   11bd2:	4b3e      	ldr	r3, [pc, #248]	; (11ccc <z_impl_log_process+0x114>)
   11bd4:	e853 2f00 	ldrex	r2, [r3]
   11bd8:	3a01      	subs	r2, #1
   11bda:	e843 2100 	strex	r1, r2, [r3]
   11bde:	2900      	cmp	r1, #0
   11be0:	d1f8      	bne.n	11bd4 <z_impl_log_process+0x1c>
   11be2:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
   11be6:	b19c      	cbz	r4, 11c10 <z_impl_log_process+0x58>
			log_msg_put(msg.msg);
   11be8:	4628      	mov	r0, r5
   11bea:	f00f ff55 	bl	21a98 <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
   11bee:	b92c      	cbnz	r4, 11bfc <z_impl_log_process+0x44>
	return dropped_cnt > 0;
   11bf0:	4b37      	ldr	r3, [pc, #220]	; (11cd0 <z_impl_log_process+0x118>)
	if (!bypass && z_log_dropped_pending()) {
   11bf2:	681b      	ldr	r3, [r3, #0]
   11bf4:	2b00      	cmp	r3, #0
   11bf6:	dd01      	ble.n	11bfc <z_impl_log_process+0x44>
		dropped_notify();
   11bf8:	f7ff ff7c 	bl	11af4 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   11bfc:	4835      	ldr	r0, [pc, #212]	; (11cd4 <z_impl_log_process+0x11c>)
   11bfe:	f00f ff21 	bl	21a44 <log_list_head_peek>
   11c02:	1e04      	subs	r4, r0, #0
   11c04:	bf18      	it	ne
   11c06:	2401      	movne	r4, #1
}
   11c08:	4620      	mov	r0, r4
   11c0a:	b003      	add	sp, #12
   11c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   11c10:	4b31      	ldr	r3, [pc, #196]	; (11cd8 <z_impl_log_process+0x120>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
   11c12:	781b      	ldrb	r3, [r3, #0]
   11c14:	b9bb      	cbnz	r3, 11c46 <z_impl_log_process+0x8e>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   11c16:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   11c18:	07db      	lsls	r3, r3, #31
   11c1a:	d414      	bmi.n	11c46 <z_impl_log_process+0x8e>
	msg_str = log_msg_str_get(msg);
   11c1c:	f00f ff4f 	bl	21abe <log_msg_str_get>
   11c20:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   11c22:	4628      	mov	r0, r5
   11c24:	f00f ff16 	bl	21a54 <log_msg_nargs_get>
   11c28:	4601      	mov	r1, r0
   11c2a:	4640      	mov	r0, r8
   11c2c:	f00f fe70 	bl	21910 <z_log_get_s_mask>
   11c30:	4b2a      	ldr	r3, [pc, #168]	; (11cdc <z_impl_log_process+0x124>)
   11c32:	4a2b      	ldr	r2, [pc, #172]	; (11ce0 <z_impl_log_process+0x128>)
		if (!is_rodata(str) && !log_is_strdup(str) &&
   11c34:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 11cf4 <z_impl_log_process+0x13c>
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   11c38:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 11cf8 <z_impl_log_process+0x140>
   11c3c:	1a9b      	subs	r3, r3, r2
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   11c3e:	4606      	mov	r6, r0
   11c40:	ea4f 09d3 	mov.w	r9, r3, lsr #3
	while (mask) {
   11c44:	b936      	cbnz	r6, 11c54 <z_impl_log_process+0x9c>
	return __log_backends_end - __log_backends_start;
   11c46:	4e27      	ldr	r6, [pc, #156]	; (11ce4 <z_impl_log_process+0x12c>)
   11c48:	4f27      	ldr	r7, [pc, #156]	; (11ce8 <z_impl_log_process+0x130>)
   11c4a:	1bbf      	subs	r7, r7, r6
   11c4c:	113f      	asrs	r7, r7, #4
   11c4e:	f04f 0800 	mov.w	r8, #0
   11c52:	e036      	b.n	11cc2 <z_impl_log_process+0x10a>
		idx = 31 - __builtin_clz(mask);
   11c54:	fab6 f786 	clz	r7, r6
   11c58:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   11c5c:	4639      	mov	r1, r7
   11c5e:	4628      	mov	r0, r5
   11c60:	f00f fefb 	bl	21a5a <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   11c64:	4b21      	ldr	r3, [pc, #132]	; (11cec <z_impl_log_process+0x134>)
   11c66:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
   11c68:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   11c6a:	d302      	bcc.n	11c72 <z_impl_log_process+0xba>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   11c6c:	4b20      	ldr	r3, [pc, #128]	; (11cf0 <z_impl_log_process+0x138>)
   11c6e:	4298      	cmp	r0, r3
   11c70:	d316      	bcc.n	11ca0 <z_impl_log_process+0xe8>
   11c72:	4610      	mov	r0, r2
   11c74:	f7ff ff90 	bl	11b98 <log_is_strdup>
   11c78:	b990      	cbnz	r0, 11ca0 <z_impl_log_process+0xe8>
   11c7a:	4552      	cmp	r2, sl
   11c7c:	d010      	beq.n	11ca0 <z_impl_log_process+0xe8>
	return msg->hdr.ids.source_id;
   11c7e:	8969      	ldrh	r1, [r5, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   11c80:	f3c1 1189 	ubfx	r1, r1, #6, #10
   11c84:	f000 f8fe 	bl	11e84 <log_source_name_get>
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   11c88:	ea4f 1389 	mov.w	r3, r9, lsl #6
   11c8c:	f043 0301 	orr.w	r3, r3, #1
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   11c90:	4602      	mov	r2, r0
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   11c92:	f8ad 3000 	strh.w	r3, [sp]
   11c96:	4639      	mov	r1, r7
   11c98:	4643      	mov	r3, r8
   11c9a:	4658      	mov	r0, fp
   11c9c:	f00f fe92 	bl	219c4 <log_3>
		mask &= ~BIT(idx);
   11ca0:	2301      	movs	r3, #1
   11ca2:	fa03 f707 	lsl.w	r7, r3, r7
   11ca6:	ea26 0607 	bic.w	r6, r6, r7
   11caa:	e7cb      	b.n	11c44 <z_impl_log_process+0x8c>
	return backend->cb->active;
   11cac:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
   11cae:	795b      	ldrb	r3, [r3, #5]
   11cb0:	b123      	cbz	r3, 11cbc <z_impl_log_process+0x104>
	backend->api->put(backend, msg);
   11cb2:	6833      	ldr	r3, [r6, #0]
   11cb4:	4629      	mov	r1, r5
   11cb6:	685b      	ldr	r3, [r3, #4]
   11cb8:	4630      	mov	r0, r6
   11cba:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   11cbc:	f108 0801 	add.w	r8, r8, #1
   11cc0:	3610      	adds	r6, #16
   11cc2:	45b8      	cmp	r8, r7
   11cc4:	dbf2      	blt.n	11cac <z_impl_log_process+0xf4>
   11cc6:	e78f      	b.n	11be8 <z_impl_log_process+0x30>
   11cc8:	2000305f 	.word	0x2000305f
   11ccc:	20001ed8 	.word	0x20001ed8
   11cd0:	20001edc 	.word	0x20001edc
   11cd4:	20001ee4 	.word	0x20001ee4
   11cd8:	20003060 	.word	0x20003060
   11cdc:	000252b4 	.word	0x000252b4
   11ce0:	00025224 	.word	0x00025224
   11ce4:	00025304 	.word	0x00025304
   11ce8:	00025304 	.word	0x00025304
   11cec:	00024f14 	.word	0x00024f14
   11cf0:	00027cec 	.word	0x00027cec
   11cf4:	00025fd6 	.word	0x00025fd6
   11cf8:	00025ff0 	.word	0x00025ff0

00011cfc <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   11cfc:	4b29      	ldr	r3, [pc, #164]	; (11da4 <msg_finalize+0xa8>)
{
   11cfe:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
   11d00:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   11d02:	8141      	strh	r1, [r0, #10]
{
   11d04:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   11d06:	4798      	blx	r3
   11d08:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   11d0a:	f04f 0340 	mov.w	r3, #64	; 0x40
   11d0e:	f3ef 8511 	mrs	r5, BASEPRI
   11d12:	f383 8812 	msr	BASEPRI_MAX, r3
   11d16:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11d1a:	4823      	ldr	r0, [pc, #140]	; (11da8 <msg_finalize+0xac>)
   11d1c:	4621      	mov	r1, r4
   11d1e:	f00f fe87 	bl	21a30 <log_list_add_tail>
	__asm__ volatile(
   11d22:	f385 8811 	msr	BASEPRI, r5
   11d26:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11d2a:	f3bf 8f5b 	dmb	ish
   11d2e:	4b1f      	ldr	r3, [pc, #124]	; (11dac <msg_finalize+0xb0>)
   11d30:	e853 2f00 	ldrex	r2, [r3]
   11d34:	3201      	adds	r2, #1
   11d36:	e843 2100 	strex	r1, r2, [r3]
   11d3a:	2900      	cmp	r1, #0
   11d3c:	d1f8      	bne.n	11d30 <msg_finalize+0x34>
   11d3e:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   11d42:	4a1b      	ldr	r2, [pc, #108]	; (11db0 <msg_finalize+0xb4>)
   11d44:	7812      	ldrb	r2, [r2, #0]
   11d46:	b182      	cbz	r2, 11d6a <msg_finalize+0x6e>
	__asm__ volatile(
   11d48:	f04f 0340 	mov.w	r3, #64	; 0x40
   11d4c:	f3ef 8411 	mrs	r4, BASEPRI
   11d50:	f383 8812 	msr	BASEPRI_MAX, r3
   11d54:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   11d58:	2000      	movs	r0, #0
   11d5a:	f7ff ff2d 	bl	11bb8 <z_impl_log_process>
	__asm__ volatile(
   11d5e:	f384 8811 	msr	BASEPRI, r4
   11d62:	f3bf 8f6f 	isb	sy
}
   11d66:	b003      	add	sp, #12
   11d68:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   11d6a:	4a12      	ldr	r2, [pc, #72]	; (11db4 <msg_finalize+0xb8>)
   11d6c:	681b      	ldr	r3, [r3, #0]
   11d6e:	6812      	ldr	r2, [r2, #0]
   11d70:	2a00      	cmp	r2, #0
   11d72:	d0f8      	beq.n	11d66 <msg_finalize+0x6a>
   11d74:	2b01      	cmp	r3, #1
   11d76:	d10a      	bne.n	11d8e <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
   11d78:	2200      	movs	r2, #0
   11d7a:	2300      	movs	r3, #0
   11d7c:	e9cd 2300 	strd	r2, r3, [sp]
   11d80:	480d      	ldr	r0, [pc, #52]	; (11db8 <msg_finalize+0xbc>)
   11d82:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11d86:	2300      	movs	r3, #0
   11d88:	f00b fb50 	bl	1d42c <z_impl_k_timer_start>
   11d8c:	e7eb      	b.n	11d66 <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   11d8e:	2b0a      	cmp	r3, #10
   11d90:	d1e9      	bne.n	11d66 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
   11d92:	4809      	ldr	r0, [pc, #36]	; (11db8 <msg_finalize+0xbc>)
   11d94:	f012 ffb4 	bl	24d00 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   11d98:	4808      	ldr	r0, [pc, #32]	; (11dbc <msg_finalize+0xc0>)
}
   11d9a:	b003      	add	sp, #12
   11d9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   11da0:	f00b b884 	b.w	1ceac <z_impl_k_sem_give>
   11da4:	200004b8 	.word	0x200004b8
   11da8:	20001ee4 	.word	0x20001ee4
   11dac:	20001ed8 	.word	0x20001ed8
   11db0:	20003060 	.word	0x20003060
   11db4:	20001f08 	.word	0x20001f08
   11db8:	20001568 	.word	0x20001568
   11dbc:	200007ec 	.word	0x200007ec

00011dc0 <log_process_thread_func>:
{
   11dc0:	b510      	push	{r4, lr}
	log_init();
   11dc2:	f7ff fe1b 	bl	119fc <log_init>
	return z_impl_z_current_get();
   11dc6:	f00a fff7 	bl	1cdb8 <z_impl_z_current_get>
	proc_tid = process_tid;
   11dca:	4b0c      	ldr	r3, [pc, #48]	; (11dfc <log_process_thread_func+0x3c>)
   11dcc:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   11dce:	b130      	cbz	r0, 11dde <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   11dd0:	4b0b      	ldr	r3, [pc, #44]	; (11e00 <log_process_thread_func+0x40>)
	    process_tid &&
   11dd2:	681b      	ldr	r3, [r3, #0]
   11dd4:	2b09      	cmp	r3, #9
   11dd6:	dd02      	ble.n	11dde <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   11dd8:	480a      	ldr	r0, [pc, #40]	; (11e04 <log_process_thread_func+0x44>)
   11dda:	f00b f867 	bl	1ceac <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   11dde:	4c09      	ldr	r4, [pc, #36]	; (11e04 <log_process_thread_func+0x44>)
   11de0:	2000      	movs	r0, #0
   11de2:	f7ff fee9 	bl	11bb8 <z_impl_log_process>
		if (log_process(false) == false) {
   11de6:	2800      	cmp	r0, #0
   11de8:	d1fa      	bne.n	11de0 <log_process_thread_func+0x20>
   11dea:	f04f 32ff 	mov.w	r2, #4294967295
   11dee:	f04f 33ff 	mov.w	r3, #4294967295
   11df2:	4620      	mov	r0, r4
   11df4:	f00b f880 	bl	1cef8 <z_impl_k_sem_take>
   11df8:	e7f2      	b.n	11de0 <log_process_thread_func+0x20>
   11dfa:	bf00      	nop
   11dfc:	20001f08 	.word	0x20001f08
   11e00:	20001ed8 	.word	0x20001ed8
   11e04:	200007ec 	.word	0x200007ec

00011e08 <z_impl_log_panic>:
{
   11e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   11e0a:	4f0e      	ldr	r7, [pc, #56]	; (11e44 <z_impl_log_panic+0x3c>)
   11e0c:	783d      	ldrb	r5, [r7, #0]
   11e0e:	b975      	cbnz	r5, 11e2e <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
   11e10:	4c0d      	ldr	r4, [pc, #52]	; (11e48 <z_impl_log_panic+0x40>)
   11e12:	4e0e      	ldr	r6, [pc, #56]	; (11e4c <z_impl_log_panic+0x44>)
	log_init();
   11e14:	f7ff fdf2 	bl	119fc <log_init>
   11e18:	1b36      	subs	r6, r6, r4
   11e1a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   11e1c:	42b5      	cmp	r5, r6
   11e1e:	db07      	blt.n	11e30 <z_impl_log_panic+0x28>
   11e20:	2000      	movs	r0, #0
   11e22:	f7ff fec9 	bl	11bb8 <z_impl_log_process>
		while (log_process(false) == true) {
   11e26:	2800      	cmp	r0, #0
   11e28:	d1fa      	bne.n	11e20 <z_impl_log_panic+0x18>
	panic_mode = true;
   11e2a:	2301      	movs	r3, #1
   11e2c:	703b      	strb	r3, [r7, #0]
}
   11e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   11e30:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   11e32:	795b      	ldrb	r3, [r3, #5]
   11e34:	b11b      	cbz	r3, 11e3e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   11e36:	6823      	ldr	r3, [r4, #0]
   11e38:	4620      	mov	r0, r4
   11e3a:	695b      	ldr	r3, [r3, #20]
   11e3c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   11e3e:	3501      	adds	r5, #1
   11e40:	3410      	adds	r4, #16
   11e42:	e7eb      	b.n	11e1c <z_impl_log_panic+0x14>
   11e44:	20003060 	.word	0x20003060
   11e48:	00025304 	.word	0x00025304
   11e4c:	00025304 	.word	0x00025304

00011e50 <log_free>:
{
   11e50:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   11e52:	3804      	subs	r0, #4
   11e54:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11e56:	f3bf 8f5b 	dmb	ish
   11e5a:	e850 3f00 	ldrex	r3, [r0]
   11e5e:	1e5a      	subs	r2, r3, #1
   11e60:	e840 2100 	strex	r1, r2, [r0]
   11e64:	2900      	cmp	r1, #0
   11e66:	d1f8      	bne.n	11e5a <log_free+0xa>
   11e68:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   11e6c:	2b01      	cmp	r3, #1
   11e6e:	d103      	bne.n	11e78 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   11e70:	4803      	ldr	r0, [pc, #12]	; (11e80 <log_free+0x30>)
   11e72:	a901      	add	r1, sp, #4
   11e74:	f012 fb43 	bl	244fe <k_mem_slab_free>
}
   11e78:	b003      	add	sp, #12
   11e7a:	f85d fb04 	ldr.w	pc, [sp], #4
   11e7e:	bf00      	nop
   11e80:	20001eec 	.word	0x20001eec

00011e84 <log_source_name_get>:
   11e84:	4a04      	ldr	r2, [pc, #16]	; (11e98 <log_source_name_get+0x14>)
   11e86:	4b05      	ldr	r3, [pc, #20]	; (11e9c <log_source_name_get+0x18>)
   11e88:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   11e8a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   11e8e:	bf34      	ite	cc
   11e90:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   11e94:	2000      	movcs	r0, #0
}
   11e96:	4770      	bx	lr
   11e98:	00025224 	.word	0x00025224
   11e9c:	00025304 	.word	0x00025304

00011ea0 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   11ea0:	4b05      	ldr	r3, [pc, #20]	; (11eb8 <log_backend_enable+0x18>)

	log_backend_id_set(backend, id);
   11ea2:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
   11ea4:	1ac3      	subs	r3, r0, r3
   11ea6:	111b      	asrs	r3, r3, #4
   11ea8:	3301      	adds	r3, #1
	log_backend_id_set(backend, id);
   11eaa:	7113      	strb	r3, [r2, #4]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);
   11eac:	6843      	ldr	r3, [r0, #4]
	backend->cb->active = true;
   11eae:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
   11eb0:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   11eb2:	715a      	strb	r2, [r3, #5]

	z_log_notify_backend_enabled();
   11eb4:	f7ff bde2 	b.w	11a7c <z_log_notify_backend_enabled>
   11eb8:	00025304 	.word	0x00025304

00011ebc <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   11ebc:	2320      	movs	r3, #32
   11ebe:	4902      	ldr	r1, [pc, #8]	; (11ec8 <log_msg_pool_init+0xc>)
   11ec0:	4802      	ldr	r0, [pc, #8]	; (11ecc <log_msg_pool_init+0x10>)
   11ec2:	461a      	mov	r2, r3
   11ec4:	f012 bb00 	b.w	244c8 <k_mem_slab_init>
   11ec8:	20007108 	.word	0x20007108
   11ecc:	20001f0c 	.word	0x20001f0c

00011ed0 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   11ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
   11ed2:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   11ed4:	4d09      	ldr	r5, [pc, #36]	; (11efc <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   11ed6:	9301      	str	r3, [sp, #4]
   11ed8:	2001      	movs	r0, #1
   11eda:	f7ff fe6d 	bl	11bb8 <z_impl_log_process>
   11ede:	4604      	mov	r4, r0
			z_log_dropped();
   11ee0:	f7ff fdda 	bl	11a98 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   11ee4:	2200      	movs	r2, #0
   11ee6:	2300      	movs	r3, #0
   11ee8:	a901      	add	r1, sp, #4
   11eea:	4628      	mov	r0, r5
   11eec:	f00a fab4 	bl	1c458 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   11ef0:	b108      	cbz	r0, 11ef6 <log_msg_no_space_handle+0x26>
   11ef2:	2c00      	cmp	r4, #0
   11ef4:	d1f0      	bne.n	11ed8 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   11ef6:	9801      	ldr	r0, [sp, #4]
   11ef8:	b003      	add	sp, #12
   11efa:	bd30      	pop	{r4, r5, pc}
   11efc:	20001f0c 	.word	0x20001f0c

00011f00 <log_msg_chunk_alloc>:
{
   11f00:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
   11f02:	2300      	movs	r3, #0
   11f04:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   11f06:	4807      	ldr	r0, [pc, #28]	; (11f24 <log_msg_chunk_alloc+0x24>)
   11f08:	2200      	movs	r2, #0
   11f0a:	2300      	movs	r3, #0
   11f0c:	a901      	add	r1, sp, #4
   11f0e:	f00a faa3 	bl	1c458 <k_mem_slab_alloc>
	if (err != 0) {
   11f12:	b110      	cbz	r0, 11f1a <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   11f14:	f7ff ffdc 	bl	11ed0 <log_msg_no_space_handle>
   11f18:	9001      	str	r0, [sp, #4]
}
   11f1a:	9801      	ldr	r0, [sp, #4]
   11f1c:	b003      	add	sp, #12
   11f1e:	f85d fb04 	ldr.w	pc, [sp], #4
   11f22:	bf00      	nop
   11f24:	20001f0c 	.word	0x20001f0c

00011f28 <msg_free>:
{
   11f28:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   11f2a:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   11f2c:	7a45      	ldrb	r5, [r0, #9]
{
   11f2e:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
   11f30:	092d      	lsrs	r5, r5, #4
{
   11f32:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   11f34:	07d8      	lsls	r0, r3, #31
   11f36:	d41c      	bmi.n	11f72 <msg_free+0x4a>
   11f38:	b1dd      	cbz	r5, 11f72 <msg_free+0x4a>
		uint32_t smask = 0U;
   11f3a:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
   11f3c:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   11f3e:	9801      	ldr	r0, [sp, #4]
   11f40:	4631      	mov	r1, r6
   11f42:	f00f fd8a 	bl	21a5a <log_msg_arg_get>
   11f46:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   11f48:	f7ff fe26 	bl	11b98 <log_is_strdup>
   11f4c:	b170      	cbz	r0, 11f6c <msg_free+0x44>
				if (smask == 0U) {
   11f4e:	b934      	cbnz	r4, 11f5e <msg_free+0x36>
					smask = z_log_get_s_mask(
   11f50:	9b01      	ldr	r3, [sp, #4]
   11f52:	4629      	mov	r1, r5
   11f54:	6918      	ldr	r0, [r3, #16]
   11f56:	f00f fcdb 	bl	21910 <z_log_get_s_mask>
					if (smask == 0U) {
   11f5a:	4604      	mov	r4, r0
   11f5c:	b148      	cbz	r0, 11f72 <msg_free+0x4a>
				if (smask & BIT(i)) {
   11f5e:	fa24 f306 	lsr.w	r3, r4, r6
   11f62:	07d9      	lsls	r1, r3, #31
   11f64:	d502      	bpl.n	11f6c <msg_free+0x44>
					log_free(buf);
   11f66:	4638      	mov	r0, r7
   11f68:	f7ff ff72 	bl	11e50 <log_free>
		for (i = 0U; i < nargs; i++) {
   11f6c:	3601      	adds	r6, #1
   11f6e:	42ae      	cmp	r6, r5
   11f70:	d3e5      	bcc.n	11f3e <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
   11f72:	9b01      	ldr	r3, [sp, #4]
   11f74:	7a1a      	ldrb	r2, [r3, #8]
   11f76:	0792      	lsls	r2, r2, #30
   11f78:	d504      	bpl.n	11f84 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
   11f7a:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   11f7c:	4c08      	ldr	r4, [pc, #32]	; (11fa0 <msg_free+0x78>)
   11f7e:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   11f80:	9b03      	ldr	r3, [sp, #12]
   11f82:	b92b      	cbnz	r3, 11f90 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   11f84:	4806      	ldr	r0, [pc, #24]	; (11fa0 <msg_free+0x78>)
   11f86:	a901      	add	r1, sp, #4
   11f88:	f012 fab9 	bl	244fe <k_mem_slab_free>
}
   11f8c:	b005      	add	sp, #20
   11f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   11f90:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   11f92:	a903      	add	r1, sp, #12
   11f94:	4620      	mov	r0, r4
   11f96:	f012 fab2 	bl	244fe <k_mem_slab_free>
		cont = next;
   11f9a:	9503      	str	r5, [sp, #12]
   11f9c:	e7f0      	b.n	11f80 <msg_free+0x58>
   11f9e:	bf00      	nop
   11fa0:	20001f0c 	.word	0x20001f0c

00011fa4 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   11fa4:	4a08      	ldr	r2, [pc, #32]	; (11fc8 <log_output_timestamp_freq_set+0x24>)
{
   11fa6:	b510      	push	{r4, lr}
	timestamp_div = 1U;
   11fa8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   11faa:	4c08      	ldr	r4, [pc, #32]	; (11fcc <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   11fac:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   11fae:	2100      	movs	r1, #0
   11fb0:	42a0      	cmp	r0, r4
   11fb2:	d804      	bhi.n	11fbe <log_output_timestamp_freq_set+0x1a>
   11fb4:	b101      	cbz	r1, 11fb8 <log_output_timestamp_freq_set+0x14>
   11fb6:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   11fb8:	4b05      	ldr	r3, [pc, #20]	; (11fd0 <log_output_timestamp_freq_set+0x2c>)
   11fba:	6018      	str	r0, [r3, #0]
}
   11fbc:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   11fbe:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   11fc0:	005b      	lsls	r3, r3, #1
   11fc2:	2101      	movs	r1, #1
   11fc4:	e7f4      	b.n	11fb0 <log_output_timestamp_freq_set+0xc>
   11fc6:	bf00      	nop
   11fc8:	20001f2c 	.word	0x20001f2c
   11fcc:	000f4240 	.word	0x000f4240
   11fd0:	20001f28 	.word	0x20001f28

00011fd4 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   11fd4:	4801      	ldr	r0, [pc, #4]	; (11fdc <nrf_cc3xx_platform_abort_init+0x8>)
   11fd6:	f00b bcc7 	b.w	1d968 <nrf_cc3xx_platform_set_abort>
   11fda:	bf00      	nop
   11fdc:	0002561c 	.word	0x0002561c

00011fe0 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   11fe0:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   11fe2:	b1d0      	cbz	r0, 1201a <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   11fe4:	6843      	ldr	r3, [r0, #4]
   11fe6:	2b04      	cmp	r3, #4
   11fe8:	d111      	bne.n	1200e <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   11fea:	2200      	movs	r2, #0
   11fec:	6803      	ldr	r3, [r0, #0]
   11fee:	f3bf 8f5b 	dmb	ish
   11ff2:	e853 1f00 	ldrex	r1, [r3]
   11ff6:	2901      	cmp	r1, #1
   11ff8:	d103      	bne.n	12002 <mutex_unlock_platform+0x22>
   11ffa:	e843 2000 	strex	r0, r2, [r3]
   11ffe:	2800      	cmp	r0, #0
   12000:	d1f7      	bne.n	11ff2 <mutex_unlock_platform+0x12>
   12002:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12006:	4807      	ldr	r0, [pc, #28]	; (12024 <mutex_unlock_platform+0x44>)
   12008:	bf08      	it	eq
   1200a:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   1200c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1200e:	b13b      	cbz	r3, 12020 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   12010:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   12012:	f00a facf 	bl	1c5b4 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   12016:	2000      	movs	r0, #0
   12018:	e7f8      	b.n	1200c <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1201a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1201e:	e7f5      	b.n	1200c <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   12020:	4801      	ldr	r0, [pc, #4]	; (12028 <mutex_unlock_platform+0x48>)
   12022:	e7f3      	b.n	1200c <mutex_unlock_platform+0x2c>
   12024:	ffff8fe9 	.word	0xffff8fe9
   12028:	ffff8fea 	.word	0xffff8fea

0001202c <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1202c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   1202e:	4604      	mov	r4, r0
   12030:	b918      	cbnz	r0, 1203a <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   12032:	4b0d      	ldr	r3, [pc, #52]	; (12068 <mutex_free_platform+0x3c>)
   12034:	480d      	ldr	r0, [pc, #52]	; (1206c <mutex_free_platform+0x40>)
   12036:	685b      	ldr	r3, [r3, #4]
   12038:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   1203a:	6861      	ldr	r1, [r4, #4]
   1203c:	2908      	cmp	r1, #8
   1203e:	d00d      	beq.n	1205c <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12040:	f031 0304 	bics.w	r3, r1, #4
   12044:	d00a      	beq.n	1205c <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   12046:	f011 0102 	ands.w	r1, r1, #2
   1204a:	d008      	beq.n	1205e <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   1204c:	4808      	ldr	r0, [pc, #32]	; (12070 <mutex_free_platform+0x44>)
   1204e:	4621      	mov	r1, r4
   12050:	f012 fa55 	bl	244fe <k_mem_slab_free>
        mutex->mutex = NULL;
   12054:	2300      	movs	r3, #0
   12056:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   12058:	2300      	movs	r3, #0
   1205a:	6063      	str	r3, [r4, #4]
}
   1205c:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   1205e:	6820      	ldr	r0, [r4, #0]
   12060:	2214      	movs	r2, #20
   12062:	f00f ff81 	bl	21f68 <memset>
   12066:	e7f7      	b.n	12058 <mutex_free_platform+0x2c>
   12068:	200005c4 	.word	0x200005c4
   1206c:	00026034 	.word	0x00026034
   12070:	20001f30 	.word	0x20001f30

00012074 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12074:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   12076:	4604      	mov	r4, r0
   12078:	b918      	cbnz	r0, 12082 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   1207a:	4b16      	ldr	r3, [pc, #88]	; (120d4 <mutex_init_platform+0x60>)
   1207c:	4816      	ldr	r0, [pc, #88]	; (120d8 <mutex_init_platform+0x64>)
   1207e:	685b      	ldr	r3, [r3, #4]
   12080:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   12082:	6863      	ldr	r3, [r4, #4]
   12084:	2b04      	cmp	r3, #4
   12086:	d023      	beq.n	120d0 <mutex_init_platform+0x5c>
   12088:	2b08      	cmp	r3, #8
   1208a:	d021      	beq.n	120d0 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   1208c:	b9cb      	cbnz	r3, 120c2 <mutex_init_platform+0x4e>
   1208e:	6823      	ldr	r3, [r4, #0]
   12090:	b9bb      	cbnz	r3, 120c2 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   12092:	4812      	ldr	r0, [pc, #72]	; (120dc <mutex_init_platform+0x68>)
   12094:	f04f 32ff 	mov.w	r2, #4294967295
   12098:	f04f 33ff 	mov.w	r3, #4294967295
   1209c:	4621      	mov	r1, r4
   1209e:	f00a f9db 	bl	1c458 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   120a2:	b908      	cbnz	r0, 120a8 <mutex_init_platform+0x34>
   120a4:	6823      	ldr	r3, [r4, #0]
   120a6:	b91b      	cbnz	r3, 120b0 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   120a8:	4b0a      	ldr	r3, [pc, #40]	; (120d4 <mutex_init_platform+0x60>)
   120aa:	480d      	ldr	r0, [pc, #52]	; (120e0 <mutex_init_platform+0x6c>)
   120ac:	685b      	ldr	r3, [r3, #4]
   120ae:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   120b0:	6820      	ldr	r0, [r4, #0]
   120b2:	2214      	movs	r2, #20
   120b4:	2100      	movs	r1, #0
   120b6:	f00f ff57 	bl	21f68 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   120ba:	6863      	ldr	r3, [r4, #4]
   120bc:	f043 0302 	orr.w	r3, r3, #2
   120c0:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   120c2:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   120c4:	f012 fa44 	bl	24550 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   120c8:	6863      	ldr	r3, [r4, #4]
   120ca:	f043 0301 	orr.w	r3, r3, #1
   120ce:	6063      	str	r3, [r4, #4]
}
   120d0:	bd10      	pop	{r4, pc}
   120d2:	bf00      	nop
   120d4:	200005c4 	.word	0x200005c4
   120d8:	00026034 	.word	0x00026034
   120dc:	20001f30 	.word	0x20001f30
   120e0:	0002605a 	.word	0x0002605a

000120e4 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   120e4:	b508      	push	{r3, lr}
    if(mutex == NULL) {
   120e6:	b308      	cbz	r0, 1212c <mutex_lock_platform+0x48>
    switch (mutex->flags) {
   120e8:	6843      	ldr	r3, [r0, #4]
   120ea:	2b04      	cmp	r3, #4
   120ec:	d110      	bne.n	12110 <mutex_lock_platform+0x2c>
   120ee:	2201      	movs	r2, #1
   120f0:	6803      	ldr	r3, [r0, #0]
   120f2:	f3bf 8f5b 	dmb	ish
   120f6:	e853 1f00 	ldrex	r1, [r3]
   120fa:	2900      	cmp	r1, #0
   120fc:	d103      	bne.n	12106 <mutex_lock_platform+0x22>
   120fe:	e843 2000 	strex	r0, r2, [r3]
   12102:	2800      	cmp	r0, #0
   12104:	d1f7      	bne.n	120f6 <mutex_lock_platform+0x12>
   12106:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1210a:	d10b      	bne.n	12124 <mutex_lock_platform+0x40>
   1210c:	2000      	movs	r0, #0
}
   1210e:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12110:	b153      	cbz	r3, 12128 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   12112:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   12114:	f04f 32ff 	mov.w	r2, #4294967295
   12118:	f04f 33ff 	mov.w	r3, #4294967295
   1211c:	f00a f9cc 	bl	1c4b8 <z_impl_k_mutex_lock>
        if (ret == 0) {
   12120:	2800      	cmp	r0, #0
   12122:	d0f3      	beq.n	1210c <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   12124:	4803      	ldr	r0, [pc, #12]	; (12134 <mutex_lock_platform+0x50>)
   12126:	e7f2      	b.n	1210e <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   12128:	4803      	ldr	r0, [pc, #12]	; (12138 <mutex_lock_platform+0x54>)
   1212a:	e7f0      	b.n	1210e <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1212c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   12130:	e7ed      	b.n	1210e <mutex_lock_platform+0x2a>
   12132:	bf00      	nop
   12134:	ffff8fe9 	.word	0xffff8fe9
   12138:	ffff8fea 	.word	0xffff8fea

0001213c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   1213c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   1213e:	4906      	ldr	r1, [pc, #24]	; (12158 <nrf_cc3xx_platform_mutex_init+0x1c>)
   12140:	4806      	ldr	r0, [pc, #24]	; (1215c <nrf_cc3xx_platform_mutex_init+0x20>)
   12142:	2340      	movs	r3, #64	; 0x40
   12144:	2214      	movs	r2, #20
   12146:	f012 f9bf 	bl	244c8 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   1214a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   1214e:	4904      	ldr	r1, [pc, #16]	; (12160 <nrf_cc3xx_platform_mutex_init+0x24>)
   12150:	4804      	ldr	r0, [pc, #16]	; (12164 <nrf_cc3xx_platform_mutex_init+0x28>)
   12152:	f00b bcc1 	b.w	1dad8 <nrf_cc3xx_platform_set_mutexes>
   12156:	bf00      	nop
   12158:	20001f4c 	.word	0x20001f4c
   1215c:	20001f30 	.word	0x20001f30
   12160:	00025634 	.word	0x00025634
   12164:	00025624 	.word	0x00025624

00012168 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   12168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1216c:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   12170:	f019 0808 	ands.w	r8, r9, #8
{
   12174:	4604      	mov	r4, r0
   12176:	4693      	mov	fp, r2
	if (processing) {
   12178:	d00d      	beq.n	12196 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   1217a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   1217c:	bf0c      	ite	eq
   1217e:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   12182:	f049 0920 	orrne.w	r9, r9, #32
   12186:	f8a0 9018 	strh.w	r9, [r0, #24]
   1218a:	f38b 8811 	msr	BASEPRI, fp
   1218e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   12192:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12196:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   1219a:	2902      	cmp	r1, #2
   1219c:	d107      	bne.n	121ae <process_event+0x46>
			evt = process_recheck(mgr);
   1219e:	4620      	mov	r0, r4
   121a0:	f00f fd67 	bl	21c72 <process_recheck>
		if (evt == EVT_NOP) {
   121a4:	2800      	cmp	r0, #0
   121a6:	d0f0      	beq.n	1218a <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   121a8:	2801      	cmp	r0, #1
   121aa:	8b23      	ldrh	r3, [r4, #24]
   121ac:	d150      	bne.n	12250 <process_event+0xe8>
			res = mgr->last_res;
   121ae:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   121b0:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   121b2:	2f00      	cmp	r7, #0
   121b4:	da15      	bge.n	121e2 <process_event+0x7a>
		*clients = mgr->clients;
   121b6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   121b8:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   121bc:	e9c4 8800 	strd	r8, r8, [r4]
   121c0:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   121c4:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   121c6:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   121c8:	8b21      	ldrh	r1, [r4, #24]
   121ca:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   121ce:	45ca      	cmp	sl, r9
   121d0:	d002      	beq.n	121d8 <process_event+0x70>
		if (do_monitors
   121d2:	68a3      	ldr	r3, [r4, #8]
   121d4:	2b00      	cmp	r3, #0
   121d6:	d15c      	bne.n	12292 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   121d8:	b90d      	cbnz	r5, 121de <process_event+0x76>
		    || (transit != NULL)) {
   121da:	2e00      	cmp	r6, #0
   121dc:	d074      	beq.n	122c8 <process_event+0x160>
   121de:	2300      	movs	r3, #0
   121e0:	e058      	b.n	12294 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   121e2:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   121e6:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   121e8:	2a01      	cmp	r2, #1
   121ea:	d820      	bhi.n	1222e <process_event+0xc6>
		*clients = mgr->clients;
   121ec:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   121f0:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   121f2:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   121f4:	b289      	uxth	r1, r1
	list->tail = NULL;
   121f6:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   121fa:	d10c      	bne.n	12216 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   121fc:	2d00      	cmp	r5, #0
   121fe:	462b      	mov	r3, r5
   12200:	bf38      	it	cc
   12202:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12204:	b12b      	cbz	r3, 12212 <process_event+0xaa>
				mgr->refs += 1U;
   12206:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12208:	681b      	ldr	r3, [r3, #0]
   1220a:	3201      	adds	r2, #1
   1220c:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1220e:	2b00      	cmp	r3, #0
   12210:	d1f8      	bne.n	12204 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12212:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   12216:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   12218:	4620      	mov	r0, r4
   1221a:	f00f fd2a 	bl	21c72 <process_recheck>
   1221e:	4606      	mov	r6, r0
   12220:	2800      	cmp	r0, #0
   12222:	d0d1      	beq.n	121c8 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12224:	8b23      	ldrh	r3, [r4, #24]
   12226:	f043 0320 	orr.w	r3, r3, #32
   1222a:	8323      	strh	r3, [r4, #24]
   1222c:	e7cb      	b.n	121c6 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1222e:	2b04      	cmp	r3, #4
   12230:	d10c      	bne.n	1224c <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12232:	f021 0107 	bic.w	r1, r1, #7
   12236:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12238:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   1223a:	4620      	mov	r0, r4
   1223c:	f00f fd19 	bl	21c72 <process_recheck>
   12240:	4605      	mov	r5, r0
   12242:	2800      	cmp	r0, #0
   12244:	d0bf      	beq.n	121c6 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12246:	f041 0120 	orr.w	r1, r1, #32
   1224a:	8321      	strh	r1, [r4, #24]
   1224c:	2500      	movs	r5, #0
   1224e:	e7ba      	b.n	121c6 <process_event+0x5e>
		} else if (evt == EVT_START) {
   12250:	2803      	cmp	r0, #3
   12252:	d109      	bne.n	12268 <process_event+0x100>
			transit = mgr->transitions->start;
   12254:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12256:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   1225a:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1225c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   12260:	8323      	strh	r3, [r4, #24]
}
   12262:	2500      	movs	r5, #0
		res = 0;
   12264:	462f      	mov	r7, r5
   12266:	e7af      	b.n	121c8 <process_event+0x60>
		} else if (evt == EVT_STOP) {
   12268:	2804      	cmp	r0, #4
   1226a:	d106      	bne.n	1227a <process_event+0x112>
			transit = mgr->transitions->stop;
   1226c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1226e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   12272:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12274:	f043 0304 	orr.w	r3, r3, #4
   12278:	e7f2      	b.n	12260 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   1227a:	2805      	cmp	r0, #5
   1227c:	d106      	bne.n	1228c <process_event+0x124>
			transit = mgr->transitions->reset;
   1227e:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12280:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   12284:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12286:	f043 0305 	orr.w	r3, r3, #5
   1228a:	e7e9      	b.n	12260 <process_event+0xf8>
   1228c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   1228e:	462e      	mov	r6, r5
   12290:	e7e8      	b.n	12264 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   12292:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   12294:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   12298:	8321      	strh	r1, [r4, #24]
   1229a:	f38b 8811 	msr	BASEPRI, fp
   1229e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   122a2:	bb03      	cbnz	r3, 122e6 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   122a4:	2d00      	cmp	r5, #0
   122a6:	d133      	bne.n	12310 <process_event+0x1a8>
			if (transit != NULL) {
   122a8:	b116      	cbz	r6, 122b0 <process_event+0x148>
				transit(mgr, transition_complete);
   122aa:	4921      	ldr	r1, [pc, #132]	; (12330 <process_event+0x1c8>)
   122ac:	4620      	mov	r0, r4
   122ae:	47b0      	blx	r6
	__asm__ volatile(
   122b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   122b4:	f3ef 8b11 	mrs	fp, BASEPRI
   122b8:	f383 8812 	msr	BASEPRI_MAX, r3
   122bc:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   122c0:	8b23      	ldrh	r3, [r4, #24]
   122c2:	f023 0308 	bic.w	r3, r3, #8
   122c6:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   122c8:	8b23      	ldrh	r3, [r4, #24]
   122ca:	06da      	lsls	r2, r3, #27
   122cc:	d528      	bpl.n	12320 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   122ce:	f023 0310 	bic.w	r3, r3, #16
   122d2:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   122d4:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   122d6:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   122da:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   122de:	2900      	cmp	r1, #0
   122e0:	f47f af5b 	bne.w	1219a <process_event+0x32>
out:
   122e4:	e751      	b.n	1218a <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   122e6:	68a1      	ldr	r1, [r4, #8]
   122e8:	2900      	cmp	r1, #0
   122ea:	d0db      	beq.n	122a4 <process_event+0x13c>
	return node->next;
   122ec:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   122ee:	f8d1 b004 	ldr.w	fp, [r1, #4]
   122f2:	2b00      	cmp	r3, #0
   122f4:	bf38      	it	cc
   122f6:	2300      	movcc	r3, #0
   122f8:	4699      	mov	r9, r3
   122fa:	4652      	mov	r2, sl
   122fc:	463b      	mov	r3, r7
   122fe:	4620      	mov	r0, r4
   12300:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12302:	f1b9 0f00 	cmp.w	r9, #0
   12306:	d0cd      	beq.n	122a4 <process_event+0x13c>
   12308:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1230c:	4649      	mov	r1, r9
   1230e:	e7ee      	b.n	122ee <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   12310:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   12312:	463b      	mov	r3, r7
   12314:	4652      	mov	r2, sl
   12316:	4620      	mov	r0, r4
   12318:	682d      	ldr	r5, [r5, #0]
   1231a:	f00f fcc6 	bl	21caa <notify_one>
   1231e:	e7c1      	b.n	122a4 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   12320:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   12324:	bf1e      	ittt	ne
   12326:	f023 0320 	bicne.w	r3, r3, #32
   1232a:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   1232c:	2102      	movne	r1, #2
   1232e:	e7d2      	b.n	122d6 <process_event+0x16e>
   12330:	00021cd7 	.word	0x00021cd7

00012334 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   12334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12336:	4605      	mov	r5, r0
   12338:	f04f 0340 	mov.w	r3, #64	; 0x40
   1233c:	f3ef 8611 	mrs	r6, BASEPRI
   12340:	f383 8812 	msr	BASEPRI_MAX, r3
   12344:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12348:	4b0b      	ldr	r3, [pc, #44]	; (12378 <pm_state_notify+0x44>)
   1234a:	681c      	ldr	r4, [r3, #0]
   1234c:	2c00      	cmp	r4, #0
   1234e:	bf38      	it	cc
   12350:	2400      	movcc	r4, #0
   12352:	b15c      	cbz	r4, 1236c <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   12354:	4f09      	ldr	r7, [pc, #36]	; (1237c <pm_state_notify+0x48>)
			callback = notifier->state_exit;
   12356:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1235a:	2d00      	cmp	r5, #0
   1235c:	bf08      	it	eq
   1235e:	4613      	moveq	r3, r2
		if (callback) {
   12360:	b10b      	cbz	r3, 12366 <pm_state_notify+0x32>
			callback(z_power_state.state);
   12362:	7838      	ldrb	r0, [r7, #0]
   12364:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12366:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12368:	2c00      	cmp	r4, #0
   1236a:	d1f4      	bne.n	12356 <pm_state_notify+0x22>
	__asm__ volatile(
   1236c:	f386 8811 	msr	BASEPRI, r6
   12370:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   12374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12376:	bf00      	nop
   12378:	2000244c 	.word	0x2000244c
   1237c:	20002454 	.word	0x20002454

00012380 <pm_system_resume>:

void pm_system_resume(void)
{
   12380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   12382:	4b0f      	ldr	r3, [pc, #60]	; (123c0 <pm_system_resume+0x40>)
   12384:	681a      	ldr	r2, [r3, #0]
   12386:	b9ba      	cbnz	r2, 123b8 <pm_system_resume+0x38>
		post_ops_done = 1;
   12388:	2201      	movs	r2, #1
   1238a:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
   1238c:	4a0d      	ldr	r2, [pc, #52]	; (123c4 <pm_system_resume+0x44>)
   1238e:	ca07      	ldmia	r2, {r0, r1, r2}
   12390:	ab01      	add	r3, sp, #4
   12392:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   12396:	4a0c      	ldr	r2, [pc, #48]	; (123c8 <pm_system_resume+0x48>)
   12398:	b14a      	cbz	r2, 123ae <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
   1239a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1239e:	f00f fdff 	bl	21fa0 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   123a2:	2000      	movs	r0, #0
	}
}
   123a4:	b005      	add	sp, #20
   123a6:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
   123aa:	f7ff bfc3 	b.w	12334 <pm_state_notify>
   123ae:	f382 8811 	msr	BASEPRI, r2
   123b2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   123b6:	e7f4      	b.n	123a2 <pm_system_resume+0x22>
}
   123b8:	b005      	add	sp, #20
   123ba:	f85d fb04 	ldr.w	pc, [sp], #4
   123be:	bf00      	nop
   123c0:	200004dc 	.word	0x200004dc
   123c4:	20002454 	.word	0x20002454
   123c8:	00021fa1 	.word	0x00021fa1

000123cc <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   123cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   123ce:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
   123d0:	466e      	mov	r6, sp
   123d2:	4601      	mov	r1, r0
{
   123d4:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   123d6:	4630      	mov	r0, r6
   123d8:	f00f fcf6 	bl	21dc8 <pm_policy_next_state>
   123dc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   123e0:	4c17      	ldr	r4, [pc, #92]	; (12440 <pm_system_suspend+0x74>)
   123e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   123e6:	7820      	ldrb	r0, [r4, #0]
   123e8:	b340      	cbz	r0, 1243c <pm_system_suspend+0x70>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
   123ea:	4b16      	ldr	r3, [pc, #88]	; (12444 <pm_system_suspend+0x78>)
   123ec:	2100      	movs	r1, #0
   123ee:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   123f0:	1c6b      	adds	r3, r5, #1
   123f2:	d00e      	beq.n	12412 <pm_system_suspend+0x46>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   123f4:	4814      	ldr	r0, [pc, #80]	; (12448 <pm_system_suspend+0x7c>)
   123f6:	4617      	mov	r7, r2
   123f8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   123fc:	2100      	movs	r1, #0
   123fe:	4a13      	ldr	r2, [pc, #76]	; (1244c <pm_system_suspend+0x80>)
   12400:	2300      	movs	r3, #0
   12402:	fbe6 0107 	umlal	r0, r1, r6, r7
   12406:	f7ee fe7b 	bl	1100 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   1240a:	2101      	movs	r1, #1
   1240c:	1a28      	subs	r0, r5, r0
   1240e:	f012 fc20 	bl	24c52 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   12412:	f00a fa27 	bl	1c864 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   12416:	2001      	movs	r0, #1
   12418:	f7ff ff8c 	bl	12334 <pm_state_notify>
	pm_state_set(z_power_state);
   1241c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   12420:	ab05      	add	r3, sp, #20
   12422:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   12426:	4a0a      	ldr	r2, [pc, #40]	; (12450 <pm_system_suspend+0x84>)
   12428:	b11a      	cbz	r2, 12432 <pm_system_suspend+0x66>
		pm_power_state_set(info);
   1242a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1242e:	f00f fda4 	bl	21f7a <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   12432:	f7ff ffa5 	bl	12380 <pm_system_resume>
	k_sched_unlock();
   12436:	f00a fbef 	bl	1cc18 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
   1243a:	7820      	ldrb	r0, [r4, #0]
}
   1243c:	b009      	add	sp, #36	; 0x24
   1243e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12440:	20002454 	.word	0x20002454
   12444:	200004dc 	.word	0x200004dc
   12448:	000f423f 	.word	0x000f423f
   1244c:	000f4240 	.word	0x000f4240
   12450:	00021f7b 	.word	0x00021f7b

00012454 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   12454:	680b      	ldr	r3, [r1, #0]
   12456:	3301      	adds	r3, #1
   12458:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   1245a:	4b01      	ldr	r3, [pc, #4]	; (12460 <char_out+0xc>)
   1245c:	681b      	ldr	r3, [r3, #0]
   1245e:	4718      	bx	r3
   12460:	200004e0 	.word	0x200004e0

00012464 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   12464:	b507      	push	{r0, r1, r2, lr}
   12466:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   12468:	2100      	movs	r1, #0
{
   1246a:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   1246c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   1246e:	4803      	ldr	r0, [pc, #12]	; (1247c <vprintk+0x18>)
   12470:	a901      	add	r1, sp, #4
   12472:	f7fe fd81 	bl	10f78 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   12476:	b003      	add	sp, #12
   12478:	f85d fb04 	ldr.w	pc, [sp], #4
   1247c:	00012455 	.word	0x00012455

00012480 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   12480:	b530      	push	{r4, r5, lr}
   12482:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   12484:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   12488:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   1248a:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   1248c:	a901      	add	r1, sp, #4
   1248e:	4805      	ldr	r0, [pc, #20]	; (124a4 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   12490:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   12492:	f7fe fd71 	bl	10f78 <cbvprintf>

	if (ctx.count < ctx.max) {
   12496:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   1249a:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   1249c:	bfb8      	it	lt
   1249e:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   124a0:	b005      	add	sp, #20
   124a2:	bd30      	pop	{r4, r5, pc}
   124a4:	00021dd7 	.word	0x00021dd7

000124a8 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

FUNC_NORETURN void sys_reboot(int type)
{
   124a8:	b508      	push	{r3, lr}
   124aa:	4604      	mov	r4, r0
	__asm__ volatile(
   124ac:	f04f 0240 	mov.w	r2, #64	; 0x40
   124b0:	f3ef 8311 	mrs	r3, BASEPRI
   124b4:	f382 8812 	msr	BASEPRI_MAX, r2
   124b8:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   124bc:	f011 ff0f 	bl	242de <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   124c0:	4620      	mov	r0, r4
   124c2:	f000 fd6b 	bl	12f9c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   124c6:	4803      	ldr	r0, [pc, #12]	; (124d4 <sys_reboot+0x2c>)
   124c8:	f00f fc98 	bl	21dfc <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   124cc:	f000 f80a 	bl	124e4 <arch_cpu_idle>
   124d0:	e7fc      	b.n	124cc <sys_reboot+0x24>
   124d2:	bf00      	nop
   124d4:	0002608d 	.word	0x0002608d

000124d8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   124d8:	4901      	ldr	r1, [pc, #4]	; (124e0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   124da:	2210      	movs	r2, #16
	str	r2, [r1]
   124dc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   124de:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   124e0:	e000ed10 	.word	0xe000ed10

000124e4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   124e4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   124e6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   124e8:	f380 8811 	msr	BASEPRI, r0
	isb
   124ec:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   124f0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   124f4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   124f6:	b662      	cpsie	i
	isb
   124f8:	f3bf 8f6f 	isb	sy

	bx	lr
   124fc:	4770      	bx	lr
   124fe:	bf00      	nop

00012500 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   12500:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   12502:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   12504:	f381 8811 	msr	BASEPRI, r1

	wfe
   12508:	bf20      	wfe

	msr	BASEPRI, r0
   1250a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1250e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   12510:	4770      	bx	lr
   12512:	bf00      	nop

00012514 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   12514:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   12516:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   12518:	4a0b      	ldr	r2, [pc, #44]	; (12548 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1251a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   1251c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1251e:	bf1e      	ittt	ne
	movne	r1, #0
   12520:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   12522:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   12524:	f011 ff5d 	blne	243e2 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   12528:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1252a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1252e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   12532:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   12536:	4905      	ldr	r1, [pc, #20]	; (1254c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   12538:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   1253a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   1253c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1253e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   12542:	4903      	ldr	r1, [pc, #12]	; (12550 <_isr_wrapper+0x3c>)
	bx r1
   12544:	4708      	bx	r1
   12546:	0000      	.short	0x0000
	ldr r2, =_kernel
   12548:	20002700 	.word	0x20002700
	ldr r1, =_sw_isr_table
   1254c:	0002503c 	.word	0x0002503c
	ldr r1, =z_arm_int_exit
   12550:	000127f9 	.word	0x000127f9

00012554 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   12554:	bf30      	wfi
    b z_SysNmiOnReset
   12556:	f7ff bffd 	b.w	12554 <z_SysNmiOnReset>
   1255a:	bf00      	nop

0001255c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1255c:	4912      	ldr	r1, [pc, #72]	; (125a8 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1255e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   12560:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   12564:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   12566:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1256a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1256e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   12570:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   12574:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   12578:	4f0c      	ldr	r7, [pc, #48]	; (125ac <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1257a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1257e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   12580:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   12582:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   12584:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   12586:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   12588:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1258a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1258e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   12590:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   12592:	f000 fc1f 	bl	12dd4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   12596:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1259a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1259e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   125a2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   125a6:	4770      	bx	lr
    ldr r1, =_kernel
   125a8:	20002700 	.word	0x20002700
    ldr v4, =_SCS_ICSR
   125ac:	e000ed04 	.word	0xe000ed04

000125b0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   125b0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   125b4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   125b6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   125ba:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   125be:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   125c0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   125c4:	2902      	cmp	r1, #2
    beq _oops
   125c6:	d0ff      	beq.n	125c8 <_oops>

000125c8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   125c8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   125ca:	f00f fc53 	bl	21e74 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   125ce:	bd01      	pop	{r0, pc}

000125d0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   125d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   125d2:	4606      	mov	r6, r0

	if (esf != NULL) {
   125d4:	460c      	mov	r4, r1
   125d6:	b301      	cbz	r1, 1261a <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   125d8:	4b13      	ldr	r3, [pc, #76]	; (12628 <z_arm_fatal_error+0x58>)
   125da:	4d14      	ldr	r5, [pc, #80]	; (1262c <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   125dc:	4814      	ldr	r0, [pc, #80]	; (12630 <z_arm_fatal_error+0x60>)
   125de:	1aed      	subs	r5, r5, r3
   125e0:	08ed      	lsrs	r5, r5, #3
   125e2:	01ad      	lsls	r5, r5, #6
   125e4:	f045 0501 	orr.w	r5, r5, #1
   125e8:	f8ad 5000 	strh.w	r5, [sp]
   125ec:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   125f0:	6809      	ldr	r1, [r1, #0]
   125f2:	f00f f9e7 	bl	219c4 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   125f6:	f8ad 5000 	strh.w	r5, [sp]
   125fa:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   125fe:	68e1      	ldr	r1, [r4, #12]
   12600:	480c      	ldr	r0, [pc, #48]	; (12634 <z_arm_fatal_error+0x64>)
   12602:	f00f f9df 	bl	219c4 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   12606:	69e1      	ldr	r1, [r4, #28]
   12608:	480b      	ldr	r0, [pc, #44]	; (12638 <z_arm_fatal_error+0x68>)
   1260a:	462a      	mov	r2, r5
   1260c:	f00f f9ad 	bl	2196a <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   12610:	69a1      	ldr	r1, [r4, #24]
   12612:	480a      	ldr	r0, [pc, #40]	; (1263c <z_arm_fatal_error+0x6c>)
   12614:	462a      	mov	r2, r5
   12616:	f00f f9a8 	bl	2196a <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1261a:	4621      	mov	r1, r4
   1261c:	4630      	mov	r0, r6
}
   1261e:	b002      	add	sp, #8
   12620:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   12624:	f009 bdaa 	b.w	1c17c <z_fatal_error>
   12628:	00025224 	.word	0x00025224
   1262c:	000252d4 	.word	0x000252d4
   12630:	000260b6 	.word	0x000260b6
   12634:	000260e5 	.word	0x000260e5
   12638:	00026114 	.word	0x00026114
   1263c:	00026123 	.word	0x00026123

00012640 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   12640:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   12642:	2b00      	cmp	r3, #0
   12644:	db08      	blt.n	12658 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12646:	2201      	movs	r2, #1
   12648:	f000 001f 	and.w	r0, r0, #31
   1264c:	fa02 f000 	lsl.w	r0, r2, r0
   12650:	095b      	lsrs	r3, r3, #5
   12652:	4a02      	ldr	r2, [pc, #8]	; (1265c <arch_irq_enable+0x1c>)
   12654:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   12658:	4770      	bx	lr
   1265a:	bf00      	nop
   1265c:	e000e100 	.word	0xe000e100

00012660 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   12660:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   12662:	2b00      	cmp	r3, #0
   12664:	db0d      	blt.n	12682 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12666:	2201      	movs	r2, #1
   12668:	095b      	lsrs	r3, r3, #5
   1266a:	f000 001f 	and.w	r0, r0, #31
   1266e:	fa02 f000 	lsl.w	r0, r2, r0
   12672:	3320      	adds	r3, #32
   12674:	4a03      	ldr	r2, [pc, #12]	; (12684 <arch_irq_disable+0x24>)
   12676:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1267a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1267e:	f3bf 8f6f 	isb	sy
}
   12682:	4770      	bx	lr
   12684:	e000e100 	.word	0xe000e100

00012688 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   12688:	4b05      	ldr	r3, [pc, #20]	; (126a0 <arch_irq_is_enabled+0x18>)
   1268a:	0942      	lsrs	r2, r0, #5
   1268c:	f000 001f 	and.w	r0, r0, #31
   12690:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12694:	2301      	movs	r3, #1
   12696:	fa03 f000 	lsl.w	r0, r3, r0
}
   1269a:	4010      	ands	r0, r2
   1269c:	4770      	bx	lr
   1269e:	bf00      	nop
   126a0:	e000e100 	.word	0xe000e100

000126a4 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   126a4:	07d3      	lsls	r3, r2, #31
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   126a6:	b242      	sxtb	r2, r0
		prio += _IRQ_PRIO_OFFSET;
   126a8:	bf54      	ite	pl
   126aa:	3102      	addpl	r1, #2
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   126ac:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   126ae:	2a00      	cmp	r2, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   126b0:	bfac      	ite	ge
   126b2:	f102 4260 	addge.w	r2, r2, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   126b6:	4a07      	ldrlt	r2, [pc, #28]	; (126d4 <z_arm_irq_priority_set+0x30>)
   126b8:	ea4f 1341 	mov.w	r3, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   126bc:	bfac      	ite	ge
   126be:	f502 4261 	addge.w	r2, r2, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   126c2:	f000 000f 	andlt.w	r0, r0, #15
   126c6:	b2db      	uxtb	r3, r3
   126c8:	bfb4      	ite	lt
   126ca:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   126cc:	f882 3300 	strbge.w	r3, [r2, #768]	; 0x300
}
   126d0:	4770      	bx	lr
   126d2:	bf00      	nop
   126d4:	e000ed14 	.word	0xe000ed14

000126d8 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   126d8:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   126da:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   126dc:	4b04      	ldr	r3, [pc, #16]	; (126f0 <_arch_isr_direct_pm+0x18>)
   126de:	6998      	ldr	r0, [r3, #24]
   126e0:	b118      	cbz	r0, 126ea <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   126e2:	2200      	movs	r2, #0
   126e4:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit(idle_val);
   126e6:	f011 fe7c 	bl	243e2 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   126ea:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   126ec:	bd08      	pop	{r3, pc}
   126ee:	bf00      	nop
   126f0:	20002700 	.word	0x20002700

000126f4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   126f4:	4a0b      	ldr	r2, [pc, #44]	; (12724 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   126f6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   126f8:	4b0b      	ldr	r3, [pc, #44]	; (12728 <z_arm_prep_c+0x34>)
   126fa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   126fe:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   12700:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12704:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   12708:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1270c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   12710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   12714:	f009 fdec 	bl	1c2f0 <z_bss_zero>
	z_data_copy();
   12718:	f00b f898 	bl	1d84c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   1271c:	f000 faee 	bl	12cfc <z_arm_interrupt_init>
	z_cstart();
   12720:	f009 fdf0 	bl	1c304 <z_cstart>
   12724:	00001000 	.word	0x00001000
   12728:	e000ed00 	.word	0xe000ed00

0001272c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   1272c:	4a09      	ldr	r2, [pc, #36]	; (12754 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1272e:	490a      	ldr	r1, [pc, #40]	; (12758 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   12730:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   12732:	6809      	ldr	r1, [r1, #0]
   12734:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12736:	4909      	ldr	r1, [pc, #36]	; (1275c <arch_swap+0x30>)
	_current->arch.basepri = key;
   12738:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1273a:	684b      	ldr	r3, [r1, #4]
   1273c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   12740:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   12742:	2300      	movs	r3, #0
   12744:	f383 8811 	msr	BASEPRI, r3
   12748:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1274c:	6893      	ldr	r3, [r2, #8]
}
   1274e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   12750:	4770      	bx	lr
   12752:	bf00      	nop
   12754:	20002700 	.word	0x20002700
   12758:	00025ba0 	.word	0x00025ba0
   1275c:	e000ed00 	.word	0xe000ed00

00012760 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   12760:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   12764:	9b00      	ldr	r3, [sp, #0]
   12766:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   1276a:	490a      	ldr	r1, [pc, #40]	; (12794 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   1276c:	9b01      	ldr	r3, [sp, #4]
   1276e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   12772:	9b02      	ldr	r3, [sp, #8]
   12774:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   12778:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1277c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   12780:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   12784:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   12788:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1278a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   1278c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   1278e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   12790:	4770      	bx	lr
   12792:	bf00      	nop
   12794:	00021e31 	.word	0x00021e31

00012798 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   12798:	4a0b      	ldr	r2, [pc, #44]	; (127c8 <z_check_thread_stack_fail+0x30>)
{
   1279a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   1279c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   1279e:	b190      	cbz	r0, 127c6 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   127a0:	f113 0f16 	cmn.w	r3, #22
   127a4:	6e80      	ldr	r0, [r0, #104]	; 0x68
   127a6:	d005      	beq.n	127b4 <z_check_thread_stack_fail+0x1c>
   127a8:	f1a0 0220 	sub.w	r2, r0, #32
   127ac:	429a      	cmp	r2, r3
   127ae:	d806      	bhi.n	127be <z_check_thread_stack_fail+0x26>
   127b0:	4283      	cmp	r3, r0
   127b2:	d204      	bcs.n	127be <z_check_thread_stack_fail+0x26>
   127b4:	4281      	cmp	r1, r0
   127b6:	bf2c      	ite	cs
   127b8:	2100      	movcs	r1, #0
   127ba:	2101      	movcc	r1, #1
   127bc:	e000      	b.n	127c0 <z_check_thread_stack_fail+0x28>
   127be:	2100      	movs	r1, #0
   127c0:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   127c2:	bf08      	it	eq
   127c4:	2000      	moveq	r0, #0
}
   127c6:	4770      	bx	lr
   127c8:	20002700 	.word	0x20002700

000127cc <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   127cc:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   127ce:	4b09      	ldr	r3, [pc, #36]	; (127f4 <arch_switch_to_main_thread+0x28>)
   127d0:	6098      	str	r0, [r3, #8]
{
   127d2:	460d      	mov	r5, r1
   127d4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   127d6:	f000 fafd 	bl	12dd4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   127da:	4620      	mov	r0, r4
   127dc:	f385 8809 	msr	PSP, r5
   127e0:	2100      	movs	r1, #0
   127e2:	b663      	cpsie	if
   127e4:	f381 8811 	msr	BASEPRI, r1
   127e8:	f3bf 8f6f 	isb	sy
   127ec:	2200      	movs	r2, #0
   127ee:	2300      	movs	r3, #0
   127f0:	f00f fb1e 	bl	21e30 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   127f4:	20002700 	.word	0x20002700

000127f8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   127f8:	4b04      	ldr	r3, [pc, #16]	; (1280c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   127fa:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   127fc:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   127fe:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   12800:	d003      	beq.n	1280a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   12802:	4903      	ldr	r1, [pc, #12]	; (12810 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   12804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   12808:	600a      	str	r2, [r1, #0]

0001280a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1280a:	4770      	bx	lr
	ldr r3, =_kernel
   1280c:	20002700 	.word	0x20002700
	ldr r1, =_SCS_ICSR
   12810:	e000ed04 	.word	0xe000ed04

00012814 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   12814:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   12818:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   1281c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1281e:	4672      	mov	r2, lr
	bl z_arm_fault
   12820:	f000 f978 	bl	12b14 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   12824:	bd01      	pop	{r0, pc}
   12826:	bf00      	nop

00012828 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   12828:	2000      	movs	r0, #0
    msr CONTROL, r0
   1282a:	f380 8814 	msr	CONTROL, r0
    isb
   1282e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   12832:	f012 fb69 	bl	24f08 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   12836:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   12838:	490d      	ldr	r1, [pc, #52]	; (12870 <__start+0x48>)
    str r0, [r1]
   1283a:	6008      	str	r0, [r1, #0]
    dsb
   1283c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12840:	480c      	ldr	r0, [pc, #48]	; (12874 <__start+0x4c>)
    msr msp, r0
   12842:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   12846:	f000 fa75 	bl	12d34 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1284a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   1284c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   12850:	4809      	ldr	r0, [pc, #36]	; (12878 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   12852:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   12856:	1840      	adds	r0, r0, r1
    msr PSP, r0
   12858:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1285c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   12860:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   12862:	4308      	orrs	r0, r1
    msr CONTROL, r0
   12864:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   12868:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1286c:	f7ff ff42 	bl	126f4 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   12870:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12874:	20005bc0 	.word	0x20005bc0
    ldr r0, =z_interrupt_stacks
   12878:	20005d40 	.word	0x20005d40

0001287c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   1287c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12880:	4b35      	ldr	r3, [pc, #212]	; (12958 <mem_manage_fault+0xdc>)
   12882:	4c36      	ldr	r4, [pc, #216]	; (1295c <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   12884:	4d36      	ldr	r5, [pc, #216]	; (12960 <mem_manage_fault+0xe4>)
   12886:	1ae4      	subs	r4, r4, r3
   12888:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   1288a:	01a4      	lsls	r4, r4, #6
   1288c:	f044 0901 	orr.w	r9, r4, #1
{
   12890:	4607      	mov	r7, r0
   12892:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   12894:	4833      	ldr	r0, [pc, #204]	; (12964 <mem_manage_fault+0xe8>)
   12896:	4649      	mov	r1, r9
{
   12898:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   1289a:	f00f f859 	bl	21950 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1289e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   128a0:	06d3      	lsls	r3, r2, #27
   128a2:	d503      	bpl.n	128ac <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
   128a4:	4830      	ldr	r0, [pc, #192]	; (12968 <mem_manage_fault+0xec>)
   128a6:	4649      	mov	r1, r9
   128a8:	f00f f852 	bl	21950 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   128ac:	6aab      	ldr	r3, [r5, #40]	; 0x28
   128ae:	0718      	lsls	r0, r3, #28
   128b0:	d504      	bpl.n	128bc <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
   128b2:	482e      	ldr	r0, [pc, #184]	; (1296c <mem_manage_fault+0xf0>)
   128b4:	f044 0101 	orr.w	r1, r4, #1
   128b8:	f00f f84a 	bl	21950 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   128bc:	4d28      	ldr	r5, [pc, #160]	; (12960 <mem_manage_fault+0xe4>)
   128be:	6aab      	ldr	r3, [r5, #40]	; 0x28
   128c0:	0799      	lsls	r1, r3, #30
   128c2:	d423      	bmi.n	1290c <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
   128c4:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   128c8:	4d25      	ldr	r5, [pc, #148]	; (12960 <mem_manage_fault+0xe4>)
   128ca:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   128cc:	07d3      	lsls	r3, r2, #31
   128ce:	d504      	bpl.n	128da <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
   128d0:	4827      	ldr	r0, [pc, #156]	; (12970 <mem_manage_fault+0xf4>)
   128d2:	f044 0101 	orr.w	r1, r4, #1
   128d6:	f00f f83b 	bl	21950 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   128da:	6aab      	ldr	r3, [r5, #40]	; 0x28
   128dc:	0698      	lsls	r0, r3, #26
   128de:	d504      	bpl.n	128ea <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
   128e0:	4824      	ldr	r0, [pc, #144]	; (12974 <mem_manage_fault+0xf8>)
   128e2:	f044 0101 	orr.w	r1, r4, #1
   128e6:	f00f f833 	bl	21950 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   128ea:	4b1d      	ldr	r3, [pc, #116]	; (12960 <mem_manage_fault+0xe4>)
   128ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   128ee:	06d1      	lsls	r1, r2, #27
   128f0:	d424      	bmi.n	1293c <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   128f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   128f4:	0792      	lsls	r2, r2, #30
   128f6:	d421      	bmi.n	1293c <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   128f8:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   128fa:	4a19      	ldr	r2, [pc, #100]	; (12960 <mem_manage_fault+0xe4>)
   128fc:	6a93      	ldr	r3, [r2, #40]	; 0x28
   128fe:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   12902:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   12904:	2300      	movs	r3, #0
   12906:	7033      	strb	r3, [r6, #0]

	return reason;
}
   12908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
   1290c:	f044 0a01 	orr.w	sl, r4, #1
   12910:	4819      	ldr	r0, [pc, #100]	; (12978 <mem_manage_fault+0xfc>)
   12912:	4651      	mov	r1, sl
   12914:	f00f f81c 	bl	21950 <log_0>
		uint32_t temp = SCB->MMFAR;
   12918:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1291c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1291e:	061a      	lsls	r2, r3, #24
   12920:	d5d0      	bpl.n	128c4 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   12922:	4816      	ldr	r0, [pc, #88]	; (1297c <mem_manage_fault+0x100>)
   12924:	4652      	mov	r2, sl
   12926:	4649      	mov	r1, r9
   12928:	f00f f81f 	bl	2196a <log_1>
			if (from_hard_fault != 0) {
   1292c:	f1b8 0f00 	cmp.w	r8, #0
   12930:	d0ca      	beq.n	128c8 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   12932:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   12938:	62ab      	str	r3, [r5, #40]	; 0x28
   1293a:	e7c5      	b.n	128c8 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1293c:	685b      	ldr	r3, [r3, #4]
   1293e:	051b      	lsls	r3, r3, #20
   12940:	d5da      	bpl.n	128f8 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   12942:	4639      	mov	r1, r7
   12944:	4648      	mov	r0, r9
   12946:	f7ff ff27 	bl	12798 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   1294a:	2800      	cmp	r0, #0
   1294c:	d0d4      	beq.n	128f8 <mem_manage_fault+0x7c>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1294e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   12952:	2002      	movs	r0, #2
   12954:	e7d1      	b.n	128fa <mem_manage_fault+0x7e>
   12956:	bf00      	nop
   12958:	00025224 	.word	0x00025224
   1295c:	000252d4 	.word	0x000252d4
   12960:	e000ed00 	.word	0xe000ed00
   12964:	00026151 	.word	0x00026151
   12968:	00026167 	.word	0x00026167
   1296c:	0002619a 	.word	0x0002619a
   12970:	000261db 	.word	0x000261db
   12974:	000261fa 	.word	0x000261fa
   12978:	000261ad 	.word	0x000261ad
   1297c:	000261c5 	.word	0x000261c5

00012980 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   12980:	b570      	push	{r4, r5, r6, lr}
   12982:	4b23      	ldr	r3, [pc, #140]	; (12a10 <usage_fault.isra.0+0x90>)
   12984:	4c23      	ldr	r4, [pc, #140]	; (12a14 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   12986:	4d24      	ldr	r5, [pc, #144]	; (12a18 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   12988:	4824      	ldr	r0, [pc, #144]	; (12a1c <usage_fault.isra.0+0x9c>)
   1298a:	1ae4      	subs	r4, r4, r3
   1298c:	08e4      	lsrs	r4, r4, #3
   1298e:	01a4      	lsls	r4, r4, #6
   12990:	f044 0601 	orr.w	r6, r4, #1
   12994:	4631      	mov	r1, r6
   12996:	f00e ffdb 	bl	21950 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1299a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1299c:	0193      	lsls	r3, r2, #6
   1299e:	d503      	bpl.n	129a8 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   129a0:	481f      	ldr	r0, [pc, #124]	; (12a20 <usage_fault.isra.0+0xa0>)
   129a2:	4631      	mov	r1, r6
   129a4:	f00e ffd4 	bl	21950 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   129a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   129aa:	01dd      	lsls	r5, r3, #7
   129ac:	d504      	bpl.n	129b8 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   129ae:	481d      	ldr	r0, [pc, #116]	; (12a24 <usage_fault.isra.0+0xa4>)
   129b0:	f044 0101 	orr.w	r1, r4, #1
   129b4:	f00e ffcc 	bl	21950 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   129b8:	4d17      	ldr	r5, [pc, #92]	; (12a18 <usage_fault.isra.0+0x98>)
   129ba:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   129bc:	0310      	lsls	r0, r2, #12
   129be:	d504      	bpl.n	129ca <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   129c0:	4819      	ldr	r0, [pc, #100]	; (12a28 <usage_fault.isra.0+0xa8>)
   129c2:	f044 0101 	orr.w	r1, r4, #1
   129c6:	f00e ffc3 	bl	21950 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   129ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
   129cc:	0359      	lsls	r1, r3, #13
   129ce:	d504      	bpl.n	129da <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   129d0:	4816      	ldr	r0, [pc, #88]	; (12a2c <usage_fault.isra.0+0xac>)
   129d2:	f044 0101 	orr.w	r1, r4, #1
   129d6:	f00e ffbb 	bl	21950 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   129da:	4d0f      	ldr	r5, [pc, #60]	; (12a18 <usage_fault.isra.0+0x98>)
   129dc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   129de:	0392      	lsls	r2, r2, #14
   129e0:	d504      	bpl.n	129ec <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   129e2:	4813      	ldr	r0, [pc, #76]	; (12a30 <usage_fault.isra.0+0xb0>)
   129e4:	f044 0101 	orr.w	r1, r4, #1
   129e8:	f00e ffb2 	bl	21950 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   129ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
   129ee:	03db      	lsls	r3, r3, #15
   129f0:	d504      	bpl.n	129fc <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   129f2:	4810      	ldr	r0, [pc, #64]	; (12a34 <usage_fault.isra.0+0xb4>)
   129f4:	f044 0101 	orr.w	r1, r4, #1
   129f8:	f00e ffaa 	bl	21950 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   129fc:	4a06      	ldr	r2, [pc, #24]	; (12a18 <usage_fault.isra.0+0x98>)
   129fe:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12a00:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   12a04:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   12a08:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   12a0a:	2000      	movs	r0, #0
   12a0c:	bd70      	pop	{r4, r5, r6, pc}
   12a0e:	bf00      	nop
   12a10:	00025224 	.word	0x00025224
   12a14:	000252d4 	.word	0x000252d4
   12a18:	e000ed00 	.word	0xe000ed00
   12a1c:	00026229 	.word	0x00026229
   12a20:	00026241 	.word	0x00026241
   12a24:	00026254 	.word	0x00026254
   12a28:	0002626e 	.word	0x0002626e
   12a2c:	0002628c 	.word	0x0002628c
   12a30:	000262b1 	.word	0x000262b1
   12a34:	000262cb 	.word	0x000262cb

00012a38 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   12a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12a3c:	4b2a      	ldr	r3, [pc, #168]	; (12ae8 <bus_fault.isra.0+0xb0>)
   12a3e:	4c2b      	ldr	r4, [pc, #172]	; (12aec <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   12a40:	4d2b      	ldr	r5, [pc, #172]	; (12af0 <bus_fault.isra.0+0xb8>)
   12a42:	1ae4      	subs	r4, r4, r3
   12a44:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   12a46:	01a4      	lsls	r4, r4, #6
   12a48:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   12a4c:	4607      	mov	r7, r0
   12a4e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   12a50:	4828      	ldr	r0, [pc, #160]	; (12af4 <bus_fault.isra.0+0xbc>)
   12a52:	4641      	mov	r1, r8
   12a54:	f00e ff7c 	bl	21950 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   12a58:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   12a5a:	04d1      	lsls	r1, r2, #19
   12a5c:	d503      	bpl.n	12a66 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   12a5e:	4826      	ldr	r0, [pc, #152]	; (12af8 <bus_fault.isra.0+0xc0>)
   12a60:	4641      	mov	r1, r8
   12a62:	f00e ff75 	bl	21950 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   12a66:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12a68:	051a      	lsls	r2, r3, #20
   12a6a:	d504      	bpl.n	12a76 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   12a6c:	4823      	ldr	r0, [pc, #140]	; (12afc <bus_fault.isra.0+0xc4>)
   12a6e:	f044 0101 	orr.w	r1, r4, #1
   12a72:	f00e ff6d 	bl	21950 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   12a76:	4d1e      	ldr	r5, [pc, #120]	; (12af0 <bus_fault.isra.0+0xb8>)
   12a78:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12a7a:	059b      	lsls	r3, r3, #22
   12a7c:	d512      	bpl.n	12aa4 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   12a7e:	f044 0801 	orr.w	r8, r4, #1
   12a82:	481f      	ldr	r0, [pc, #124]	; (12b00 <bus_fault.isra.0+0xc8>)
   12a84:	4641      	mov	r1, r8
   12a86:	f00e ff63 	bl	21950 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   12a8a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   12a8c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12a8e:	0418      	lsls	r0, r3, #16
   12a90:	d508      	bpl.n	12aa4 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   12a92:	481c      	ldr	r0, [pc, #112]	; (12b04 <bus_fault.isra.0+0xcc>)
   12a94:	4642      	mov	r2, r8
   12a96:	f00e ff68 	bl	2196a <log_1>
			if (from_hard_fault != 0) {
   12a9a:	b11f      	cbz	r7, 12aa4 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   12a9c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12a9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   12aa2:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   12aa4:	4d12      	ldr	r5, [pc, #72]	; (12af0 <bus_fault.isra.0+0xb8>)
   12aa6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12aa8:	0559      	lsls	r1, r3, #21
   12aaa:	d504      	bpl.n	12ab6 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   12aac:	4816      	ldr	r0, [pc, #88]	; (12b08 <bus_fault.isra.0+0xd0>)
   12aae:	f044 0101 	orr.w	r1, r4, #1
   12ab2:	f00e ff4d 	bl	21950 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   12ab6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12ab8:	05da      	lsls	r2, r3, #23
   12aba:	d50d      	bpl.n	12ad8 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   12abc:	4813      	ldr	r0, [pc, #76]	; (12b0c <bus_fault.isra.0+0xd4>)
   12abe:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   12ac2:	f00e ff45 	bl	21950 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12ac6:	4a0a      	ldr	r2, [pc, #40]	; (12af0 <bus_fault.isra.0+0xb8>)
   12ac8:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   12aca:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12acc:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   12ad0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   12ad2:	7030      	strb	r0, [r6, #0]
}
   12ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   12ad8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12ada:	049b      	lsls	r3, r3, #18
   12adc:	d5f3      	bpl.n	12ac6 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   12ade:	480c      	ldr	r0, [pc, #48]	; (12b10 <bus_fault.isra.0+0xd8>)
   12ae0:	f044 0101 	orr.w	r1, r4, #1
   12ae4:	e7ed      	b.n	12ac2 <bus_fault.isra.0+0x8a>
   12ae6:	bf00      	nop
   12ae8:	00025224 	.word	0x00025224
   12aec:	000252d4 	.word	0x000252d4
   12af0:	e000ed00 	.word	0xe000ed00
   12af4:	000262f6 	.word	0x000262f6
   12af8:	0002630c 	.word	0x0002630c
   12afc:	0002619a 	.word	0x0002619a
   12b00:	0002631d 	.word	0x0002631d
   12b04:	00026336 	.word	0x00026336
   12b08:	0002634b 	.word	0x0002634b
   12b0c:	00026366 	.word	0x00026366
   12b10:	000261fa 	.word	0x000261fa

00012b14 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   12b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   12b18:	4b65      	ldr	r3, [pc, #404]	; (12cb0 <z_arm_fault+0x19c>)
   12b1a:	685e      	ldr	r6, [r3, #4]
{
   12b1c:	b08a      	sub	sp, #40	; 0x28
   12b1e:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   12b20:	f3c6 0408 	ubfx	r4, r6, #0, #9
   12b24:	2700      	movs	r7, #0
   12b26:	f387 8811 	msr	BASEPRI, r7
   12b2a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   12b2e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   12b32:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   12b36:	d10d      	bne.n	12b54 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   12b38:	f002 030c 	and.w	r3, r2, #12
   12b3c:	2b08      	cmp	r3, #8
   12b3e:	d10b      	bne.n	12b58 <z_arm_fault+0x44>
   12b40:	495c      	ldr	r1, [pc, #368]	; (12cb4 <z_arm_fault+0x1a0>)
   12b42:	4b5d      	ldr	r3, [pc, #372]	; (12cb8 <z_arm_fault+0x1a4>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   12b44:	485d      	ldr	r0, [pc, #372]	; (12cbc <z_arm_fault+0x1a8>)
   12b46:	1ac9      	subs	r1, r1, r3
   12b48:	08c9      	lsrs	r1, r1, #3
   12b4a:	0189      	lsls	r1, r1, #6
   12b4c:	f041 0101 	orr.w	r1, r1, #1
   12b50:	f00e fefe 	bl	21950 <log_0>
		return NULL;
   12b54:	463d      	mov	r5, r7
   12b56:	e003      	b.n	12b60 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   12b58:	0712      	lsls	r2, r2, #28
   12b5a:	d401      	bmi.n	12b60 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
   12b5c:	4605      	mov	r5, r0
			*nested_exc = true;
   12b5e:	2701      	movs	r7, #1
	*recoverable = false;
   12b60:	2300      	movs	r3, #0
   12b62:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   12b66:	1ee3      	subs	r3, r4, #3
   12b68:	2b09      	cmp	r3, #9
   12b6a:	f200 8087 	bhi.w	12c7c <z_arm_fault+0x168>
   12b6e:	e8df f003 	tbb	[pc, r3]
   12b72:	7405      	.short	0x7405
   12b74:	85857178 	.word	0x85857178
   12b78:	7c858585 	.word	0x7c858585
   12b7c:	4a4e      	ldr	r2, [pc, #312]	; (12cb8 <z_arm_fault+0x1a4>)
   12b7e:	4e4d      	ldr	r6, [pc, #308]	; (12cb4 <z_arm_fault+0x1a0>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   12b80:	484f      	ldr	r0, [pc, #316]	; (12cc0 <z_arm_fault+0x1ac>)
   12b82:	1ab6      	subs	r6, r6, r2
   12b84:	08f6      	lsrs	r6, r6, #3
   12b86:	01b6      	lsls	r6, r6, #6
   12b88:	f046 0601 	orr.w	r6, r6, #1
   12b8c:	4631      	mov	r1, r6
   12b8e:	f00e fedf 	bl	21950 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   12b92:	4b47      	ldr	r3, [pc, #284]	; (12cb0 <z_arm_fault+0x19c>)
   12b94:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
   12b96:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   12b9a:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
   12b9e:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   12ba2:	d005      	beq.n	12bb0 <z_arm_fault+0x9c>
		PR_EXC("  Bus fault on vector table read");
   12ba4:	4847      	ldr	r0, [pc, #284]	; (12cc4 <z_arm_fault+0x1b0>)
   12ba6:	4631      	mov	r1, r6
	PR_FAULT_INFO(
   12ba8:	f00e fed2 	bl	21950 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12bac:	2400      	movs	r4, #0
}
   12bae:	e006      	b.n	12bbe <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   12bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12bb2:	2a00      	cmp	r2, #0
   12bb4:	da1d      	bge.n	12bf2 <z_arm_fault+0xde>
		PR_EXC("  Debug event");
   12bb6:	4844      	ldr	r0, [pc, #272]	; (12cc8 <z_arm_fault+0x1b4>)
   12bb8:	4631      	mov	r1, r6
   12bba:	f00e fec9 	bl	21950 <log_0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   12bbe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12bc2:	b99b      	cbnz	r3, 12bec <z_arm_fault+0xd8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   12bc4:	2220      	movs	r2, #32
   12bc6:	4629      	mov	r1, r5
   12bc8:	a802      	add	r0, sp, #8
   12bca:	f00f f9c2 	bl	21f52 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   12bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12bd0:	2f00      	cmp	r7, #0
   12bd2:	d067      	beq.n	12ca4 <z_arm_fault+0x190>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   12bd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   12bd8:	b922      	cbnz	r2, 12be4 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   12bda:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   12bde:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   12be2:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   12be4:	a902      	add	r1, sp, #8
   12be6:	4620      	mov	r0, r4
   12be8:	f7ff fcf2 	bl	125d0 <z_arm_fatal_error>
}
   12bec:	b00a      	add	sp, #40	; 0x28
   12bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   12bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12bf4:	005b      	lsls	r3, r3, #1
   12bf6:	d5e2      	bpl.n	12bbe <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
   12bf8:	4834      	ldr	r0, [pc, #208]	; (12ccc <z_arm_fault+0x1b8>)
   12bfa:	4631      	mov	r1, r6
   12bfc:	f00e fea8 	bl	21950 <log_0>
	uint16_t fault_insn = *(ret_addr - 1);
   12c00:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   12c02:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   12c06:	f64d 7302 	movw	r3, #57090	; 0xdf02
   12c0a:	429a      	cmp	r2, r3
   12c0c:	d00d      	beq.n	12c2a <z_arm_fault+0x116>
		} else if (SCB_MMFSR != 0) {
   12c0e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   12c12:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   12c16:	781b      	ldrb	r3, [r3, #0]
   12c18:	b173      	cbz	r3, 12c38 <z_arm_fault+0x124>
			reason = mem_manage_fault(esf, 1, recoverable);
   12c1a:	f10d 0207 	add.w	r2, sp, #7
   12c1e:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   12c20:	4628      	mov	r0, r5
   12c22:	f7ff fe2b 	bl	1287c <mem_manage_fault>
   12c26:	4604      	mov	r4, r0
		break;
   12c28:	e7c9      	b.n	12bbe <z_arm_fault+0xaa>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   12c2a:	6829      	ldr	r1, [r5, #0]
   12c2c:	4828      	ldr	r0, [pc, #160]	; (12cd0 <z_arm_fault+0x1bc>)
   12c2e:	4632      	mov	r2, r6
   12c30:	f00e fe9b 	bl	2196a <log_1>
			reason = esf->basic.r0;
   12c34:	682c      	ldr	r4, [r5, #0]
   12c36:	e7c2      	b.n	12bbe <z_arm_fault+0xaa>
		} else if (SCB_BFSR != 0) {
   12c38:	4b26      	ldr	r3, [pc, #152]	; (12cd4 <z_arm_fault+0x1c0>)
   12c3a:	781b      	ldrb	r3, [r3, #0]
   12c3c:	b12b      	cbz	r3, 12c4a <z_arm_fault+0x136>
			reason = bus_fault(esf, 1, recoverable);
   12c3e:	f10d 0107 	add.w	r1, sp, #7
   12c42:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   12c44:	f7ff fef8 	bl	12a38 <bus_fault.isra.0>
   12c48:	e7ed      	b.n	12c26 <z_arm_fault+0x112>
		} else if (SCB_UFSR != 0) {
   12c4a:	4b23      	ldr	r3, [pc, #140]	; (12cd8 <z_arm_fault+0x1c4>)
   12c4c:	881b      	ldrh	r3, [r3, #0]
   12c4e:	b29b      	uxth	r3, r3
   12c50:	2b00      	cmp	r3, #0
   12c52:	d0b4      	beq.n	12bbe <z_arm_fault+0xaa>
		reason = usage_fault(esf);
   12c54:	f7ff fe94 	bl	12980 <usage_fault.isra.0>
   12c58:	e7e5      	b.n	12c26 <z_arm_fault+0x112>
		reason = mem_manage_fault(esf, 0, recoverable);
   12c5a:	f10d 0207 	add.w	r2, sp, #7
   12c5e:	2100      	movs	r1, #0
   12c60:	e7de      	b.n	12c20 <z_arm_fault+0x10c>
		reason = bus_fault(esf, 0, recoverable);
   12c62:	f10d 0107 	add.w	r1, sp, #7
   12c66:	2000      	movs	r0, #0
   12c68:	e7ec      	b.n	12c44 <z_arm_fault+0x130>
   12c6a:	4912      	ldr	r1, [pc, #72]	; (12cb4 <z_arm_fault+0x1a0>)
   12c6c:	4b12      	ldr	r3, [pc, #72]	; (12cb8 <z_arm_fault+0x1a4>)
	PR_FAULT_INFO(
   12c6e:	481b      	ldr	r0, [pc, #108]	; (12cdc <z_arm_fault+0x1c8>)
   12c70:	1ac9      	subs	r1, r1, r3
   12c72:	08c9      	lsrs	r1, r1, #3
   12c74:	0189      	lsls	r1, r1, #6
   12c76:	f041 0101 	orr.w	r1, r1, #1
   12c7a:	e795      	b.n	12ba8 <z_arm_fault+0x94>
   12c7c:	4a0e      	ldr	r2, [pc, #56]	; (12cb8 <z_arm_fault+0x1a4>)
   12c7e:	4b0d      	ldr	r3, [pc, #52]	; (12cb4 <z_arm_fault+0x1a0>)
	PR_FAULT_INFO("***** %s %d) *****",
   12c80:	4817      	ldr	r0, [pc, #92]	; (12ce0 <z_arm_fault+0x1cc>)
   12c82:	4918      	ldr	r1, [pc, #96]	; (12ce4 <z_arm_fault+0x1d0>)
   12c84:	1a9b      	subs	r3, r3, r2
   12c86:	08db      	lsrs	r3, r3, #3
   12c88:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
   12c8c:	ea4f 1383 	mov.w	r3, r3, lsl #6
   12c90:	bf18      	it	ne
   12c92:	4601      	movne	r1, r0
   12c94:	f043 0301 	orr.w	r3, r3, #1
   12c98:	4813      	ldr	r0, [pc, #76]	; (12ce8 <z_arm_fault+0x1d4>)
   12c9a:	f1a4 0210 	sub.w	r2, r4, #16
   12c9e:	f00e fe78 	bl	21992 <log_2>
   12ca2:	e783      	b.n	12bac <z_arm_fault+0x98>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   12ca4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   12ca8:	f023 0301 	bic.w	r3, r3, #1
   12cac:	e799      	b.n	12be2 <z_arm_fault+0xce>
   12cae:	bf00      	nop
   12cb0:	e000ed00 	.word	0xe000ed00
   12cb4:	000252d4 	.word	0x000252d4
   12cb8:	00025224 	.word	0x00025224
   12cbc:	0002637e 	.word	0x0002637e
   12cc0:	000263a9 	.word	0x000263a9
   12cc4:	000263c0 	.word	0x000263c0
   12cc8:	000263e1 	.word	0x000263e1
   12ccc:	000263ef 	.word	0x000263ef
   12cd0:	0002640e 	.word	0x0002640e
   12cd4:	e000ed29 	.word	0xe000ed29
   12cd8:	e000ed2a 	.word	0xe000ed2a
   12cdc:	0002642a 	.word	0x0002642a
   12ce0:	00026463 	.word	0x00026463
   12ce4:	0002644e 	.word	0x0002644e
   12ce8:	0002647c 	.word	0x0002647c

00012cec <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   12cec:	4a02      	ldr	r2, [pc, #8]	; (12cf8 <z_arm_fault_init+0xc>)
   12cee:	6953      	ldr	r3, [r2, #20]
   12cf0:	f043 0310 	orr.w	r3, r3, #16
   12cf4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   12cf6:	4770      	bx	lr
   12cf8:	e000ed00 	.word	0xe000ed00

00012cfc <z_arm_interrupt_init>:
   12cfc:	4804      	ldr	r0, [pc, #16]	; (12d10 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   12cfe:	2300      	movs	r3, #0
   12d00:	2140      	movs	r1, #64	; 0x40
   12d02:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   12d04:	3301      	adds	r3, #1
   12d06:	2b30      	cmp	r3, #48	; 0x30
   12d08:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   12d0c:	d1f9      	bne.n	12d02 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   12d0e:	4770      	bx	lr
   12d10:	e000e100 	.word	0xe000e100

00012d14 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   12d14:	4a06      	ldr	r2, [pc, #24]	; (12d30 <z_arm_clear_arm_mpu_config+0x1c>)
   12d16:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
   12d18:	2300      	movs	r3, #0
	int num_regions =
   12d1a:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   12d1e:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   12d20:	428b      	cmp	r3, r1
   12d22:	d100      	bne.n	12d26 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   12d24:	4770      	bx	lr
  MPU->RNR = rnr;
   12d26:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   12d28:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   12d2a:	3301      	adds	r3, #1
   12d2c:	e7f8      	b.n	12d20 <z_arm_clear_arm_mpu_config+0xc>
   12d2e:	bf00      	nop
   12d30:	e000ed90 	.word	0xe000ed90

00012d34 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   12d34:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   12d36:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   12d38:	2300      	movs	r3, #0
   12d3a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   12d3e:	f7ff ffe9 	bl	12d14 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   12d42:	4b14      	ldr	r3, [pc, #80]	; (12d94 <z_arm_init_arch_hw_at_boot+0x60>)
   12d44:	f04f 32ff 	mov.w	r2, #4294967295
   12d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   12d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   12d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   12d54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   12d58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   12d5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   12d60:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   12d64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   12d68:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   12d6c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   12d70:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   12d74:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   12d78:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   12d7c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   12d80:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   12d84:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   12d88:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   12d8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12d8e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   12d92:	bd08      	pop	{r3, pc}
   12d94:	e000e100 	.word	0xe000e100

00012d98 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   12d98:	4b06      	ldr	r3, [pc, #24]	; (12db4 <z_impl_k_thread_abort+0x1c>)
   12d9a:	689b      	ldr	r3, [r3, #8]
   12d9c:	4283      	cmp	r3, r0
   12d9e:	d107      	bne.n	12db0 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   12da0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   12da4:	b123      	cbz	r3, 12db0 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12da6:	4a04      	ldr	r2, [pc, #16]	; (12db8 <z_impl_k_thread_abort+0x20>)
   12da8:	6853      	ldr	r3, [r2, #4]
   12daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   12dae:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   12db0:	f00a b818 	b.w	1cde4 <z_thread_abort>
   12db4:	20002700 	.word	0x20002700
   12db8:	e000ed00 	.word	0xe000ed00

00012dbc <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   12dbc:	4b02      	ldr	r3, [pc, #8]	; (12dc8 <z_arm_configure_static_mpu_regions+0xc>)
   12dbe:	4a03      	ldr	r2, [pc, #12]	; (12dcc <z_arm_configure_static_mpu_regions+0x10>)
   12dc0:	4803      	ldr	r0, [pc, #12]	; (12dd0 <z_arm_configure_static_mpu_regions+0x14>)
   12dc2:	2101      	movs	r1, #1
   12dc4:	f000 b884 	b.w	12ed0 <arm_core_mpu_configure_static_mpu_regions>
   12dc8:	20040000 	.word	0x20040000
   12dcc:	20000000 	.word	0x20000000
   12dd0:	00025648 	.word	0x00025648

00012dd4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   12dd4:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   12dd6:	4b05      	ldr	r3, [pc, #20]	; (12dec <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   12dd8:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   12dda:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   12ddc:	4a04      	ldr	r2, [pc, #16]	; (12df0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   12dde:	2120      	movs	r1, #32
   12de0:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   12de4:	4618      	mov	r0, r3
   12de6:	2101      	movs	r1, #1
   12de8:	f000 b87c 	b.w	12ee4 <arm_core_mpu_configure_dynamic_mpu_regions>
   12dec:	20002460 	.word	0x20002460
   12df0:	150b0000 	.word	0x150b0000

00012df4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   12df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   12df6:	4f28      	ldr	r7, [pc, #160]	; (12e98 <mpu_configure_regions+0xa4>)
   12df8:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   12dfa:	2100      	movs	r1, #0
   12dfc:	42b1      	cmp	r1, r6
   12dfe:	da14      	bge.n	12e2a <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
   12e00:	6844      	ldr	r4, [r0, #4]
   12e02:	2c00      	cmp	r4, #0
   12e04:	d045      	beq.n	12e92 <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   12e06:	b1c3      	cbz	r3, 12e3a <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   12e08:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   12e0c:	ea14 0f0c 	tst.w	r4, ip
   12e10:	d00d      	beq.n	12e2e <mpu_configure_regions+0x3a>
   12e12:	4a22      	ldr	r2, [pc, #136]	; (12e9c <mpu_configure_regions+0xa8>)
   12e14:	4b22      	ldr	r3, [pc, #136]	; (12ea0 <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   12e16:	4823      	ldr	r0, [pc, #140]	; (12ea4 <mpu_configure_regions+0xb0>)
   12e18:	1ad2      	subs	r2, r2, r3
   12e1a:	08d2      	lsrs	r2, r2, #3
   12e1c:	0192      	lsls	r2, r2, #6
   12e1e:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   12e22:	f00e fda2 	bl	2196a <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   12e26:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   12e2a:	4610      	mov	r0, r2
   12e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   12e2e:	2c1f      	cmp	r4, #31
   12e30:	d9ef      	bls.n	12e12 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
   12e32:	6805      	ldr	r5, [r0, #0]
		&&
   12e34:	ea1c 0f05 	tst.w	ip, r5
   12e38:	d1eb      	bne.n	12e12 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   12e3a:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   12e3c:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   12e3e:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
   12e42:	6802      	ldr	r2, [r0, #0]
   12e44:	d916      	bls.n	12e74 <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   12e46:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   12e4a:	d815      	bhi.n	12e78 <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   12e4c:	3c01      	subs	r4, #1
   12e4e:	fab4 f484 	clz	r4, r4
   12e52:	f1c4 041f 	rsb	r4, r4, #31
   12e56:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   12e58:	2d07      	cmp	r5, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   12e5a:	ea4c 0404 	orr.w	r4, ip, r4
   12e5e:	d90d      	bls.n	12e7c <mpu_configure_regions+0x88>
   12e60:	4a0e      	ldr	r2, [pc, #56]	; (12e9c <mpu_configure_regions+0xa8>)
   12e62:	4b0f      	ldr	r3, [pc, #60]	; (12ea0 <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   12e64:	4810      	ldr	r0, [pc, #64]	; (12ea8 <mpu_configure_regions+0xb4>)
   12e66:	1ad2      	subs	r2, r2, r3
   12e68:	08d2      	lsrs	r2, r2, #3
   12e6a:	0192      	lsls	r2, r2, #6
   12e6c:	f042 0201 	orr.w	r2, r2, #1
   12e70:	4629      	mov	r1, r5
   12e72:	e7d6      	b.n	12e22 <mpu_configure_regions+0x2e>
		return REGION_32B;
   12e74:	2408      	movs	r4, #8
   12e76:	e7ef      	b.n	12e58 <mpu_configure_regions+0x64>
		return REGION_4G;
   12e78:	243e      	movs	r4, #62	; 0x3e
   12e7a:	e7ed      	b.n	12e58 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12e7c:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   12e80:	432a      	orrs	r2, r5
   12e82:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   12e86:	f044 0401 	orr.w	r4, r4, #1
   12e8a:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12e8c:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   12e8e:	613c      	str	r4, [r7, #16]
		reg_index++;
   12e90:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
   12e92:	3101      	adds	r1, #1
   12e94:	300c      	adds	r0, #12
   12e96:	e7b1      	b.n	12dfc <mpu_configure_regions+0x8>
   12e98:	e000ed90 	.word	0xe000ed90
   12e9c:	000252c4 	.word	0x000252c4
   12ea0:	00025224 	.word	0x00025224
   12ea4:	00026493 	.word	0x00026493
   12ea8:	000264b6 	.word	0x000264b6

00012eac <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   12eac:	4b03      	ldr	r3, [pc, #12]	; (12ebc <arm_core_mpu_enable+0x10>)
   12eae:	2205      	movs	r2, #5
   12eb0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   12eb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12eb6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   12eba:	4770      	bx	lr
   12ebc:	e000ed90 	.word	0xe000ed90

00012ec0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   12ec0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   12ec4:	4b01      	ldr	r3, [pc, #4]	; (12ecc <arm_core_mpu_disable+0xc>)
   12ec6:	2200      	movs	r2, #0
   12ec8:	605a      	str	r2, [r3, #4]
}
   12eca:	4770      	bx	lr
   12ecc:	e000ed90 	.word	0xe000ed90

00012ed0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   12ed0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   12ed2:	4c03      	ldr	r4, [pc, #12]	; (12ee0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   12ed4:	2301      	movs	r3, #1
   12ed6:	7822      	ldrb	r2, [r4, #0]
   12ed8:	f7ff ff8c 	bl	12df4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   12edc:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   12ede:	bd10      	pop	{r4, pc}
   12ee0:	20003061 	.word	0x20003061

00012ee4 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   12ee4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   12ee6:	4a08      	ldr	r2, [pc, #32]	; (12f08 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
   12ee8:	2300      	movs	r3, #0
   12eea:	7812      	ldrb	r2, [r2, #0]
   12eec:	f7ff ff82 	bl	12df4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   12ef0:	f110 0f16 	cmn.w	r0, #22
   12ef4:	d003      	beq.n	12efe <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   12ef6:	4b05      	ldr	r3, [pc, #20]	; (12f0c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
   12ef8:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   12efa:	2807      	cmp	r0, #7
   12efc:	dd00      	ble.n	12f00 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   12efe:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   12f00:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   12f02:	611a      	str	r2, [r3, #16]
   12f04:	3001      	adds	r0, #1
   12f06:	e7f8      	b.n	12efa <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   12f08:	20003061 	.word	0x20003061
   12f0c:	e000ed90 	.word	0xe000ed90

00012f10 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   12f10:	4913      	ldr	r1, [pc, #76]	; (12f60 <z_arm_mpu_init+0x50>)
   12f12:	6808      	ldr	r0, [r1, #0]
   12f14:	2808      	cmp	r0, #8
{
   12f16:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   12f18:	d81e      	bhi.n	12f58 <z_arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   12f1a:	f7ff ffd1 	bl	12ec0 <arm_core_mpu_disable>
   12f1e:	4c11      	ldr	r4, [pc, #68]	; (12f64 <z_arm_mpu_init+0x54>)
   12f20:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12f22:	2200      	movs	r2, #0
   12f24:	4290      	cmp	r0, r2
   12f26:	f101 010c 	add.w	r1, r1, #12
   12f2a:	d105      	bne.n	12f38 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   12f2c:	4b0e      	ldr	r3, [pc, #56]	; (12f68 <z_arm_mpu_init+0x58>)
   12f2e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   12f30:	f7ff ffbc 	bl	12eac <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   12f34:	2000      	movs	r0, #0
}
   12f36:	bd10      	pop	{r4, pc}
   12f38:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12f3a:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   12f3e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   12f42:	4313      	orrs	r3, r2
   12f44:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12f48:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   12f4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
   12f4e:	f043 0301 	orr.w	r3, r3, #1
   12f52:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12f54:	3201      	adds	r2, #1
   12f56:	e7e5      	b.n	12f24 <z_arm_mpu_init+0x14>
		return -1;
   12f58:	f04f 30ff 	mov.w	r0, #4294967295
   12f5c:	e7eb      	b.n	12f36 <z_arm_mpu_init+0x26>
   12f5e:	bf00      	nop
   12f60:	00025654 	.word	0x00025654
   12f64:	e000ed90 	.word	0xe000ed90
   12f68:	20003061 	.word	0x20003061

00012f6c <nordicsemi_nrf52_init>:
	__asm__ volatile(
   12f6c:	f04f 0340 	mov.w	r3, #64	; 0x40
   12f70:	f3ef 8211 	mrs	r2, BASEPRI
   12f74:	f383 8812 	msr	BASEPRI_MAX, r3
   12f78:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   12f7c:	4906      	ldr	r1, [pc, #24]	; (12f98 <nordicsemi_nrf52_init+0x2c>)
   12f7e:	2301      	movs	r3, #1
   12f80:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   12f84:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12f88:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   12f8c:	f382 8811 	msr	BASEPRI, r2
   12f90:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   12f94:	2000      	movs	r0, #0
   12f96:	4770      	bx	lr
   12f98:	4001e000 	.word	0x4001e000

00012f9c <sys_arch_reboot>:
    *p_gpregret = val;
   12f9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12fa0:	b2c0      	uxtb	r0, r0
   12fa2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   12fa6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   12faa:	4905      	ldr	r1, [pc, #20]	; (12fc0 <sys_arch_reboot+0x24>)
   12fac:	4b05      	ldr	r3, [pc, #20]	; (12fc4 <sys_arch_reboot+0x28>)
   12fae:	68ca      	ldr	r2, [r1, #12]
   12fb0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   12fb4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   12fb6:	60cb      	str	r3, [r1, #12]
   12fb8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   12fbc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   12fbe:	e7fd      	b.n	12fbc <sys_arch_reboot+0x20>
   12fc0:	e000ed00 	.word	0xe000ed00
   12fc4:	05fa0004 	.word	0x05fa0004

00012fc8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   12fc8:	b120      	cbz	r0, 12fd4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   12fca:	4b03      	ldr	r3, [pc, #12]	; (12fd8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   12fcc:	0180      	lsls	r0, r0, #6
   12fce:	f043 0301 	orr.w	r3, r3, #1
   12fd2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   12fd4:	4770      	bx	lr
   12fd6:	bf00      	nop
   12fd8:	00025400 	.word	0x00025400

00012fdc <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
   12fdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12fe0:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
   12fe4:	07db      	lsls	r3, r3, #31
   12fe6:	d52e      	bpl.n	13046 <board_nrf52840dongle_nrf52840_init+0x6a>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
   12fe8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   12fec:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   12ff0:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
   12ff4:	2b07      	cmp	r3, #7
   12ff6:	d126      	bne.n	13046 <board_nrf52840dongle_nrf52840_init+0x6a>
	     (UICR_REGOUT0_VOUT_DEFAULT << UICR_REGOUT0_VOUT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   12ff8:	4b14      	ldr	r3, [pc, #80]	; (1304c <board_nrf52840dongle_nrf52840_init+0x70>)
   12ffa:	2201      	movs	r2, #1
   12ffc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   13000:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   13004:	2a00      	cmp	r2, #0
   13006:	d0fb      	beq.n	13000 <board_nrf52840dongle_nrf52840_init+0x24>
			;
		}

		NRF_UICR->REGOUT0 =
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
   13008:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   1300c:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   13010:	f022 0207 	bic.w	r2, r2, #7
   13014:	f042 0204 	orr.w	r2, r2, #4
		NRF_UICR->REGOUT0 =
   13018:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
		    (UICR_REGOUT0_VOUT_3V0 << UICR_REGOUT0_VOUT_Pos);

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   1301c:	2200      	movs	r2, #0
   1301e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   13022:	4a0a      	ldr	r2, [pc, #40]	; (1304c <board_nrf52840dongle_nrf52840_init+0x70>)
   13024:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   13028:	2b00      	cmp	r3, #0
   1302a:	d0fb      	beq.n	13024 <board_nrf52840dongle_nrf52840_init+0x48>
   1302c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13030:	4907      	ldr	r1, [pc, #28]	; (13050 <board_nrf52840dongle_nrf52840_init+0x74>)
   13032:	4b08      	ldr	r3, [pc, #32]	; (13054 <board_nrf52840dongle_nrf52840_init+0x78>)
   13034:	68ca      	ldr	r2, [r1, #12]
   13036:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1303a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1303c:	60cb      	str	r3, [r1, #12]
   1303e:	f3bf 8f4f 	dsb	sy
    __NOP();
   13042:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   13044:	e7fd      	b.n	13042 <board_nrf52840dongle_nrf52840_init+0x66>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
   13046:	2000      	movs	r0, #0
   13048:	4770      	bx	lr
   1304a:	bf00      	nop
   1304c:	4001e000 	.word	0x4001e000
   13050:	e000ed00 	.word	0xe000ed00
   13054:	05fa0004 	.word	0x05fa0004

00013058 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   13058:	4b0e      	ldr	r3, [pc, #56]	; (13094 <bt_hex_real+0x3c>)
   1305a:	2940      	cmp	r1, #64	; 0x40
{
   1305c:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   1305e:	bf28      	it	cs
   13060:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   13062:	4c0d      	ldr	r4, [pc, #52]	; (13098 <bt_hex_real+0x40>)
   13064:	1846      	adds	r6, r0, r1
   13066:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   13068:	42b0      	cmp	r0, r6
   1306a:	f103 0302 	add.w	r3, r3, #2
   1306e:	d104      	bne.n	1307a <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   13070:	2300      	movs	r3, #0
   13072:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   13076:	4807      	ldr	r0, [pc, #28]	; (13094 <bt_hex_real+0x3c>)
   13078:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   1307a:	7802      	ldrb	r2, [r0, #0]
   1307c:	0912      	lsrs	r2, r2, #4
   1307e:	5ca2      	ldrb	r2, [r4, r2]
   13080:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   13084:	f810 2b01 	ldrb.w	r2, [r0], #1
   13088:	f002 020f 	and.w	r2, r2, #15
   1308c:	5ca2      	ldrb	r2, [r4, r2]
   1308e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   13092:	e7e9      	b.n	13068 <bt_hex_real+0x10>
   13094:	20003062 	.word	0x20003062
   13098:	000264ef 	.word	0x000264ef

0001309c <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   1309c:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   1309e:	7803      	ldrb	r3, [r0, #0]
   130a0:	b08b      	sub	sp, #44	; 0x2c
   130a2:	4604      	mov	r4, r0
   130a4:	ad07      	add	r5, sp, #28
   130a6:	2b03      	cmp	r3, #3
   130a8:	d821      	bhi.n	130ee <bt_addr_le_str_real+0x52>
   130aa:	e8df f003 	tbb	[pc, r3]
   130ae:	1a02      	.short	0x1a02
   130b0:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   130b2:	4912      	ldr	r1, [pc, #72]	; (130fc <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
   130b4:	4628      	mov	r0, r5
   130b6:	f00e feec 	bl	21e92 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   130ba:	7863      	ldrb	r3, [r4, #1]
   130bc:	9304      	str	r3, [sp, #16]
   130be:	78a3      	ldrb	r3, [r4, #2]
   130c0:	9303      	str	r3, [sp, #12]
   130c2:	78e3      	ldrb	r3, [r4, #3]
   130c4:	9302      	str	r3, [sp, #8]
   130c6:	7923      	ldrb	r3, [r4, #4]
   130c8:	9301      	str	r3, [sp, #4]
   130ca:	7963      	ldrb	r3, [r4, #5]
   130cc:	9300      	str	r3, [sp, #0]
   130ce:	4a0c      	ldr	r2, [pc, #48]	; (13100 <bt_addr_le_str_real+0x64>)
   130d0:	79a3      	ldrb	r3, [r4, #6]
   130d2:	9505      	str	r5, [sp, #20]
   130d4:	211e      	movs	r1, #30
   130d6:	480b      	ldr	r0, [pc, #44]	; (13104 <bt_addr_le_str_real+0x68>)
   130d8:	f00e fe9d 	bl	21e16 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   130dc:	4809      	ldr	r0, [pc, #36]	; (13104 <bt_addr_le_str_real+0x68>)
   130de:	b00b      	add	sp, #44	; 0x2c
   130e0:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   130e2:	4909      	ldr	r1, [pc, #36]	; (13108 <bt_addr_le_str_real+0x6c>)
   130e4:	e7e6      	b.n	130b4 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   130e6:	4909      	ldr	r1, [pc, #36]	; (1310c <bt_addr_le_str_real+0x70>)
   130e8:	e7e4      	b.n	130b4 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   130ea:	4909      	ldr	r1, [pc, #36]	; (13110 <bt_addr_le_str_real+0x74>)
   130ec:	e7e2      	b.n	130b4 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   130ee:	4a09      	ldr	r2, [pc, #36]	; (13114 <bt_addr_le_str_real+0x78>)
   130f0:	210a      	movs	r1, #10
   130f2:	4628      	mov	r0, r5
   130f4:	f00e fe8f 	bl	21e16 <snprintk>
		break;
   130f8:	e7df      	b.n	130ba <bt_addr_le_str_real+0x1e>
   130fa:	bf00      	nop
   130fc:	00025d88 	.word	0x00025d88
   13100:	00025daa 	.word	0x00025daa
   13104:	200030e3 	.word	0x200030e3
   13108:	00025d8f 	.word	0x00025d8f
   1310c:	00025d96 	.word	0x00025d96
   13110:	00025da0 	.word	0x00025da0
   13114:	000278f5 	.word	0x000278f5

00013118 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   13118:	6843      	ldr	r3, [r0, #4]
{
   1311a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1311c:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1311e:	0558      	lsls	r0, r3, #21
   13120:	d502      	bpl.n	13128 <valid_adv_param+0x10>
		return false;
   13122:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   13124:	b003      	add	sp, #12
   13126:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   13128:	6922      	ldr	r2, [r4, #16]
   1312a:	b10a      	cbz	r2, 13130 <valid_adv_param+0x18>
   1312c:	07d9      	lsls	r1, r3, #31
   1312e:	d5f8      	bpl.n	13122 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   13130:	4d1a      	ldr	r5, [pc, #104]	; (1319c <valid_adv_param+0x84>)
   13132:	7820      	ldrb	r0, [r4, #0]
   13134:	79eb      	ldrb	r3, [r5, #7]
   13136:	4283      	cmp	r3, r0
   13138:	d9f3      	bls.n	13122 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   1313a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   1313e:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   13140:	2207      	movs	r2, #7
   13142:	4669      	mov	r1, sp
   13144:	4428      	add	r0, r5
   13146:	9300      	str	r3, [sp, #0]
   13148:	f8cd 3003 	str.w	r3, [sp, #3]
   1314c:	f00e feda 	bl	21f04 <memcmp>
	if (param->id >= bt_dev.id_count ||
   13150:	2800      	cmp	r0, #0
   13152:	d0e6      	beq.n	13122 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   13154:	6860      	ldr	r0, [r4, #4]
   13156:	07c2      	lsls	r2, r0, #31
   13158:	d406      	bmi.n	13168 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   1315a:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   1315e:	2b08      	cmp	r3, #8
   13160:	d802      	bhi.n	13168 <valid_adv_param+0x50>
   13162:	68a3      	ldr	r3, [r4, #8]
   13164:	2b9f      	cmp	r3, #159	; 0x9f
   13166:	d9dc      	bls.n	13122 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   13168:	f010 0f30 	tst.w	r0, #48	; 0x30
   1316c:	d002      	beq.n	13174 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   1316e:	6923      	ldr	r3, [r4, #16]
   13170:	2b00      	cmp	r3, #0
   13172:	d0d6      	beq.n	13122 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   13174:	06c3      	lsls	r3, r0, #27
   13176:	d401      	bmi.n	1317c <valid_adv_param+0x64>
   13178:	6923      	ldr	r3, [r4, #16]
   1317a:	b943      	cbnz	r3, 1318e <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   1317c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   13180:	429a      	cmp	r2, r3
   13182:	d8ce      	bhi.n	13122 <valid_adv_param+0xa>
   13184:	2a1f      	cmp	r2, #31
   13186:	d9cc      	bls.n	13122 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   13188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1318c:	d8c9      	bhi.n	13122 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   1318e:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   13192:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   13196:	bf18      	it	ne
   13198:	2001      	movne	r0, #1
   1319a:	e7c3      	b.n	13124 <valid_adv_param+0xc>
   1319c:	200002a8 	.word	0x200002a8

000131a0 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   131a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131a4:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   131a6:	2120      	movs	r1, #32
{
   131a8:	4682      	mov	sl, r0
   131aa:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   131ac:	f003 fe26 	bl	16dfc <bt_hci_cmd_create>
	if (!buf) {
   131b0:	4606      	mov	r6, r0
   131b2:	2800      	cmp	r0, #0
   131b4:	d05c      	beq.n	13270 <hci_set_ad+0xd0>
   131b6:	2120      	movs	r1, #32
   131b8:	3008      	adds	r0, #8
   131ba:	f010 fef8 	bl	23fae <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   131be:	2220      	movs	r2, #32
   131c0:	2100      	movs	r1, #0
   131c2:	4681      	mov	r9, r0
   131c4:	f00e fed0 	bl	21f68 <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   131c8:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   131cc:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   131d0:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   131d2:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   131d4:	f8d4 8000 	ldr.w	r8, [r4]
   131d8:	2300      	movs	r3, #0
   131da:	6862      	ldr	r2, [r4, #4]
   131dc:	4293      	cmp	r3, r2
   131de:	d30d      	bcc.n	131fc <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   131e0:	9b00      	ldr	r3, [sp, #0]
   131e2:	3408      	adds	r4, #8
   131e4:	429c      	cmp	r4, r3
   131e6:	d1f5      	bne.n	131d4 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   131e8:	2200      	movs	r2, #0
   131ea:	4631      	mov	r1, r6
   131ec:	4650      	mov	r0, sl
	*data_len = set_data_len;
   131ee:	f889 5000 	strb.w	r5, [r9]
}
   131f2:	b003      	add	sp, #12
   131f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   131f8:	f003 bf5c 	b.w	170b4 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   131fc:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   13200:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   13204:	1ca8      	adds	r0, r5, #2
   13206:	1881      	adds	r1, r0, r2
   13208:	291f      	cmp	r1, #31
   1320a:	d91a      	bls.n	13242 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1320c:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   13210:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   13214:	d101      	bne.n	1321a <hci_set_ad+0x7a>
   13216:	2a00      	cmp	r2, #0
   13218:	dc11      	bgt.n	1323e <hci_set_ad+0x9e>
   1321a:	4b17      	ldr	r3, [pc, #92]	; (13278 <hci_set_ad+0xd8>)
   1321c:	4917      	ldr	r1, [pc, #92]	; (1327c <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
   1321e:	4818      	ldr	r0, [pc, #96]	; (13280 <hci_set_ad+0xe0>)
   13220:	1ac9      	subs	r1, r1, r3
   13222:	08c9      	lsrs	r1, r1, #3
   13224:	0189      	lsls	r1, r1, #6
   13226:	f041 0101 	orr.w	r1, r1, #1
   1322a:	f00e fb91 	bl	21950 <log_0>
		net_buf_unref(buf);
   1322e:	4630      	mov	r0, r6
   13230:	f007 f868 	bl	1a304 <net_buf_unref>
					return -EINVAL;
   13234:	f06f 0015 	mvn.w	r0, #21
}
   13238:	b003      	add	sp, #12
   1323a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   1323e:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   13242:	b2d7      	uxtb	r7, r2
   13244:	1c79      	adds	r1, r7, #1
   13246:	f80b 1005 	strb.w	r1, [fp, r5]
   1324a:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   1324c:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   1324e:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   13252:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   13256:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1325a:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   1325c:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   1325e:	f00e fe78 	bl	21f52 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   13262:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   13264:	443d      	add	r5, r7
   13266:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   13268:	3301      	adds	r3, #1
   1326a:	f108 0808 	add.w	r8, r8, #8
   1326e:	e7b4      	b.n	131da <hci_set_ad+0x3a>
		return -ENOBUFS;
   13270:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13274:	e7e0      	b.n	13238 <hci_set_ad+0x98>
   13276:	bf00      	nop
   13278:	00025224 	.word	0x00025224
   1327c:	0002522c 	.word	0x0002522c
   13280:	00026507 	.word	0x00026507

00013284 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   13284:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   13286:	4606      	mov	r6, r0
   13288:	4b1e      	ldr	r3, [pc, #120]	; (13304 <le_adv_start_add_conn+0x80>)
   1328a:	f816 2b09 	ldrb.w	r2, [r6], #9
   1328e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   13292:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   13294:	2300      	movs	r3, #0
{
   13296:	4605      	mov	r5, r0
   13298:	2207      	movs	r2, #7
   1329a:	460f      	mov	r7, r1
   1329c:	4630      	mov	r0, r6
   1329e:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   132a0:	9300      	str	r3, [sp, #0]
   132a2:	f8cd 3003 	str.w	r3, [sp, #3]
   132a6:	f00e fe2d 	bl	21f04 <memcmp>
   132aa:	782a      	ldrb	r2, [r5, #0]
   132ac:	4604      	mov	r4, r0
   132ae:	b9a8      	cbnz	r0, 132dc <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   132b0:	4b15      	ldr	r3, [pc, #84]	; (13308 <le_adv_start_add_conn+0x84>)
   132b2:	6818      	ldr	r0, [r3, #0]
   132b4:	8899      	ldrh	r1, [r3, #4]
   132b6:	9002      	str	r0, [sp, #8]
   132b8:	799b      	ldrb	r3, [r3, #6]
   132ba:	f8ad 100c 	strh.w	r1, [sp, #12]
   132be:	4610      	mov	r0, r2
   132c0:	a902      	add	r1, sp, #8
   132c2:	f88d 300e 	strb.w	r3, [sp, #14]
   132c6:	f001 fe53 	bl	14f70 <bt_conn_add_le>
		if (!conn) {
   132ca:	4605      	mov	r5, r0
   132cc:	b1b8      	cbz	r0, 132fe <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   132ce:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   132d0:	f001 fc5e 	bl	14b90 <bt_conn_set_state>
	*out_conn = conn;
   132d4:	603d      	str	r5, [r7, #0]
	return 0;
}
   132d6:	4620      	mov	r0, r4
   132d8:	b005      	add	sp, #20
   132da:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   132dc:	4631      	mov	r1, r6
   132de:	4610      	mov	r0, r2
   132e0:	f001 fe80 	bl	14fe4 <bt_conn_exists_le>
   132e4:	4604      	mov	r4, r0
   132e6:	b938      	cbnz	r0, 132f8 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   132e8:	7828      	ldrb	r0, [r5, #0]
   132ea:	4631      	mov	r1, r6
   132ec:	f001 fe40 	bl	14f70 <bt_conn_add_le>
	if (!conn) {
   132f0:	4605      	mov	r5, r0
   132f2:	b120      	cbz	r0, 132fe <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   132f4:	2105      	movs	r1, #5
   132f6:	e7eb      	b.n	132d0 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   132f8:	f06f 0415 	mvn.w	r4, #21
   132fc:	e7eb      	b.n	132d6 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   132fe:	f06f 040b 	mvn.w	r4, #11
   13302:	e7e8      	b.n	132d6 <le_adv_start_add_conn+0x52>
   13304:	200002a8 	.word	0x200002a8
   13308:	000253c0 	.word	0x000253c0

0001330c <bt_le_ext_adv_foreach>:
{
   1330c:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   1330e:	4801      	ldr	r0, [pc, #4]	; (13314 <bt_le_ext_adv_foreach+0x8>)
   13310:	4718      	bx	r3
   13312:	bf00      	nop
   13314:	200002c0 	.word	0x200002c0

00013318 <bt_le_adv_lookup_legacy>:
}
   13318:	4800      	ldr	r0, [pc, #0]	; (1331c <bt_le_adv_lookup_legacy+0x4>)
   1331a:	4770      	bx	lr
   1331c:	200002c0 	.word	0x200002c0

00013320 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   13320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   13324:	690e      	ldr	r6, [r1, #16]
{
   13326:	b08f      	sub	sp, #60	; 0x3c
   13328:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   1332a:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   1332c:	ebb6 0903 	subs.w	r9, r6, r3
{
   13330:	4605      	mov	r5, r0
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13332:	4892      	ldr	r0, [pc, #584]	; (1357c <bt_le_adv_start_legacy+0x25c>)
   13334:	9205      	str	r2, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable = false;
   13336:	bf18      	it	ne
   13338:	f04f 0901 	movne.w	r9, #1
{
   1333c:	460c      	mov	r4, r1
	struct bt_conn *conn = NULL;
   1333e:	9307      	str	r3, [sp, #28]
   13340:	f00e fe86 	bl	22050 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13344:	0787      	lsls	r7, r0, #30
   13346:	f140 810d 	bpl.w	13564 <bt_le_adv_start_legacy+0x244>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   1334a:	4608      	mov	r0, r1
   1334c:	f7ff fee4 	bl	13118 <valid_adv_param>
   13350:	b928      	cbnz	r0, 1335e <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   13352:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   13356:	4658      	mov	r0, fp
   13358:	b00f      	add	sp, #60	; 0x3c
   1335a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   1335e:	4620      	mov	r0, r4
   13360:	f010 f8d8 	bl	23514 <bt_id_adv_random_addr_check>
   13364:	4680      	mov	r8, r0
   13366:	2800      	cmp	r0, #0
   13368:	d0f3      	beq.n	13352 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1336a:	f105 0710 	add.w	r7, r5, #16
   1336e:	4638      	mov	r0, r7
   13370:	f00e fe6e 	bl	22050 <atomic_get>

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   13374:	f3c0 1b80 	ubfx	fp, r0, #6, #1
   13378:	0640      	lsls	r0, r0, #25
   1337a:	f100 80f6 	bmi.w	1356a <bt_le_adv_start_legacy+0x24a>
	(void)memset(&set_param, 0, sizeof(set_param));
   1337e:	220f      	movs	r2, #15
   13380:	4659      	mov	r1, fp
   13382:	a80a      	add	r0, sp, #40	; 0x28
   13384:	f00e fdf0 	bl	21f68 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   13388:	68a3      	ldr	r3, [r4, #8]
   1338a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   1338e:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   13390:	68e3      	ldr	r3, [r4, #12]
   13392:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   13396:	f00e fe4c 	bl	22032 <get_adv_channel_map>
	if (adv->id != param->id) {
   1339a:	782a      	ldrb	r2, [r5, #0]
   1339c:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   1339e:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   133a2:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   133a4:	f88d b036 	strb.w	fp, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   133a8:	d004      	beq.n	133b4 <bt_le_adv_start_legacy+0x94>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   133aa:	4874      	ldr	r0, [pc, #464]	; (1357c <bt_le_adv_start_legacy+0x25c>)
   133ac:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   133b0:	f00e fe54 	bl	2205c <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   133b4:	4a72      	ldr	r2, [pc, #456]	; (13580 <bt_le_adv_start_legacy+0x260>)
	adv->id = param->id;
   133b6:	7823      	ldrb	r3, [r4, #0]
   133b8:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   133ba:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   133be:	6861      	ldr	r1, [r4, #4]
   133c0:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   133c4:	464a      	mov	r2, r9
   133c6:	4628      	mov	r0, r5
   133c8:	f005 f802 	bl	183d0 <bt_id_set_adv_own_addr>
	if (err) {
   133cc:	4683      	mov	fp, r0
   133ce:	2800      	cmp	r0, #0
   133d0:	d1c1      	bne.n	13356 <bt_le_adv_start_legacy+0x36>
	if (dir_adv) {
   133d2:	f105 0009 	add.w	r0, r5, #9
   133d6:	2e00      	cmp	r6, #0
   133d8:	d053      	beq.n	13482 <bt_le_adv_start_legacy+0x162>
	memcpy(dst, src, sizeof(*dst));
   133da:	6921      	ldr	r1, [r4, #16]
   133dc:	2207      	movs	r2, #7
   133de:	f00e fdb8 	bl	21f52 <memcpy>
	name_type = get_adv_name_type_param(param);
   133e2:	4620      	mov	r0, r4
   133e4:	f00e fed7 	bl	22196 <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   133e8:	6863      	ldr	r3, [r4, #4]
   133ea:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   133ec:	4681      	mov	r9, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   133ee:	d551      	bpl.n	13494 <bt_le_adv_start_legacy+0x174>
		if (dir_adv) {
   133f0:	2e00      	cmp	r6, #0
   133f2:	d04c      	beq.n	1348e <bt_le_adv_start_legacy+0x16e>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   133f4:	f013 0f10 	tst.w	r3, #16
   133f8:	bf14      	ite	ne
   133fa:	2304      	movne	r3, #4
   133fc:	2301      	moveq	r3, #1
   133fe:	6921      	ldr	r1, [r4, #16]
   13400:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   13404:	2207      	movs	r2, #7
   13406:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1340a:	f00e fda2 	bl	21f52 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   1340e:	f04f 0800 	mov.w	r8, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   13412:	210f      	movs	r1, #15
   13414:	f242 0006 	movw	r0, #8198	; 0x2006
   13418:	f003 fcf0 	bl	16dfc <bt_hci_cmd_create>
	if (!buf) {
   1341c:	4683      	mov	fp, r0
   1341e:	2800      	cmp	r0, #0
   13420:	f000 80a6 	beq.w	13570 <bt_le_adv_start_legacy+0x250>
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add_mem(struct net_buf *buf, const void *mem,
				    size_t len)
{
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13424:	220f      	movs	r2, #15
   13426:	a90a      	add	r1, sp, #40	; 0x28
   13428:	3008      	adds	r0, #8
   1342a:	f010 fdc6 	bl	23fba <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   1342e:	2200      	movs	r2, #0
   13430:	4659      	mov	r1, fp
   13432:	f242 0006 	movw	r0, #8198	; 0x2006
   13436:	f003 fe3d 	bl	170b4 <bt_hci_cmd_send_sync>
	if (err) {
   1343a:	2800      	cmp	r0, #0
   1343c:	f040 809b 	bne.w	13576 <bt_le_adv_start_legacy+0x256>
	if (!dir_adv) {
   13440:	2e00      	cmp	r6, #0
   13442:	d037      	beq.n	134b4 <bt_le_adv_start_legacy+0x194>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   13444:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   13446:	07db      	lsls	r3, r3, #31
   13448:	d442      	bmi.n	134d0 <bt_le_adv_start_legacy+0x1b0>
	return bt_le_adv_set_enable_legacy(adv, enable);
   1344a:	2101      	movs	r1, #1
   1344c:	4628      	mov	r0, r5
   1344e:	f00e feb2 	bl	221b6 <bt_le_adv_set_enable_legacy>
	if (err) {
   13452:	4683      	mov	fp, r0
   13454:	2800      	cmp	r0, #0
   13456:	d07e      	beq.n	13556 <bt_le_adv_start_legacy+0x236>
   13458:	4b4a      	ldr	r3, [pc, #296]	; (13584 <bt_le_adv_start_legacy+0x264>)
   1345a:	494b      	ldr	r1, [pc, #300]	; (13588 <bt_le_adv_start_legacy+0x268>)
		BT_ERR("Failed to start advertiser");
   1345c:	484b      	ldr	r0, [pc, #300]	; (1358c <bt_le_adv_start_legacy+0x26c>)
   1345e:	1ac9      	subs	r1, r1, r3
   13460:	08c9      	lsrs	r1, r1, #3
   13462:	0189      	lsls	r1, r1, #6
   13464:	f041 0101 	orr.w	r1, r1, #1
   13468:	f00e fa72 	bl	21950 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1346c:	9807      	ldr	r0, [sp, #28]
   1346e:	2800      	cmp	r0, #0
   13470:	f43f af71 	beq.w	13356 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13474:	2100      	movs	r1, #0
   13476:	f001 fb8b 	bl	14b90 <bt_conn_set_state>
			bt_conn_unref(conn);
   1347a:	9807      	ldr	r0, [sp, #28]
   1347c:	f00f fb1f 	bl	22abe <bt_conn_unref>
   13480:	e769      	b.n	13356 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   13482:	9608      	str	r6, [sp, #32]
   13484:	2207      	movs	r2, #7
   13486:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   1348a:	a908      	add	r1, sp, #32
   1348c:	e7a7      	b.n	133de <bt_le_adv_start_legacy+0xbe>
			set_param.type = BT_HCI_ADV_IND;
   1348e:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   13492:	e7be      	b.n	13412 <bt_le_adv_start_legacy+0xf2>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   13494:	059a      	lsls	r2, r3, #22
   13496:	d403      	bmi.n	134a0 <bt_le_adv_start_legacy+0x180>
   13498:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1349a:	b90b      	cbnz	r3, 134a0 <bt_le_adv_start_legacy+0x180>
   1349c:	2802      	cmp	r0, #2
   1349e:	d103      	bne.n	134a8 <bt_le_adv_start_legacy+0x188>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   134a0:	2302      	movs	r3, #2
   134a2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   134a6:	e7b4      	b.n	13412 <bt_le_adv_start_legacy+0xf2>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   134a8:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   134aa:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   134ae:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   134b2:	e7ae      	b.n	13412 <bt_le_adv_start_legacy+0xf2>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   134b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   134b6:	9300      	str	r3, [sp, #0]
   134b8:	e9cd 8901 	strd	r8, r9, [sp, #4]
   134bc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   134be:	9905      	ldr	r1, [sp, #20]
   134c0:	4652      	mov	r2, sl
   134c2:	4628      	mov	r0, r5
   134c4:	f00e fdf0 	bl	220a8 <le_adv_update.constprop.0>
		if (err) {
   134c8:	4683      	mov	fp, r0
   134ca:	2800      	cmp	r0, #0
   134cc:	d0ba      	beq.n	13444 <bt_le_adv_start_legacy+0x124>
   134ce:	e742      	b.n	13356 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   134d0:	a907      	add	r1, sp, #28
   134d2:	4628      	mov	r0, r5
   134d4:	f7ff fed6 	bl	13284 <le_adv_start_add_conn>
		if (err) {
   134d8:	4683      	mov	fp, r0
   134da:	2800      	cmp	r0, #0
   134dc:	d0b5      	beq.n	1344a <bt_le_adv_start_legacy+0x12a>
			if (err == -ENOMEM && !dir_adv &&
   134de:	f110 0f0c 	cmn.w	r0, #12
   134e2:	f47f af38 	bne.w	13356 <bt_le_adv_start_legacy+0x36>
   134e6:	2e00      	cmp	r6, #0
   134e8:	f47f af35 	bne.w	13356 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   134ec:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   134ee:	0798      	lsls	r0, r3, #30
   134f0:	f53f af31 	bmi.w	13356 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   134f4:	6862      	ldr	r2, [r4, #4]
   134f6:	f082 0202 	eor.w	r2, r2, #2
   134fa:	f3c2 0b40 	ubfx	fp, r2, #1, #1
   134fe:	f00b 0201 	and.w	r2, fp, #1
   13502:	210d      	movs	r1, #13
   13504:	4638      	mov	r0, r7
   13506:	f00e fdb8 	bl	2207a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   1350a:	f109 33ff 	add.w	r3, r9, #4294967295
   1350e:	425a      	negs	r2, r3
   13510:	415a      	adcs	r2, r3
   13512:	2107      	movs	r1, #7
   13514:	4638      	mov	r0, r7
   13516:	f00e fdb0 	bl	2207a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   1351a:	f1a9 0102 	sub.w	r1, r9, #2
   1351e:	424a      	negs	r2, r1
   13520:	414a      	adcs	r2, r1
   13522:	4638      	mov	r0, r7
   13524:	2108      	movs	r1, #8
   13526:	f00e fda8 	bl	2207a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   1352a:	6862      	ldr	r2, [r4, #4]
   1352c:	2109      	movs	r1, #9
   1352e:	f002 0201 	and.w	r2, r2, #1
   13532:	4638      	mov	r0, r7
   13534:	f00e fda1 	bl	2207a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   13538:	4642      	mov	r2, r8
   1353a:	210a      	movs	r1, #10
   1353c:	4638      	mov	r0, r7
   1353e:	f00e fd9c 	bl	2207a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   13542:	6862      	ldr	r2, [r4, #4]
   13544:	210c      	movs	r1, #12
   13546:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1354a:	4638      	mov	r0, r7
   1354c:	f00e fd95 	bl	2207a <atomic_set_bit_to>
	return 0;
   13550:	f04f 0b00 	mov.w	fp, #0
   13554:	e6ff      	b.n	13356 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   13556:	9807      	ldr	r0, [sp, #28]
   13558:	b108      	cbz	r0, 1355e <bt_le_adv_start_legacy+0x23e>
		bt_conn_unref(conn);
   1355a:	f00f fab0 	bl	22abe <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1355e:	2e00      	cmp	r6, #0
   13560:	d1cd      	bne.n	134fe <bt_le_adv_start_legacy+0x1de>
   13562:	e7c7      	b.n	134f4 <bt_le_adv_start_legacy+0x1d4>
		return -EAGAIN;
   13564:	f06f 0b0a 	mvn.w	fp, #10
   13568:	e6f5      	b.n	13356 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   1356a:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   1356e:	e6f2      	b.n	13356 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   13570:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   13574:	e6ef      	b.n	13356 <bt_le_adv_start_legacy+0x36>
   13576:	4683      	mov	fp, r0
   13578:	e6ed      	b.n	13356 <bt_le_adv_start_legacy+0x36>
   1357a:	bf00      	nop
   1357c:	20000374 	.word	0x20000374
   13580:	200002a8 	.word	0x200002a8
   13584:	00025224 	.word	0x00025224
   13588:	0002522c 	.word	0x0002522c
   1358c:	00026520 	.word	0x00026520

00013590 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   13590:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13592:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   13594:	9a06      	ldr	r2, [sp, #24]
{
   13596:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   13598:	e9cd 3200 	strd	r3, r2, [sp]
   1359c:	462b      	mov	r3, r5
   1359e:	460a      	mov	r2, r1
   135a0:	4601      	mov	r1, r0
   135a2:	4811      	ldr	r0, [pc, #68]	; (135e8 <bt_le_adv_start+0x58>)
   135a4:	f7ff febc 	bl	13320 <bt_le_adv_start_legacy>
   135a8:	4621      	mov	r1, r4
   135aa:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   135ac:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   135ae:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   135b2:	429d      	cmp	r5, r3
   135b4:	d102      	bne.n	135bc <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   135b6:	4630      	mov	r0, r6
   135b8:	b002      	add	sp, #8
   135ba:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   135bc:	880a      	ldrh	r2, [r1, #0]
   135be:	4282      	cmp	r2, r0
   135c0:	d104      	bne.n	135cc <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   135c2:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   135c4:	b112      	cbz	r2, 135cc <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   135c6:	7812      	ldrb	r2, [r2, #0]
   135c8:	07d2      	lsls	r2, r2, #31
   135ca:	d402      	bmi.n	135d2 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   135cc:	3301      	adds	r3, #1
   135ce:	3108      	adds	r1, #8
   135d0:	e7ef      	b.n	135b2 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   135d2:	4906      	ldr	r1, [pc, #24]	; (135ec <bt_le_adv_start+0x5c>)
   135d4:	4806      	ldr	r0, [pc, #24]	; (135f0 <bt_le_adv_start+0x60>)
   135d6:	f011 fc3d 	bl	24e54 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   135da:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   135de:	2300      	movs	r3, #0
   135e0:	4803      	ldr	r0, [pc, #12]	; (135f0 <bt_le_adv_start+0x60>)
   135e2:	f00a f92d 	bl	1d840 <k_work_reschedule>
   135e6:	e7e6      	b.n	135b6 <bt_le_adv_start+0x26>
   135e8:	200002c0 	.word	0x200002c0
   135ec:	00013691 	.word	0x00013691
   135f0:	200002d8 	.word	0x200002d8

000135f4 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   135f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   135f6:	4821      	ldr	r0, [pc, #132]	; (1367c <bt_le_adv_stop+0x88>)
   135f8:	f00e fe04 	bl	22204 <bt_le_lim_adv_cancel_timeout>
   135fc:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   13600:	481f      	ldr	r0, [pc, #124]	; (13680 <bt_le_adv_stop+0x8c>)
   13602:	f00e fd2b 	bl	2205c <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13606:	481e      	ldr	r0, [pc, #120]	; (13680 <bt_le_adv_stop+0x8c>)
   13608:	f00e fd22 	bl	22050 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1360c:	0642      	lsls	r2, r0, #25
   1360e:	f3c0 1380 	ubfx	r3, r0, #6, #1
   13612:	d530      	bpl.n	13676 <bt_le_adv_stop+0x82>
   13614:	481a      	ldr	r0, [pc, #104]	; (13680 <bt_le_adv_stop+0x8c>)
   13616:	f00e fd1b 	bl	22050 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1361a:	0583      	lsls	r3, r0, #22
   1361c:	d521      	bpl.n	13662 <bt_le_adv_stop+0x6e>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1361e:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   13620:	4818      	ldr	r0, [pc, #96]	; (13684 <bt_le_adv_stop+0x90>)
   13622:	9300      	str	r3, [sp, #0]
   13624:	2207      	movs	r2, #7
   13626:	4669      	mov	r1, sp
   13628:	f8cd 3003 	str.w	r3, [sp, #3]
   1362c:	f00e fc6a 	bl	21f04 <memcmp>
   13630:	4b15      	ldr	r3, [pc, #84]	; (13688 <bt_le_adv_stop+0x94>)
   13632:	b9e0      	cbnz	r0, 1366e <bt_le_adv_stop+0x7a>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   13634:	4a15      	ldr	r2, [pc, #84]	; (1368c <bt_le_adv_stop+0x98>)
   13636:	8891      	ldrh	r1, [r2, #4]
   13638:	6810      	ldr	r0, [r2, #0]
   1363a:	7992      	ldrb	r2, [r2, #6]
   1363c:	f8ad 100c 	strh.w	r1, [sp, #12]
   13640:	f88d 200e 	strb.w	r2, [sp, #14]
   13644:	9002      	str	r0, [sp, #8]
   13646:	2204      	movs	r2, #4
   13648:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1364a:	7e18      	ldrb	r0, [r3, #24]
   1364c:	f001 fcf0 	bl	15030 <bt_conn_lookup_state_le>
   13650:	4604      	mov	r4, r0
	if (conn) {
   13652:	b130      	cbz	r0, 13662 <bt_le_adv_stop+0x6e>
		conn->err = status;
   13654:	2100      	movs	r1, #0
   13656:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13658:	f001 fa9a 	bl	14b90 <bt_conn_set_state>
		bt_conn_unref(conn);
   1365c:	4620      	mov	r0, r4
   1365e:	f00f fa2e 	bl	22abe <bt_conn_unref>
		err = bt_le_adv_set_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = bt_le_adv_set_enable_legacy(adv, false);
   13662:	4806      	ldr	r0, [pc, #24]	; (1367c <bt_le_adv_stop+0x88>)
   13664:	2100      	movs	r1, #0
   13666:	f00e fda6 	bl	221b6 <bt_le_adv_set_enable_legacy>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   1366a:	b004      	add	sp, #16
   1366c:	bd10      	pop	{r4, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1366e:	2205      	movs	r2, #5
   13670:	f103 0121 	add.w	r1, r3, #33	; 0x21
   13674:	e7e9      	b.n	1364a <bt_le_adv_stop+0x56>
		return 0;
   13676:	4618      	mov	r0, r3
   13678:	e7f7      	b.n	1366a <bt_le_adv_stop+0x76>
   1367a:	bf00      	nop
   1367c:	200002c0 	.word	0x200002c0
   13680:	200002d0 	.word	0x200002d0
   13684:	200002c9 	.word	0x200002c9
   13688:	200002a8 	.word	0x200002a8
   1368c:	000253c0 	.word	0x000253c0

00013690 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   13690:	b508      	push	{r3, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   13692:	f7ff ffaf 	bl	135f4 <bt_le_adv_stop>
   13696:	4b06      	ldr	r3, [pc, #24]	; (136b0 <adv_timeout+0x20>)
   13698:	4a06      	ldr	r2, [pc, #24]	; (136b4 <adv_timeout+0x24>)
   1369a:	1ad2      	subs	r2, r2, r3
   1369c:	08d2      	lsrs	r2, r2, #3
#endif
	BT_WARN("Failed to stop advertising: %d", err);
   1369e:	0192      	lsls	r2, r2, #6
	err = bt_le_adv_stop();
   136a0:	4601      	mov	r1, r0
}
   136a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_WARN("Failed to stop advertising: %d", err);
   136a6:	4804      	ldr	r0, [pc, #16]	; (136b8 <adv_timeout+0x28>)
   136a8:	f042 0202 	orr.w	r2, r2, #2
   136ac:	f00e b95d 	b.w	2196a <log_1>
   136b0:	00025224 	.word	0x00025224
   136b4:	0002522c 	.word	0x0002522c
   136b8:	0002653b 	.word	0x0002653b

000136bc <bt_le_adv_resume>:
{
   136bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   136be:	481e      	ldr	r0, [pc, #120]	; (13738 <bt_le_adv_resume+0x7c>)
   136c0:	4c1d      	ldr	r4, [pc, #116]	; (13738 <bt_le_adv_resume+0x7c>)
   136c2:	f00e fcc5 	bl	22050 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   136c6:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   136ca:	d032      	beq.n	13732 <bt_le_adv_resume+0x76>
   136cc:	4620      	mov	r0, r4
   136ce:	f00e fcbf 	bl	22050 <atomic_get>
   136d2:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   136d4:	f3c0 1580 	ubfx	r5, r0, #6, #1
   136d8:	d42b      	bmi.n	13732 <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   136da:	4620      	mov	r0, r4
   136dc:	f00e fcb8 	bl	22050 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   136e0:	0583      	lsls	r3, r0, #22
   136e2:	d526      	bpl.n	13732 <bt_le_adv_resume+0x76>
	err = le_adv_start_add_conn(adv, &conn);
   136e4:	a901      	add	r1, sp, #4
   136e6:	f1a4 0010 	sub.w	r0, r4, #16
   136ea:	f7ff fdcb 	bl	13284 <le_adv_start_add_conn>
	if (err) {
   136ee:	bb00      	cbnz	r0, 13732 <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
   136f0:	2101      	movs	r1, #1
   136f2:	f1a4 0010 	sub.w	r0, r4, #16
   136f6:	f00e fd5e 	bl	221b6 <bt_le_adv_set_enable_legacy>
	if (err) {
   136fa:	b150      	cbz	r0, 13712 <bt_le_adv_resume+0x56>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   136fc:	4629      	mov	r1, r5
   136fe:	9801      	ldr	r0, [sp, #4]
   13700:	f001 fa46 	bl	14b90 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13704:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   13708:	4620      	mov	r0, r4
   1370a:	f00e fca7 	bl	2205c <atomic_and>
	return (old & mask) != 0;
   1370e:	f3c0 3540 	ubfx	r5, r0, #13, #1
	bt_conn_unref(conn);
   13712:	9801      	ldr	r0, [sp, #4]
   13714:	f00f f9d3 	bl	22abe <bt_conn_unref>
	if (persist_paused) {
   13718:	b15d      	cbz	r5, 13732 <bt_le_adv_resume+0x76>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1371a:	f3bf 8f5b 	dmb	ish
   1371e:	e854 3f00 	ldrex	r3, [r4]
   13722:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   13726:	e844 3200 	strex	r2, r3, [r4]
   1372a:	2a00      	cmp	r2, #0
   1372c:	d1f7      	bne.n	1371e <bt_le_adv_resume+0x62>
   1372e:	f3bf 8f5b 	dmb	ish
}
   13732:	b003      	add	sp, #12
   13734:	bd30      	pop	{r4, r5, pc}
   13736:	bf00      	nop
   13738:	200002d0 	.word	0x200002d0

0001373c <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   1373c:	4b02      	ldr	r3, [pc, #8]	; (13748 <att_cfm_sent+0xc>)
   1373e:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   13742:	f00e bd8f 	b.w	22264 <att_sent>
   13746:	bf00      	nop
   13748:	000225e5 	.word	0x000225e5

0001374c <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   1374c:	4b02      	ldr	r3, [pc, #8]	; (13758 <att_rsp_sent+0xc>)
   1374e:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   13752:	f00e bd87 	b.w	22264 <att_sent>
   13756:	bf00      	nop
   13758:	000225c9 	.word	0x000225c9

0001375c <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   1375c:	4b02      	ldr	r3, [pc, #8]	; (13768 <att_req_sent+0xc>)
   1375e:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   13762:	f00e bd7f 	b.w	22264 <att_sent>
   13766:	bf00      	nop
   13768:	000225af 	.word	0x000225af

0001376c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1376c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1376e:	3808      	subs	r0, #8
   13770:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   13772:	a901      	add	r1, sp, #4
   13774:	4802      	ldr	r0, [pc, #8]	; (13780 <bt_att_released+0x14>)
   13776:	f010 fec2 	bl	244fe <k_mem_slab_free>
}
   1377a:	b003      	add	sp, #12
   1377c:	f85d fb04 	ldr.w	pc, [sp], #4
   13780:	20000738 	.word	0x20000738

00013784 <read_group_cb>:
{
   13784:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   13788:	4606      	mov	r6, r0
   1378a:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1378c:	f04f 0800 	mov.w	r8, #0
   13790:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   13794:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   13796:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   13798:	f88d 8008 	strb.w	r8, [sp, #8]
   1379c:	a902      	add	r1, sp, #8
{
   1379e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   137a0:	f8ad 300a 	strh.w	r3, [sp, #10]
   137a4:	f010 fb5a 	bl	23e5c <bt_uuid_cmp>
   137a8:	b1a0      	cbz	r0, 137d4 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   137aa:	f642 0301 	movw	r3, #10241	; 0x2801
   137ae:	6830      	ldr	r0, [r6, #0]
   137b0:	f88d 800c 	strb.w	r8, [sp, #12]
   137b4:	a903      	add	r1, sp, #12
   137b6:	f8ad 300e 	strh.w	r3, [sp, #14]
   137ba:	f010 fb4f 	bl	23e5c <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   137be:	b148      	cbz	r0, 137d4 <read_group_cb+0x50>
		if (data->group &&
   137c0:	6923      	ldr	r3, [r4, #16]
   137c2:	b11b      	cbz	r3, 137cc <read_group_cb+0x48>
   137c4:	885a      	ldrh	r2, [r3, #2]
   137c6:	42aa      	cmp	r2, r5
   137c8:	d200      	bcs.n	137cc <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   137ca:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   137cc:	2001      	movs	r0, #1
}
   137ce:	b004      	add	sp, #16
   137d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   137d4:	6861      	ldr	r1, [r4, #4]
   137d6:	6830      	ldr	r0, [r6, #0]
   137d8:	f010 fb40 	bl	23e5c <bt_uuid_cmp>
   137dc:	b110      	cbz	r0, 137e4 <read_group_cb+0x60>
		data->group = NULL;
   137de:	2300      	movs	r3, #0
   137e0:	6123      	str	r3, [r4, #16]
   137e2:	e7f3      	b.n	137cc <read_group_cb+0x48>
	if (data->rsp->len &&
   137e4:	68e3      	ldr	r3, [r4, #12]
   137e6:	68a0      	ldr	r0, [r4, #8]
   137e8:	781a      	ldrb	r2, [r3, #0]
   137ea:	b13a      	cbz	r2, 137fc <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   137ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   137f0:	8981      	ldrh	r1, [r0, #12]
   137f2:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   137f4:	4293      	cmp	r3, r2
   137f6:	da01      	bge.n	137fc <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   137f8:	2000      	movs	r0, #0
   137fa:	e7e8      	b.n	137ce <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   137fc:	2104      	movs	r1, #4
   137fe:	3008      	adds	r0, #8
   13800:	f010 fbd5 	bl	23fae <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   13804:	4b09      	ldr	r3, [pc, #36]	; (1382c <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   13806:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   13808:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1380a:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1380c:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1380e:	4631      	mov	r1, r6
   13810:	9300      	str	r3, [sp, #0]
   13812:	9401      	str	r4, [sp, #4]
   13814:	2300      	movs	r3, #0
   13816:	4638      	mov	r0, r7
   13818:	f00e fd74 	bl	22304 <att_chan_read>
	if (read < 0) {
   1381c:	2800      	cmp	r0, #0
   1381e:	dbeb      	blt.n	137f8 <read_group_cb+0x74>
	if (!data->group) {
   13820:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   13822:	3800      	subs	r0, #0
   13824:	bf18      	it	ne
   13826:	2001      	movne	r0, #1
   13828:	e7d1      	b.n	137ce <read_group_cb+0x4a>
   1382a:	bf00      	nop
   1382c:	00022529 	.word	0x00022529

00013830 <read_type_cb>:
{
   13830:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   13834:	f8d2 8000 	ldr.w	r8, [r2]
{
   13838:	4606      	mov	r6, r0
   1383a:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1383c:	6800      	ldr	r0, [r0, #0]
   1383e:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   13840:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   13844:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   13846:	f010 fb09 	bl	23e5c <bt_uuid_cmp>
   1384a:	4607      	mov	r7, r0
   1384c:	2800      	cmp	r0, #0
   1384e:	d13e      	bne.n	138ce <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   13850:	4628      	mov	r0, r5
   13852:	2215      	movs	r2, #21
   13854:	4631      	mov	r1, r6
   13856:	f00f fc2b 	bl	230b0 <bt_gatt_check_perm>
   1385a:	4605      	mov	r5, r0
   1385c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1385e:	b148      	cbz	r0, 13874 <read_type_cb+0x44>
		if (data->rsp->len) {
   13860:	68e3      	ldr	r3, [r4, #12]
   13862:	781b      	ldrb	r3, [r3, #0]
   13864:	b923      	cbnz	r3, 13870 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   13866:	2500      	movs	r5, #0
}
   13868:	4628      	mov	r0, r5
   1386a:	b003      	add	sp, #12
   1386c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   13870:	7527      	strb	r7, [r4, #20]
   13872:	e7f8      	b.n	13866 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   13874:	68a0      	ldr	r0, [r4, #8]
   13876:	f010 fb78 	bl	23f6a <net_buf_frag_last>
   1387a:	2102      	movs	r1, #2
   1387c:	3008      	adds	r0, #8
   1387e:	f010 fb96 	bl	23fae <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   13882:	4b14      	ldr	r3, [pc, #80]	; (138d4 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   13884:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   13886:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   13888:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1388c:	4631      	mov	r1, r6
   1388e:	9300      	str	r3, [sp, #0]
   13890:	9401      	str	r4, [sp, #4]
   13892:	462b      	mov	r3, r5
   13894:	4640      	mov	r0, r8
   13896:	f00e fd35 	bl	22304 <att_chan_read>
	if (read < 0) {
   1389a:	2800      	cmp	r0, #0
   1389c:	da07      	bge.n	138ae <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1389e:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   138a2:	bf26      	itte	cs
   138a4:	4240      	negcs	r0, r0
   138a6:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   138a8:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   138aa:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   138ac:	e7dc      	b.n	13868 <read_type_cb+0x38>
	if (!data->item) {
   138ae:	6923      	ldr	r3, [r4, #16]
   138b0:	2b00      	cmp	r3, #0
   138b2:	d0d8      	beq.n	13866 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   138b4:	68a0      	ldr	r0, [r4, #8]
   138b6:	f00e fccd 	bl	22254 <net_buf_frags_len>
   138ba:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   138be:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   138c0:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   138c2:	7818      	ldrb	r0, [r3, #0]
   138c4:	4285      	cmp	r5, r0
   138c6:	bf94      	ite	ls
   138c8:	2500      	movls	r5, #0
   138ca:	2501      	movhi	r5, #1
   138cc:	e7cc      	b.n	13868 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   138ce:	2501      	movs	r5, #1
   138d0:	e7ca      	b.n	13868 <read_type_cb+0x38>
   138d2:	bf00      	nop
   138d4:	00022271 	.word	0x00022271

000138d8 <find_type_cb>:
{
   138d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   138dc:	f8d2 9000 	ldr.w	r9, [r2]
{
   138e0:	b091      	sub	sp, #68	; 0x44
   138e2:	4607      	mov	r7, r0
   138e4:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   138e6:	2500      	movs	r5, #0
   138e8:	f642 0301 	movw	r3, #10241	; 0x2801
   138ec:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   138ee:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   138f2:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   138f6:	a90b      	add	r1, sp, #44	; 0x2c
{
   138f8:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   138fa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   138fe:	f010 faad 	bl	23e5c <bt_uuid_cmp>
   13902:	2800      	cmp	r0, #0
   13904:	d066      	beq.n	139d4 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   13906:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1390a:	6838      	ldr	r0, [r7, #0]
   1390c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   13910:	a90b      	add	r1, sp, #44	; 0x2c
   13912:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   13916:	f010 faa1 	bl	23e5c <bt_uuid_cmp>
   1391a:	b138      	cbz	r0, 1392c <find_type_cb+0x54>
		if (data->group &&
   1391c:	68a3      	ldr	r3, [r4, #8]
   1391e:	b11b      	cbz	r3, 13928 <find_type_cb+0x50>
   13920:	885a      	ldrh	r2, [r3, #2]
   13922:	42b2      	cmp	r2, r6
   13924:	d200      	bcs.n	13928 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   13926:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   13928:	2001      	movs	r0, #1
   1392a:	e009      	b.n	13940 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1392c:	6861      	ldr	r1, [r4, #4]
   1392e:	4608      	mov	r0, r1
   13930:	f00e fc90 	bl	22254 <net_buf_frags_len>
   13934:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   13938:	1a1b      	subs	r3, r3, r0
   1393a:	2b03      	cmp	r3, #3
   1393c:	d803      	bhi.n	13946 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1393e:	2000      	movs	r0, #0
}
   13940:	b011      	add	sp, #68	; 0x44
   13942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   13946:	4608      	mov	r0, r1
   13948:	f010 fb0f 	bl	23f6a <net_buf_frag_last>
   1394c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1394e:	6860      	ldr	r0, [r4, #4]
   13950:	f00e fc80 	bl	22254 <net_buf_frags_len>
   13954:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   13958:	f105 0b08 	add.w	fp, r5, #8
   1395c:	ebaa 0a00 	sub.w	sl, sl, r0
   13960:	4658      	mov	r0, fp
   13962:	f010 fb5f 	bl	24024 <net_buf_simple_tailroom>
   13966:	4582      	cmp	sl, r0
   13968:	d237      	bcs.n	139da <find_type_cb+0x102>
   1396a:	6860      	ldr	r0, [r4, #4]
   1396c:	f00e fc72 	bl	22254 <net_buf_frags_len>
   13970:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   13974:	1a18      	subs	r0, r3, r0
	if (!len) {
   13976:	b970      	cbnz	r0, 13996 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   13978:	6863      	ldr	r3, [r4, #4]
   1397a:	7998      	ldrb	r0, [r3, #6]
   1397c:	f006 fc06 	bl	1a18c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   13980:	2200      	movs	r2, #0
   13982:	2300      	movs	r3, #0
   13984:	f010 fabd 	bl	23f02 <net_buf_alloc_fixed>
		if (!frag) {
   13988:	4605      	mov	r5, r0
   1398a:	2800      	cmp	r0, #0
   1398c:	d0d7      	beq.n	1393e <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1398e:	4601      	mov	r1, r0
   13990:	6860      	ldr	r0, [r4, #4]
   13992:	f010 fafb 	bl	23f8c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   13996:	2300      	movs	r3, #0
   13998:	9300      	str	r3, [sp, #0]
   1399a:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1399e:	4639      	mov	r1, r7
   139a0:	2310      	movs	r3, #16
   139a2:	aa02      	add	r2, sp, #8
   139a4:	4640      	mov	r0, r8
   139a6:	47c8      	blx	r9
	if (read < 0) {
   139a8:	1e07      	subs	r7, r0, #0
   139aa:	db13      	blt.n	139d4 <find_type_cb+0xfc>
	if (read != data->value_len) {
   139ac:	7c22      	ldrb	r2, [r4, #16]
   139ae:	68e0      	ldr	r0, [r4, #12]
   139b0:	42ba      	cmp	r2, r7
   139b2:	d037      	beq.n	13a24 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   139b4:	4601      	mov	r1, r0
   139b6:	a80b      	add	r0, sp, #44	; 0x2c
   139b8:	f010 fa7a 	bl	23eb0 <bt_uuid_create>
   139bc:	b988      	cbnz	r0, 139e2 <find_type_cb+0x10a>
   139be:	4a1b      	ldr	r2, [pc, #108]	; (13a2c <find_type_cb+0x154>)
   139c0:	4b1b      	ldr	r3, [pc, #108]	; (13a30 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   139c2:	7c21      	ldrb	r1, [r4, #16]
   139c4:	481b      	ldr	r0, [pc, #108]	; (13a34 <find_type_cb+0x15c>)
   139c6:	1ad2      	subs	r2, r2, r3
   139c8:	08d2      	lsrs	r2, r2, #3
   139ca:	0192      	lsls	r2, r2, #6
   139cc:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
   139d0:	f00d ffcb 	bl	2196a <log_1>
	data->group = NULL;
   139d4:	2300      	movs	r3, #0
   139d6:	60a3      	str	r3, [r4, #8]
   139d8:	e7a6      	b.n	13928 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   139da:	4658      	mov	r0, fp
   139dc:	f010 fb22 	bl	24024 <net_buf_simple_tailroom>
   139e0:	e7c9      	b.n	13976 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   139e2:	b2fa      	uxtb	r2, r7
   139e4:	a902      	add	r1, sp, #8
   139e6:	a806      	add	r0, sp, #24
   139e8:	f010 fa62 	bl	23eb0 <bt_uuid_create>
   139ec:	b948      	cbnz	r0, 13a02 <find_type_cb+0x12a>
   139ee:	4a0f      	ldr	r2, [pc, #60]	; (13a2c <find_type_cb+0x154>)
   139f0:	4b0f      	ldr	r3, [pc, #60]	; (13a30 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
   139f2:	4811      	ldr	r0, [pc, #68]	; (13a38 <find_type_cb+0x160>)
   139f4:	1ad2      	subs	r2, r2, r3
   139f6:	08d2      	lsrs	r2, r2, #3
   139f8:	0192      	lsls	r2, r2, #6
   139fa:	f042 0202 	orr.w	r2, r2, #2
   139fe:	4639      	mov	r1, r7
   13a00:	e7e6      	b.n	139d0 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   13a02:	a906      	add	r1, sp, #24
   13a04:	a80b      	add	r0, sp, #44	; 0x2c
   13a06:	f010 fa29 	bl	23e5c <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   13a0a:	2800      	cmp	r0, #0
   13a0c:	d1e2      	bne.n	139d4 <find_type_cb+0xfc>
	data->err = 0x00;
   13a0e:	2300      	movs	r3, #0
   13a10:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   13a12:	2104      	movs	r1, #4
   13a14:	f105 0008 	add.w	r0, r5, #8
   13a18:	f010 fac9 	bl	23fae <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   13a1c:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   13a1e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   13a20:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   13a22:	e781      	b.n	13928 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   13a24:	a902      	add	r1, sp, #8
   13a26:	f00e fa6d 	bl	21f04 <memcmp>
   13a2a:	e7ee      	b.n	13a0a <find_type_cb+0x132>
   13a2c:	00025234 	.word	0x00025234
   13a30:	00025224 	.word	0x00025224
   13a34:	00026561 	.word	0x00026561
   13a38:	00026580 	.word	0x00026580

00013a3c <chan_send>:
{
   13a3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   13a40:	688b      	ldr	r3, [r1, #8]
   13a42:	781b      	ldrb	r3, [r3, #0]
   13a44:	2bd2      	cmp	r3, #210	; 0xd2
{
   13a46:	4606      	mov	r6, r0
   13a48:	460c      	mov	r4, r1
   13a4a:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   13a4c:	d116      	bne.n	13a7c <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
   13a4e:	6803      	ldr	r3, [r0, #0]
   13a50:	6818      	ldr	r0, [r3, #0]
   13a52:	f010 f93f 	bl	23cd4 <bt_smp_sign>
		if (err) {
   13a56:	4605      	mov	r5, r0
   13a58:	b180      	cbz	r0, 13a7c <chan_send+0x40>
   13a5a:	4b24      	ldr	r3, [pc, #144]	; (13aec <chan_send+0xb0>)
   13a5c:	4924      	ldr	r1, [pc, #144]	; (13af0 <chan_send+0xb4>)
			BT_ERR("Error signing data");
   13a5e:	4825      	ldr	r0, [pc, #148]	; (13af4 <chan_send+0xb8>)
   13a60:	1ac9      	subs	r1, r1, r3
   13a62:	08c9      	lsrs	r1, r1, #3
   13a64:	0189      	lsls	r1, r1, #6
   13a66:	f041 0101 	orr.w	r1, r1, #1
   13a6a:	f00d ff71 	bl	21950 <log_0>
			net_buf_unref(buf);
   13a6e:	4620      	mov	r0, r4
   13a70:	f006 fc48 	bl	1a304 <net_buf_unref>
}
   13a74:	4628      	mov	r0, r5
   13a76:	b003      	add	sp, #12
   13a78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   13a7c:	f104 0008 	add.w	r0, r4, #8
   13a80:	f010 facc 	bl	2401c <net_buf_simple_headroom>
	state->len = buf->len;
   13a84:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   13a88:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   13a8a:	b957      	cbnz	r7, 13aa2 <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
   13a8c:	68a3      	ldr	r3, [r4, #8]
   13a8e:	7818      	ldrb	r0, [r3, #0]
   13a90:	f00e fc00 	bl	22294 <att_op_get_type>
   13a94:	1e43      	subs	r3, r0, #1
   13a96:	b2db      	uxtb	r3, r3
   13a98:	2b04      	cmp	r3, #4
   13a9a:	bf9c      	itt	ls
   13a9c:	4a16      	ldrls	r2, [pc, #88]	; (13af8 <chan_send+0xbc>)
   13a9e:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   13aa2:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   13aa4:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   13aa8:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   13aaa:	4b14      	ldr	r3, [pc, #80]	; (13afc <chan_send+0xc0>)
   13aac:	429f      	cmp	r7, r3
   13aae:	d018      	beq.n	13ae2 <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
   13ab0:	4b13      	ldr	r3, [pc, #76]	; (13b00 <chan_send+0xc4>)
   13ab2:	429f      	cmp	r7, r3
   13ab4:	d017      	beq.n	13ae6 <chan_send+0xaa>
		return att_sent;
   13ab6:	4913      	ldr	r1, [pc, #76]	; (13b04 <chan_send+0xc8>)
   13ab8:	4b13      	ldr	r3, [pc, #76]	; (13b08 <chan_send+0xcc>)
   13aba:	4a14      	ldr	r2, [pc, #80]	; (13b0c <chan_send+0xd0>)
   13abc:	428f      	cmp	r7, r1
   13abe:	bf18      	it	ne
   13ac0:	4613      	movne	r3, r2
			       &chan->chan.chan);
   13ac2:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   13ac4:	9600      	str	r6, [sp, #0]
   13ac6:	4622      	mov	r2, r4
   13ac8:	2104      	movs	r1, #4
   13aca:	f00f fdc5 	bl	23658 <bt_l2cap_send_cb>
	if (err) {
   13ace:	4605      	mov	r5, r0
   13ad0:	2800      	cmp	r0, #0
   13ad2:	d0cf      	beq.n	13a74 <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
   13ad4:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   13ad6:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   13ada:	fa10 f088 	uxtah	r0, r0, r8
   13ade:	60a0      	str	r0, [r4, #8]
}
   13ae0:	e7c8      	b.n	13a74 <chan_send+0x38>
		return att_rsp_sent;
   13ae2:	4b0b      	ldr	r3, [pc, #44]	; (13b10 <chan_send+0xd4>)
   13ae4:	e7ed      	b.n	13ac2 <chan_send+0x86>
		return att_cfm_sent;
   13ae6:	4b0b      	ldr	r3, [pc, #44]	; (13b14 <chan_send+0xd8>)
   13ae8:	e7eb      	b.n	13ac2 <chan_send+0x86>
   13aea:	bf00      	nop
   13aec:	00025224 	.word	0x00025224
   13af0:	00025234 	.word	0x00025234
   13af4:	0002659f 	.word	0x0002659f
   13af8:	00025674 	.word	0x00025674
   13afc:	000225c9 	.word	0x000225c9
   13b00:	000225e5 	.word	0x000225e5
   13b04:	000225af 	.word	0x000225af
   13b08:	0001375d 	.word	0x0001375d
   13b0c:	00022265 	.word	0x00022265
   13b10:	0001374d 	.word	0x0001374d
   13b14:	0001373d 	.word	0x0001373d

00013b18 <att_get>:
{
   13b18:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   13b1a:	7b43      	ldrb	r3, [r0, #13]
   13b1c:	2b07      	cmp	r3, #7
   13b1e:	d00b      	beq.n	13b38 <att_get+0x20>
   13b20:	4918      	ldr	r1, [pc, #96]	; (13b84 <att_get+0x6c>)
   13b22:	4b19      	ldr	r3, [pc, #100]	; (13b88 <att_get+0x70>)
		BT_WARN("Not connected");
   13b24:	4819      	ldr	r0, [pc, #100]	; (13b8c <att_get+0x74>)
   13b26:	1ac9      	subs	r1, r1, r3
   13b28:	08c9      	lsrs	r1, r1, #3
   13b2a:	0189      	lsls	r1, r1, #6
   13b2c:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
   13b30:	f00d ff0e 	bl	21950 <log_0>
		return NULL;
   13b34:	2400      	movs	r4, #0
   13b36:	e00e      	b.n	13b56 <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   13b38:	2104      	movs	r1, #4
   13b3a:	f00f fdb6 	bl	236aa <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   13b3e:	4604      	mov	r4, r0
   13b40:	b958      	cbnz	r0, 13b5a <att_get+0x42>
   13b42:	4910      	ldr	r1, [pc, #64]	; (13b84 <att_get+0x6c>)
   13b44:	4b10      	ldr	r3, [pc, #64]	; (13b88 <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
   13b46:	4812      	ldr	r0, [pc, #72]	; (13b90 <att_get+0x78>)
   13b48:	1ac9      	subs	r1, r1, r3
   13b4a:	08c9      	lsrs	r1, r1, #3
   13b4c:	0189      	lsls	r1, r1, #6
   13b4e:	f041 0101 	orr.w	r1, r1, #1
   13b52:	f00d fefd 	bl	21950 <log_0>
}
   13b56:	4620      	mov	r0, r4
   13b58:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13b5a:	f3bf 8f5b 	dmb	ish
   13b5e:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   13b62:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   13b66:	075b      	lsls	r3, r3, #29
   13b68:	d508      	bpl.n	13b7c <att_get+0x64>
   13b6a:	4906      	ldr	r1, [pc, #24]	; (13b84 <att_get+0x6c>)
   13b6c:	4b06      	ldr	r3, [pc, #24]	; (13b88 <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
   13b6e:	4809      	ldr	r0, [pc, #36]	; (13b94 <att_get+0x7c>)
   13b70:	1ac9      	subs	r1, r1, r3
   13b72:	08c9      	lsrs	r1, r1, #3
   13b74:	0189      	lsls	r1, r1, #6
   13b76:	f041 0102 	orr.w	r1, r1, #2
   13b7a:	e7d9      	b.n	13b30 <att_get+0x18>
	return att_chan->att;
   13b7c:	f850 4c08 	ldr.w	r4, [r0, #-8]
   13b80:	e7e9      	b.n	13b56 <att_get+0x3e>
   13b82:	bf00      	nop
   13b84:	00025234 	.word	0x00025234
   13b88:	00025224 	.word	0x00025224
   13b8c:	000265b2 	.word	0x000265b2
   13b90:	000265c0 	.word	0x000265c0
   13b94:	000265db 	.word	0x000265db

00013b98 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   13b98:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   13b9a:	4a07      	ldr	r2, [pc, #28]	; (13bb8 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   13b9c:	4604      	mov	r4, r0
   13b9e:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   13ba0:	f7ff ff4c 	bl	13a3c <chan_send>
	if (err) {
   13ba4:	b130      	cbz	r0, 13bb4 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   13ba6:	4629      	mov	r1, r5
   13ba8:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   13bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   13bb0:	f010 b9ca 	b.w	23f48 <net_buf_put>
}
   13bb4:	bd38      	pop	{r3, r4, r5, pc}
   13bb6:	bf00      	nop
   13bb8:	000225c9 	.word	0x000225c9

00013bbc <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   13bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   13bbe:	2300      	movs	r3, #0
{
   13bc0:	4606      	mov	r6, r0
   13bc2:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   13bc4:	4828      	ldr	r0, [pc, #160]	; (13c68 <bt_att_accept+0xac>)
   13bc6:	2200      	movs	r2, #0
   13bc8:	4669      	mov	r1, sp
   13bca:	f008 fc45 	bl	1c458 <k_mem_slab_alloc>
   13bce:	4604      	mov	r4, r0
   13bd0:	b178      	cbz	r0, 13bf2 <bt_att_accept+0x36>
   13bd2:	4a26      	ldr	r2, [pc, #152]	; (13c6c <bt_att_accept+0xb0>)
   13bd4:	4b26      	ldr	r3, [pc, #152]	; (13c70 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT context for conn %p", conn);
   13bd6:	4827      	ldr	r0, [pc, #156]	; (13c74 <bt_att_accept+0xb8>)
   13bd8:	1ad2      	subs	r2, r2, r3
   13bda:	08d2      	lsrs	r2, r2, #3
   13bdc:	0192      	lsls	r2, r2, #6
   13bde:	f042 0201 	orr.w	r2, r2, #1
   13be2:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
   13be4:	f00d fec1 	bl	2196a <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   13be8:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   13bec:	4620      	mov	r0, r4
   13bee:	b003      	add	sp, #12
   13bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   13bf2:	4601      	mov	r1, r0
   13bf4:	222c      	movs	r2, #44	; 0x2c
   13bf6:	9800      	ldr	r0, [sp, #0]
   13bf8:	f00e f9b6 	bl	21f68 <memset>
	att->conn = conn;
   13bfc:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   13bfe:	481e      	ldr	r0, [pc, #120]	; (13c78 <bt_att_accept+0xbc>)
	list->tail = NULL;
   13c00:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   13c02:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   13c06:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   13c0a:	2200      	movs	r2, #0
   13c0c:	2300      	movs	r3, #0
   13c0e:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   13c10:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   13c12:	f008 fc21 	bl	1c458 <k_mem_slab_alloc>
   13c16:	4604      	mov	r4, r0
   13c18:	b148      	cbz	r0, 13c2e <bt_att_accept+0x72>
   13c1a:	4a14      	ldr	r2, [pc, #80]	; (13c6c <bt_att_accept+0xb0>)
   13c1c:	4b14      	ldr	r3, [pc, #80]	; (13c70 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   13c1e:	6829      	ldr	r1, [r5, #0]
   13c20:	4816      	ldr	r0, [pc, #88]	; (13c7c <bt_att_accept+0xc0>)
   13c22:	1ad2      	subs	r2, r2, r3
   13c24:	08d2      	lsrs	r2, r2, #3
   13c26:	0192      	lsls	r2, r2, #6
   13c28:	f042 0201 	orr.w	r2, r2, #1
   13c2c:	e7da      	b.n	13be4 <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
   13c2e:	4601      	mov	r1, r0
   13c30:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13c34:	9801      	ldr	r0, [sp, #4]
   13c36:	f00e f997 	bl	21f68 <memset>
	chan->chan.chan.ops = &ops;
   13c3a:	9801      	ldr	r0, [sp, #4]
   13c3c:	4b10      	ldr	r3, [pc, #64]	; (13c80 <bt_att_accept+0xc4>)
   13c3e:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   13c40:	30f8      	adds	r0, #248	; 0xf8
   13c42:	f010 fe4e 	bl	248e2 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13c46:	9b01      	ldr	r3, [sp, #4]
   13c48:	f3bf 8f5b 	dmb	ish
   13c4c:	33f0      	adds	r3, #240	; 0xf0
   13c4e:	e853 2f00 	ldrex	r2, [r3]
   13c52:	e843 4100 	strex	r1, r4, [r3]
   13c56:	2900      	cmp	r1, #0
   13c58:	d1f9      	bne.n	13c4e <bt_att_accept+0x92>
   13c5a:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   13c5e:	9b01      	ldr	r3, [sp, #4]
   13c60:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   13c64:	603b      	str	r3, [r7, #0]
	return 0;
   13c66:	e7c1      	b.n	13bec <bt_att_accept+0x30>
   13c68:	2000071c 	.word	0x2000071c
   13c6c:	00025234 	.word	0x00025234
   13c70:	00025224 	.word	0x00025224
   13c74:	000265ff 	.word	0x000265ff
   13c78:	20000738 	.word	0x20000738
   13c7c:	00026624 	.word	0x00026624
   13c80:	200004e4 	.word	0x200004e4

00013c84 <bt_att_connected>:
{
   13c84:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   13c86:	4606      	mov	r6, r0
{
   13c88:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   13c8a:	2104      	movs	r1, #4
   13c8c:	f856 0908 	ldr.w	r0, [r6], #-8
   13c90:	f00f fcfb 	bl	2368a <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   13c94:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   13c98:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   13c9a:	b91b      	cbnz	r3, 13ca4 <bt_att_connected+0x20>
   13c9c:	f105 000c 	add.w	r0, r5, #12
   13ca0:	f010 fe1f 	bl	248e2 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   13ca4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
   13ca6:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   13caa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   13cac:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   13cb0:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   13cb2:	b902      	cbnz	r2, 13cb6 <bt_att_connected+0x32>
	list->tail = node;
   13cb4:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   13cb6:	f3bf 8f5b 	dmb	ish
   13cba:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   13cbe:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   13cc2:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   13cc4:	bf58      	it	pl
   13cc6:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   13cc8:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   13cca:	bf5c      	itt	pl
   13ccc:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   13cd0:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   13cd4:	f00e fbed 	bl	224b2 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   13cd8:	f504 7084 	add.w	r0, r4, #264	; 0x108
   13cdc:	4902      	ldr	r1, [pc, #8]	; (13ce8 <bt_att_connected+0x64>)
}
   13cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   13ce2:	f011 b8b7 	b.w	24e54 <k_work_init_delayable>
   13ce6:	bf00      	nop
   13ce8:	00014631 	.word	0x00014631

00013cec <att_write_cmd>:
{
   13cec:	b5f0      	push	{r4, r5, r6, r7, lr}
   13cee:	4604      	mov	r4, r0
   13cf0:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   13cf2:	f101 0008 	add.w	r0, r1, #8
   13cf6:	460d      	mov	r5, r1
   13cf8:	f010 f988 	bl	2400c <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   13cfc:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   13cfe:	68af      	ldr	r7, [r5, #8]
   13d00:	89ad      	ldrh	r5, [r5, #12]
   13d02:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   13d04:	2100      	movs	r1, #0
   13d06:	6818      	ldr	r0, [r3, #0]
   13d08:	f00f f9fd 	bl	23106 <bt_gatt_change_aware>
   13d0c:	b320      	cbz	r0, 13d58 <att_write_cmd+0x6c>
	if (!handle) {
   13d0e:	b32e      	cbz	r6, 13d5c <att_write_cmd+0x70>
	(void)memset(&data, 0, sizeof(data));
   13d10:	2218      	movs	r2, #24
   13d12:	2100      	movs	r1, #0
   13d14:	4668      	mov	r0, sp
   13d16:	f00e f927 	bl	21f68 <memset>
	data.conn = chan->att->conn;
   13d1a:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   13d1c:	4a10      	ldr	r2, [pc, #64]	; (13d60 <att_write_cmd+0x74>)
	data.conn = chan->att->conn;
   13d1e:	681b      	ldr	r3, [r3, #0]
   13d20:	9300      	str	r3, [sp, #0]
	data.req = req;
   13d22:	2300      	movs	r3, #0
   13d24:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   13d28:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   13d2c:	2301      	movs	r3, #1
   13d2e:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   13d32:	4631      	mov	r1, r6
   13d34:	466b      	mov	r3, sp
   13d36:	4630      	mov	r0, r6
	data.value = value;
   13d38:	9703      	str	r7, [sp, #12]
	data.len = len;
   13d3a:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   13d3e:	f00e fad6 	bl	222ee <bt_gatt_foreach_attr>
	if (data.err) {
   13d42:	f89d 3014 	ldrb.w	r3, [sp, #20]
   13d46:	b923      	cbnz	r3, 13d52 <att_write_cmd+0x66>
	if (data.buf) {
   13d48:	9901      	ldr	r1, [sp, #4]
   13d4a:	b111      	cbz	r1, 13d52 <att_write_cmd+0x66>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   13d4c:	4620      	mov	r0, r4
   13d4e:	f7ff ff23 	bl	13b98 <bt_att_chan_send_rsp.constprop.0>
   13d52:	2000      	movs	r0, #0
}
   13d54:	b007      	add	sp, #28
   13d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   13d58:	2012      	movs	r0, #18
   13d5a:	e7fb      	b.n	13d54 <att_write_cmd+0x68>
		return BT_ATT_ERR_INVALID_HANDLE;
   13d5c:	2001      	movs	r0, #1
   13d5e:	e7f9      	b.n	13d54 <att_write_cmd+0x68>
   13d60:	000226a1 	.word	0x000226a1

00013d64 <bt_att_chan_create_pdu>:
{
   13d64:	b538      	push	{r3, r4, r5, lr}
   13d66:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   13d68:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   13d6c:	3201      	adds	r2, #1
   13d6e:	428a      	cmp	r2, r1
   13d70:	d90c      	bls.n	13d8c <bt_att_chan_create_pdu+0x28>
   13d72:	481a      	ldr	r0, [pc, #104]	; (13ddc <bt_att_chan_create_pdu+0x78>)
   13d74:	4b1a      	ldr	r3, [pc, #104]	; (13de0 <bt_att_chan_create_pdu+0x7c>)
   13d76:	1a1b      	subs	r3, r3, r0
   13d78:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   13d7a:	019b      	lsls	r3, r3, #6
   13d7c:	4819      	ldr	r0, [pc, #100]	; (13de4 <bt_att_chan_create_pdu+0x80>)
   13d7e:	f043 0302 	orr.w	r3, r3, #2
   13d82:	f00d fe06 	bl	21992 <log_2>
		return NULL;
   13d86:	2400      	movs	r4, #0
}
   13d88:	4620      	mov	r0, r4
   13d8a:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   13d8c:	4628      	mov	r0, r5
   13d8e:	f00e fa81 	bl	22294 <att_op_get_type>
   13d92:	2802      	cmp	r0, #2
   13d94:	d001      	beq.n	13d9a <bt_att_chan_create_pdu+0x36>
   13d96:	2804      	cmp	r0, #4
   13d98:	d114      	bne.n	13dc4 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   13d9a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   13d9e:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   13da0:	2100      	movs	r1, #0
   13da2:	4608      	mov	r0, r1
   13da4:	f00f fc55 	bl	23652 <bt_l2cap_create_pdu_timeout>
   13da8:	4604      	mov	r4, r0
	if (!buf) {
   13daa:	b980      	cbnz	r0, 13dce <bt_att_chan_create_pdu+0x6a>
   13dac:	4b0b      	ldr	r3, [pc, #44]	; (13ddc <bt_att_chan_create_pdu+0x78>)
   13dae:	4a0c      	ldr	r2, [pc, #48]	; (13de0 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   13db0:	480d      	ldr	r0, [pc, #52]	; (13de8 <bt_att_chan_create_pdu+0x84>)
   13db2:	1ad2      	subs	r2, r2, r3
   13db4:	08d2      	lsrs	r2, r2, #3
   13db6:	0192      	lsls	r2, r2, #6
   13db8:	f042 0201 	orr.w	r2, r2, #1
   13dbc:	4629      	mov	r1, r5
   13dbe:	f00d fdd4 	bl	2196a <log_1>
		return NULL;
   13dc2:	e7e1      	b.n	13d88 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
   13dc4:	f04f 32ff 	mov.w	r2, #4294967295
   13dc8:	f04f 33ff 	mov.w	r3, #4294967295
   13dcc:	e7e8      	b.n	13da0 <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
   13dce:	2101      	movs	r1, #1
   13dd0:	3008      	adds	r0, #8
   13dd2:	f010 f8ec 	bl	23fae <net_buf_simple_add>
	hdr->code = op;
   13dd6:	7005      	strb	r5, [r0, #0]
	return buf;
   13dd8:	e7d6      	b.n	13d88 <bt_att_chan_create_pdu+0x24>
   13dda:	bf00      	nop
   13ddc:	00025224 	.word	0x00025224
   13de0:	00025234 	.word	0x00025234
   13de4:	00026649 	.word	0x00026649
   13de8:	0002666e 	.word	0x0002666e

00013dec <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   13dec:	898b      	ldrh	r3, [r1, #12]
{
   13dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13df2:	4604      	mov	r4, r0
   13df4:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   13df6:	b963      	cbnz	r3, 13e12 <bt_att_recv+0x26>
   13df8:	494c      	ldr	r1, [pc, #304]	; (13f2c <bt_att_recv+0x140>)
   13dfa:	4b4d      	ldr	r3, [pc, #308]	; (13f30 <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
   13dfc:	484d      	ldr	r0, [pc, #308]	; (13f34 <bt_att_recv+0x148>)
   13dfe:	1ac9      	subs	r1, r1, r3
   13e00:	08c9      	lsrs	r1, r1, #3
   13e02:	0189      	lsls	r1, r1, #6
   13e04:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
   13e08:	f00d fda2 	bl	21950 <log_0>
}
   13e0c:	2000      	movs	r0, #0
   13e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   13e12:	2101      	movs	r1, #1
   13e14:	f108 0008 	add.w	r0, r8, #8
   13e18:	f010 f8f0 	bl	23ffc <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   13e1c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   13e20:	4605      	mov	r5, r0
   13e22:	2b00      	cmp	r3, #0
   13e24:	d0f2      	beq.n	13e0c <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
   13e26:	4a44      	ldr	r2, [pc, #272]	; (13f38 <bt_att_recv+0x14c>)
   13e28:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   13e2a:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   13e2e:	2300      	movs	r3, #0
   13e30:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   13e32:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   13e36:	4288      	cmp	r0, r1
   13e38:	d11d      	bne.n	13e76 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   13e3a:	00d8      	lsls	r0, r3, #3
   13e3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   13e40:	789f      	ldrb	r7, [r3, #2]
   13e42:	2f01      	cmp	r7, #1
   13e44:	d132      	bne.n	13eac <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13e46:	f3bf 8f5b 	dmb	ish
   13e4a:	34e8      	adds	r4, #232	; 0xe8
   13e4c:	e854 3f00 	ldrex	r3, [r4]
   13e50:	f043 0201 	orr.w	r2, r3, #1
   13e54:	e844 2100 	strex	r1, r2, [r4]
   13e58:	2900      	cmp	r1, #0
   13e5a:	d1f7      	bne.n	13e4c <bt_att_recv+0x60>
   13e5c:	f3bf 8f5b 	dmb	ish
   13e60:	07da      	lsls	r2, r3, #31
   13e62:	d53d      	bpl.n	13ee0 <bt_att_recv+0xf4>
   13e64:	4931      	ldr	r1, [pc, #196]	; (13f2c <bt_att_recv+0x140>)
   13e66:	4b32      	ldr	r3, [pc, #200]	; (13f30 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
   13e68:	4834      	ldr	r0, [pc, #208]	; (13f3c <bt_att_recv+0x150>)
   13e6a:	1ac9      	subs	r1, r1, r3
   13e6c:	08c9      	lsrs	r1, r1, #3
   13e6e:	0189      	lsls	r1, r1, #6
   13e70:	f041 0102 	orr.w	r1, r1, #2
   13e74:	e7c8      	b.n	13e08 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   13e76:	3301      	adds	r3, #1
   13e78:	2b0d      	cmp	r3, #13
   13e7a:	d1da      	bne.n	13e32 <bt_att_recv+0x46>
   13e7c:	4b2c      	ldr	r3, [pc, #176]	; (13f30 <bt_att_recv+0x144>)
   13e7e:	4a2b      	ldr	r2, [pc, #172]	; (13f2c <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   13e80:	482f      	ldr	r0, [pc, #188]	; (13f40 <bt_att_recv+0x154>)
   13e82:	1ad2      	subs	r2, r2, r3
   13e84:	08d2      	lsrs	r2, r2, #3
   13e86:	0192      	lsls	r2, r2, #6
   13e88:	f042 0202 	orr.w	r2, r2, #2
   13e8c:	f00d fd6d 	bl	2196a <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   13e90:	7829      	ldrb	r1, [r5, #0]
   13e92:	4608      	mov	r0, r1
   13e94:	f00e f9fe 	bl	22294 <att_op_get_type>
   13e98:	2800      	cmp	r0, #0
   13e9a:	d0b7      	beq.n	13e0c <bt_att_recv+0x20>
	if (!req) {
   13e9c:	2900      	cmp	r1, #0
   13e9e:	d0b5      	beq.n	13e0c <bt_att_recv+0x20>
   13ea0:	2306      	movs	r3, #6
   13ea2:	2200      	movs	r2, #0
   13ea4:	4630      	mov	r0, r6
   13ea6:	f00e fc90 	bl	227ca <send_err_rsp.part.0>
   13eaa:	e7af      	b.n	13e0c <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   13eac:	2f05      	cmp	r7, #5
   13eae:	d117      	bne.n	13ee0 <bt_att_recv+0xf4>
   13eb0:	f3bf 8f5b 	dmb	ish
   13eb4:	34e8      	adds	r4, #232	; 0xe8
   13eb6:	e854 3f00 	ldrex	r3, [r4]
   13eba:	f043 0202 	orr.w	r2, r3, #2
   13ebe:	e844 2100 	strex	r1, r2, [r4]
   13ec2:	2900      	cmp	r1, #0
   13ec4:	d1f7      	bne.n	13eb6 <bt_att_recv+0xca>
   13ec6:	f3bf 8f5b 	dmb	ish
   13eca:	079b      	lsls	r3, r3, #30
   13ecc:	d508      	bpl.n	13ee0 <bt_att_recv+0xf4>
   13ece:	4917      	ldr	r1, [pc, #92]	; (13f2c <bt_att_recv+0x140>)
   13ed0:	4b17      	ldr	r3, [pc, #92]	; (13f30 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
   13ed2:	481c      	ldr	r0, [pc, #112]	; (13f44 <bt_att_recv+0x158>)
   13ed4:	1ac9      	subs	r1, r1, r3
   13ed6:	08c9      	lsrs	r1, r1, #3
   13ed8:	0189      	lsls	r1, r1, #6
   13eda:	f041 0102 	orr.w	r1, r1, #2
   13ede:	e793      	b.n	13e08 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
   13ee0:	eb0c 0300 	add.w	r3, ip, r0
   13ee4:	f8b8 100c 	ldrh.w	r1, [r8, #12]
   13ee8:	785a      	ldrb	r2, [r3, #1]
   13eea:	428a      	cmp	r2, r1
   13eec:	d90e      	bls.n	13f0c <bt_att_recv+0x120>
   13eee:	4a10      	ldr	r2, [pc, #64]	; (13f30 <bt_att_recv+0x144>)
   13ef0:	4b0e      	ldr	r3, [pc, #56]	; (13f2c <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   13ef2:	4815      	ldr	r0, [pc, #84]	; (13f48 <bt_att_recv+0x15c>)
   13ef4:	1a9b      	subs	r3, r3, r2
   13ef6:	08db      	lsrs	r3, r3, #3
   13ef8:	019b      	lsls	r3, r3, #6
   13efa:	782a      	ldrb	r2, [r5, #0]
   13efc:	f043 0301 	orr.w	r3, r3, #1
   13f00:	f00d fd47 	bl	21992 <log_2>
	if (handler->type == ATT_REQUEST && err) {
   13f04:	2f01      	cmp	r7, #1
   13f06:	d181      	bne.n	13e0c <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   13f08:	2304      	movs	r3, #4
   13f0a:	e00a      	b.n	13f22 <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
   13f0c:	685b      	ldr	r3, [r3, #4]
   13f0e:	4641      	mov	r1, r8
   13f10:	4630      	mov	r0, r6
   13f12:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   13f14:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   13f16:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   13f18:	f47f af78 	bne.w	13e0c <bt_att_recv+0x20>
   13f1c:	2800      	cmp	r0, #0
   13f1e:	f43f af75 	beq.w	13e0c <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   13f22:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   13f24:	2900      	cmp	r1, #0
   13f26:	f43f af71 	beq.w	13e0c <bt_att_recv+0x20>
   13f2a:	e7ba      	b.n	13ea2 <bt_att_recv+0xb6>
   13f2c:	00025234 	.word	0x00025234
   13f30:	00025224 	.word	0x00025224
   13f34:	00026696 	.word	0x00026696
   13f38:	00025688 	.word	0x00025688
   13f3c:	000266b1 	.word	0x000266b1
   13f40:	0002670b 	.word	0x0002670b
   13f44:	000266cd 	.word	0x000266cd
   13f48:	000266ec 	.word	0x000266ec

00013f4c <att_write_req>:
{
   13f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13f50:	4604      	mov	r4, r0
   13f52:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   13f54:	f101 0008 	add.w	r0, r1, #8
   13f58:	460d      	mov	r5, r1
   13f5a:	f010 f857 	bl	2400c <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   13f5e:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   13f60:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   13f64:	89ad      	ldrh	r5, [r5, #12]
   13f66:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   13f68:	2101      	movs	r1, #1
   13f6a:	6818      	ldr	r0, [r3, #0]
   13f6c:	f00f f8cb 	bl	23106 <bt_gatt_change_aware>
   13f70:	2800      	cmp	r0, #0
   13f72:	d03f      	beq.n	13ff4 <att_write_req+0xa8>
	if (!handle) {
   13f74:	2e00      	cmp	r6, #0
   13f76:	d03f      	beq.n	13ff8 <att_write_req+0xac>
	(void)memset(&data, 0, sizeof(data));
   13f78:	2218      	movs	r2, #24
   13f7a:	2100      	movs	r1, #0
   13f7c:	4668      	mov	r0, sp
   13f7e:	f00d fff3 	bl	21f68 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   13f82:	2200      	movs	r2, #0
   13f84:	2113      	movs	r1, #19
   13f86:	4620      	mov	r0, r4
   13f88:	f7ff feec 	bl	13d64 <bt_att_chan_create_pdu>
   13f8c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   13f8e:	b378      	cbz	r0, 13ff0 <att_write_req+0xa4>
	data.conn = chan->att->conn;
   13f90:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   13f92:	4a1a      	ldr	r2, [pc, #104]	; (13ffc <att_write_req+0xb0>)
	data.conn = chan->att->conn;
   13f94:	681b      	ldr	r3, [r3, #0]
   13f96:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   13f98:	2301      	movs	r3, #1
   13f9a:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   13f9e:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   13fa2:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   13fa4:	466b      	mov	r3, sp
   13fa6:	4631      	mov	r1, r6
   13fa8:	4630      	mov	r0, r6
	data.len = len;
   13faa:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   13fae:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   13fb2:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   13fb6:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   13fba:	f00e f998 	bl	222ee <bt_gatt_foreach_attr>
	if (data.err) {
   13fbe:	f89d 5014 	ldrb.w	r5, [sp, #20]
   13fc2:	b175      	cbz	r5, 13fe2 <att_write_req+0x96>
			net_buf_unref(data.buf);
   13fc4:	9801      	ldr	r0, [sp, #4]
   13fc6:	f006 f99d 	bl	1a304 <net_buf_unref>
	if (!req) {
   13fca:	f89d 3014 	ldrb.w	r3, [sp, #20]
   13fce:	4632      	mov	r2, r6
   13fd0:	4641      	mov	r1, r8
   13fd2:	4620      	mov	r0, r4
   13fd4:	f00e fbf9 	bl	227ca <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   13fd8:	463d      	mov	r5, r7
}
   13fda:	4628      	mov	r0, r5
   13fdc:	b007      	add	sp, #28
   13fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   13fe2:	9901      	ldr	r1, [sp, #4]
   13fe4:	2900      	cmp	r1, #0
   13fe6:	d0f8      	beq.n	13fda <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   13fe8:	4620      	mov	r0, r4
   13fea:	f7ff fdd5 	bl	13b98 <bt_att_chan_send_rsp.constprop.0>
   13fee:	e7f4      	b.n	13fda <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   13ff0:	250e      	movs	r5, #14
   13ff2:	e7f2      	b.n	13fda <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   13ff4:	2512      	movs	r5, #18
   13ff6:	e7f0      	b.n	13fda <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   13ff8:	2501      	movs	r5, #1
   13ffa:	e7ee      	b.n	13fda <att_write_req+0x8e>
   13ffc:	000226a1 	.word	0x000226a1

00014000 <bt_att_create_pdu>:
{
   14000:	b570      	push	{r4, r5, r6, lr}
   14002:	460e      	mov	r6, r1
   14004:	4615      	mov	r5, r2
	att = att_get(conn);
   14006:	f7ff fd87 	bl	13b18 <att_get>
	if (!att) {
   1400a:	b1c0      	cbz	r0, 1403e <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1400c:	6a43      	ldr	r3, [r0, #36]	; 0x24
	return list->head;
   1400e:	1c69      	adds	r1, r5, #1
   14010:	b15b      	cbz	r3, 1402a <bt_att_create_pdu+0x2a>
   14012:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   14016:	d008      	beq.n	1402a <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14018:	681b      	ldr	r3, [r3, #0]
   1401a:	b10b      	cbz	r3, 14020 <bt_att_create_pdu+0x20>
   1401c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   14020:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
   14024:	4291      	cmp	r1, r2
   14026:	d90c      	bls.n	14042 <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   14028:	b98b      	cbnz	r3, 1404e <bt_att_create_pdu+0x4e>
   1402a:	4a0e      	ldr	r2, [pc, #56]	; (14064 <bt_att_create_pdu+0x64>)
   1402c:	4b0e      	ldr	r3, [pc, #56]	; (14068 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1402e:	480f      	ldr	r0, [pc, #60]	; (1406c <bt_att_create_pdu+0x6c>)
   14030:	1ad2      	subs	r2, r2, r3
   14032:	08d2      	lsrs	r2, r2, #3
   14034:	0192      	lsls	r2, r2, #6
   14036:	f042 0202 	orr.w	r2, r2, #2
   1403a:	f00d fc96 	bl	2196a <log_1>
}
   1403e:	2000      	movs	r0, #0
   14040:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   14042:	462a      	mov	r2, r5
   14044:	4631      	mov	r1, r6
}
   14046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1404a:	f7ff be8b 	b.w	13d64 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1404e:	f513 74a2 	adds.w	r4, r3, #324	; 0x144
   14052:	d004      	beq.n	1405e <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14054:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   14058:	b10c      	cbz	r4, 1405e <bt_att_create_pdu+0x5e>
   1405a:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   1405e:	4618      	mov	r0, r3
   14060:	4623      	mov	r3, r4
   14062:	e7dd      	b.n	14020 <bt_att_create_pdu+0x20>
   14064:	00025234 	.word	0x00025234
   14068:	00025224 	.word	0x00025224
   1406c:	00026725 	.word	0x00026725

00014070 <att_read_group_req>:
{
   14070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   14074:	7b0c      	ldrb	r4, [r1, #12]
   14076:	3c04      	subs	r4, #4
   14078:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1407a:	2c02      	cmp	r4, #2
{
   1407c:	4605      	mov	r5, r0
   1407e:	b08c      	sub	sp, #48	; 0x30
   14080:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   14082:	d001      	beq.n	14088 <att_read_group_req+0x18>
   14084:	2c10      	cmp	r4, #16
   14086:	d16e      	bne.n	14166 <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
   14088:	2104      	movs	r1, #4
   1408a:	3008      	adds	r0, #8
   1408c:	f00f ffb6 	bl	23ffc <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   14090:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   14094:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   14096:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   14098:	1d01      	adds	r1, r0, #4
   1409a:	4622      	mov	r2, r4
   1409c:	4640      	mov	r0, r8
   1409e:	f00f ff07 	bl	23eb0 <bt_uuid_create>
   140a2:	2800      	cmp	r0, #0
   140a4:	d061      	beq.n	1416a <att_read_group_req+0xfa>
	if (!start || !end) {
   140a6:	2e00      	cmp	r6, #0
   140a8:	d03a      	beq.n	14120 <att_read_group_req+0xb0>
   140aa:	2400      	movs	r4, #0
   140ac:	2f00      	cmp	r7, #0
   140ae:	d036      	beq.n	1411e <att_read_group_req+0xae>
	if (start > end) {
   140b0:	42b7      	cmp	r7, r6
   140b2:	d335      	bcc.n	14120 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   140b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   140b8:	a901      	add	r1, sp, #4
   140ba:	4640      	mov	r0, r8
   140bc:	f88d 4004 	strb.w	r4, [sp, #4]
   140c0:	f8ad 3006 	strh.w	r3, [sp, #6]
   140c4:	f00f feca 	bl	23e5c <bt_uuid_cmp>
   140c8:	2800      	cmp	r0, #0
   140ca:	d134      	bne.n	14136 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   140cc:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   140ce:	2214      	movs	r2, #20
   140d0:	2100      	movs	r1, #0
   140d2:	a807      	add	r0, sp, #28
   140d4:	f00d ff48 	bl	21f68 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   140d8:	2201      	movs	r2, #1
   140da:	2111      	movs	r1, #17
   140dc:	4620      	mov	r0, r4
   140de:	f7ff ff8f 	bl	14000 <bt_att_create_pdu>
   140e2:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   140e4:	2800      	cmp	r0, #0
   140e6:	d040      	beq.n	1416a <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   140e8:	2101      	movs	r1, #1
   140ea:	3008      	adds	r0, #8
	data.uuid = uuid;
   140ec:	e9cd 5807 	strd	r5, r8, [sp, #28]
   140f0:	f00f ff5d 	bl	23fae <net_buf_simple_add>
	data.rsp->len = 0U;
   140f4:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   140f8:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   140fa:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   140fc:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   14100:	4a1b      	ldr	r2, [pc, #108]	; (14170 <att_read_group_req+0x100>)
	data.group = NULL;
   14102:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   14106:	4639      	mov	r1, r7
   14108:	4630      	mov	r0, r6
   1410a:	f00e f8f0 	bl	222ee <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1410e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14110:	781c      	ldrb	r4, [r3, #0]
   14112:	bb1c      	cbnz	r4, 1415c <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   14114:	9809      	ldr	r0, [sp, #36]	; 0x24
   14116:	f006 f8f5 	bl	1a304 <net_buf_unref>
	if (!req) {
   1411a:	230a      	movs	r3, #10
   1411c:	e018      	b.n	14150 <att_read_group_req+0xe0>
			*err = 0U;
   1411e:	463e      	mov	r6, r7
	if (!req) {
   14120:	2301      	movs	r3, #1
   14122:	4632      	mov	r2, r6
   14124:	2110      	movs	r1, #16
   14126:	4628      	mov	r0, r5
   14128:	f00e fb4f 	bl	227ca <send_err_rsp.part.0>
		return 0;
   1412c:	2400      	movs	r4, #0
}
   1412e:	4620      	mov	r0, r4
   14130:	b00c      	add	sp, #48	; 0x30
   14132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   14136:	f642 0301 	movw	r3, #10241	; 0x2801
   1413a:	a907      	add	r1, sp, #28
   1413c:	4640      	mov	r0, r8
   1413e:	f88d 401c 	strb.w	r4, [sp, #28]
   14142:	f8ad 301e 	strh.w	r3, [sp, #30]
   14146:	f00f fe89 	bl	23e5c <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1414a:	2800      	cmp	r0, #0
   1414c:	d0be      	beq.n	140cc <att_read_group_req+0x5c>
	if (!req) {
   1414e:	2310      	movs	r3, #16
   14150:	4632      	mov	r2, r6
   14152:	2110      	movs	r1, #16
   14154:	4628      	mov	r0, r5
   14156:	f00e fb38 	bl	227ca <send_err_rsp.part.0>
		return 0;
   1415a:	e7e8      	b.n	1412e <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1415c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1415e:	4628      	mov	r0, r5
   14160:	f7ff fd1a 	bl	13b98 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   14164:	e7e2      	b.n	1412c <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   14166:	2404      	movs	r4, #4
   14168:	e7e1      	b.n	1412e <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   1416a:	240e      	movs	r4, #14
   1416c:	e7df      	b.n	1412e <att_read_group_req+0xbe>
   1416e:	bf00      	nop
   14170:	00013785 	.word	0x00013785

00014174 <att_read_mult_req>:
{
   14174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   14178:	6886      	ldr	r6, [r0, #8]
{
   1417a:	b085      	sub	sp, #20
   1417c:	4604      	mov	r4, r0
   1417e:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   14180:	4630      	mov	r0, r6
   14182:	2101      	movs	r1, #1
   14184:	f00e ffbf 	bl	23106 <bt_gatt_change_aware>
   14188:	b3b8      	cbz	r0, 141fa <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
   1418a:	2210      	movs	r2, #16
   1418c:	2100      	movs	r1, #0
   1418e:	4668      	mov	r0, sp
   14190:	f00d feea 	bl	21f68 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   14194:	2200      	movs	r2, #0
   14196:	210f      	movs	r1, #15
   14198:	4630      	mov	r0, r6
   1419a:	f7ff ff31 	bl	14000 <bt_att_create_pdu>
   1419e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   141a0:	b368      	cbz	r0, 141fe <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   141a2:	f8df 9060 	ldr.w	r9, [pc, #96]	; 14204 <att_read_mult_req+0x90>
	data.chan = chan;
   141a6:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   141a8:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   141ac:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   141b0:	89ab      	ldrh	r3, [r5, #12]
   141b2:	2b01      	cmp	r3, #1
   141b4:	d804      	bhi.n	141c0 <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   141b6:	9902      	ldr	r1, [sp, #8]
   141b8:	4620      	mov	r0, r4
   141ba:	f7ff fced 	bl	13b98 <bt_att_chan_send_rsp.constprop.0>
   141be:	e018      	b.n	141f2 <att_read_mult_req+0x7e>
   141c0:	4638      	mov	r0, r7
   141c2:	f00f ff23 	bl	2400c <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   141c6:	466b      	mov	r3, sp
   141c8:	464a      	mov	r2, r9
   141ca:	4601      	mov	r1, r0
   141cc:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   141ce:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   141d2:	f00e f88c 	bl	222ee <bt_gatt_foreach_attr>
		if (data.err) {
   141d6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   141da:	2b00      	cmp	r3, #0
   141dc:	d0e8      	beq.n	141b0 <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
   141de:	9802      	ldr	r0, [sp, #8]
   141e0:	f006 f890 	bl	1a304 <net_buf_unref>
	if (!req) {
   141e4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   141e8:	4632      	mov	r2, r6
   141ea:	210e      	movs	r1, #14
   141ec:	4620      	mov	r0, r4
   141ee:	f00e faec 	bl	227ca <send_err_rsp.part.0>
	return 0;
   141f2:	2000      	movs	r0, #0
}
   141f4:	b005      	add	sp, #20
   141f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   141fa:	2012      	movs	r0, #18
   141fc:	e7fa      	b.n	141f4 <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
   141fe:	200e      	movs	r0, #14
   14200:	e7f8      	b.n	141f4 <att_read_mult_req+0x80>
   14202:	bf00      	nop
   14204:	00022777 	.word	0x00022777

00014208 <att_read_rsp>:
{
   14208:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1420c:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   14210:	4605      	mov	r5, r0
   14212:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   14214:	4640      	mov	r0, r8
   14216:	2101      	movs	r1, #1
{
   14218:	4614      	mov	r4, r2
   1421a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1421c:	f00e ff73 	bl	23106 <bt_gatt_change_aware>
   14220:	b388      	cbz	r0, 14286 <att_read_rsp+0x7e>
	if (!handle) {
   14222:	b396      	cbz	r6, 1428a <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   14224:	2210      	movs	r2, #16
   14226:	2100      	movs	r1, #0
   14228:	4668      	mov	r0, sp
   1422a:	f00d fe9d 	bl	21f68 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1422e:	2200      	movs	r2, #0
   14230:	4621      	mov	r1, r4
   14232:	4640      	mov	r0, r8
   14234:	f7ff fee4 	bl	14000 <bt_att_create_pdu>
   14238:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1423a:	b340      	cbz	r0, 1428e <att_read_rsp+0x86>
	data.offset = offset;
   1423c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   14240:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   14244:	2301      	movs	r3, #1
   14246:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1424a:	4a12      	ldr	r2, [pc, #72]	; (14294 <att_read_rsp+0x8c>)
	data.chan = chan;
   1424c:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1424e:	466b      	mov	r3, sp
   14250:	4631      	mov	r1, r6
   14252:	4630      	mov	r0, r6
   14254:	f00e f84b 	bl	222ee <bt_gatt_foreach_attr>
	if (data.err) {
   14258:	f89d 400c 	ldrb.w	r4, [sp, #12]
   1425c:	b174      	cbz	r4, 1427c <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   1425e:	9802      	ldr	r0, [sp, #8]
   14260:	f006 f850 	bl	1a304 <net_buf_unref>
	if (!req) {
   14264:	f89d 300c 	ldrb.w	r3, [sp, #12]
   14268:	4632      	mov	r2, r6
   1426a:	4639      	mov	r1, r7
   1426c:	4628      	mov	r0, r5
   1426e:	f00e faac 	bl	227ca <send_err_rsp.part.0>
		return 0;
   14272:	2400      	movs	r4, #0
}
   14274:	4620      	mov	r0, r4
   14276:	b004      	add	sp, #16
   14278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1427c:	9902      	ldr	r1, [sp, #8]
   1427e:	4628      	mov	r0, r5
   14280:	f7ff fc8a 	bl	13b98 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   14284:	e7f6      	b.n	14274 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   14286:	2412      	movs	r4, #18
   14288:	e7f4      	b.n	14274 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1428a:	2401      	movs	r4, #1
   1428c:	e7f2      	b.n	14274 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1428e:	240e      	movs	r4, #14
   14290:	e7f0      	b.n	14274 <att_read_rsp+0x6c>
   14292:	bf00      	nop
   14294:	00022777 	.word	0x00022777

00014298 <att_read_type_req>:
{
   14298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1429c:	7b0c      	ldrb	r4, [r1, #12]
   1429e:	3c04      	subs	r4, #4
   142a0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   142a2:	2c02      	cmp	r4, #2
{
   142a4:	4605      	mov	r5, r0
   142a6:	b08c      	sub	sp, #48	; 0x30
   142a8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   142aa:	d001      	beq.n	142b0 <att_read_type_req+0x18>
   142ac:	2c10      	cmp	r4, #16
   142ae:	d14f      	bne.n	14350 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   142b0:	2104      	movs	r1, #4
   142b2:	3008      	adds	r0, #8
   142b4:	f00f fea2 	bl	23ffc <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   142b8:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   142bc:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   142be:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   142c0:	1d01      	adds	r1, r0, #4
   142c2:	4622      	mov	r2, r4
   142c4:	4640      	mov	r0, r8
   142c6:	f00f fdf3 	bl	23eb0 <bt_uuid_create>
   142ca:	b188      	cbz	r0, 142f0 <att_read_type_req+0x58>
	if (!start || !end) {
   142cc:	b19e      	cbz	r6, 142f6 <att_read_type_req+0x5e>
   142ce:	b18f      	cbz	r7, 142f4 <att_read_type_req+0x5c>
	if (start > end) {
   142d0:	42be      	cmp	r6, r7
   142d2:	d810      	bhi.n	142f6 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   142d4:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   142d6:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   142d8:	2100      	movs	r1, #0
   142da:	eb0d 0002 	add.w	r0, sp, r2
   142de:	f00d fe43 	bl	21f68 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   142e2:	2201      	movs	r2, #1
   142e4:	2109      	movs	r1, #9
   142e6:	4620      	mov	r0, r4
   142e8:	f7ff fe8a 	bl	14000 <bt_att_create_pdu>
   142ec:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   142ee:	b968      	cbnz	r0, 1430c <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   142f0:	240e      	movs	r4, #14
   142f2:	e007      	b.n	14304 <att_read_type_req+0x6c>
			*err = 0U;
   142f4:	463e      	mov	r6, r7
	if (!req) {
   142f6:	2301      	movs	r3, #1
   142f8:	4632      	mov	r2, r6
   142fa:	2108      	movs	r1, #8
   142fc:	4628      	mov	r0, r5
   142fe:	f00e fa64 	bl	227ca <send_err_rsp.part.0>
		return 0;
   14302:	2400      	movs	r4, #0
}
   14304:	4620      	mov	r0, r4
   14306:	b00c      	add	sp, #48	; 0x30
   14308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1430c:	2101      	movs	r1, #1
   1430e:	3008      	adds	r0, #8
	data.uuid = uuid;
   14310:	e9cd 5806 	strd	r5, r8, [sp, #24]
   14314:	f00f fe4b 	bl	23fae <net_buf_simple_add>
	data.rsp->len = 0U;
   14318:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1431c:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1431e:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   14320:	4a0c      	ldr	r2, [pc, #48]	; (14354 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   14322:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   14326:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   14328:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1432c:	4630      	mov	r0, r6
   1432e:	ab06      	add	r3, sp, #24
   14330:	f00d ffdd 	bl	222ee <bt_gatt_foreach_attr>
	if (data.err) {
   14334:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   14338:	b12c      	cbz	r4, 14346 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   1433a:	9808      	ldr	r0, [sp, #32]
   1433c:	f005 ffe2 	bl	1a304 <net_buf_unref>
	if (!req) {
   14340:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   14344:	e7d8      	b.n	142f8 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   14346:	9908      	ldr	r1, [sp, #32]
   14348:	4628      	mov	r0, r5
   1434a:	f7ff fc25 	bl	13b98 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1434e:	e7d9      	b.n	14304 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   14350:	2404      	movs	r4, #4
   14352:	e7d7      	b.n	14304 <att_read_type_req+0x6c>
   14354:	00013831 	.word	0x00013831

00014358 <att_find_type_req>:
{
   14358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1435c:	4688      	mov	r8, r1
   1435e:	b086      	sub	sp, #24
   14360:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   14362:	2106      	movs	r1, #6
   14364:	f108 0008 	add.w	r0, r8, #8
   14368:	f00f fe48 	bl	23ffc <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1436c:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   1436e:	b317      	cbz	r7, 143b6 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   14370:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   14374:	f1b9 0f00 	cmp.w	r9, #0
   14378:	d01c      	beq.n	143b4 <att_find_type_req+0x5c>
	if (start > end) {
   1437a:	45b9      	cmp	r9, r7
   1437c:	d31b      	bcc.n	143b6 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   1437e:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   14380:	f8ad 3002 	strh.w	r3, [sp, #2]
   14384:	2400      	movs	r4, #0
   14386:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1438a:	a901      	add	r1, sp, #4
   1438c:	4668      	mov	r0, sp
	value = buf->data;
   1438e:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   14392:	f88d 4000 	strb.w	r4, [sp]
   14396:	f88d 4004 	strb.w	r4, [sp, #4]
   1439a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1439e:	f00f fd5d 	bl	23e5c <bt_uuid_cmp>
   143a2:	4606      	mov	r6, r0
   143a4:	b190      	cbz	r0, 143cc <att_find_type_req+0x74>
	if (!req) {
   143a6:	230a      	movs	r3, #10
   143a8:	463a      	mov	r2, r7
   143aa:	2106      	movs	r1, #6
   143ac:	4628      	mov	r0, r5
   143ae:	f00e fa0c 	bl	227ca <send_err_rsp.part.0>
		return 0;
   143b2:	e007      	b.n	143c4 <att_find_type_req+0x6c>
			*err = 0U;
   143b4:	464f      	mov	r7, r9
	if (!req) {
   143b6:	2301      	movs	r3, #1
   143b8:	463a      	mov	r2, r7
   143ba:	2106      	movs	r1, #6
   143bc:	4628      	mov	r0, r5
   143be:	f00e fa04 	bl	227ca <send_err_rsp.part.0>
		return 0;
   143c2:	2400      	movs	r4, #0
}
   143c4:	4620      	mov	r0, r4
   143c6:	b006      	add	sp, #24
   143c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   143cc:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   143d0:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   143d4:	4601      	mov	r1, r0
   143d6:	2214      	movs	r2, #20
   143d8:	a801      	add	r0, sp, #4
   143da:	f00d fdc5 	bl	21f68 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   143de:	4632      	mov	r2, r6
   143e0:	2107      	movs	r1, #7
   143e2:	4640      	mov	r0, r8
   143e4:	f7ff fe0c 	bl	14000 <bt_att_create_pdu>
   143e8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   143ea:	b1d8      	cbz	r0, 14424 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   143ec:	230a      	movs	r3, #10
   143ee:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   143f2:	4a0d      	ldr	r2, [pc, #52]	; (14428 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   143f4:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   143f8:	ab01      	add	r3, sp, #4
   143fa:	4649      	mov	r1, r9
   143fc:	4638      	mov	r0, r7
	data.value = value;
   143fe:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   14402:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   14404:	f00d ff73 	bl	222ee <bt_gatt_foreach_attr>
	if (data.err) {
   14408:	f89d 4015 	ldrb.w	r4, [sp, #21]
   1440c:	b12c      	cbz	r4, 1441a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   1440e:	9802      	ldr	r0, [sp, #8]
   14410:	f005 ff78 	bl	1a304 <net_buf_unref>
	if (!req) {
   14414:	f89d 3015 	ldrb.w	r3, [sp, #21]
   14418:	e7ce      	b.n	143b8 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1441a:	9902      	ldr	r1, [sp, #8]
   1441c:	4628      	mov	r0, r5
   1441e:	f7ff fbbb 	bl	13b98 <bt_att_chan_send_rsp.constprop.0>
	return 0;
   14422:	e7cf      	b.n	143c4 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   14424:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   14426:	e7cd      	b.n	143c4 <att_find_type_req+0x6c>
   14428:	000138d9 	.word	0x000138d9

0001442c <att_find_info_req>:
{
   1442c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1442e:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   14430:	881e      	ldrh	r6, [r3, #0]
{
   14432:	b085      	sub	sp, #20
   14434:	4605      	mov	r5, r0
	if (!start || !end) {
   14436:	b19e      	cbz	r6, 14460 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   14438:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   1443a:	b184      	cbz	r4, 1445e <att_find_info_req+0x32>
	if (start > end) {
   1443c:	42a6      	cmp	r6, r4
   1443e:	d80f      	bhi.n	14460 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   14440:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   14442:	2210      	movs	r2, #16
   14444:	2100      	movs	r1, #0
   14446:	4668      	mov	r0, sp
   14448:	f00d fd8e 	bl	21f68 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1444c:	2200      	movs	r2, #0
   1444e:	2105      	movs	r1, #5
   14450:	4638      	mov	r0, r7
   14452:	f7ff fdd5 	bl	14000 <bt_att_create_pdu>
   14456:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   14458:	b958      	cbnz	r0, 14472 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1445a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1445c:	e007      	b.n	1446e <att_find_info_req+0x42>
			*err = 0U;
   1445e:	4626      	mov	r6, r4
	if (!req) {
   14460:	2301      	movs	r3, #1
   14462:	4632      	mov	r2, r6
   14464:	2104      	movs	r1, #4
   14466:	4628      	mov	r0, r5
   14468:	f00e f9af 	bl	227ca <send_err_rsp.part.0>
	return 0;
   1446c:	2000      	movs	r0, #0
}
   1446e:	b005      	add	sp, #20
   14470:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   14472:	4621      	mov	r1, r4
   14474:	4a08      	ldr	r2, [pc, #32]	; (14498 <att_find_info_req+0x6c>)
	data.chan = chan;
   14476:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   14478:	466b      	mov	r3, sp
   1447a:	4630      	mov	r0, r6
   1447c:	f00d ff37 	bl	222ee <bt_gatt_foreach_attr>
	if (!data.rsp) {
   14480:	9c02      	ldr	r4, [sp, #8]
   14482:	b924      	cbnz	r4, 1448e <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   14484:	9801      	ldr	r0, [sp, #4]
   14486:	f005 ff3d 	bl	1a304 <net_buf_unref>
	if (!req) {
   1448a:	230a      	movs	r3, #10
   1448c:	e7e9      	b.n	14462 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1448e:	9901      	ldr	r1, [sp, #4]
   14490:	4628      	mov	r0, r5
   14492:	f7ff fb81 	bl	13b98 <bt_att_chan_send_rsp.constprop.0>
   14496:	e7e9      	b.n	1446c <att_find_info_req+0x40>
   14498:	0002241b 	.word	0x0002241b

0001449c <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1449c:	b513      	push	{r0, r1, r4, lr}
   1449e:	4602      	mov	r2, r0
   144a0:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   144a2:	4808      	ldr	r0, [pc, #32]	; (144c4 <bt_att_req_alloc+0x28>)
   144a4:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   144a6:	2400      	movs	r4, #0
   144a8:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   144aa:	f007 ffd5 	bl	1c458 <k_mem_slab_alloc>
   144ae:	4601      	mov	r1, r0
   144b0:	b930      	cbnz	r0, 144c0 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   144b2:	9801      	ldr	r0, [sp, #4]
   144b4:	221c      	movs	r2, #28
   144b6:	f00d fd57 	bl	21f68 <memset>

	return req;
   144ba:	9801      	ldr	r0, [sp, #4]
}
   144bc:	b002      	add	sp, #8
   144be:	bd10      	pop	{r4, pc}
		return NULL;
   144c0:	4620      	mov	r0, r4
   144c2:	e7fb      	b.n	144bc <bt_att_req_alloc+0x20>
   144c4:	20000754 	.word	0x20000754

000144c8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   144c8:	b507      	push	{r0, r1, r2, lr}
   144ca:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   144cc:	6880      	ldr	r0, [r0, #8]
   144ce:	b120      	cbz	r0, 144da <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   144d0:	f005 ff18 	bl	1a304 <net_buf_unref>
		req->buf = NULL;
   144d4:	9b01      	ldr	r3, [sp, #4]
   144d6:	2200      	movs	r2, #0
   144d8:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   144da:	4803      	ldr	r0, [pc, #12]	; (144e8 <bt_att_req_free+0x20>)
   144dc:	a901      	add	r1, sp, #4
   144de:	f010 f80e 	bl	244fe <k_mem_slab_free>
}
   144e2:	b003      	add	sp, #12
   144e4:	f85d fb04 	ldr.w	pc, [sp], #4
   144e8:	20000754 	.word	0x20000754

000144ec <att_handle_rsp>:
{
   144ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144f0:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   144f2:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   144f6:	460f      	mov	r7, r1
   144f8:	4690      	mov	r8, r2
   144fa:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   144fc:	f010 fcb6 	bl	24e6c <k_work_cancel_delayable>
	if (!chan->req) {
   14500:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
   14504:	b9e5      	cbnz	r5, 14540 <att_handle_rsp+0x54>
   14506:	4919      	ldr	r1, [pc, #100]	; (1456c <att_handle_rsp+0x80>)
   14508:	4819      	ldr	r0, [pc, #100]	; (14570 <att_handle_rsp+0x84>)
   1450a:	1a40      	subs	r0, r0, r1
   1450c:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
   1450e:	0180      	lsls	r0, r0, #6
   14510:	f040 0102 	orr.w	r1, r0, #2
   14514:	4817      	ldr	r0, [pc, #92]	; (14574 <att_handle_rsp+0x88>)
   14516:	f00d fa1b 	bl	21950 <log_0>
	bt_att_func_t func = NULL;
   1451a:	46aa      	mov	sl, r5
	att_req_send_process(chan->att);
   1451c:	6820      	ldr	r0, [r4, #0]
   1451e:	f00e f893 	bl	22648 <att_req_send_process>
	if (func) {
   14522:	f1ba 0f00 	cmp.w	sl, #0
   14526:	d007      	beq.n	14538 <att_handle_rsp+0x4c>
		func(chan->att->conn, err, pdu, len, params);
   14528:	6820      	ldr	r0, [r4, #0]
   1452a:	f8cd 9000 	str.w	r9, [sp]
   1452e:	6800      	ldr	r0, [r0, #0]
   14530:	4643      	mov	r3, r8
   14532:	463a      	mov	r2, r7
   14534:	4631      	mov	r1, r6
   14536:	47d0      	blx	sl
}
   14538:	2000      	movs	r0, #0
   1453a:	b003      	add	sp, #12
   1453c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   14540:	4b0d      	ldr	r3, [pc, #52]	; (14578 <att_handle_rsp+0x8c>)
   14542:	429d      	cmp	r5, r3
   14544:	f04f 0b00 	mov.w	fp, #0
   14548:	d103      	bne.n	14552 <att_handle_rsp+0x66>
		chan->req = NULL;
   1454a:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
   1454e:	46da      	mov	sl, fp
		goto process;
   14550:	e7e4      	b.n	1451c <att_handle_rsp+0x30>
	func = chan->req->func;
   14552:	f8d5 a004 	ldr.w	sl, [r5, #4]
	chan->req->func = NULL;
   14556:	f8c5 b004 	str.w	fp, [r5, #4]
	bt_att_req_free(chan->req);
   1455a:	4628      	mov	r0, r5
	params = chan->req->user_data;
   1455c:	f8d5 9018 	ldr.w	r9, [r5, #24]
	bt_att_req_free(chan->req);
   14560:	f7ff ffb2 	bl	144c8 <bt_att_req_free>
	chan->req = NULL;
   14564:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
   14568:	e7d8      	b.n	1451c <att_handle_rsp+0x30>
   1456a:	bf00      	nop
   1456c:	00025224 	.word	0x00025224
   14570:	00025234 	.word	0x00025234
   14574:	00026740 	.word	0x00026740
   14578:	2000246c 	.word	0x2000246c

0001457c <bt_att_disconnected>:
{
   1457c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   1457e:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   14582:	b085      	sub	sp, #20
   14584:	4604      	mov	r4, r0
	if (!att_chan->att) {
   14586:	b385      	cbz	r5, 145ea <bt_att_disconnected+0x6e>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   14588:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   1458c:	f105 0024 	add.w	r0, r5, #36	; 0x24
   14590:	f00d fe45 	bl	2221e <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   14594:	f1a4 0608 	sub.w	r6, r4, #8
   14598:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   1459c:	2200      	movs	r2, #0
   1459e:	2300      	movs	r3, #0
   145a0:	4638      	mov	r0, r7
   145a2:	f00f fcb3 	bl	23f0c <net_buf_get>
   145a6:	4602      	mov	r2, r0
   145a8:	bb08      	cbnz	r0, 145ee <bt_att_disconnected+0x72>
	if (chan->req) {
   145aa:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   145ae:	b123      	cbz	r3, 145ba <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   145b0:	4601      	mov	r1, r0
   145b2:	230e      	movs	r3, #14
   145b4:	4630      	mov	r0, r6
   145b6:	f7ff ff99 	bl	144ec <att_handle_rsp>
	chan->att = NULL;
   145ba:	2300      	movs	r3, #0
   145bc:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   145c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   145c2:	b993      	cbnz	r3, 145ea <bt_att_disconnected+0x6e>
	att_reset(att);
   145c4:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   145c6:	9803      	ldr	r0, [sp, #12]
   145c8:	2200      	movs	r2, #0
   145ca:	2300      	movs	r3, #0
   145cc:	300c      	adds	r0, #12
   145ce:	f00f fc9d 	bl	23f0c <net_buf_get>
   145d2:	b978      	cbnz	r0, 145f4 <bt_att_disconnected+0x78>
	att->conn = NULL;
   145d4:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   145d6:	6856      	ldr	r6, [r2, #4]
	att->conn = NULL;
   145d8:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   145da:	b976      	cbnz	r6, 145fa <bt_att_disconnected+0x7e>
	k_mem_slab_free(&att_slab, (void **)&att);
   145dc:	4813      	ldr	r0, [pc, #76]	; (1462c <bt_att_disconnected+0xb0>)
   145de:	a903      	add	r1, sp, #12
   145e0:	f00f ff8d 	bl	244fe <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   145e4:	6820      	ldr	r0, [r4, #0]
   145e6:	f001 fed9 	bl	1639c <bt_gatt_disconnected>
}
   145ea:	b005      	add	sp, #20
   145ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   145ee:	f005 fe89 	bl	1a304 <net_buf_unref>
   145f2:	e7d3      	b.n	1459c <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   145f4:	f005 fe86 	bl	1a304 <net_buf_unref>
   145f8:	e7e5      	b.n	145c6 <bt_att_disconnected+0x4a>
	return node->next;
   145fa:	6835      	ldr	r5, [r6, #0]
   145fc:	2d00      	cmp	r5, #0
   145fe:	bf38      	it	cc
   14600:	2500      	movcc	r5, #0
		if (req->func) {
   14602:	6877      	ldr	r7, [r6, #4]
   14604:	b137      	cbz	r7, 14614 <bt_att_disconnected+0x98>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   14606:	69b3      	ldr	r3, [r6, #24]
   14608:	9300      	str	r3, [sp, #0]
   1460a:	2300      	movs	r3, #0
   1460c:	461a      	mov	r2, r3
   1460e:	210e      	movs	r1, #14
   14610:	4618      	mov	r0, r3
   14612:	47b8      	blx	r7
		bt_att_req_free(req);
   14614:	4630      	mov	r0, r6
   14616:	f7ff ff57 	bl	144c8 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1461a:	2d00      	cmp	r5, #0
   1461c:	d0de      	beq.n	145dc <bt_att_disconnected+0x60>
   1461e:	682b      	ldr	r3, [r5, #0]
   14620:	2b00      	cmp	r3, #0
   14622:	bf38      	it	cc
   14624:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14626:	462e      	mov	r6, r5
   14628:	461d      	mov	r5, r3
   1462a:	e7ea      	b.n	14602 <bt_att_disconnected+0x86>
   1462c:	2000071c 	.word	0x2000071c

00014630 <att_timeout>:
   14630:	4b08      	ldr	r3, [pc, #32]	; (14654 <att_timeout+0x24>)
   14632:	4909      	ldr	r1, [pc, #36]	; (14658 <att_timeout+0x28>)
{
   14634:	b510      	push	{r4, lr}
   14636:	1ac9      	subs	r1, r1, r3
   14638:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
   1463a:	0189      	lsls	r1, r1, #6
{
   1463c:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   1463e:	f041 0101 	orr.w	r1, r1, #1
   14642:	4806      	ldr	r0, [pc, #24]	; (1465c <att_timeout+0x2c>)
   14644:	f00d f984 	bl	21950 <log_0>
	bt_att_disconnected(&chan->chan.chan);
   14648:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
}
   1464c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   14650:	f7ff bf94 	b.w	1457c <bt_att_disconnected>
   14654:	00025224 	.word	0x00025224
   14658:	00025234 	.word	0x00025234
   1465c:	00026757 	.word	0x00026757

00014660 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   14660:	b538      	push	{r3, r4, r5, lr}
   14662:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
   14664:	4805      	ldr	r0, [pc, #20]	; (1467c <bt_buf_get_rx+0x1c>)
   14666:	f00f fc4c 	bl	23f02 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   1466a:	4604      	mov	r4, r0
   1466c:	b120      	cbz	r0, 14678 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
   1466e:	2100      	movs	r1, #0
   14670:	3008      	adds	r0, #8
   14672:	f00f fc65 	bl	23f40 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   14676:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   14678:	4620      	mov	r0, r4
   1467a:	bd38      	pop	{r3, r4, r5, pc}
   1467c:	20000904 	.word	0x20000904

00014680 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   14680:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   14682:	490b      	ldr	r1, [pc, #44]	; (146b0 <bt_buf_get_cmd_complete+0x30>)
{
   14684:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   14686:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
   1468a:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   1468c:	b920      	cbnz	r0, 14698 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   1468e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14692:	2001      	movs	r0, #1
   14694:	f7ff bfe4 	b.w	14660 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   14698:	f00f fc63 	bl	23f62 <net_buf_ref>
   1469c:	2301      	movs	r3, #1
		buf->len = 0U;
   1469e:	2100      	movs	r1, #0
   146a0:	7503      	strb	r3, [r0, #20]
   146a2:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   146a4:	4604      	mov	r4, r0
   146a6:	3008      	adds	r0, #8
   146a8:	f00f fc4a 	bl	23f40 <net_buf_simple_reserve>
}
   146ac:	4620      	mov	r0, r4
   146ae:	bd10      	pop	{r4, pc}
   146b0:	200002a8 	.word	0x200002a8

000146b4 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   146b4:	b570      	push	{r4, r5, r6, lr}
   146b6:	4604      	mov	r4, r0
	switch (evt) {
   146b8:	2c0f      	cmp	r4, #15
{
   146ba:	460d      	mov	r5, r1
   146bc:	4610      	mov	r0, r2
   146be:	4619      	mov	r1, r3
	switch (evt) {
   146c0:	d805      	bhi.n	146ce <bt_buf_get_evt+0x1a>
   146c2:	2c0d      	cmp	r4, #13
   146c4:	d912      	bls.n	146ec <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   146c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   146ca:	f7ff bfd9 	b.w	14680 <bt_buf_get_cmd_complete>
	switch (evt) {
   146ce:	2c13      	cmp	r4, #19
   146d0:	d10c      	bne.n	146ec <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   146d2:	480b      	ldr	r0, [pc, #44]	; (14700 <bt_buf_get_evt+0x4c>)
   146d4:	f00f fc15 	bl	23f02 <net_buf_alloc_fixed>
			if (buf) {
   146d8:	4604      	mov	r4, r0
   146da:	b128      	cbz	r0, 146e8 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   146dc:	2100      	movs	r1, #0
   146de:	3008      	adds	r0, #8
   146e0:	f00f fc2e 	bl	23f40 <net_buf_simple_reserve>
   146e4:	2301      	movs	r3, #1
   146e6:	7523      	strb	r3, [r4, #20]
}
   146e8:	4620      	mov	r0, r4
   146ea:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   146ec:	4602      	mov	r2, r0
   146ee:	460b      	mov	r3, r1
		if (discardable) {
   146f0:	b10d      	cbz	r5, 146f6 <bt_buf_get_evt+0x42>
   146f2:	4804      	ldr	r0, [pc, #16]	; (14704 <bt_buf_get_evt+0x50>)
   146f4:	e7ee      	b.n	146d4 <bt_buf_get_evt+0x20>
}
   146f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   146fa:	2001      	movs	r0, #1
   146fc:	f7ff bfb0 	b.w	14660 <bt_buf_get_rx>
   14700:	2000092c 	.word	0x2000092c
   14704:	2000088c 	.word	0x2000088c

00014708 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   14708:	2300      	movs	r3, #0
	tx->user_data = NULL;
   1470a:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   1470e:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   14710:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   14712:	4801      	ldr	r0, [pc, #4]	; (14718 <tx_free+0x10>)
   14714:	f010 b8f1 	b.w	248fa <k_queue_append>
   14718:	2000084c 	.word	0x2000084c

0001471c <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1471c:	4b0e      	ldr	r3, [pc, #56]	; (14758 <notify_connected+0x3c>)
{
   1471e:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   14720:	681d      	ldr	r5, [r3, #0]
{
   14722:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   14724:	b955      	cbnz	r5, 1473c <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14726:	4d0d      	ldr	r5, [pc, #52]	; (1475c <notify_connected+0x40>)
   14728:	4e0d      	ldr	r6, [pc, #52]	; (14760 <notify_connected+0x44>)
   1472a:	7b21      	ldrb	r1, [r4, #12]
   1472c:	42b5      	cmp	r5, r6
   1472e:	d30c      	bcc.n	1474a <notify_connected+0x2e>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	if (!conn->err) {
   14730:	b989      	cbnz	r1, 14756 <notify_connected+0x3a>
		bt_gatt_connected(conn);
   14732:	4620      	mov	r0, r4
	}
}
   14734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
   14738:	f001 bdac 	b.w	16294 <bt_gatt_connected>
		if (cb->connected) {
   1473c:	682b      	ldr	r3, [r5, #0]
   1473e:	b113      	cbz	r3, 14746 <notify_connected+0x2a>
			cb->connected(conn, conn->err);
   14740:	7b21      	ldrb	r1, [r4, #12]
   14742:	4620      	mov	r0, r4
   14744:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14746:	69ad      	ldr	r5, [r5, #24]
   14748:	e7ec      	b.n	14724 <notify_connected+0x8>
		if (cb->connected) {
   1474a:	682b      	ldr	r3, [r5, #0]
   1474c:	b10b      	cbz	r3, 14752 <notify_connected+0x36>
			cb->connected(conn, conn->err);
   1474e:	4620      	mov	r0, r4
   14750:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14752:	351c      	adds	r5, #28
   14754:	e7e9      	b.n	1472a <notify_connected+0xe>
}
   14756:	bd70      	pop	{r4, r5, r6, pc}
   14758:	2000248c 	.word	0x2000248c
   1475c:	000251e0 	.word	0x000251e0
   14760:	000251fc 	.word	0x000251fc

00014764 <send_frag>:
{
   14764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   14768:	694d      	ldr	r5, [r1, #20]
{
   1476a:	4604      	mov	r4, r0
   1476c:	460e      	mov	r6, r1
   1476e:	4691      	mov	r9, r2
   14770:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   14772:	f04f 33ff 	mov.w	r3, #4294967295
   14776:	4845      	ldr	r0, [pc, #276]	; (1488c <send_frag+0x128>)
   14778:	f04f 32ff 	mov.w	r2, #4294967295
   1477c:	f008 fbbc 	bl	1cef8 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   14780:	7b63      	ldrb	r3, [r4, #13]
   14782:	2b07      	cmp	r3, #7
   14784:	d151      	bne.n	1482a <send_frag+0xc6>
	__asm__ volatile(
   14786:	f04f 0340 	mov.w	r3, #64	; 0x40
   1478a:	f3ef 8211 	mrs	r2, BASEPRI
   1478e:	f383 8812 	msr	BASEPRI_MAX, r3
   14792:	f3bf 8f6f 	isb	sy
	if (tx) {
   14796:	2d00      	cmp	r5, #0
   14798:	d059      	beq.n	1484e <send_frag+0xea>
	parent->next = child;
   1479a:	2300      	movs	r3, #0
   1479c:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   1479e:	69a3      	ldr	r3, [r4, #24]
   147a0:	2b00      	cmp	r3, #0
   147a2:	d151      	bne.n	14848 <send_frag+0xe4>
	list->head = node;
   147a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   147a8:	f382 8811 	msr	BASEPRI, r2
   147ac:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   147b0:	2104      	movs	r1, #4
   147b2:	f106 0008 	add.w	r0, r6, #8
   147b6:	f00f fc11 	bl	23fdc <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   147ba:	8823      	ldrh	r3, [r4, #0]
   147bc:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   147c0:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   147c4:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   147c6:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   147ca:	3b04      	subs	r3, #4
   147cc:	8043      	strh	r3, [r0, #2]
   147ce:	2302      	movs	r3, #2
   147d0:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   147d2:	4630      	mov	r0, r6
   147d4:	f00e fdbd 	bl	23352 <bt_send>
	if (err) {
   147d8:	4601      	mov	r1, r0
   147da:	2800      	cmp	r0, #0
   147dc:	d053      	beq.n	14886 <send_frag+0x122>
   147de:	4b2c      	ldr	r3, [pc, #176]	; (14890 <send_frag+0x12c>)
   147e0:	4a2c      	ldr	r2, [pc, #176]	; (14894 <send_frag+0x130>)
		BT_ERR("Unable to send to driver (err %d)", err);
   147e2:	482d      	ldr	r0, [pc, #180]	; (14898 <send_frag+0x134>)
   147e4:	1ad2      	subs	r2, r2, r3
   147e6:	08d2      	lsrs	r2, r2, #3
   147e8:	0192      	lsls	r2, r2, #6
   147ea:	f042 0201 	orr.w	r2, r2, #1
   147ee:	f00d f8bc 	bl	2196a <log_1>
	__asm__ volatile(
   147f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   147f6:	f3ef 8111 	mrs	r1, BASEPRI
   147fa:	f383 8812 	msr	BASEPRI_MAX, r3
   147fe:	f3bf 8f6f 	isb	sy
		if (tx) {
   14802:	2d00      	cmp	r5, #0
   14804:	d039      	beq.n	1487a <send_frag+0x116>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14806:	6963      	ldr	r3, [r4, #20]
   14808:	2200      	movs	r2, #0
   1480a:	b153      	cbz	r3, 14822 <send_frag+0xbe>
   1480c:	429d      	cmp	r5, r3
   1480e:	d131      	bne.n	14874 <send_frag+0x110>
Z_GENLIST_REMOVE(slist, snode)
   14810:	682b      	ldr	r3, [r5, #0]
   14812:	bb4a      	cbnz	r2, 14868 <send_frag+0x104>
   14814:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   14816:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   14818:	4295      	cmp	r5, r2
   1481a:	d100      	bne.n	1481e <send_frag+0xba>
	list->tail = node;
   1481c:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   1481e:	2300      	movs	r3, #0
   14820:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   14822:	f381 8811 	msr	BASEPRI, r1
   14826:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1482a:	4818      	ldr	r0, [pc, #96]	; (1488c <send_frag+0x128>)
   1482c:	f008 fb3e 	bl	1ceac <z_impl_k_sem_give>
	if (tx) {
   14830:	b115      	cbz	r5, 14838 <send_frag+0xd4>
		tx_free(tx);
   14832:	4628      	mov	r0, r5
   14834:	f7ff ff68 	bl	14708 <tx_free>
	if (always_consume) {
   14838:	b11f      	cbz	r7, 14842 <send_frag+0xde>
		net_buf_unref(buf);
   1483a:	4630      	mov	r0, r6
   1483c:	f005 fd62 	bl	1a304 <net_buf_unref>
	return false;
   14840:	2700      	movs	r7, #0
}
   14842:	4638      	mov	r0, r7
   14844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14848:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1484a:	61a5      	str	r5, [r4, #24]
}
   1484c:	e7ac      	b.n	147a8 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   1484e:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   14850:	b133      	cbz	r3, 14860 <send_frag+0xfc>
			pending_no_cb = &tail_tx->pending_no_cb;
   14852:	f103 080c 	add.w	r8, r3, #12
   14856:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   14858:	3301      	adds	r3, #1
   1485a:	f8c8 3000 	str.w	r3, [r8]
   1485e:	e7a3      	b.n	147a8 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   14860:	69e3      	ldr	r3, [r4, #28]
   14862:	f104 081c 	add.w	r8, r4, #28
   14866:	e7f7      	b.n	14858 <send_frag+0xf4>
	parent->next = child;
   14868:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1486a:	69a3      	ldr	r3, [r4, #24]
   1486c:	429d      	cmp	r5, r3
	list->tail = node;
   1486e:	bf08      	it	eq
   14870:	61a2      	streq	r2, [r4, #24]
}
   14872:	e7d4      	b.n	1481e <send_frag+0xba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   14874:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14876:	681b      	ldr	r3, [r3, #0]
   14878:	e7c7      	b.n	1480a <send_frag+0xa6>
			(*pending_no_cb)--;
   1487a:	f8d8 3000 	ldr.w	r3, [r8]
   1487e:	3b01      	subs	r3, #1
   14880:	f8c8 3000 	str.w	r3, [r8]
   14884:	e7cd      	b.n	14822 <send_frag+0xbe>
	return true;
   14886:	2701      	movs	r7, #1
   14888:	e7db      	b.n	14842 <send_frag+0xde>
   1488a:	bf00      	nop
   1488c:	200003a8 	.word	0x200003a8
   14890:	00025224 	.word	0x00025224
   14894:	00025244 	.word	0x00025244
   14898:	00026771 	.word	0x00026771

0001489c <bt_conn_get_pkts>:
}
   1489c:	4800      	ldr	r0, [pc, #0]	; (148a0 <bt_conn_get_pkts+0x4>)
   1489e:	4770      	bx	lr
   148a0:	200003a8 	.word	0x200003a8

000148a4 <bt_conn_new>:
{
   148a4:	b538      	push	{r3, r4, r5, lr}
   148a6:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   148a8:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   148aa:	2501      	movs	r5, #1
   148ac:	428b      	cmp	r3, r1
   148ae:	d102      	bne.n	148b6 <bt_conn_new+0x12>
		return NULL;
   148b0:	2400      	movs	r4, #0
}
   148b2:	4620      	mov	r0, r4
   148b4:	bd38      	pop	{r3, r4, r5, pc}
   148b6:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   148ba:	f3bf 8f5b 	dmb	ish
   148be:	e852 0f00 	ldrex	r0, [r2]
   148c2:	2800      	cmp	r0, #0
   148c4:	d104      	bne.n	148d0 <bt_conn_new+0x2c>
   148c6:	e842 5c00 	strex	ip, r5, [r2]
   148ca:	f1bc 0f00 	cmp.w	ip, #0
   148ce:	d1f6      	bne.n	148be <bt_conn_new+0x1a>
   148d0:	f3bf 8f5b 	dmb	ish
   148d4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   148d8:	d002      	beq.n	148e0 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   148da:	3301      	adds	r3, #1
   148dc:	4604      	mov	r4, r0
   148de:	e7e5      	b.n	148ac <bt_conn_new+0x8>
	if (!conn) {
   148e0:	2c00      	cmp	r4, #0
   148e2:	d0e6      	beq.n	148b2 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   148e4:	22b8      	movs	r2, #184	; 0xb8
   148e6:	2100      	movs	r1, #0
   148e8:	4620      	mov	r0, r4
   148ea:	f00d fb3d 	bl	21f68 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   148ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
   148f2:	4904      	ldr	r1, [pc, #16]	; (14904 <bt_conn_new+0x60>)
   148f4:	f010 faae 	bl	24e54 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   148f8:	4903      	ldr	r1, [pc, #12]	; (14908 <bt_conn_new+0x64>)
   148fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   148fe:	f010 fa83 	bl	24e08 <k_work_init>
	return conn;
   14902:	e7d6      	b.n	148b2 <bt_conn_new+0xe>
   14904:	000150e1 	.word	0x000150e1
   14908:	00022a35 	.word	0x00022a35

0001490c <bt_conn_recv>:
{
   1490c:	b570      	push	{r4, r5, r6, lr}
   1490e:	4616      	mov	r6, r2
   14910:	4604      	mov	r4, r0
   14912:	460d      	mov	r5, r1
	tx_notify(conn);
   14914:	f00e f86b 	bl	229ee <tx_notify>
	switch (flags) {
   14918:	2e01      	cmp	r6, #1
   1491a:	d02e      	beq.n	1497a <bt_conn_recv+0x6e>
   1491c:	2e02      	cmp	r6, #2
   1491e:	d164      	bne.n	149ea <bt_conn_recv+0xde>
		if (conn->rx) {
   14920:	6923      	ldr	r3, [r4, #16]
   14922:	b163      	cbz	r3, 1493e <bt_conn_recv+0x32>
   14924:	4b3c      	ldr	r3, [pc, #240]	; (14a18 <bt_conn_recv+0x10c>)
   14926:	493d      	ldr	r1, [pc, #244]	; (14a1c <bt_conn_recv+0x110>)
			BT_ERR("Unexpected first L2CAP frame");
   14928:	483d      	ldr	r0, [pc, #244]	; (14a20 <bt_conn_recv+0x114>)
   1492a:	1ac9      	subs	r1, r1, r3
   1492c:	08c9      	lsrs	r1, r1, #3
   1492e:	0189      	lsls	r1, r1, #6
   14930:	f041 0101 	orr.w	r1, r1, #1
   14934:	f00d f80c 	bl	21950 <log_0>
			bt_conn_reset_rx_state(conn);
   14938:	4620      	mov	r0, r4
   1493a:	f00e f87e 	bl	22a3a <bt_conn_reset_rx_state>
		conn->rx = buf;
   1493e:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   14940:	6923      	ldr	r3, [r4, #16]
   14942:	8999      	ldrh	r1, [r3, #12]
   14944:	2901      	cmp	r1, #1
   14946:	d965      	bls.n	14a14 <bt_conn_recv+0x108>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   14948:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   1494a:	7845      	ldrb	r5, [r0, #1]
   1494c:	7802      	ldrb	r2, [r0, #0]
   1494e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   14952:	3204      	adds	r2, #4
   14954:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   14956:	4291      	cmp	r1, r2
   14958:	d35c      	bcc.n	14a14 <bt_conn_recv+0x108>
	if (conn->rx->len > acl_total_len) {
   1495a:	d952      	bls.n	14a02 <bt_conn_recv+0xf6>
   1495c:	482e      	ldr	r0, [pc, #184]	; (14a18 <bt_conn_recv+0x10c>)
   1495e:	4b2f      	ldr	r3, [pc, #188]	; (14a1c <bt_conn_recv+0x110>)
   14960:	1a1b      	subs	r3, r3, r0
   14962:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   14964:	019b      	lsls	r3, r3, #6
   14966:	482f      	ldr	r0, [pc, #188]	; (14a24 <bt_conn_recv+0x118>)
   14968:	f043 0301 	orr.w	r3, r3, #1
   1496c:	f00d f811 	bl	21992 <log_2>
		bt_conn_reset_rx_state(conn);
   14970:	4620      	mov	r0, r4
}
   14972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   14976:	f00e b860 	b.w	22a3a <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1497a:	6920      	ldr	r0, [r4, #16]
   1497c:	b968      	cbnz	r0, 1499a <bt_conn_recv+0x8e>
   1497e:	4927      	ldr	r1, [pc, #156]	; (14a1c <bt_conn_recv+0x110>)
   14980:	4b25      	ldr	r3, [pc, #148]	; (14a18 <bt_conn_recv+0x10c>)
			BT_ERR("Unexpected L2CAP continuation");
   14982:	4829      	ldr	r0, [pc, #164]	; (14a28 <bt_conn_recv+0x11c>)
   14984:	1ac9      	subs	r1, r1, r3
   14986:	08c9      	lsrs	r1, r1, #3
   14988:	0189      	lsls	r1, r1, #6
   1498a:	f041 0101 	orr.w	r1, r1, #1
   1498e:	f00c ffdf 	bl	21950 <log_0>
		bt_conn_reset_rx_state(conn);
   14992:	4620      	mov	r0, r4
   14994:	f00e f851 	bl	22a3a <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   14998:	e001      	b.n	1499e <bt_conn_recv+0x92>
		if (!buf->len) {
   1499a:	89ae      	ldrh	r6, [r5, #12]
   1499c:	b926      	cbnz	r6, 149a8 <bt_conn_recv+0x9c>
			net_buf_unref(buf);
   1499e:	4628      	mov	r0, r5
}
   149a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   149a4:	f005 bcae 	b.w	1a304 <net_buf_unref>
	return net_buf_simple_tailroom(&buf->b);
   149a8:	3008      	adds	r0, #8
   149aa:	f00f fb3b 	bl	24024 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   149ae:	4286      	cmp	r6, r0
   149b0:	d911      	bls.n	149d6 <bt_conn_recv+0xca>
   149b2:	4b19      	ldr	r3, [pc, #100]	; (14a18 <bt_conn_recv+0x10c>)
   149b4:	4919      	ldr	r1, [pc, #100]	; (14a1c <bt_conn_recv+0x110>)
			BT_ERR("Not enough buffer space for L2CAP data");
   149b6:	481d      	ldr	r0, [pc, #116]	; (14a2c <bt_conn_recv+0x120>)
   149b8:	1ac9      	subs	r1, r1, r3
   149ba:	08c9      	lsrs	r1, r1, #3
   149bc:	0189      	lsls	r1, r1, #6
   149be:	f041 0101 	orr.w	r1, r1, #1
   149c2:	f00c ffc5 	bl	21950 <log_0>
			bt_l2cap_recv(conn, conn->rx, false);
   149c6:	6921      	ldr	r1, [r4, #16]
   149c8:	2200      	movs	r2, #0
   149ca:	4620      	mov	r0, r4
   149cc:	f003 ff5a 	bl	18884 <bt_l2cap_recv>
			conn->rx = NULL;
   149d0:	2300      	movs	r3, #0
   149d2:	6123      	str	r3, [r4, #16]
   149d4:	e7e3      	b.n	1499e <bt_conn_recv+0x92>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   149d6:	6920      	ldr	r0, [r4, #16]
   149d8:	89aa      	ldrh	r2, [r5, #12]
   149da:	68a9      	ldr	r1, [r5, #8]
   149dc:	3008      	adds	r0, #8
   149de:	f00f faec 	bl	23fba <net_buf_simple_add_mem>
		net_buf_unref(buf);
   149e2:	4628      	mov	r0, r5
   149e4:	f005 fc8e 	bl	1a304 <net_buf_unref>
		break;
   149e8:	e7aa      	b.n	14940 <bt_conn_recv+0x34>
   149ea:	4a0b      	ldr	r2, [pc, #44]	; (14a18 <bt_conn_recv+0x10c>)
   149ec:	4b0b      	ldr	r3, [pc, #44]	; (14a1c <bt_conn_recv+0x110>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   149ee:	4810      	ldr	r0, [pc, #64]	; (14a30 <bt_conn_recv+0x124>)
   149f0:	1a9b      	subs	r3, r3, r2
   149f2:	08db      	lsrs	r3, r3, #3
   149f4:	019b      	lsls	r3, r3, #6
   149f6:	f043 0201 	orr.w	r2, r3, #1
   149fa:	4631      	mov	r1, r6
   149fc:	f00c ffb5 	bl	2196a <log_1>
   14a00:	e7c7      	b.n	14992 <bt_conn_recv+0x86>
	conn->rx = NULL;
   14a02:	2200      	movs	r2, #0
   14a04:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   14a06:	4620      	mov	r0, r4
   14a08:	2201      	movs	r2, #1
}
   14a0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   14a0e:	4619      	mov	r1, r3
   14a10:	f003 bf38 	b.w	18884 <bt_l2cap_recv>
}
   14a14:	bd70      	pop	{r4, r5, r6, pc}
   14a16:	bf00      	nop
   14a18:	00025224 	.word	0x00025224
   14a1c:	00025244 	.word	0x00025244
   14a20:	00026793 	.word	0x00026793
   14a24:	00026813 	.word	0x00026813
   14a28:	000267b0 	.word	0x000267b0
   14a2c:	000267ce 	.word	0x000267ce
   14a30:	000267f5 	.word	0x000267f5

00014a34 <bt_conn_send_cb>:
{
   14a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a38:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   14a3a:	7b43      	ldrb	r3, [r0, #13]
   14a3c:	2b07      	cmp	r3, #7
{
   14a3e:	4605      	mov	r5, r0
   14a40:	460e      	mov	r6, r1
   14a42:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   14a44:	d00c      	beq.n	14a60 <bt_conn_send_cb+0x2c>
   14a46:	4926      	ldr	r1, [pc, #152]	; (14ae0 <bt_conn_send_cb+0xac>)
   14a48:	4b26      	ldr	r3, [pc, #152]	; (14ae4 <bt_conn_send_cb+0xb0>)
		BT_ERR("not connected!");
   14a4a:	4827      	ldr	r0, [pc, #156]	; (14ae8 <bt_conn_send_cb+0xb4>)
   14a4c:	1ac9      	subs	r1, r1, r3
   14a4e:	08c9      	lsrs	r1, r1, #3
   14a50:	0189      	lsls	r1, r1, #6
   14a52:	f041 0101 	orr.w	r1, r1, #1
   14a56:	f00c ff7b 	bl	21950 <log_0>
			return -ENOTCONN;
   14a5a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   14a5e:	e01d      	b.n	14a9c <bt_conn_send_cb+0x68>
	if (cb) {
   14a60:	2a00      	cmp	r2, #0
   14a62:	d03a      	beq.n	14ada <bt_conn_send_cb+0xa6>
	return z_impl_z_current_get();
   14a64:	f008 f9a8 	bl	1cdb8 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   14a68:	4b20      	ldr	r3, [pc, #128]	; (14aec <bt_conn_send_cb+0xb8>)
   14a6a:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   14a6c:	4820      	ldr	r0, [pc, #128]	; (14af0 <bt_conn_send_cb+0xbc>)
   14a6e:	bf07      	ittee	eq
   14a70:	2200      	moveq	r2, #0
   14a72:	2300      	moveq	r3, #0
   14a74:	f04f 32ff 	movne.w	r2, #4294967295
   14a78:	f04f 33ff 	movne.w	r3, #4294967295
   14a7c:	f007 fe64 	bl	1c748 <z_impl_k_queue_get>
   14a80:	4604      	mov	r4, r0
		if (!tx) {
   14a82:	b968      	cbnz	r0, 14aa0 <bt_conn_send_cb+0x6c>
   14a84:	4b17      	ldr	r3, [pc, #92]	; (14ae4 <bt_conn_send_cb+0xb0>)
   14a86:	4916      	ldr	r1, [pc, #88]	; (14ae0 <bt_conn_send_cb+0xac>)
			BT_ERR("Unable to allocate TX context");
   14a88:	481a      	ldr	r0, [pc, #104]	; (14af4 <bt_conn_send_cb+0xc0>)
   14a8a:	1ac9      	subs	r1, r1, r3
   14a8c:	08c9      	lsrs	r1, r1, #3
   14a8e:	0189      	lsls	r1, r1, #6
   14a90:	f041 0101 	orr.w	r1, r1, #1
   14a94:	f00c ff5c 	bl	21950 <log_0>
			return -ENOBUFS;
   14a98:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   14a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   14aa0:	7b6b      	ldrb	r3, [r5, #13]
   14aa2:	2b07      	cmp	r3, #7
   14aa4:	d00d      	beq.n	14ac2 <bt_conn_send_cb+0x8e>
   14aa6:	4b0f      	ldr	r3, [pc, #60]	; (14ae4 <bt_conn_send_cb+0xb0>)
   14aa8:	490d      	ldr	r1, [pc, #52]	; (14ae0 <bt_conn_send_cb+0xac>)
			BT_WARN("Disconnected while allocating context");
   14aaa:	4813      	ldr	r0, [pc, #76]	; (14af8 <bt_conn_send_cb+0xc4>)
   14aac:	1ac9      	subs	r1, r1, r3
   14aae:	08c9      	lsrs	r1, r1, #3
   14ab0:	0189      	lsls	r1, r1, #6
   14ab2:	f041 0102 	orr.w	r1, r1, #2
   14ab6:	f00c ff4b 	bl	21950 <log_0>
			tx_free(tx);
   14aba:	4620      	mov	r0, r4
   14abc:	f7ff fe24 	bl	14708 <tx_free>
   14ac0:	e7cb      	b.n	14a5a <bt_conn_send_cb+0x26>
		tx->pending_no_cb = 0U;
   14ac2:	2300      	movs	r3, #0
		tx->user_data = user_data;
   14ac4:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   14ac8:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   14aca:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   14acc:	f105 0038 	add.w	r0, r5, #56	; 0x38
   14ad0:	4631      	mov	r1, r6
   14ad2:	f00f fa39 	bl	23f48 <net_buf_put>
	return 0;
   14ad6:	2000      	movs	r0, #0
   14ad8:	e7e0      	b.n	14a9c <bt_conn_send_cb+0x68>
		tx_data(buf)->tx = NULL;
   14ada:	614a      	str	r2, [r1, #20]
   14adc:	e7f6      	b.n	14acc <bt_conn_send_cb+0x98>
   14ade:	bf00      	nop
   14ae0:	00025244 	.word	0x00025244
   14ae4:	00025224 	.word	0x00025224
   14ae8:	0002682e 	.word	0x0002682e
   14aec:	20001e30 	.word	0x20001e30
   14af0:	2000084c 	.word	0x2000084c
   14af4:	0002683d 	.word	0x0002683d
   14af8:	0002685b 	.word	0x0002685b

00014afc <bt_conn_prepare_events>:
{
   14afc:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
   14afe:	4b1b      	ldr	r3, [pc, #108]	; (14b6c <bt_conn_prepare_events+0x70>)
   14b00:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14b02:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
   14b04:	609a      	str	r2, [r3, #8]
{
   14b06:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   14b08:	f00f fe5e 	bl	247c8 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14b0c:	f3bf 8f5b 	dmb	ish
   14b10:	4b17      	ldr	r3, [pc, #92]	; (14b70 <bt_conn_prepare_events+0x74>)
   14b12:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   14b16:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   14b1a:	f104 0014 	add.w	r0, r4, #20
   14b1e:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
   14b20:	b90a      	cbnz	r2, 14b26 <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
   14b22:	2001      	movs	r0, #1
}
   14b24:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   14b26:	7b5a      	ldrb	r2, [r3, #13]
   14b28:	b99a      	cbnz	r2, 14b52 <bt_conn_prepare_events+0x56>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14b2a:	f3bf 8f5b 	dmb	ish
   14b2e:	1d1a      	adds	r2, r3, #4
   14b30:	e852 5f00 	ldrex	r5, [r2]
   14b34:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
   14b38:	e842 ce00 	strex	lr, ip, [r2]
   14b3c:	f1be 0f00 	cmp.w	lr, #0
   14b40:	d1f6      	bne.n	14b30 <bt_conn_prepare_events+0x34>
   14b42:	f3bf 8f5b 	dmb	ish
   14b46:	066a      	lsls	r2, r5, #25
   14b48:	d503      	bpl.n	14b52 <bt_conn_prepare_events+0x56>
		conn_cleanup(conn);
   14b4a:	4618      	mov	r0, r3
   14b4c:	f00d ff7e 	bl	22a4c <conn_cleanup>
   14b50:	e7e7      	b.n	14b22 <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
   14b52:	7b4b      	ldrb	r3, [r1, #13]
   14b54:	2b07      	cmp	r3, #7
   14b56:	d1e4      	bne.n	14b22 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
   14b58:	4b06      	ldr	r3, [pc, #24]	; (14b74 <bt_conn_prepare_events+0x78>)
   14b5a:	2200      	movs	r2, #0
   14b5c:	2104      	movs	r1, #4
   14b5e:	f00f fe33 	bl	247c8 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   14b62:	2301      	movs	r3, #1
   14b64:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   14b68:	2002      	movs	r0, #2
	return ev_count;
   14b6a:	e7db      	b.n	14b24 <bt_conn_prepare_events+0x28>
   14b6c:	20000508 	.word	0x20000508
   14b70:	20001620 	.word	0x20001620
   14b74:	20001658 	.word	0x20001658

00014b78 <bt_conn_lookup_handle>:
{
   14b78:	4602      	mov	r2, r0
   14b7a:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   14b7c:	2101      	movs	r1, #1
   14b7e:	4803      	ldr	r0, [pc, #12]	; (14b8c <bt_conn_lookup_handle+0x14>)
   14b80:	f00d ffb7 	bl	22af2 <conn_lookup_handle>
}
   14b84:	2800      	cmp	r0, #0
   14b86:	bf38      	it	cc
   14b88:	2000      	movcc	r0, #0
   14b8a:	bd08      	pop	{r3, pc}
   14b8c:	20001620 	.word	0x20001620

00014b90 <bt_conn_set_state>:
{
   14b90:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   14b92:	7b46      	ldrb	r6, [r0, #13]
   14b94:	428e      	cmp	r6, r1
{
   14b96:	4604      	mov	r4, r0
   14b98:	460d      	mov	r5, r1
	if (conn->state == state) {
   14b9a:	d112      	bne.n	14bc2 <bt_conn_set_state+0x32>
   14b9c:	4b66      	ldr	r3, [pc, #408]	; (14d38 <bt_conn_set_state+0x1a8>)
   14b9e:	4a67      	ldr	r2, [pc, #412]	; (14d3c <bt_conn_set_state+0x1ac>)
		BT_WARN("no transition %s", state2str(state));
   14ba0:	4867      	ldr	r0, [pc, #412]	; (14d40 <bt_conn_set_state+0x1b0>)
   14ba2:	2e08      	cmp	r6, #8
   14ba4:	eba2 0203 	sub.w	r2, r2, r3
   14ba8:	bf96      	itet	ls
   14baa:	4b66      	ldrls	r3, [pc, #408]	; (14d44 <bt_conn_set_state+0x1b4>)
   14bac:	4966      	ldrhi	r1, [pc, #408]	; (14d48 <bt_conn_set_state+0x1b8>)
   14bae:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
   14bb2:	08d2      	lsrs	r2, r2, #3
   14bb4:	0192      	lsls	r2, r2, #6
   14bb6:	f042 0202 	orr.w	r2, r2, #2
}
   14bba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   14bbe:	f00c bed4 	b.w	2196a <log_1>
	conn->state = state;
   14bc2:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   14bc4:	b926      	cbnz	r6, 14bd0 <bt_conn_set_state+0x40>
		if (conn->type != BT_CONN_TYPE_ISO) {
   14bc6:	7883      	ldrb	r3, [r0, #2]
   14bc8:	2b08      	cmp	r3, #8
   14bca:	d001      	beq.n	14bd0 <bt_conn_set_state+0x40>
			bt_conn_ref(conn);
   14bcc:	f00d ff5c 	bl	22a88 <bt_conn_ref>
	switch (conn->state) {
   14bd0:	7b63      	ldrb	r3, [r4, #13]
   14bd2:	2b08      	cmp	r3, #8
   14bd4:	f200 80a5 	bhi.w	14d22 <bt_conn_set_state+0x192>
   14bd8:	e8df f003 	tbb	[pc, r3]
   14bdc:	adad0537 	.word	0xadad0537
   14be0:	1cadadad 	.word	0x1cadadad
   14be4:	ad          	.byte	0xad
   14be5:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   14be6:	4d59      	ldr	r5, [pc, #356]	; (14d4c <bt_conn_set_state+0x1bc>)
		tx->pending_no_cb = 0U;
   14be8:	2600      	movs	r6, #0
	__asm__ volatile(
   14bea:	f04f 0340 	mov.w	r3, #64	; 0x40
   14bee:	f3ef 8211 	mrs	r2, BASEPRI
   14bf2:	f383 8812 	msr	BASEPRI_MAX, r3
   14bf6:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   14bfa:	69e3      	ldr	r3, [r4, #28]
   14bfc:	2b00      	cmp	r3, #0
   14bfe:	d071      	beq.n	14ce4 <bt_conn_set_state+0x154>
			conn->pending_no_cb--;
   14c00:	3b01      	subs	r3, #1
   14c02:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   14c04:	f382 8811 	msr	BASEPRI, r2
   14c08:	f3bf 8f6f 	isb	sy
   14c0c:	4628      	mov	r0, r5
   14c0e:	f008 f94d 	bl	1ceac <z_impl_k_sem_give>
}
   14c12:	e7ea      	b.n	14bea <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   14c14:	78a3      	ldrb	r3, [r4, #2]
   14c16:	2b04      	cmp	r3, #4
   14c18:	f000 808d 	beq.w	14d36 <bt_conn_set_state+0x1a6>
	z_impl_k_queue_init(queue);
   14c1c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14c20:	f00f fe5f 	bl	248e2 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   14c24:	484a      	ldr	r0, [pc, #296]	; (14d50 <bt_conn_set_state+0x1c0>)
   14c26:	2100      	movs	r1, #0
   14c28:	f007 fd66 	bl	1c6f8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   14c2c:	2300      	movs	r3, #0
	list->tail = NULL;
   14c2e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14c32:	78e3      	ldrb	r3, [r4, #3]
   14c34:	2b01      	cmp	r3, #1
   14c36:	d17e      	bne.n	14d36 <bt_conn_set_state+0x1a6>
			k_work_schedule(&conn->deferred_work,
   14c38:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14c3c:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   14c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   14c44:	2300      	movs	r3, #0
   14c46:	f008 bdc7 	b.w	1d7d8 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   14c4a:	78a3      	ldrb	r3, [r4, #2]
   14c4c:	2b04      	cmp	r3, #4
   14c4e:	d104      	bne.n	14c5a <bt_conn_set_state+0xca>
			bt_conn_unref(conn);
   14c50:	4620      	mov	r0, r4
}
   14c52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   14c56:	f00d bf32 	b.w	22abe <bt_conn_unref>
		switch (old_state) {
   14c5a:	2e08      	cmp	r6, #8
   14c5c:	d86b      	bhi.n	14d36 <bt_conn_set_state+0x1a6>
   14c5e:	a301      	add	r3, pc, #4	; (adr r3, 14c64 <bt_conn_set_state+0xd4>)
   14c60:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   14c64:	00014cd1 	.word	0x00014cd1
   14c68:	00014c89 	.word	0x00014c89
   14c6c:	00014cc3 	.word	0x00014cc3
   14c70:	00014c51 	.word	0x00014c51
   14c74:	00014c51 	.word	0x00014c51
   14c78:	00014cc3 	.word	0x00014cc3
   14c7c:	00014cc3 	.word	0x00014cc3
   14c80:	00014cd1 	.word	0x00014cd1
   14c84:	00014cd1 	.word	0x00014cd1
			tx_notify(conn);
   14c88:	4620      	mov	r0, r4
   14c8a:	f00d feb0 	bl	229ee <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   14c8e:	78a3      	ldrb	r3, [r4, #2]
   14c90:	2b01      	cmp	r3, #1
   14c92:	d103      	bne.n	14c9c <bt_conn_set_state+0x10c>
				k_work_cancel_delayable(&conn->deferred_work);
   14c94:	f104 0058 	add.w	r0, r4, #88	; 0x58
   14c98:	f010 f8e8 	bl	24e6c <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14c9c:	f3bf 8f5b 	dmb	ish
   14ca0:	3404      	adds	r4, #4
   14ca2:	e854 3f00 	ldrex	r3, [r4]
   14ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14caa:	e844 3200 	strex	r2, r3, [r4]
   14cae:	2a00      	cmp	r2, #0
   14cb0:	d1f7      	bne.n	14ca2 <bt_conn_set_state+0x112>
   14cb2:	f3bf 8f5b 	dmb	ish
   14cb6:	4826      	ldr	r0, [pc, #152]	; (14d50 <bt_conn_set_state+0x1c0>)
}
   14cb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14cbc:	2100      	movs	r1, #0
   14cbe:	f007 bd1b 	b.w	1c6f8 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   14cc2:	7b23      	ldrb	r3, [r4, #12]
   14cc4:	2b00      	cmp	r3, #0
   14cc6:	d0c3      	beq.n	14c50 <bt_conn_set_state+0xc0>
				notify_connected(conn);
   14cc8:	4620      	mov	r0, r4
   14cca:	f7ff fd27 	bl	1471c <notify_connected>
   14cce:	e7bf      	b.n	14c50 <bt_conn_set_state+0xc0>
   14cd0:	4a1a      	ldr	r2, [pc, #104]	; (14d3c <bt_conn_set_state+0x1ac>)
   14cd2:	4b19      	ldr	r3, [pc, #100]	; (14d38 <bt_conn_set_state+0x1a8>)
			BT_WARN("Invalid (%u) old state", state);
   14cd4:	481f      	ldr	r0, [pc, #124]	; (14d54 <bt_conn_set_state+0x1c4>)
   14cd6:	1ad2      	subs	r2, r2, r3
   14cd8:	08d2      	lsrs	r2, r2, #3
   14cda:	0192      	lsls	r2, r2, #6
   14cdc:	f042 0202 	orr.w	r2, r2, #2
   14ce0:	4629      	mov	r1, r5
   14ce2:	e76a      	b.n	14bba <bt_conn_set_state+0x2a>
Z_GENLIST_IS_EMPTY(slist)
   14ce4:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   14ce6:	b128      	cbz	r0, 14cf4 <bt_conn_set_state+0x164>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14ce8:	69a1      	ldr	r1, [r4, #24]
   14cea:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   14cec:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   14cee:	4288      	cmp	r0, r1
	list->tail = node;
   14cf0:	bf08      	it	eq
   14cf2:	61a3      	streq	r3, [r4, #24]
   14cf4:	f382 8811 	msr	BASEPRI, r2
   14cf8:	f3bf 8f6f 	isb	sy
		if (!node) {
   14cfc:	b1d8      	cbz	r0, 14d36 <bt_conn_set_state+0x1a6>
	__asm__ volatile(
   14cfe:	f04f 0240 	mov.w	r2, #64	; 0x40
   14d02:	f3ef 8311 	mrs	r3, BASEPRI
   14d06:	f382 8812 	msr	BASEPRI_MAX, r2
   14d0a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   14d0e:	68c2      	ldr	r2, [r0, #12]
   14d10:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   14d12:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   14d14:	f383 8811 	msr	BASEPRI, r3
   14d18:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   14d1c:	f7ff fcf4 	bl	14708 <tx_free>
   14d20:	e774      	b.n	14c0c <bt_conn_set_state+0x7c>
   14d22:	4a06      	ldr	r2, [pc, #24]	; (14d3c <bt_conn_set_state+0x1ac>)
   14d24:	4b04      	ldr	r3, [pc, #16]	; (14d38 <bt_conn_set_state+0x1a8>)
		BT_WARN("no valid (%u) state was set", state);
   14d26:	480c      	ldr	r0, [pc, #48]	; (14d58 <bt_conn_set_state+0x1c8>)
   14d28:	1ad2      	subs	r2, r2, r3
   14d2a:	08d2      	lsrs	r2, r2, #3
   14d2c:	0192      	lsls	r2, r2, #6
   14d2e:	f042 0202 	orr.w	r2, r2, #2
   14d32:	4629      	mov	r1, r5
   14d34:	e741      	b.n	14bba <bt_conn_set_state+0x2a>
}
   14d36:	bd70      	pop	{r4, r5, r6, pc}
   14d38:	00025224 	.word	0x00025224
   14d3c:	00025244 	.word	0x00025244
   14d40:	0002688b 	.word	0x0002688b
   14d44:	00025720 	.word	0x00025720
   14d48:	00026881 	.word	0x00026881
   14d4c:	200003a8 	.word	0x200003a8
   14d50:	20000508 	.word	0x20000508
   14d54:	0002689c 	.word	0x0002689c
   14d58:	000268b3 	.word	0x000268b3

00014d5c <bt_conn_index>:
		index = conn - acl_conns;
   14d5c:	4b03      	ldr	r3, [pc, #12]	; (14d6c <bt_conn_index+0x10>)
   14d5e:	1ac0      	subs	r0, r0, r3
   14d60:	4b03      	ldr	r3, [pc, #12]	; (14d70 <bt_conn_index+0x14>)
   14d62:	1180      	asrs	r0, r0, #6
   14d64:	4358      	muls	r0, r3
}
   14d66:	b2c0      	uxtb	r0, r0
   14d68:	4770      	bx	lr
   14d6a:	bf00      	nop
   14d6c:	20001620 	.word	0x20001620
   14d70:	aaaaaaab 	.word	0xaaaaaaab

00014d74 <bt_conn_create_pdu_timeout>:
{
   14d74:	b538      	push	{r3, r4, r5, lr}
   14d76:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   14d78:	490c      	ldr	r1, [pc, #48]	; (14dac <bt_conn_create_pdu_timeout+0x38>)
   14d7a:	2800      	cmp	r0, #0
   14d7c:	bf08      	it	eq
   14d7e:	4608      	moveq	r0, r1
   14d80:	f00f f8bf 	bl	23f02 <net_buf_alloc_fixed>
	if (!buf) {
   14d84:	4604      	mov	r4, r0
   14d86:	b958      	cbnz	r0, 14da0 <bt_conn_create_pdu_timeout+0x2c>
   14d88:	4909      	ldr	r1, [pc, #36]	; (14db0 <bt_conn_create_pdu_timeout+0x3c>)
   14d8a:	4b0a      	ldr	r3, [pc, #40]	; (14db4 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
   14d8c:	480a      	ldr	r0, [pc, #40]	; (14db8 <bt_conn_create_pdu_timeout+0x44>)
   14d8e:	1ac9      	subs	r1, r1, r3
   14d90:	08c9      	lsrs	r1, r1, #3
   14d92:	0189      	lsls	r1, r1, #6
   14d94:	f041 0102 	orr.w	r1, r1, #2
   14d98:	f00c fdda 	bl	21950 <log_0>
}
   14d9c:	4620      	mov	r0, r4
   14d9e:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   14da0:	1d29      	adds	r1, r5, #4
   14da2:	3008      	adds	r0, #8
   14da4:	f00f f8cc 	bl	23f40 <net_buf_simple_reserve>
	return buf;
   14da8:	e7f8      	b.n	14d9c <bt_conn_create_pdu_timeout+0x28>
   14daa:	bf00      	nop
   14dac:	20000864 	.word	0x20000864
   14db0:	00025244 	.word	0x00025244
   14db4:	00025224 	.word	0x00025224
   14db8:	000268cf 	.word	0x000268cf

00014dbc <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   14dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14dbe:	f3bf 8f5b 	dmb	ish
   14dc2:	6842      	ldr	r2, [r0, #4]
   14dc4:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   14dc8:	0592      	lsls	r2, r2, #22
{
   14dca:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   14dcc:	f100 0304 	add.w	r3, r0, #4
   14dd0:	d519      	bpl.n	14e06 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   14dd2:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   14dd6:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   14dda:	4291      	cmp	r1, r2
   14ddc:	d813      	bhi.n	14e06 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   14dde:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   14de2:	4291      	cmp	r1, r2
   14de4:	d30f      	bcc.n	14e06 <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   14de6:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   14dea:	4291      	cmp	r1, r2
   14dec:	d10b      	bne.n	14e06 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14dee:	f3bf 8f5b 	dmb	ish
   14df2:	e853 2f00 	ldrex	r2, [r3]
   14df6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   14dfa:	e843 2100 	strex	r1, r2, [r3]
   14dfe:	2900      	cmp	r1, #0
   14e00:	d1f7      	bne.n	14df2 <notify_le_param_updated+0x36>
   14e02:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   14e06:	4b10      	ldr	r3, [pc, #64]	; (14e48 <notify_le_param_updated+0x8c>)
   14e08:	681d      	ldr	r5, [r3, #0]
   14e0a:	b925      	cbnz	r5, 14e16 <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14e0c:	4d0f      	ldr	r5, [pc, #60]	; (14e4c <notify_le_param_updated+0x90>)
   14e0e:	4f10      	ldr	r7, [pc, #64]	; (14e50 <notify_le_param_updated+0x94>)
   14e10:	42bd      	cmp	r5, r7
   14e12:	d30c      	bcc.n	14e2e <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   14e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   14e16:	68ee      	ldr	r6, [r5, #12]
   14e18:	b13e      	cbz	r6, 14e2a <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
   14e1a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   14e1e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   14e22:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   14e26:	4620      	mov	r0, r4
   14e28:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   14e2a:	69ad      	ldr	r5, [r5, #24]
   14e2c:	e7ed      	b.n	14e0a <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
   14e2e:	68ee      	ldr	r6, [r5, #12]
   14e30:	b13e      	cbz	r6, 14e42 <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
   14e32:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   14e36:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   14e3a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   14e3e:	4620      	mov	r0, r4
   14e40:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14e42:	351c      	adds	r5, #28
   14e44:	e7e4      	b.n	14e10 <notify_le_param_updated+0x54>
   14e46:	bf00      	nop
   14e48:	2000248c 	.word	0x2000248c
   14e4c:	000251e0 	.word	0x000251e0
   14e50:	000251fc 	.word	0x000251fc

00014e54 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   14e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14e58:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   14e5a:	4608      	mov	r0, r1
{
   14e5c:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   14e5e:	f00e fa58 	bl	23312 <bt_le_conn_params_valid>
   14e62:	4605      	mov	r5, r0
   14e64:	b918      	cbnz	r0, 14e6e <le_param_req+0x1a>
		return false;
   14e66:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   14e68:	4628      	mov	r0, r5
   14e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   14e6e:	4b13      	ldr	r3, [pc, #76]	; (14ebc <le_param_req+0x68>)
   14e70:	681e      	ldr	r6, [r3, #0]
   14e72:	b946      	cbnz	r6, 14e86 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14e74:	4e12      	ldr	r6, [pc, #72]	; (14ec0 <le_param_req+0x6c>)
   14e76:	f8df 804c 	ldr.w	r8, [pc, #76]	; 14ec4 <le_param_req+0x70>
   14e7a:	4546      	cmp	r6, r8
   14e7c:	d2f4      	bcs.n	14e68 <le_param_req+0x14>
		if (!cb->le_param_req) {
   14e7e:	68b3      	ldr	r3, [r6, #8]
   14e80:	b983      	cbnz	r3, 14ea4 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14e82:	361c      	adds	r6, #28
   14e84:	e7f9      	b.n	14e7a <le_param_req+0x26>
		if (!cb->le_param_req) {
   14e86:	68b3      	ldr	r3, [r6, #8]
   14e88:	b90b      	cbnz	r3, 14e8e <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   14e8a:	69b6      	ldr	r6, [r6, #24]
   14e8c:	e7f1      	b.n	14e72 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   14e8e:	4621      	mov	r1, r4
   14e90:	4638      	mov	r0, r7
   14e92:	4798      	blx	r3
   14e94:	2800      	cmp	r0, #0
   14e96:	d0e6      	beq.n	14e66 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   14e98:	4620      	mov	r0, r4
   14e9a:	f00e fa3a 	bl	23312 <bt_le_conn_params_valid>
   14e9e:	2800      	cmp	r0, #0
   14ea0:	d1f3      	bne.n	14e8a <le_param_req+0x36>
   14ea2:	e7e0      	b.n	14e66 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   14ea4:	4621      	mov	r1, r4
   14ea6:	4638      	mov	r0, r7
   14ea8:	4798      	blx	r3
   14eaa:	2800      	cmp	r0, #0
   14eac:	d0db      	beq.n	14e66 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   14eae:	4620      	mov	r0, r4
   14eb0:	f00e fa2f 	bl	23312 <bt_le_conn_params_valid>
   14eb4:	2800      	cmp	r0, #0
   14eb6:	d1e4      	bne.n	14e82 <le_param_req+0x2e>
   14eb8:	e7d5      	b.n	14e66 <le_param_req+0x12>
   14eba:	bf00      	nop
   14ebc:	2000248c 	.word	0x2000248c
   14ec0:	000251e0 	.word	0x000251e0
   14ec4:	000251fc 	.word	0x000251fc

00014ec8 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   14ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   14ecc:	78c3      	ldrb	r3, [r0, #3]
{
   14ece:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   14ed0:	b973      	cbnz	r3, 14ef0 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
   14ed2:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   14ed6:	4b10      	ldr	r3, [pc, #64]	; (14f18 <bt_conn_identity_resolved+0x50>)
   14ed8:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   14eda:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
   14ede:	b955      	cbnz	r5, 14ef6 <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14ee0:	4d0e      	ldr	r5, [pc, #56]	; (14f1c <bt_conn_identity_resolved+0x54>)
   14ee2:	4f0f      	ldr	r7, [pc, #60]	; (14f20 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   14ee4:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14ee8:	42bd      	cmp	r5, r7
   14eea:	d30c      	bcc.n	14f06 <bt_conn_identity_resolved+0x3e>
		}
	}
}
   14eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
   14ef0:	f100 068f 	add.w	r6, r0, #143	; 0x8f
   14ef4:	e7ef      	b.n	14ed6 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   14ef6:	692b      	ldr	r3, [r5, #16]
   14ef8:	b11b      	cbz	r3, 14f02 <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   14efa:	463a      	mov	r2, r7
   14efc:	4631      	mov	r1, r6
   14efe:	4620      	mov	r0, r4
   14f00:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14f02:	69ad      	ldr	r5, [r5, #24]
   14f04:	e7eb      	b.n	14ede <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   14f06:	692b      	ldr	r3, [r5, #16]
   14f08:	b11b      	cbz	r3, 14f12 <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   14f0a:	4642      	mov	r2, r8
   14f0c:	4631      	mov	r1, r6
   14f0e:	4620      	mov	r0, r4
   14f10:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14f12:	351c      	adds	r5, #28
   14f14:	e7e8      	b.n	14ee8 <bt_conn_identity_resolved+0x20>
   14f16:	bf00      	nop
   14f18:	2000248c 	.word	0x2000248c
   14f1c:	000251e0 	.word	0x000251e0
   14f20:	000251fc 	.word	0x000251fc

00014f24 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   14f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   14f26:	7a43      	ldrb	r3, [r0, #9]
   14f28:	7283      	strb	r3, [r0, #10]
{
   14f2a:	4604      	mov	r4, r0
   14f2c:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   14f2e:	f00e fb76 	bl	2361e <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
   14f32:	4b0c      	ldr	r3, [pc, #48]	; (14f64 <bt_conn_security_changed+0x40>)
   14f34:	681d      	ldr	r5, [r3, #0]
   14f36:	b925      	cbnz	r5, 14f42 <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14f38:	4d0b      	ldr	r5, [pc, #44]	; (14f68 <bt_conn_security_changed+0x44>)
   14f3a:	4f0c      	ldr	r7, [pc, #48]	; (14f6c <bt_conn_security_changed+0x48>)
   14f3c:	42bd      	cmp	r5, r7
   14f3e:	d308      	bcc.n	14f52 <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   14f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
   14f42:	696b      	ldr	r3, [r5, #20]
   14f44:	b11b      	cbz	r3, 14f4e <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
   14f46:	7a61      	ldrb	r1, [r4, #9]
   14f48:	4632      	mov	r2, r6
   14f4a:	4620      	mov	r0, r4
   14f4c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   14f4e:	69ad      	ldr	r5, [r5, #24]
   14f50:	e7f1      	b.n	14f36 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   14f52:	696b      	ldr	r3, [r5, #20]
   14f54:	b11b      	cbz	r3, 14f5e <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
   14f56:	7a61      	ldrb	r1, [r4, #9]
   14f58:	4632      	mov	r2, r6
   14f5a:	4620      	mov	r0, r4
   14f5c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   14f5e:	351c      	adds	r5, #28
   14f60:	e7ec      	b.n	14f3c <bt_conn_security_changed+0x18>
   14f62:	bf00      	nop
   14f64:	2000248c 	.word	0x2000248c
   14f68:	000251e0 	.word	0x000251e0
   14f6c:	000251fc 	.word	0x000251fc

00014f70 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   14f70:	b570      	push	{r4, r5, r6, lr}
   14f72:	4606      	mov	r6, r0
   14f74:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   14f76:	480a      	ldr	r0, [pc, #40]	; (14fa0 <bt_conn_add_le+0x30>)
   14f78:	2101      	movs	r1, #1
   14f7a:	f7ff fc93 	bl	148a4 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   14f7e:	4604      	mov	r4, r0
   14f80:	b160      	cbz	r0, 14f9c <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   14f82:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   14f84:	2207      	movs	r2, #7
   14f86:	4629      	mov	r1, r5
   14f88:	3088      	adds	r0, #136	; 0x88
   14f8a:	f00c ffe2 	bl	21f52 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   14f8e:	2301      	movs	r3, #1
   14f90:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   14f92:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   14f94:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   14f96:	4b03      	ldr	r3, [pc, #12]	; (14fa4 <bt_conn_add_le+0x34>)
   14f98:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   14f9c:	4620      	mov	r0, r4
   14f9e:	bd70      	pop	{r4, r5, r6, pc}
   14fa0:	20001620 	.word	0x20001620
   14fa4:	00280018 	.word	0x00280018

00014fa8 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   14fa8:	b570      	push	{r4, r5, r6, lr}
   14faa:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14fac:	480c      	ldr	r0, [pc, #48]	; (14fe0 <bt_conn_lookup_addr_le+0x38>)
{
   14fae:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   14fb0:	f00d fd6a 	bl	22a88 <bt_conn_ref>

		if (!conn) {
   14fb4:	4604      	mov	r4, r0
   14fb6:	b128      	cbz	r0, 14fc4 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   14fb8:	7883      	ldrb	r3, [r0, #2]
   14fba:	2b01      	cmp	r3, #1
   14fbc:	d004      	beq.n	14fc8 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   14fbe:	f00d fd7e 	bl	22abe <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   14fc2:	2400      	movs	r4, #0
}
   14fc4:	4620      	mov	r0, r4
   14fc6:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   14fc8:	4629      	mov	r1, r5
   14fca:	4632      	mov	r2, r6
   14fcc:	f00d fe15 	bl	22bfa <bt_conn_is_peer_addr_le>
   14fd0:	4605      	mov	r5, r0
   14fd2:	2800      	cmp	r0, #0
   14fd4:	d1f6      	bne.n	14fc4 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   14fd6:	4620      	mov	r0, r4
   14fd8:	f00d fd71 	bl	22abe <bt_conn_unref>
	return NULL;
   14fdc:	462c      	mov	r4, r5
			continue;
   14fde:	e7f1      	b.n	14fc4 <bt_conn_lookup_addr_le+0x1c>
   14fe0:	20001620 	.word	0x20001620

00014fe4 <bt_conn_exists_le>:
{
   14fe4:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   14fe6:	f7ff ffdf 	bl	14fa8 <bt_conn_lookup_addr_le>
	if (conn) {
   14fea:	4604      	mov	r4, r0
   14fec:	b1a0      	cbz	r0, 15018 <bt_conn_exists_le+0x34>
   14fee:	4b0b      	ldr	r3, [pc, #44]	; (1501c <bt_conn_exists_le+0x38>)
   14ff0:	4a0b      	ldr	r2, [pc, #44]	; (15020 <bt_conn_exists_le+0x3c>)
   14ff2:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
   14ff4:	7b43      	ldrb	r3, [r0, #13]
   14ff6:	480b      	ldr	r0, [pc, #44]	; (15024 <bt_conn_exists_le+0x40>)
   14ff8:	2b08      	cmp	r3, #8
   14ffa:	bf96      	itet	ls
   14ffc:	490a      	ldrls	r1, [pc, #40]	; (15028 <bt_conn_exists_le+0x44>)
   14ffe:	490b      	ldrhi	r1, [pc, #44]	; (1502c <bt_conn_exists_le+0x48>)
   15000:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
   15004:	08d2      	lsrs	r2, r2, #3
   15006:	0192      	lsls	r2, r2, #6
   15008:	f042 0202 	orr.w	r2, r2, #2
   1500c:	f00c fcad 	bl	2196a <log_1>
		bt_conn_unref(conn);
   15010:	4620      	mov	r0, r4
   15012:	f00d fd54 	bl	22abe <bt_conn_unref>
		return true;
   15016:	2001      	movs	r0, #1
}
   15018:	bd10      	pop	{r4, pc}
   1501a:	bf00      	nop
   1501c:	00025224 	.word	0x00025224
   15020:	00025244 	.word	0x00025244
   15024:	000268f8 	.word	0x000268f8
   15028:	00025720 	.word	0x00025720
   1502c:	00026881 	.word	0x00026881

00015030 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   15030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15032:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15034:	480e      	ldr	r0, [pc, #56]	; (15070 <bt_conn_lookup_state_le+0x40>)
{
   15036:	460e      	mov	r6, r1
   15038:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1503a:	f00d fd25 	bl	22a88 <bt_conn_ref>

		if (!conn) {
   1503e:	4604      	mov	r4, r0
   15040:	b1a0      	cbz	r0, 1506c <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   15042:	7883      	ldrb	r3, [r0, #2]
   15044:	2b01      	cmp	r3, #1
   15046:	d003      	beq.n	15050 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   15048:	f00d fd39 	bl	22abe <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1504c:	2400      	movs	r4, #0
			continue;
   1504e:	e00d      	b.n	1506c <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   15050:	b136      	cbz	r6, 15060 <bt_conn_lookup_state_le+0x30>
   15052:	4632      	mov	r2, r6
   15054:	4629      	mov	r1, r5
   15056:	f00d fdd0 	bl	22bfa <bt_conn_is_peer_addr_le>
   1505a:	b908      	cbnz	r0, 15060 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   1505c:	4620      	mov	r0, r4
   1505e:	e7f3      	b.n	15048 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   15060:	7b63      	ldrb	r3, [r4, #13]
   15062:	42bb      	cmp	r3, r7
   15064:	d1fa      	bne.n	1505c <bt_conn_lookup_state_le+0x2c>
   15066:	7a23      	ldrb	r3, [r4, #8]
   15068:	42ab      	cmp	r3, r5
   1506a:	d1f7      	bne.n	1505c <bt_conn_lookup_state_le+0x2c>
}
   1506c:	4620      	mov	r0, r4
   1506e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15070:	20001620 	.word	0x20001620

00015074 <send_conn_le_param_update>:
{
   15074:	b538      	push	{r3, r4, r5, lr}
   15076:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   15078:	4608      	mov	r0, r1
{
   1507a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1507c:	f00e f949 	bl	23312 <bt_le_conn_params_valid>
   15080:	b348      	cbz	r0, 150d6 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   15082:	4b16      	ldr	r3, [pc, #88]	; (150dc <send_conn_le_param_update+0x68>)
   15084:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   15088:	0799      	lsls	r1, r3, #30
   1508a:	d407      	bmi.n	1509c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1508c:	78e3      	ldrb	r3, [r4, #3]
   1508e:	b183      	cbz	r3, 150b2 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   15090:	4629      	mov	r1, r5
   15092:	4620      	mov	r0, r4
}
   15094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   15098:	f003 bc2c 	b.w	188f4 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1509c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   150a0:	079a      	lsls	r2, r3, #30
   150a2:	d5f3      	bpl.n	1508c <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   150a4:	f3bf 8f5b 	dmb	ish
   150a8:	6863      	ldr	r3, [r4, #4]
   150aa:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   150ae:	055b      	lsls	r3, r3, #21
   150b0:	d4ec      	bmi.n	1508c <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   150b2:	4629      	mov	r1, r5
   150b4:	4620      	mov	r0, r4
   150b6:	f00d fdc2 	bl	22c3e <bt_conn_le_conn_update>
		if (rc == 0) {
   150ba:	b958      	cbnz	r0, 150d4 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   150bc:	882b      	ldrh	r3, [r5, #0]
   150be:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   150c2:	886b      	ldrh	r3, [r5, #2]
   150c4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   150c8:	88ab      	ldrh	r3, [r5, #4]
   150ca:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   150ce:	88eb      	ldrh	r3, [r5, #6]
   150d0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   150d4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   150d6:	f06f 0015 	mvn.w	r0, #21
   150da:	e7fb      	b.n	150d4 <send_conn_le_param_update+0x60>
   150dc:	200002a8 	.word	0x200002a8

000150e0 <deferred_work>:
{
   150e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   150e2:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
   150e6:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   150e8:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   150ec:	b9f3      	cbnz	r3, 1512c <deferred_work+0x4c>
		bt_l2cap_disconnected(conn);
   150ee:	4628      	mov	r0, r5
   150f0:	f00e fa7f 	bl	235f2 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   150f4:	4b25      	ldr	r3, [pc, #148]	; (1518c <deferred_work+0xac>)
   150f6:	681e      	ldr	r6, [r3, #0]
   150f8:	b946      	cbnz	r6, 1510c <deferred_work+0x2c>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   150fa:	4e25      	ldr	r6, [pc, #148]	; (15190 <deferred_work+0xb0>)
   150fc:	4f25      	ldr	r7, [pc, #148]	; (15194 <deferred_work+0xb4>)
   150fe:	42be      	cmp	r6, r7
   15100:	d30c      	bcc.n	1511c <deferred_work+0x3c>
		bt_conn_unref(conn);
   15102:	4628      	mov	r0, r5
   15104:	f00d fcdb 	bl	22abe <bt_conn_unref>
}
   15108:	b003      	add	sp, #12
   1510a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (cb->disconnected) {
   1510c:	6873      	ldr	r3, [r6, #4]
   1510e:	b11b      	cbz	r3, 15118 <deferred_work+0x38>
			cb->disconnected(conn, conn->err);
   15110:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   15114:	4628      	mov	r0, r5
   15116:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15118:	69b6      	ldr	r6, [r6, #24]
   1511a:	e7ed      	b.n	150f8 <deferred_work+0x18>
		if (cb->disconnected) {
   1511c:	6873      	ldr	r3, [r6, #4]
   1511e:	b11b      	cbz	r3, 15128 <deferred_work+0x48>
			cb->disconnected(conn, conn->err);
   15120:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
   15124:	4628      	mov	r0, r5
   15126:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15128:	361c      	adds	r6, #28
   1512a:	e7e8      	b.n	150fe <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
   1512c:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   15130:	2b01      	cmp	r3, #1
   15132:	d1e9      	bne.n	15108 <deferred_work+0x28>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15134:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   15138:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
   1513c:	e856 3f00 	ldrex	r3, [r6]
   15140:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   15144:	e846 2100 	strex	r1, r2, [r6]
   15148:	2900      	cmp	r1, #0
   1514a:	d1f7      	bne.n	1513c <deferred_work+0x5c>
   1514c:	f3bf 8f5b 	dmb	ish
   15150:	059b      	lsls	r3, r3, #22
   15152:	d514      	bpl.n	1517e <deferred_work+0x9e>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   15154:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   15156:	9300      	str	r3, [sp, #0]
   15158:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1515a:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   1515c:	4669      	mov	r1, sp
   1515e:	4628      	mov	r0, r5
   15160:	f7ff ff88 	bl	15074 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15164:	f3bf 8f5b 	dmb	ish
   15168:	e856 3f00 	ldrex	r3, [r6]
   1516c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   15170:	e846 3200 	strex	r2, r3, [r6]
   15174:	2a00      	cmp	r2, #0
   15176:	d1f7      	bne.n	15168 <deferred_work+0x88>
   15178:	f3bf 8f5b 	dmb	ish
   1517c:	e7c4      	b.n	15108 <deferred_work+0x28>
		param = BT_LE_CONN_PARAM(
   1517e:	4a06      	ldr	r2, [pc, #24]	; (15198 <deferred_work+0xb8>)
   15180:	6810      	ldr	r0, [r2, #0]
   15182:	6851      	ldr	r1, [r2, #4]
   15184:	466b      	mov	r3, sp
   15186:	c303      	stmia	r3!, {r0, r1}
   15188:	e7e8      	b.n	1515c <deferred_work+0x7c>
   1518a:	bf00      	nop
   1518c:	2000248c 	.word	0x2000248c
   15190:	000251e0 	.word	0x000251e0
   15194:	000251fc 	.word	0x000251fc
   15198:	000253b8 	.word	0x000253b8

0001519c <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1519c:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1519e:	4801      	ldr	r0, [pc, #4]	; (151a4 <bt_conn_create_frag_timeout+0x8>)
   151a0:	f7ff bde8 	b.w	14d74 <bt_conn_create_pdu_timeout>
   151a4:	200008b4 	.word	0x200008b4

000151a8 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   151a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   151ac:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   151ae:	f04f 33ff 	mov.w	r3, #4294967295
   151b2:	f04f 32ff 	mov.w	r2, #4294967295
   151b6:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   151b8:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   151ba:	f7ff ffef 	bl	1519c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   151be:	7833      	ldrb	r3, [r6, #0]
   151c0:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   151c2:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   151c4:	f04f 0600 	mov.w	r6, #0
   151c8:	d005      	beq.n	151d6 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   151ca:	f005 f89b 	bl	1a304 <net_buf_unref>
		return NULL;
   151ce:	4635      	mov	r5, r6
}
   151d0:	4628      	mov	r0, r5
   151d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   151d6:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   151d8:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   151dc:	4e0c      	ldr	r6, [pc, #48]	; (15210 <create_frag.isra.0+0x68>)
   151de:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   151e0:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   151e4:	f00e ff1e 	bl	24024 <net_buf_simple_tailroom>
   151e8:	4580      	cmp	r8, r0
   151ea:	d20c      	bcs.n	15206 <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   151ec:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   151f0:	f854 1f08 	ldr.w	r1, [r4, #8]!
   151f4:	4632      	mov	r2, r6
   151f6:	4638      	mov	r0, r7
   151f8:	f00e fedf 	bl	23fba <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   151fc:	4631      	mov	r1, r6
   151fe:	4620      	mov	r0, r4
   15200:	f00e fef4 	bl	23fec <net_buf_simple_pull>
   15204:	e7e4      	b.n	151d0 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   15206:	4638      	mov	r0, r7
   15208:	f00e ff0c 	bl	24024 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1520c:	b286      	uxth	r6, r0
   1520e:	e7ef      	b.n	151f0 <create_frag.isra.0+0x48>
   15210:	200002a8 	.word	0x200002a8

00015214 <bt_conn_process_tx>:
{
   15214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   15216:	7b43      	ldrb	r3, [r0, #13]
{
   15218:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1521a:	b993      	cbnz	r3, 15242 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1521c:	f3bf 8f5b 	dmb	ish
   15220:	1d03      	adds	r3, r0, #4
   15222:	e853 2f00 	ldrex	r2, [r3]
   15226:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   1522a:	e843 1400 	strex	r4, r1, [r3]
   1522e:	2c00      	cmp	r4, #0
   15230:	d1f7      	bne.n	15222 <bt_conn_process_tx+0xe>
   15232:	f3bf 8f5b 	dmb	ish
   15236:	0653      	lsls	r3, r2, #25
   15238:	d503      	bpl.n	15242 <bt_conn_process_tx+0x2e>
}
   1523a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   1523e:	f00d bc05 	b.w	22a4c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   15242:	2200      	movs	r2, #0
   15244:	2300      	movs	r3, #0
   15246:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1524a:	f00e fe5f 	bl	23f0c <net_buf_get>
	BT_ASSERT(buf);
   1524e:	4604      	mov	r4, r0
   15250:	b960      	cbnz	r0, 1526c <bt_conn_process_tx+0x58>
   15252:	4a20      	ldr	r2, [pc, #128]	; (152d4 <bt_conn_process_tx+0xc0>)
   15254:	4920      	ldr	r1, [pc, #128]	; (152d8 <bt_conn_process_tx+0xc4>)
   15256:	4821      	ldr	r0, [pc, #132]	; (152dc <bt_conn_process_tx+0xc8>)
   15258:	f240 23df 	movw	r3, #735	; 0x2df
   1525c:	f00c fdce 	bl	21dfc <printk>
   15260:	4040      	eors	r0, r0
   15262:	f380 8811 	msr	BASEPRI, r0
   15266:	f04f 0003 	mov.w	r0, #3
   1526a:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   1526c:	4f1c      	ldr	r7, [pc, #112]	; (152e0 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   1526e:	89a1      	ldrh	r1, [r4, #12]
   15270:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
   15274:	4291      	cmp	r1, r2
   15276:	d807      	bhi.n	15288 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   15278:	2300      	movs	r3, #0
   1527a:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   1527c:	4621      	mov	r1, r4
   1527e:	4628      	mov	r0, r5
   15280:	f7ff fa70 	bl	14764 <send_frag>
	if (!send_buf(conn, buf)) {
   15284:	b140      	cbz	r0, 15298 <bt_conn_process_tx+0x84>
}
   15286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   15288:	f105 060d 	add.w	r6, r5, #13
   1528c:	4621      	mov	r1, r4
   1528e:	4630      	mov	r0, r6
   15290:	f7ff ff8a 	bl	151a8 <create_frag.isra.0>
	if (!frag) {
   15294:	4601      	mov	r1, r0
   15296:	b920      	cbnz	r0, 152a2 <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   15298:	4620      	mov	r0, r4
}
   1529a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   1529e:	f005 b831 	b.w	1a304 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   152a2:	2301      	movs	r3, #1
   152a4:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   152a6:	4628      	mov	r0, r5
   152a8:	f7ff fa5c 	bl	14764 <send_frag>
   152ac:	2800      	cmp	r0, #0
   152ae:	d0f3      	beq.n	15298 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   152b0:	89a2      	ldrh	r2, [r4, #12]
   152b2:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
   152b6:	429a      	cmp	r2, r3
   152b8:	d802      	bhi.n	152c0 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   152ba:	2300      	movs	r3, #0
   152bc:	2203      	movs	r2, #3
   152be:	e7dd      	b.n	1527c <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   152c0:	4621      	mov	r1, r4
   152c2:	4630      	mov	r0, r6
   152c4:	f7ff ff70 	bl	151a8 <create_frag.isra.0>
		if (!frag) {
   152c8:	4601      	mov	r1, r0
   152ca:	2800      	cmp	r0, #0
   152cc:	d0e4      	beq.n	15298 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   152ce:	2301      	movs	r3, #1
   152d0:	461a      	mov	r2, r3
   152d2:	e7e8      	b.n	152a6 <bt_conn_process_tx+0x92>
   152d4:	0002691b 	.word	0x0002691b
   152d8:	0002676d 	.word	0x0002676d
   152dc:	0002694b 	.word	0x0002694b
   152e0:	200002a8 	.word	0x200002a8

000152e4 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   152e4:	4b0c      	ldr	r3, [pc, #48]	; (15318 <bt_conn_auth_cb_register+0x34>)
   152e6:	b908      	cbnz	r0, 152ec <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
   152e8:	6018      	str	r0, [r3, #0]
		return 0;
   152ea:	4770      	bx	lr
	}

	if (bt_auth) {
   152ec:	681a      	ldr	r2, [r3, #0]
   152ee:	b962      	cbnz	r2, 1530a <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   152f0:	6902      	ldr	r2, [r0, #16]
   152f2:	b93a      	cbnz	r2, 15304 <bt_conn_auth_cb_register+0x20>
   152f4:	6802      	ldr	r2, [r0, #0]
   152f6:	b95a      	cbnz	r2, 15310 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   152f8:	6842      	ldr	r2, [r0, #4]
   152fa:	b94a      	cbnz	r2, 15310 <bt_conn_auth_cb_register+0x2c>
   152fc:	6882      	ldr	r2, [r0, #8]
   152fe:	b93a      	cbnz	r2, 15310 <bt_conn_auth_cb_register+0x2c>
   15300:	6942      	ldr	r2, [r0, #20]
   15302:	b92a      	cbnz	r2, 15310 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   15304:	6018      	str	r0, [r3, #0]
	return 0;
   15306:	2000      	movs	r0, #0
   15308:	4770      	bx	lr
		return -EALREADY;
   1530a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1530e:	4770      	bx	lr
		return -EINVAL;
   15310:	f06f 0015 	mvn.w	r0, #21
}
   15314:	4770      	bx	lr
   15316:	bf00      	nop
   15318:	20002488 	.word	0x20002488

0001531c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1531c:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1531e:	490b      	ldr	r1, [pc, #44]	; (1534c <bt_conn_init+0x30>)
   15320:	480b      	ldr	r0, [pc, #44]	; (15350 <bt_conn_init+0x34>)
   15322:	f00f faea 	bl	248fa <k_queue_append>
   15326:	490b      	ldr	r1, [pc, #44]	; (15354 <bt_conn_init+0x38>)
   15328:	4809      	ldr	r0, [pc, #36]	; (15350 <bt_conn_init+0x34>)
   1532a:	f00f fae6 	bl	248fa <k_queue_append>
   1532e:	490a      	ldr	r1, [pc, #40]	; (15358 <bt_conn_init+0x3c>)
   15330:	4807      	ldr	r0, [pc, #28]	; (15350 <bt_conn_init+0x34>)
   15332:	f00f fae2 	bl	248fa <k_queue_append>
	}

	bt_att_init();
   15336:	f00d fab2 	bl	2289e <bt_att_init>

	err = bt_smp_init();
   1533a:	f004 fed3 	bl	1a0e4 <bt_smp_init>
	if (err) {
   1533e:	4604      	mov	r4, r0
   15340:	b908      	cbnz	r0, 15346 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   15342:	f00e f9c2 	bl	236ca <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   15346:	4620      	mov	r0, r4
   15348:	bd10      	pop	{r4, pc}
   1534a:	bf00      	nop
   1534c:	20002490 	.word	0x20002490
   15350:	2000084c 	.word	0x2000084c
   15354:	200024a0 	.word	0x200024a0
   15358:	200024b0 	.word	0x200024b0

0001535c <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   1535c:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   1535e:	4904      	ldr	r1, [pc, #16]	; (15370 <bt_pub_key_is_debug+0x14>)
   15360:	2240      	movs	r2, #64	; 0x40
   15362:	f00c fdcf 	bl	21f04 <memcmp>
}
   15366:	fab0 f080 	clz	r0, r0
   1536a:	0940      	lsrs	r0, r0, #5
   1536c:	bd08      	pop	{r3, pc}
   1536e:	bf00      	nop
   15370:	00026a53 	.word	0x00026a53

00015374 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   15374:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   15376:	4b44      	ldr	r3, [pc, #272]	; (15488 <bt_pub_key_gen+0x114>)
   15378:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1537c:	f003 0306 	and.w	r3, r3, #6
   15380:	2b06      	cmp	r3, #6
   15382:	d00d      	beq.n	153a0 <bt_pub_key_gen+0x2c>
   15384:	4b41      	ldr	r3, [pc, #260]	; (1548c <bt_pub_key_gen+0x118>)
   15386:	4942      	ldr	r1, [pc, #264]	; (15490 <bt_pub_key_gen+0x11c>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
   15388:	4842      	ldr	r0, [pc, #264]	; (15494 <bt_pub_key_gen+0x120>)
   1538a:	1ac9      	subs	r1, r1, r3
   1538c:	08c9      	lsrs	r1, r1, #3
   1538e:	0189      	lsls	r1, r1, #6
   15390:	f041 0102 	orr.w	r1, r1, #2
   15394:	f00c fadc 	bl	21950 <log_0>
		return -ENOTSUP;
   15398:	f06f 0685 	mvn.w	r6, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   1539c:	4630      	mov	r0, r6
   1539e:	bd70      	pop	{r4, r5, r6, pc}
	if (!new_cb) {
   153a0:	2800      	cmp	r0, #0
   153a2:	d06d      	beq.n	15480 <bt_pub_key_gen+0x10c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   153a4:	4d3c      	ldr	r5, [pc, #240]	; (15498 <bt_pub_key_gen+0x124>)
   153a6:	682a      	ldr	r2, [r5, #0]
   153a8:	b10a      	cbz	r2, 153ae <bt_pub_key_gen+0x3a>
   153aa:	1f13      	subs	r3, r2, #4
   153ac:	b9bb      	cbnz	r3, 153de <bt_pub_key_gen+0x6a>
	parent->next = child;
   153ae:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   153b0:	686a      	ldr	r2, [r5, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   153b2:	1d03      	adds	r3, r0, #4
	list->head = node;
   153b4:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   153b6:	b902      	cbnz	r2, 153ba <bt_pub_key_gen+0x46>
	list->tail = node;
   153b8:	606b      	str	r3, [r5, #4]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   153ba:	4c38      	ldr	r4, [pc, #224]	; (1549c <bt_pub_key_gen+0x128>)
   153bc:	f3bf 8f5b 	dmb	ish
   153c0:	e854 2f00 	ldrex	r2, [r4]
   153c4:	f042 0310 	orr.w	r3, r2, #16
   153c8:	e844 3100 	strex	r1, r3, [r4]
   153cc:	2900      	cmp	r1, #0
   153ce:	d1f7      	bne.n	153c0 <bt_pub_key_gen+0x4c>
   153d0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   153d4:	f012 0210 	ands.w	r2, r2, #16
   153d8:	d017      	beq.n	1540a <bt_pub_key_gen+0x96>
		return 0;
   153da:	2600      	movs	r6, #0
   153dc:	e7de      	b.n	1539c <bt_pub_key_gen+0x28>
		if (cb == new_cb) {
   153de:	4298      	cmp	r0, r3
   153e0:	d10c      	bne.n	153fc <bt_pub_key_gen+0x88>
   153e2:	4b2a      	ldr	r3, [pc, #168]	; (1548c <bt_pub_key_gen+0x118>)
   153e4:	492a      	ldr	r1, [pc, #168]	; (15490 <bt_pub_key_gen+0x11c>)
			BT_WARN("Callback already registered");
   153e6:	482e      	ldr	r0, [pc, #184]	; (154a0 <bt_pub_key_gen+0x12c>)
   153e8:	1ac9      	subs	r1, r1, r3
   153ea:	08c9      	lsrs	r1, r1, #3
   153ec:	0189      	lsls	r1, r1, #6
   153ee:	f041 0102 	orr.w	r1, r1, #2
   153f2:	f00c faad 	bl	21950 <log_0>
			return -EALREADY;
   153f6:	f06f 0677 	mvn.w	r6, #119	; 0x77
   153fa:	e7cf      	b.n	1539c <bt_pub_key_gen+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   153fc:	1d19      	adds	r1, r3, #4
   153fe:	d0d6      	beq.n	153ae <bt_pub_key_gen+0x3a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15400:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   15402:	2b00      	cmp	r3, #0
   15404:	d0d3      	beq.n	153ae <bt_pub_key_gen+0x3a>
   15406:	3b04      	subs	r3, #4
   15408:	e7d0      	b.n	153ac <bt_pub_key_gen+0x38>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1540a:	f3bf 8f5b 	dmb	ish
   1540e:	e854 3f00 	ldrex	r3, [r4]
   15412:	f023 0308 	bic.w	r3, r3, #8
   15416:	e844 3100 	strex	r1, r3, [r4]
   1541a:	2900      	cmp	r1, #0
   1541c:	d1f7      	bne.n	1540e <bt_pub_key_gen+0x9a>
   1541e:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   15422:	4611      	mov	r1, r2
   15424:	f242 0025 	movw	r0, #8229	; 0x2025
   15428:	f001 fe44 	bl	170b4 <bt_hci_cmd_send_sync>
	if (err) {
   1542c:	4606      	mov	r6, r0
   1542e:	2800      	cmp	r0, #0
   15430:	d0d3      	beq.n	153da <bt_pub_key_gen+0x66>
   15432:	4b16      	ldr	r3, [pc, #88]	; (1548c <bt_pub_key_gen+0x118>)
   15434:	4916      	ldr	r1, [pc, #88]	; (15490 <bt_pub_key_gen+0x11c>)
		BT_ERR("Sending LE P256 Public Key command failed");
   15436:	481b      	ldr	r0, [pc, #108]	; (154a4 <bt_pub_key_gen+0x130>)
   15438:	1ac9      	subs	r1, r1, r3
   1543a:	08c9      	lsrs	r1, r1, #3
   1543c:	0189      	lsls	r1, r1, #6
   1543e:	f041 0101 	orr.w	r1, r1, #1
   15442:	f00c fa85 	bl	21950 <log_0>
   15446:	f3bf 8f5b 	dmb	ish
   1544a:	e854 3f00 	ldrex	r3, [r4]
   1544e:	f023 0310 	bic.w	r3, r3, #16
   15452:	e844 3200 	strex	r2, r3, [r4]
   15456:	2a00      	cmp	r2, #0
   15458:	d1f7      	bne.n	1544a <bt_pub_key_gen+0xd6>
   1545a:	f3bf 8f5b 	dmb	ish
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1545e:	682c      	ldr	r4, [r5, #0]
   15460:	b91c      	cbnz	r4, 1546a <bt_pub_key_gen+0xf6>
	list->head = NULL;
   15462:	2300      	movs	r3, #0
	list->tail = NULL;
   15464:	e9c5 3300 	strd	r3, r3, [r5]
		return err;
   15468:	e798      	b.n	1539c <bt_pub_key_gen+0x28>
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1546a:	3c04      	subs	r4, #4
   1546c:	2c00      	cmp	r4, #0
   1546e:	d0f8      	beq.n	15462 <bt_pub_key_gen+0xee>
			if (cb->func) {
   15470:	6823      	ldr	r3, [r4, #0]
   15472:	b10b      	cbz	r3, 15478 <bt_pub_key_gen+0x104>
				cb->func(NULL);
   15474:	2000      	movs	r0, #0
   15476:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   15478:	1d23      	adds	r3, r4, #4
   1547a:	d0f2      	beq.n	15462 <bt_pub_key_gen+0xee>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1547c:	6864      	ldr	r4, [r4, #4]
	return node->next;
   1547e:	e7ef      	b.n	15460 <bt_pub_key_gen+0xec>
		return -EINVAL;
   15480:	f06f 0615 	mvn.w	r6, #21
   15484:	e78a      	b.n	1539c <bt_pub_key_gen+0x28>
   15486:	bf00      	nop
   15488:	200002a8 	.word	0x200002a8
   1548c:	00025224 	.word	0x00025224
   15490:	00025254 	.word	0x00025254
   15494:	000269c5 	.word	0x000269c5
   15498:	200024c4 	.word	0x200024c4
   1549c:	20000374 	.word	0x20000374
   154a0:	000269e4 	.word	0x000269e4
   154a4:	00026a00 	.word	0x00026a00

000154a8 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   154a8:	4b05      	ldr	r3, [pc, #20]	; (154c0 <bt_pub_key_get+0x18>)
   154aa:	f3bf 8f5b 	dmb	ish
   154ae:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   154b0:	4804      	ldr	r0, [pc, #16]	; (154c4 <bt_pub_key_get+0x1c>)
   154b2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   154b6:	f013 0f08 	tst.w	r3, #8
}
   154ba:	bf08      	it	eq
   154bc:	2000      	moveq	r0, #0
   154be:	4770      	bx	lr
   154c0:	20000374 	.word	0x20000374
   154c4:	20003101 	.word	0x20003101

000154c8 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   154c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   154ca:	4d25      	ldr	r5, [pc, #148]	; (15560 <bt_dh_key_gen+0x98>)
   154cc:	682b      	ldr	r3, [r5, #0]
   154ce:	428b      	cmp	r3, r1
{
   154d0:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   154d2:	d03f      	beq.n	15554 <bt_dh_key_gen+0x8c>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   154d4:	b11b      	cbz	r3, 154de <bt_dh_key_gen+0x16>
		return -EBUSY;
   154d6:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   154da:	4620      	mov	r0, r4
   154dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   154de:	4b21      	ldr	r3, [pc, #132]	; (15564 <bt_dh_key_gen+0x9c>)
   154e0:	f3bf 8f5b 	dmb	ish
   154e4:	681a      	ldr	r2, [r3, #0]
   154e6:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   154ea:	f3c2 1700 	ubfx	r7, r2, #4, #1
   154ee:	06d2      	lsls	r2, r2, #27
   154f0:	d4f1      	bmi.n	154d6 <bt_dh_key_gen+0xe>
   154f2:	f3bf 8f5b 	dmb	ish
   154f6:	681b      	ldr	r3, [r3, #0]
   154f8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   154fc:	071b      	lsls	r3, r3, #28
   154fe:	d52c      	bpl.n	1555a <bt_dh_key_gen+0x92>
	dh_key_cb = cb;
   15500:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   15502:	f242 0026 	movw	r0, #8230	; 0x2026
   15506:	2140      	movs	r1, #64	; 0x40
   15508:	f001 fc78 	bl	16dfc <bt_hci_cmd_create>
	if (!buf) {
   1550c:	4604      	mov	r4, r0
   1550e:	b1f0      	cbz	r0, 1554e <bt_dh_key_gen+0x86>
	return net_buf_simple_add(&buf->b, len);
   15510:	2140      	movs	r1, #64	; 0x40
   15512:	3008      	adds	r0, #8
   15514:	f00e fd4b 	bl	23fae <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   15518:	2240      	movs	r2, #64	; 0x40
   1551a:	4631      	mov	r1, r6
   1551c:	f00c fd19 	bl	21f52 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   15520:	4621      	mov	r1, r4
   15522:	463a      	mov	r2, r7
   15524:	f242 0026 	movw	r0, #8230	; 0x2026
   15528:	f001 fdc4 	bl	170b4 <bt_hci_cmd_send_sync>
	if (err) {
   1552c:	4604      	mov	r4, r0
   1552e:	2800      	cmp	r0, #0
   15530:	d0d3      	beq.n	154da <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   15532:	2300      	movs	r3, #0
   15534:	602b      	str	r3, [r5, #0]
   15536:	4a0c      	ldr	r2, [pc, #48]	; (15568 <bt_dh_key_gen+0xa0>)
   15538:	4b0c      	ldr	r3, [pc, #48]	; (1556c <bt_dh_key_gen+0xa4>)
		BT_WARN("Failed to generate DHKey (err %d)", err);
   1553a:	480d      	ldr	r0, [pc, #52]	; (15570 <bt_dh_key_gen+0xa8>)
   1553c:	1ad2      	subs	r2, r2, r3
   1553e:	08d2      	lsrs	r2, r2, #3
   15540:	0192      	lsls	r2, r2, #6
   15542:	f042 0202 	orr.w	r2, r2, #2
   15546:	4621      	mov	r1, r4
   15548:	f00c fa0f 	bl	2196a <log_1>
		return err;
   1554c:	e7c5      	b.n	154da <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   1554e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   15552:	e7ee      	b.n	15532 <bt_dh_key_gen+0x6a>
		return -EALREADY;
   15554:	f06f 0477 	mvn.w	r4, #119	; 0x77
   15558:	e7bf      	b.n	154da <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   1555a:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   1555e:	e7bc      	b.n	154da <bt_dh_key_gen+0x12>
   15560:	200024c0 	.word	0x200024c0
   15564:	20000374 	.word	0x20000374
   15568:	00025254 	.word	0x00025254
   1556c:	00025224 	.word	0x00025224
   15570:	00026a2a 	.word	0x00026a2a

00015574 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   15574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15576:	4c1d      	ldr	r4, [pc, #116]	; (155ec <bt_hci_evt_le_pkey_complete+0x78>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   15578:	6886      	ldr	r6, [r0, #8]
   1557a:	f3bf 8f5b 	dmb	ish
   1557e:	e854 3f00 	ldrex	r3, [r4]
   15582:	f023 0310 	bic.w	r3, r3, #16
   15586:	e844 3200 	strex	r2, r3, [r4]
   1558a:	2a00      	cmp	r2, #0
   1558c:	d1f7      	bne.n	1557e <bt_hci_evt_le_pkey_complete+0xa>
   1558e:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   15592:	7833      	ldrb	r3, [r6, #0]
   15594:	b983      	cbnz	r3, 155b8 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   15596:	4816      	ldr	r0, [pc, #88]	; (155f0 <bt_hci_evt_le_pkey_complete+0x7c>)
   15598:	2240      	movs	r2, #64	; 0x40
   1559a:	1c71      	adds	r1, r6, #1
   1559c:	f00c fcd9 	bl	21f52 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   155a0:	f3bf 8f5b 	dmb	ish
   155a4:	e854 3f00 	ldrex	r3, [r4]
   155a8:	f043 0308 	orr.w	r3, r3, #8
   155ac:	e844 3200 	strex	r2, r3, [r4]
   155b0:	2a00      	cmp	r2, #0
   155b2:	d1f7      	bne.n	155a4 <bt_hci_evt_le_pkey_complete+0x30>
   155b4:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   155b8:	4d0e      	ldr	r5, [pc, #56]	; (155f4 <bt_hci_evt_le_pkey_complete+0x80>)
   155ba:	682c      	ldr	r4, [r5, #0]
   155bc:	b91c      	cbnz	r4, 155c6 <bt_hci_evt_le_pkey_complete+0x52>
	list->head = NULL;
   155be:	2300      	movs	r3, #0
	list->tail = NULL;
   155c0:	e9c5 3300 	strd	r3, r3, [r5]
			cb->func(evt->status ? NULL : pub_key);
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   155c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			cb->func(evt->status ? NULL : pub_key);
   155c6:	4f0a      	ldr	r7, [pc, #40]	; (155f0 <bt_hci_evt_le_pkey_complete+0x7c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   155c8:	3c04      	subs	r4, #4
   155ca:	2c00      	cmp	r4, #0
   155cc:	d0f7      	beq.n	155be <bt_hci_evt_le_pkey_complete+0x4a>
		if (cb->func) {
   155ce:	6823      	ldr	r3, [r4, #0]
   155d0:	b12b      	cbz	r3, 155de <bt_hci_evt_le_pkey_complete+0x6a>
			cb->func(evt->status ? NULL : pub_key);
   155d2:	7832      	ldrb	r2, [r6, #0]
   155d4:	2a00      	cmp	r2, #0
   155d6:	bf0c      	ite	eq
   155d8:	4638      	moveq	r0, r7
   155da:	2000      	movne	r0, #0
   155dc:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   155de:	1d23      	adds	r3, r4, #4
   155e0:	d0ed      	beq.n	155be <bt_hci_evt_le_pkey_complete+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   155e2:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   155e4:	2c00      	cmp	r4, #0
   155e6:	d0ea      	beq.n	155be <bt_hci_evt_le_pkey_complete+0x4a>
   155e8:	3c04      	subs	r4, #4
   155ea:	e7ee      	b.n	155ca <bt_hci_evt_le_pkey_complete+0x56>
   155ec:	20000374 	.word	0x20000374
   155f0:	20003101 	.word	0x20003101
   155f4:	200024c4 	.word	0x200024c4

000155f8 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   155f8:	4905      	ldr	r1, [pc, #20]	; (15610 <bt_hci_evt_le_dhkey_complete+0x18>)
   155fa:	680b      	ldr	r3, [r1, #0]
   155fc:	b133      	cbz	r3, 1560c <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   155fe:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   15600:	2000      	movs	r0, #0
   15602:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   15604:	7811      	ldrb	r1, [r2, #0]
   15606:	b901      	cbnz	r1, 1560a <bt_hci_evt_le_dhkey_complete+0x12>
   15608:	1c50      	adds	r0, r2, #1
   1560a:	4718      	bx	r3
	}
}
   1560c:	4770      	bx	lr
   1560e:	bf00      	nop
   15610:	200024c0 	.word	0x200024c0

00015614 <find_sc_cfg>:
	struct k_work_sync sync;
} db_hash;
#endif

static struct gatt_sc_cfg *find_sc_cfg(uint8_t id, bt_addr_le_t *addr)
{
   15614:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("id: %u, addr: %s", id, bt_addr_le_str(addr));

	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
		if (id == sc_cfg[i].id &&
   15616:	4c0e      	ldr	r4, [pc, #56]	; (15650 <find_sc_cfg+0x3c>)
   15618:	7823      	ldrb	r3, [r4, #0]
   1561a:	4283      	cmp	r3, r0
{
   1561c:	4605      	mov	r5, r0
   1561e:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   15620:	d00a      	beq.n	15638 <find_sc_cfg+0x24>
   15622:	7b23      	ldrb	r3, [r4, #12]
   15624:	42ab      	cmp	r3, r5
   15626:	d111      	bne.n	1564c <find_sc_cfg+0x38>
	return memcmp(a, b, sizeof(*a));
   15628:	480a      	ldr	r0, [pc, #40]	; (15654 <find_sc_cfg+0x40>)
   1562a:	2207      	movs	r2, #7
   1562c:	4631      	mov	r1, r6
   1562e:	f00c fc69 	bl	21f04 <memcmp>
   15632:	b958      	cbnz	r0, 1564c <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   15634:	2001      	movs	r0, #1
   15636:	e005      	b.n	15644 <find_sc_cfg+0x30>
   15638:	2207      	movs	r2, #7
   1563a:	1c60      	adds	r0, r4, #1
   1563c:	f00c fc62 	bl	21f04 <memcmp>
		if (id == sc_cfg[i].id &&
   15640:	2800      	cmp	r0, #0
   15642:	d1ee      	bne.n	15622 <find_sc_cfg+0xe>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
			return &sc_cfg[i];
   15644:	230c      	movs	r3, #12
   15646:	fb03 4000 	mla	r0, r3, r0, r4
   1564a:	e000      	b.n	1564e <find_sc_cfg+0x3a>
		}
	}

	return NULL;
   1564c:	2000      	movs	r0, #0
}
   1564e:	bd70      	pop	{r4, r5, r6, pc}
   15650:	20003042 	.word	0x20003042
   15654:	2000304f 	.word	0x2000304f

00015658 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   15658:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1565a:	4c16      	ldr	r4, [pc, #88]	; (156b4 <find_cf_cfg+0x5c>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1565c:	4605      	mov	r5, r0
   1565e:	b140      	cbz	r0, 15672 <find_cf_cfg+0x1a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   15660:	4622      	mov	r2, r4
   15662:	f812 1b01 	ldrb.w	r1, [r2], #1
   15666:	f00d fac8 	bl	22bfa <bt_conn_is_peer_addr_le>
   1566a:	b1c0      	cbz	r0, 1569e <find_cf_cfg+0x46>
			return cfg;
		}
	}

	return NULL;
}
   1566c:	4620      	mov	r0, r4
   1566e:	b003      	add	sp, #12
   15670:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   15672:	9000      	str	r0, [sp, #0]
   15674:	2207      	movs	r2, #7
   15676:	f8cd 0003 	str.w	r0, [sp, #3]
   1567a:	4669      	mov	r1, sp
   1567c:	1c60      	adds	r0, r4, #1
   1567e:	f00c fc41 	bl	21f04 <memcmp>
   15682:	2800      	cmp	r0, #0
   15684:	d0f2      	beq.n	1566c <find_cf_cfg+0x14>
   15686:	2207      	movs	r2, #7
   15688:	4669      	mov	r1, sp
   1568a:	f104 0011 	add.w	r0, r4, #17
   1568e:	9500      	str	r5, [sp, #0]
   15690:	f8cd 5003 	str.w	r5, [sp, #3]
   15694:	f00c fc36 	bl	21f04 <memcmp>
   15698:	b948      	cbnz	r0, 156ae <find_cf_cfg+0x56>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1569a:	3410      	adds	r4, #16
   1569c:	e7e6      	b.n	1566c <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1569e:	7c21      	ldrb	r1, [r4, #16]
   156a0:	f104 0211 	add.w	r2, r4, #17
   156a4:	4628      	mov	r0, r5
   156a6:	f00d faa8 	bl	22bfa <bt_conn_is_peer_addr_le>
   156aa:	2800      	cmp	r0, #0
   156ac:	d1f5      	bne.n	1569a <find_cf_cfg+0x42>
	return NULL;
   156ae:	2400      	movs	r4, #0
   156b0:	e7dc      	b.n	1566c <find_cf_cfg+0x14>
   156b2:	bf00      	nop
   156b4:	200024d4 	.word	0x200024d4

000156b8 <cf_write>:
	return true;
}

static ssize_t cf_write(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			const void *buf, uint16_t len, uint16_t offset, uint8_t flags)
{
   156b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   156bc:	4698      	mov	r8, r3
   156be:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	struct gatt_cf_cfg *cfg;
	const uint8_t *value = buf;

	if (offset > sizeof(cfg->data)) {
   156c2:	2b01      	cmp	r3, #1
{
   156c4:	4606      	mov	r6, r0
   156c6:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   156c8:	d83e      	bhi.n	15748 <cf_write+0x90>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (offset + len > sizeof(cfg->data)) {
   156ca:	4443      	add	r3, r8
   156cc:	2b01      	cmp	r3, #1
   156ce:	4645      	mov	r5, r8
   156d0:	dc3d      	bgt.n	1574e <cf_write+0x96>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	cfg = find_cf_cfg(conn);
   156d2:	f7ff ffc1 	bl	15658 <find_cf_cfg>
	if (!cfg) {
   156d6:	4604      	mov	r4, r0
   156d8:	b990      	cbnz	r0, 15700 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   156da:	f7ff ffbd 	bl	15658 <find_cf_cfg>
	}

	if (!cfg) {
   156de:	4604      	mov	r4, r0
   156e0:	b970      	cbnz	r0, 15700 <cf_write+0x48>
   156e2:	4b1e      	ldr	r3, [pc, #120]	; (1575c <cf_write+0xa4>)
   156e4:	491e      	ldr	r1, [pc, #120]	; (15760 <cf_write+0xa8>)
		BT_WARN("No space to store Client Supported Features");
   156e6:	481f      	ldr	r0, [pc, #124]	; (15764 <cf_write+0xac>)
   156e8:	1ac9      	subs	r1, r1, r3
   156ea:	08c9      	lsrs	r1, r1, #3
   156ec:	0189      	lsls	r1, r1, #6
   156ee:	f041 0102 	orr.w	r1, r1, #2
   156f2:	f00c f92d 	bl	21950 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   156f6:	f06f 0510 	mvn.w	r5, #16
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
	cfg->id = conn->id;
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);

	return len;
}
   156fa:	4628      	mov	r0, r5
   156fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
   15700:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   15702:	f1b8 0f00 	cmp.w	r8, #0
   15706:	d10d      	bne.n	15724 <cf_write+0x6c>
	memcpy(dst, src, sizeof(*dst));
   15708:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1570c:	2207      	movs	r2, #7
   1570e:	1c60      	adds	r0, r4, #1
   15710:	f00c fc1f 	bl	21f52 <memcpy>
	cfg->id = conn->id;
   15714:	4620      	mov	r0, r4
   15716:	7a33      	ldrb	r3, [r6, #8]
   15718:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1571c:	2100      	movs	r1, #0
   1571e:	f00d fb4f 	bl	22dc0 <atomic_set_bit>
	return len;
   15722:	e7ea      	b.n	156fa <cf_write+0x42>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   15724:	7a20      	ldrb	r0, [r4, #8]
   15726:	fa20 f301 	lsr.w	r3, r0, r1
   1572a:	07da      	lsls	r2, r3, #31
   1572c:	d503      	bpl.n	15736 <cf_write+0x7e>
		    !(value[i / 8] & BIT(i % 8))) {
   1572e:	783b      	ldrb	r3, [r7, #0]
   15730:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   15732:	07db      	lsls	r3, r3, #31
   15734:	d50e      	bpl.n	15754 <cf_write+0x9c>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   15736:	3101      	adds	r1, #1
   15738:	2903      	cmp	r1, #3
   1573a:	d1e2      	bne.n	15702 <cf_write+0x4a>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1573c:	783b      	ldrb	r3, [r7, #0]
   1573e:	f003 0307 	and.w	r3, r3, #7
   15742:	4318      	orrs	r0, r3
   15744:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   15746:	e7df      	b.n	15708 <cf_write+0x50>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   15748:	f06f 0506 	mvn.w	r5, #6
   1574c:	e7d5      	b.n	156fa <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1574e:	f06f 050c 	mvn.w	r5, #12
   15752:	e7d2      	b.n	156fa <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   15754:	f06f 0512 	mvn.w	r5, #18
   15758:	e7cf      	b.n	156fa <cf_write+0x42>
   1575a:	bf00      	nop
   1575c:	00025224 	.word	0x00025224
   15760:	0002525c 	.word	0x0002525c
   15764:	00026a93 	.word	0x00026a93

00015768 <sc_indicate_rsp>:
}

#if defined(CONFIG_BT_GATT_SERVICE_CHANGED)
static void sc_indicate_rsp(struct bt_conn *conn,
			    struct bt_gatt_indicate_params *params, uint8_t err)
{
   15768:	b510      	push	{r4, lr}
   1576a:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1576c:	4814      	ldr	r0, [pc, #80]	; (157c0 <sc_indicate_rsp+0x58>)
   1576e:	f3bf 8f5b 	dmb	ish
   15772:	f100 0350 	add.w	r3, r0, #80	; 0x50
   15776:	e853 2f00 	ldrex	r2, [r3]
   1577a:	f022 0202 	bic.w	r2, r2, #2
   1577e:	e843 2100 	strex	r1, r2, [r3]
   15782:	2900      	cmp	r1, #0
   15784:	d1f7      	bne.n	15776 <sc_indicate_rsp+0xe>
   15786:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1578a:	f3bf 8f5b 	dmb	ish
   1578e:	6d03      	ldr	r3, [r0, #80]	; 0x50
   15790:	f3bf 8f5b 	dmb	ish
	BT_DBG("err 0x%02x", err);

	atomic_clear_bit(gatt_sc.flags, SC_INDICATE_PENDING);

	/* Check if there is new change in the meantime */
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   15794:	07da      	lsls	r2, r3, #31
   15796:	d504      	bpl.n	157a2 <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
   15798:	2200      	movs	r2, #0
   1579a:	2300      	movs	r3, #0
   1579c:	3020      	adds	r0, #32
   1579e:	f008 f84f 	bl	1d840 <k_work_reschedule>
	/* BLUETOOTH CORE SPECIFICATION Version 5.1 | Vol 3, Part G page 2347:
	 * 2.5.2.1 Robust Caching
	 * A connected client becomes change-aware when...
	 * The client receives and confirms a Service Changed indication.
	 */
	cfg = find_cf_cfg(conn);
   157a2:	4620      	mov	r0, r4
   157a4:	f7ff ff58 	bl	15658 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   157a8:	b140      	cbz	r0, 157bc <sc_indicate_rsp+0x54>
   157aa:	7a03      	ldrb	r3, [r0, #8]
   157ac:	07db      	lsls	r3, r3, #31
   157ae:	d505      	bpl.n	157bc <sc_indicate_rsp+0x54>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
		BT_DBG("%s change-aware", bt_addr_le_str(&cfg->peer));
	}
#endif
}
   157b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   157b4:	2100      	movs	r1, #0
   157b6:	300c      	adds	r0, #12
   157b8:	f00d bb02 	b.w	22dc0 <atomic_set_bit>
}
   157bc:	bd10      	pop	{r4, pc}
   157be:	bf00      	nop
   157c0:	20001748 	.word	0x20001748

000157c4 <read_ppcp>:
{
   157c4:	b513      	push	{r0, r1, r4, lr}
   157c6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   157ca:	4c0b      	ldr	r4, [pc, #44]	; (157f8 <read_ppcp+0x34>)
{
   157cc:	4610      	mov	r0, r2
			  void *buf, uint16_t buf_len, uint16_t offset,
			  const void *value, uint16_t value_len)
{
	uint16_t len;

	if (offset > value_len) {
   157ce:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   157d0:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   157d4:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   157d8:	d80b      	bhi.n	157f2 <read_ppcp+0x2e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	len = MIN(buf_len, value_len - offset);
   157da:	f1c1 0408 	rsb	r4, r1, #8
   157de:	429c      	cmp	r4, r3
   157e0:	bfa8      	it	ge
   157e2:	461c      	movge	r4, r3

	BT_DBG("handle 0x%04x offset %u length %u", attr->handle, offset,
	       len);

	memcpy(buf, (uint8_t *)value + offset, len);
   157e4:	4622      	mov	r2, r4
   157e6:	4469      	add	r1, sp
   157e8:	f00c fbb3 	bl	21f52 <memcpy>
}
   157ec:	4620      	mov	r0, r4
   157ee:	b002      	add	sp, #8
   157f0:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   157f2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   157f6:	e7f9      	b.n	157ec <read_ppcp+0x28>
   157f8:	00280018 	.word	0x00280018

000157fc <sc_save>:
{
   157fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15800:	4680      	mov	r8, r0
   15802:	460f      	mov	r7, r1
   15804:	4616      	mov	r6, r2
   15806:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   15808:	f7ff ff04 	bl	15614 <find_sc_cfg>
	if (!cfg) {
   1580c:	4604      	mov	r4, r0
   1580e:	b9d0      	cbnz	r0, 15846 <sc_save+0x4a>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   15810:	4669      	mov	r1, sp
   15812:	9000      	str	r0, [sp, #0]
   15814:	f8cd 0003 	str.w	r0, [sp, #3]
   15818:	f7ff fefc 	bl	15614 <find_sc_cfg>
		if (!cfg) {
   1581c:	4604      	mov	r4, r0
   1581e:	b960      	cbnz	r0, 1583a <sc_save+0x3e>
   15820:	4910      	ldr	r1, [pc, #64]	; (15864 <sc_save+0x68>)
   15822:	4b11      	ldr	r3, [pc, #68]	; (15868 <sc_save+0x6c>)
			BT_ERR("unable to save SC: no cfg left");
   15824:	4811      	ldr	r0, [pc, #68]	; (1586c <sc_save+0x70>)
   15826:	1ac9      	subs	r1, r1, r3
   15828:	08c9      	lsrs	r1, r1, #3
   1582a:	0189      	lsls	r1, r1, #6
   1582c:	f041 0101 	orr.w	r1, r1, #1
   15830:	f00c f88e 	bl	21950 <log_0>
}
   15834:	b002      	add	sp, #8
   15836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1583a:	f800 8b01 	strb.w	r8, [r0], #1
   1583e:	2207      	movs	r2, #7
   15840:	4639      	mov	r1, r7
   15842:	f00c fb86 	bl	21f52 <memcpy>
	if (!(cfg->data.start || cfg->data.end)) {
   15846:	8922      	ldrh	r2, [r4, #8]
   15848:	8963      	ldrh	r3, [r4, #10]
   1584a:	b91a      	cbnz	r2, 15854 <sc_save+0x58>
   1584c:	b923      	cbnz	r3, 15858 <sc_save+0x5c>
		cfg->data.start = start;
   1584e:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   15850:	8165      	strh	r5, [r4, #10]
   15852:	e7ef      	b.n	15834 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
   15854:	4296      	cmp	r6, r2
   15856:	d302      	bcc.n	1585e <sc_save+0x62>
   15858:	429d      	cmp	r5, r3
   1585a:	d9eb      	bls.n	15834 <sc_save+0x38>
   1585c:	e7f8      	b.n	15850 <sc_save+0x54>
		*start = new_start;
   1585e:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   15860:	e7fa      	b.n	15858 <sc_save+0x5c>
   15862:	bf00      	nop
   15864:	0002525c 	.word	0x0002525c
   15868:	00025224 	.word	0x00025224
   1586c:	00026abf 	.word	0x00026abf

00015870 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   15870:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15874:	461f      	mov	r7, r3
   15876:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1587a:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1587e:	4606      	mov	r6, r0
   15880:	4688      	mov	r8, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   15882:	2b00      	cmp	r3, #0
   15884:	d153      	bne.n	1592e <bt_gatt_attr_write_ccc+0xbe>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   15886:	1e7b      	subs	r3, r7, #1
   15888:	2b01      	cmp	r3, #1
   1588a:	d853      	bhi.n	15934 <bt_gatt_attr_write_ccc+0xc4>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   1588c:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   1588e:	7815      	ldrb	r5, [r2, #0]
   15890:	bf18      	it	ne
   15892:	7853      	ldrbne	r3, [r2, #1]
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   15894:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   15896:	bf0c      	ite	eq
   15898:	b2ad      	uxtheq	r5, r5
   1589a:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1589e:	f00d fa9d 	bl	22ddc <find_ccc_cfg>
	if (!cfg) {
   158a2:	4604      	mov	r4, r0
   158a4:	b9f0      	cbnz	r0, 158e4 <bt_gatt_attr_write_ccc+0x74>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behavioraly the same as no written CCC.
		 */
		if (!value) {
   158a6:	b91d      	cbnz	r5, 158b0 <bt_gatt_attr_write_ccc+0x40>
			return len;
   158a8:	4638      	mov	r0, r7
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   158aa:	b003      	add	sp, #12
   158ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   158b0:	4649      	mov	r1, r9
   158b2:	f00d fa93 	bl	22ddc <find_ccc_cfg>
		if (!cfg) {
   158b6:	4604      	mov	r4, r0
   158b8:	b960      	cbnz	r0, 158d4 <bt_gatt_attr_write_ccc+0x64>
   158ba:	4b20      	ldr	r3, [pc, #128]	; (1593c <bt_gatt_attr_write_ccc+0xcc>)
   158bc:	4920      	ldr	r1, [pc, #128]	; (15940 <bt_gatt_attr_write_ccc+0xd0>)
			BT_WARN("No space to store CCC cfg");
   158be:	4821      	ldr	r0, [pc, #132]	; (15944 <bt_gatt_attr_write_ccc+0xd4>)
   158c0:	1ac9      	subs	r1, r1, r3
   158c2:	08c9      	lsrs	r1, r1, #3
   158c4:	0189      	lsls	r1, r1, #6
   158c6:	f041 0102 	orr.w	r1, r1, #2
   158ca:	f00c f841 	bl	21950 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   158ce:	f06f 0010 	mvn.w	r0, #16
   158d2:	e7ea      	b.n	158aa <bt_gatt_attr_write_ccc+0x3a>
   158d4:	2207      	movs	r2, #7
   158d6:	f106 0188 	add.w	r1, r6, #136	; 0x88
   158da:	3001      	adds	r0, #1
   158dc:	f00c fb39 	bl	21f52 <memcpy>
		cfg->id = conn->id;
   158e0:	7a33      	ldrb	r3, [r6, #8]
   158e2:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   158e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
   158e8:	b9ab      	cbnz	r3, 15916 <bt_gatt_attr_write_ccc+0xa6>
	if (cfg->value != ccc->value) {
   158ea:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	cfg->value = value;
   158ee:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   158f0:	42ab      	cmp	r3, r5
   158f2:	d003      	beq.n	158fc <bt_gatt_attr_write_ccc+0x8c>
		gatt_ccc_changed(attr, ccc);
   158f4:	4649      	mov	r1, r9
   158f6:	4640      	mov	r0, r8
   158f8:	f00d f9c9 	bl	22c8e <gatt_ccc_changed>
	if (!value) {
   158fc:	2d00      	cmp	r5, #0
   158fe:	d1d3      	bne.n	158a8 <bt_gatt_attr_write_ccc+0x38>
   15900:	2207      	movs	r2, #7
   15902:	4669      	mov	r1, sp
   15904:	1c60      	adds	r0, r4, #1
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   15906:	9500      	str	r5, [sp, #0]
   15908:	f8cd 5003 	str.w	r5, [sp, #3]
   1590c:	f00c fb21 	bl	21f52 <memcpy>
	cfg->id = 0U;
   15910:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   15912:	8125      	strh	r5, [r4, #8]
}
   15914:	e7c8      	b.n	158a8 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   15916:	462a      	mov	r2, r5
   15918:	4641      	mov	r1, r8
   1591a:	4630      	mov	r0, r6
   1591c:	4798      	blx	r3
		if (write < 0) {
   1591e:	2800      	cmp	r0, #0
   15920:	dbc3      	blt.n	158aa <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   15922:	3801      	subs	r0, #1
   15924:	2801      	cmp	r0, #1
   15926:	d9e0      	bls.n	158ea <bt_gatt_attr_write_ccc+0x7a>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   15928:	f06f 000d 	mvn.w	r0, #13
   1592c:	e7bd      	b.n	158aa <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1592e:	f06f 0006 	mvn.w	r0, #6
   15932:	e7ba      	b.n	158aa <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   15934:	f06f 000c 	mvn.w	r0, #12
   15938:	e7b7      	b.n	158aa <bt_gatt_attr_write_ccc+0x3a>
   1593a:	bf00      	nop
   1593c:	00025224 	.word	0x00025224
   15940:	0002525c 	.word	0x0002525c
   15944:	00026ade 	.word	0x00026ade

00015948 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   15948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1594c:	4b2c      	ldr	r3, [pc, #176]	; (15a00 <disconnected_cb+0xb8>)
{
   1594e:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   15950:	6882      	ldr	r2, [r0, #8]
   15952:	429a      	cmp	r2, r3
{
   15954:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   15956:	d12f      	bne.n	159b8 <disconnected_cb+0x70>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   15958:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   1595a:	8aab      	ldrh	r3, [r5, #20]
   1595c:	b363      	cbz	r3, 159b8 <disconnected_cb+0x70>
				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
				if (ccc == &sc_ccc) {
   1595e:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 15a04 <disconnected_cb+0xbc>
   15962:	1c6c      	adds	r4, r5, #1
   15964:	f105 0a15 	add.w	sl, r5, #21
	value_used = false;
   15968:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1596c:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   15970:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   15974:	b19b      	cbz	r3, 1599e <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   15976:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1597a:	4622      	mov	r2, r4
   1597c:	4630      	mov	r0, r6
   1597e:	f00d f93c 	bl	22bfa <bt_conn_is_peer_addr_le>
   15982:	b9e8      	cbnz	r0, 159c0 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   15984:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   15988:	4621      	mov	r1, r4
   1598a:	f7ff fb0d 	bl	14fa8 <bt_conn_lookup_addr_le>
			if (tmp) {
   1598e:	b130      	cbz	r0, 1599e <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
   15990:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
   15992:	2b07      	cmp	r3, #7
   15994:	bf08      	it	eq
   15996:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   1599a:	f00d f890 	bl	22abe <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1599e:	340a      	adds	r4, #10
   159a0:	4554      	cmp	r4, sl
   159a2:	d1e5      	bne.n	15970 <disconnected_cb+0x28>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   159a4:	f1b8 0f00 	cmp.w	r8, #0
   159a8:	d106      	bne.n	159b8 <disconnected_cb+0x70>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   159aa:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   159ac:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   159b0:	b113      	cbz	r3, 159b8 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
   159b2:	4641      	mov	r1, r8
   159b4:	4638      	mov	r0, r7
   159b6:	4798      	blx	r3

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   159b8:	2001      	movs	r0, #1
   159ba:	b003      	add	sp, #12
   159bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   159c0:	7a30      	ldrb	r0, [r6, #8]
   159c2:	4649      	mov	r1, r9
   159c4:	f00d fcc7 	bl	23356 <bt_addr_le_is_bonded>
   159c8:	b998      	cbnz	r0, 159f2 <disconnected_cb+0xaa>
				if (ccc == &sc_ccc) {
   159ca:	455d      	cmp	r5, fp
   159cc:	d102      	bne.n	159d4 <disconnected_cb+0x8c>
					sc_clear(conn);
   159ce:	4630      	mov	r0, r6
   159d0:	f00d fad9 	bl	22f86 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   159d4:	2300      	movs	r3, #0
   159d6:	2207      	movs	r2, #7
   159d8:	4669      	mov	r1, sp
   159da:	4620      	mov	r0, r4
   159dc:	9300      	str	r3, [sp, #0]
   159de:	f8cd 3003 	str.w	r3, [sp, #3]
   159e2:	f00c fab6 	bl	21f52 <memcpy>
	cfg->id = 0U;
   159e6:	2300      	movs	r3, #0
   159e8:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   159ec:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   159f0:	e7d5      	b.n	1599e <disconnected_cb+0x56>
   159f2:	2207      	movs	r2, #7
   159f4:	4649      	mov	r1, r9
   159f6:	4620      	mov	r0, r4
   159f8:	f00c faab 	bl	21f52 <memcpy>
}
   159fc:	e7cf      	b.n	1599e <disconnected_cb+0x56>
   159fe:	bf00      	nop
   15a00:	00015871 	.word	0x00015871
   15a04:	20000548 	.word	0x20000548

00015a08 <bt_gatt_init>:
{
   15a08:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   15a0a:	4b20      	ldr	r3, [pc, #128]	; (15a8c <bt_gatt_init+0x84>)
   15a0c:	f3bf 8f5b 	dmb	ish
   15a10:	2201      	movs	r2, #1
   15a12:	e853 1f00 	ldrex	r1, [r3]
   15a16:	2900      	cmp	r1, #0
   15a18:	d103      	bne.n	15a22 <bt_gatt_init+0x1a>
   15a1a:	e843 2000 	strex	r0, r2, [r3]
   15a1e:	2800      	cmp	r0, #0
   15a20:	d1f7      	bne.n	15a12 <bt_gatt_init+0xa>
   15a22:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   15a26:	d130      	bne.n	15a8a <bt_gatt_init+0x82>
   15a28:	f3bf 8f5b 	dmb	ish
   15a2c:	4b18      	ldr	r3, [pc, #96]	; (15a90 <bt_gatt_init+0x88>)
   15a2e:	e853 1f00 	ldrex	r1, [r3]
   15a32:	2900      	cmp	r1, #0
   15a34:	d103      	bne.n	15a3e <bt_gatt_init+0x36>
   15a36:	e843 2000 	strex	r0, r2, [r3]
   15a3a:	2800      	cmp	r0, #0
   15a3c:	d1f7      	bne.n	15a2e <bt_gatt_init+0x26>
   15a3e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   15a42:	d108      	bne.n	15a56 <bt_gatt_init+0x4e>
   15a44:	4a13      	ldr	r2, [pc, #76]	; (15a94 <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   15a46:	4914      	ldr	r1, [pc, #80]	; (15a98 <bt_gatt_init+0x90>)
   15a48:	8813      	ldrh	r3, [r2, #0]
   15a4a:	4c14      	ldr	r4, [pc, #80]	; (15a9c <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
   15a4c:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   15a4e:	42a1      	cmp	r1, r4
   15a50:	d315      	bcc.n	15a7e <bt_gatt_init+0x76>
   15a52:	b100      	cbz	r0, 15a56 <bt_gatt_init+0x4e>
   15a54:	8013      	strh	r3, [r2, #0]
	list->head = NULL;
   15a56:	4b12      	ldr	r3, [pc, #72]	; (15aa0 <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   15a58:	4912      	ldr	r1, [pc, #72]	; (15aa4 <bt_gatt_init+0x9c>)
   15a5a:	4813      	ldr	r0, [pc, #76]	; (15aa8 <bt_gatt_init+0xa0>)
   15a5c:	2200      	movs	r2, #0
	list->tail = NULL;
   15a5e:	e9c3 2200 	strd	r2, r2, [r3]
   15a62:	f00f f9f7 	bl	24e54 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   15a66:	4810      	ldr	r0, [pc, #64]	; (15aa8 <bt_gatt_init+0xa0>)
   15a68:	f44f 72a4 	mov.w	r2, #328	; 0x148
   15a6c:	2300      	movs	r3, #0
   15a6e:	f007 feb3 	bl	1d7d8 <k_work_schedule>
}
   15a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   15a76:	490d      	ldr	r1, [pc, #52]	; (15aac <bt_gatt_init+0xa4>)
   15a78:	480d      	ldr	r0, [pc, #52]	; (15ab0 <bt_gatt_init+0xa8>)
   15a7a:	f00f b9eb 	b.w	24e54 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   15a7e:	6848      	ldr	r0, [r1, #4]
   15a80:	4403      	add	r3, r0
   15a82:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   15a84:	3108      	adds	r1, #8
   15a86:	2001      	movs	r0, #1
   15a88:	e7e1      	b.n	15a4e <bt_gatt_init+0x46>
}
   15a8a:	bd10      	pop	{r4, pc}
   15a8c:	200024f4 	.word	0x200024f4
   15a90:	20002510 	.word	0x20002510
   15a94:	20003040 	.word	0x20003040
   15a98:	000251fc 	.word	0x000251fc
   15a9c:	00025224 	.word	0x00025224
   15aa0:	200024cc 	.word	0x200024cc
   15aa4:	000230ad 	.word	0x000230ad
   15aa8:	200016f0 	.word	0x200016f0
   15aac:	00015e3d 	.word	0x00015e3d
   15ab0:	20001768 	.word	0x20001768

00015ab4 <bt_gatt_attr_get_handle>:
{
   15ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   15ab8:	4603      	mov	r3, r0
   15aba:	b148      	cbz	r0, 15ad0 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   15abc:	8a00      	ldrh	r0, [r0, #16]
   15abe:	b938      	cbnz	r0, 15ad0 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   15ac0:	4912      	ldr	r1, [pc, #72]	; (15b0c <bt_gatt_attr_get_handle+0x58>)
   15ac2:	f8df e04c 	ldr.w	lr, [pc, #76]	; 15b10 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   15ac6:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   15ac8:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   15acc:	4571      	cmp	r1, lr
   15ace:	d301      	bcc.n	15ad4 <bt_gatt_attr_get_handle+0x20>
}
   15ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
   15ad4:	e9d1 7600 	ldrd	r7, r6, [r1]
   15ad8:	42bb      	cmp	r3, r7
   15ada:	d304      	bcc.n	15ae6 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   15adc:	fb0c 7206 	mla	r2, ip, r6, r7
   15ae0:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   15ae2:	4293      	cmp	r3, r2
   15ae4:	d90e      	bls.n	15b04 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   15ae6:	19a2      	adds	r2, r4, r6
   15ae8:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   15aea:	3108      	adds	r1, #8
   15aec:	4614      	mov	r4, r2
   15aee:	e7ed      	b.n	15acc <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   15af0:	fb0c 7805 	mla	r8, ip, r5, r7
   15af4:	4543      	cmp	r3, r8
   15af6:	d007      	beq.n	15b08 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   15af8:	3501      	adds	r5, #1
   15afa:	1962      	adds	r2, r4, r5
   15afc:	42b5      	cmp	r5, r6
   15afe:	b292      	uxth	r2, r2
   15b00:	d1f6      	bne.n	15af0 <bt_gatt_attr_get_handle+0x3c>
   15b02:	e7f2      	b.n	15aea <bt_gatt_attr_get_handle+0x36>
   15b04:	2500      	movs	r5, #0
   15b06:	e7f8      	b.n	15afa <bt_gatt_attr_get_handle+0x46>
   15b08:	4610      	mov	r0, r2
   15b0a:	e7e1      	b.n	15ad0 <bt_gatt_attr_get_handle+0x1c>
   15b0c:	000251fc 	.word	0x000251fc
   15b10:	00025224 	.word	0x00025224

00015b14 <bt_gatt_foreach_attr_type>:
{
   15b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b18:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   15b1c:	9100      	str	r1, [sp, #0]
   15b1e:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   15b20:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15b24:	2d00      	cmp	r5, #0
   15b26:	bf08      	it	eq
   15b28:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   15b2a:	4b24      	ldr	r3, [pc, #144]	; (15bbc <bt_gatt_foreach_attr_type+0xa8>)
   15b2c:	881b      	ldrh	r3, [r3, #0]
   15b2e:	4283      	cmp	r3, r0
{
   15b30:	4607      	mov	r7, r0
   15b32:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   15b34:	d23c      	bcs.n	15bb0 <bt_gatt_foreach_attr_type+0x9c>
}
   15b36:	b003      	add	sp, #12
   15b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   15b3c:	6873      	ldr	r3, [r6, #4]
   15b3e:	4423      	add	r3, r4
   15b40:	42bb      	cmp	r3, r7
   15b42:	d232      	bcs.n	15baa <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   15b44:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   15b46:	3608      	adds	r6, #8
   15b48:	4b1d      	ldr	r3, [pc, #116]	; (15bc0 <bt_gatt_foreach_attr_type+0xac>)
   15b4a:	429e      	cmp	r6, r3
   15b4c:	d3f6      	bcc.n	15b3c <bt_gatt_foreach_attr_type+0x28>
   15b4e:	e7f2      	b.n	15b36 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   15b50:	5889      	ldr	r1, [r1, r2]
   15b52:	9301      	str	r3, [sp, #4]
   15b54:	4640      	mov	r0, r8
   15b56:	f00e f981 	bl	23e5c <bt_uuid_cmp>
   15b5a:	9b01      	ldr	r3, [sp, #4]
   15b5c:	b190      	cbz	r0, 15b84 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   15b5e:	3401      	adds	r4, #1
   15b60:	f10a 0a01 	add.w	sl, sl, #1
   15b64:	b2a4      	uxth	r4, r4
   15b66:	6873      	ldr	r3, [r6, #4]
   15b68:	4553      	cmp	r3, sl
   15b6a:	d9ec      	bls.n	15b46 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   15b6c:	9b00      	ldr	r3, [sp, #0]
   15b6e:	429c      	cmp	r4, r3
   15b70:	d8e1      	bhi.n	15b36 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   15b72:	42bc      	cmp	r4, r7
   15b74:	d3f3      	bcc.n	15b5e <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   15b76:	6831      	ldr	r1, [r6, #0]
   15b78:	fb0b f20a 	mul.w	r2, fp, sl
   15b7c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   15b7e:	f1b8 0f00 	cmp.w	r8, #0
   15b82:	d1e5      	bne.n	15b50 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   15b84:	f1b9 0f00 	cmp.w	r9, #0
   15b88:	d10b      	bne.n	15ba2 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   15b8a:	3d01      	subs	r5, #1
   15b8c:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   15b8e:	4618      	mov	r0, r3
   15b90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   15b92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15b94:	4621      	mov	r1, r4
   15b96:	4798      	blx	r3
	if (!*num_matches) {
   15b98:	2d00      	cmp	r5, #0
   15b9a:	d0cc      	beq.n	15b36 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   15b9c:	2800      	cmp	r0, #0
   15b9e:	d1de      	bne.n	15b5e <bt_gatt_foreach_attr_type+0x4a>
   15ba0:	e7c9      	b.n	15b36 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   15ba2:	68da      	ldr	r2, [r3, #12]
   15ba4:	4591      	cmp	r9, r2
   15ba6:	d1da      	bne.n	15b5e <bt_gatt_foreach_attr_type+0x4a>
   15ba8:	e7ef      	b.n	15b8a <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   15baa:	f04f 0a00 	mov.w	sl, #0
   15bae:	e7da      	b.n	15b66 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   15bb0:	4e04      	ldr	r6, [pc, #16]	; (15bc4 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   15bb2:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   15bb4:	f04f 0b14 	mov.w	fp, #20
   15bb8:	e7c6      	b.n	15b48 <bt_gatt_foreach_attr_type+0x34>
   15bba:	bf00      	nop
   15bbc:	20003040 	.word	0x20003040
   15bc0:	00025224 	.word	0x00025224
   15bc4:	000251fc 	.word	0x000251fc

00015bc8 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
   15bc8:	b510      	push	{r4, lr}
   15bca:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   15bcc:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   15bce:	aa1c      	add	r2, sp, #112	; 0x70
   15bd0:	4669      	mov	r1, sp
   15bd2:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   15bd4:	e9cd 4400 	strd	r4, r4, [sp]
   15bd8:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   15bdc:	f00a fc06 	bl	203ec <tc_cmac_setup>
   15be0:	b958      	cbnz	r0, 15bfa <db_hash_gen.isra.0+0x32>
   15be2:	491d      	ldr	r1, [pc, #116]	; (15c58 <db_hash_gen.isra.0+0x90>)
   15be4:	4b1d      	ldr	r3, [pc, #116]	; (15c5c <db_hash_gen.isra.0+0x94>)
		BT_ERR("Unable to setup AES CMAC");
   15be6:	481e      	ldr	r0, [pc, #120]	; (15c60 <db_hash_gen.isra.0+0x98>)
   15be8:	1ac9      	subs	r1, r1, r3
   15bea:	08c9      	lsrs	r1, r1, #3
   15bec:	0189      	lsls	r1, r1, #6
   15bee:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
   15bf2:	f00b fead 	bl	21950 <log_0>
}
   15bf6:	b048      	add	sp, #288	; 0x120
   15bf8:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   15bfa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15bfe:	2001      	movs	r0, #1
   15c00:	4a18      	ldr	r2, [pc, #96]	; (15c64 <db_hash_gen.isra.0+0x9c>)
   15c02:	ab04      	add	r3, sp, #16
   15c04:	f00d fa47 	bl	23096 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   15c08:	4817      	ldr	r0, [pc, #92]	; (15c68 <db_hash_gen.isra.0+0xa0>)
   15c0a:	a904      	add	r1, sp, #16
   15c0c:	f00a fc85 	bl	2051a <tc_cmac_final>
   15c10:	b940      	cbnz	r0, 15c24 <db_hash_gen.isra.0+0x5c>
   15c12:	4911      	ldr	r1, [pc, #68]	; (15c58 <db_hash_gen.isra.0+0x90>)
   15c14:	4b11      	ldr	r3, [pc, #68]	; (15c5c <db_hash_gen.isra.0+0x94>)
		BT_ERR("Unable to calculate hash");
   15c16:	4815      	ldr	r0, [pc, #84]	; (15c6c <db_hash_gen.isra.0+0xa4>)
   15c18:	1ac9      	subs	r1, r1, r3
   15c1a:	08c9      	lsrs	r1, r1, #3
   15c1c:	0189      	lsls	r1, r1, #6
   15c1e:	f041 0101 	orr.w	r1, r1, #1
   15c22:	e7e6      	b.n	15bf2 <db_hash_gen.isra.0+0x2a>
   15c24:	4b10      	ldr	r3, [pc, #64]	; (15c68 <db_hash_gen.isra.0+0xa0>)
   15c26:	f103 020f 	add.w	r2, r3, #15
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   15c2a:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   15c2c:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   15c2e:	7810      	ldrb	r0, [r2, #0]
   15c30:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
   15c34:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   15c36:	f802 1901 	strb.w	r1, [r2], #-1
	for (i = 0; i < (length/2); i++) {
   15c3a:	d1f6      	bne.n	15c2a <db_hash_gen.isra.0+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15c3c:	f3bf 8f5b 	dmb	ish
   15c40:	4b0b      	ldr	r3, [pc, #44]	; (15c70 <db_hash_gen.isra.0+0xa8>)
   15c42:	e853 2f00 	ldrex	r2, [r3]
   15c46:	f042 0204 	orr.w	r2, r2, #4
   15c4a:	e843 2100 	strex	r1, r2, [r3]
   15c4e:	2900      	cmp	r1, #0
   15c50:	d1f7      	bne.n	15c42 <db_hash_gen.isra.0+0x7a>
   15c52:	f3bf 8f5b 	dmb	ish
   15c56:	e7ce      	b.n	15bf6 <db_hash_gen.isra.0+0x2e>
   15c58:	0002525c 	.word	0x0002525c
   15c5c:	00025224 	.word	0x00025224
   15c60:	00026af8 	.word	0x00026af8
   15c64:	00022cd9 	.word	0x00022cd9
   15c68:	200016e0 	.word	0x200016e0
   15c6c:	00026b11 	.word	0x00026b11
   15c70:	20001798 	.word	0x20001798

00015c74 <gatt_indicate>:
{
   15c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15c78:	4615      	mov	r5, r2
   15c7a:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   15c7c:	2214      	movs	r2, #20
   15c7e:	6869      	ldr	r1, [r5, #4]
{
   15c80:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   15c82:	f00d fa15 	bl	230b0 <bt_gatt_check_perm>
   15c86:	4607      	mov	r7, r0
   15c88:	b170      	cbz	r0, 15ca8 <gatt_indicate+0x34>
   15c8a:	4b2a      	ldr	r3, [pc, #168]	; (15d34 <gatt_indicate+0xc0>)
   15c8c:	492a      	ldr	r1, [pc, #168]	; (15d38 <gatt_indicate+0xc4>)
		BT_WARN("Link is not encrypted");
   15c8e:	482b      	ldr	r0, [pc, #172]	; (15d3c <gatt_indicate+0xc8>)
   15c90:	1ac9      	subs	r1, r1, r3
   15c92:	08c9      	lsrs	r1, r1, #3
   15c94:	0189      	lsls	r1, r1, #6
   15c96:	f041 0102 	orr.w	r1, r1, #2
   15c9a:	f00b fe59 	bl	21950 <log_0>
		return -EPERM;
   15c9e:	f04f 35ff 	mov.w	r5, #4294967295
}
   15ca2:	4628      	mov	r0, r5
   15ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   15ca8:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   15cac:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   15cae:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   15cb0:	f7fe fbf4 	bl	1449c <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   15cb4:	3602      	adds	r6, #2
	if (!req) {
   15cb6:	4604      	mov	r4, r0
   15cb8:	b910      	cbnz	r0, 15cc0 <gatt_indicate+0x4c>
		return -ENOMEM;
   15cba:	f06f 050b 	mvn.w	r5, #11
   15cbe:	e7f0      	b.n	15ca2 <gatt_indicate+0x2e>
	req->func = func;
   15cc0:	4b1f      	ldr	r3, [pc, #124]	; (15d40 <gatt_indicate+0xcc>)
	req->len = len;
   15cc2:	6146      	str	r6, [r0, #20]
	req->att_op = op;
   15cc4:	211d      	movs	r1, #29
   15cc6:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   15cc8:	60c7      	str	r7, [r0, #12]
	req->func = func;
   15cca:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   15ccc:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   15cce:	4632      	mov	r2, r6
   15cd0:	4640      	mov	r0, r8
   15cd2:	f7fe f995 	bl	14000 <bt_att_create_pdu>
	if (!buf) {
   15cd6:	4606      	mov	r6, r0
   15cd8:	b968      	cbnz	r0, 15cf6 <gatt_indicate+0x82>
   15cda:	4b16      	ldr	r3, [pc, #88]	; (15d34 <gatt_indicate+0xc0>)
   15cdc:	4916      	ldr	r1, [pc, #88]	; (15d38 <gatt_indicate+0xc4>)
		BT_WARN("No buffer available to send indication");
   15cde:	4819      	ldr	r0, [pc, #100]	; (15d44 <gatt_indicate+0xd0>)
   15ce0:	1ac9      	subs	r1, r1, r3
   15ce2:	08c9      	lsrs	r1, r1, #3
   15ce4:	0189      	lsls	r1, r1, #6
   15ce6:	f041 0102 	orr.w	r1, r1, #2
   15cea:	f00b fe31 	bl	21950 <log_0>
		bt_att_req_free(req);
   15cee:	4620      	mov	r0, r4
   15cf0:	f7fe fbea 	bl	144c8 <bt_att_req_free>
   15cf4:	e7e1      	b.n	15cba <gatt_indicate+0x46>
   15cf6:	f100 0a08 	add.w	sl, r0, #8
   15cfa:	2102      	movs	r1, #2
   15cfc:	4650      	mov	r0, sl
   15cfe:	f00e f956 	bl	23fae <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   15d02:	4607      	mov	r7, r0
   15d04:	8aa9      	ldrh	r1, [r5, #20]
   15d06:	f827 9b02 	strh.w	r9, [r7], #2
   15d0a:	4650      	mov	r0, sl
   15d0c:	f00e f94f 	bl	23fae <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   15d10:	8aaa      	ldrh	r2, [r5, #20]
   15d12:	6929      	ldr	r1, [r5, #16]
   15d14:	4638      	mov	r0, r7
   15d16:	f00c f91c 	bl	21f52 <memcpy>
	req->buf = buf;
   15d1a:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   15d1c:	4621      	mov	r1, r4
   15d1e:	4640      	mov	r0, r8
   15d20:	f00c fe50 	bl	229c4 <bt_att_req_send>
	if (err) {
   15d24:	4605      	mov	r5, r0
   15d26:	2800      	cmp	r0, #0
   15d28:	d0bb      	beq.n	15ca2 <gatt_indicate+0x2e>
		bt_att_req_free(req);
   15d2a:	4620      	mov	r0, r4
   15d2c:	f7fe fbcc 	bl	144c8 <bt_att_req_free>
   15d30:	e7b7      	b.n	15ca2 <gatt_indicate+0x2e>
   15d32:	bf00      	nop
   15d34:	00025224 	.word	0x00025224
   15d38:	0002525c 	.word	0x0002525c
   15d3c:	00026b2a 	.word	0x00026b2a
   15d40:	00022cab 	.word	0x00022cab
   15d44:	00026b40 	.word	0x00026b40

00015d48 <bt_gatt_indicate>:
{
   15d48:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15d4a:	4b39      	ldr	r3, [pc, #228]	; (15e30 <bt_gatt_indicate+0xe8>)
   15d4c:	f3bf 8f5b 	dmb	ish
   15d50:	681b      	ldr	r3, [r3, #0]
   15d52:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15d56:	079a      	lsls	r2, r3, #30
{
   15d58:	b08b      	sub	sp, #44	; 0x2c
   15d5a:	4604      	mov	r4, r0
   15d5c:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15d5e:	d561      	bpl.n	15e24 <bt_gatt_indicate+0xdc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   15d60:	b110      	cbz	r0, 15d68 <bt_gatt_indicate+0x20>
   15d62:	7b43      	ldrb	r3, [r0, #13]
   15d64:	2b07      	cmp	r3, #7
   15d66:	d160      	bne.n	15e2a <bt_gatt_indicate+0xe2>
	data.attr = params->attr;
   15d68:	6868      	ldr	r0, [r5, #4]
   15d6a:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   15d6c:	f7ff fea2 	bl	15ab4 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   15d70:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   15d72:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   15d76:	b33a      	cbz	r2, 15dc8 <bt_gatt_indicate+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   15d78:	a905      	add	r1, sp, #20
   15d7a:	9102      	str	r1, [sp, #8]
   15d7c:	492d      	ldr	r1, [pc, #180]	; (15e34 <bt_gatt_indicate+0xec>)
   15d7e:	9101      	str	r1, [sp, #4]
   15d80:	2101      	movs	r1, #1
	found->attr = NULL;
   15d82:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   15d84:	9100      	str	r1, [sp, #0]
   15d86:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   15d8a:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   15d8c:	f7ff fec2 	bl	15b14 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   15d90:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   15d92:	b91b      	cbnz	r3, 15d9c <bt_gatt_indicate+0x54>
			return -ENOENT;
   15d94:	f06f 0001 	mvn.w	r0, #1
}
   15d98:	b00b      	add	sp, #44	; 0x2c
   15d9a:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   15d9c:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   15d9e:	9b05      	ldr	r3, [sp, #20]
   15da0:	6818      	ldr	r0, [r3, #0]
   15da2:	2300      	movs	r3, #0
   15da4:	f88d 3010 	strb.w	r3, [sp, #16]
   15da8:	a904      	add	r1, sp, #16
   15daa:	f642 0303 	movw	r3, #10243	; 0x2803
   15dae:	f8ad 3012 	strh.w	r3, [sp, #18]
   15db2:	f00e f853 	bl	23e5c <bt_uuid_cmp>
   15db6:	b970      	cbnz	r0, 15dd6 <bt_gatt_indicate+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   15db8:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   15dba:	68c3      	ldr	r3, [r0, #12]
   15dbc:	799b      	ldrb	r3, [r3, #6]
   15dbe:	069b      	lsls	r3, r3, #26
   15dc0:	d405      	bmi.n	15dce <bt_gatt_indicate+0x86>
			return -EINVAL;
   15dc2:	f06f 0015 	mvn.w	r0, #21
   15dc6:	e7e7      	b.n	15d98 <bt_gatt_indicate+0x50>
		if (!data.handle) {
   15dc8:	2800      	cmp	r0, #0
   15dca:	d1e8      	bne.n	15d9e <bt_gatt_indicate+0x56>
   15dcc:	e7e2      	b.n	15d94 <bt_gatt_indicate+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   15dce:	f00d f914 	bl	22ffa <bt_gatt_attr_value_handle>
   15dd2:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   15dd6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   15dda:	b13c      	cbz	r4, 15dec <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   15ddc:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   15dde:	4601      	mov	r1, r0
		params->_ref = 1;
   15de0:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   15de2:	462a      	mov	r2, r5
   15de4:	4620      	mov	r0, r4
   15de6:	f7ff ff45 	bl	15c74 <gatt_indicate>
   15dea:	e7d5      	b.n	15d98 <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
   15dec:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   15df0:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   15df2:	2302      	movs	r3, #2
   15df4:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15df8:	f642 1302 	movw	r3, #10498	; 0x2902
   15dfc:	f8ad 3012 	strh.w	r3, [sp, #18]
   15e00:	ab05      	add	r3, sp, #20
   15e02:	9302      	str	r3, [sp, #8]
   15e04:	4b0c      	ldr	r3, [pc, #48]	; (15e38 <bt_gatt_indicate+0xf0>)
   15e06:	9301      	str	r3, [sp, #4]
   15e08:	2301      	movs	r3, #1
   15e0a:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   15e0c:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15e0e:	4623      	mov	r3, r4
   15e10:	aa04      	add	r2, sp, #16
   15e12:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   15e16:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15e18:	f88d 4010 	strb.w	r4, [sp, #16]
   15e1c:	f7ff fe7a 	bl	15b14 <bt_gatt_foreach_attr_type>
	return data.err;
   15e20:	9807      	ldr	r0, [sp, #28]
   15e22:	e7b9      	b.n	15d98 <bt_gatt_indicate+0x50>
		return -EAGAIN;
   15e24:	f06f 000a 	mvn.w	r0, #10
   15e28:	e7b6      	b.n	15d98 <bt_gatt_indicate+0x50>
		return -ENOTCONN;
   15e2a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   15e2e:	e7b3      	b.n	15d98 <bt_gatt_indicate+0x50>
   15e30:	20000374 	.word	0x20000374
   15e34:	00022cd1 	.word	0x00022cd1
   15e38:	00016031 	.word	0x00016031

00015e3c <sc_process>:
{
   15e3c:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   15e3e:	f850 2c08 	ldr.w	r2, [r0, #-8]
   15e42:	9201      	str	r2, [sp, #4]
{
   15e44:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   15e46:	f1a0 0120 	sub.w	r1, r0, #32
   15e4a:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15e4e:	f3bf 8f5b 	dmb	ish
   15e52:	e854 2f00 	ldrex	r2, [r4]
   15e56:	f022 0201 	bic.w	r2, r2, #1
   15e5a:	e844 2000 	strex	r0, r2, [r4]
   15e5e:	2800      	cmp	r0, #0
   15e60:	d1f7      	bne.n	15e52 <sc_process+0x16>
   15e62:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   15e66:	4a0d      	ldr	r2, [pc, #52]	; (15e9c <sc_process+0x60>)
   15e68:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   15e6c:	4a0c      	ldr	r2, [pc, #48]	; (15ea0 <sc_process+0x64>)
   15e6e:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   15e72:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   15e74:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   15e76:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   15e7a:	2204      	movs	r2, #4
	sc->start = 0U;
   15e7c:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   15e80:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   15e84:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   15e88:	f7ff ff5e 	bl	15d48 <bt_gatt_indicate>
   15e8c:	b918      	cbnz	r0, 15e96 <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   15e8e:	2101      	movs	r1, #1
   15e90:	4620      	mov	r0, r4
   15e92:	f00c ff95 	bl	22dc0 <atomic_set_bit>
}
   15e96:	b002      	add	sp, #8
   15e98:	bd10      	pop	{r4, pc}
   15e9a:	bf00      	nop
   15e9c:	0002578c 	.word	0x0002578c
   15ea0:	00015769 	.word	0x00015769

00015ea4 <gatt_notify>:
{
   15ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15ea8:	4614      	mov	r4, r2
   15eaa:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   15eac:	2214      	movs	r2, #20
   15eae:	6861      	ldr	r1, [r4, #4]
{
   15eb0:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   15eb2:	f00d f8fd 	bl	230b0 <bt_gatt_check_perm>
   15eb6:	b168      	cbz	r0, 15ed4 <gatt_notify+0x30>
   15eb8:	4b1e      	ldr	r3, [pc, #120]	; (15f34 <gatt_notify+0x90>)
   15eba:	491f      	ldr	r1, [pc, #124]	; (15f38 <gatt_notify+0x94>)
		BT_WARN("Link is not encrypted");
   15ebc:	481f      	ldr	r0, [pc, #124]	; (15f3c <gatt_notify+0x98>)
   15ebe:	1ac9      	subs	r1, r1, r3
   15ec0:	08c9      	lsrs	r1, r1, #3
   15ec2:	0189      	lsls	r1, r1, #6
   15ec4:	f041 0102 	orr.w	r1, r1, #2
   15ec8:	f00b fd42 	bl	21950 <log_0>
		return -EPERM;
   15ecc:	f04f 30ff 	mov.w	r0, #4294967295
}
   15ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
   15ed4:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   15ed6:	211b      	movs	r1, #27
   15ed8:	3202      	adds	r2, #2
   15eda:	4638      	mov	r0, r7
   15edc:	f7fe f890 	bl	14000 <bt_att_create_pdu>
	if (!buf) {
   15ee0:	4605      	mov	r5, r0
   15ee2:	b960      	cbnz	r0, 15efe <gatt_notify+0x5a>
   15ee4:	4b13      	ldr	r3, [pc, #76]	; (15f34 <gatt_notify+0x90>)
   15ee6:	4914      	ldr	r1, [pc, #80]	; (15f38 <gatt_notify+0x94>)
		BT_WARN("No buffer available to send notification");
   15ee8:	4815      	ldr	r0, [pc, #84]	; (15f40 <gatt_notify+0x9c>)
   15eea:	1ac9      	subs	r1, r1, r3
   15eec:	08c9      	lsrs	r1, r1, #3
   15eee:	0189      	lsls	r1, r1, #6
   15ef0:	f041 0102 	orr.w	r1, r1, #2
   15ef4:	f00b fd2c 	bl	21950 <log_0>
		return -ENOMEM;
   15ef8:	f06f 000b 	mvn.w	r0, #11
   15efc:	e7e8      	b.n	15ed0 <gatt_notify+0x2c>
   15efe:	f100 0908 	add.w	r9, r0, #8
   15f02:	2102      	movs	r1, #2
   15f04:	4648      	mov	r0, r9
   15f06:	f00e f852 	bl	23fae <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   15f0a:	4606      	mov	r6, r0
   15f0c:	89a1      	ldrh	r1, [r4, #12]
   15f0e:	f826 8b02 	strh.w	r8, [r6], #2
   15f12:	4648      	mov	r0, r9
   15f14:	f00e f84b 	bl	23fae <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   15f18:	89a2      	ldrh	r2, [r4, #12]
   15f1a:	68a1      	ldr	r1, [r4, #8]
   15f1c:	4630      	mov	r0, r6
   15f1e:	f00c f818 	bl	21f52 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   15f22:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   15f26:	4629      	mov	r1, r5
   15f28:	4638      	mov	r0, r7
}
   15f2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   15f2e:	f00c bcfe 	b.w	2292e <bt_att_send>
   15f32:	bf00      	nop
   15f34:	00025224 	.word	0x00025224
   15f38:	0002525c 	.word	0x0002525c
   15f3c:	00026b2a 	.word	0x00026b2a
   15f40:	00026b67 	.word	0x00026b67

00015f44 <bt_gatt_notify_cb>:
{
   15f44:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15f46:	4b37      	ldr	r3, [pc, #220]	; (16024 <bt_gatt_notify_cb+0xe0>)
   15f48:	f3bf 8f5b 	dmb	ish
   15f4c:	681b      	ldr	r3, [r3, #0]
   15f4e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15f52:	079a      	lsls	r2, r3, #30
{
   15f54:	b08b      	sub	sp, #44	; 0x2c
   15f56:	4604      	mov	r4, r0
   15f58:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15f5a:	d55d      	bpl.n	16018 <bt_gatt_notify_cb+0xd4>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   15f5c:	b110      	cbz	r0, 15f64 <bt_gatt_notify_cb+0x20>
   15f5e:	7b43      	ldrb	r3, [r0, #13]
   15f60:	2b07      	cmp	r3, #7
   15f62:	d15c      	bne.n	1601e <bt_gatt_notify_cb+0xda>
	data.attr = params->attr;
   15f64:	6868      	ldr	r0, [r5, #4]
   15f66:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   15f68:	f7ff fda4 	bl	15ab4 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   15f6c:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   15f6e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   15f72:	b33a      	cbz	r2, 15fc4 <bt_gatt_notify_cb+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   15f74:	a905      	add	r1, sp, #20
   15f76:	9102      	str	r1, [sp, #8]
   15f78:	492b      	ldr	r1, [pc, #172]	; (16028 <bt_gatt_notify_cb+0xe4>)
   15f7a:	9101      	str	r1, [sp, #4]
   15f7c:	2101      	movs	r1, #1
	found->attr = NULL;
   15f7e:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   15f80:	9100      	str	r1, [sp, #0]
   15f82:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   15f86:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   15f88:	f7ff fdc4 	bl	15b14 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   15f8c:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   15f8e:	b91b      	cbnz	r3, 15f98 <bt_gatt_notify_cb+0x54>
			return -ENOENT;
   15f90:	f06f 0001 	mvn.w	r0, #1
}
   15f94:	b00b      	add	sp, #44	; 0x2c
   15f96:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   15f98:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   15f9a:	9b05      	ldr	r3, [sp, #20]
   15f9c:	6818      	ldr	r0, [r3, #0]
   15f9e:	2300      	movs	r3, #0
   15fa0:	f88d 3010 	strb.w	r3, [sp, #16]
   15fa4:	a904      	add	r1, sp, #16
   15fa6:	f642 0303 	movw	r3, #10243	; 0x2803
   15faa:	f8ad 3012 	strh.w	r3, [sp, #18]
   15fae:	f00d ff55 	bl	23e5c <bt_uuid_cmp>
   15fb2:	b970      	cbnz	r0, 15fd2 <bt_gatt_notify_cb+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   15fb4:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   15fb6:	68c3      	ldr	r3, [r0, #12]
   15fb8:	799b      	ldrb	r3, [r3, #6]
   15fba:	06db      	lsls	r3, r3, #27
   15fbc:	d405      	bmi.n	15fca <bt_gatt_notify_cb+0x86>
			return -EINVAL;
   15fbe:	f06f 0015 	mvn.w	r0, #21
   15fc2:	e7e7      	b.n	15f94 <bt_gatt_notify_cb+0x50>
		if (!data.handle) {
   15fc4:	2800      	cmp	r0, #0
   15fc6:	d1e8      	bne.n	15f9a <bt_gatt_notify_cb+0x56>
   15fc8:	e7e2      	b.n	15f90 <bt_gatt_notify_cb+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   15fca:	f00d f816 	bl	22ffa <bt_gatt_attr_value_handle>
   15fce:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   15fd2:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   15fd6:	b12c      	cbz	r4, 15fe4 <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
   15fd8:	4601      	mov	r1, r0
   15fda:	462a      	mov	r2, r5
   15fdc:	4620      	mov	r0, r4
   15fde:	f7ff ff61 	bl	15ea4 <gatt_notify>
   15fe2:	e7d7      	b.n	15f94 <bt_gatt_notify_cb+0x50>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15fe4:	f642 1202 	movw	r2, #10498	; 0x2902
   15fe8:	f8ad 2012 	strh.w	r2, [sp, #18]
   15fec:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   15fee:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15ff2:	9202      	str	r2, [sp, #8]
   15ff4:	4a0d      	ldr	r2, [pc, #52]	; (1602c <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
   15ff6:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   15ff8:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   15ffa:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   15ffe:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   16002:	aa04      	add	r2, sp, #16
   16004:	4623      	mov	r3, r4
   16006:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   1600a:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1600c:	f88d 4010 	strb.w	r4, [sp, #16]
   16010:	f7ff fd80 	bl	15b14 <bt_gatt_foreach_attr_type>
	return data.err;
   16014:	9807      	ldr	r0, [sp, #28]
   16016:	e7bd      	b.n	15f94 <bt_gatt_notify_cb+0x50>
		return -EAGAIN;
   16018:	f06f 000a 	mvn.w	r0, #10
   1601c:	e7ba      	b.n	15f94 <bt_gatt_notify_cb+0x50>
		return -ENOTCONN;
   1601e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   16022:	e7b7      	b.n	15f94 <bt_gatt_notify_cb+0x50>
   16024:	20000374 	.word	0x20000374
   16028:	00022cd1 	.word	0x00022cd1
   1602c:	00016031 	.word	0x00016031

00016030 <notify_cb>:
{
   16030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16034:	4b45      	ldr	r3, [pc, #276]	; (1614c <notify_cb+0x11c>)
{
   16036:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   16038:	6882      	ldr	r2, [r0, #8]
   1603a:	429a      	cmp	r2, r3
{
   1603c:	b085      	sub	sp, #20
   1603e:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16040:	d005      	beq.n	1604e <notify_cb+0x1e>
		return BT_GATT_ITER_CONTINUE;
   16042:	f04f 0801 	mov.w	r8, #1
}
   16046:	4640      	mov	r0, r8
   16048:	b005      	add	sp, #20
   1604a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   1604e:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   16052:	4b3f      	ldr	r3, [pc, #252]	; (16150 <notify_cb+0x120>)
   16054:	4599      	cmp	r9, r3
   16056:	d022      	beq.n	1609e <notify_cb+0x6e>
   16058:	4b3e      	ldr	r3, [pc, #248]	; (16154 <notify_cb+0x124>)
   1605a:	4d3f      	ldr	r5, [pc, #252]	; (16158 <notify_cb+0x128>)
			BT_WARN("Link is not encrypted");
   1605c:	f8df b100 	ldr.w	fp, [pc, #256]	; 16160 <notify_cb+0x130>
   16060:	1aed      	subs	r5, r5, r3
   16062:	08ed      	lsrs	r5, r5, #3
   16064:	01ad      	lsls	r5, r5, #6
   16066:	f045 0302 	orr.w	r3, r5, #2
   1606a:	f109 0601 	add.w	r6, r9, #1
   1606e:	f109 0a15 	add.w	sl, r9, #21
   16072:	9300      	str	r3, [sp, #0]
		if (cfg->value != data->type) {
   16074:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   16078:	89a3      	ldrh	r3, [r4, #12]
   1607a:	429a      	cmp	r2, r3
   1607c:	d10b      	bne.n	16096 <notify_cb+0x66>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1607e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   16082:	4631      	mov	r1, r6
   16084:	f7fe ff90 	bl	14fa8 <bt_conn_lookup_addr_le>
		if (!conn) {
   16088:	4605      	mov	r5, r0
   1608a:	b120      	cbz	r0, 16096 <notify_cb+0x66>
		if (conn->state != BT_CONN_CONNECTED) {
   1608c:	7b42      	ldrb	r2, [r0, #13]
   1608e:	2a07      	cmp	r2, #7
   16090:	d02a      	beq.n	160e8 <notify_cb+0xb8>
			bt_conn_unref(conn);
   16092:	f00c fd14 	bl	22abe <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   16096:	360a      	adds	r6, #10
   16098:	4556      	cmp	r6, sl
   1609a:	d0d2      	beq.n	16042 <notify_cb+0x12>
   1609c:	e7ea      	b.n	16074 <notify_cb+0x44>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1609e:	2600      	movs	r6, #0
   160a0:	4d2e      	ldr	r5, [pc, #184]	; (1615c <notify_cb+0x12c>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   160a2:	46b0      	mov	r8, r6
	return memcmp(a, b, sizeof(*a));
   160a4:	2207      	movs	r2, #7
   160a6:	a902      	add	r1, sp, #8
   160a8:	4628      	mov	r0, r5
   160aa:	f8cd 8008 	str.w	r8, [sp, #8]
   160ae:	f8cd 800b 	str.w	r8, [sp, #11]
   160b2:	f00b ff27 	bl	21f04 <memcmp>
   160b6:	b178      	cbz	r0, 160d8 <notify_cb+0xa8>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   160b8:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   160bc:	2207      	movs	r2, #7
   160be:	4629      	mov	r1, r5
   160c0:	f7fe ffb6 	bl	15030 <bt_conn_lookup_state_le>
			if (!conn) {
   160c4:	b968      	cbnz	r0, 160e2 <notify_cb+0xb2>
				sc = (struct sc_data *)data->ind_params->data;
   160c6:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   160c8:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   160cc:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   160ce:	4629      	mov	r1, r5
   160d0:	8853      	ldrh	r3, [r2, #2]
   160d2:	8812      	ldrh	r2, [r2, #0]
   160d4:	f7ff fb92 	bl	157fc <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   160d8:	350c      	adds	r5, #12
   160da:	2e00      	cmp	r6, #0
   160dc:	d1bc      	bne.n	16058 <notify_cb+0x28>
   160de:	2601      	movs	r6, #1
   160e0:	e7e0      	b.n	160a4 <notify_cb+0x74>
			bt_conn_unref(conn);
   160e2:	f00c fcec 	bl	22abe <bt_conn_unref>
   160e6:	e7f7      	b.n	160d8 <notify_cb+0xa8>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   160e8:	f8d9 2020 	ldr.w	r2, [r9, #32]
   160ec:	b122      	cbz	r2, 160f8 <notify_cb+0xc8>
   160ee:	4639      	mov	r1, r7
   160f0:	4790      	blx	r2
   160f2:	b908      	cbnz	r0, 160f8 <notify_cb+0xc8>
			bt_conn_unref(conn);
   160f4:	4628      	mov	r0, r5
   160f6:	e7cc      	b.n	16092 <notify_cb+0x62>
		if (bt_gatt_check_perm(conn, attr,
   160f8:	2214      	movs	r2, #20
   160fa:	4639      	mov	r1, r7
   160fc:	4628      	mov	r0, r5
   160fe:	f00c ffd7 	bl	230b0 <bt_gatt_check_perm>
   16102:	4680      	mov	r8, r0
   16104:	b128      	cbz	r0, 16112 <notify_cb+0xe2>
			BT_WARN("Link is not encrypted");
   16106:	f8bd 1000 	ldrh.w	r1, [sp]
   1610a:	4658      	mov	r0, fp
   1610c:	f00b fc20 	bl	21950 <log_0>
			continue;
   16110:	e7c1      	b.n	16096 <notify_cb+0x66>
		if (data->type == BT_GATT_CCC_INDICATE) {
   16112:	89a0      	ldrh	r0, [r4, #12]
   16114:	88a1      	ldrh	r1, [r4, #4]
   16116:	6922      	ldr	r2, [r4, #16]
   16118:	2802      	cmp	r0, #2
			err = gatt_indicate(conn, data->handle,
   1611a:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   1611c:	d111      	bne.n	16142 <notify_cb+0x112>
			err = gatt_indicate(conn, data->handle,
   1611e:	f7ff fda9 	bl	15c74 <gatt_indicate>
			if (err == 0) {
   16122:	4602      	mov	r2, r0
   16124:	b918      	cbnz	r0, 1612e <notify_cb+0xfe>
				data->ind_params->_ref++;
   16126:	6920      	ldr	r0, [r4, #16]
   16128:	7d81      	ldrb	r1, [r0, #22]
   1612a:	3101      	adds	r1, #1
   1612c:	7581      	strb	r1, [r0, #22]
		bt_conn_unref(conn);
   1612e:	4628      	mov	r0, r5
   16130:	9201      	str	r2, [sp, #4]
   16132:	f00c fcc4 	bl	22abe <bt_conn_unref>
		if (err < 0) {
   16136:	9a01      	ldr	r2, [sp, #4]
   16138:	2a00      	cmp	r2, #0
   1613a:	db84      	blt.n	16046 <notify_cb+0x16>
		data->err = 0;
   1613c:	2300      	movs	r3, #0
   1613e:	60a3      	str	r3, [r4, #8]
   16140:	e7a9      	b.n	16096 <notify_cb+0x66>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   16142:	f7ff feaf 	bl	15ea4 <gatt_notify>
   16146:	4602      	mov	r2, r0
   16148:	e7f1      	b.n	1612e <notify_cb+0xfe>
   1614a:	bf00      	nop
   1614c:	00015871 	.word	0x00015871
   16150:	20000548 	.word	0x20000548
   16154:	00025224 	.word	0x00025224
   16158:	0002525c 	.word	0x0002525c
   1615c:	20003043 	.word	0x20003043
   16160:	00026b2a 	.word	0x00026b2a

00016164 <update_ccc>:
{
   16164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   16168:	6881      	ldr	r1, [r0, #8]
{
   1616a:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1616c:	4a40      	ldr	r2, [pc, #256]	; (16270 <update_ccc+0x10c>)
   1616e:	4291      	cmp	r1, r2
{
   16170:	b085      	sub	sp, #20
   16172:	4682      	mov	sl, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   16174:	d178      	bne.n	16268 <update_ccc+0x104>
   16176:	4c3f      	ldr	r4, [pc, #252]	; (16274 <update_ccc+0x110>)
   16178:	493f      	ldr	r1, [pc, #252]	; (16278 <update_ccc+0x114>)
	ccc = attr->user_data;
   1617a:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
   1617e:	683d      	ldr	r5, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
   16180:	f8df b10c 	ldr.w	fp, [pc, #268]	; 16290 <update_ccc+0x12c>
   16184:	1a64      	subs	r4, r4, r1
   16186:	08e4      	lsrs	r4, r4, #3
   16188:	f108 0315 	add.w	r3, r8, #21
   1618c:	ea4f 1984 	mov.w	r9, r4, lsl #6
   16190:	f108 0601 	add.w	r6, r8, #1
   16194:	9300      	str	r3, [sp, #0]
   16196:	f049 0902 	orr.w	r9, r9, #2
		if (!cfg->value ||
   1619a:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   1619e:	b19a      	cbz	r2, 161c8 <update_ccc+0x64>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   161a0:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   161a4:	4632      	mov	r2, r6
   161a6:	4628      	mov	r0, r5
   161a8:	f00c fd27 	bl	22bfa <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   161ac:	b160      	cbz	r0, 161c8 <update_ccc+0x64>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   161ae:	222a      	movs	r2, #42	; 0x2a
   161b0:	4651      	mov	r1, sl
   161b2:	4628      	mov	r0, r5
   161b4:	f00c ff7c 	bl	230b0 <bt_gatt_check_perm>
		if (err) {
   161b8:	b1d8      	cbz	r0, 161f2 <update_ccc+0x8e>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   161ba:	2803      	cmp	r0, #3
   161bc:	d109      	bne.n	161d2 <update_ccc+0x6e>
				BT_WARN("CCC %p not writable", attr);
   161be:	464a      	mov	r2, r9
   161c0:	4651      	mov	r1, sl
   161c2:	4658      	mov	r0, fp
   161c4:	f00b fbd1 	bl	2196a <log_1>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   161c8:	9b00      	ldr	r3, [sp, #0]
   161ca:	360a      	adds	r6, #10
   161cc:	429e      	cmp	r6, r3
   161ce:	d04b      	beq.n	16268 <update_ccc+0x104>
   161d0:	e7e3      	b.n	1619a <update_ccc+0x36>
				sec = BT_SECURITY_L3;
   161d2:	2805      	cmp	r0, #5
   161d4:	bf14      	ite	ne
   161d6:	2202      	movne	r2, #2
   161d8:	2203      	moveq	r2, #3
			    bt_conn_get_security(conn) < sec) {
   161da:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
   161dc:	9201      	str	r2, [sp, #4]
			    bt_conn_get_security(conn) < sec) {
   161de:	f00c fd0a 	bl	22bf6 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   161e2:	9a01      	ldr	r2, [sp, #4]
   161e4:	4282      	cmp	r2, r0
   161e6:	d904      	bls.n	161f2 <update_ccc+0x8e>
				if (data->sec < sec) {
   161e8:	7939      	ldrb	r1, [r7, #4]
   161ea:	4291      	cmp	r1, r2
   161ec:	d2ec      	bcs.n	161c8 <update_ccc+0x64>
					data->sec = sec;
   161ee:	713a      	strb	r2, [r7, #4]
   161f0:	e7ea      	b.n	161c8 <update_ccc+0x64>
		gatt_ccc_changed(attr, ccc);
   161f2:	4641      	mov	r1, r8
   161f4:	4650      	mov	r0, sl
   161f6:	f00c fd4a 	bl	22c8e <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   161fa:	4b20      	ldr	r3, [pc, #128]	; (1627c <update_ccc+0x118>)
   161fc:	4598      	cmp	r8, r3
   161fe:	d133      	bne.n	16268 <update_ccc+0x104>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   16200:	7a28      	ldrb	r0, [r5, #8]
   16202:	f105 0188 	add.w	r1, r5, #136	; 0x88
   16206:	f7ff fa05 	bl	15614 <find_sc_cfg>
	if (!cfg) {
   1620a:	4606      	mov	r6, r0
   1620c:	b360      	cbz	r0, 16268 <update_ccc+0x104>
	if (!(cfg->data.start || cfg->data.end)) {
   1620e:	8902      	ldrh	r2, [r0, #8]
   16210:	8943      	ldrh	r3, [r0, #10]
   16212:	ea52 0103 	orrs.w	r1, r2, r3
   16216:	d027      	beq.n	16268 <update_ccc+0x104>
	index = bt_conn_index(conn);
   16218:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1621a:	f8ad 200c 	strh.w	r2, [sp, #12]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1621e:	f8ad 300e 	strh.w	r3, [sp, #14]
	index = bt_conn_index(conn);
   16222:	f7fe fd9b 	bl	14d5c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   16226:	4916      	ldr	r1, [pc, #88]	; (16280 <update_ccc+0x11c>)
   16228:	4a16      	ldr	r2, [pc, #88]	; (16284 <update_ccc+0x120>)
   1622a:	2318      	movs	r3, #24
   1622c:	fb03 1300 	mla	r3, r3, r0, r1
   16230:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   16232:	4a15      	ldr	r2, [pc, #84]	; (16288 <update_ccc+0x124>)
   16234:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   16236:	aa03      	add	r2, sp, #12
   16238:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1623a:	2204      	movs	r2, #4
   1623c:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1623e:	b203      	sxth	r3, r0
   16240:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   16244:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   16248:	4628      	mov	r0, r5
   1624a:	f7ff fd7d 	bl	15d48 <bt_gatt_indicate>
   1624e:	b128      	cbz	r0, 1625c <update_ccc+0xf8>
		BT_ERR("SC restore indication failed");
   16250:	01a1      	lsls	r1, r4, #6
   16252:	480e      	ldr	r0, [pc, #56]	; (1628c <update_ccc+0x128>)
   16254:	f041 0101 	orr.w	r1, r1, #1
   16258:	f00b fb7a 	bl	21950 <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
   1625c:	2204      	movs	r2, #4
   1625e:	2100      	movs	r1, #0
   16260:	f106 0008 	add.w	r0, r6, #8
   16264:	f00b fe80 	bl	21f68 <memset>
}
   16268:	2001      	movs	r0, #1
   1626a:	b005      	add	sp, #20
   1626c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16270:	00015871 	.word	0x00015871
   16274:	0002525c 	.word	0x0002525c
   16278:	00025224 	.word	0x00025224
   1627c:	20000548 	.word	0x20000548
   16280:	200024f8 	.word	0x200024f8
   16284:	0002578c 	.word	0x0002578c
   16288:	00022e1d 	.word	0x00022e1d
   1628c:	00026ba4 	.word	0x00026ba4
   16290:	00026b90 	.word	0x00026b90

00016294 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   16294:	b513      	push	{r0, r1, r4, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16296:	4a11      	ldr	r2, [pc, #68]	; (162dc <bt_gatt_connected+0x48>)
	data.conn = conn;
   16298:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1629a:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
   1629e:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   162a0:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   162a2:	2001      	movs	r0, #1
   162a4:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   162a8:	f00c fef5 	bl	23096 <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
   162ac:	4620      	mov	r0, r4
   162ae:	f00c fca2 	bl	22bf6 <bt_conn_get_security>
   162b2:	f89d 1004 	ldrb.w	r1, [sp, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   162b6:	4288      	cmp	r0, r1
   162b8:	d20e      	bcs.n	162d8 <bt_gatt_connected+0x44>
		int err = bt_conn_set_security(conn, data.sec);
   162ba:	4620      	mov	r0, r4
   162bc:	f00c fc68 	bl	22b90 <bt_conn_set_security>

		if (err) {
   162c0:	4601      	mov	r1, r0
   162c2:	b148      	cbz	r0, 162d8 <bt_gatt_connected+0x44>
   162c4:	4a06      	ldr	r2, [pc, #24]	; (162e0 <bt_gatt_connected+0x4c>)
   162c6:	4b07      	ldr	r3, [pc, #28]	; (162e4 <bt_gatt_connected+0x50>)
			BT_WARN("Failed to set security for bonded peer (%d)",
   162c8:	4807      	ldr	r0, [pc, #28]	; (162e8 <bt_gatt_connected+0x54>)
   162ca:	1ad2      	subs	r2, r2, r3
   162cc:	08d2      	lsrs	r2, r2, #3
   162ce:	0192      	lsls	r2, r2, #6
   162d0:	f042 0202 	orr.w	r2, r2, #2
   162d4:	f00b fb49 	bl	2196a <log_1>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   162d8:	b002      	add	sp, #8
   162da:	bd10      	pop	{r4, pc}
   162dc:	00016165 	.word	0x00016165
   162e0:	0002525c 	.word	0x0002525c
   162e4:	00025224 	.word	0x00025224
   162e8:	00026bc1 	.word	0x00026bc1

000162ec <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   162ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   162ee:	4b09      	ldr	r3, [pc, #36]	; (16314 <bt_gatt_att_max_mtu_changed+0x28>)
   162f0:	681c      	ldr	r4, [r3, #0]
{
   162f2:	4605      	mov	r5, r0
   162f4:	460e      	mov	r6, r1
   162f6:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   162f8:	b10c      	cbz	r4, 162fe <bt_gatt_att_max_mtu_changed+0x12>
   162fa:	3c04      	subs	r4, #4
   162fc:	b904      	cbnz	r4, 16300 <bt_gatt_att_max_mtu_changed+0x14>
		if (cb->att_mtu_updated) {
			cb->att_mtu_updated(conn, tx, rx);
		}
	}
}
   162fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
   16300:	6823      	ldr	r3, [r4, #0]
   16302:	b11b      	cbz	r3, 1630c <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
   16304:	463a      	mov	r2, r7
   16306:	4631      	mov	r1, r6
   16308:	4628      	mov	r0, r5
   1630a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1630c:	1d23      	adds	r3, r4, #4
   1630e:	d0f6      	beq.n	162fe <bt_gatt_att_max_mtu_changed+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16310:	6864      	ldr	r4, [r4, #4]
   16312:	e7f1      	b.n	162f8 <bt_gatt_att_max_mtu_changed+0xc>
   16314:	200024cc 	.word	0x200024cc

00016318 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
   16318:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1631a:	4a06      	ldr	r2, [pc, #24]	; (16334 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   1631c:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1631e:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   16320:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   16322:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   16326:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1632a:	f00c feb4 	bl	23096 <bt_gatt_foreach_attr>
}
   1632e:	b003      	add	sp, #12
   16330:	f85d fb04 	ldr.w	pc, [sp], #4
   16334:	00016165 	.word	0x00016165

00016338 <db_hash_read>:
{
   16338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1633a:	4915      	ldr	r1, [pc, #84]	; (16390 <db_hash_read+0x58>)
{
   1633c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   16340:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   16342:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   16346:	461f      	mov	r7, r3
   16348:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1634a:	f00e fda3 	bl	24e94 <k_work_cancel_delayable_sync>
   1634e:	f3bf 8f5b 	dmb	ish
   16352:	4b10      	ldr	r3, [pc, #64]	; (16394 <db_hash_read+0x5c>)
   16354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   16356:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1635a:	075b      	lsls	r3, r3, #29
   1635c:	d401      	bmi.n	16362 <db_hash_read+0x2a>
		db_hash_gen(true);
   1635e:	f7ff fc33 	bl	15bc8 <db_hash_gen.isra.0>
	(void)bt_gatt_change_aware(conn, true);
   16362:	2101      	movs	r1, #1
   16364:	4620      	mov	r0, r4
   16366:	f00c fece 	bl	23106 <bt_gatt_change_aware>
	if (offset > value_len) {
   1636a:	2e10      	cmp	r6, #16
   1636c:	d80c      	bhi.n	16388 <db_hash_read+0x50>
	len = MIN(buf_len, value_len - offset);
   1636e:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   16372:	4909      	ldr	r1, [pc, #36]	; (16398 <db_hash_read+0x60>)
	len = MIN(buf_len, value_len - offset);
   16374:	42bc      	cmp	r4, r7
   16376:	bfa8      	it	ge
   16378:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1637a:	4622      	mov	r2, r4
   1637c:	4431      	add	r1, r6
   1637e:	4628      	mov	r0, r5
   16380:	f00b fde7 	bl	21f52 <memcpy>
}
   16384:	4620      	mov	r0, r4
   16386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   16388:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1638c:	e7fa      	b.n	16384 <db_hash_read+0x4c>
   1638e:	bf00      	nop
   16390:	20001720 	.word	0x20001720
   16394:	20001748 	.word	0x20001748
   16398:	200016e0 	.word	0x200016e0

0001639c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1639c:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1639e:	4603      	mov	r3, r0
   163a0:	4a15      	ldr	r2, [pc, #84]	; (163f8 <bt_gatt_disconnected+0x5c>)
{
   163a2:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   163a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   163a8:	2001      	movs	r0, #1
   163aa:	f00c fe74 	bl	23096 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   163ae:	4628      	mov	r0, r5
   163b0:	f7ff f952 	bl	15658 <find_cf_cfg>
	if (!cfg) {
   163b4:	4604      	mov	r4, r0
   163b6:	b1e8      	cbz	r0, 163f4 <bt_gatt_disconnected+0x58>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   163b8:	f105 0688 	add.w	r6, r5, #136	; 0x88
   163bc:	7a28      	ldrb	r0, [r5, #8]
   163be:	4631      	mov	r1, r6
   163c0:	f00c ffc9 	bl	23356 <bt_addr_le_is_bonded>
   163c4:	b920      	cbnz	r0, 163d0 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   163c6:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   163c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   163cc:	f00c bcda 	b.w	22d84 <clear_cf_cfg>
	memcpy(dst, src, sizeof(*dst));
   163d0:	1c60      	adds	r0, r4, #1
   163d2:	2207      	movs	r2, #7
   163d4:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   163d6:	340c      	adds	r4, #12
   163d8:	f00b fdbb 	bl	21f52 <memcpy>
   163dc:	f3bf 8f5b 	dmb	ish
   163e0:	e854 3f00 	ldrex	r3, [r4]
   163e4:	f023 0302 	bic.w	r3, r3, #2
   163e8:	e844 3200 	strex	r2, r3, [r4]
   163ec:	2a00      	cmp	r2, #0
   163ee:	d1f7      	bne.n	163e0 <bt_gatt_disconnected+0x44>
   163f0:	f3bf 8f5b 	dmb	ish
}
   163f4:	bd70      	pop	{r4, r5, r6, pc}
   163f6:	bf00      	nop
   163f8:	00015949 	.word	0x00015949

000163fc <ver_str>:
{
   163fc:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   163fe:	4d0b      	ldr	r5, [pc, #44]	; (1642c <ver_str+0x30>)
{
   16400:	4606      	mov	r6, r0
	const char * const str[] = {
   16402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   16404:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   16406:	ac01      	add	r4, sp, #4
   16408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1640a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1640c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1640e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16410:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
   16412:	2e0c      	cmp	r6, #12
	const char * const str[] = {
   16414:	682b      	ldr	r3, [r5, #0]
   16416:	6023      	str	r3, [r4, #0]
		return str[ver];
   16418:	bf9b      	ittet	ls
   1641a:	ab0e      	addls	r3, sp, #56	; 0x38
   1641c:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
   16420:	4803      	ldrhi	r0, [pc, #12]	; (16430 <ver_str+0x34>)
		return str[ver];
   16422:	f856 0c34 	ldrls.w	r0, [r6, #-52]
}
   16426:	b00e      	add	sp, #56	; 0x38
   16428:	bd70      	pop	{r4, r5, r6, pc}
   1642a:	bf00      	nop
   1642c:	00025370 	.word	0x00025370
   16430:	00026ceb 	.word	0x00026ceb

00016434 <hci_data_buf_overflow>:
   16434:	4905      	ldr	r1, [pc, #20]	; (1644c <hci_data_buf_overflow+0x18>)
   16436:	4a06      	ldr	r2, [pc, #24]	; (16450 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   16438:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   1643a:	4806      	ldr	r0, [pc, #24]	; (16454 <hci_data_buf_overflow+0x20>)
   1643c:	1a52      	subs	r2, r2, r1
   1643e:	08d2      	lsrs	r2, r2, #3
   16440:	0192      	lsls	r2, r2, #6
   16442:	7819      	ldrb	r1, [r3, #0]
   16444:	f042 0202 	orr.w	r2, r2, #2
   16448:	f00b ba8f 	b.w	2196a <log_1>
   1644c:	00025224 	.word	0x00025224
   16450:	00025264 	.word	0x00025264
   16454:	00026cf3 	.word	0x00026cf3

00016458 <hci_disconn_complete_prio>:
{
   16458:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1645a:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   1645c:	781a      	ldrb	r2, [r3, #0]
   1645e:	b972      	cbnz	r2, 1647e <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16460:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   16464:	4620      	mov	r0, r4
   16466:	f7fe fb87 	bl	14b78 <bt_conn_lookup_handle>
	if (!conn) {
   1646a:	4605      	mov	r5, r0
   1646c:	b940      	cbnz	r0, 16480 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1646e:	4b08      	ldr	r3, [pc, #32]	; (16490 <hci_disconn_complete_prio+0x38>)
   16470:	881a      	ldrh	r2, [r3, #0]
   16472:	b922      	cbnz	r2, 1647e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   16474:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   16478:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   1647c:	8018      	strh	r0, [r3, #0]
}
   1647e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   16480:	2101      	movs	r1, #1
   16482:	f7fe fb85 	bl	14b90 <bt_conn_set_state>
	bt_conn_unref(conn);
   16486:	4628      	mov	r0, r5
}
   16488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1648c:	f00c bb17 	b.w	22abe <bt_conn_unref>
   16490:	2000305a 	.word	0x2000305a

00016494 <hci_disconn_complete>:
{
   16494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   16496:	6885      	ldr	r5, [r0, #8]
	if (evt->status) {
   16498:	782e      	ldrb	r6, [r5, #0]
   1649a:	b9ee      	cbnz	r6, 164d8 <hci_disconn_complete+0x44>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1649c:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   164a0:	4638      	mov	r0, r7
   164a2:	f7fe fb69 	bl	14b78 <bt_conn_lookup_handle>
	if (!conn) {
   164a6:	4604      	mov	r4, r0
   164a8:	b960      	cbnz	r0, 164c4 <hci_disconn_complete+0x30>
   164aa:	4b0c      	ldr	r3, [pc, #48]	; (164dc <hci_disconn_complete+0x48>)
   164ac:	4a0c      	ldr	r2, [pc, #48]	; (164e0 <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   164ae:	480d      	ldr	r0, [pc, #52]	; (164e4 <hci_disconn_complete+0x50>)
   164b0:	1ad2      	subs	r2, r2, r3
   164b2:	08d2      	lsrs	r2, r2, #3
   164b4:	0192      	lsls	r2, r2, #6
   164b6:	4639      	mov	r1, r7
   164b8:	f042 0201 	orr.w	r2, r2, #1
}
   164bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   164c0:	f00b ba53 	b.w	2196a <log_1>
	conn->err = evt->reason;
   164c4:	78eb      	ldrb	r3, [r5, #3]
   164c6:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   164c8:	4631      	mov	r1, r6
   164ca:	f7fe fb61 	bl	14b90 <bt_conn_set_state>
		bt_conn_unref(conn);
   164ce:	4620      	mov	r0, r4
}
   164d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   164d4:	f00c baf3 	b.w	22abe <bt_conn_unref>
}
   164d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   164da:	bf00      	nop
   164dc:	00025224 	.word	0x00025224
   164e0:	00025264 	.word	0x00025264
   164e4:	00026d1b 	.word	0x00026d1b

000164e8 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   164e8:	6883      	ldr	r3, [r0, #8]
{
   164ea:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   164ec:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   164ee:	4620      	mov	r0, r4
   164f0:	f7fe fb42 	bl	14b78 <bt_conn_lookup_handle>
	if (!conn) {
   164f4:	b960      	cbnz	r0, 16510 <le_data_len_change+0x28>
   164f6:	4a08      	ldr	r2, [pc, #32]	; (16518 <le_data_len_change+0x30>)
   164f8:	4b08      	ldr	r3, [pc, #32]	; (1651c <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   164fa:	4809      	ldr	r0, [pc, #36]	; (16520 <le_data_len_change+0x38>)
   164fc:	1ad2      	subs	r2, r2, r3
   164fe:	08d2      	lsrs	r2, r2, #3
   16500:	0192      	lsls	r2, r2, #6
   16502:	4621      	mov	r1, r4
   16504:	f042 0201 	orr.w	r2, r2, #1
}
   16508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1650c:	f00b ba2d 	b.w	2196a <log_1>
}
   16510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   16514:	f00c bad3 	b.w	22abe <bt_conn_unref>
   16518:	00025264 	.word	0x00025264
   1651c:	00025224 	.word	0x00025224
   16520:	00026d41 	.word	0x00026d41

00016524 <hci_hardware_error>:
{
   16524:	b508      	push	{r3, lr}
	return net_buf_simple_pull_mem(&buf->b, len);
   16526:	2101      	movs	r1, #1
   16528:	3008      	adds	r0, #8
   1652a:	f00d fd67 	bl	23ffc <net_buf_simple_pull_mem>
   1652e:	4b06      	ldr	r3, [pc, #24]	; (16548 <hci_hardware_error+0x24>)
   16530:	4a06      	ldr	r2, [pc, #24]	; (1654c <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   16532:	7801      	ldrb	r1, [r0, #0]
   16534:	4806      	ldr	r0, [pc, #24]	; (16550 <hci_hardware_error+0x2c>)
   16536:	1ad2      	subs	r2, r2, r3
   16538:	08d2      	lsrs	r2, r2, #3
   1653a:	0192      	lsls	r2, r2, #6
}
   1653c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   16540:	f042 0201 	orr.w	r2, r2, #1
   16544:	f00b ba11 	b.w	2196a <log_1>
   16548:	00025224 	.word	0x00025224
   1654c:	00025264 	.word	0x00025264
   16550:	00026d65 	.word	0x00026d65

00016554 <hci_vendor_event>:
{
   16554:	b510      	push	{r4, lr}
   16556:	4a0a      	ldr	r2, [pc, #40]	; (16580 <hci_vendor_event+0x2c>)
   16558:	4c0a      	ldr	r4, [pc, #40]	; (16584 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
   1655a:	8981      	ldrh	r1, [r0, #12]
   1655c:	6880      	ldr	r0, [r0, #8]
   1655e:	1aa4      	subs	r4, r4, r2
   16560:	f7fc fd7a 	bl	13058 <bt_hex_real>
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   16564:	f7fb fae2 	bl	11b2c <z_log_strdup>
   16568:	08e4      	lsrs	r4, r4, #3
   1656a:	01a4      	lsls	r4, r4, #6
   1656c:	f044 0402 	orr.w	r4, r4, #2
   16570:	4601      	mov	r1, r0
   16572:	4622      	mov	r2, r4
   16574:	4804      	ldr	r0, [pc, #16]	; (16588 <hci_vendor_event+0x34>)
}
   16576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   1657a:	f00b b9f6 	b.w	2196a <log_1>
   1657e:	bf00      	nop
   16580:	00025224 	.word	0x00025224
   16584:	00025264 	.word	0x00025264
   16588:	00026d87 	.word	0x00026d87

0001658c <hci_encrypt_key_refresh_complete>:
{
   1658c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   1658e:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   16590:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   16594:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   16596:	4630      	mov	r0, r6
   16598:	f7fe faee 	bl	14b78 <bt_conn_lookup_handle>
	if (!conn) {
   1659c:	4604      	mov	r4, r0
   1659e:	b960      	cbnz	r0, 165ba <hci_encrypt_key_refresh_complete+0x2e>
   165a0:	4a1e      	ldr	r2, [pc, #120]	; (1661c <hci_encrypt_key_refresh_complete+0x90>)
   165a2:	4b1f      	ldr	r3, [pc, #124]	; (16620 <hci_encrypt_key_refresh_complete+0x94>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   165a4:	481f      	ldr	r0, [pc, #124]	; (16624 <hci_encrypt_key_refresh_complete+0x98>)
   165a6:	1ad2      	subs	r2, r2, r3
   165a8:	08d2      	lsrs	r2, r2, #3
   165aa:	0192      	lsls	r2, r2, #6
   165ac:	4631      	mov	r1, r6
   165ae:	f042 0201 	orr.w	r2, r2, #1
}
   165b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   165b6:	f00b b9d8 	b.w	2196a <log_1>
	if (status) {
   165ba:	b165      	cbz	r5, 165d6 <hci_encrypt_key_refresh_complete+0x4a>
	switch (hci_err) {
   165bc:	2d29      	cmp	r5, #41	; 0x29
   165be:	bf96      	itet	ls
   165c0:	4b19      	ldrls	r3, [pc, #100]	; (16628 <hci_encrypt_key_refresh_complete+0x9c>)
	if (status) {
   165c2:	2209      	movhi	r2, #9
   165c4:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
   165c6:	4629      	mov	r1, r5
   165c8:	f7fe fcac 	bl	14f24 <bt_conn_security_changed>
	bt_conn_unref(conn);
   165cc:	4620      	mov	r0, r4
}
   165ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   165d2:	f00c ba74 	b.w	22abe <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   165d6:	7883      	ldrb	r3, [r0, #2]
   165d8:	2b01      	cmp	r3, #1
   165da:	d107      	bne.n	165ec <hci_encrypt_key_refresh_complete+0x60>
		bt_smp_update_keys(conn);
   165dc:	f003 fcf6 	bl	19fcc <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   165e0:	4620      	mov	r0, r4
   165e2:	f00c fdd4 	bl	2318e <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   165e6:	2800      	cmp	r0, #0
   165e8:	bf08      	it	eq
   165ea:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   165ec:	4b0e      	ldr	r3, [pc, #56]	; (16628 <hci_encrypt_key_refresh_complete+0x9c>)
   165ee:	4629      	mov	r1, r5
   165f0:	5d5a      	ldrb	r2, [r3, r5]
   165f2:	4620      	mov	r0, r4
   165f4:	f7fe fc96 	bl	14f24 <bt_conn_security_changed>
	if (status) {
   165f8:	2d00      	cmp	r5, #0
   165fa:	d0e7      	beq.n	165cc <hci_encrypt_key_refresh_complete+0x40>
   165fc:	4b08      	ldr	r3, [pc, #32]	; (16620 <hci_encrypt_key_refresh_complete+0x94>)
   165fe:	4907      	ldr	r1, [pc, #28]	; (1661c <hci_encrypt_key_refresh_complete+0x90>)
		BT_ERR("Failed to set required security level");
   16600:	480a      	ldr	r0, [pc, #40]	; (1662c <hci_encrypt_key_refresh_complete+0xa0>)
   16602:	1ac9      	subs	r1, r1, r3
   16604:	08c9      	lsrs	r1, r1, #3
   16606:	0189      	lsls	r1, r1, #6
   16608:	f041 0101 	orr.w	r1, r1, #1
   1660c:	f00b f9a0 	bl	21950 <log_0>
		bt_conn_disconnect(conn, status);
   16610:	4629      	mov	r1, r5
   16612:	4620      	mov	r0, r4
   16614:	f00c fa98 	bl	22b48 <bt_conn_disconnect>
   16618:	e7d8      	b.n	165cc <hci_encrypt_key_refresh_complete+0x40>
   1661a:	bf00      	nop
   1661c:	00025264 	.word	0x00025264
   16620:	00025224 	.word	0x00025224
   16624:	00026d1b 	.word	0x00026d1b
   16628:	000272ea 	.word	0x000272ea
   1662c:	00026dab 	.word	0x00026dab

00016630 <hci_encrypt_change>:
{
   16630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   16632:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16634:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   16638:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   1663a:	4638      	mov	r0, r7
   1663c:	f7fe fa9c 	bl	14b78 <bt_conn_lookup_handle>
	if (!conn) {
   16640:	4604      	mov	r4, r0
   16642:	b960      	cbnz	r0, 1665e <hci_encrypt_change+0x2e>
   16644:	4b1f      	ldr	r3, [pc, #124]	; (166c4 <hci_encrypt_change+0x94>)
   16646:	4a20      	ldr	r2, [pc, #128]	; (166c8 <hci_encrypt_change+0x98>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   16648:	4820      	ldr	r0, [pc, #128]	; (166cc <hci_encrypt_change+0x9c>)
   1664a:	1ad2      	subs	r2, r2, r3
   1664c:	08d2      	lsrs	r2, r2, #3
   1664e:	0192      	lsls	r2, r2, #6
   16650:	4639      	mov	r1, r7
   16652:	f042 0201 	orr.w	r2, r2, #1
}
   16656:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   1665a:	f00b b986 	b.w	2196a <log_1>
	if (status) {
   1665e:	b165      	cbz	r5, 1667a <hci_encrypt_change+0x4a>
	switch (hci_err) {
   16660:	2d29      	cmp	r5, #41	; 0x29
   16662:	bf96      	itet	ls
   16664:	4b1a      	ldrls	r3, [pc, #104]	; (166d0 <hci_encrypt_change+0xa0>)
	if (status) {
   16666:	2209      	movhi	r2, #9
   16668:	5d5a      	ldrbls	r2, [r3, r5]
		bt_conn_security_changed(conn, status,
   1666a:	4629      	mov	r1, r5
   1666c:	f7fe fc5a 	bl	14f24 <bt_conn_security_changed>
	bt_conn_unref(conn);
   16670:	4620      	mov	r0, r4
}
   16672:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   16676:	f00c ba22 	b.w	22abe <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   1667a:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   1667c:	78f3      	ldrb	r3, [r6, #3]
   1667e:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   16680:	2a01      	cmp	r2, #1
   16682:	d108      	bne.n	16696 <hci_encrypt_change+0x66>
		if (conn->encrypt) {
   16684:	b10b      	cbz	r3, 1668a <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
   16686:	f003 fca1 	bl	19fcc <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   1668a:	4620      	mov	r0, r4
   1668c:	f00c fd7f 	bl	2318e <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
   16690:	2800      	cmp	r0, #0
   16692:	bf08      	it	eq
   16694:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   16696:	4b0e      	ldr	r3, [pc, #56]	; (166d0 <hci_encrypt_change+0xa0>)
   16698:	4629      	mov	r1, r5
   1669a:	5d5a      	ldrb	r2, [r3, r5]
   1669c:	4620      	mov	r0, r4
   1669e:	f7fe fc41 	bl	14f24 <bt_conn_security_changed>
	if (status) {
   166a2:	2d00      	cmp	r5, #0
   166a4:	d0e4      	beq.n	16670 <hci_encrypt_change+0x40>
   166a6:	4b07      	ldr	r3, [pc, #28]	; (166c4 <hci_encrypt_change+0x94>)
   166a8:	4907      	ldr	r1, [pc, #28]	; (166c8 <hci_encrypt_change+0x98>)
		BT_ERR("Failed to set required security level");
   166aa:	480a      	ldr	r0, [pc, #40]	; (166d4 <hci_encrypt_change+0xa4>)
   166ac:	1ac9      	subs	r1, r1, r3
   166ae:	08c9      	lsrs	r1, r1, #3
   166b0:	0189      	lsls	r1, r1, #6
   166b2:	f041 0101 	orr.w	r1, r1, #1
   166b6:	f00b f94b 	bl	21950 <log_0>
		bt_conn_disconnect(conn, status);
   166ba:	4629      	mov	r1, r5
   166bc:	4620      	mov	r0, r4
   166be:	f00c fa43 	bl	22b48 <bt_conn_disconnect>
   166c2:	e7d5      	b.n	16670 <hci_encrypt_change+0x40>
   166c4:	00025224 	.word	0x00025224
   166c8:	00025264 	.word	0x00025264
   166cc:	00026d1b 	.word	0x00026d1b
   166d0:	000272ea 	.word	0x000272ea
   166d4:	00026dab 	.word	0x00026dab

000166d8 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   166d8:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   166da:	4c0c      	ldr	r4, [pc, #48]	; (1670c <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   166dc:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   166de:	2205      	movs	r2, #5
   166e0:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   166e4:	f7fe fca4 	bl	15030 <bt_conn_lookup_state_le>
		if (!conn) {
   166e8:	b970      	cbnz	r0, 16708 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
   166ea:	4b09      	ldr	r3, [pc, #36]	; (16710 <find_pending_connect.part.0+0x38>)
   166ec:	6818      	ldr	r0, [r3, #0]
   166ee:	889a      	ldrh	r2, [r3, #4]
   166f0:	9000      	str	r0, [sp, #0]
   166f2:	799b      	ldrb	r3, [r3, #6]
   166f4:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   166f8:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
   166fc:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   16700:	2204      	movs	r2, #4
   16702:	4669      	mov	r1, sp
   16704:	f7fe fc94 	bl	15030 <bt_conn_lookup_state_le>
}
   16708:	b002      	add	sp, #8
   1670a:	bd10      	pop	{r4, pc}
   1670c:	200002a8 	.word	0x200002a8
   16710:	000253a4 	.word	0x000253a4

00016714 <hci_cmd_done>:
{
   16714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16718:	4606      	mov	r6, r0
   1671a:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1671c:	7990      	ldrb	r0, [r2, #6]
   1671e:	f8df 8134 	ldr.w	r8, [pc, #308]	; 16854 <hci_cmd_done+0x140>
{
   16722:	460f      	mov	r7, r1
   16724:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   16726:	f003 fd31 	bl	1a18c <net_buf_pool_get>
   1672a:	4580      	cmp	r8, r0
   1672c:	d016      	beq.n	1675c <hci_cmd_done+0x48>
   1672e:	4b44      	ldr	r3, [pc, #272]	; (16840 <hci_cmd_done+0x12c>)
   16730:	4d44      	ldr	r5, [pc, #272]	; (16844 <hci_cmd_done+0x130>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   16732:	79a0      	ldrb	r0, [r4, #6]
   16734:	9600      	str	r6, [sp, #0]
   16736:	1aed      	subs	r5, r5, r3
   16738:	08ed      	lsrs	r5, r5, #3
   1673a:	9001      	str	r0, [sp, #4]
   1673c:	f003 fd26 	bl	1a18c <net_buf_pool_get>
   16740:	01ad      	lsls	r5, r5, #6
   16742:	f045 0502 	orr.w	r5, r5, #2
   16746:	e9cd 0802 	strd	r0, r8, [sp, #8]
   1674a:	462b      	mov	r3, r5
   1674c:	483e      	ldr	r0, [pc, #248]	; (16848 <hci_cmd_done+0x134>)
   1674e:	2204      	movs	r2, #4
   16750:	4669      	mov	r1, sp
   16752:	f00b f953 	bl	219fc <log_n>
}
   16756:	b005      	add	sp, #20
   16758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   1675c:	4620      	mov	r0, r4
   1675e:	f003 fd1d 	bl	1a19c <net_buf_id>
   16762:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 16858 <hci_cmd_done+0x144>
   16766:	f04f 090c 	mov.w	r9, #12
   1676a:	fb09 8000 	mla	r0, r9, r0, r8
   1676e:	4645      	mov	r5, r8
   16770:	8843      	ldrh	r3, [r0, #2]
   16772:	42b3      	cmp	r3, r6
   16774:	d012      	beq.n	1679c <hci_cmd_done+0x88>
   16776:	4b32      	ldr	r3, [pc, #200]	; (16840 <hci_cmd_done+0x12c>)
   16778:	4d32      	ldr	r5, [pc, #200]	; (16844 <hci_cmd_done+0x130>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   1677a:	4620      	mov	r0, r4
   1677c:	1aed      	subs	r5, r5, r3
   1677e:	f003 fd0d 	bl	1a19c <net_buf_id>
   16782:	08ed      	lsrs	r5, r5, #3
   16784:	fb09 8000 	mla	r0, r9, r0, r8
   16788:	01ad      	lsls	r5, r5, #6
   1678a:	f045 0502 	orr.w	r5, r5, #2
   1678e:	8842      	ldrh	r2, [r0, #2]
   16790:	482e      	ldr	r0, [pc, #184]	; (1684c <hci_cmd_done+0x138>)
   16792:	462b      	mov	r3, r5
   16794:	4631      	mov	r1, r6
   16796:	f00b f8fc 	bl	21992 <log_2>
		return;
   1679a:	e7dc      	b.n	16756 <hci_cmd_done+0x42>
	if (bt_dev.sent_cmd) {
   1679c:	4e2c      	ldr	r6, [pc, #176]	; (16850 <hci_cmd_done+0x13c>)
   1679e:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   167a2:	b120      	cbz	r0, 167ae <hci_cmd_done+0x9a>
		net_buf_unref(bt_dev.sent_cmd);
   167a4:	f003 fdae 	bl	1a304 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   167a8:	2300      	movs	r3, #0
   167aa:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   167ae:	4620      	mov	r0, r4
   167b0:	f003 fcf4 	bl	1a19c <net_buf_id>
   167b4:	260c      	movs	r6, #12
   167b6:	fb06 5000 	mla	r0, r6, r0, r5
   167ba:	6843      	ldr	r3, [r0, #4]
   167bc:	b1e3      	cbz	r3, 167f8 <hci_cmd_done+0xe4>
   167be:	b9df      	cbnz	r7, 167f8 <hci_cmd_done+0xe4>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   167c0:	4620      	mov	r0, r4
   167c2:	f003 fceb 	bl	1a19c <net_buf_id>
   167c6:	fb06 5000 	mla	r0, r6, r0, r5
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   167ca:	2201      	movs	r2, #1
   167cc:	6840      	ldr	r0, [r0, #4]
   167ce:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
   167d2:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   167d4:	f001 061f 	and.w	r6, r1, #31
   167d8:	40b2      	lsls	r2, r6
	if (val) {
   167da:	0949      	lsrs	r1, r1, #5
   167dc:	b318      	cbz	r0, 16826 <hci_cmd_done+0x112>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   167de:	f3bf 8f5b 	dmb	ish
   167e2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   167e6:	e853 1f00 	ldrex	r1, [r3]
   167ea:	4311      	orrs	r1, r2
   167ec:	e843 1000 	strex	r0, r1, [r3]
   167f0:	2800      	cmp	r0, #0
   167f2:	d1f8      	bne.n	167e6 <hci_cmd_done+0xd2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   167f4:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
   167f8:	4620      	mov	r0, r4
   167fa:	f003 fccf 	bl	1a19c <net_buf_id>
   167fe:	260c      	movs	r6, #12
   16800:	fb06 5000 	mla	r0, r6, r0, r5
   16804:	6883      	ldr	r3, [r0, #8]
   16806:	2b00      	cmp	r3, #0
   16808:	d0a5      	beq.n	16756 <hci_cmd_done+0x42>
		cmd(buf)->status = status;
   1680a:	4620      	mov	r0, r4
   1680c:	f003 fcc6 	bl	1a19c <net_buf_id>
   16810:	4370      	muls	r0, r6
   16812:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   16814:	4620      	mov	r0, r4
   16816:	f003 fcc1 	bl	1a19c <net_buf_id>
   1681a:	fb06 5500 	mla	r5, r6, r0, r5
   1681e:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   16820:	f006 fb44 	bl	1ceac <z_impl_k_sem_give>
}
   16824:	e797      	b.n	16756 <hci_cmd_done+0x42>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16826:	43d2      	mvns	r2, r2
   16828:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1682c:	f3bf 8f5b 	dmb	ish
   16830:	e853 1f00 	ldrex	r1, [r3]
   16834:	4011      	ands	r1, r2
   16836:	e843 1000 	strex	r0, r1, [r3]
   1683a:	2800      	cmp	r0, #0
   1683c:	d0da      	beq.n	167f4 <hci_cmd_done+0xe0>
   1683e:	e7f7      	b.n	16830 <hci_cmd_done+0x11c>
   16840:	00025224 	.word	0x00025224
   16844:	00025264 	.word	0x00025264
   16848:	00026dd1 	.word	0x00026dd1
   1684c:	00026e06 	.word	0x00026e06
   16850:	200002a8 	.word	0x200002a8
   16854:	200008dc 	.word	0x200008dc
   16858:	20002514 	.word	0x20002514

0001685c <handle_event>:
{
   1685c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1685e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   16862:	4605      	mov	r5, r0
   16864:	4608      	mov	r0, r1
		if (handler->event != event) {
   16866:	7811      	ldrb	r1, [r2, #0]
   16868:	42a9      	cmp	r1, r5
   1686a:	d01a      	beq.n	168a2 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
   1686c:	3208      	adds	r2, #8
   1686e:	429a      	cmp	r2, r3
   16870:	d1f9      	bne.n	16866 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   16872:	8986      	ldrh	r6, [r0, #12]
   16874:	4b16      	ldr	r3, [pc, #88]	; (168d0 <handle_event+0x74>)
   16876:	4c17      	ldr	r4, [pc, #92]	; (168d4 <handle_event+0x78>)
   16878:	6880      	ldr	r0, [r0, #8]
   1687a:	4631      	mov	r1, r6
   1687c:	1ae4      	subs	r4, r4, r3
   1687e:	f7fc fbeb 	bl	13058 <bt_hex_real>
   16882:	f7fb f953 	bl	11b2c <z_log_strdup>
   16886:	08e4      	lsrs	r4, r4, #3
   16888:	01a4      	lsls	r4, r4, #6
   1688a:	f044 0402 	orr.w	r4, r4, #2
   1688e:	4603      	mov	r3, r0
   16890:	f8ad 4000 	strh.w	r4, [sp]
   16894:	4810      	ldr	r0, [pc, #64]	; (168d8 <handle_event+0x7c>)
   16896:	4632      	mov	r2, r6
   16898:	4629      	mov	r1, r5
   1689a:	f00b f893 	bl	219c4 <log_3>
}
   1689e:	b002      	add	sp, #8
   168a0:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
   168a2:	8981      	ldrh	r1, [r0, #12]
   168a4:	7853      	ldrb	r3, [r2, #1]
   168a6:	428b      	cmp	r3, r1
   168a8:	d90d      	bls.n	168c6 <handle_event+0x6a>
   168aa:	4a09      	ldr	r2, [pc, #36]	; (168d0 <handle_event+0x74>)
   168ac:	4b09      	ldr	r3, [pc, #36]	; (168d4 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
   168ae:	480b      	ldr	r0, [pc, #44]	; (168dc <handle_event+0x80>)
   168b0:	1a9b      	subs	r3, r3, r2
   168b2:	08db      	lsrs	r3, r3, #3
   168b4:	019b      	lsls	r3, r3, #6
   168b6:	f043 0301 	orr.w	r3, r3, #1
   168ba:	462a      	mov	r2, r5
}
   168bc:	b002      	add	sp, #8
   168be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   168c2:	f00b b866 	b.w	21992 <log_2>
		handler->handler(buf);
   168c6:	6853      	ldr	r3, [r2, #4]
}
   168c8:	b002      	add	sp, #8
   168ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
   168ce:	4718      	bx	r3
   168d0:	00025224 	.word	0x00025224
   168d4:	00025264 	.word	0x00025264
   168d8:	00026e5b 	.word	0x00026e5b
   168dc:	00026e39 	.word	0x00026e39

000168e0 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   168e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   168e4:	4b47      	ldr	r3, [pc, #284]	; (16a04 <hci_rx_thread+0x124>)
   168e6:	4d48      	ldr	r5, [pc, #288]	; (16a08 <hci_rx_thread+0x128>)

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   168e8:	f8df 813c 	ldr.w	r8, [pc, #316]	; 16a28 <hci_rx_thread+0x148>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   168ec:	f8df 913c 	ldr.w	r9, [pc, #316]	; 16a2c <hci_rx_thread+0x14c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   168f0:	4f46      	ldr	r7, [pc, #280]	; (16a0c <hci_rx_thread+0x12c>)
   168f2:	1aed      	subs	r5, r5, r3
   168f4:	08ed      	lsrs	r5, r5, #3
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   168f6:	f04f 32ff 	mov.w	r2, #4294967295
   168fa:	f04f 33ff 	mov.w	r3, #4294967295
   168fe:	4640      	mov	r0, r8
   16900:	f00d fb04 	bl	23f0c <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16904:	7d01      	ldrb	r1, [r0, #20]

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
   16906:	2901      	cmp	r1, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   16908:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   1690a:	d046      	beq.n	1699a <hci_rx_thread+0xba>
   1690c:	2903      	cmp	r1, #3
   1690e:	d173      	bne.n	169f8 <hci_rx_thread+0x118>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16910:	8983      	ldrh	r3, [r0, #12]
   16912:	2b03      	cmp	r3, #3
   16914:	d80c      	bhi.n	16930 <hci_rx_thread+0x50>
   16916:	493e      	ldr	r1, [pc, #248]	; (16a10 <hci_rx_thread+0x130>)
   16918:	483e      	ldr	r0, [pc, #248]	; (16a14 <hci_rx_thread+0x134>)
   1691a:	f44f 73db 	mov.w	r3, #438	; 0x1b6
   1691e:	463a      	mov	r2, r7
   16920:	f00b fa6c 	bl	21dfc <printk>
   16924:	4040      	eors	r0, r0
   16926:	f380 8811 	msr	BASEPRI, r0
   1692a:	f04f 0003 	mov.w	r0, #3
   1692e:	df02      	svc	2
   16930:	2104      	movs	r1, #4
   16932:	f104 0008 	add.w	r0, r4, #8
   16936:	f00d fb61 	bl	23ffc <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1693a:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
   1693c:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   1693e:	f8b0 a000 	ldrh.w	sl, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   16942:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   16944:	f3ca 000b 	ubfx	r0, sl, #0, #12
	if (buf->len != len) {
   16948:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
   1694a:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1694c:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   1694e:	d009      	beq.n	16964 <hci_rx_thread+0x84>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   16950:	01ab      	lsls	r3, r5, #6
   16952:	4831      	ldr	r0, [pc, #196]	; (16a18 <hci_rx_thread+0x138>)
   16954:	f043 0301 	orr.w	r3, r3, #1
   16958:	f00b f81b 	bl	21992 <log_2>
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   1695c:	4620      	mov	r0, r4
   1695e:	f003 fcd1 	bl	1a304 <net_buf_unref>
			break;
   16962:	e017      	b.n	16994 <hci_rx_thread+0xb4>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   16964:	f7fe f908 	bl	14b78 <bt_conn_lookup_handle>
	if (!conn) {
   16968:	4606      	mov	r6, r0
   1696a:	b938      	cbnz	r0, 1697c <hci_rx_thread+0x9c>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   1696c:	01aa      	lsls	r2, r5, #6
   1696e:	8ae1      	ldrh	r1, [r4, #22]
   16970:	482a      	ldr	r0, [pc, #168]	; (16a1c <hci_rx_thread+0x13c>)
   16972:	f042 0201 	orr.w	r2, r2, #1
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   16976:	f00a fff8 	bl	2196a <log_1>
   1697a:	e7ef      	b.n	1695c <hci_rx_thread+0x7c>
	acl(buf)->index = bt_conn_index(conn);
   1697c:	f7fe f9ee 	bl	14d5c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   16980:	ea4f 321a 	mov.w	r2, sl, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   16984:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   16986:	4621      	mov	r1, r4
   16988:	4630      	mov	r0, r6
   1698a:	f7fd ffbf 	bl	1490c <bt_conn_recv>
	bt_conn_unref(conn);
   1698e:	4630      	mov	r0, r6
   16990:	f00c f895 	bl	22abe <bt_conn_unref>
	z_impl_k_yield();
   16994:	f006 f968 	bl	1cc68 <z_impl_k_yield>
	while (1) {
   16998:	e7ad      	b.n	168f6 <hci_rx_thread+0x16>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1699a:	8983      	ldrh	r3, [r0, #12]
   1699c:	2b01      	cmp	r3, #1
   1699e:	d80c      	bhi.n	169ba <hci_rx_thread+0xda>
   169a0:	491b      	ldr	r1, [pc, #108]	; (16a10 <hci_rx_thread+0x130>)
   169a2:	481c      	ldr	r0, [pc, #112]	; (16a14 <hci_rx_thread+0x134>)
   169a4:	f640 130d 	movw	r3, #2317	; 0x90d
   169a8:	463a      	mov	r2, r7
   169aa:	f00b fa27 	bl	21dfc <printk>
   169ae:	4040      	eors	r0, r0
   169b0:	f380 8811 	msr	BASEPRI, r0
   169b4:	f04f 0003 	mov.w	r0, #3
   169b8:	df02      	svc	2
   169ba:	2102      	movs	r1, #2
   169bc:	f104 0008 	add.w	r0, r4, #8
   169c0:	f00d fb1c 	bl	23ffc <net_buf_simple_pull_mem>
   169c4:	4606      	mov	r6, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   169c6:	7800      	ldrb	r0, [r0, #0]
   169c8:	f00c fbcf 	bl	2316a <bt_hci_evt_get_flags>
   169cc:	0783      	lsls	r3, r0, #30
   169ce:	d40c      	bmi.n	169ea <hci_rx_thread+0x10a>
   169d0:	4913      	ldr	r1, [pc, #76]	; (16a20 <hci_rx_thread+0x140>)
   169d2:	4810      	ldr	r0, [pc, #64]	; (16a14 <hci_rx_thread+0x134>)
   169d4:	f640 1311 	movw	r3, #2321	; 0x911
   169d8:	463a      	mov	r2, r7
   169da:	f00b fa0f 	bl	21dfc <printk>
   169de:	4040      	eors	r0, r0
   169e0:	f380 8811 	msr	BASEPRI, r0
   169e4:	f04f 0003 	mov.w	r0, #3
   169e8:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   169ea:	7830      	ldrb	r0, [r6, #0]
   169ec:	2306      	movs	r3, #6
   169ee:	464a      	mov	r2, r9
   169f0:	4621      	mov	r1, r4
   169f2:	f7ff ff33 	bl	1685c <handle_event>
	net_buf_unref(buf);
   169f6:	e7b1      	b.n	1695c <hci_rx_thread+0x7c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   169f8:	01aa      	lsls	r2, r5, #6
   169fa:	480a      	ldr	r0, [pc, #40]	; (16a24 <hci_rx_thread+0x144>)
   169fc:	f042 0201 	orr.w	r2, r2, #1
   16a00:	e7b9      	b.n	16976 <hci_rx_thread+0x96>
   16a02:	bf00      	nop
   16a04:	00025224 	.word	0x00025224
   16a08:	00025264 	.word	0x00025264
   16a0c:	00026e7d 	.word	0x00026e7d
   16a10:	00026eb1 	.word	0x00026eb1
   16a14:	0002694b 	.word	0x0002694b
   16a18:	00026eca 	.word	0x00026eca
   16a1c:	00026eee 	.word	0x00026eee
   16a20:	00026f10 	.word	0x00026f10
   16a24:	00026f3e 	.word	0x00026f3e
   16a28:	200003e4 	.word	0x200003e4
   16a2c:	00025900 	.word	0x00025900

00016a30 <hci_le_meta_event>:
{
   16a30:	b510      	push	{r4, lr}
   16a32:	2101      	movs	r1, #1
   16a34:	4604      	mov	r4, r0
   16a36:	3008      	adds	r0, #8
   16a38:	f00d fae0 	bl	23ffc <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   16a3c:	4621      	mov	r1, r4
   16a3e:	4a03      	ldr	r2, [pc, #12]	; (16a4c <hci_le_meta_event+0x1c>)
   16a40:	7800      	ldrb	r0, [r0, #0]
}
   16a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   16a46:	230a      	movs	r3, #10
   16a48:	f7ff bf08 	b.w	1685c <handle_event>
   16a4c:	00025890 	.word	0x00025890

00016a50 <hci_num_completed_packets>:
{
   16a50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a54:	4d39      	ldr	r5, [pc, #228]	; (16b3c <hci_num_completed_packets+0xec>)
   16a56:	4b3a      	ldr	r3, [pc, #232]	; (16b40 <hci_num_completed_packets+0xf0>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   16a58:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
   16a5c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 16b48 <hci_num_completed_packets+0xf8>
   16a60:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
   16a62:	2600      	movs	r6, #0
   16a64:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
   16a66:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
   16a68:	f898 3000 	ldrb.w	r3, [r8]
   16a6c:	429e      	cmp	r6, r3
   16a6e:	db01      	blt.n	16a74 <hci_num_completed_packets+0x24>
}
   16a70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   16a74:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   16a78:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   16a7c:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   16a80:	4658      	mov	r0, fp
   16a82:	f7fe f879 	bl	14b78 <bt_conn_lookup_handle>
		if (!conn) {
   16a86:	4604      	mov	r4, r0
   16a88:	b1d8      	cbz	r0, 16ac2 <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   16a8a:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   16a8e:	2f00      	cmp	r7, #0
   16a90:	d033      	beq.n	16afa <hci_num_completed_packets+0xaa>
	__asm__ volatile(
   16a92:	f04f 0340 	mov.w	r3, #64	; 0x40
   16a96:	f3ef 8211 	mrs	r2, BASEPRI
   16a9a:	f383 8812 	msr	BASEPRI_MAX, r3
   16a9e:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   16aa2:	69e3      	ldr	r3, [r4, #28]
   16aa4:	b1b3      	cbz	r3, 16ad4 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
   16aa6:	3b01      	subs	r3, #1
   16aa8:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   16aaa:	f382 8811 	msr	BASEPRI, r2
   16aae:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   16ab2:	4620      	mov	r0, r4
   16ab4:	f7fd fef2 	bl	1489c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   16ab8:	3f01      	subs	r7, #1
   16aba:	f006 f9f7 	bl	1ceac <z_impl_k_sem_give>
   16abe:	b2bf      	uxth	r7, r7
   16ac0:	e7e5      	b.n	16a8e <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
   16ac2:	01aa      	lsls	r2, r5, #6
   16ac4:	481f      	ldr	r0, [pc, #124]	; (16b44 <hci_num_completed_packets+0xf4>)
   16ac6:	f042 0201 	orr.w	r2, r2, #1
   16aca:	4659      	mov	r1, fp
   16acc:	f00a ff4d 	bl	2196a <log_1>
	for (i = 0; i < evt->num_handles; i++) {
   16ad0:	3601      	adds	r6, #1
   16ad2:	e7c9      	b.n	16a68 <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
   16ad4:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   16ad6:	b12b      	cbz	r3, 16ae4 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16ad8:	69a1      	ldr	r1, [r4, #24]
   16ada:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   16adc:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16ade:	428b      	cmp	r3, r1
	list->tail = node;
   16ae0:	bf08      	it	eq
   16ae2:	61a0      	streq	r0, [r4, #24]
   16ae4:	f382 8811 	msr	BASEPRI, r2
   16ae8:	f3bf 8f6f 	isb	sy
			if (!node) {
   16aec:	b94b      	cbnz	r3, 16b02 <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
   16aee:	01a9      	lsls	r1, r5, #6
   16af0:	f041 0101 	orr.w	r1, r1, #1
   16af4:	4650      	mov	r0, sl
   16af6:	f00a ff2b 	bl	21950 <log_0>
		bt_conn_unref(conn);
   16afa:	4620      	mov	r0, r4
   16afc:	f00b ffdf 	bl	22abe <bt_conn_unref>
   16b00:	e7e6      	b.n	16ad0 <hci_num_completed_packets+0x80>
	__asm__ volatile(
   16b02:	f04f 0240 	mov.w	r2, #64	; 0x40
   16b06:	f3ef 8111 	mrs	r1, BASEPRI
   16b0a:	f382 8812 	msr	BASEPRI_MAX, r2
   16b0e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   16b12:	68da      	ldr	r2, [r3, #12]
   16b14:	61e2      	str	r2, [r4, #28]
	parent->next = child;
   16b16:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
   16b1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   16b1c:	f8c3 900c 	str.w	r9, [r3, #12]
   16b20:	b94a      	cbnz	r2, 16b36 <hci_num_completed_packets+0xe6>
	list->head = node;
   16b22:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   16b26:	f381 8811 	msr	BASEPRI, r1
   16b2a:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   16b2e:	4658      	mov	r0, fp
   16b30:	f006 fde8 	bl	1d704 <k_work_submit>
   16b34:	e7bd      	b.n	16ab2 <hci_num_completed_packets+0x62>
	parent->next = child;
   16b36:	6013      	str	r3, [r2, #0]
	list->tail = node;
   16b38:	6263      	str	r3, [r4, #36]	; 0x24
}
   16b3a:	e7f4      	b.n	16b26 <hci_num_completed_packets+0xd6>
   16b3c:	00025264 	.word	0x00025264
   16b40:	00025224 	.word	0x00025224
   16b44:	00026f52 	.word	0x00026f52
   16b48:	00026f6e 	.word	0x00026f6e

00016b4c <hci_tx_thread>:
{
   16b4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b50:	4d51      	ldr	r5, [pc, #324]	; (16c98 <hci_tx_thread+0x14c>)
   16b52:	4b52      	ldr	r3, [pc, #328]	; (16c9c <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
   16b54:	f8df 914c 	ldr.w	r9, [pc, #332]	; 16ca4 <hci_tx_thread+0x158>
		BT_ASSERT(err == 0);
   16b58:	f8df a174 	ldr.w	sl, [pc, #372]	; 16cd0 <hci_tx_thread+0x184>
   16b5c:	1aed      	subs	r5, r5, r3
   16b5e:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
   16b60:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   16b64:	484e      	ldr	r0, [pc, #312]	; (16ca0 <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
   16b66:	f36f 3352 	bfc	r3, #13, #6
   16b6a:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   16b6e:	f7fd ffc5 	bl	14afc <bt_conn_prepare_events>
   16b72:	1c47      	adds	r7, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   16b74:	484b      	ldr	r0, [pc, #300]	; (16ca4 <hci_tx_thread+0x158>)
   16b76:	f04f 32ff 	mov.w	r2, #4294967295
   16b7a:	f04f 33ff 	mov.w	r3, #4294967295
   16b7e:	4639      	mov	r1, r7
   16b80:	f005 fd5e 	bl	1c640 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   16b84:	b160      	cbz	r0, 16ba0 <hci_tx_thread+0x54>
   16b86:	4948      	ldr	r1, [pc, #288]	; (16ca8 <hci_tx_thread+0x15c>)
   16b88:	4848      	ldr	r0, [pc, #288]	; (16cac <hci_tx_thread+0x160>)
   16b8a:	f640 1389 	movw	r3, #2441	; 0x989
   16b8e:	4652      	mov	r2, sl
   16b90:	f00b f934 	bl	21dfc <printk>
   16b94:	4040      	eors	r0, r0
   16b96:	f380 8811 	msr	BASEPRI, r0
   16b9a:	f04f 0003 	mov.w	r0, #3
   16b9e:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   16ba0:	4e43      	ldr	r6, [pc, #268]	; (16cb0 <hci_tx_thread+0x164>)
{
   16ba2:	f8df 8100 	ldr.w	r8, [pc, #256]	; 16ca4 <hci_tx_thread+0x158>
   16ba6:	f506 7b90 	add.w	fp, r6, #288	; 0x120
	for (; count; ev++, count--) {
   16baa:	b917      	cbnz	r7, 16bb2 <hci_tx_thread+0x66>
	z_impl_k_yield();
   16bac:	f006 f85c 	bl	1cc68 <z_impl_k_yield>
	while (1) {
   16bb0:	e7d6      	b.n	16b60 <hci_tx_thread+0x14>
		switch (ev->state) {
   16bb2:	f8d8 100c 	ldr.w	r1, [r8, #12]
   16bb6:	f3c1 3145 	ubfx	r1, r1, #13, #6
   16bba:	2901      	cmp	r1, #1
   16bbc:	d959      	bls.n	16c72 <hci_tx_thread+0x126>
   16bbe:	2904      	cmp	r1, #4
   16bc0:	d163      	bne.n	16c8a <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   16bc2:	f898 300c 	ldrb.w	r3, [r8, #12]
   16bc6:	2b00      	cmp	r3, #0
   16bc8:	d157      	bne.n	16c7a <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   16bca:	483a      	ldr	r0, [pc, #232]	; (16cb4 <hci_tx_thread+0x168>)
   16bcc:	2200      	movs	r2, #0
   16bce:	2300      	movs	r3, #0
   16bd0:	f00d f99c 	bl	23f0c <net_buf_get>
	BT_ASSERT(buf);
   16bd4:	4604      	mov	r4, r0
   16bd6:	b960      	cbnz	r0, 16bf2 <hci_tx_thread+0xa6>
   16bd8:	4937      	ldr	r1, [pc, #220]	; (16cb8 <hci_tx_thread+0x16c>)
   16bda:	4834      	ldr	r0, [pc, #208]	; (16cac <hci_tx_thread+0x160>)
   16bdc:	f44f 6312 	mov.w	r3, #2336	; 0x920
   16be0:	4652      	mov	r2, sl
   16be2:	f00b f90b 	bl	21dfc <printk>
   16be6:	4040      	eors	r0, r0
   16be8:	f380 8811 	msr	BASEPRI, r0
   16bec:	f04f 0003 	mov.w	r0, #3
   16bf0:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   16bf2:	f04f 33ff 	mov.w	r3, #4294967295
   16bf6:	f04f 32ff 	mov.w	r2, #4294967295
   16bfa:	4658      	mov	r0, fp
   16bfc:	f006 f97c 	bl	1cef8 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   16c00:	f8d6 3138 	ldr.w	r3, [r6, #312]	; 0x138
   16c04:	b163      	cbz	r3, 16c20 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
   16c06:	01a9      	lsls	r1, r5, #6
   16c08:	482c      	ldr	r0, [pc, #176]	; (16cbc <hci_tx_thread+0x170>)
   16c0a:	f041 0101 	orr.w	r1, r1, #1
   16c0e:	f00a fe9f 	bl	21950 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   16c12:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   16c16:	f003 fb75 	bl	1a304 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   16c1a:	2300      	movs	r3, #0
   16c1c:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   16c20:	4620      	mov	r0, r4
   16c22:	f00d f99e 	bl	23f62 <net_buf_ref>
   16c26:	f8c6 0138 	str.w	r0, [r6, #312]	; 0x138
		return bt_hci_ecc_send(buf);
   16c2a:	4620      	mov	r0, r4
   16c2c:	f000 fffc 	bl	17c28 <bt_hci_ecc_send>
	if (err) {
   16c30:	4601      	mov	r1, r0
   16c32:	b1f0      	cbz	r0, 16c72 <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
   16c34:	01aa      	lsls	r2, r5, #6
   16c36:	4822      	ldr	r0, [pc, #136]	; (16cc0 <hci_tx_thread+0x174>)
   16c38:	f042 0201 	orr.w	r2, r2, #1
   16c3c:	f00a fe95 	bl	2196a <log_1>
	z_impl_k_sem_give(sem);
   16c40:	4820      	ldr	r0, [pc, #128]	; (16cc4 <hci_tx_thread+0x178>)
   16c42:	f006 f933 	bl	1ceac <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   16c46:	4620      	mov	r0, r4
   16c48:	f003 faa8 	bl	1a19c <net_buf_id>
   16c4c:	4b1e      	ldr	r3, [pc, #120]	; (16cc8 <hci_tx_thread+0x17c>)
   16c4e:	220c      	movs	r2, #12
   16c50:	fb02 3000 	mla	r0, r2, r0, r3
   16c54:	211f      	movs	r1, #31
   16c56:	8840      	ldrh	r0, [r0, #2]
   16c58:	4622      	mov	r2, r4
   16c5a:	f7ff fd5b 	bl	16714 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   16c5e:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   16c62:	f003 fb4f 	bl	1a304 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   16c66:	2300      	movs	r3, #0
		net_buf_unref(buf);
   16c68:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   16c6a:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
		net_buf_unref(buf);
   16c6e:	f003 fb49 	bl	1a304 <net_buf_unref>
	for (; count; ev++, count--) {
   16c72:	f108 0814 	add.w	r8, r8, #20
   16c76:	3f01      	subs	r7, #1
   16c78:	e797      	b.n	16baa <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   16c7a:	2b01      	cmp	r3, #1
   16c7c:	d1f9      	bne.n	16c72 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
   16c7e:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
   16c82:	3838      	subs	r0, #56	; 0x38
   16c84:	f7fe fac6 	bl	15214 <bt_conn_process_tx>
   16c88:	e7f3      	b.n	16c72 <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   16c8a:	01aa      	lsls	r2, r5, #6
   16c8c:	480f      	ldr	r0, [pc, #60]	; (16ccc <hci_tx_thread+0x180>)
   16c8e:	f042 0202 	orr.w	r2, r2, #2
   16c92:	f00a fe6a 	bl	2196a <log_1>
   16c96:	e7ec      	b.n	16c72 <hci_tx_thread+0x126>
   16c98:	00025264 	.word	0x00025264
   16c9c:	00025224 	.word	0x00025224
   16ca0:	20000580 	.word	0x20000580
   16ca4:	2000056c 	.word	0x2000056c
   16ca8:	00026f85 	.word	0x00026f85
   16cac:	0002694b 	.word	0x0002694b
   16cb0:	200002a8 	.word	0x200002a8
   16cb4:	200003fc 	.word	0x200003fc
   16cb8:	0002676d 	.word	0x0002676d
   16cbc:	00026f8e 	.word	0x00026f8e
   16cc0:	00026771 	.word	0x00026771
   16cc4:	200003c8 	.word	0x200003c8
   16cc8:	20002514 	.word	0x20002514
   16ccc:	00026fa9 	.word	0x00026fa9
   16cd0:	00026e7d 	.word	0x00026e7d

00016cd4 <le_conn_update_complete>:
{
   16cd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   16cd6:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   16cd8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   16cdc:	4630      	mov	r0, r6
   16cde:	f7fd ff4b 	bl	14b78 <bt_conn_lookup_handle>
	if (!conn) {
   16ce2:	4604      	mov	r4, r0
   16ce4:	b960      	cbnz	r0, 16d00 <le_conn_update_complete+0x2c>
   16ce6:	4a22      	ldr	r2, [pc, #136]	; (16d70 <le_conn_update_complete+0x9c>)
   16ce8:	4b22      	ldr	r3, [pc, #136]	; (16d74 <le_conn_update_complete+0xa0>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16cea:	4823      	ldr	r0, [pc, #140]	; (16d78 <le_conn_update_complete+0xa4>)
   16cec:	1ad2      	subs	r2, r2, r3
   16cee:	08d2      	lsrs	r2, r2, #3
   16cf0:	0192      	lsls	r2, r2, #6
   16cf2:	f042 0201 	orr.w	r2, r2, #1
   16cf6:	4631      	mov	r1, r6
   16cf8:	f00a fe37 	bl	2196a <log_1>
}
   16cfc:	b002      	add	sp, #8
   16cfe:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   16d00:	782b      	ldrb	r3, [r5, #0]
   16d02:	b9bb      	cbnz	r3, 16d34 <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   16d04:	792a      	ldrb	r2, [r5, #4]
   16d06:	78eb      	ldrb	r3, [r5, #3]
   16d08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16d0c:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   16d10:	79aa      	ldrb	r2, [r5, #6]
   16d12:	796b      	ldrb	r3, [r5, #5]
   16d14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16d18:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   16d1c:	79eb      	ldrb	r3, [r5, #7]
   16d1e:	7a2a      	ldrb	r2, [r5, #8]
   16d20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   16d24:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   16d28:	f7fe f848 	bl	14dbc <notify_le_param_updated>
	bt_conn_unref(conn);
   16d2c:	4620      	mov	r0, r4
   16d2e:	f00b fec6 	bl	22abe <bt_conn_unref>
   16d32:	e7e3      	b.n	16cfc <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   16d34:	2b1a      	cmp	r3, #26
   16d36:	d1f9      	bne.n	16d2c <le_conn_update_complete+0x58>
   16d38:	78c3      	ldrb	r3, [r0, #3]
   16d3a:	2b01      	cmp	r3, #1
   16d3c:	d1f6      	bne.n	16d2c <le_conn_update_complete+0x58>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16d3e:	f3bf 8f5b 	dmb	ish
   16d42:	1d03      	adds	r3, r0, #4
   16d44:	e853 2f00 	ldrex	r2, [r3]
   16d48:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   16d4c:	e843 1500 	strex	r5, r1, [r3]
   16d50:	2d00      	cmp	r5, #0
   16d52:	d1f7      	bne.n	16d44 <le_conn_update_complete+0x70>
   16d54:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   16d58:	0553      	lsls	r3, r2, #21
   16d5a:	d4e7      	bmi.n	16d2c <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
   16d5c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   16d60:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   16d62:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   16d64:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   16d68:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   16d6a:	f001 fdc3 	bl	188f4 <bt_l2cap_update_conn_param>
   16d6e:	e7dd      	b.n	16d2c <le_conn_update_complete+0x58>
   16d70:	00025264 	.word	0x00025264
   16d74:	00025224 	.word	0x00025224
   16d78:	00026d41 	.word	0x00026d41

00016d7c <hci_cmd_status>:
{
   16d7c:	b538      	push	{r3, r4, r5, lr}
   16d7e:	2104      	movs	r1, #4
   16d80:	4604      	mov	r4, r0
   16d82:	3008      	adds	r0, #8
   16d84:	f00d f93a 	bl	23ffc <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   16d88:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   16d8a:	7801      	ldrb	r1, [r0, #0]
   16d8c:	8840      	ldrh	r0, [r0, #2]
   16d8e:	4622      	mov	r2, r4
   16d90:	f7ff fcc0 	bl	16714 <hci_cmd_done>
	if (ncmd) {
   16d94:	b125      	cbz	r5, 16da0 <hci_cmd_status+0x24>
   16d96:	4803      	ldr	r0, [pc, #12]	; (16da4 <hci_cmd_status+0x28>)
}
   16d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16d9c:	f006 b886 	b.w	1ceac <z_impl_k_sem_give>
   16da0:	bd38      	pop	{r3, r4, r5, pc}
   16da2:	bf00      	nop
   16da4:	200003c8 	.word	0x200003c8

00016da8 <hci_cmd_complete>:
{
   16da8:	b538      	push	{r3, r4, r5, lr}
   16daa:	2103      	movs	r1, #3
   16dac:	4604      	mov	r4, r0
   16dae:	3008      	adds	r0, #8
   16db0:	f00d f924 	bl	23ffc <net_buf_simple_pull_mem>
	status = buf->data[0];
   16db4:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   16db6:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   16db8:	7819      	ldrb	r1, [r3, #0]
   16dba:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   16dbe:	4622      	mov	r2, r4
   16dc0:	f7ff fca8 	bl	16714 <hci_cmd_done>
	if (ncmd) {
   16dc4:	b125      	cbz	r5, 16dd0 <hci_cmd_complete+0x28>
   16dc6:	4803      	ldr	r0, [pc, #12]	; (16dd4 <hci_cmd_complete+0x2c>)
}
   16dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16dcc:	f006 b86e 	b.w	1ceac <z_impl_k_sem_give>
   16dd0:	bd38      	pop	{r3, r4, r5, pc}
   16dd2:	bf00      	nop
   16dd4:	200003c8 	.word	0x200003c8

00016dd8 <bt_hci_cmd_state_set_init>:
{
   16dd8:	b510      	push	{r4, lr}
	state->bit = bit;
   16dda:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   16dde:	f89d 3008 	ldrb.w	r3, [sp, #8]
   16de2:	720b      	strb	r3, [r1, #8]
{
   16de4:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   16de6:	f003 f9d9 	bl	1a19c <net_buf_id>
   16dea:	4b03      	ldr	r3, [pc, #12]	; (16df8 <bt_hci_cmd_state_set_init+0x20>)
   16dec:	220c      	movs	r2, #12
   16dee:	fb02 3000 	mla	r0, r2, r0, r3
   16df2:	6044      	str	r4, [r0, #4]
}
   16df4:	bd10      	pop	{r4, pc}
   16df6:	bf00      	nop
   16df8:	20002514 	.word	0x20002514

00016dfc <bt_hci_cmd_create>:
{
   16dfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   16e00:	f04f 32ff 	mov.w	r2, #4294967295
   16e04:	f04f 33ff 	mov.w	r3, #4294967295
   16e08:	4605      	mov	r5, r0
   16e0a:	4816      	ldr	r0, [pc, #88]	; (16e64 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
   16e0c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 16e68 <bt_hci_cmd_create+0x6c>
{
   16e10:	460e      	mov	r6, r1
   16e12:	f00d f876 	bl	23f02 <net_buf_alloc_fixed>
   16e16:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   16e18:	f100 0b08 	add.w	fp, r0, #8
   16e1c:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16e1e:	2700      	movs	r7, #0
   16e20:	4658      	mov	r0, fp
   16e22:	f00d f88d 	bl	23f40 <net_buf_simple_reserve>
   16e26:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   16e28:	4620      	mov	r0, r4
   16e2a:	f003 f9b7 	bl	1a19c <net_buf_id>
   16e2e:	f04f 0a0c 	mov.w	sl, #12
   16e32:	fb0a 8000 	mla	r0, sl, r0, r8
   16e36:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   16e38:	4620      	mov	r0, r4
   16e3a:	f003 f9af 	bl	1a19c <net_buf_id>
   16e3e:	fb0a 8000 	mla	r0, sl, r0, r8
   16e42:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   16e44:	4620      	mov	r0, r4
   16e46:	f003 f9a9 	bl	1a19c <net_buf_id>
   16e4a:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   16e4e:	2103      	movs	r1, #3
   16e50:	6047      	str	r7, [r0, #4]
   16e52:	4658      	mov	r0, fp
   16e54:	f00d f8ab 	bl	23fae <net_buf_simple_add>
	hdr->param_len = param_len;
   16e58:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   16e5a:	8005      	strh	r5, [r0, #0]
}
   16e5c:	4620      	mov	r0, r4
   16e5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e62:	bf00      	nop
   16e64:	200008dc 	.word	0x200008dc
   16e68:	20002514 	.word	0x20002514

00016e6c <bt_hci_cmd_send>:
{
   16e6c:	b538      	push	{r3, r4, r5, lr}
   16e6e:	4605      	mov	r5, r0
	if (!buf) {
   16e70:	460c      	mov	r4, r1
   16e72:	b919      	cbnz	r1, 16e7c <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   16e74:	f7ff ffc2 	bl	16dfc <bt_hci_cmd_create>
		if (!buf) {
   16e78:	4604      	mov	r4, r0
   16e7a:	b1f0      	cbz	r0, 16eba <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   16e7c:	f640 4335 	movw	r3, #3125	; 0xc35
   16e80:	429d      	cmp	r5, r3
   16e82:	d114      	bne.n	16eae <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
   16e84:	4620      	mov	r0, r4
   16e86:	f000 fecf 	bl	17c28 <bt_hci_ecc_send>
		if (err) {
   16e8a:	4605      	mov	r5, r0
   16e8c:	b168      	cbz	r0, 16eaa <bt_hci_cmd_send+0x3e>
   16e8e:	4b0c      	ldr	r3, [pc, #48]	; (16ec0 <bt_hci_cmd_send+0x54>)
   16e90:	4a0c      	ldr	r2, [pc, #48]	; (16ec4 <bt_hci_cmd_send+0x58>)
   16e92:	1ad2      	subs	r2, r2, r3
   16e94:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
   16e96:	0192      	lsls	r2, r2, #6
   16e98:	4601      	mov	r1, r0
   16e9a:	f042 0201 	orr.w	r2, r2, #1
   16e9e:	480a      	ldr	r0, [pc, #40]	; (16ec8 <bt_hci_cmd_send+0x5c>)
   16ea0:	f00a fd63 	bl	2196a <log_1>
			net_buf_unref(buf);
   16ea4:	4620      	mov	r0, r4
   16ea6:	f003 fa2d 	bl	1a304 <net_buf_unref>
}
   16eaa:	4628      	mov	r0, r5
   16eac:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   16eae:	4807      	ldr	r0, [pc, #28]	; (16ecc <bt_hci_cmd_send+0x60>)
   16eb0:	4621      	mov	r1, r4
   16eb2:	f00d f849 	bl	23f48 <net_buf_put>
	return 0;
   16eb6:	2500      	movs	r5, #0
   16eb8:	e7f7      	b.n	16eaa <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
   16eba:	f06f 0568 	mvn.w	r5, #104	; 0x68
   16ebe:	e7f4      	b.n	16eaa <bt_hci_cmd_send+0x3e>
   16ec0:	00025224 	.word	0x00025224
   16ec4:	00025264 	.word	0x00025264
   16ec8:	00026771 	.word	0x00026771
   16ecc:	200003fc 	.word	0x200003fc

00016ed0 <le_ltk_request>:
{
   16ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   16ed2:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   16ed4:	882e      	ldrh	r6, [r5, #0]
   16ed6:	b2b7      	uxth	r7, r6
{
   16ed8:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   16eda:	4638      	mov	r0, r7
   16edc:	f7fd fe4c 	bl	14b78 <bt_conn_lookup_handle>
	if (!conn) {
   16ee0:	4604      	mov	r4, r0
   16ee2:	b960      	cbnz	r0, 16efe <le_ltk_request+0x2e>
   16ee4:	4a26      	ldr	r2, [pc, #152]	; (16f80 <le_ltk_request+0xb0>)
   16ee6:	4b27      	ldr	r3, [pc, #156]	; (16f84 <le_ltk_request+0xb4>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16ee8:	4827      	ldr	r0, [pc, #156]	; (16f88 <le_ltk_request+0xb8>)
   16eea:	1ad2      	subs	r2, r2, r3
   16eec:	08d2      	lsrs	r2, r2, #3
   16eee:	0192      	lsls	r2, r2, #6
   16ef0:	f042 0201 	orr.w	r2, r2, #1
   16ef4:	4639      	mov	r1, r7
   16ef6:	f00a fd38 	bl	2196a <log_1>
}
   16efa:	b007      	add	sp, #28
   16efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   16efe:	af02      	add	r7, sp, #8
   16f00:	f8d5 2002 	ldr.w	r2, [r5, #2]
   16f04:	f8d5 3006 	ldr.w	r3, [r5, #6]
   16f08:	9701      	str	r7, [sp, #4]
   16f0a:	8969      	ldrh	r1, [r5, #10]
   16f0c:	9100      	str	r1, [sp, #0]
   16f0e:	f00c fe42 	bl	23b96 <bt_smp_request_ltk>
   16f12:	b320      	cbz	r0, 16f5e <le_ltk_request+0x8e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   16f14:	2112      	movs	r1, #18
   16f16:	f242 001a 	movw	r0, #8218	; 0x201a
   16f1a:	f7ff ff6f 	bl	16dfc <bt_hci_cmd_create>
	if (!buf) {
   16f1e:	4605      	mov	r5, r0
   16f20:	b968      	cbnz	r0, 16f3e <le_ltk_request+0x6e>
   16f22:	4917      	ldr	r1, [pc, #92]	; (16f80 <le_ltk_request+0xb0>)
   16f24:	4b17      	ldr	r3, [pc, #92]	; (16f84 <le_ltk_request+0xb4>)
		BT_ERR("Out of command buffers");
   16f26:	4819      	ldr	r0, [pc, #100]	; (16f8c <le_ltk_request+0xbc>)
   16f28:	1ac9      	subs	r1, r1, r3
   16f2a:	08c9      	lsrs	r1, r1, #3
   16f2c:	0189      	lsls	r1, r1, #6
   16f2e:	f041 0101 	orr.w	r1, r1, #1
   16f32:	f00a fd0d 	bl	21950 <log_0>
	bt_conn_unref(conn);
   16f36:	4620      	mov	r0, r4
   16f38:	f00b fdc1 	bl	22abe <bt_conn_unref>
   16f3c:	e7dd      	b.n	16efa <le_ltk_request+0x2a>
   16f3e:	2112      	movs	r1, #18
   16f40:	3008      	adds	r0, #8
   16f42:	f00d f834 	bl	23fae <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   16f46:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   16f48:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   16f4c:	2210      	movs	r2, #16
   16f4e:	f00b f800 	bl	21f52 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   16f52:	4629      	mov	r1, r5
   16f54:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   16f58:	f7ff ff88 	bl	16e6c <bt_hci_cmd_send>
   16f5c:	e7eb      	b.n	16f36 <le_ltk_request+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   16f5e:	2102      	movs	r1, #2
   16f60:	f242 001b 	movw	r0, #8219	; 0x201b
   16f64:	f7ff ff4a 	bl	16dfc <bt_hci_cmd_create>
	if (!buf) {
   16f68:	4605      	mov	r5, r0
   16f6a:	2800      	cmp	r0, #0
   16f6c:	d0d9      	beq.n	16f22 <le_ltk_request+0x52>
   16f6e:	2102      	movs	r1, #2
   16f70:	3008      	adds	r0, #8
   16f72:	f00d f81c 	bl	23fae <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   16f76:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
   16f78:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   16f7a:	f242 001b 	movw	r0, #8219	; 0x201b
   16f7e:	e7eb      	b.n	16f58 <le_ltk_request+0x88>
   16f80:	00025264 	.word	0x00025264
   16f84:	00025224 	.word	0x00025224
   16f88:	00026d41 	.word	0x00026d41
   16f8c:	00026fca 	.word	0x00026fca

00016f90 <le_conn_param_neg_reply>:
{
   16f90:	b570      	push	{r4, r5, r6, lr}
   16f92:	4606      	mov	r6, r0
   16f94:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   16f96:	f242 0021 	movw	r0, #8225	; 0x2021
   16f9a:	2103      	movs	r1, #3
   16f9c:	f7ff ff2e 	bl	16dfc <bt_hci_cmd_create>
	if (!buf) {
   16fa0:	4604      	mov	r4, r0
   16fa2:	b958      	cbnz	r0, 16fbc <le_conn_param_neg_reply+0x2c>
   16fa4:	490c      	ldr	r1, [pc, #48]	; (16fd8 <le_conn_param_neg_reply+0x48>)
   16fa6:	4b0d      	ldr	r3, [pc, #52]	; (16fdc <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
   16fa8:	480d      	ldr	r0, [pc, #52]	; (16fe0 <le_conn_param_neg_reply+0x50>)
   16faa:	1ac9      	subs	r1, r1, r3
   16fac:	08c9      	lsrs	r1, r1, #3
   16fae:	0189      	lsls	r1, r1, #6
}
   16fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   16fb4:	f041 0101 	orr.w	r1, r1, #1
   16fb8:	f00a bcca 	b.w	21950 <log_0>
   16fbc:	2103      	movs	r1, #3
   16fbe:	3008      	adds	r0, #8
   16fc0:	f00c fff5 	bl	23fae <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   16fc4:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   16fc6:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   16fc8:	4621      	mov	r1, r4
   16fca:	f242 0021 	movw	r0, #8225	; 0x2021
}
   16fce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   16fd2:	f7ff bf4b 	b.w	16e6c <bt_hci_cmd_send>
   16fd6:	bf00      	nop
   16fd8:	00025264 	.word	0x00025264
   16fdc:	00025224 	.word	0x00025224
   16fe0:	00026fe1 	.word	0x00026fe1

00016fe4 <le_conn_param_req>:
{
   16fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   16fe6:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16fe8:	78d9      	ldrb	r1, [r3, #3]
   16fea:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   16fec:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16fee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16ff2:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   16ff6:	7959      	ldrb	r1, [r3, #5]
   16ff8:	791a      	ldrb	r2, [r3, #4]
   16ffa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16ffe:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   17002:	799a      	ldrb	r2, [r3, #6]
   17004:	79d9      	ldrb	r1, [r3, #7]
   17006:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1700a:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1700e:	7a1a      	ldrb	r2, [r3, #8]
   17010:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   17012:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   17014:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   17018:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1701a:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1701e:	f7fd fdab 	bl	14b78 <bt_conn_lookup_handle>
	if (!conn) {
   17022:	4606      	mov	r6, r0
   17024:	b980      	cbnz	r0, 17048 <le_conn_param_req+0x64>
   17026:	4b20      	ldr	r3, [pc, #128]	; (170a8 <le_conn_param_req+0xc4>)
   17028:	4a20      	ldr	r2, [pc, #128]	; (170ac <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1702a:	4821      	ldr	r0, [pc, #132]	; (170b0 <le_conn_param_req+0xcc>)
   1702c:	1ad2      	subs	r2, r2, r3
   1702e:	08d2      	lsrs	r2, r2, #3
   17030:	0192      	lsls	r2, r2, #6
   17032:	4621      	mov	r1, r4
   17034:	f042 0201 	orr.w	r2, r2, #1
   17038:	f00a fc97 	bl	2196a <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1703c:	2102      	movs	r1, #2
   1703e:	4620      	mov	r0, r4
   17040:	f7ff ffa6 	bl	16f90 <le_conn_param_neg_reply>
}
   17044:	b003      	add	sp, #12
   17046:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   17048:	4669      	mov	r1, sp
   1704a:	f7fd ff03 	bl	14e54 <le_param_req>
   1704e:	b938      	cbnz	r0, 17060 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   17050:	211e      	movs	r1, #30
   17052:	4620      	mov	r0, r4
   17054:	f7ff ff9c 	bl	16f90 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   17058:	4630      	mov	r0, r6
   1705a:	f00b fd30 	bl	22abe <bt_conn_unref>
   1705e:	e7f1      	b.n	17044 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   17060:	210e      	movs	r1, #14
   17062:	f242 0020 	movw	r0, #8224	; 0x2020
   17066:	f7ff fec9 	bl	16dfc <bt_hci_cmd_create>
	if (!buf) {
   1706a:	4605      	mov	r5, r0
   1706c:	2800      	cmp	r0, #0
   1706e:	d0f3      	beq.n	17058 <le_conn_param_req+0x74>
   17070:	210e      	movs	r1, #14
   17072:	3008      	adds	r0, #8
   17074:	f00c ff9b 	bl	23fae <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   17078:	220e      	movs	r2, #14
   1707a:	4604      	mov	r4, r0
   1707c:	2100      	movs	r1, #0
   1707e:	f00a ff73 	bl	21f68 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   17082:	f8bd 3000 	ldrh.w	r3, [sp]
   17086:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   17088:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1708c:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1708e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   17092:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   17094:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   17098:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1709a:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1709c:	4629      	mov	r1, r5
   1709e:	f242 0020 	movw	r0, #8224	; 0x2020
   170a2:	f7ff fee3 	bl	16e6c <bt_hci_cmd_send>
   170a6:	e7d7      	b.n	17058 <le_conn_param_req+0x74>
   170a8:	00025224 	.word	0x00025224
   170ac:	00025264 	.word	0x00025264
   170b0:	00026d41 	.word	0x00026d41

000170b4 <bt_hci_cmd_send_sync>:
{
   170b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   170b8:	4607      	mov	r7, r0
   170ba:	b086      	sub	sp, #24
   170bc:	4615      	mov	r5, r2
	if (!buf) {
   170be:	460c      	mov	r4, r1
   170c0:	b921      	cbnz	r1, 170cc <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   170c2:	f7ff fe9b 	bl	16dfc <bt_hci_cmd_create>
		if (!buf) {
   170c6:	4604      	mov	r4, r0
   170c8:	2800      	cmp	r0, #0
   170ca:	d055      	beq.n	17178 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
   170cc:	2201      	movs	r2, #1
   170ce:	2100      	movs	r1, #0
   170d0:	4668      	mov	r0, sp
   170d2:	f00d fd7b 	bl	24bcc <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   170d6:	4620      	mov	r0, r4
   170d8:	f003 f860 	bl	1a19c <net_buf_id>
   170dc:	4e28      	ldr	r6, [pc, #160]	; (17180 <bt_hci_cmd_send_sync+0xcc>)
   170de:	230c      	movs	r3, #12
   170e0:	fb03 6000 	mla	r0, r3, r0, r6
   170e4:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   170e8:	4620      	mov	r0, r4
   170ea:	f00c ff3a 	bl	23f62 <net_buf_ref>
   170ee:	4601      	mov	r1, r0
   170f0:	4824      	ldr	r0, [pc, #144]	; (17184 <bt_hci_cmd_send_sync+0xd0>)
   170f2:	f00c ff29 	bl	23f48 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   170f6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   170fa:	2300      	movs	r3, #0
   170fc:	4668      	mov	r0, sp
   170fe:	f005 fefb 	bl	1cef8 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   17102:	4680      	mov	r8, r0
   17104:	b180      	cbz	r0, 17128 <bt_hci_cmd_send_sync+0x74>
   17106:	4a20      	ldr	r2, [pc, #128]	; (17188 <bt_hci_cmd_send_sync+0xd4>)
   17108:	4920      	ldr	r1, [pc, #128]	; (1718c <bt_hci_cmd_send_sync+0xd8>)
   1710a:	4821      	ldr	r0, [pc, #132]	; (17190 <bt_hci_cmd_send_sync+0xdc>)
   1710c:	f44f 7399 	mov.w	r3, #306	; 0x132
   17110:	f00a fe74 	bl	21dfc <printk>
   17114:	481f      	ldr	r0, [pc, #124]	; (17194 <bt_hci_cmd_send_sync+0xe0>)
   17116:	4641      	mov	r1, r8
   17118:	f00a fe70 	bl	21dfc <printk>
   1711c:	4040      	eors	r0, r0
   1711e:	f380 8811 	msr	BASEPRI, r0
   17122:	f04f 0003 	mov.w	r0, #3
   17126:	df02      	svc	2
	status = cmd(buf)->status;
   17128:	4620      	mov	r0, r4
   1712a:	f003 f837 	bl	1a19c <net_buf_id>
   1712e:	230c      	movs	r3, #12
   17130:	4343      	muls	r3, r0
   17132:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   17134:	b1be      	cbz	r6, 17166 <bt_hci_cmd_send_sync+0xb2>
   17136:	4a18      	ldr	r2, [pc, #96]	; (17198 <bt_hci_cmd_send_sync+0xe4>)
   17138:	4b18      	ldr	r3, [pc, #96]	; (1719c <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   1713a:	4819      	ldr	r0, [pc, #100]	; (171a0 <bt_hci_cmd_send_sync+0xec>)
   1713c:	1a9b      	subs	r3, r3, r2
   1713e:	08db      	lsrs	r3, r3, #3
   17140:	019b      	lsls	r3, r3, #6
   17142:	f043 0302 	orr.w	r3, r3, #2
   17146:	4632      	mov	r2, r6
   17148:	4639      	mov	r1, r7
   1714a:	f00a fc22 	bl	21992 <log_2>
		net_buf_unref(buf);
   1714e:	4620      	mov	r0, r4
   17150:	f003 f8d8 	bl	1a304 <net_buf_unref>
			return -EIO;
   17154:	2e09      	cmp	r6, #9
   17156:	bf0c      	ite	eq
   17158:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   1715c:	f06f 0004 	mvnne.w	r0, #4
}
   17160:	b006      	add	sp, #24
   17162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   17166:	b115      	cbz	r5, 1716e <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
   17168:	602c      	str	r4, [r5, #0]
	return 0;
   1716a:	4630      	mov	r0, r6
   1716c:	e7f8      	b.n	17160 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
   1716e:	4620      	mov	r0, r4
   17170:	f003 f8c8 	bl	1a304 <net_buf_unref>
	return 0;
   17174:	4628      	mov	r0, r5
   17176:	e7f3      	b.n	17160 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
   17178:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1717c:	e7f0      	b.n	17160 <bt_hci_cmd_send_sync+0xac>
   1717e:	bf00      	nop
   17180:	20002514 	.word	0x20002514
   17184:	200003fc 	.word	0x200003fc
   17188:	00026e7d 	.word	0x00026e7d
   1718c:	00026f85 	.word	0x00026f85
   17190:	0002694b 	.word	0x0002694b
   17194:	00026ffb 	.word	0x00026ffb
   17198:	00025224 	.word	0x00025224
   1719c:	00025264 	.word	0x00025264
   171a0:	0002701b 	.word	0x0002701b

000171a4 <hci_le_read_max_data_len>:
{
   171a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   171a6:	4606      	mov	r6, r0
   171a8:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   171aa:	aa01      	add	r2, sp, #4
   171ac:	2100      	movs	r1, #0
   171ae:	f242 002f 	movw	r0, #8239	; 0x202f
   171b2:	f7ff ff7f 	bl	170b4 <bt_hci_cmd_send_sync>
	if (err) {
   171b6:	4604      	mov	r4, r0
   171b8:	b160      	cbz	r0, 171d4 <hci_le_read_max_data_len+0x30>
   171ba:	490c      	ldr	r1, [pc, #48]	; (171ec <hci_le_read_max_data_len+0x48>)
   171bc:	4b0c      	ldr	r3, [pc, #48]	; (171f0 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
   171be:	480d      	ldr	r0, [pc, #52]	; (171f4 <hci_le_read_max_data_len+0x50>)
   171c0:	1ac9      	subs	r1, r1, r3
   171c2:	08c9      	lsrs	r1, r1, #3
   171c4:	0189      	lsls	r1, r1, #6
   171c6:	f041 0101 	orr.w	r1, r1, #1
   171ca:	f00a fbc1 	bl	21950 <log_0>
}
   171ce:	4620      	mov	r0, r4
   171d0:	b002      	add	sp, #8
   171d2:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   171d4:	9801      	ldr	r0, [sp, #4]
   171d6:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   171d8:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   171dc:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   171de:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   171e2:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   171e4:	f003 f88e 	bl	1a304 <net_buf_unref>
	return 0;
   171e8:	e7f1      	b.n	171ce <hci_le_read_max_data_len+0x2a>
   171ea:	bf00      	nop
   171ec:	00025264 	.word	0x00025264
   171f0:	00025224 	.word	0x00025224
   171f4:	00027037 	.word	0x00027037

000171f8 <conn_auto_initiate>:
{
   171f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   171fa:	7b43      	ldrb	r3, [r0, #13]
   171fc:	2b07      	cmp	r3, #7
{
   171fe:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   17200:	d121      	bne.n	17246 <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17202:	f3bf 8f5b 	dmb	ish
   17206:	6843      	ldr	r3, [r0, #4]
   17208:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   1720c:	049b      	lsls	r3, r3, #18
   1720e:	f100 0604 	add.w	r6, r0, #4
   17212:	d41a      	bmi.n	1724a <conn_auto_initiate+0x52>
   17214:	78c3      	ldrb	r3, [r0, #3]
   17216:	b123      	cbz	r3, 17222 <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   17218:	4b35      	ldr	r3, [pc, #212]	; (172f0 <conn_auto_initiate+0xf8>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   1721a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1721e:	071d      	lsls	r5, r3, #28
   17220:	d513      	bpl.n	1724a <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   17222:	2102      	movs	r1, #2
   17224:	f242 0016 	movw	r0, #8214	; 0x2016
   17228:	f7ff fde8 	bl	16dfc <bt_hci_cmd_create>
	if (!buf) {
   1722c:	4605      	mov	r5, r0
   1722e:	b160      	cbz	r0, 1724a <conn_auto_initiate+0x52>
   17230:	2102      	movs	r1, #2
   17232:	3008      	adds	r0, #8
   17234:	f00c febb 	bl	23fae <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   17238:	8823      	ldrh	r3, [r4, #0]
   1723a:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   1723c:	4629      	mov	r1, r5
   1723e:	f242 0016 	movw	r0, #8214	; 0x2016
   17242:	f7ff fe13 	bl	16e6c <bt_hci_cmd_send>
}
   17246:	b004      	add	sp, #16
   17248:	bd70      	pop	{r4, r5, r6, pc}
   1724a:	f3bf 8f5b 	dmb	ish
   1724e:	6863      	ldr	r3, [r4, #4]
   17250:	4d27      	ldr	r5, [pc, #156]	; (172f0 <conn_auto_initiate+0xf8>)
   17252:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   17256:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   1725a:	f3c3 3100 	ubfx	r1, r3, #12, #1
   1725e:	d122      	bne.n	172a6 <conn_auto_initiate+0xae>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   17260:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   17264:	07d8      	lsls	r0, r3, #31
   17266:	d51e      	bpl.n	172a6 <conn_auto_initiate+0xae>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   17268:	2302      	movs	r3, #2
   1726a:	9100      	str	r1, [sp, #0]
   1726c:	461a      	mov	r2, r3
   1726e:	4620      	mov	r0, r4
   17270:	f00b ffed 	bl	2324e <bt_le_set_phy>
		if (!err) {
   17274:	4601      	mov	r1, r0
   17276:	b960      	cbnz	r0, 17292 <conn_auto_initiate+0x9a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17278:	f3bf 8f5b 	dmb	ish
   1727c:	e856 3f00 	ldrex	r3, [r6]
   17280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17284:	e846 3200 	strex	r2, r3, [r6]
   17288:	2a00      	cmp	r2, #0
   1728a:	d1f7      	bne.n	1727c <conn_auto_initiate+0x84>
   1728c:	f3bf 8f5b 	dmb	ish
			return;
   17290:	e7d9      	b.n	17246 <conn_auto_initiate+0x4e>
   17292:	4a18      	ldr	r2, [pc, #96]	; (172f4 <conn_auto_initiate+0xfc>)
   17294:	4b18      	ldr	r3, [pc, #96]	; (172f8 <conn_auto_initiate+0x100>)
		BT_ERR("Failed to set LE PHY (%d)", err);
   17296:	4819      	ldr	r0, [pc, #100]	; (172fc <conn_auto_initiate+0x104>)
   17298:	1ad2      	subs	r2, r2, r3
   1729a:	08d2      	lsrs	r2, r2, #3
   1729c:	0192      	lsls	r2, r2, #6
   1729e:	f042 0201 	orr.w	r2, r2, #1
   172a2:	f00a fb62 	bl	2196a <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   172a6:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   172aa:	069a      	lsls	r2, r3, #26
   172ac:	d5cb      	bpl.n	17246 <conn_auto_initiate+0x4e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   172ae:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   172b2:	689b      	ldr	r3, [r3, #8]
   172b4:	079b      	lsls	r3, r3, #30
   172b6:	d5c6      	bpl.n	17246 <conn_auto_initiate+0x4e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   172b8:	f10d 010e 	add.w	r1, sp, #14
   172bc:	a803      	add	r0, sp, #12
   172be:	f7ff ff71 	bl	171a4 <hci_le_read_max_data_len>
			if (!err) {
   172c2:	2800      	cmp	r0, #0
   172c4:	d1bf      	bne.n	17246 <conn_auto_initiate+0x4e>
				err = bt_le_set_data_len(conn,
   172c6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   172ca:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   172ce:	4620      	mov	r0, r4
   172d0:	f00b ffa0 	bl	23214 <bt_le_set_data_len>
				if (err) {
   172d4:	4601      	mov	r1, r0
   172d6:	2800      	cmp	r0, #0
   172d8:	d0b5      	beq.n	17246 <conn_auto_initiate+0x4e>
   172da:	4b07      	ldr	r3, [pc, #28]	; (172f8 <conn_auto_initiate+0x100>)
   172dc:	4a05      	ldr	r2, [pc, #20]	; (172f4 <conn_auto_initiate+0xfc>)
					BT_ERR("Failed to set data len (%d)", err);
   172de:	4808      	ldr	r0, [pc, #32]	; (17300 <conn_auto_initiate+0x108>)
   172e0:	1ad2      	subs	r2, r2, r3
   172e2:	08d2      	lsrs	r2, r2, #3
   172e4:	0192      	lsls	r2, r2, #6
   172e6:	f042 0201 	orr.w	r2, r2, #1
   172ea:	f00a fb3e 	bl	2196a <log_1>
		}
   172ee:	e7aa      	b.n	17246 <conn_auto_initiate+0x4e>
   172f0:	200002a8 	.word	0x200002a8
   172f4:	00025264 	.word	0x00025264
   172f8:	00025224 	.word	0x00025224
   172fc:	0002714f 	.word	0x0002714f
   17300:	00027169 	.word	0x00027169

00017304 <le_phy_update_complete>:
{
   17304:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17306:	6883      	ldr	r3, [r0, #8]
   17308:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   1730c:	4628      	mov	r0, r5
   1730e:	f7fd fc33 	bl	14b78 <bt_conn_lookup_handle>
	if (!conn) {
   17312:	4604      	mov	r4, r0
   17314:	b960      	cbnz	r0, 17330 <le_phy_update_complete+0x2c>
   17316:	4b17      	ldr	r3, [pc, #92]	; (17374 <le_phy_update_complete+0x70>)
   17318:	4a17      	ldr	r2, [pc, #92]	; (17378 <le_phy_update_complete+0x74>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1731a:	4818      	ldr	r0, [pc, #96]	; (1737c <le_phy_update_complete+0x78>)
   1731c:	1ad2      	subs	r2, r2, r3
   1731e:	08d2      	lsrs	r2, r2, #3
   17320:	0192      	lsls	r2, r2, #6
   17322:	4629      	mov	r1, r5
   17324:	f042 0201 	orr.w	r2, r2, #1
}
   17328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1732c:	f00a bb1d 	b.w	2196a <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   17330:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17332:	f3bf 8f5b 	dmb	ish
   17336:	e853 2f00 	ldrex	r2, [r3]
   1733a:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   1733e:	e843 1500 	strex	r5, r1, [r3]
   17342:	2d00      	cmp	r5, #0
   17344:	d1f7      	bne.n	17336 <le_phy_update_complete+0x32>
   17346:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1734a:	0612      	lsls	r2, r2, #24
   1734c:	d50d      	bpl.n	1736a <le_phy_update_complete+0x66>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1734e:	f3bf 8f5b 	dmb	ish
   17352:	e853 2f00 	ldrex	r2, [r3]
   17356:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   1735a:	e843 2100 	strex	r1, r2, [r3]
   1735e:	2900      	cmp	r1, #0
   17360:	d1f7      	bne.n	17352 <le_phy_update_complete+0x4e>
   17362:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   17366:	f7ff ff47 	bl	171f8 <conn_auto_initiate>
	bt_conn_unref(conn);
   1736a:	4620      	mov	r0, r4
}
   1736c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   17370:	f00b bba5 	b.w	22abe <bt_conn_unref>
   17374:	00025224 	.word	0x00025224
   17378:	00025264 	.word	0x00025264
   1737c:	00026d41 	.word	0x00026d41

00017380 <le_remote_feat_complete>:
{
   17380:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   17382:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17384:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   17388:	4630      	mov	r0, r6
   1738a:	f7fd fbf5 	bl	14b78 <bt_conn_lookup_handle>
	if (!conn) {
   1738e:	4604      	mov	r4, r0
   17390:	b960      	cbnz	r0, 173ac <le_remote_feat_complete+0x2c>
   17392:	4a14      	ldr	r2, [pc, #80]	; (173e4 <le_remote_feat_complete+0x64>)
   17394:	4b14      	ldr	r3, [pc, #80]	; (173e8 <le_remote_feat_complete+0x68>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17396:	4815      	ldr	r0, [pc, #84]	; (173ec <le_remote_feat_complete+0x6c>)
   17398:	1ad2      	subs	r2, r2, r3
   1739a:	08d2      	lsrs	r2, r2, #3
   1739c:	0192      	lsls	r2, r2, #6
   1739e:	4631      	mov	r1, r6
   173a0:	f042 0201 	orr.w	r2, r2, #1
}
   173a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   173a8:	f00a badf 	b.w	2196a <log_1>
	if (!evt->status) {
   173ac:	782b      	ldrb	r3, [r5, #0]
   173ae:	b923      	cbnz	r3, 173ba <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
   173b0:	2208      	movs	r2, #8
   173b2:	1ce9      	adds	r1, r5, #3
   173b4:	30ac      	adds	r0, #172	; 0xac
   173b6:	f00a fdcc 	bl	21f52 <memcpy>
   173ba:	f3bf 8f5b 	dmb	ish
   173be:	1d23      	adds	r3, r4, #4
   173c0:	e853 2f00 	ldrex	r2, [r3]
   173c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   173c8:	e843 2100 	strex	r1, r2, [r3]
   173cc:	2900      	cmp	r1, #0
   173ce:	d1f7      	bne.n	173c0 <le_remote_feat_complete+0x40>
   173d0:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   173d4:	4620      	mov	r0, r4
   173d6:	f7ff ff0f 	bl	171f8 <conn_auto_initiate>
	bt_conn_unref(conn);
   173da:	4620      	mov	r0, r4
}
   173dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   173e0:	f00b bb6d 	b.w	22abe <bt_conn_unref>
   173e4:	00025264 	.word	0x00025264
   173e8:	00025224 	.word	0x00025224
   173ec:	00026d41 	.word	0x00026d41

000173f0 <bt_hci_le_enh_conn_complete>:
{
   173f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   173f4:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
   173f8:	4a7e      	ldr	r2, [pc, #504]	; (175f4 <bt_hci_le_enh_conn_complete+0x204>)
	handle |= ~BT_ACL_HANDLE_MASK;
   173fa:	ea6f 5309 	mvn.w	r3, r9, lsl #20
		if (disconnected_handles[i] == handle) {
   173fe:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   17400:	ea6f 5313 	mvn.w	r3, r3, lsr #20
{
   17404:	4605      	mov	r5, r0
		if (disconnected_handles[i] == handle) {
   17406:	b29b      	uxth	r3, r3
   17408:	4299      	cmp	r1, r3
   1740a:	f04f 0800 	mov.w	r8, #0
{
   1740e:	b085      	sub	sp, #20
			disconnected_handles[i] = 0;
   17410:	bf04      	itt	eq
   17412:	f8a2 8000 	strheq.w	r8, [r2]
			return true;
   17416:	f04f 0801 	moveq.w	r8, #1
	bt_id_pending_keys_update();
   1741a:	f000 fd11 	bl	17e40 <bt_id_pending_keys_update>
	if (evt->status) {
   1741e:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17420:	fa1f f789 	uxth.w	r7, r9
	if (evt->status) {
   17424:	b3b4      	cbz	r4, 17494 <bt_hci_le_enh_conn_complete+0xa4>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17426:	2c3c      	cmp	r4, #60	; 0x3c
   17428:	d128      	bne.n	1747c <bt_hci_le_enh_conn_complete+0x8c>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1742a:	f7fb ff75 	bl	13318 <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1742e:	f3bf 8f5b 	dmb	ish
   17432:	3010      	adds	r0, #16
   17434:	e850 3f00 	ldrex	r3, [r0]
   17438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1743c:	e840 3200 	strex	r2, r3, [r0]
   17440:	2a00      	cmp	r2, #0
   17442:	d1f7      	bne.n	17434 <bt_hci_le_enh_conn_complete+0x44>
   17444:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   17448:	2000      	movs	r0, #0
   1744a:	f7ff f945 	bl	166d8 <find_pending_connect.part.0>
		if (!conn) {
   1744e:	4605      	mov	r5, r0
   17450:	b960      	cbnz	r0, 1746c <bt_hci_le_enh_conn_complete+0x7c>
   17452:	4969      	ldr	r1, [pc, #420]	; (175f8 <bt_hci_le_enh_conn_complete+0x208>)
   17454:	4b69      	ldr	r3, [pc, #420]	; (175fc <bt_hci_le_enh_conn_complete+0x20c>)
			BT_ERR("No pending peripheral connection");
   17456:	486a      	ldr	r0, [pc, #424]	; (17600 <bt_hci_le_enh_conn_complete+0x210>)
   17458:	1ac9      	subs	r1, r1, r3
   1745a:	08c9      	lsrs	r1, r1, #3
   1745c:	0189      	lsls	r1, r1, #6
   1745e:	f041 0101 	orr.w	r1, r1, #1
   17462:	f00a fa75 	bl	21950 <log_0>
}
   17466:	b005      	add	sp, #20
   17468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   1746c:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1746e:	2100      	movs	r1, #0
   17470:	f7fd fb8e 	bl	14b90 <bt_conn_set_state>
		bt_conn_unref(conn);
   17474:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   17476:	f00b fb22 	bl	22abe <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1747a:	e7f4      	b.n	17466 <bt_hci_le_enh_conn_complete+0x76>
   1747c:	4b5f      	ldr	r3, [pc, #380]	; (175fc <bt_hci_le_enh_conn_complete+0x20c>)
   1747e:	4a5e      	ldr	r2, [pc, #376]	; (175f8 <bt_hci_le_enh_conn_complete+0x208>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
   17480:	4860      	ldr	r0, [pc, #384]	; (17604 <bt_hci_le_enh_conn_complete+0x214>)
   17482:	1ad2      	subs	r2, r2, r3
   17484:	08d2      	lsrs	r2, r2, #3
   17486:	0192      	lsls	r2, r2, #6
   17488:	f042 0202 	orr.w	r2, r2, #2
   1748c:	4621      	mov	r1, r4
   1748e:	f00a fa6c 	bl	2196a <log_1>
		return;
   17492:	e7e8      	b.n	17466 <bt_hci_le_enh_conn_complete+0x76>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   17494:	792b      	ldrb	r3, [r5, #4]
   17496:	3b02      	subs	r3, #2
   17498:	2b01      	cmp	r3, #1
   1749a:	f105 0604 	add.w	r6, r5, #4
   1749e:	d846      	bhi.n	1752e <bt_hci_le_enh_conn_complete+0x13e>
   174a0:	2207      	movs	r2, #7
   174a2:	4631      	mov	r1, r6
   174a4:	a802      	add	r0, sp, #8
   174a6:	f00a fd54 	bl	21f52 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   174aa:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
   174ae:	2206      	movs	r2, #6
   174b0:	3b02      	subs	r3, #2
   174b2:	f105 0111 	add.w	r1, r5, #17
   174b6:	f10d 0001 	add.w	r0, sp, #1
   174ba:	f88d 3008 	strb.w	r3, [sp, #8]
   174be:	f00a fd48 	bl	21f52 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   174c2:	2301      	movs	r3, #1
   174c4:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   174c8:	78eb      	ldrb	r3, [r5, #3]
   174ca:	2b01      	cmp	r3, #1
   174cc:	d119      	bne.n	17502 <bt_hci_le_enh_conn_complete+0x112>
   174ce:	a802      	add	r0, sp, #8
   174d0:	f7ff f902 	bl	166d8 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   174d4:	78eb      	ldrb	r3, [r5, #3]
   174d6:	2b01      	cmp	r3, #1
   174d8:	4604      	mov	r4, r0
   174da:	d111      	bne.n	17500 <bt_hci_le_enh_conn_complete+0x110>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   174dc:	f7fb ff1c 	bl	13318 <bt_le_adv_lookup_legacy>
   174e0:	f3bf 8f5b 	dmb	ish
   174e4:	f100 0310 	add.w	r3, r0, #16
   174e8:	e853 2f00 	ldrex	r2, [r3]
   174ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   174f0:	e843 2100 	strex	r1, r2, [r3]
   174f4:	2900      	cmp	r1, #0
   174f6:	d1f7      	bne.n	174e8 <bt_hci_le_enh_conn_complete+0xf8>
   174f8:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
   174fc:	f00a fe82 	bl	22204 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   17500:	bb54      	cbnz	r4, 17558 <bt_hci_le_enh_conn_complete+0x168>
   17502:	4a3e      	ldr	r2, [pc, #248]	; (175fc <bt_hci_le_enh_conn_complete+0x20c>)
   17504:	4c3c      	ldr	r4, [pc, #240]	; (175f8 <bt_hci_le_enh_conn_complete+0x208>)
		BT_ERR("No pending conn for peer %s",
   17506:	4630      	mov	r0, r6
   17508:	1aa4      	subs	r4, r4, r2
   1750a:	f7fb fdc7 	bl	1309c <bt_addr_le_str_real>
   1750e:	f7fa fb0d 	bl	11b2c <z_log_strdup>
   17512:	08e4      	lsrs	r4, r4, #3
   17514:	01a4      	lsls	r4, r4, #6
   17516:	f044 0401 	orr.w	r4, r4, #1
   1751a:	4601      	mov	r1, r0
   1751c:	4622      	mov	r2, r4
   1751e:	483a      	ldr	r0, [pc, #232]	; (17608 <bt_hci_le_enh_conn_complete+0x218>)
   17520:	f00a fa23 	bl	2196a <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   17524:	211f      	movs	r1, #31
   17526:	4638      	mov	r0, r7
   17528:	f00b fe59 	bl	231de <bt_hci_disconnect>
		return;
   1752c:	e79b      	b.n	17466 <bt_hci_le_enh_conn_complete+0x76>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   1752e:	78eb      	ldrb	r3, [r5, #3]
   17530:	2b01      	cmp	r3, #1
   17532:	bf04      	itt	eq
   17534:	4b35      	ldreq	r3, [pc, #212]	; (1760c <bt_hci_le_enh_conn_complete+0x21c>)
   17536:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   1753a:	4631      	mov	r1, r6
   1753c:	4620      	mov	r0, r4
   1753e:	f00b ffcf 	bl	234e0 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   17542:	2207      	movs	r2, #7
   17544:	4601      	mov	r1, r0
   17546:	a802      	add	r0, sp, #8
   17548:	f00a fd03 	bl	21f52 <memcpy>
   1754c:	2207      	movs	r2, #7
   1754e:	4631      	mov	r1, r6
   17550:	4668      	mov	r0, sp
   17552:	f00a fcfe 	bl	21f52 <memcpy>
}
   17556:	e7b7      	b.n	174c8 <bt_hci_le_enh_conn_complete+0xd8>
	conn->handle = handle;
   17558:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
   1755a:	2207      	movs	r2, #7
   1755c:	f820 9b88 	strh.w	r9, [r0], #136
   17560:	a902      	add	r1, sp, #8
   17562:	f00a fcf6 	bl	21f52 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   17566:	7e2a      	ldrb	r2, [r5, #24]
   17568:	7deb      	ldrb	r3, [r5, #23]
   1756a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1756e:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   17572:	7eaa      	ldrb	r2, [r5, #26]
   17574:	7e6b      	ldrb	r3, [r5, #25]
   17576:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1757a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1757e:	7eeb      	ldrb	r3, [r5, #27]
   17580:	7f2a      	ldrb	r2, [r5, #28]
   17582:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17586:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   1758a:	78eb      	ldrb	r3, [r5, #3]
   1758c:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   1758e:	2500      	movs	r5, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17590:	2b01      	cmp	r3, #1
	conn->err = 0U;
   17592:	7325      	strb	r5, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17594:	d11a      	bne.n	175cc <bt_hci_le_enh_conn_complete+0x1dc>
   17596:	2207      	movs	r2, #7
   17598:	4669      	mov	r1, sp
   1759a:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   1759e:	f00a fcd8 	bl	21f52 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   175a2:	f7fb feb9 	bl	13318 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   175a6:	7a21      	ldrb	r1, [r4, #8]
   175a8:	4e18      	ldr	r6, [pc, #96]	; (1760c <bt_hci_le_enh_conn_complete+0x21c>)
   175aa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   175ae:	2207      	movs	r2, #7
   175b0:	4431      	add	r1, r6
   175b2:	f104 0096 	add.w	r0, r4, #150	; 0x96
   175b6:	f00a fccc 	bl	21f52 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   175ba:	f8d6 10dc 	ldr.w	r1, [r6, #220]	; 0xdc
   175be:	462a      	mov	r2, r5
   175c0:	f001 0340 	and.w	r3, r1, #64	; 0x40
   175c4:	4313      	orrs	r3, r2
   175c6:	d001      	beq.n	175cc <bt_hci_le_enh_conn_complete+0x1dc>
			bt_le_adv_resume();
   175c8:	f7fc f878 	bl	136bc <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   175cc:	2107      	movs	r1, #7
   175ce:	4620      	mov	r0, r4
   175d0:	f7fd fade 	bl	14b90 <bt_conn_set_state>
	if (is_disconnected) {
   175d4:	f1b8 0f00 	cmp.w	r8, #0
   175d8:	d003      	beq.n	175e2 <bt_hci_le_enh_conn_complete+0x1f2>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   175da:	2101      	movs	r1, #1
   175dc:	4620      	mov	r0, r4
   175de:	f7fd fad7 	bl	14b90 <bt_conn_set_state>
	bt_conn_connected(conn);
   175e2:	4620      	mov	r0, r4
   175e4:	f00b faa7 	bl	22b36 <bt_conn_connected>
	conn_auto_initiate(conn);
   175e8:	4620      	mov	r0, r4
   175ea:	f7ff fe05 	bl	171f8 <conn_auto_initiate>
	bt_conn_unref(conn);
   175ee:	4620      	mov	r0, r4
   175f0:	e741      	b.n	17476 <bt_hci_le_enh_conn_complete+0x86>
   175f2:	bf00      	nop
   175f4:	2000305a 	.word	0x2000305a
   175f8:	00025264 	.word	0x00025264
   175fc:	00025224 	.word	0x00025224
   17600:	00027185 	.word	0x00027185
   17604:	000271a6 	.word	0x000271a6
   17608:	000271bf 	.word	0x000271bf
   1760c:	200002a8 	.word	0x200002a8

00017610 <bt_security_err_get>:
	switch (hci_err) {
   17610:	2829      	cmp	r0, #41	; 0x29
   17612:	bf9a      	itte	ls
   17614:	4b01      	ldrls	r3, [pc, #4]	; (1761c <bt_security_err_get+0xc>)
   17616:	5c18      	ldrbls	r0, [r3, r0]
{
   17618:	2009      	movhi	r0, #9
}
   1761a:	4770      	bx	lr
   1761c:	000272ea 	.word	0x000272ea

00017620 <hci_event_prio>:
{
   17620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17624:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   17626:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   1762a:	4630      	mov	r0, r6
   1762c:	f00c fcf6 	bl	2401c <net_buf_simple_headroom>
	state->len = buf->len;
   17630:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17634:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   17638:	4605      	mov	r5, r0
   1763a:	d80c      	bhi.n	17656 <hci_event_prio+0x36>
   1763c:	4a1c      	ldr	r2, [pc, #112]	; (176b0 <hci_event_prio+0x90>)
   1763e:	491d      	ldr	r1, [pc, #116]	; (176b4 <hci_event_prio+0x94>)
   17640:	481d      	ldr	r0, [pc, #116]	; (176b8 <hci_event_prio+0x98>)
   17642:	f640 5315 	movw	r3, #3349	; 0xd15
   17646:	f00a fbd9 	bl	21dfc <printk>
   1764a:	4040      	eors	r0, r0
   1764c:	f380 8811 	msr	BASEPRI, r0
   17650:	f04f 0003 	mov.w	r0, #3
   17654:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   17656:	2102      	movs	r1, #2
   17658:	4630      	mov	r0, r6
   1765a:	f00c fccf 	bl	23ffc <net_buf_simple_pull_mem>
   1765e:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   17660:	7800      	ldrb	r0, [r0, #0]
   17662:	f00b fd82 	bl	2316a <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   17666:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   17668:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1766a:	d40c      	bmi.n	17686 <hci_event_prio+0x66>
   1766c:	4a10      	ldr	r2, [pc, #64]	; (176b0 <hci_event_prio+0x90>)
   1766e:	4913      	ldr	r1, [pc, #76]	; (176bc <hci_event_prio+0x9c>)
   17670:	4811      	ldr	r0, [pc, #68]	; (176b8 <hci_event_prio+0x98>)
   17672:	f640 5319 	movw	r3, #3353	; 0xd19
   17676:	f00a fbc1 	bl	21dfc <printk>
   1767a:	4040      	eors	r0, r0
   1767c:	f380 8811 	msr	BASEPRI, r0
   17680:	f04f 0003 	mov.w	r0, #3
   17684:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   17686:	2305      	movs	r3, #5
   17688:	4a0d      	ldr	r2, [pc, #52]	; (176c0 <hci_event_prio+0xa0>)
   1768a:	7838      	ldrb	r0, [r7, #0]
   1768c:	4621      	mov	r1, r4
   1768e:	f7ff f8e5 	bl	1685c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   17692:	07b3      	lsls	r3, r6, #30
   17694:	d507      	bpl.n	176a6 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   17696:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   17698:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1769c:	fa10 f585 	uxtah	r5, r0, r5
   176a0:	60a5      	str	r5, [r4, #8]
}
   176a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   176a6:	4620      	mov	r0, r4
}
   176a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   176ac:	f002 be2a 	b.w	1a304 <net_buf_unref>
   176b0:	00026e7d 	.word	0x00026e7d
   176b4:	00026eb1 	.word	0x00026eb1
   176b8:	0002694b 	.word	0x0002694b
   176bc:	000271db 	.word	0x000271db
   176c0:	00025940 	.word	0x00025940

000176c4 <bt_recv>:
{
   176c4:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   176c6:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   176c8:	2901      	cmp	r1, #1
{
   176ca:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   176cc:	d007      	beq.n	176de <bt_recv+0x1a>
   176ce:	2903      	cmp	r1, #3
   176d0:	d113      	bne.n	176fa <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   176d2:	4812      	ldr	r0, [pc, #72]	; (1771c <bt_recv+0x58>)
   176d4:	4629      	mov	r1, r5
   176d6:	f00c fc37 	bl	23f48 <net_buf_put>
		return 0;
   176da:	2000      	movs	r0, #0
   176dc:	e00c      	b.n	176f8 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   176de:	6883      	ldr	r3, [r0, #8]
   176e0:	7818      	ldrb	r0, [r3, #0]
   176e2:	f00b fd42 	bl	2316a <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   176e6:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   176e8:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   176ea:	d502      	bpl.n	176f2 <bt_recv+0x2e>
			hci_event_prio(buf);
   176ec:	4628      	mov	r0, r5
   176ee:	f7ff ff97 	bl	17620 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   176f2:	f014 0002 	ands.w	r0, r4, #2
   176f6:	d1ec      	bne.n	176d2 <bt_recv+0xe>
}
   176f8:	bd38      	pop	{r3, r4, r5, pc}
   176fa:	4b09      	ldr	r3, [pc, #36]	; (17720 <bt_recv+0x5c>)
   176fc:	4a09      	ldr	r2, [pc, #36]	; (17724 <bt_recv+0x60>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   176fe:	480a      	ldr	r0, [pc, #40]	; (17728 <bt_recv+0x64>)
   17700:	1ad2      	subs	r2, r2, r3
   17702:	08d2      	lsrs	r2, r2, #3
   17704:	0192      	lsls	r2, r2, #6
   17706:	f042 0201 	orr.w	r2, r2, #1
   1770a:	f00a f92e 	bl	2196a <log_1>
		net_buf_unref(buf);
   1770e:	4628      	mov	r0, r5
   17710:	f002 fdf8 	bl	1a304 <net_buf_unref>
		return -EINVAL;
   17714:	f06f 0015 	mvn.w	r0, #21
   17718:	e7ee      	b.n	176f8 <bt_recv+0x34>
   1771a:	bf00      	nop
   1771c:	200003e4 	.word	0x200003e4
   17720:	00025224 	.word	0x00025224
   17724:	00025264 	.word	0x00025264
   17728:	000271f4 	.word	0x000271f4

0001772c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1772c:	4a08      	ldr	r2, [pc, #32]	; (17750 <bt_hci_driver_register+0x24>)
{
   1772e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   17730:	f8d2 016c 	ldr.w	r0, [r2, #364]	; 0x16c
   17734:	b930      	cbnz	r0, 17744 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   17736:	68d9      	ldr	r1, [r3, #12]
   17738:	b139      	cbz	r1, 1774a <bt_hci_driver_register+0x1e>
   1773a:	6919      	ldr	r1, [r3, #16]
   1773c:	b129      	cbz	r1, 1774a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1773e:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	return 0;
   17742:	4770      	bx	lr
		return -EALREADY;
   17744:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17748:	4770      	bx	lr
		return -EINVAL;
   1774a:	f06f 0015 	mvn.w	r0, #21
}
   1774e:	4770      	bx	lr
   17750:	200002a8 	.word	0x200002a8

00017754 <bt_finalize_init>:
{
   17754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17758:	4c31      	ldr	r4, [pc, #196]	; (17820 <bt_finalize_init+0xcc>)
   1775a:	f3bf 8f5b 	dmb	ish
   1775e:	b087      	sub	sp, #28
   17760:	f104 03cc 	add.w	r3, r4, #204	; 0xcc
   17764:	e853 2f00 	ldrex	r2, [r3]
   17768:	f042 0202 	orr.w	r2, r2, #2
   1776c:	e843 2100 	strex	r1, r2, [r3]
   17770:	2900      	cmp	r1, #0
   17772:	d1f7      	bne.n	17764 <bt_finalize_init+0x10>
   17774:	f3bf 8f5b 	dmb	ish
   17778:	4b2a      	ldr	r3, [pc, #168]	; (17824 <bt_finalize_init+0xd0>)
   1777a:	4d2b      	ldr	r5, [pc, #172]	; (17828 <bt_finalize_init+0xd4>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   1777c:	492b      	ldr	r1, [pc, #172]	; (1782c <bt_finalize_init+0xd8>)
   1777e:	4e2c      	ldr	r6, [pc, #176]	; (17830 <bt_finalize_init+0xdc>)
		BT_INFO("Identity[%d]: %s",
   17780:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 17840 <bt_finalize_init+0xec>
   17784:	1aed      	subs	r5, r5, r3
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   17786:	79e3      	ldrb	r3, [r4, #7]
   17788:	4620      	mov	r0, r4
   1778a:	2b01      	cmp	r3, #1
   1778c:	bf88      	it	hi
   1778e:	460e      	movhi	r6, r1
   17790:	f7fb fc84 	bl	1309c <bt_addr_le_str_real>
   17794:	f7fa f9ca 	bl	11b2c <z_log_strdup>
   17798:	08ed      	lsrs	r5, r5, #3
   1779a:	01ad      	lsls	r5, r5, #6
   1779c:	f045 0703 	orr.w	r7, r5, #3
   177a0:	4602      	mov	r2, r0
   177a2:	4631      	mov	r1, r6
   177a4:	4823      	ldr	r0, [pc, #140]	; (17834 <bt_finalize_init+0xe0>)
   177a6:	463b      	mov	r3, r7
   177a8:	f00a f8f3 	bl	21992 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   177ac:	46a0      	mov	r8, r4
   177ae:	2601      	movs	r6, #1
   177b0:	79e3      	ldrb	r3, [r4, #7]
   177b2:	429e      	cmp	r6, r3
   177b4:	f108 0807 	add.w	r8, r8, #7
   177b8:	db25      	blt.n	17806 <bt_finalize_init+0xb2>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   177ba:	f894 6068 	ldrb.w	r6, [r4, #104]	; 0x68
   177be:	4630      	mov	r0, r6
   177c0:	f7fe fe1c 	bl	163fc <ver_str>
   177c4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
   177c8:	9304      	str	r3, [sp, #16]
   177ca:	f045 0503 	orr.w	r5, r5, #3
   177ce:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
   177d2:	9305      	str	r3, [sp, #20]
   177d4:	e9cd 0602 	strd	r0, r6, [sp, #8]
   177d8:	462b      	mov	r3, r5
   177da:	a902      	add	r1, sp, #8
   177dc:	2204      	movs	r2, #4
   177de:	4816      	ldr	r0, [pc, #88]	; (17838 <bt_finalize_init+0xe4>)
   177e0:	f00a f90c 	bl	219fc <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   177e4:	f894 6069 	ldrb.w	r6, [r4, #105]	; 0x69
   177e8:	4630      	mov	r0, r6
   177ea:	f7fe fe07 	bl	163fc <ver_str>
   177ee:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   177f2:	f8ad 5000 	strh.w	r5, [sp]
   177f6:	4601      	mov	r1, r0
   177f8:	4632      	mov	r2, r6
   177fa:	4810      	ldr	r0, [pc, #64]	; (1783c <bt_finalize_init+0xe8>)
   177fc:	f00a f8e2 	bl	219c4 <log_3>
}
   17800:	b007      	add	sp, #28
   17802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
   17806:	4640      	mov	r0, r8
   17808:	f7fb fc48 	bl	1309c <bt_addr_le_str_real>
   1780c:	f7fa f98e 	bl	11b2c <z_log_strdup>
   17810:	4631      	mov	r1, r6
   17812:	4602      	mov	r2, r0
   17814:	463b      	mov	r3, r7
   17816:	4648      	mov	r0, r9
   17818:	f00a f8bb 	bl	21992 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   1781c:	3601      	adds	r6, #1
   1781e:	e7c7      	b.n	177b0 <bt_finalize_init+0x5c>
   17820:	200002a8 	.word	0x200002a8
   17824:	00025224 	.word	0x00025224
   17828:	00025264 	.word	0x00025264
   1782c:	00027208 	.word	0x00027208
   17830:	00025e03 	.word	0x00025e03
   17834:	0002720c 	.word	0x0002720c
   17838:	0002722c 	.word	0x0002722c
   1783c:	0002726a 	.word	0x0002726a
   17840:	0002721b 	.word	0x0002721b

00017844 <init_work>:
{
   17844:	b510      	push	{r4, lr}
	err = hci_init();
   17846:	f7f8 ff6b 	bl	10720 <hci_init>
	if (err) {
   1784a:	4604      	mov	r4, r0
   1784c:	b928      	cbnz	r0, 1785a <init_work+0x16>
		err = bt_conn_init();
   1784e:	f7fd fd65 	bl	1531c <bt_conn_init>
		if (err) {
   17852:	4604      	mov	r4, r0
   17854:	b908      	cbnz	r0, 1785a <init_work+0x16>
	bt_finalize_init();
   17856:	f7ff ff7d 	bl	17754 <bt_finalize_init>
	if (ready_cb) {
   1785a:	4b04      	ldr	r3, [pc, #16]	; (1786c <init_work+0x28>)
   1785c:	681b      	ldr	r3, [r3, #0]
   1785e:	b11b      	cbz	r3, 17868 <init_work+0x24>
		ready_cb(err);
   17860:	4620      	mov	r0, r4
}
   17862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   17866:	4718      	bx	r3
}
   17868:	bd10      	pop	{r4, pc}
   1786a:	bf00      	nop
   1786c:	2000252c 	.word	0x2000252c

00017870 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   17870:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
   17874:	4d3f      	ldr	r5, [pc, #252]	; (17974 <bt_enable+0x104>)
   17876:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
{
   1787a:	b088      	sub	sp, #32
   1787c:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   1787e:	b97b      	cbnz	r3, 178a0 <bt_enable+0x30>
   17880:	4b3d      	ldr	r3, [pc, #244]	; (17978 <bt_enable+0x108>)
   17882:	493e      	ldr	r1, [pc, #248]	; (1797c <bt_enable+0x10c>)
		BT_ERR("No HCI driver registered");
   17884:	483e      	ldr	r0, [pc, #248]	; (17980 <bt_enable+0x110>)
   17886:	1ac9      	subs	r1, r1, r3
   17888:	08c9      	lsrs	r1, r1, #3
   1788a:	0189      	lsls	r1, r1, #6
   1788c:	f041 0101 	orr.w	r1, r1, #1
   17890:	f00a f85e 	bl	21950 <log_0>
		return -ENODEV;
   17894:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   17898:	4620      	mov	r0, r4
   1789a:	b008      	add	sp, #32
   1789c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   178a0:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   178a4:	f3bf 8f5b 	dmb	ish
   178a8:	e853 4f00 	ldrex	r4, [r3]
   178ac:	f044 0201 	orr.w	r2, r4, #1
   178b0:	e843 2100 	strex	r1, r2, [r3]
   178b4:	2900      	cmp	r1, #0
   178b6:	d1f7      	bne.n	178a8 <bt_enable+0x38>
   178b8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   178bc:	f014 0401 	ands.w	r4, r4, #1
   178c0:	d154      	bne.n	1796c <bt_enable+0xfc>
	ready_cb = cb;
   178c2:	4b30      	ldr	r3, [pc, #192]	; (17984 <bt_enable+0x114>)
   178c4:	f04f 0800 	mov.w	r8, #0
   178c8:	601e      	str	r6, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   178ca:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   178ce:	f06f 0308 	mvn.w	r3, #8
   178d2:	e9cd 4302 	strd	r4, r3, [sp, #8]
   178d6:	e9cd 8906 	strd	r8, r9, [sp, #24]
   178da:	e9cd 4400 	strd	r4, r4, [sp]
   178de:	4b2a      	ldr	r3, [pc, #168]	; (17988 <bt_enable+0x118>)
   178e0:	492a      	ldr	r1, [pc, #168]	; (1798c <bt_enable+0x11c>)
   178e2:	9404      	str	r4, [sp, #16]
   178e4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   178e8:	4829      	ldr	r0, [pc, #164]	; (17990 <bt_enable+0x120>)
   178ea:	f005 fb7b 	bl	1cfe4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   178ee:	4929      	ldr	r1, [pc, #164]	; (17994 <bt_enable+0x124>)
   178f0:	4827      	ldr	r0, [pc, #156]	; (17990 <bt_enable+0x120>)
   178f2:	f00d f981 	bl	24bf8 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   178f6:	f06f 0307 	mvn.w	r3, #7
   178fa:	e9cd 4302 	strd	r4, r3, [sp, #8]
   178fe:	e9cd 8906 	strd	r8, r9, [sp, #24]
   17902:	e9cd 4400 	strd	r4, r4, [sp]
   17906:	4b24      	ldr	r3, [pc, #144]	; (17998 <bt_enable+0x128>)
   17908:	4924      	ldr	r1, [pc, #144]	; (1799c <bt_enable+0x12c>)
   1790a:	9404      	str	r4, [sp, #16]
   1790c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17910:	4823      	ldr	r0, [pc, #140]	; (179a0 <bt_enable+0x130>)
   17912:	f005 fb67 	bl	1cfe4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   17916:	4923      	ldr	r1, [pc, #140]	; (179a4 <bt_enable+0x134>)
   17918:	4821      	ldr	r0, [pc, #132]	; (179a0 <bt_enable+0x130>)
   1791a:	f00d f96d 	bl	24bf8 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
   1791e:	f000 f9f1 	bl	17d04 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
   17922:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   17926:	68db      	ldr	r3, [r3, #12]
   17928:	4798      	blx	r3
	if (err) {
   1792a:	4604      	mov	r4, r0
   1792c:	b158      	cbz	r0, 17946 <bt_enable+0xd6>
   1792e:	4b12      	ldr	r3, [pc, #72]	; (17978 <bt_enable+0x108>)
   17930:	4a12      	ldr	r2, [pc, #72]	; (1797c <bt_enable+0x10c>)
   17932:	1ad2      	subs	r2, r2, r3
   17934:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
   17936:	0192      	lsls	r2, r2, #6
   17938:	4601      	mov	r1, r0
   1793a:	f042 0201 	orr.w	r2, r2, #1
   1793e:	481a      	ldr	r0, [pc, #104]	; (179a8 <bt_enable+0x138>)
   17940:	f00a f813 	bl	2196a <log_1>
		return err;
   17944:	e7a8      	b.n	17898 <bt_enable+0x28>
	if (!cb) {
   17946:	b966      	cbnz	r6, 17962 <bt_enable+0xf2>
	err = hci_init();
   17948:	f7f8 feea 	bl	10720 <hci_init>
	if (err) {
   1794c:	4604      	mov	r4, r0
   1794e:	2800      	cmp	r0, #0
   17950:	d1a2      	bne.n	17898 <bt_enable+0x28>
		err = bt_conn_init();
   17952:	f7fd fce3 	bl	1531c <bt_conn_init>
		if (err) {
   17956:	4604      	mov	r4, r0
   17958:	2800      	cmp	r0, #0
   1795a:	d19d      	bne.n	17898 <bt_enable+0x28>
	bt_finalize_init();
   1795c:	f7ff fefa 	bl	17754 <bt_finalize_init>
	return 0;
   17960:	e79a      	b.n	17898 <bt_enable+0x28>
	k_work_submit(&bt_dev.init);
   17962:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   17966:	f005 fecd 	bl	1d704 <k_work_submit>
	return 0;
   1796a:	e795      	b.n	17898 <bt_enable+0x28>
		return -EALREADY;
   1796c:	f06f 0477 	mvn.w	r4, #119	; 0x77
   17970:	e792      	b.n	17898 <bt_enable+0x28>
   17972:	bf00      	nop
   17974:	200002a8 	.word	0x200002a8
   17978:	00025224 	.word	0x00025224
   1797c:	00025264 	.word	0x00025264
   17980:	00027291 	.word	0x00027291
   17984:	2000252c 	.word	0x2000252c
   17988:	00016b4d 	.word	0x00016b4d
   1798c:	200040c0 	.word	0x200040c0
   17990:	20001820 	.word	0x20001820
   17994:	000272aa 	.word	0x000272aa
   17998:	000168e1 	.word	0x000168e1
   1799c:	20003ca0 	.word	0x20003ca0
   179a0:	200017a0 	.word	0x200017a0
   179a4:	000272b0 	.word	0x000272b0
   179a8:	000272b6 	.word	0x000272b6

000179ac <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   179ac:	4800      	ldr	r0, [pc, #0]	; (179b0 <bt_get_name+0x4>)
   179ae:	4770      	bx	lr
   179b0:	000272d2 	.word	0x000272d2

000179b4 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
   179b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   179b8:	4b6a      	ldr	r3, [pc, #424]	; (17b64 <ecc_thread+0x1b0>)
   179ba:	4d6b      	ldr	r5, [pc, #428]	; (17b68 <ecc_thread+0x1b4>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   179bc:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 17b88 <ecc_thread+0x1d4>
	return z_impl_k_sem_take(sem, timeout);
   179c0:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 17b8c <ecc_thread+0x1d8>
   179c4:	1aed      	subs	r5, r5, r3
   179c6:	08ed      	lsrs	r5, r5, #3
   179c8:	4647      	mov	r7, r8
   179ca:	f04f 32ff 	mov.w	r2, #4294967295
   179ce:	f04f 33ff 	mov.w	r3, #4294967295
   179d2:	4648      	mov	r0, r9
   179d4:	f005 fa90 	bl	1cef8 <z_impl_k_sem_take>
   179d8:	f3bf 8f5b 	dmb	ish
   179dc:	f8d8 4000 	ldr.w	r4, [r8]
   179e0:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   179e4:	f014 0401 	ands.w	r4, r4, #1
   179e8:	d05a      	beq.n	17aa0 <ecc_thread+0xec>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   179ea:	f8df a194 	ldr.w	sl, [pc, #404]	; 17b80 <ecc_thread+0x1cc>
   179ee:	4c5f      	ldr	r4, [pc, #380]	; (17b6c <ecc_thread+0x1b8>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   179f0:	4e5f      	ldr	r6, [pc, #380]	; (17b70 <ecc_thread+0x1bc>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
   179f2:	4860      	ldr	r0, [pc, #384]	; (17b74 <ecc_thread+0x1c0>)
   179f4:	4652      	mov	r2, sl
   179f6:	4621      	mov	r1, r4
   179f8:	f009 fc25 	bl	21246 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
   179fc:	bbe8      	cbnz	r0, 17a7a <ecc_thread+0xc6>
			BT_ERR("Failed to create ECC public/private pair");
   179fe:	01a9      	lsls	r1, r5, #6
   17a00:	485d      	ldr	r0, [pc, #372]	; (17b78 <ecc_thread+0x1c4>)
   17a02:	f041 0101 	orr.w	r1, r1, #1
   17a06:	f009 ffa3 	bl	21950 <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
   17a0a:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   17a0e:	f04f 32ff 	mov.w	r2, #4294967295
   17a12:	f04f 33ff 	mov.w	r3, #4294967295
   17a16:	2001      	movs	r0, #1
   17a18:	f7fc fe22 	bl	14660 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   17a1c:	f100 0608 	add.w	r6, r0, #8
   17a20:	2102      	movs	r1, #2
   17a22:	4604      	mov	r4, r0
   17a24:	4630      	mov	r0, r6
   17a26:	f00c fac2 	bl	23fae <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   17a2a:	233e      	movs	r3, #62	; 0x3e
   17a2c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   17a2e:	2342      	movs	r3, #66	; 0x42
   17a30:	7043      	strb	r3, [r0, #1]
   17a32:	2101      	movs	r1, #1
   17a34:	4630      	mov	r0, r6
   17a36:	f00c faba 	bl	23fae <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   17a3a:	2308      	movs	r3, #8
   17a3c:	7003      	strb	r3, [r0, #0]
   17a3e:	2141      	movs	r1, #65	; 0x41
   17a40:	4630      	mov	r0, r6
   17a42:	f00c fab4 	bl	23fae <net_buf_simple_add>
   17a46:	4606      	mov	r6, r0
	evt->status = status;
   17a48:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
   17a4c:	f1ba 0f00 	cmp.w	sl, #0
   17a50:	d01d      	beq.n	17a8e <ecc_thread+0xda>
		(void)memset(evt->key, 0, sizeof(evt->key));
   17a52:	2240      	movs	r2, #64	; 0x40
   17a54:	2100      	movs	r1, #0
   17a56:	f00a fa87 	bl	21f68 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17a5a:	f3bf 8f5b 	dmb	ish
   17a5e:	e857 3f00 	ldrex	r3, [r7]
   17a62:	f023 0301 	bic.w	r3, r3, #1
   17a66:	e847 3200 	strex	r2, r3, [r7]
   17a6a:	2a00      	cmp	r2, #0
   17a6c:	d1f7      	bne.n	17a5e <ecc_thread+0xaa>
   17a6e:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   17a72:	4620      	mov	r0, r4
	bt_recv(buf);
   17a74:	f7ff fe26 	bl	176c4 <bt_recv>
	while (true) {
   17a78:	e7a7      	b.n	179ca <ecc_thread+0x16>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
   17a7a:	2220      	movs	r2, #32
   17a7c:	4631      	mov	r1, r6
   17a7e:	4620      	mov	r0, r4
   17a80:	f00a fa40 	bl	21f04 <memcmp>
   17a84:	2800      	cmp	r0, #0
   17a86:	d0b4      	beq.n	179f2 <ecc_thread+0x3e>
	return 0;
   17a88:	f04f 0a00 	mov.w	sl, #0
   17a8c:	e7bf      	b.n	17a0e <ecc_thread+0x5a>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
   17a8e:	4939      	ldr	r1, [pc, #228]	; (17b74 <ecc_thread+0x1c0>)
   17a90:	f00b fc8e 	bl	233b0 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
   17a94:	4939      	ldr	r1, [pc, #228]	; (17b7c <ecc_thread+0x1c8>)
   17a96:	f106 0021 	add.w	r0, r6, #33	; 0x21
   17a9a:	f00b fc89 	bl	233b0 <sys_memcpy_swap.constprop.0>
   17a9e:	e7dc      	b.n	17a5a <ecc_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17aa0:	f3bf 8f5b 	dmb	ish
   17aa4:	f8d8 3000 	ldr.w	r3, [r8]
   17aa8:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
   17aac:	079b      	lsls	r3, r3, #30
   17aae:	d58c      	bpl.n	179ca <ecc_thread+0x16>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
   17ab0:	4933      	ldr	r1, [pc, #204]	; (17b80 <ecc_thread+0x1cc>)
   17ab2:	4830      	ldr	r0, [pc, #192]	; (17b74 <ecc_thread+0x1c0>)
   17ab4:	f009 fba4 	bl	21200 <uECC_valid_public_key>
	if (ret < 0) {
   17ab8:	1e01      	subs	r1, r0, #0
   17aba:	da38      	bge.n	17b2e <ecc_thread+0x17a>
		BT_ERR("public key is not valid (ret %d)", ret);
   17abc:	01aa      	lsls	r2, r5, #6
   17abe:	4831      	ldr	r0, [pc, #196]	; (17b84 <ecc_thread+0x1d0>)
   17ac0:	f042 0201 	orr.w	r2, r2, #1
   17ac4:	f009 ff51 	bl	2196a <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   17ac8:	f04f 32ff 	mov.w	r2, #4294967295
   17acc:	f04f 33ff 	mov.w	r3, #4294967295
   17ad0:	2001      	movs	r0, #1
   17ad2:	f7fc fdc5 	bl	14660 <bt_buf_get_rx>
   17ad6:	f100 0a08 	add.w	sl, r0, #8
   17ada:	2102      	movs	r1, #2
   17adc:	4606      	mov	r6, r0
   17ade:	4650      	mov	r0, sl
   17ae0:	f00c fa65 	bl	23fae <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   17ae4:	233e      	movs	r3, #62	; 0x3e
   17ae6:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   17ae8:	2322      	movs	r3, #34	; 0x22
   17aea:	7043      	strb	r3, [r0, #1]
   17aec:	2101      	movs	r1, #1
   17aee:	4650      	mov	r0, sl
   17af0:	f00c fa5d 	bl	23fae <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   17af4:	2309      	movs	r3, #9
   17af6:	7003      	strb	r3, [r0, #0]
   17af8:	2121      	movs	r1, #33	; 0x21
   17afa:	4650      	mov	r0, sl
   17afc:	f00c fa57 	bl	23fae <net_buf_simple_add>
   17b00:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
   17b02:	3001      	adds	r0, #1
   17b04:	bb3c      	cbnz	r4, 17b56 <ecc_thread+0x1a2>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
   17b06:	221f      	movs	r2, #31
   17b08:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   17b0a:	21ff      	movs	r1, #255	; 0xff
   17b0c:	2220      	movs	r2, #32
   17b0e:	f00a fa2b 	bl	21f68 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17b12:	f3bf 8f5b 	dmb	ish
   17b16:	e857 3f00 	ldrex	r3, [r7]
   17b1a:	f023 0302 	bic.w	r3, r3, #2
   17b1e:	e847 3200 	strex	r2, r3, [r7]
   17b22:	2a00      	cmp	r2, #0
   17b24:	d1f7      	bne.n	17b16 <ecc_thread+0x162>
   17b26:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
   17b2a:	4630      	mov	r0, r6
   17b2c:	e7a2      	b.n	17a74 <ecc_thread+0xc0>
		ret = uECC_shared_secret(ecc.public_key_be,
   17b2e:	490f      	ldr	r1, [pc, #60]	; (17b6c <ecc_thread+0x1b8>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17b30:	f3bf 8f5b 	dmb	ish
   17b34:	f8d8 3000 	ldr.w	r3, [r8]
   17b38:	480d      	ldr	r0, [pc, #52]	; (17b70 <ecc_thread+0x1bc>)
   17b3a:	f3bf 8f5b 	dmb	ish
   17b3e:	f013 0f04 	tst.w	r3, #4
   17b42:	f101 0220 	add.w	r2, r1, #32
   17b46:	4b0e      	ldr	r3, [pc, #56]	; (17b80 <ecc_thread+0x1cc>)
   17b48:	bf18      	it	ne
   17b4a:	4601      	movne	r1, r0
   17b4c:	4610      	mov	r0, r2
   17b4e:	f009 fbc9 	bl	212e4 <uECC_shared_secret>
   17b52:	4604      	mov	r4, r0
   17b54:	e7b8      	b.n	17ac8 <ecc_thread+0x114>
		evt->status = 0U;
   17b56:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   17b58:	4906      	ldr	r1, [pc, #24]	; (17b74 <ecc_thread+0x1c0>)
		evt->status = 0U;
   17b5a:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
   17b5c:	f00b fc28 	bl	233b0 <sys_memcpy_swap.constprop.0>
   17b60:	e7d7      	b.n	17b12 <ecc_thread+0x15e>
   17b62:	bf00      	nop
   17b64:	00025224 	.word	0x00025224
   17b68:	0002526c 	.word	0x0002526c
   17b6c:	20003141 	.word	0x20003141
   17b70:	00027370 	.word	0x00027370
   17b74:	20003161 	.word	0x20003161
   17b78:	00027314 	.word	0x00027314
   17b7c:	20003181 	.word	0x20003181
   17b80:	00025978 	.word	0x00025978
   17b84:	0002733d 	.word	0x0002733d
   17b88:	20002530 	.word	0x20002530
   17b8c:	200007d4 	.word	0x200007d4

00017b90 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
   17b90:	b570      	push	{r4, r5, r6, lr}
   17b92:	4c21      	ldr	r4, [pc, #132]	; (17c18 <le_gen_dhkey+0x88>)
   17b94:	f3bf 8f5b 	dmb	ish
   17b98:	6823      	ldr	r3, [r4, #0]
   17b9a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   17b9e:	07da      	lsls	r2, r3, #31
{
   17ba0:	4606      	mov	r6, r0
   17ba2:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
   17ba4:	d501      	bpl.n	17baa <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   17ba6:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
   17ba8:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   17baa:	2901      	cmp	r1, #1
   17bac:	d831      	bhi.n	17c12 <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17bae:	f3bf 8f5b 	dmb	ish
   17bb2:	e854 3f00 	ldrex	r3, [r4]
   17bb6:	f043 0202 	orr.w	r2, r3, #2
   17bba:	e844 2100 	strex	r1, r2, [r4]
   17bbe:	2900      	cmp	r1, #0
   17bc0:	d1f7      	bne.n	17bb2 <le_gen_dhkey+0x22>
   17bc2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
   17bc6:	079b      	lsls	r3, r3, #30
   17bc8:	d4ed      	bmi.n	17ba6 <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
   17bca:	4814      	ldr	r0, [pc, #80]	; (17c1c <le_gen_dhkey+0x8c>)
   17bcc:	4631      	mov	r1, r6
   17bce:	f00b fbef 	bl	233b0 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
   17bd2:	4813      	ldr	r0, [pc, #76]	; (17c20 <le_gen_dhkey+0x90>)
   17bd4:	f106 0120 	add.w	r1, r6, #32
   17bd8:	f00b fbea 	bl	233b0 <sys_memcpy_swap.constprop.0>
   17bdc:	f3bf 8f5b 	dmb	ish
	if (val) {
   17be0:	b175      	cbz	r5, 17c00 <le_gen_dhkey+0x70>
   17be2:	e854 3f00 	ldrex	r3, [r4]
   17be6:	f043 0304 	orr.w	r3, r3, #4
   17bea:	e844 3200 	strex	r2, r3, [r4]
   17bee:	2a00      	cmp	r2, #0
   17bf0:	d1f7      	bne.n	17be2 <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17bf2:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
   17bf6:	480b      	ldr	r0, [pc, #44]	; (17c24 <le_gen_dhkey+0x94>)
   17bf8:	f005 f958 	bl	1ceac <z_impl_k_sem_give>
   17bfc:	2000      	movs	r0, #0
   17bfe:	e7d3      	b.n	17ba8 <le_gen_dhkey+0x18>
   17c00:	e854 3f00 	ldrex	r3, [r4]
   17c04:	f023 0304 	bic.w	r3, r3, #4
   17c08:	e844 3200 	strex	r2, r3, [r4]
   17c0c:	2a00      	cmp	r2, #0
   17c0e:	d0f0      	beq.n	17bf2 <le_gen_dhkey+0x62>
   17c10:	e7f6      	b.n	17c00 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
   17c12:	2012      	movs	r0, #18
   17c14:	e7c8      	b.n	17ba8 <le_gen_dhkey+0x18>
   17c16:	bf00      	nop
   17c18:	20002530 	.word	0x20002530
   17c1c:	20003161 	.word	0x20003161
   17c20:	20003181 	.word	0x20003181
   17c24:	200007d4 	.word	0x200007d4

00017c28 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
   17c28:	b570      	push	{r4, r5, r6, lr}
   17c2a:	7d06      	ldrb	r6, [r0, #20]
   17c2c:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
   17c2e:	b976      	cbnz	r6, 17c4e <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
   17c30:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
   17c32:	881d      	ldrh	r5, [r3, #0]
   17c34:	f242 0226 	movw	r2, #8230	; 0x2026
   17c38:	4295      	cmp	r5, r2
   17c3a:	d045      	beq.n	17cc8 <bt_hci_ecc_send+0xa0>
   17c3c:	d80f      	bhi.n	17c5e <bt_hci_ecc_send+0x36>
   17c3e:	f242 0201 	movw	r2, #8193	; 0x2001
   17c42:	4295      	cmp	r5, r2
   17c44:	d04f      	beq.n	17ce6 <bt_hci_ecc_send+0xbe>
   17c46:	f242 0325 	movw	r3, #8229	; 0x2025
   17c4a:	429d      	cmp	r5, r3
   17c4c:	d013      	beq.n	17c76 <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
   17c4e:	4b2a      	ldr	r3, [pc, #168]	; (17cf8 <bt_hci_ecc_send+0xd0>)
   17c50:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   17c54:	4620      	mov	r0, r4
   17c56:	691b      	ldr	r3, [r3, #16]
}
   17c58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
   17c5c:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
   17c5e:	f242 035e 	movw	r3, #8286	; 0x205e
   17c62:	429d      	cmp	r5, r3
   17c64:	d1f3      	bne.n	17c4e <bt_hci_ecc_send+0x26>
	return net_buf_simple_pull(&buf->b, len);
   17c66:	2103      	movs	r1, #3
   17c68:	3008      	adds	r0, #8
   17c6a:	f00c f9bf 	bl	23fec <net_buf_simple_pull>
	cmd = (void *)buf->data;
   17c6e:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   17c70:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   17c74:	e02e      	b.n	17cd4 <bt_hci_ecc_send+0xac>
   17c76:	2103      	movs	r1, #3
   17c78:	3008      	adds	r0, #8
   17c7a:	f00c f9b7 	bl	23fec <net_buf_simple_pull>
	net_buf_unref(buf);
   17c7e:	4620      	mov	r0, r4
   17c80:	f002 fb40 	bl	1a304 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17c84:	f3bf 8f5b 	dmb	ish
   17c88:	4b1c      	ldr	r3, [pc, #112]	; (17cfc <bt_hci_ecc_send+0xd4>)
   17c8a:	681a      	ldr	r2, [r3, #0]
   17c8c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
   17c90:	0792      	lsls	r2, r2, #30
   17c92:	d507      	bpl.n	17ca4 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
   17c94:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
   17c96:	4631      	mov	r1, r6
   17c98:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   17c9c:	f00b fb64 	bl	23368 <send_cmd_status>
}
   17ca0:	2000      	movs	r0, #0
   17ca2:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17ca4:	f3bf 8f5b 	dmb	ish
   17ca8:	e853 2f00 	ldrex	r2, [r3]
   17cac:	f042 0101 	orr.w	r1, r2, #1
   17cb0:	e843 1000 	strex	r0, r1, [r3]
   17cb4:	2800      	cmp	r0, #0
   17cb6:	d1f7      	bne.n	17ca8 <bt_hci_ecc_send+0x80>
   17cb8:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
   17cbc:	07d3      	lsls	r3, r2, #31
   17cbe:	d4e9      	bmi.n	17c94 <bt_hci_ecc_send+0x6c>
   17cc0:	480f      	ldr	r0, [pc, #60]	; (17d00 <bt_hci_ecc_send+0xd8>)
   17cc2:	f005 f8f3 	bl	1ceac <z_impl_k_sem_give>
}
   17cc6:	e7e6      	b.n	17c96 <bt_hci_ecc_send+0x6e>
   17cc8:	2103      	movs	r1, #3
   17cca:	3008      	adds	r0, #8
   17ccc:	f00c f98e 	bl	23fec <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
   17cd0:	68a0      	ldr	r0, [r4, #8]
   17cd2:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
   17cd4:	f7ff ff5c 	bl	17b90 <le_gen_dhkey>
   17cd8:	4606      	mov	r6, r0
	net_buf_unref(buf);
   17cda:	4620      	mov	r0, r4
   17cdc:	f002 fb12 	bl	1a304 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
   17ce0:	4631      	mov	r1, r6
   17ce2:	4628      	mov	r0, r5
   17ce4:	e7da      	b.n	17c9c <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
   17ce6:	78da      	ldrb	r2, [r3, #3]
   17ce8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   17cec:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
   17cee:	791a      	ldrb	r2, [r3, #4]
   17cf0:	f022 0201 	bic.w	r2, r2, #1
   17cf4:	711a      	strb	r2, [r3, #4]
}
   17cf6:	e7aa      	b.n	17c4e <bt_hci_ecc_send+0x26>
   17cf8:	200002a8 	.word	0x200002a8
   17cfc:	20002530 	.word	0x20002530
   17d00:	200007d4 	.word	0x200007d4

00017d04 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
   17d04:	b510      	push	{r4, lr}
   17d06:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17d08:	4c0c      	ldr	r4, [pc, #48]	; (17d3c <bt_hci_ecc_init+0x38>)
   17d0a:	490d      	ldr	r1, [pc, #52]	; (17d40 <bt_hci_ecc_init+0x3c>)
   17d0c:	2200      	movs	r2, #0
   17d0e:	2300      	movs	r3, #0
   17d10:	e9cd 2306 	strd	r2, r3, [sp, #24]
   17d14:	2300      	movs	r3, #0
   17d16:	220a      	movs	r2, #10
   17d18:	e9cd 2303 	strd	r2, r3, [sp, #12]
   17d1c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   17d20:	9300      	str	r3, [sp, #0]
   17d22:	f44f 628f 	mov.w	r2, #1144	; 0x478
   17d26:	4b07      	ldr	r3, [pc, #28]	; (17d44 <bt_hci_ecc_init+0x40>)
   17d28:	4620      	mov	r0, r4
   17d2a:	f005 f95b 	bl	1cfe4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   17d2e:	4906      	ldr	r1, [pc, #24]	; (17d48 <bt_hci_ecc_init+0x44>)
   17d30:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
   17d32:	b008      	add	sp, #32
   17d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17d38:	f00c bf5e 	b.w	24bf8 <z_impl_k_thread_name_set>
   17d3c:	200018a0 	.word	0x200018a0
   17d40:	200046e0 	.word	0x200046e0
   17d44:	000179b5 	.word	0x000179b5
   17d48:	0002735e 	.word	0x0002735e

00017d4c <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   17d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   17d4e:	4f0b      	ldr	r7, [pc, #44]	; (17d7c <id_find+0x30>)
{
   17d50:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   17d52:	2500      	movs	r5, #0
   17d54:	79fb      	ldrb	r3, [r7, #7]
   17d56:	b2ec      	uxtb	r4, r5
   17d58:	42a3      	cmp	r3, r4
   17d5a:	d802      	bhi.n	17d62 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   17d5c:	f06f 0401 	mvn.w	r4, #1
   17d60:	e009      	b.n	17d76 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   17d62:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   17d66:	2207      	movs	r2, #7
   17d68:	4439      	add	r1, r7
   17d6a:	4630      	mov	r0, r6
   17d6c:	f00a f8ca 	bl	21f04 <memcmp>
   17d70:	3501      	adds	r5, #1
   17d72:	2800      	cmp	r0, #0
   17d74:	d1ee      	bne.n	17d54 <id_find+0x8>
}
   17d76:	4620      	mov	r0, r4
   17d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17d7a:	bf00      	nop
   17d7c:	200002a8 	.word	0x200002a8

00017d80 <set_random_address>:
{
   17d80:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   17d82:	4914      	ldr	r1, [pc, #80]	; (17dd4 <set_random_address+0x54>)
   17d84:	2206      	movs	r2, #6
   17d86:	4605      	mov	r5, r0
   17d88:	f00a f8bc 	bl	21f04 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   17d8c:	4604      	mov	r4, r0
   17d8e:	b1e0      	cbz	r0, 17dca <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   17d90:	2106      	movs	r1, #6
   17d92:	f242 0005 	movw	r0, #8197	; 0x2005
   17d96:	f7ff f831 	bl	16dfc <bt_hci_cmd_create>
	if (!buf) {
   17d9a:	4604      	mov	r4, r0
   17d9c:	b1b8      	cbz	r0, 17dce <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17d9e:	2206      	movs	r2, #6
   17da0:	4629      	mov	r1, r5
   17da2:	3008      	adds	r0, #8
   17da4:	f00c f909 	bl	23fba <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   17da8:	4621      	mov	r1, r4
   17daa:	2200      	movs	r2, #0
   17dac:	f242 0005 	movw	r0, #8197	; 0x2005
   17db0:	f7ff f980 	bl	170b4 <bt_hci_cmd_send_sync>
	if (err) {
   17db4:	4604      	mov	r4, r0
   17db6:	b940      	cbnz	r0, 17dca <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   17db8:	2206      	movs	r2, #6
   17dba:	4806      	ldr	r0, [pc, #24]	; (17dd4 <set_random_address+0x54>)
   17dbc:	4629      	mov	r1, r5
   17dbe:	f00a f8c8 	bl	21f52 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   17dc2:	4b05      	ldr	r3, [pc, #20]	; (17dd8 <set_random_address+0x58>)
   17dc4:	2201      	movs	r2, #1
   17dc6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
   17dca:	4620      	mov	r0, r4
   17dcc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   17dce:	f06f 0468 	mvn.w	r4, #104	; 0x68
   17dd2:	e7fa      	b.n	17dca <set_random_address+0x4a>
   17dd4:	20000309 	.word	0x20000309
   17dd8:	200002a8 	.word	0x200002a8

00017ddc <id_create.isra.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   17ddc:	b530      	push	{r4, r5, lr}
   17dde:	4604      	mov	r4, r0
   17de0:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   17de2:	460d      	mov	r5, r1
   17de4:	b199      	cbz	r1, 17e0e <id_create.isra.0+0x32>
   17de6:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   17de8:	2207      	movs	r2, #7
   17dea:	a902      	add	r1, sp, #8
   17dec:	4628      	mov	r0, r5
   17dee:	9302      	str	r3, [sp, #8]
   17df0:	f8cd 300b 	str.w	r3, [sp, #11]
   17df4:	f00a f886 	bl	21f04 <memcmp>
   17df8:	b148      	cbz	r0, 17e0e <id_create.isra.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   17dfa:	4810      	ldr	r0, [pc, #64]	; (17e3c <id_create.isra.0+0x60>)
   17dfc:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   17e00:	4629      	mov	r1, r5
   17e02:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   17e04:	f00b faf2 	bl	233ec <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   17e08:	2000      	movs	r0, #0
}
   17e0a:	b005      	add	sp, #20
   17e0c:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   17e0e:	4668      	mov	r0, sp
   17e10:	f00a f901 	bl	22016 <bt_addr_le_create_static>
			if (err) {
   17e14:	2800      	cmp	r0, #0
   17e16:	d1f8      	bne.n	17e0a <id_create.isra.0+0x2e>
		} while (id_find(&new_addr) >= 0);
   17e18:	4668      	mov	r0, sp
   17e1a:	f7ff ff97 	bl	17d4c <id_find>
   17e1e:	2800      	cmp	r0, #0
   17e20:	daf5      	bge.n	17e0e <id_create.isra.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   17e22:	4806      	ldr	r0, [pc, #24]	; (17e3c <id_create.isra.0+0x60>)
   17e24:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   17e28:	4404      	add	r4, r0
   17e2a:	4669      	mov	r1, sp
   17e2c:	4620      	mov	r0, r4
   17e2e:	f00b fadd 	bl	233ec <bt_addr_le_copy>
		if (addr) {
   17e32:	2d00      	cmp	r5, #0
   17e34:	d0e8      	beq.n	17e08 <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   17e36:	4621      	mov	r1, r4
   17e38:	4628      	mov	r0, r5
   17e3a:	e7e3      	b.n	17e04 <id_create.isra.0+0x28>
   17e3c:	200002a8 	.word	0x200002a8

00017e40 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17e40:	4b0a      	ldr	r3, [pc, #40]	; (17e6c <bt_id_pending_keys_update+0x2c>)
   17e42:	f3bf 8f5b 	dmb	ish
   17e46:	e853 2f00 	ldrex	r2, [r3]
   17e4a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   17e4e:	e843 1000 	strex	r0, r1, [r3]
   17e52:	2800      	cmp	r0, #0
   17e54:	d1f7      	bne.n	17e46 <bt_id_pending_keys_update+0x6>
   17e56:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   17e5a:	0493      	lsls	r3, r2, #18
   17e5c:	d504      	bpl.n	17e68 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
   17e5e:	4904      	ldr	r1, [pc, #16]	; (17e70 <bt_id_pending_keys_update+0x30>)
   17e60:	2200      	movs	r2, #0
   17e62:	2002      	movs	r0, #2
   17e64:	f000 bb64 	b.w	18530 <bt_keys_foreach>
}
   17e68:	4770      	bx	lr
   17e6a:	bf00      	nop
   17e6c:	20000374 	.word	0x20000374
   17e70:	00023519 	.word	0x00023519

00017e74 <bt_id_add>:
{
   17e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   17e76:	4e5e      	ldr	r6, [pc, #376]	; (17ff0 <bt_id_add+0x17c>)
   17e78:	f896 2118 	ldrb.w	r2, [r6, #280]	; 0x118
   17e7c:	f896 3119 	ldrb.w	r3, [r6, #281]	; 0x119
{
   17e80:	4604      	mov	r4, r0
   17e82:	4635      	mov	r5, r6
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   17e84:	b10a      	cbz	r2, 17e8a <bt_id_add+0x16>
   17e86:	429a      	cmp	r2, r3
   17e88:	d208      	bcs.n	17e9c <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
   17e8a:	3301      	adds	r3, #1
   17e8c:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   17e90:	7a23      	ldrb	r3, [r4, #8]
   17e92:	f043 0304 	orr.w	r3, r3, #4
   17e96:	7223      	strb	r3, [r4, #8]
}
   17e98:	b003      	add	sp, #12
   17e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   17e9c:	2100      	movs	r1, #0
   17e9e:	2206      	movs	r2, #6
   17ea0:	4608      	mov	r0, r1
   17ea2:	f7fd f8c5 	bl	15030 <bt_conn_lookup_state_le>
	if (conn) {
   17ea6:	4607      	mov	r7, r0
   17ea8:	b198      	cbz	r0, 17ed2 <bt_id_add+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17eaa:	f3bf 8f5b 	dmb	ish
   17eae:	36cc      	adds	r6, #204	; 0xcc
   17eb0:	e856 3f00 	ldrex	r3, [r6]
   17eb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   17eb8:	e846 3200 	strex	r2, r3, [r6]
   17ebc:	2a00      	cmp	r2, #0
   17ebe:	d1f7      	bne.n	17eb0 <bt_id_add+0x3c>
   17ec0:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   17ec4:	7a23      	ldrb	r3, [r4, #8]
   17ec6:	f043 0301 	orr.w	r3, r3, #1
   17eca:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   17ecc:	f00a fdf7 	bl	22abe <bt_conn_unref>
		return;
   17ed0:	e7e2      	b.n	17e98 <bt_id_add+0x24>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   17ed2:	4601      	mov	r1, r0
   17ed4:	4847      	ldr	r0, [pc, #284]	; (17ff4 <bt_id_add+0x180>)
   17ed6:	f7fb fa19 	bl	1330c <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   17eda:	f896 3119 	ldrb.w	r3, [r6, #281]	; 0x119
   17ede:	b173      	cbz	r3, 17efe <bt_id_add+0x8a>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   17ee0:	4638      	mov	r0, r7
   17ee2:	f00b fa9b 	bl	2341c <addr_res_enable>
		if (err) {
   17ee6:	b150      	cbz	r0, 17efe <bt_id_add+0x8a>
   17ee8:	4943      	ldr	r1, [pc, #268]	; (17ff8 <bt_id_add+0x184>)
   17eea:	4b44      	ldr	r3, [pc, #272]	; (17ffc <bt_id_add+0x188>)
			BT_WARN("Failed to disable address resolution");
   17eec:	4844      	ldr	r0, [pc, #272]	; (18000 <bt_id_add+0x18c>)
   17eee:	1ac9      	subs	r1, r1, r3
   17ef0:	08c9      	lsrs	r1, r1, #3
   17ef2:	0189      	lsls	r1, r1, #6
   17ef4:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
   17ef8:	f009 fd2a 	bl	21950 <log_0>
	if (err) {
   17efc:	e023      	b.n	17f46 <bt_id_add+0xd2>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   17efe:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   17f02:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   17f06:	429a      	cmp	r2, r3
   17f08:	d125      	bne.n	17f56 <bt_id_add+0xe2>
   17f0a:	4b3c      	ldr	r3, [pc, #240]	; (17ffc <bt_id_add+0x188>)
   17f0c:	4e3a      	ldr	r6, [pc, #232]	; (17ff8 <bt_id_add+0x184>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
   17f0e:	483d      	ldr	r0, [pc, #244]	; (18004 <bt_id_add+0x190>)
   17f10:	1af6      	subs	r6, r6, r3
   17f12:	08f6      	lsrs	r6, r6, #3
   17f14:	01b6      	lsls	r6, r6, #6
   17f16:	f046 0102 	orr.w	r1, r6, #2
   17f1a:	f009 fd19 	bl	21950 <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   17f1e:	2200      	movs	r2, #0
   17f20:	4611      	mov	r1, r2
   17f22:	f242 0029 	movw	r0, #8233	; 0x2029
   17f26:	f7ff f8c5 	bl	170b4 <bt_hci_cmd_send_sync>
		if (err) {
   17f2a:	b118      	cbz	r0, 17f34 <bt_id_add+0xc0>
			BT_ERR("Failed to clear resolution list");
   17f2c:	4836      	ldr	r0, [pc, #216]	; (18008 <bt_id_add+0x194>)
   17f2e:	f046 0101 	orr.w	r1, r6, #1
   17f32:	e7e1      	b.n	17ef8 <bt_id_add+0x84>
		bt_dev.le.rl_entries++;
   17f34:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   17f38:	3301      	adds	r3, #1
   17f3a:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   17f3e:	7a23      	ldrb	r3, [r4, #8]
   17f40:	f043 0304 	orr.w	r3, r3, #4
   17f44:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   17f46:	2001      	movs	r0, #1
   17f48:	f00b fa68 	bl	2341c <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   17f4c:	482f      	ldr	r0, [pc, #188]	; (1800c <bt_id_add+0x198>)
   17f4e:	2100      	movs	r1, #0
   17f50:	f7fb f9dc 	bl	1330c <bt_le_ext_adv_foreach>
   17f54:	e7a0      	b.n	17e98 <bt_id_add+0x24>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   17f56:	1c67      	adds	r7, r4, #1
   17f58:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   17f5c:	4638      	mov	r0, r7
   17f5e:	f00b fa75 	bl	2344c <hci_id_add.isra.0>
	if (err) {
   17f62:	4606      	mov	r6, r0
   17f64:	b140      	cbz	r0, 17f78 <bt_id_add+0x104>
   17f66:	4924      	ldr	r1, [pc, #144]	; (17ff8 <bt_id_add+0x184>)
   17f68:	4b24      	ldr	r3, [pc, #144]	; (17ffc <bt_id_add+0x188>)
		BT_ERR("Failed to add IRK to controller");
   17f6a:	4829      	ldr	r0, [pc, #164]	; (18010 <bt_id_add+0x19c>)
   17f6c:	1ac9      	subs	r1, r1, r3
   17f6e:	08c9      	lsrs	r1, r1, #3
   17f70:	0189      	lsls	r1, r1, #6
   17f72:	f041 0101 	orr.w	r1, r1, #1
   17f76:	e7bf      	b.n	17ef8 <bt_id_add+0x84>
	bt_dev.le.rl_entries++;
   17f78:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   17f7c:	3301      	adds	r3, #1
   17f7e:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   17f82:	7a23      	ldrb	r3, [r4, #8]
   17f84:	f043 0304 	orr.w	r3, r3, #4
   17f88:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   17f8a:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   17f8e:	075b      	lsls	r3, r3, #29
   17f90:	d408      	bmi.n	17fa4 <bt_id_add+0x130>
   17f92:	4919      	ldr	r1, [pc, #100]	; (17ff8 <bt_id_add+0x184>)
   17f94:	4b19      	ldr	r3, [pc, #100]	; (17ffc <bt_id_add+0x188>)
		BT_WARN("Set privacy mode command is not supported");
   17f96:	481f      	ldr	r0, [pc, #124]	; (18014 <bt_id_add+0x1a0>)
   17f98:	1ac9      	subs	r1, r1, r3
   17f9a:	08c9      	lsrs	r1, r1, #3
   17f9c:	0189      	lsls	r1, r1, #6
   17f9e:	f041 0102 	orr.w	r1, r1, #2
   17fa2:	e7a9      	b.n	17ef8 <bt_id_add+0x84>
	bt_addr_le_copy(&cp.id_addr, addr);
   17fa4:	4639      	mov	r1, r7
   17fa6:	4668      	mov	r0, sp
   17fa8:	f00b fa20 	bl	233ec <bt_addr_le_copy>
	cp.mode = mode;
   17fac:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   17fae:	2108      	movs	r1, #8
   17fb0:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   17fb4:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   17fb8:	f7fe ff20 	bl	16dfc <bt_hci_cmd_create>
	if (!buf) {
   17fbc:	4604      	mov	r4, r0
   17fbe:	b940      	cbnz	r0, 17fd2 <bt_id_add+0x15e>
   17fc0:	490d      	ldr	r1, [pc, #52]	; (17ff8 <bt_id_add+0x184>)
   17fc2:	4b0e      	ldr	r3, [pc, #56]	; (17ffc <bt_id_add+0x188>)
		BT_ERR("Failed to set privacy mode");
   17fc4:	4814      	ldr	r0, [pc, #80]	; (18018 <bt_id_add+0x1a4>)
   17fc6:	1ac9      	subs	r1, r1, r3
   17fc8:	08c9      	lsrs	r1, r1, #3
   17fca:	0189      	lsls	r1, r1, #6
   17fcc:	f041 0101 	orr.w	r1, r1, #1
   17fd0:	e792      	b.n	17ef8 <bt_id_add+0x84>
   17fd2:	2208      	movs	r2, #8
   17fd4:	4669      	mov	r1, sp
   17fd6:	4410      	add	r0, r2
   17fd8:	f00b ffef 	bl	23fba <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   17fdc:	4632      	mov	r2, r6
   17fde:	4621      	mov	r1, r4
   17fe0:	f242 004e 	movw	r0, #8270	; 0x204e
   17fe4:	f7ff f866 	bl	170b4 <bt_hci_cmd_send_sync>
	if (err) {
   17fe8:	2800      	cmp	r0, #0
   17fea:	d0ac      	beq.n	17f46 <bt_id_add+0xd2>
   17fec:	e7e8      	b.n	17fc0 <bt_id_add+0x14c>
   17fee:	bf00      	nop
   17ff0:	200002a8 	.word	0x200002a8
   17ff4:	000234af 	.word	0x000234af
   17ff8:	00025274 	.word	0x00025274
   17ffc:	00025224 	.word	0x00025224
   18000:	00027390 	.word	0x00027390
   18004:	000273b5 	.word	0x000273b5
   18008:	000273e6 	.word	0x000273e6
   1800c:	000233f3 	.word	0x000233f3
   18010:	00027406 	.word	0x00027406
   18014:	00027426 	.word	0x00027426
   18018:	00027450 	.word	0x00027450

0001801c <bt_id_del>:
{
   1801c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
   18020:	4e47      	ldr	r6, [pc, #284]	; (18140 <bt_id_del+0x124>)
   18022:	f896 2118 	ldrb.w	r2, [r6, #280]	; 0x118
   18026:	f896 3119 	ldrb.w	r3, [r6, #281]	; 0x119
{
   1802a:	4604      	mov	r4, r0
   1802c:	4635      	mov	r5, r6
	if (!bt_dev.le.rl_size ||
   1802e:	b112      	cbz	r2, 18036 <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   18030:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   18032:	4293      	cmp	r3, r2
   18034:	dd08      	ble.n	18048 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
   18036:	3b01      	subs	r3, #1
   18038:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   1803c:	7a23      	ldrb	r3, [r4, #8]
   1803e:	f023 0304 	bic.w	r3, r3, #4
   18042:	7223      	strb	r3, [r4, #8]
}
   18044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
   18048:	2100      	movs	r1, #0
   1804a:	2206      	movs	r2, #6
   1804c:	4608      	mov	r0, r1
   1804e:	f7fc ffef 	bl	15030 <bt_conn_lookup_state_le>
	if (conn) {
   18052:	4607      	mov	r7, r0
   18054:	b1a0      	cbz	r0, 18080 <bt_id_del+0x64>
   18056:	f3bf 8f5b 	dmb	ish
   1805a:	36cc      	adds	r6, #204	; 0xcc
   1805c:	e856 3f00 	ldrex	r3, [r6]
   18060:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   18064:	e846 3200 	strex	r2, r3, [r6]
   18068:	2a00      	cmp	r2, #0
   1806a:	d1f7      	bne.n	1805c <bt_id_del+0x40>
   1806c:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
   18070:	7a23      	ldrb	r3, [r4, #8]
   18072:	f043 0302 	orr.w	r3, r3, #2
   18076:	7223      	strb	r3, [r4, #8]
}
   18078:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   1807c:	f00a bd1f 	b.w	22abe <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   18080:	4601      	mov	r1, r0
   18082:	4830      	ldr	r0, [pc, #192]	; (18144 <bt_id_del+0x128>)
   18084:	f7fb f942 	bl	1330c <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   18088:	4638      	mov	r0, r7
   1808a:	f00b f9c7 	bl	2341c <addr_res_enable>
	if (err) {
   1808e:	4606      	mov	r6, r0
   18090:	b1b0      	cbz	r0, 180c0 <bt_id_del+0xa4>
   18092:	4a2d      	ldr	r2, [pc, #180]	; (18148 <bt_id_del+0x12c>)
   18094:	4b2d      	ldr	r3, [pc, #180]	; (1814c <bt_id_del+0x130>)
   18096:	1ad2      	subs	r2, r2, r3
   18098:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
   1809a:	0192      	lsls	r2, r2, #6
   1809c:	4601      	mov	r1, r0
   1809e:	f042 0201 	orr.w	r2, r2, #1
   180a2:	482b      	ldr	r0, [pc, #172]	; (18150 <bt_id_del+0x134>)
   180a4:	f009 fc61 	bl	2196a <log_1>
	if (bt_dev.le.rl_entries) {
   180a8:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   180ac:	b113      	cbz	r3, 180b4 <bt_id_del+0x98>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   180ae:	2001      	movs	r0, #1
   180b0:	f00b f9b4 	bl	2341c <addr_res_enable>
}
   180b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   180b8:	4826      	ldr	r0, [pc, #152]	; (18154 <bt_id_del+0x138>)
   180ba:	2100      	movs	r1, #0
   180bc:	f7fb b926 	b.w	1330c <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   180c0:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   180c4:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   180c8:	429a      	cmp	r2, r3
   180ca:	d20c      	bcs.n	180e6 <bt_id_del+0xca>
		bt_dev.le.rl_entries--;
   180cc:	3b01      	subs	r3, #1
   180ce:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   180d2:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   180d4:	4920      	ldr	r1, [pc, #128]	; (18158 <bt_id_del+0x13c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   180d6:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   180da:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   180dc:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
   180de:	2002      	movs	r0, #2
   180e0:	f000 fa26 	bl	18530 <bt_keys_foreach>
		goto done;
   180e4:	e7e0      	b.n	180a8 <bt_id_del+0x8c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   180e6:	2107      	movs	r1, #7
   180e8:	f242 0028 	movw	r0, #8232	; 0x2028
   180ec:	f7fe fe86 	bl	16dfc <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   180f0:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
   180f4:	4607      	mov	r7, r0
   180f6:	b950      	cbnz	r0, 1810e <bt_id_del+0xf2>
   180f8:	4b14      	ldr	r3, [pc, #80]	; (1814c <bt_id_del+0x130>)
   180fa:	4913      	ldr	r1, [pc, #76]	; (18148 <bt_id_del+0x12c>)
		BT_ERR("Failed to remove IRK from controller");
   180fc:	4817      	ldr	r0, [pc, #92]	; (1815c <bt_id_del+0x140>)
   180fe:	1ac9      	subs	r1, r1, r3
   18100:	08c9      	lsrs	r1, r1, #3
   18102:	0189      	lsls	r1, r1, #6
   18104:	f041 0101 	orr.w	r1, r1, #1
   18108:	f009 fc22 	bl	21950 <log_0>
		goto done;
   1810c:	e7cc      	b.n	180a8 <bt_id_del+0x8c>
	return net_buf_simple_add(&buf->b, len);
   1810e:	2107      	movs	r1, #7
   18110:	3008      	adds	r0, #8
   18112:	f00b ff4c 	bl	23fae <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   18116:	4641      	mov	r1, r8
   18118:	f00b f968 	bl	233ec <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   1811c:	4632      	mov	r2, r6
   1811e:	4639      	mov	r1, r7
   18120:	f242 0028 	movw	r0, #8232	; 0x2028
   18124:	f7fe ffc6 	bl	170b4 <bt_hci_cmd_send_sync>
	if (err) {
   18128:	2800      	cmp	r0, #0
   1812a:	d1e5      	bne.n	180f8 <bt_id_del+0xdc>
	bt_dev.le.rl_entries--;
   1812c:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   18130:	3b01      	subs	r3, #1
   18132:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   18136:	7a23      	ldrb	r3, [r4, #8]
   18138:	f023 0304 	bic.w	r3, r3, #4
   1813c:	7223      	strb	r3, [r4, #8]
   1813e:	e7b3      	b.n	180a8 <bt_id_del+0x8c>
   18140:	200002a8 	.word	0x200002a8
   18144:	000234af 	.word	0x000234af
   18148:	00025274 	.word	0x00025274
   1814c:	00025224 	.word	0x00025224
   18150:	0002746b 	.word	0x0002746b
   18154:	000233f3 	.word	0x000233f3
   18158:	0002349d 	.word	0x0002349d
   1815c:	00027498 	.word	0x00027498

00018160 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   18160:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18162:	460e      	mov	r6, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   18164:	4604      	mov	r4, r0
   18166:	b918      	cbnz	r0, 18170 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   18168:	b346      	cbz	r6, 181bc <bt_id_create+0x5c>
		return -EINVAL;
   1816a:	f06f 0015 	mvn.w	r0, #21
   1816e:	e023      	b.n	181b8 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   18170:	2300      	movs	r3, #0
   18172:	2207      	movs	r2, #7
   18174:	4669      	mov	r1, sp
   18176:	9300      	str	r3, [sp, #0]
   18178:	f8cd 3003 	str.w	r3, [sp, #3]
   1817c:	f009 fec2 	bl	21f04 <memcmp>
   18180:	2800      	cmp	r0, #0
   18182:	d0f1      	beq.n	18168 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   18184:	7823      	ldrb	r3, [r4, #0]
   18186:	2b01      	cmp	r3, #1
   18188:	d104      	bne.n	18194 <bt_id_create+0x34>
   1818a:	79a3      	ldrb	r3, [r4, #6]
   1818c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18190:	2bc0      	cmp	r3, #192	; 0xc0
   18192:	d00a      	beq.n	181aa <bt_id_create+0x4a>
   18194:	4b1c      	ldr	r3, [pc, #112]	; (18208 <bt_id_create+0xa8>)
   18196:	491d      	ldr	r1, [pc, #116]	; (1820c <bt_id_create+0xac>)
			BT_ERR("Only static random identity address supported");
   18198:	481d      	ldr	r0, [pc, #116]	; (18210 <bt_id_create+0xb0>)
   1819a:	1ac9      	subs	r1, r1, r3
   1819c:	08c9      	lsrs	r1, r1, #3
   1819e:	0189      	lsls	r1, r1, #6
   181a0:	f041 0101 	orr.w	r1, r1, #1
   181a4:	f009 fbd4 	bl	21950 <log_0>
			return -EINVAL;
   181a8:	e7df      	b.n	1816a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   181aa:	4620      	mov	r0, r4
   181ac:	f7ff fdce 	bl	17d4c <id_find>
   181b0:	2800      	cmp	r0, #0
   181b2:	dbd9      	blt.n	18168 <bt_id_create+0x8>
			return -EALREADY;
   181b4:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   181b8:	b002      	add	sp, #8
   181ba:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   181bc:	4d15      	ldr	r5, [pc, #84]	; (18214 <bt_id_create+0xb4>)
   181be:	79eb      	ldrb	r3, [r5, #7]
   181c0:	2b01      	cmp	r3, #1
   181c2:	d01e      	beq.n	18202 <bt_id_create+0xa2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   181c4:	f3bf 8f5b 	dmb	ish
   181c8:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   181cc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   181d0:	07db      	lsls	r3, r3, #31
   181d2:	d40b      	bmi.n	181ec <bt_id_create+0x8c>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   181d4:	2c00      	cmp	r4, #0
   181d6:	d0c8      	beq.n	1816a <bt_id_create+0xa>
   181d8:	2207      	movs	r2, #7
   181da:	4669      	mov	r1, sp
   181dc:	4620      	mov	r0, r4
   181de:	9600      	str	r6, [sp, #0]
   181e0:	f8cd 6003 	str.w	r6, [sp, #3]
   181e4:	f009 fe8e 	bl	21f04 <memcmp>
   181e8:	2800      	cmp	r0, #0
   181ea:	d0be      	beq.n	1816a <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   181ec:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   181ee:	4621      	mov	r1, r4
	new_id = bt_dev.id_count++;
   181f0:	1c73      	adds	r3, r6, #1
	err = id_create(new_id, addr, irk);
   181f2:	4630      	mov	r0, r6
	new_id = bt_dev.id_count++;
   181f4:	71eb      	strb	r3, [r5, #7]
	err = id_create(new_id, addr, irk);
   181f6:	f7ff fdf1 	bl	17ddc <id_create.isra.0>
	new_id = bt_dev.id_count++;
   181fa:	2800      	cmp	r0, #0
   181fc:	bf08      	it	eq
   181fe:	4630      	moveq	r0, r6
   18200:	e7da      	b.n	181b8 <bt_id_create+0x58>
		return -ENOMEM;
   18202:	f06f 000b 	mvn.w	r0, #11
   18206:	e7d7      	b.n	181b8 <bt_id_create+0x58>
   18208:	00025224 	.word	0x00025224
   1820c:	00025274 	.word	0x00025274
   18210:	000274bd 	.word	0x000274bd
   18214:	200002a8 	.word	0x200002a8

00018218 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   18218:	b570      	push	{r4, r5, r6, lr}
   1821a:	b086      	sub	sp, #24
   1821c:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1821e:	aa01      	add	r2, sp, #4
   18220:	2100      	movs	r1, #0
   18222:	f241 0009 	movw	r0, #4105	; 0x1009
   18226:	f7fe ff45 	bl	170b4 <bt_hci_cmd_send_sync>
	if (err) {
   1822a:	4604      	mov	r4, r0
   1822c:	b160      	cbz	r0, 18248 <bt_id_read_public_addr+0x30>
   1822e:	491a      	ldr	r1, [pc, #104]	; (18298 <bt_id_read_public_addr+0x80>)
   18230:	4b1a      	ldr	r3, [pc, #104]	; (1829c <bt_id_read_public_addr+0x84>)
		BT_WARN("Failed to read public address");
   18232:	481b      	ldr	r0, [pc, #108]	; (182a0 <bt_id_read_public_addr+0x88>)
   18234:	1ac9      	subs	r1, r1, r3
   18236:	08c9      	lsrs	r1, r1, #3
   18238:	0189      	lsls	r1, r1, #6
   1823a:	f041 0102 	orr.w	r1, r1, #2
   1823e:	f009 fb87 	bl	21950 <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   18242:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   18244:	b006      	add	sp, #24
   18246:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   18248:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1824a:	9002      	str	r0, [sp, #8]
   1824c:	689d      	ldr	r5, [r3, #8]
   1824e:	f8ad 000c 	strh.w	r0, [sp, #12]
   18252:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   18254:	2206      	movs	r2, #6
   18256:	a902      	add	r1, sp, #8
   18258:	4628      	mov	r0, r5
   1825a:	f009 fe53 	bl	21f04 <memcmp>
   1825e:	b918      	cbnz	r0, 18268 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   18260:	9801      	ldr	r0, [sp, #4]
   18262:	f002 f84f 	bl	1a304 <net_buf_unref>
   18266:	e7ec      	b.n	18242 <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   18268:	f04f 33ff 	mov.w	r3, #4294967295
   1826c:	2206      	movs	r2, #6
   1826e:	a904      	add	r1, sp, #16
   18270:	4628      	mov	r0, r5
   18272:	9304      	str	r3, [sp, #16]
   18274:	f8ad 3014 	strh.w	r3, [sp, #20]
   18278:	f009 fe44 	bl	21f04 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1827c:	2800      	cmp	r0, #0
   1827e:	d0ef      	beq.n	18260 <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   18280:	2206      	movs	r2, #6
   18282:	4629      	mov	r1, r5
   18284:	1c70      	adds	r0, r6, #1
   18286:	f009 fe64 	bl	21f52 <memcpy>
	net_buf_unref(rsp);
   1828a:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   1828c:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   1828e:	f002 f839 	bl	1a304 <net_buf_unref>
	return 1U;
   18292:	2001      	movs	r0, #1
   18294:	e7d6      	b.n	18244 <bt_id_read_public_addr+0x2c>
   18296:	bf00      	nop
   18298:	00025274 	.word	0x00025274
   1829c:	00025224 	.word	0x00025224
   182a0:	000274eb 	.word	0x000274eb

000182a4 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   182a4:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   182a6:	4668      	mov	r0, sp
   182a8:	f7ff ffb6 	bl	18218 <bt_id_read_public_addr>
   182ac:	4b04      	ldr	r3, [pc, #16]	; (182c0 <bt_setup_public_id_addr+0x1c>)
   182ae:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   182b0:	b118      	cbz	r0, 182ba <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   182b2:	4669      	mov	r1, sp
   182b4:	2000      	movs	r0, #0
   182b6:	f7ff fd91 	bl	17ddc <id_create.isra.0>
}
   182ba:	b003      	add	sp, #12
   182bc:	f85d fb04 	ldr.w	pc, [sp], #4
   182c0:	200002a8 	.word	0x200002a8

000182c4 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   182c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   182c8:	4b25      	ldr	r3, [pc, #148]	; (18360 <bt_read_static_addr+0x9c>)
   182ca:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   182ce:	f014 0401 	ands.w	r4, r4, #1
{
   182d2:	4607      	mov	r7, r0
   182d4:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   182d6:	d10a      	bne.n	182ee <bt_read_static_addr+0x2a>
   182d8:	4922      	ldr	r1, [pc, #136]	; (18364 <bt_read_static_addr+0xa0>)
   182da:	4b23      	ldr	r3, [pc, #140]	; (18368 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
   182dc:	4823      	ldr	r0, [pc, #140]	; (1836c <bt_read_static_addr+0xa8>)
   182de:	1ac9      	subs	r1, r1, r3
   182e0:	08c9      	lsrs	r1, r1, #3
   182e2:	0189      	lsls	r1, r1, #6
   182e4:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   182e8:	f009 fb32 	bl	21950 <log_0>
   182ec:	e012      	b.n	18314 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   182ee:	aa01      	add	r2, sp, #4
   182f0:	2100      	movs	r1, #0
   182f2:	f64f 4009 	movw	r0, #64521	; 0xfc09
   182f6:	f7fe fedd 	bl	170b4 <bt_hci_cmd_send_sync>
	if (err) {
   182fa:	4605      	mov	r5, r0
   182fc:	b170      	cbz	r0, 1831c <bt_read_static_addr+0x58>
   182fe:	4b1a      	ldr	r3, [pc, #104]	; (18368 <bt_read_static_addr+0xa4>)
   18300:	4918      	ldr	r1, [pc, #96]	; (18364 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
   18302:	481b      	ldr	r0, [pc, #108]	; (18370 <bt_read_static_addr+0xac>)
   18304:	1ac9      	subs	r1, r1, r3
   18306:	08c9      	lsrs	r1, r1, #3
   18308:	0189      	lsls	r1, r1, #6
   1830a:	f041 0102 	orr.w	r1, r1, #2
   1830e:	f009 fb1f 	bl	21950 <log_0>
		return 0;
   18312:	2400      	movs	r4, #0
	}

	return cnt;
}
   18314:	4620      	mov	r0, r4
   18316:	b002      	add	sp, #8
   18318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
   1831c:	9b01      	ldr	r3, [sp, #4]
   1831e:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   18320:	785c      	ldrb	r4, [r3, #1]
   18322:	42b4      	cmp	r4, r6
   18324:	bf28      	it	cs
   18326:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   18328:	f04f 0816 	mov.w	r8, #22
   1832c:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   1832e:	42a5      	cmp	r5, r4
   18330:	db0d      	blt.n	1834e <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
   18332:	9801      	ldr	r0, [sp, #4]
   18334:	f001 ffe6 	bl	1a304 <net_buf_unref>
	if (!cnt) {
   18338:	2c00      	cmp	r4, #0
   1833a:	d1eb      	bne.n	18314 <bt_read_static_addr+0x50>
   1833c:	4909      	ldr	r1, [pc, #36]	; (18364 <bt_read_static_addr+0xa0>)
   1833e:	4b0a      	ldr	r3, [pc, #40]	; (18368 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
   18340:	480c      	ldr	r0, [pc, #48]	; (18374 <bt_read_static_addr+0xb0>)
   18342:	1ac9      	subs	r1, r1, r3
   18344:	08c9      	lsrs	r1, r1, #3
   18346:	0189      	lsls	r1, r1, #6
   18348:	f041 0102 	orr.w	r1, r1, #2
   1834c:	e7cc      	b.n	182e8 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1834e:	fb08 7005 	mla	r0, r8, r5, r7
   18352:	2216      	movs	r2, #22
   18354:	4631      	mov	r1, r6
   18356:	f009 fdfc 	bl	21f52 <memcpy>
	for (i = 0; i < cnt; i++) {
   1835a:	3501      	adds	r5, #1
   1835c:	e7e7      	b.n	1832e <bt_read_static_addr+0x6a>
   1835e:	bf00      	nop
   18360:	200002a8 	.word	0x200002a8
   18364:	00025274 	.word	0x00025274
   18368:	00025224 	.word	0x00025224
   1836c:	00027509 	.word	0x00027509
   18370:	00027535 	.word	0x00027535
   18374:	00027555 	.word	0x00027555

00018378 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   18378:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1837a:	4d14      	ldr	r5, [pc, #80]	; (183cc <bt_setup_random_id_addr+0x54>)
   1837c:	79ec      	ldrb	r4, [r5, #7]
{
   1837e:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   18380:	b92c      	cbnz	r4, 1838e <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   18382:	2101      	movs	r1, #1
   18384:	a802      	add	r0, sp, #8
   18386:	f7ff ff9d 	bl	182c4 <bt_read_static_addr>
   1838a:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   1838c:	b9b8      	cbnz	r0, 183be <bt_setup_random_id_addr+0x46>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   1838e:	2100      	movs	r1, #0
   18390:	4608      	mov	r0, r1
   18392:	f7ff fee5 	bl	18160 <bt_id_create>
   18396:	e010      	b.n	183ba <bt_setup_random_id_addr+0x42>
   18398:	ab02      	add	r3, sp, #8
   1839a:	fb07 3106 	mla	r1, r7, r6, r3
   1839e:	2206      	movs	r2, #6
   183a0:	f10d 0001 	add.w	r0, sp, #1
   183a4:	f009 fdd5 	bl	21f52 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   183a8:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   183aa:	4669      	mov	r1, sp
   183ac:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   183ae:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   183b2:	f7ff fd13 	bl	17ddc <id_create.isra.0>
				if (err) {
   183b6:	3401      	adds	r4, #1
   183b8:	b110      	cbz	r0, 183c0 <bt_setup_random_id_addr+0x48>
}
   183ba:	b009      	add	sp, #36	; 0x24
   183bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   183be:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   183c0:	79eb      	ldrb	r3, [r5, #7]
   183c2:	b2e6      	uxtb	r6, r4
   183c4:	42b3      	cmp	r3, r6
   183c6:	d8e7      	bhi.n	18398 <bt_setup_random_id_addr+0x20>
			return 0;
   183c8:	2000      	movs	r0, #0
   183ca:	e7f6      	b.n	183ba <bt_setup_random_id_addr+0x42>
   183cc:	200002a8 	.word	0x200002a8

000183d0 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   183d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   183d4:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   183d8:	7805      	ldrb	r5, [r0, #0]
{
   183da:	460e      	mov	r6, r1
   183dc:	4690      	mov	r8, r2
   183de:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   183e0:	d026      	beq.n	18430 <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   183e2:	4c22      	ldr	r4, [pc, #136]	; (1846c <bt_id_set_adv_own_addr+0x9c>)
   183e4:	b12a      	cbz	r2, 183f2 <bt_id_set_adv_own_addr+0x22>
   183e6:	0688      	lsls	r0, r1, #26
   183e8:	d503      	bpl.n	183f2 <bt_id_set_adv_own_addr+0x22>
   183ea:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
   183ee:	0659      	lsls	r1, r3, #25
   183f0:	d539      	bpl.n	18466 <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   183f2:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   183f6:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   183fa:	5ce3      	ldrb	r3, [r4, r3]
   183fc:	2b01      	cmp	r3, #1
   183fe:	d008      	beq.n	18412 <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   18400:	eba9 0505 	sub.w	r5, r9, r5
   18404:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   18406:	f1b8 0f00 	cmp.w	r8, #0
   1840a:	d10c      	bne.n	18426 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1840c:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   1840e:	2000      	movs	r0, #0
   18410:	e007      	b.n	18422 <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   18412:	2007      	movs	r0, #7
   18414:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   18418:	4420      	add	r0, r4
   1841a:	f7ff fcb1 	bl	17d80 <set_random_address>
				if (err) {
   1841e:	2800      	cmp	r0, #0
   18420:	d0ee      	beq.n	18400 <bt_id_set_adv_own_addr+0x30>
}
   18422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   18426:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   18428:	bf48      	it	mi
   1842a:	f043 0302 	orrmi.w	r3, r3, #2
   1842e:	e7ed      	b.n	1840c <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   18430:	074b      	lsls	r3, r1, #29
   18432:	d514      	bpl.n	1845e <bt_id_set_adv_own_addr+0x8e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   18434:	4e0d      	ldr	r6, [pc, #52]	; (1846c <bt_id_set_adv_own_addr+0x9c>)
   18436:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   1843a:	ea4f 08c5 	mov.w	r8, r5, lsl #3
   1843e:	5cf3      	ldrb	r3, [r6, r3]
   18440:	2b01      	cmp	r3, #1
   18442:	d10a      	bne.n	1845a <bt_id_set_adv_own_addr+0x8a>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   18444:	2007      	movs	r0, #7
   18446:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   1844a:	4430      	add	r0, r6
   1844c:	f7ff fc98 	bl	17d80 <set_random_address>
			*own_addr_type = id_addr->type;
   18450:	eba8 0505 	sub.w	r5, r8, r5
   18454:	5d73      	ldrb	r3, [r6, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   18456:	703b      	strb	r3, [r7, #0]
		if (err) {
   18458:	e7e3      	b.n	18422 <bt_id_set_adv_own_addr+0x52>
	int err = 0;
   1845a:	4620      	mov	r0, r4
   1845c:	e7f8      	b.n	18450 <bt_id_set_adv_own_addr+0x80>
			err = bt_id_set_adv_private_addr(adv);
   1845e:	f00b f847 	bl	234f0 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   18462:	2301      	movs	r3, #1
   18464:	e7f7      	b.n	18456 <bt_id_set_adv_own_addr+0x86>
			return -ENOTSUP;
   18466:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1846a:	e7da      	b.n	18422 <bt_id_set_adv_own_addr+0x52>
   1846c:	200002a8 	.word	0x200002a8

00018470 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   18470:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   18472:	4d16      	ldr	r5, [pc, #88]	; (184cc <bt_id_init+0x5c>)
   18474:	79eb      	ldrb	r3, [r5, #7]
   18476:	b113      	cbz	r3, 1847e <bt_id_init+0xe>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   18478:	2400      	movs	r4, #0
}
   1847a:	4620      	mov	r0, r4
   1847c:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_setup_public_id_addr();
   1847e:	f7ff ff11 	bl	182a4 <bt_setup_public_id_addr>
		if (err) {
   18482:	4604      	mov	r4, r0
   18484:	b150      	cbz	r0, 1849c <bt_id_init+0x2c>
   18486:	4912      	ldr	r1, [pc, #72]	; (184d0 <bt_id_init+0x60>)
   18488:	4b12      	ldr	r3, [pc, #72]	; (184d4 <bt_id_init+0x64>)
			BT_ERR("Unable to set identity address");
   1848a:	4813      	ldr	r0, [pc, #76]	; (184d8 <bt_id_init+0x68>)
   1848c:	1ac9      	subs	r1, r1, r3
   1848e:	08c9      	lsrs	r1, r1, #3
   18490:	0189      	lsls	r1, r1, #6
   18492:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to set random address");
   18496:	f009 fa5b 	bl	21950 <log_0>
			return err;
   1849a:	e7ee      	b.n	1847a <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1849c:	79eb      	ldrb	r3, [r5, #7]
   1849e:	2b00      	cmp	r3, #0
   184a0:	d1ea      	bne.n	18478 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   184a2:	f7ff ff69 	bl	18378 <bt_setup_random_id_addr>
		if (err) {
   184a6:	4604      	mov	r4, r0
   184a8:	2800      	cmp	r0, #0
   184aa:	d1ec      	bne.n	18486 <bt_id_init+0x16>
		err = set_random_address(&bt_dev.id_addr[0].a);
   184ac:	1c68      	adds	r0, r5, #1
   184ae:	f7ff fc67 	bl	17d80 <set_random_address>
		if (err) {
   184b2:	4604      	mov	r4, r0
   184b4:	2800      	cmp	r0, #0
   184b6:	d0e0      	beq.n	1847a <bt_id_init+0xa>
   184b8:	4905      	ldr	r1, [pc, #20]	; (184d0 <bt_id_init+0x60>)
   184ba:	4b06      	ldr	r3, [pc, #24]	; (184d4 <bt_id_init+0x64>)
			BT_ERR("Unable to set random address");
   184bc:	4807      	ldr	r0, [pc, #28]	; (184dc <bt_id_init+0x6c>)
   184be:	1ac9      	subs	r1, r1, r3
   184c0:	08c9      	lsrs	r1, r1, #3
   184c2:	0189      	lsls	r1, r1, #6
   184c4:	f041 0101 	orr.w	r1, r1, #1
   184c8:	e7e5      	b.n	18496 <bt_id_init+0x26>
   184ca:	bf00      	nop
   184cc:	200002a8 	.word	0x200002a8
   184d0:	00025274 	.word	0x00025274
   184d4:	00025224 	.word	0x00025224
   184d8:	0002757e 	.word	0x0002757e
   184dc:	0002759d 	.word	0x0002759d

000184e0 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   184e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   184e2:	4c11      	ldr	r4, [pc, #68]	; (18528 <bt_keys_get_addr+0x48>)
   184e4:	7823      	ldrb	r3, [r4, #0]
   184e6:	4283      	cmp	r3, r0
{
   184e8:	4605      	mov	r5, r0
   184ea:	460e      	mov	r6, r1
   184ec:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   184ee:	d00b      	beq.n	18508 <bt_keys_get_addr+0x28>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   184f0:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   184f2:	480e      	ldr	r0, [pc, #56]	; (1852c <bt_keys_get_addr+0x4c>)
   184f4:	9400      	str	r4, [sp, #0]
   184f6:	2207      	movs	r2, #7
   184f8:	4669      	mov	r1, sp
   184fa:	f8cd 4003 	str.w	r4, [sp, #3]
   184fe:	f009 fd01 	bl	21f04 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   18502:	b140      	cbz	r0, 18516 <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   18504:	4620      	mov	r0, r4
   18506:	e00d      	b.n	18524 <bt_keys_get_addr+0x44>
   18508:	2207      	movs	r2, #7
   1850a:	1c60      	adds	r0, r4, #1
   1850c:	f009 fcfa 	bl	21f04 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   18510:	2800      	cmp	r0, #0
   18512:	d1ed      	bne.n	184f0 <bt_keys_get_addr+0x10>
   18514:	e7f6      	b.n	18504 <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
   18516:	4805      	ldr	r0, [pc, #20]	; (1852c <bt_keys_get_addr+0x4c>)
		keys->id = id;
   18518:	703d      	strb	r5, [r7, #0]
   1851a:	2207      	movs	r2, #7
   1851c:	4631      	mov	r1, r6
   1851e:	f009 fd18 	bl	21f52 <memcpy>
		return keys;
   18522:	4801      	ldr	r0, [pc, #4]	; (18528 <bt_keys_get_addr+0x48>)
}
   18524:	b003      	add	sp, #12
   18526:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18528:	20002534 	.word	0x20002534
   1852c:	20002535 	.word	0x20002535

00018530 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   18530:	460b      	mov	r3, r1
   18532:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   18534:	4a04      	ldr	r2, [pc, #16]	; (18548 <bt_keys_foreach+0x18>)
{
   18536:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   18538:	89d4      	ldrh	r4, [r2, #14]
   1853a:	4204      	tst	r4, r0
   1853c:	d002      	beq.n	18544 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1853e:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   18540:	4610      	mov	r0, r2
   18542:	4718      	bx	r3
}
   18544:	bc10      	pop	{r4}
   18546:	4770      	bx	lr
   18548:	20002534 	.word	0x20002534

0001854c <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
   1854c:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1854e:	4c09      	ldr	r4, [pc, #36]	; (18574 <bt_keys_find+0x28>)
{
   18550:	460b      	mov	r3, r1
   18552:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   18554:	89e2      	ldrh	r2, [r4, #14]
   18556:	4202      	tst	r2, r0
   18558:	d007      	beq.n	1856a <bt_keys_find+0x1e>
   1855a:	7822      	ldrb	r2, [r4, #0]
   1855c:	429a      	cmp	r2, r3
   1855e:	d104      	bne.n	1856a <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   18560:	2207      	movs	r2, #7
   18562:	1c60      	adds	r0, r4, #1
   18564:	f009 fcce 	bl	21f04 <memcmp>
   18568:	b108      	cbz	r0, 1856e <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   1856a:	2000      	movs	r0, #0
}
   1856c:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1856e:	4620      	mov	r0, r4
   18570:	e7fc      	b.n	1856c <bt_keys_find+0x20>
   18572:	bf00      	nop
   18574:	20002534 	.word	0x20002534

00018578 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   18578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1857a:	780b      	ldrb	r3, [r1, #0]
   1857c:	2b01      	cmp	r3, #1
   1857e:	4607      	mov	r7, r0
   18580:	460c      	mov	r4, r1
   18582:	d001      	beq.n	18588 <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   18584:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   18586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   18588:	798b      	ldrb	r3, [r1, #6]
   1858a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1858e:	2b40      	cmp	r3, #64	; 0x40
   18590:	d1f8      	bne.n	18584 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   18592:	4d13      	ldr	r5, [pc, #76]	; (185e0 <bt_keys_find_irk+0x68>)
   18594:	89eb      	ldrh	r3, [r5, #14]
   18596:	f013 0f02 	tst.w	r3, #2
   1859a:	462e      	mov	r6, r5
   1859c:	d0f2      	beq.n	18584 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   1859e:	7833      	ldrb	r3, [r6, #0]
   185a0:	42bb      	cmp	r3, r7
   185a2:	d10b      	bne.n	185bc <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
   185a4:	2206      	movs	r2, #6
   185a6:	f106 013a 	add.w	r1, r6, #58	; 0x3a
   185aa:	1c60      	adds	r0, r4, #1
   185ac:	f009 fcaa 	bl	21f04 <memcmp>
   185b0:	b908      	cbnz	r0, 185b6 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
   185b2:	4628      	mov	r0, r5
   185b4:	e7e7      	b.n	18586 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   185b6:	89f3      	ldrh	r3, [r6, #14]
   185b8:	079b      	lsls	r3, r3, #30
   185ba:	d5e3      	bpl.n	18584 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   185bc:	7833      	ldrb	r3, [r6, #0]
   185be:	42bb      	cmp	r3, r7
   185c0:	d1e0      	bne.n	18584 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   185c2:	3401      	adds	r4, #1
   185c4:	4807      	ldr	r0, [pc, #28]	; (185e4 <bt_keys_find_irk+0x6c>)
   185c6:	4621      	mov	r1, r4
   185c8:	f009 fd12 	bl	21ff0 <bt_rpa_irk_matches>
   185cc:	2800      	cmp	r0, #0
   185ce:	d0d9      	beq.n	18584 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   185d0:	4805      	ldr	r0, [pc, #20]	; (185e8 <bt_keys_find_irk+0x70>)
   185d2:	2206      	movs	r2, #6
   185d4:	4621      	mov	r1, r4
   185d6:	f009 fcbc 	bl	21f52 <memcpy>
			return &key_pool[i];
   185da:	4801      	ldr	r0, [pc, #4]	; (185e0 <bt_keys_find_irk+0x68>)
}
   185dc:	e7d3      	b.n	18586 <bt_keys_find_irk+0xe>
   185de:	bf00      	nop
   185e0:	20002534 	.word	0x20002534
   185e4:	2000255e 	.word	0x2000255e
   185e8:	2000256e 	.word	0x2000256e

000185ec <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   185ec:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   185ee:	4c06      	ldr	r4, [pc, #24]	; (18608 <bt_keys_find_addr+0x1c>)
   185f0:	7823      	ldrb	r3, [r4, #0]
   185f2:	4283      	cmp	r3, r0
   185f4:	d104      	bne.n	18600 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   185f6:	2207      	movs	r2, #7
   185f8:	1c60      	adds	r0, r4, #1
   185fa:	f009 fc83 	bl	21f04 <memcmp>
   185fe:	b108      	cbz	r0, 18604 <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   18600:	2000      	movs	r0, #0
}
   18602:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   18604:	4620      	mov	r0, r4
   18606:	e7fc      	b.n	18602 <bt_keys_find_addr+0x16>
   18608:	20002534 	.word	0x20002534

0001860c <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   1860c:	4a0b      	ldr	r2, [pc, #44]	; (1863c <l2cap_accept+0x30>)
{
   1860e:	b508      	push	{r3, lr}
   18610:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
   18612:	6810      	ldr	r0, [r2, #0]
   18614:	b918      	cbnz	r0, 1861e <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   18616:	4b0a      	ldr	r3, [pc, #40]	; (18640 <l2cap_accept+0x34>)
   18618:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
   1861a:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   1861c:	bd08      	pop	{r3, pc}
   1861e:	4909      	ldr	r1, [pc, #36]	; (18644 <l2cap_accept+0x38>)
   18620:	4a09      	ldr	r2, [pc, #36]	; (18648 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
   18622:	480a      	ldr	r0, [pc, #40]	; (1864c <l2cap_accept+0x40>)
   18624:	1a52      	subs	r2, r2, r1
   18626:	08d2      	lsrs	r2, r2, #3
   18628:	0192      	lsls	r2, r2, #6
   1862a:	f042 0201 	orr.w	r2, r2, #1
   1862e:	4619      	mov	r1, r3
   18630:	f009 f99b 	bl	2196a <log_1>
	return -ENOMEM;
   18634:	f06f 000b 	mvn.w	r0, #11
   18638:	e7f0      	b.n	1861c <l2cap_accept+0x10>
   1863a:	bf00      	nop
   1863c:	20001920 	.word	0x20001920
   18640:	00025a28 	.word	0x00025a28
   18644:	00025224 	.word	0x00025224
   18648:	00025284 	.word	0x00025284
   1864c:	000275c8 	.word	0x000275c8

00018650 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   18650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18652:	4605      	mov	r5, r0
   18654:	460f      	mov	r7, r1
   18656:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   18658:	2300      	movs	r3, #0
   1865a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1865e:	2104      	movs	r1, #4
   18660:	2000      	movs	r0, #0
   18662:	f7fc fb87 	bl	14d74 <bt_conn_create_pdu_timeout>
	if (!buf) {
   18666:	4604      	mov	r4, r0
   18668:	b960      	cbnz	r0, 18684 <l2cap_create_le_sig_pdu.isra.0+0x34>
   1866a:	4a0a      	ldr	r2, [pc, #40]	; (18694 <l2cap_create_le_sig_pdu.isra.0+0x44>)
   1866c:	4b0a      	ldr	r3, [pc, #40]	; (18698 <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   1866e:	480b      	ldr	r0, [pc, #44]	; (1869c <l2cap_create_le_sig_pdu.isra.0+0x4c>)
   18670:	1ad2      	subs	r2, r2, r3
   18672:	08d2      	lsrs	r2, r2, #3
   18674:	0192      	lsls	r2, r2, #6
   18676:	f042 0201 	orr.w	r2, r2, #1
   1867a:	4629      	mov	r1, r5
   1867c:	f009 f975 	bl	2196a <log_1>
}
   18680:	4620      	mov	r0, r4
   18682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18684:	2104      	movs	r1, #4
   18686:	3008      	adds	r0, #8
   18688:	f00b fc91 	bl	23fae <net_buf_simple_add>
	hdr->code = code;
   1868c:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1868e:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   18690:	8046      	strh	r6, [r0, #2]
	return buf;
   18692:	e7f5      	b.n	18680 <l2cap_create_le_sig_pdu.isra.0+0x30>
   18694:	00025284 	.word	0x00025284
   18698:	00025224 	.word	0x00025224
   1869c:	0002666e 	.word	0x0002666e

000186a0 <l2cap_rtx_timeout>:
{
   186a0:	b538      	push	{r3, r4, r5, lr}
   186a2:	4a0b      	ldr	r2, [pc, #44]	; (186d0 <l2cap_rtx_timeout+0x30>)
   186a4:	4b0b      	ldr	r3, [pc, #44]	; (186d4 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
   186a6:	4604      	mov	r4, r0
   186a8:	1ad2      	subs	r2, r2, r3
   186aa:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   186ae:	480a      	ldr	r0, [pc, #40]	; (186d8 <l2cap_rtx_timeout+0x38>)
   186b0:	08d2      	lsrs	r2, r2, #3
   186b2:	0192      	lsls	r2, r2, #6
   186b4:	4621      	mov	r1, r4
   186b6:	f042 0201 	orr.w	r2, r2, #1
   186ba:	f009 f956 	bl	2196a <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   186be:	4628      	mov	r0, r5
   186c0:	4621      	mov	r1, r4
   186c2:	f00a ff5f 	bl	23584 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   186c6:	4620      	mov	r0, r4
}
   186c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   186cc:	f00a bf7c 	b.w	235c8 <bt_l2cap_chan_del>
   186d0:	00025284 	.word	0x00025284
   186d4:	00025224 	.word	0x00025224
   186d8:	000275ef 	.word	0x000275ef

000186dc <bt_l2cap_connected>:
{
   186dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   186e0:	4e29      	ldr	r6, [pc, #164]	; (18788 <bt_l2cap_connected+0xac>)
   186e2:	4f2a      	ldr	r7, [pc, #168]	; (1878c <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   186e4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 18790 <bt_l2cap_connected+0xb4>
{
   186e8:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   186ea:	42be      	cmp	r6, r7
   186ec:	d302      	bcc.n	186f4 <bt_l2cap_connected+0x18>
}
   186ee:	b003      	add	sp, #12
   186f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   186f4:	6873      	ldr	r3, [r6, #4]
   186f6:	a901      	add	r1, sp, #4
   186f8:	4620      	mov	r0, r4
   186fa:	4798      	blx	r3
   186fc:	2800      	cmp	r0, #0
   186fe:	db3d      	blt.n	1877c <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   18700:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   18702:	8833      	ldrh	r3, [r6, #0]
   18704:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   18708:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1870c:	4641      	mov	r1, r8
   1870e:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   18712:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   18716:	f00c fb9d 	bl	24e54 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1871a:	f3bf 8f5b 	dmb	ish
   1871e:	f105 0368 	add.w	r3, r5, #104	; 0x68
   18722:	2200      	movs	r2, #0
   18724:	e853 1f00 	ldrex	r1, [r3]
   18728:	e843 2000 	strex	r0, r2, [r3]
   1872c:	2800      	cmp	r0, #0
   1872e:	d1f9      	bne.n	18724 <bt_l2cap_connected+0x48>
   18730:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   18734:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   18736:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   18738:	f105 0308 	add.w	r3, r5, #8
   1873c:	bb02      	cbnz	r2, 18780 <bt_l2cap_connected+0xa4>
	list->head = node;
   1873e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   18742:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   18744:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   18746:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   18748:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   1874c:	681b      	ldr	r3, [r3, #0]
   1874e:	b103      	cbz	r3, 18752 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   18750:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18752:	9b01      	ldr	r3, [sp, #4]
   18754:	f3bf 8f5b 	dmb	ish
   18758:	3368      	adds	r3, #104	; 0x68
   1875a:	e853 2f00 	ldrex	r2, [r3]
   1875e:	f042 0201 	orr.w	r2, r2, #1
   18762:	e843 2100 	strex	r1, r2, [r3]
   18766:	2900      	cmp	r1, #0
   18768:	d1f7      	bne.n	1875a <bt_l2cap_connected+0x7e>
   1876a:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1876e:	9801      	ldr	r0, [sp, #4]
   18770:	6843      	ldr	r3, [r0, #4]
   18772:	699b      	ldr	r3, [r3, #24]
   18774:	b113      	cbz	r3, 1877c <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   18776:	f100 0168 	add.w	r1, r0, #104	; 0x68
   1877a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1877c:	360c      	adds	r6, #12
   1877e:	e7b4      	b.n	186ea <bt_l2cap_connected+0xe>
	parent->next = child;
   18780:	6013      	str	r3, [r2, #0]
	list->tail = node;
   18782:	6563      	str	r3, [r4, #84]	; 0x54
}
   18784:	e7dd      	b.n	18742 <bt_l2cap_connected+0x66>
   18786:	bf00      	nop
   18788:	000251bc 	.word	0x000251bc
   1878c:	000251e0 	.word	0x000251e0
   18790:	000186a1 	.word	0x000186a1

00018794 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   18794:	898b      	ldrh	r3, [r1, #12]
   18796:	2b03      	cmp	r3, #3
{
   18798:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1879a:	4606      	mov	r6, r0
   1879c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1879e:	d80a      	bhi.n	187b6 <l2cap_recv+0x22>
   187a0:	4931      	ldr	r1, [pc, #196]	; (18868 <l2cap_recv+0xd4>)
   187a2:	4b32      	ldr	r3, [pc, #200]	; (1886c <l2cap_recv+0xd8>)
		BT_ERR("Too small L2CAP signaling PDU");
   187a4:	4832      	ldr	r0, [pc, #200]	; (18870 <l2cap_recv+0xdc>)
   187a6:	1ac9      	subs	r1, r1, r3
   187a8:	08c9      	lsrs	r1, r1, #3
   187aa:	0189      	lsls	r1, r1, #6
   187ac:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
   187b0:	f009 f8ce 	bl	21950 <log_0>
		return 0;
   187b4:	e013      	b.n	187de <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
   187b6:	2104      	movs	r1, #4
   187b8:	f105 0008 	add.w	r0, r5, #8
   187bc:	f00b fc1e 	bl	23ffc <net_buf_simple_pull_mem>
	if (buf->len != len) {
   187c0:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   187c2:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   187c4:	428a      	cmp	r2, r1
   187c6:	4604      	mov	r4, r0
   187c8:	d00c      	beq.n	187e4 <l2cap_recv+0x50>
   187ca:	4828      	ldr	r0, [pc, #160]	; (1886c <l2cap_recv+0xd8>)
   187cc:	4b26      	ldr	r3, [pc, #152]	; (18868 <l2cap_recv+0xd4>)
   187ce:	1a1b      	subs	r3, r3, r0
   187d0:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   187d2:	019b      	lsls	r3, r3, #6
   187d4:	4827      	ldr	r0, [pc, #156]	; (18874 <l2cap_recv+0xe0>)
   187d6:	f043 0301 	orr.w	r3, r3, #1
   187da:	f009 f8da 	bl	21992 <log_2>
}
   187de:	2000      	movs	r0, #0
   187e0:	b002      	add	sp, #8
   187e2:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   187e4:	7843      	ldrb	r3, [r0, #1]
   187e6:	b943      	cbnz	r3, 187fa <l2cap_recv+0x66>
   187e8:	491f      	ldr	r1, [pc, #124]	; (18868 <l2cap_recv+0xd4>)
   187ea:	4b20      	ldr	r3, [pc, #128]	; (1886c <l2cap_recv+0xd8>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   187ec:	4822      	ldr	r0, [pc, #136]	; (18878 <l2cap_recv+0xe4>)
   187ee:	1ac9      	subs	r1, r1, r3
   187f0:	08c9      	lsrs	r1, r1, #3
   187f2:	0189      	lsls	r1, r1, #6
   187f4:	f041 0101 	orr.w	r1, r1, #1
   187f8:	e7da      	b.n	187b0 <l2cap_recv+0x1c>
	switch (hdr->code) {
   187fa:	7801      	ldrb	r1, [r0, #0]
   187fc:	2901      	cmp	r1, #1
   187fe:	d0ee      	beq.n	187de <l2cap_recv+0x4a>
   18800:	2913      	cmp	r1, #19
   18802:	d10a      	bne.n	1881a <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
   18804:	2a01      	cmp	r2, #1
   18806:	d8ea      	bhi.n	187de <l2cap_recv+0x4a>
   18808:	4917      	ldr	r1, [pc, #92]	; (18868 <l2cap_recv+0xd4>)
   1880a:	4b18      	ldr	r3, [pc, #96]	; (1886c <l2cap_recv+0xd8>)
		BT_ERR("Too small LE conn param rsp");
   1880c:	481b      	ldr	r0, [pc, #108]	; (1887c <l2cap_recv+0xe8>)
   1880e:	1ac9      	subs	r1, r1, r3
   18810:	08c9      	lsrs	r1, r1, #3
   18812:	0189      	lsls	r1, r1, #6
   18814:	f041 0101 	orr.w	r1, r1, #1
   18818:	e7ca      	b.n	187b0 <l2cap_recv+0x1c>
   1881a:	4b14      	ldr	r3, [pc, #80]	; (1886c <l2cap_recv+0xd8>)
   1881c:	4a12      	ldr	r2, [pc, #72]	; (18868 <l2cap_recv+0xd4>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   1881e:	4818      	ldr	r0, [pc, #96]	; (18880 <l2cap_recv+0xec>)
   18820:	1ad2      	subs	r2, r2, r3
   18822:	08d2      	lsrs	r2, r2, #3
   18824:	0192      	lsls	r2, r2, #6
   18826:	f042 0202 	orr.w	r2, r2, #2
   1882a:	f009 f89e 	bl	2196a <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1882e:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   18830:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   18832:	2202      	movs	r2, #2
   18834:	2001      	movs	r0, #1
   18836:	f7ff ff0b 	bl	18650 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1883a:	4604      	mov	r4, r0
   1883c:	2800      	cmp	r0, #0
   1883e:	d0ce      	beq.n	187de <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
   18840:	2102      	movs	r1, #2
   18842:	3008      	adds	r0, #8
   18844:	f00b fbb3 	bl	23fae <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   18848:	2300      	movs	r3, #0
   1884a:	7003      	strb	r3, [r0, #0]
   1884c:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1884e:	4622      	mov	r2, r4
   18850:	9300      	str	r3, [sp, #0]
   18852:	2105      	movs	r1, #5
   18854:	4628      	mov	r0, r5
   18856:	f00a feff 	bl	23658 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1885a:	2800      	cmp	r0, #0
   1885c:	d0bf      	beq.n	187de <l2cap_recv+0x4a>
		net_buf_unref(buf);
   1885e:	4620      	mov	r0, r4
   18860:	f001 fd50 	bl	1a304 <net_buf_unref>
   18864:	e7bb      	b.n	187de <l2cap_recv+0x4a>
   18866:	bf00      	nop
   18868:	00025284 	.word	0x00025284
   1886c:	00025224 	.word	0x00025224
   18870:	000275ff 	.word	0x000275ff
   18874:	0002761d 	.word	0x0002761d
   18878:	0002763e 	.word	0x0002763e
   1887c:	0002765f 	.word	0x0002765f
   18880:	0002767b 	.word	0x0002767b

00018884 <bt_l2cap_recv>:
{
   18884:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   18886:	898b      	ldrh	r3, [r1, #12]
   18888:	2b03      	cmp	r3, #3
{
   1888a:	4605      	mov	r5, r0
   1888c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1888e:	d80e      	bhi.n	188ae <bt_l2cap_recv+0x2a>
   18890:	4914      	ldr	r1, [pc, #80]	; (188e4 <bt_l2cap_recv+0x60>)
   18892:	4b15      	ldr	r3, [pc, #84]	; (188e8 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
   18894:	4815      	ldr	r0, [pc, #84]	; (188ec <bt_l2cap_recv+0x68>)
   18896:	1ac9      	subs	r1, r1, r3
   18898:	08c9      	lsrs	r1, r1, #3
   1889a:	0189      	lsls	r1, r1, #6
   1889c:	f041 0101 	orr.w	r1, r1, #1
   188a0:	f009 f856 	bl	21950 <log_0>
	net_buf_unref(buf);
   188a4:	4620      	mov	r0, r4
}
   188a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   188aa:	f001 bd2b 	b.w	1a304 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   188ae:	2104      	movs	r1, #4
   188b0:	f104 0008 	add.w	r0, r4, #8
   188b4:	f00b fba2 	bl	23ffc <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   188b8:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   188ba:	4628      	mov	r0, r5
   188bc:	f00a fef5 	bl	236aa <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   188c0:	b950      	cbnz	r0, 188d8 <bt_l2cap_recv+0x54>
   188c2:	4b09      	ldr	r3, [pc, #36]	; (188e8 <bt_l2cap_recv+0x64>)
   188c4:	4a07      	ldr	r2, [pc, #28]	; (188e4 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   188c6:	480a      	ldr	r0, [pc, #40]	; (188f0 <bt_l2cap_recv+0x6c>)
   188c8:	1ad2      	subs	r2, r2, r3
   188ca:	08d2      	lsrs	r2, r2, #3
   188cc:	0192      	lsls	r2, r2, #6
   188ce:	f042 0202 	orr.w	r2, r2, #2
   188d2:	f009 f84a 	bl	2196a <log_1>
		net_buf_unref(buf);
   188d6:	e7e5      	b.n	188a4 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
   188d8:	6843      	ldr	r3, [r0, #4]
   188da:	4621      	mov	r1, r4
   188dc:	691b      	ldr	r3, [r3, #16]
   188de:	4798      	blx	r3
   188e0:	e7e0      	b.n	188a4 <bt_l2cap_recv+0x20>
   188e2:	bf00      	nop
   188e4:	00025284 	.word	0x00025284
   188e8:	00025224 	.word	0x00025224
   188ec:	00027699 	.word	0x00027699
   188f0:	000276b6 	.word	0x000276b6

000188f4 <bt_l2cap_update_conn_param>:
{
   188f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   188f6:	4b17      	ldr	r3, [pc, #92]	; (18954 <bt_l2cap_update_conn_param+0x60>)
   188f8:	781a      	ldrb	r2, [r3, #0]
   188fa:	3201      	adds	r2, #1
	if (!ident) {
   188fc:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   18900:	bf08      	it	eq
   18902:	2201      	moveq	r2, #1
   18904:	701a      	strb	r2, [r3, #0]
{
   18906:	4606      	mov	r6, r0
   18908:	460d      	mov	r5, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1890a:	2208      	movs	r2, #8
   1890c:	7819      	ldrb	r1, [r3, #0]
   1890e:	2012      	movs	r0, #18
   18910:	f7ff fe9e 	bl	18650 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   18914:	4604      	mov	r4, r0
   18916:	b1d0      	cbz	r0, 1894e <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   18918:	2108      	movs	r1, #8
   1891a:	4408      	add	r0, r1
   1891c:	f00b fb47 	bl	23fae <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   18920:	882b      	ldrh	r3, [r5, #0]
   18922:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   18924:	886b      	ldrh	r3, [r5, #2]
   18926:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   18928:	88ab      	ldrh	r3, [r5, #4]
   1892a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1892c:	88eb      	ldrh	r3, [r5, #6]
   1892e:	80c3      	strh	r3, [r0, #6]
   18930:	2300      	movs	r3, #0
   18932:	9300      	str	r3, [sp, #0]
   18934:	4622      	mov	r2, r4
   18936:	2105      	movs	r1, #5
   18938:	4630      	mov	r0, r6
   1893a:	f00a fe8d 	bl	23658 <bt_l2cap_send_cb>
	if (err) {
   1893e:	4605      	mov	r5, r0
   18940:	b110      	cbz	r0, 18948 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   18942:	4620      	mov	r0, r4
   18944:	f001 fcde 	bl	1a304 <net_buf_unref>
}
   18948:	4628      	mov	r0, r5
   1894a:	b002      	add	sp, #8
   1894c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1894e:	f06f 050b 	mvn.w	r5, #11
   18952:	e7f9      	b.n	18948 <bt_l2cap_update_conn_param+0x54>
   18954:	200031a1 	.word	0x200031a1

00018958 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
   18958:	4b10      	ldr	r3, [pc, #64]	; (1899c <get_io_capa+0x44>)
   1895a:	681b      	ldr	r3, [r3, #0]
   1895c:	b1bb      	cbz	r3, 1898e <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
   1895e:	681a      	ldr	r2, [r3, #0]
   18960:	b142      	cbz	r2, 18974 <get_io_capa+0x1c>
   18962:	6859      	ldr	r1, [r3, #4]
   18964:	b131      	cbz	r1, 18974 <get_io_capa+0x1c>
   18966:	6899      	ldr	r1, [r3, #8]
   18968:	b911      	cbnz	r1, 18970 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
   1896a:	490d      	ldr	r1, [pc, #52]	; (189a0 <get_io_capa+0x48>)
   1896c:	7809      	ldrb	r1, [r1, #0]
   1896e:	b939      	cbnz	r1, 18980 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   18970:	2004      	movs	r0, #4
   18972:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
   18974:	490a      	ldr	r1, [pc, #40]	; (189a0 <get_io_capa+0x48>)
   18976:	7809      	ldrb	r1, [r1, #0]
   18978:	b111      	cbz	r1, 18980 <get_io_capa+0x28>
   1897a:	b10a      	cbz	r2, 18980 <get_io_capa+0x28>
   1897c:	6899      	ldr	r1, [r3, #8]
   1897e:	b941      	cbnz	r1, 18992 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
   18980:	685b      	ldr	r3, [r3, #4]
   18982:	b943      	cbnz	r3, 18996 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
   18984:	2a00      	cmp	r2, #0
   18986:	bf0c      	ite	eq
   18988:	2003      	moveq	r0, #3
   1898a:	2000      	movne	r0, #0
   1898c:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1898e:	2003      	movs	r0, #3
   18990:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
   18992:	2001      	movs	r0, #1
   18994:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
   18996:	2002      	movs	r0, #2
	}
}
   18998:	4770      	bx	lr
   1899a:	bf00      	nop
   1899c:	20002488 	.word	0x20002488
   189a0:	200031a3 	.word	0x200031a3

000189a4 <smp_dhkey_generate>:
}
#endif /* CONFIG_BT_PERIPHERAL */

static void bt_smp_dhkey_ready(const uint8_t *dhkey);
static uint8_t smp_dhkey_generate(struct bt_smp *smp)
{
   189a4:	b538      	push	{r3, r4, r5, lr}
	int err;

	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   189a6:	1d05      	adds	r5, r0, #4
{
   189a8:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   189aa:	2108      	movs	r1, #8
   189ac:	4628      	mov	r0, r5
   189ae:	f00a fe99 	bl	236e4 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   189b2:	490b      	ldr	r1, [pc, #44]	; (189e0 <smp_dhkey_generate+0x3c>)
   189b4:	f104 0057 	add.w	r0, r4, #87	; 0x57
   189b8:	f7fc fd86 	bl	154c8 <bt_dh_key_gen>
	if (err) {
   189bc:	b170      	cbz	r0, 189dc <smp_dhkey_generate+0x38>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   189be:	2108      	movs	r1, #8
   189c0:	4628      	mov	r0, r5
   189c2:	f00a fea3 	bl	2370c <atomic_clear_bit>
   189c6:	4b07      	ldr	r3, [pc, #28]	; (189e4 <smp_dhkey_generate+0x40>)
   189c8:	4907      	ldr	r1, [pc, #28]	; (189e8 <smp_dhkey_generate+0x44>)

		BT_ERR("Failed to generate DHKey");
   189ca:	4808      	ldr	r0, [pc, #32]	; (189ec <smp_dhkey_generate+0x48>)
   189cc:	1ac9      	subs	r1, r1, r3
   189ce:	08c9      	lsrs	r1, r1, #3
   189d0:	0189      	lsls	r1, r1, #6
   189d2:	f041 0101 	orr.w	r1, r1, #1
   189d6:	f008 ffbb 	bl	21950 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   189da:	2008      	movs	r0, #8
	}

	return 0;
}
   189dc:	bd38      	pop	{r3, r4, r5, pc}
   189de:	bf00      	nop
   189e0:	00023d4b 	.word	0x00023d4b
   189e4:	00025224 	.word	0x00025224
   189e8:	00025294 	.word	0x00025294
   189ec:	000276f2 	.word	0x000276f2

000189f0 <get_auth.isra.0>:
	if (sc_supported) {
   189f0:	4b0c      	ldr	r3, [pc, #48]	; (18a24 <get_auth.isra.0+0x34>)
   189f2:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
   189f4:	b510      	push	{r4, lr}
	if (sc_supported) {
   189f6:	b17b      	cbz	r3, 18a18 <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
   189f8:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   189fc:	f7ff ffac 	bl	18958 <get_io_capa>
	if (bondable) {
   18a00:	4b09      	ldr	r3, [pc, #36]	; (18a28 <get_auth.isra.0+0x38>)
   18a02:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   18a04:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
   18a06:	bf0c      	ite	eq
   18a08:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
   18a0c:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
   18a10:	b12b      	cbz	r3, 18a1e <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
   18a12:	f044 0001 	orr.w	r0, r4, #1
}
   18a16:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   18a18:	f000 0407 	and.w	r4, r0, #7
   18a1c:	e7ee      	b.n	189fc <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
   18a1e:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
   18a22:	e7f8      	b.n	18a16 <get_auth.isra.0+0x26>
   18a24:	200031a3 	.word	0x200031a3
   18a28:	20000701 	.word	0x20000701

00018a2c <smp_chan_get>:
{
   18a2c:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   18a2e:	2106      	movs	r1, #6
   18a30:	f00a fe3b 	bl	236aa <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   18a34:	4604      	mov	r4, r0
   18a36:	b958      	cbnz	r0, 18a50 <smp_chan_get+0x24>
   18a38:	4907      	ldr	r1, [pc, #28]	; (18a58 <smp_chan_get+0x2c>)
   18a3a:	4b08      	ldr	r3, [pc, #32]	; (18a5c <smp_chan_get+0x30>)
		BT_ERR("Unable to find SMP channel");
   18a3c:	4808      	ldr	r0, [pc, #32]	; (18a60 <smp_chan_get+0x34>)
   18a3e:	1ac9      	subs	r1, r1, r3
   18a40:	08c9      	lsrs	r1, r1, #3
   18a42:	0189      	lsls	r1, r1, #6
   18a44:	f041 0101 	orr.w	r1, r1, #1
   18a48:	f008 ff82 	bl	21950 <log_0>
}
   18a4c:	4620      	mov	r0, r4
   18a4e:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   18a50:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   18a54:	e7fa      	b.n	18a4c <smp_chan_get+0x20>
   18a56:	bf00      	nop
   18a58:	00025294 	.word	0x00025294
   18a5c:	00025224 	.word	0x00025224
   18a60:	0002770b 	.word	0x0002770b

00018a64 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   18a64:	4b0c      	ldr	r3, [pc, #48]	; (18a98 <bt_smp_accept+0x34>)
{
   18a66:	b510      	push	{r4, lr}
   18a68:	4604      	mov	r4, r0
		if (smp->chan.chan.conn) {
   18a6a:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
   18a6e:	b928      	cbnz	r0, 18a7c <bt_smp_accept+0x18>
			continue;
		}

		smp->chan.chan.ops = &ops;
   18a70:	4a0a      	ldr	r2, [pc, #40]	; (18a9c <bt_smp_accept+0x38>)
   18a72:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

		*chan = &smp->chan.chan;
   18a76:	33f0      	adds	r3, #240	; 0xf0
   18a78:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   18a7a:	bd10      	pop	{r4, pc}
   18a7c:	4b08      	ldr	r3, [pc, #32]	; (18aa0 <bt_smp_accept+0x3c>)
   18a7e:	4a09      	ldr	r2, [pc, #36]	; (18aa4 <bt_smp_accept+0x40>)
	BT_ERR("No available SMP context for conn %p", conn);
   18a80:	4809      	ldr	r0, [pc, #36]	; (18aa8 <bt_smp_accept+0x44>)
   18a82:	1ad2      	subs	r2, r2, r3
   18a84:	08d2      	lsrs	r2, r2, #3
   18a86:	0192      	lsls	r2, r2, #6
   18a88:	f042 0201 	orr.w	r2, r2, #1
   18a8c:	4621      	mov	r1, r4
   18a8e:	f008 ff6c 	bl	2196a <log_1>
	return -ENOMEM;
   18a92:	f06f 000b 	mvn.w	r0, #11
   18a96:	e7f0      	b.n	18a7a <bt_smp_accept+0x16>
   18a98:	20001a08 	.word	0x20001a08
   18a9c:	00025ac4 	.word	0x00025ac4
   18aa0:	00025224 	.word	0x00025224
   18aa4:	00025294 	.word	0x00025294
   18aa8:	00027726 	.word	0x00027726

00018aac <smp_init>:
{
   18aac:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   18aae:	22f0      	movs	r2, #240	; 0xf0
{
   18ab0:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   18ab2:	2100      	movs	r1, #0
   18ab4:	f009 fa58 	bl	21f68 <memset>
	if (bt_rand(smp->prnd, 16)) {
   18ab8:	2110      	movs	r1, #16
   18aba:	f105 0027 	add.w	r0, r5, #39	; 0x27
   18abe:	f002 fbad 	bl	1b21c <bt_rand>
   18ac2:	4604      	mov	r4, r0
   18ac4:	b948      	cbnz	r0, 18ada <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   18ac6:	2105      	movs	r1, #5
   18ac8:	4628      	mov	r0, r5
   18aca:	f00a fe0b 	bl	236e4 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   18ace:	f7fc fceb 	bl	154a8 <bt_pub_key_get>
   18ad2:	4b03      	ldr	r3, [pc, #12]	; (18ae0 <smp_init+0x34>)
   18ad4:	6018      	str	r0, [r3, #0]
}
   18ad6:	4620      	mov	r0, r4
   18ad8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   18ada:	2408      	movs	r4, #8
   18adc:	e7fb      	b.n	18ad6 <smp_init+0x2a>
   18ade:	bf00      	nop
   18ae0:	20002590 	.word	0x20002590

00018ae4 <smp_find>:
{
   18ae4:	4601      	mov	r1, r0
   18ae6:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   18ae8:	4803      	ldr	r0, [pc, #12]	; (18af8 <smp_find+0x14>)
   18aea:	f00a feda 	bl	238a2 <atomic_test_bit>
   18aee:	2800      	cmp	r0, #0
}
   18af0:	4802      	ldr	r0, [pc, #8]	; (18afc <smp_find+0x18>)
   18af2:	bf08      	it	eq
   18af4:	2000      	moveq	r0, #0
   18af6:	bd08      	pop	{r3, pc}
   18af8:	20001a0c 	.word	0x20001a0c
   18afc:	20001a08 	.word	0x20001a08

00018b00 <compute_and_check_and_send_periph_dhcheck>:
{
   18b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
   18b04:	2210      	movs	r2, #16
{
   18b06:	b0a3      	sub	sp, #140	; 0x8c
   18b08:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   18b0a:	2100      	movs	r1, #0
   18b0c:	eb0d 0002 	add.w	r0, sp, r2
   18b10:	f009 fa2a 	bl	21f68 <memset>
	switch (smp->method) {
   18b14:	7a21      	ldrb	r1, [r4, #8]
   18b16:	2905      	cmp	r1, #5
   18b18:	f200 8099 	bhi.w	18c4e <compute_and_check_and_send_periph_dhcheck+0x14e>
   18b1c:	e8df f001 	tbb	[pc, r1]
   18b20:	09030309 	.word	0x09030309
   18b24:	8e97      	.short	0x8e97
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   18b26:	2204      	movs	r2, #4
   18b28:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   18b2c:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   18b2e:	f009 fa10 	bl	21f52 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
   18b32:	4b79      	ldr	r3, [pc, #484]	; (18d18 <compute_and_check_and_send_periph_dhcheck+0x218>)
		   &smp->chan.chan.conn->le.init_addr,
   18b34:	f8d4 90f0 	ldr.w	r9, [r4, #240]	; 0xf0
	uint8_t m[53] = { 0x00, /* counter */
   18b38:	aa14      	add	r2, sp, #80	; 0x50
   18b3a:	f103 0630 	add.w	r6, r3, #48	; 0x30
   18b3e:	6818      	ldr	r0, [r3, #0]
   18b40:	6859      	ldr	r1, [r3, #4]
   18b42:	4615      	mov	r5, r2
   18b44:	c503      	stmia	r5!, {r0, r1}
   18b46:	3308      	adds	r3, #8
   18b48:	42b3      	cmp	r3, r6
   18b4a:	462a      	mov	r2, r5
   18b4c:	d1f7      	bne.n	18b3e <compute_and_check_and_send_periph_dhcheck+0x3e>
   18b4e:	6818      	ldr	r0, [r3, #0]
   18b50:	791b      	ldrb	r3, [r3, #4]
   18b52:	6028      	str	r0, [r5, #0]
   18b54:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
   18b56:	ad0c      	add	r5, sp, #48	; 0x30
   18b58:	2220      	movs	r2, #32
   18b5a:	f104 0197 	add.w	r1, r4, #151	; 0x97
   18b5e:	4628      	mov	r0, r5
   18b60:	f00a fdb4 	bl	236cc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
   18b64:	486d      	ldr	r0, [pc, #436]	; (18d1c <compute_and_check_and_send_periph_dhcheck+0x21c>)
   18b66:	ab08      	add	r3, sp, #32
   18b68:	2220      	movs	r2, #32
   18b6a:	4629      	mov	r1, r5
   18b6c:	f00a fddd 	bl	2372a <bt_smp_aes_cmac>
	if (err) {
   18b70:	2800      	cmp	r0, #0
   18b72:	f040 80c7 	bne.w	18d04 <compute_and_check_and_send_periph_dhcheck+0x204>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   18b76:	f104 0737 	add.w	r7, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
   18b7a:	2210      	movs	r2, #16
   18b7c:	4639      	mov	r1, r7
   18b7e:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
   18b82:	f104 0827 	add.w	r8, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
   18b86:	f00a fda1 	bl	236cc <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   18b8a:	2210      	movs	r2, #16
   18b8c:	4641      	mov	r1, r8
   18b8e:	f10d 0065 	add.w	r0, sp, #101	; 0x65
   18b92:	f00a fd9b 	bl	236cc <sys_memcpy_swap>
	m[37] = a1->type;
   18b96:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
   18b9a:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   18b9e:	2206      	movs	r2, #6
   18ba0:	f109 0190 	add.w	r1, r9, #144	; 0x90
   18ba4:	f10d 0076 	add.w	r0, sp, #118	; 0x76
   18ba8:	f00a fd90 	bl	236cc <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
   18bac:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
   18bb0:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
   18bb4:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   18bb8:	2206      	movs	r2, #6
   18bba:	f109 0197 	add.w	r1, r9, #151	; 0x97
   18bbe:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
   18bc2:	f00a fd83 	bl	236cc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
   18bc6:	4633      	mov	r3, r6
   18bc8:	2235      	movs	r2, #53	; 0x35
   18bca:	a914      	add	r1, sp, #80	; 0x50
   18bcc:	a808      	add	r0, sp, #32
   18bce:	f00a fdac 	bl	2372a <bt_smp_aes_cmac>
	if (err) {
   18bd2:	2800      	cmp	r0, #0
   18bd4:	f040 8096 	bne.w	18d04 <compute_and_check_and_send_periph_dhcheck+0x204>
	sys_mem_swap(mackey, 16);
   18bd8:	4630      	mov	r0, r6
   18bda:	f00a fde1 	bl	237a0 <sys_mem_swap.constprop.0>
		   smp->tk)) {
   18bde:	f104 0947 	add.w	r9, r4, #71	; 0x47
	m[0] = 0x01;
   18be2:	2301      	movs	r3, #1
   18be4:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
   18be8:	2235      	movs	r2, #53	; 0x35
   18bea:	464b      	mov	r3, r9
   18bec:	a914      	add	r1, sp, #80	; 0x50
   18bee:	a808      	add	r0, sp, #32
   18bf0:	f00a fd9b 	bl	2372a <bt_smp_aes_cmac>
	if (err) {
   18bf4:	2800      	cmp	r0, #0
   18bf6:	f040 8085 	bne.w	18d04 <compute_and_check_and_send_periph_dhcheck+0x204>
	sys_mem_swap(ltk, 16);
   18bfa:	4648      	mov	r0, r9
   18bfc:	f00a fdd0 	bl	237a0 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
   18c00:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   18c04:	aa14      	add	r2, sp, #80	; 0x50
   18c06:	9203      	str	r2, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
   18c08:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
   18c0c:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   18c0e:	9301      	str	r3, [sp, #4]
   18c10:	f104 0311 	add.w	r3, r4, #17
   18c14:	9202      	str	r2, [sp, #8]
   18c16:	9300      	str	r3, [sp, #0]
   18c18:	463a      	mov	r2, r7
   18c1a:	ab04      	add	r3, sp, #16
   18c1c:	4641      	mov	r1, r8
   18c1e:	4630      	mov	r0, r6
   18c20:	f00a fdcc 	bl	237bc <smp_f6>
   18c24:	b1f8      	cbz	r0, 18c66 <compute_and_check_and_send_periph_dhcheck+0x166>
   18c26:	493e      	ldr	r1, [pc, #248]	; (18d20 <compute_and_check_and_send_periph_dhcheck+0x220>)
   18c28:	4b3e      	ldr	r3, [pc, #248]	; (18d24 <compute_and_check_and_send_periph_dhcheck+0x224>)
		BT_ERR("Calculate local DHKey check failed");
   18c2a:	483f      	ldr	r0, [pc, #252]	; (18d28 <compute_and_check_and_send_periph_dhcheck+0x228>)
   18c2c:	1ac9      	subs	r1, r1, r3
   18c2e:	08c9      	lsrs	r1, r1, #3
   18c30:	0189      	lsls	r1, r1, #6
   18c32:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate LTK failed");
   18c36:	f008 fe8b 	bl	21950 <log_0>
   18c3a:	e012      	b.n	18c62 <compute_and_check_and_send_periph_dhcheck+0x162>
		if (smp->oobd_remote) {
   18c3c:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   18c40:	2900      	cmp	r1, #0
   18c42:	f43f af76 	beq.w	18b32 <compute_and_check_and_send_periph_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   18c46:	2210      	movs	r2, #16
   18c48:	eb0d 0002 	add.w	r0, sp, r2
   18c4c:	e76f      	b.n	18b2e <compute_and_check_and_send_periph_dhcheck+0x2e>
   18c4e:	4a34      	ldr	r2, [pc, #208]	; (18d20 <compute_and_check_and_send_periph_dhcheck+0x220>)
   18c50:	4b34      	ldr	r3, [pc, #208]	; (18d24 <compute_and_check_and_send_periph_dhcheck+0x224>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   18c52:	4836      	ldr	r0, [pc, #216]	; (18d2c <compute_and_check_and_send_periph_dhcheck+0x22c>)
   18c54:	1ad2      	subs	r2, r2, r3
   18c56:	08d2      	lsrs	r2, r2, #3
   18c58:	0192      	lsls	r2, r2, #6
   18c5a:	f042 0201 	orr.w	r2, r2, #1
   18c5e:	f008 fe84 	bl	2196a <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   18c62:	2008      	movs	r0, #8
   18c64:	e049      	b.n	18cfa <compute_and_check_and_send_periph_dhcheck+0x1fa>
	if (smp->method == LE_SC_OOB) {
   18c66:	7a23      	ldrb	r3, [r4, #8]
   18c68:	2b05      	cmp	r3, #5
   18c6a:	d107      	bne.n	18c7c <compute_and_check_and_send_periph_dhcheck+0x17c>
		if (smp->oobd_local) {
   18c6c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
   18c70:	2210      	movs	r2, #16
   18c72:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
   18c76:	b1e1      	cbz	r1, 18cb2 <compute_and_check_and_send_periph_dhcheck+0x1b2>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   18c78:	f009 f96b 	bl	21f52 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
   18c7c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   18c80:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
   18c82:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
   18c86:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   18c88:	9301      	str	r3, [sp, #4]
   18c8a:	f104 030a 	add.w	r3, r4, #10
   18c8e:	9202      	str	r2, [sp, #8]
   18c90:	9300      	str	r3, [sp, #0]
   18c92:	4642      	mov	r2, r8
   18c94:	ab04      	add	r3, sp, #16
   18c96:	4639      	mov	r1, r7
   18c98:	4630      	mov	r0, r6
   18c9a:	f00a fd8f 	bl	237bc <smp_f6>
   18c9e:	b158      	cbz	r0, 18cb8 <compute_and_check_and_send_periph_dhcheck+0x1b8>
   18ca0:	491f      	ldr	r1, [pc, #124]	; (18d20 <compute_and_check_and_send_periph_dhcheck+0x220>)
   18ca2:	4b20      	ldr	r3, [pc, #128]	; (18d24 <compute_and_check_and_send_periph_dhcheck+0x224>)
		BT_ERR("Calculate remote DHKey check failed");
   18ca4:	4822      	ldr	r0, [pc, #136]	; (18d30 <compute_and_check_and_send_periph_dhcheck+0x230>)
   18ca6:	1ac9      	subs	r1, r1, r3
   18ca8:	08c9      	lsrs	r1, r1, #3
   18caa:	0189      	lsls	r1, r1, #6
   18cac:	f041 0101 	orr.w	r1, r1, #1
   18cb0:	e7c1      	b.n	18c36 <compute_and_check_and_send_periph_dhcheck+0x136>
			memset(r, 0, sizeof(r));
   18cb2:	f009 f959 	bl	21f68 <memset>
   18cb6:	e7e1      	b.n	18c7c <compute_and_check_and_send_periph_dhcheck+0x17c>
	if (memcmp(smp->e, re, 16)) {
   18cb8:	4629      	mov	r1, r5
   18cba:	2210      	movs	r2, #16
   18cbc:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   18cc0:	f009 f920 	bl	21f04 <memcmp>
   18cc4:	4605      	mov	r5, r0
   18cc6:	b9d8      	cbnz	r0, 18d00 <compute_and_check_and_send_periph_dhcheck+0x200>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   18cc8:	210d      	movs	r1, #13
   18cca:	4620      	mov	r0, r4
   18ccc:	f00a fe13 	bl	238f6 <smp_create_pdu.isra.0>
	if (!buf) {
   18cd0:	4606      	mov	r6, r0
   18cd2:	2800      	cmp	r0, #0
   18cd4:	d0c5      	beq.n	18c62 <compute_and_check_and_send_periph_dhcheck+0x162>
   18cd6:	2110      	movs	r1, #16
   18cd8:	3008      	adds	r0, #8
   18cda:	f00b f968 	bl	23fae <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   18cde:	2210      	movs	r2, #16
   18ce0:	a914      	add	r1, sp, #80	; 0x50
   18ce2:	f009 f936 	bl	21f52 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   18ce6:	462a      	mov	r2, r5
   18ce8:	4631      	mov	r1, r6
   18cea:	4620      	mov	r0, r4
   18cec:	f00a fd39 	bl	23762 <smp_send.isra.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   18cf0:	1d20      	adds	r0, r4, #4
   18cf2:	2101      	movs	r1, #1
   18cf4:	f00a fcf6 	bl	236e4 <atomic_set_bit>
	return 0;
   18cf8:	4628      	mov	r0, r5
}
   18cfa:	b023      	add	sp, #140	; 0x8c
   18cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   18d00:	200b      	movs	r0, #11
   18d02:	e7fa      	b.n	18cfa <compute_and_check_and_send_periph_dhcheck+0x1fa>
   18d04:	4906      	ldr	r1, [pc, #24]	; (18d20 <compute_and_check_and_send_periph_dhcheck+0x220>)
   18d06:	4b07      	ldr	r3, [pc, #28]	; (18d24 <compute_and_check_and_send_periph_dhcheck+0x224>)
		BT_ERR("Calculate LTK failed");
   18d08:	480a      	ldr	r0, [pc, #40]	; (18d34 <compute_and_check_and_send_periph_dhcheck+0x234>)
   18d0a:	1ac9      	subs	r1, r1, r3
   18d0c:	08c9      	lsrs	r1, r1, #3
   18d0e:	0189      	lsls	r1, r1, #6
   18d10:	f041 0101 	orr.w	r1, r1, #1
   18d14:	e78f      	b.n	18c36 <compute_and_check_and_send_periph_dhcheck+0x136>
   18d16:	bf00      	nop
   18d18:	000253c7 	.word	0x000253c7
   18d1c:	00027a34 	.word	0x00027a34
   18d20:	00025294 	.word	0x00025294
   18d24:	00025224 	.word	0x00025224
   18d28:	00027767 	.word	0x00027767
   18d2c:	0002774b 	.word	0x0002774b
   18d30:	0002778a 	.word	0x0002778a
   18d34:	000277ae 	.word	0x000277ae

00018d38 <smp_send_pairing_confirm>:
{
   18d38:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   18d3a:	7a04      	ldrb	r4, [r0, #8]
   18d3c:	2c02      	cmp	r4, #2
{
   18d3e:	4605      	mov	r5, r0
	switch (smp->method) {
   18d40:	d824      	bhi.n	18d8c <smp_send_pairing_confirm+0x54>
   18d42:	b14c      	cbz	r4, 18d58 <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   18d44:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   18d48:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   18d4c:	40dc      	lsrs	r4, r3
   18d4e:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   18d52:	f064 047f 	orn	r4, r4, #127	; 0x7f
   18d56:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   18d58:	2103      	movs	r1, #3
   18d5a:	4628      	mov	r0, r5
   18d5c:	f00a fdcb 	bl	238f6 <smp_create_pdu.isra.0>
	if (!buf) {
   18d60:	4606      	mov	r6, r0
   18d62:	b300      	cbz	r0, 18da6 <smp_send_pairing_confirm+0x6e>
   18d64:	2110      	movs	r1, #16
   18d66:	3008      	adds	r0, #8
   18d68:	f00b f921 	bl	23fae <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   18d6c:	9000      	str	r0, [sp, #0]
   18d6e:	4816      	ldr	r0, [pc, #88]	; (18dc8 <smp_send_pairing_confirm+0x90>)
   18d70:	4623      	mov	r3, r4
   18d72:	6800      	ldr	r0, [r0, #0]
   18d74:	f105 0227 	add.w	r2, r5, #39	; 0x27
   18d78:	f105 0157 	add.w	r1, r5, #87	; 0x57
   18d7c:	f00a fd6a 	bl	23854 <smp_f4>
   18d80:	4604      	mov	r4, r0
   18d82:	b1a0      	cbz	r0, 18dae <smp_send_pairing_confirm+0x76>
		net_buf_unref(buf);
   18d84:	4630      	mov	r0, r6
   18d86:	f001 fabd 	bl	1a304 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   18d8a:	e00c      	b.n	18da6 <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
   18d8c:	2c03      	cmp	r4, #3
   18d8e:	d00c      	beq.n	18daa <smp_send_pairing_confirm+0x72>
   18d90:	4a0e      	ldr	r2, [pc, #56]	; (18dcc <smp_send_pairing_confirm+0x94>)
   18d92:	4b0f      	ldr	r3, [pc, #60]	; (18dd0 <smp_send_pairing_confirm+0x98>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   18d94:	480f      	ldr	r0, [pc, #60]	; (18dd4 <smp_send_pairing_confirm+0x9c>)
   18d96:	1ad2      	subs	r2, r2, r3
   18d98:	08d2      	lsrs	r2, r2, #3
   18d9a:	0192      	lsls	r2, r2, #6
   18d9c:	f042 0201 	orr.w	r2, r2, #1
   18da0:	4621      	mov	r1, r4
   18da2:	f008 fde2 	bl	2196a <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   18da6:	2008      	movs	r0, #8
   18da8:	e00b      	b.n	18dc2 <smp_send_pairing_confirm+0x8a>
	switch (smp->method) {
   18daa:	2400      	movs	r4, #0
   18dac:	e7d4      	b.n	18d58 <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
   18dae:	4602      	mov	r2, r0
   18db0:	4631      	mov	r1, r6
   18db2:	4628      	mov	r0, r5
   18db4:	f00a fcd5 	bl	23762 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   18db8:	1d28      	adds	r0, r5, #4
   18dba:	4621      	mov	r1, r4
   18dbc:	f00a fca6 	bl	2370c <atomic_clear_bit>
	return 0;
   18dc0:	4620      	mov	r0, r4
}
   18dc2:	b002      	add	sp, #8
   18dc4:	bd70      	pop	{r4, r5, r6, pc}
   18dc6:	bf00      	nop
   18dc8:	20002590 	.word	0x20002590
   18dcc:	00025294 	.word	0x00025294
   18dd0:	00025224 	.word	0x00025224
   18dd4:	0002774b 	.word	0x0002774b

00018dd8 <smp_public_key_periph>:
{
   18dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   18ddc:	1d06      	adds	r6, r0, #4
{
   18dde:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   18de0:	210e      	movs	r1, #14
   18de2:	4630      	mov	r0, r6
   18de4:	f00a fd5d 	bl	238a2 <atomic_test_bit>
   18de8:	b998      	cbnz	r0, 18e12 <smp_public_key_periph+0x3a>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   18dea:	4b4e      	ldr	r3, [pc, #312]	; (18f24 <smp_public_key_periph+0x14c>)
   18dec:	2220      	movs	r2, #32
   18dee:	6819      	ldr	r1, [r3, #0]
   18df0:	f104 0057 	add.w	r0, r4, #87	; 0x57
   18df4:	f009 f886 	bl	21f04 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   18df8:	b958      	cbnz	r0, 18e12 <smp_public_key_periph+0x3a>
   18dfa:	494b      	ldr	r1, [pc, #300]	; (18f28 <smp_public_key_periph+0x150>)
   18dfc:	4b4b      	ldr	r3, [pc, #300]	; (18f2c <smp_public_key_periph+0x154>)
		BT_WARN("Remote public key rejected");
   18dfe:	484c      	ldr	r0, [pc, #304]	; (18f30 <smp_public_key_periph+0x158>)
   18e00:	1ac9      	subs	r1, r1, r3
   18e02:	08c9      	lsrs	r1, r1, #3
   18e04:	0189      	lsls	r1, r1, #6
   18e06:	f041 0102 	orr.w	r1, r1, #2
   18e0a:	f008 fda1 	bl	21950 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   18e0e:	2008      	movs	r0, #8
   18e10:	e02e      	b.n	18e70 <smp_public_key_periph+0x98>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   18e12:	210c      	movs	r1, #12
   18e14:	4620      	mov	r0, r4
   18e16:	f00a fd6e 	bl	238f6 <smp_create_pdu.isra.0>
	if (!req_buf) {
   18e1a:	4605      	mov	r5, r0
   18e1c:	2800      	cmp	r0, #0
   18e1e:	d0f6      	beq.n	18e0e <smp_public_key_periph+0x36>
   18e20:	2140      	movs	r1, #64	; 0x40
   18e22:	3008      	adds	r0, #8
   18e24:	f00b f8c3 	bl	23fae <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   18e28:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 18f24 <smp_public_key_periph+0x14c>
   18e2c:	2220      	movs	r2, #32
   18e2e:	f8d8 1000 	ldr.w	r1, [r8]
   18e32:	4607      	mov	r7, r0
   18e34:	f009 f88d 	bl	21f52 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   18e38:	f8d8 1000 	ldr.w	r1, [r8]
   18e3c:	2220      	movs	r2, #32
   18e3e:	4411      	add	r1, r2
   18e40:	18b8      	adds	r0, r7, r2
   18e42:	f009 f886 	bl	21f52 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   18e46:	4629      	mov	r1, r5
   18e48:	2200      	movs	r2, #0
   18e4a:	4620      	mov	r0, r4
   18e4c:	f00a fc89 	bl	23762 <smp_send.isra.0>
	switch (smp->method) {
   18e50:	7a21      	ldrb	r1, [r4, #8]
   18e52:	2905      	cmp	r1, #5
   18e54:	d859      	bhi.n	18f0a <smp_public_key_periph+0x132>
   18e56:	e8df f001 	tbb	[pc, r1]
   18e5a:	3803      	.short	0x3803
   18e5c:	5658030d 	.word	0x5658030d
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18e60:	2104      	movs	r1, #4
   18e62:	4620      	mov	r0, r4
   18e64:	f00a fc3e 	bl	236e4 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
   18e68:	f7ff ff66 	bl	18d38 <smp_send_pairing_confirm>
		if (err) {
   18e6c:	2800      	cmp	r0, #0
   18e6e:	d03d      	beq.n	18eec <smp_public_key_periph+0x114>
}
   18e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   18e74:	2104      	movs	r1, #4
   18e76:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   18e7a:	f002 f9cf 	bl	1b21c <bt_rand>
   18e7e:	2800      	cmp	r0, #0
   18e80:	d1c5      	bne.n	18e0e <smp_public_key_periph+0x36>
		smp->passkey %= 1000000;
   18e82:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   18e86:	4a2b      	ldr	r2, [pc, #172]	; (18f34 <smp_public_key_periph+0x15c>)
	if (bt_auth && bt_auth->passkey_display) {
   18e88:	4d2b      	ldr	r5, [pc, #172]	; (18f38 <smp_public_key_periph+0x160>)
		smp->passkey %= 1000000;
   18e8a:	fbb1 f3f2 	udiv	r3, r1, r2
   18e8e:	fb02 1313 	mls	r3, r2, r3, r1
   18e92:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
   18e96:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
   18e98:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
   18e9c:	b163      	cbz	r3, 18eb8 <smp_public_key_periph+0xe0>
   18e9e:	681b      	ldr	r3, [r3, #0]
   18ea0:	b153      	cbz	r3, 18eb8 <smp_public_key_periph+0xe0>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   18ea2:	210b      	movs	r1, #11
   18ea4:	4630      	mov	r0, r6
   18ea6:	f00a fc1d 	bl	236e4 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
   18eaa:	682b      	ldr	r3, [r5, #0]
   18eac:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   18eb0:	681b      	ldr	r3, [r3, #0]
   18eb2:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   18eb6:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   18eb8:	2103      	movs	r1, #3
   18eba:	4620      	mov	r0, r4
   18ebc:	f00a fc12 	bl	236e4 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   18ec0:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18ec2:	4620      	mov	r0, r4
   18ec4:	f00a fc0e 	bl	236e4 <atomic_set_bit>
		break;
   18ec8:	e010      	b.n	18eec <smp_public_key_periph+0x114>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   18eca:	4620      	mov	r0, r4
   18ecc:	2103      	movs	r1, #3
   18ece:	f00a fc09 	bl	236e4 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   18ed2:	210e      	movs	r1, #14
   18ed4:	f00a fc06 	bl	236e4 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   18ed8:	4630      	mov	r0, r6
   18eda:	210a      	movs	r1, #10
   18edc:	f00a fc02 	bl	236e4 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
   18ee0:	4b15      	ldr	r3, [pc, #84]	; (18f38 <smp_public_key_periph+0x160>)
   18ee2:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   18ee6:	681b      	ldr	r3, [r3, #0]
   18ee8:	685b      	ldr	r3, [r3, #4]
   18eea:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   18eec:	4630      	mov	r0, r6
   18eee:	2107      	movs	r1, #7
   18ef0:	f00a fbf8 	bl	236e4 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   18ef4:	2008      	movs	r0, #8
   18ef6:	f7ff fdf5 	bl	18ae4 <smp_find>
   18efa:	b988      	cbnz	r0, 18f20 <smp_public_key_periph+0x148>
		return smp_dhkey_generate(smp);
   18efc:	4620      	mov	r0, r4
}
   18efe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return smp_dhkey_generate(smp);
   18f02:	f7ff bd4f 	b.w	189a4 <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   18f06:	2104      	movs	r1, #4
   18f08:	e7db      	b.n	18ec2 <smp_public_key_periph+0xea>
   18f0a:	4b08      	ldr	r3, [pc, #32]	; (18f2c <smp_public_key_periph+0x154>)
   18f0c:	4a06      	ldr	r2, [pc, #24]	; (18f28 <smp_public_key_periph+0x150>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   18f0e:	480b      	ldr	r0, [pc, #44]	; (18f3c <smp_public_key_periph+0x164>)
   18f10:	1ad2      	subs	r2, r2, r3
   18f12:	08d2      	lsrs	r2, r2, #3
   18f14:	0192      	lsls	r2, r2, #6
   18f16:	f042 0201 	orr.w	r2, r2, #1
   18f1a:	f008 fd26 	bl	2196a <log_1>
   18f1e:	e776      	b.n	18e0e <smp_public_key_periph+0x36>
	return 0;
   18f20:	2000      	movs	r0, #0
   18f22:	e7a5      	b.n	18e70 <smp_public_key_periph+0x98>
   18f24:	20002590 	.word	0x20002590
   18f28:	00025294 	.word	0x00025294
   18f2c:	00025224 	.word	0x00025224
   18f30:	000277c3 	.word	0x000277c3
   18f34:	000f4240 	.word	0x000f4240
   18f38:	20002488 	.word	0x20002488
   18f3c:	0002774b 	.word	0x0002774b

00018f40 <smp_public_key>:
{
   18f40:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
   18f42:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   18f44:	f100 0557 	add.w	r5, r0, #87	; 0x57
{
   18f48:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   18f4a:	2220      	movs	r2, #32
   18f4c:	4631      	mov	r1, r6
   18f4e:	4628      	mov	r0, r5
   18f50:	f008 ffff 	bl	21f52 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   18f54:	2220      	movs	r2, #32
   18f56:	18b1      	adds	r1, r6, r2
   18f58:	f104 0077 	add.w	r0, r4, #119	; 0x77
   18f5c:	f008 fff9 	bl	21f52 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   18f60:	4628      	mov	r0, r5
   18f62:	f7fc f9fb 	bl	1535c <bt_pub_key_is_debug>
   18f66:	b940      	cbnz	r0, 18f7a <smp_public_key+0x3a>
	if (!sc_public_key) {
   18f68:	4b1a      	ldr	r3, [pc, #104]	; (18fd4 <smp_public_key+0x94>)
   18f6a:	681d      	ldr	r5, [r3, #0]
   18f6c:	bb6d      	cbnz	r5, 18fca <smp_public_key+0x8a>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   18f6e:	1d20      	adds	r0, r4, #4
   18f70:	2106      	movs	r1, #6
   18f72:	f00a fbb7 	bl	236e4 <atomic_set_bit>
		return 0;
   18f76:	4628      	mov	r0, r5
   18f78:	e026      	b.n	18fc8 <smp_public_key+0x88>
   18f7a:	4b17      	ldr	r3, [pc, #92]	; (18fd8 <smp_public_key+0x98>)
   18f7c:	4917      	ldr	r1, [pc, #92]	; (18fdc <smp_public_key+0x9c>)
		BT_INFO("Remote is using Debug Public key");
   18f7e:	4818      	ldr	r0, [pc, #96]	; (18fe0 <smp_public_key+0xa0>)
   18f80:	1ac9      	subs	r1, r1, r3
   18f82:	08c9      	lsrs	r1, r1, #3
   18f84:	0189      	lsls	r1, r1, #6
   18f86:	f041 0103 	orr.w	r1, r1, #3
   18f8a:	f008 fce1 	bl	21950 <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   18f8e:	210e      	movs	r1, #14
   18f90:	1d20      	adds	r0, r4, #4
   18f92:	f00a fba7 	bl	236e4 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   18f96:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
   18f9a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   18f9e:	b933      	cbnz	r3, 18fae <smp_public_key+0x6e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   18fa0:	7a28      	ldrb	r0, [r5, #8]
   18fa2:	f105 0188 	add.w	r1, r5, #136	; 0x88
   18fa6:	f7ff fa9b 	bl	184e0 <bt_keys_get_addr>
   18faa:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   18fae:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   18fb2:	2b00      	cmp	r3, #0
   18fb4:	d0d8      	beq.n	18f68 <smp_public_key+0x28>
   18fb6:	89da      	ldrh	r2, [r3, #14]
   18fb8:	f002 0224 	and.w	r2, r2, #36	; 0x24
   18fbc:	2a00      	cmp	r2, #0
   18fbe:	d0d3      	beq.n	18f68 <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   18fc0:	7b5b      	ldrb	r3, [r3, #13]
   18fc2:	079b      	lsls	r3, r3, #30
   18fc4:	d4d0      	bmi.n	18f68 <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   18fc6:	2003      	movs	r0, #3
}
   18fc8:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_periph(smp);
   18fca:	4620      	mov	r0, r4
}
   18fcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_periph(smp);
   18fd0:	f7ff bf02 	b.w	18dd8 <smp_public_key_periph>
   18fd4:	20002590 	.word	0x20002590
   18fd8:	00025224 	.word	0x00025224
   18fdc:	00025294 	.word	0x00025294
   18fe0:	000277de 	.word	0x000277de

00018fe4 <smp_pairing_req>:
{
   18fe4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
   18fe8:	688d      	ldr	r5, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   18fea:	78eb      	ldrb	r3, [r5, #3]
   18fec:	3b07      	subs	r3, #7
   18fee:	2b09      	cmp	r3, #9
{
   18ff0:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   18ff2:	d904      	bls.n	18ffe <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   18ff4:	2506      	movs	r5, #6
}
   18ff6:	4628      	mov	r0, r5
   18ff8:	b002      	add	sp, #8
   18ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
   18ffe:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
   19002:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   19006:	b15b      	cbz	r3, 19020 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   19008:	1d26      	adds	r6, r4, #4
   1900a:	210f      	movs	r1, #15
   1900c:	4630      	mov	r0, r6
   1900e:	f00a fc48 	bl	238a2 <atomic_test_bit>
   19012:	b980      	cbnz	r0, 19036 <smp_pairing_req+0x52>
		int ret = smp_init(smp);
   19014:	4620      	mov	r0, r4
   19016:	f7ff fd49 	bl	18aac <smp_init>
		if (ret) {
   1901a:	b160      	cbz	r0, 19036 <smp_pairing_req+0x52>
			return ret;
   1901c:	b2c5      	uxtb	r5, r0
   1901e:	e7ea      	b.n	18ff6 <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   19020:	7a38      	ldrb	r0, [r7, #8]
   19022:	f107 0188 	add.w	r1, r7, #136	; 0x88
   19026:	f7ff fa5b 	bl	184e0 <bt_keys_get_addr>
   1902a:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if (!conn->le.keys) {
   1902e:	2800      	cmp	r0, #0
   19030:	d1ea      	bne.n	19008 <smp_pairing_req+0x24>
	switch (sec) {
   19032:	2508      	movs	r5, #8
   19034:	e7df      	b.n	18ff6 <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   19036:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
   19038:	2206      	movs	r2, #6
   1903a:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1903c:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1903e:	f104 000a 	add.w	r0, r4, #10
   19042:	f008 ff86 	bl	21f52 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   19046:	2302      	movs	r3, #2
   19048:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
   1904a:	78a8      	ldrb	r0, [r5, #2]
   1904c:	f7ff fcd0 	bl	189f0 <get_auth.isra.0>
   19050:	74e0      	strb	r0, [r4, #19]
   19052:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
   19054:	f7ff fc80 	bl	18958 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   19058:	4ba4      	ldr	r3, [pc, #656]	; (192ec <smp_pairing_req+0x308>)
	rsp->io_capability = get_io_capa();
   1905a:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1905c:	781b      	ldrb	r3, [r3, #0]
   1905e:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   19060:	2310      	movs	r3, #16
   19062:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   19064:	792b      	ldrb	r3, [r5, #4]
   19066:	f003 0303 	and.w	r3, r3, #3
   1906a:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   1906c:	796b      	ldrb	r3, [r5, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1906e:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   19072:	f003 0301 	and.w	r3, r3, #1
   19076:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   19078:	d00c      	beq.n	19094 <smp_pairing_req+0xb0>
   1907a:	78ab      	ldrb	r3, [r5, #2]
   1907c:	0719      	lsls	r1, r3, #28
   1907e:	d509      	bpl.n	19094 <smp_pairing_req+0xb0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   19080:	2105      	movs	r1, #5
   19082:	4630      	mov	r0, r6
   19084:	f00a fb2e 	bl	236e4 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
   19088:	7d63      	ldrb	r3, [r4, #21]
   1908a:	f003 0302 	and.w	r3, r3, #2
   1908e:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   19090:	2300      	movs	r3, #0
   19092:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   19094:	7ce3      	ldrb	r3, [r4, #19]
   19096:	069a      	lsls	r2, r3, #26
   19098:	d506      	bpl.n	190a8 <smp_pairing_req+0xc4>
   1909a:	78ab      	ldrb	r3, [r5, #2]
   1909c:	069b      	lsls	r3, r3, #26
   1909e:	d503      	bpl.n	190a8 <smp_pairing_req+0xc4>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   190a0:	2114      	movs	r1, #20
   190a2:	4630      	mov	r0, r6
   190a4:	f00a fb1e 	bl	236e4 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
   190a8:	7da3      	ldrb	r3, [r4, #22]
   190aa:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   190ae:	7d63      	ldrb	r3, [r4, #21]
   190b0:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   190b4:	7ce3      	ldrb	r3, [r4, #19]
   190b6:	07d8      	lsls	r0, r3, #31
   190b8:	d506      	bpl.n	190c8 <smp_pairing_req+0xe4>
   190ba:	78ab      	ldrb	r3, [r5, #2]
   190bc:	07d9      	lsls	r1, r3, #31
   190be:	d503      	bpl.n	190c8 <smp_pairing_req+0xe4>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   190c0:	210d      	movs	r1, #13
   190c2:	4630      	mov	r0, r6
   190c4:	f00a fb0e 	bl	236e4 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   190c8:	2103      	movs	r1, #3
   190ca:	4630      	mov	r0, r6
   190cc:	f00a fb0a 	bl	236e4 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   190d0:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
   190d2:	782d      	ldrb	r5, [r5, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   190d4:	f00a fbe5 	bl	238a2 <atomic_test_bit>
   190d8:	bb28      	cbnz	r0, 19126 <smp_pairing_req+0x142>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   190da:	2d04      	cmp	r5, #4
   190dc:	d81a      	bhi.n	19114 <smp_pairing_req+0x130>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   190de:	7ca2      	ldrb	r2, [r4, #18]
   190e0:	7ae3      	ldrb	r3, [r4, #11]
   190e2:	4013      	ands	r3, r2
   190e4:	07da      	lsls	r2, r3, #31
   190e6:	d437      	bmi.n	19158 <smp_pairing_req+0x174>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   190e8:	7b20      	ldrb	r0, [r4, #12]
   190ea:	7ce3      	ldrb	r3, [r4, #19]
   190ec:	4318      	orrs	r0, r3
   190ee:	f010 0004 	ands.w	r0, r0, #4
   190f2:	d00f      	beq.n	19114 <smp_pairing_req+0x130>
	method = gen_method_legacy[remote_io][get_io_capa()];
   190f4:	f7ff fc30 	bl	18958 <get_io_capa>
   190f8:	4b7d      	ldr	r3, [pc, #500]	; (192f0 <smp_pairing_req+0x30c>)
   190fa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   190fe:	441d      	add	r5, r3
   19100:	5c28      	ldrb	r0, [r5, r0]
	if (method == PASSKEY_ROLE) {
   19102:	2804      	cmp	r0, #4
   19104:	d106      	bne.n	19114 <smp_pairing_req+0x130>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   19106:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1910a:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
   1910c:	2b00      	cmp	r3, #0
   1910e:	bf0c      	ite	eq
   19110:	2002      	moveq	r0, #2
   19112:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, req->io_capability);
   19114:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   19116:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
   1911a:	4620      	mov	r0, r4
   1911c:	f00a fbca 	bl	238b4 <update_keys_check>
   19120:	bb00      	cbnz	r0, 19164 <smp_pairing_req+0x180>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   19122:	2503      	movs	r5, #3
   19124:	e767      	b.n	18ff6 <smp_pairing_req+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   19126:	7b20      	ldrb	r0, [r4, #12]
   19128:	7ce2      	ldrb	r2, [r4, #19]
   1912a:	ea00 0302 	and.w	r3, r0, r2
   1912e:	071b      	lsls	r3, r3, #28
   19130:	d504      	bpl.n	1913c <smp_pairing_req+0x158>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   19132:	7ca1      	ldrb	r1, [r4, #18]
   19134:	7ae3      	ldrb	r3, [r4, #11]
   19136:	430b      	orrs	r3, r1
   19138:	07d9      	lsls	r1, r3, #31
   1913a:	d40f      	bmi.n	1915c <smp_pairing_req+0x178>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1913c:	2d04      	cmp	r5, #4
   1913e:	d80f      	bhi.n	19160 <smp_pairing_req+0x17c>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   19140:	4310      	orrs	r0, r2
   19142:	f010 0004 	ands.w	r0, r0, #4
   19146:	d0e5      	beq.n	19114 <smp_pairing_req+0x130>
	return gen_method_sc[remote_io][get_io_capa()];
   19148:	f7ff fc06 	bl	18958 <get_io_capa>
   1914c:	4b69      	ldr	r3, [pc, #420]	; (192f4 <smp_pairing_req+0x310>)
   1914e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   19152:	441d      	add	r5, r3
   19154:	5c28      	ldrb	r0, [r5, r0]
   19156:	e7dd      	b.n	19114 <smp_pairing_req+0x130>
		return LEGACY_OOB;
   19158:	2006      	movs	r0, #6
   1915a:	e7db      	b.n	19114 <smp_pairing_req+0x130>
			return LE_SC_OOB;
   1915c:	2005      	movs	r0, #5
   1915e:	e7d9      	b.n	19114 <smp_pairing_req+0x130>
		return JUST_WORKS;
   19160:	2000      	movs	r0, #0
   19162:	e7d7      	b.n	19114 <smp_pairing_req+0x130>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   19164:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   19168:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1916a:	2b03      	cmp	r3, #3
   1916c:	d034      	beq.n	191d8 <smp_pairing_req+0x1f4>
   1916e:	d822      	bhi.n	191b6 <smp_pairing_req+0x1d2>
   19170:	3b01      	subs	r3, #1
   19172:	2b01      	cmp	r3, #1
   19174:	f63f af5d 	bhi.w	19032 <smp_pairing_req+0x4e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19178:	2105      	movs	r1, #5
   1917a:	4630      	mov	r0, r6
   1917c:	f00a fb91 	bl	238a2 <atomic_test_bit>
   19180:	2800      	cmp	r0, #0
   19182:	f040 80c5 	bne.w	19310 <smp_pairing_req+0x32c>
	struct bt_conn *conn = smp->chan.chan.conn;
   19186:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1918a:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1918e:	7a28      	ldrb	r0, [r5, #8]
   19190:	f7ff fa2c 	bl	185ec <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   19194:	7a21      	ldrb	r1, [r4, #8]
   19196:	b318      	cbz	r0, 191e0 <smp_pairing_req+0x1fc>
   19198:	7b43      	ldrb	r3, [r0, #13]
   1919a:	07db      	lsls	r3, r3, #31
   1919c:	d520      	bpl.n	191e0 <smp_pairing_req+0x1fc>
   1919e:	b9f9      	cbnz	r1, 191e0 <smp_pairing_req+0x1fc>
   191a0:	4b55      	ldr	r3, [pc, #340]	; (192f8 <smp_pairing_req+0x314>)
   191a2:	4956      	ldr	r1, [pc, #344]	; (192fc <smp_pairing_req+0x318>)
		BT_ERR("JustWorks failed, authenticated keys present");
   191a4:	4856      	ldr	r0, [pc, #344]	; (19300 <smp_pairing_req+0x31c>)
   191a6:	1ac9      	subs	r1, r1, r3
   191a8:	08c9      	lsrs	r1, r1, #3
   191aa:	0189      	lsls	r1, r1, #6
   191ac:	f041 0101 	orr.w	r1, r1, #1
   191b0:	f008 fbce 	bl	21950 <log_0>
	if (ret) {
   191b4:	e73d      	b.n	19032 <smp_pairing_req+0x4e>
	switch (sec) {
   191b6:	2b04      	cmp	r3, #4
   191b8:	f47f af3b 	bne.w	19032 <smp_pairing_req+0x4e>
	return MIN(req->max_key_size, rsp->max_key_size);
   191bc:	7d23      	ldrb	r3, [r4, #20]
   191be:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   191c0:	4293      	cmp	r3, r2
   191c2:	bf28      	it	cs
   191c4:	4613      	movcs	r3, r2
   191c6:	2b10      	cmp	r3, #16
   191c8:	f47f af14 	bne.w	18ff4 <smp_pairing_req+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   191cc:	2105      	movs	r1, #5
   191ce:	4630      	mov	r0, r6
   191d0:	f00a fb67 	bl	238a2 <atomic_test_bit>
   191d4:	2800      	cmp	r0, #0
   191d6:	d0a4      	beq.n	19122 <smp_pairing_req+0x13e>
		if (smp->method == JUST_WORKS) {
   191d8:	7a23      	ldrb	r3, [r4, #8]
   191da:	2b00      	cmp	r3, #0
   191dc:	d1cc      	bne.n	19178 <smp_pairing_req+0x194>
   191de:	e7a0      	b.n	19122 <smp_pairing_req+0x13e>
	switch (smp->method) {
   191e0:	2906      	cmp	r1, #6
   191e2:	d869      	bhi.n	192b8 <smp_pairing_req+0x2d4>
   191e4:	e8df f001 	tbb	[pc, r1]
   191e8:	68335e1b 	.word	0x68335e1b
   191ec:	6868      	.short	0x6868
   191ee:	04          	.byte	0x04
   191ef:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
   191f0:	4d44      	ldr	r5, [pc, #272]	; (19304 <smp_pairing_req+0x320>)
   191f2:	682b      	ldr	r3, [r5, #0]
   191f4:	2b00      	cmp	r3, #0
   191f6:	d06a      	beq.n	192ce <smp_pairing_req+0x2ea>
   191f8:	68db      	ldr	r3, [r3, #12]
   191fa:	2b00      	cmp	r3, #0
   191fc:	d067      	beq.n	192ce <smp_pairing_req+0x2ea>
			struct bt_conn_oob_info info = {
   191fe:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19200:	210a      	movs	r1, #10
   19202:	4630      	mov	r0, r6
			struct bt_conn_oob_info info = {
   19204:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   19208:	f00a fa6c 	bl	236e4 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1920c:	682b      	ldr	r3, [r5, #0]
   1920e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   19212:	68db      	ldr	r3, [r3, #12]
   19214:	a901      	add	r1, sp, #4
   19216:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   19218:	7a23      	ldrb	r3, [r4, #8]
   1921a:	2b00      	cmp	r3, #0
   1921c:	d159      	bne.n	192d2 <smp_pairing_req+0x2ee>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1921e:	210f      	movs	r1, #15
   19220:	4630      	mov	r0, r6
   19222:	f00a fb3e 	bl	238a2 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   19226:	4605      	mov	r5, r0
   19228:	2800      	cmp	r0, #0
   1922a:	d152      	bne.n	192d2 <smp_pairing_req+0x2ee>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1922c:	4f35      	ldr	r7, [pc, #212]	; (19304 <smp_pairing_req+0x320>)
   1922e:	683b      	ldr	r3, [r7, #0]
   19230:	2b00      	cmp	r3, #0
   19232:	d04e      	beq.n	192d2 <smp_pairing_req+0x2ee>
	    bt_auth && bt_auth->pairing_confirm) {
   19234:	695b      	ldr	r3, [r3, #20]
   19236:	2b00      	cmp	r3, #0
   19238:	d04b      	beq.n	192d2 <smp_pairing_req+0x2ee>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1923a:	4630      	mov	r0, r6
   1923c:	210a      	movs	r1, #10
   1923e:	f00a fa51 	bl	236e4 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   19242:	683b      	ldr	r3, [r7, #0]
   19244:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   19248:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
   1924a:	4798      	blx	r3
		return 0;
   1924c:	e6d3      	b.n	18ff6 <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1924e:	2104      	movs	r1, #4
   19250:	eb0d 0001 	add.w	r0, sp, r1
   19254:	f001 ffe2 	bl	1b21c <bt_rand>
   19258:	2800      	cmp	r0, #0
   1925a:	f47f aeea 	bne.w	19032 <smp_pairing_req+0x4e>
			passkey %= 1000000;
   1925e:	9901      	ldr	r1, [sp, #4]
   19260:	4a29      	ldr	r2, [pc, #164]	; (19308 <smp_pairing_req+0x324>)
		if (bt_auth && bt_auth->passkey_display) {
   19262:	4f28      	ldr	r7, [pc, #160]	; (19304 <smp_pairing_req+0x320>)
			passkey %= 1000000;
   19264:	fbb1 f3f2 	udiv	r3, r1, r2
   19268:	fb02 1313 	mls	r3, r2, r3, r1
   1926c:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
   1926e:	683b      	ldr	r3, [r7, #0]
   19270:	b153      	cbz	r3, 19288 <smp_pairing_req+0x2a4>
   19272:	681b      	ldr	r3, [r3, #0]
   19274:	b143      	cbz	r3, 19288 <smp_pairing_req+0x2a4>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   19276:	210b      	movs	r1, #11
   19278:	4630      	mov	r0, r6
   1927a:	f00a fa33 	bl	236e4 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
   1927e:	683b      	ldr	r3, [r7, #0]
   19280:	9901      	ldr	r1, [sp, #4]
   19282:	681b      	ldr	r3, [r3, #0]
   19284:	4628      	mov	r0, r5
   19286:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   19288:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   1928a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1928e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   19292:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   19294:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   19298:	0a1b      	lsrs	r3, r3, #8
   1929a:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1929e:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   192a2:	e7b9      	b.n	19218 <smp_pairing_req+0x234>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   192a4:	4630      	mov	r0, r6
   192a6:	210a      	movs	r1, #10
   192a8:	f00a fa1c 	bl	236e4 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
   192ac:	4b15      	ldr	r3, [pc, #84]	; (19304 <smp_pairing_req+0x320>)
   192ae:	681b      	ldr	r3, [r3, #0]
   192b0:	4628      	mov	r0, r5
   192b2:	685b      	ldr	r3, [r3, #4]
   192b4:	4798      	blx	r3
	if (ret) {
   192b6:	e7af      	b.n	19218 <smp_pairing_req+0x234>
   192b8:	4b0f      	ldr	r3, [pc, #60]	; (192f8 <smp_pairing_req+0x314>)
   192ba:	4a10      	ldr	r2, [pc, #64]	; (192fc <smp_pairing_req+0x318>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   192bc:	4813      	ldr	r0, [pc, #76]	; (1930c <smp_pairing_req+0x328>)
   192be:	1ad2      	subs	r2, r2, r3
   192c0:	08d2      	lsrs	r2, r2, #3
   192c2:	0192      	lsls	r2, r2, #6
   192c4:	f042 0201 	orr.w	r2, r2, #1
   192c8:	f008 fb4f 	bl	2196a <log_1>
	if (ret) {
   192cc:	e6b1      	b.n	19032 <smp_pairing_req+0x4e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   192ce:	2502      	movs	r5, #2
   192d0:	e691      	b.n	18ff6 <smp_pairing_req+0x12>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   192d2:	2103      	movs	r1, #3
   192d4:	4620      	mov	r0, r4
   192d6:	f00a fa05 	bl	236e4 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   192da:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   192dc:	4620      	mov	r0, r4
   192de:	f00a fa01 	bl	236e4 <atomic_set_bit>
	return send_pairing_rsp(smp);
   192e2:	f00a fb40 	bl	23966 <send_pairing_rsp>
   192e6:	4605      	mov	r5, r0
   192e8:	e685      	b.n	18ff6 <smp_pairing_req+0x12>
   192ea:	bf00      	nop
   192ec:	200031a2 	.word	0x200031a2
   192f0:	00027a02 	.word	0x00027a02
   192f4:	00027a1b 	.word	0x00027a1b
   192f8:	00025224 	.word	0x00025224
   192fc:	00025294 	.word	0x00025294
   19300:	000277ff 	.word	0x000277ff
   19304:	20002488 	.word	0x20002488
   19308:	000f4240 	.word	0x000f4240
   1930c:	0002774b 	.word	0x0002774b
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   19310:	7a25      	ldrb	r5, [r4, #8]
   19312:	b9a5      	cbnz	r5, 1933e <smp_pairing_req+0x35a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   19314:	210f      	movs	r1, #15
   19316:	4630      	mov	r0, r6
   19318:	f00a fac3 	bl	238a2 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1931c:	b978      	cbnz	r0, 1933e <smp_pairing_req+0x35a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1931e:	f8df 8024 	ldr.w	r8, [pc, #36]	; 19344 <smp_pairing_req+0x360>
   19322:	f8d8 3000 	ldr.w	r3, [r8]
   19326:	b153      	cbz	r3, 1933e <smp_pairing_req+0x35a>
	    bt_auth && bt_auth->pairing_confirm) {
   19328:	695b      	ldr	r3, [r3, #20]
   1932a:	b143      	cbz	r3, 1933e <smp_pairing_req+0x35a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1932c:	4630      	mov	r0, r6
   1932e:	210a      	movs	r1, #10
   19330:	f00a f9d8 	bl	236e4 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   19334:	f8d8 3000 	ldr.w	r3, [r8]
   19338:	4638      	mov	r0, r7
   1933a:	695b      	ldr	r3, [r3, #20]
   1933c:	e785      	b.n	1924a <smp_pairing_req+0x266>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1933e:	210c      	movs	r1, #12
   19340:	e7cc      	b.n	192dc <smp_pairing_req+0x2f8>
   19342:	bf00      	nop
   19344:	20002488 	.word	0x20002488

00019348 <smp_ident_info>:
{
   19348:	b570      	push	{r4, r5, r6, lr}
   1934a:	460b      	mov	r3, r1
   1934c:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1934e:	210d      	movs	r1, #13
   19350:	3004      	adds	r0, #4
   19352:	f00a faa6 	bl	238a2 <atomic_test_bit>
   19356:	b310      	cbz	r0, 1939e <smp_ident_info+0x56>
		struct bt_smp_ident_info *req = (void *)buf->data;
   19358:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1935a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1935e:	f103 0588 	add.w	r5, r3, #136	; 0x88
   19362:	7a19      	ldrb	r1, [r3, #8]
   19364:	462a      	mov	r2, r5
   19366:	2002      	movs	r0, #2
   19368:	f00a f8e6 	bl	23538 <bt_keys_get_type>
		if (!keys) {
   1936c:	b990      	cbnz	r0, 19394 <smp_ident_info+0x4c>
   1936e:	4a0f      	ldr	r2, [pc, #60]	; (193ac <smp_ident_info+0x64>)
   19370:	4c0f      	ldr	r4, [pc, #60]	; (193b0 <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
   19372:	4628      	mov	r0, r5
   19374:	1aa4      	subs	r4, r4, r2
   19376:	f7f9 fe91 	bl	1309c <bt_addr_le_str_real>
   1937a:	f7f8 fbd7 	bl	11b2c <z_log_strdup>
   1937e:	08e4      	lsrs	r4, r4, #3
   19380:	01a4      	lsls	r4, r4, #6
   19382:	f044 0401 	orr.w	r4, r4, #1
   19386:	4601      	mov	r1, r0
   19388:	4622      	mov	r2, r4
   1938a:	480a      	ldr	r0, [pc, #40]	; (193b4 <smp_ident_info+0x6c>)
   1938c:	f008 faed 	bl	2196a <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   19390:	2008      	movs	r0, #8
}
   19392:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
   19394:	2210      	movs	r2, #16
   19396:	4631      	mov	r1, r6
   19398:	302a      	adds	r0, #42	; 0x2a
   1939a:	f008 fdda 	bl	21f52 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1939e:	4620      	mov	r0, r4
   193a0:	2109      	movs	r1, #9
   193a2:	f00a f99f 	bl	236e4 <atomic_set_bit>
	return 0;
   193a6:	2000      	movs	r0, #0
   193a8:	e7f3      	b.n	19392 <smp_ident_info+0x4a>
   193aa:	bf00      	nop
   193ac:	00025224 	.word	0x00025224
   193b0:	00025294 	.word	0x00025294
   193b4:	0002782c 	.word	0x0002782c

000193b8 <smp_encrypt_info>:
{
   193b8:	b570      	push	{r4, r5, r6, lr}
   193ba:	460b      	mov	r3, r1
   193bc:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   193be:	210d      	movs	r1, #13
   193c0:	3004      	adds	r0, #4
   193c2:	f00a fa6e 	bl	238a2 <atomic_test_bit>
   193c6:	b310      	cbz	r0, 1940e <smp_encrypt_info+0x56>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   193c8:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   193ca:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   193ce:	f103 0588 	add.w	r5, r3, #136	; 0x88
   193d2:	7a19      	ldrb	r1, [r3, #8]
   193d4:	462a      	mov	r2, r5
   193d6:	2004      	movs	r0, #4
   193d8:	f00a f8ae 	bl	23538 <bt_keys_get_type>
		if (!keys) {
   193dc:	b990      	cbnz	r0, 19404 <smp_encrypt_info+0x4c>
   193de:	4a0f      	ldr	r2, [pc, #60]	; (1941c <smp_encrypt_info+0x64>)
   193e0:	4c0f      	ldr	r4, [pc, #60]	; (19420 <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
   193e2:	4628      	mov	r0, r5
   193e4:	1aa4      	subs	r4, r4, r2
   193e6:	f7f9 fe59 	bl	1309c <bt_addr_le_str_real>
   193ea:	f7f8 fb9f 	bl	11b2c <z_log_strdup>
   193ee:	08e4      	lsrs	r4, r4, #3
   193f0:	01a4      	lsls	r4, r4, #6
   193f2:	f044 0401 	orr.w	r4, r4, #1
   193f6:	4601      	mov	r1, r0
   193f8:	4622      	mov	r2, r4
   193fa:	480a      	ldr	r0, [pc, #40]	; (19424 <smp_encrypt_info+0x6c>)
   193fc:	f008 fab5 	bl	2196a <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   19400:	2008      	movs	r0, #8
}
   19402:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   19404:	2210      	movs	r2, #16
   19406:	4631      	mov	r1, r6
   19408:	301a      	adds	r0, #26
   1940a:	f008 fda2 	bl	21f52 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1940e:	4620      	mov	r0, r4
   19410:	2107      	movs	r1, #7
   19412:	f00a f967 	bl	236e4 <atomic_set_bit>
	return 0;
   19416:	2000      	movs	r0, #0
   19418:	e7f3      	b.n	19402 <smp_encrypt_info+0x4a>
   1941a:	bf00      	nop
   1941c:	00025224 	.word	0x00025224
   19420:	00025294 	.word	0x00025294
   19424:	0002782c 	.word	0x0002782c

00019428 <bt_smp_connected>:
{
   19428:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1942a:	4905      	ldr	r1, [pc, #20]	; (19440 <bt_smp_connected+0x18>)
   1942c:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
   19430:	30e8      	adds	r0, #232	; 0xe8
   19432:	f00b fd0f 	bl	24e54 <k_work_init_delayable>
	smp_reset(smp);
   19436:	4620      	mov	r0, r4
}
   19438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
   1943c:	f00a baed 	b.w	23a1a <smp_reset>
   19440:	00019f91 	.word	0x00019f91

00019444 <smp_pairing_confirm>:
{
   19444:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   19446:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   19448:	1d05      	adds	r5, r0, #4
{
   1944a:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1944c:	210b      	movs	r1, #11
   1944e:	4628      	mov	r0, r5
   19450:	f00a f95c 	bl	2370c <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   19454:	4631      	mov	r1, r6
   19456:	2210      	movs	r2, #16
   19458:	f104 0017 	add.w	r0, r4, #23
   1945c:	f008 fd79 	bl	21f52 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19460:	2105      	movs	r1, #5
   19462:	4628      	mov	r0, r5
   19464:	f00a fa1d 	bl	238a2 <atomic_test_bit>
   19468:	b920      	cbnz	r0, 19474 <smp_pairing_confirm+0x30>
		return legacy_pairing_confirm(smp);
   1946a:	4620      	mov	r0, r4
}
   1946c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   19470:	f00a bb51 	b.w	23b16 <legacy_pairing_confirm>
	switch (smp->method) {
   19474:	7a21      	ldrb	r1, [r4, #8]
   19476:	2901      	cmp	r1, #1
   19478:	d009      	beq.n	1948e <smp_pairing_confirm+0x4a>
   1947a:	2902      	cmp	r1, #2
   1947c:	d113      	bne.n	194a6 <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1947e:	4620      	mov	r0, r4
   19480:	2104      	movs	r1, #4
   19482:	f00a f92f 	bl	236e4 <atomic_set_bit>
}
   19486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   1948a:	f7ff bc55 	b.w	18d38 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1948e:	210a      	movs	r1, #10
   19490:	4628      	mov	r0, r5
   19492:	f00a fa06 	bl	238a2 <atomic_test_bit>
   19496:	2800      	cmp	r0, #0
   19498:	d0f1      	beq.n	1947e <smp_pairing_confirm+0x3a>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1949a:	4628      	mov	r0, r5
   1949c:	2100      	movs	r1, #0
   1949e:	f00a f921 	bl	236e4 <atomic_set_bit>
			return 0;
   194a2:	2000      	movs	r0, #0
}
   194a4:	bd70      	pop	{r4, r5, r6, pc}
   194a6:	4b06      	ldr	r3, [pc, #24]	; (194c0 <smp_pairing_confirm+0x7c>)
   194a8:	4a06      	ldr	r2, [pc, #24]	; (194c4 <smp_pairing_confirm+0x80>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   194aa:	4807      	ldr	r0, [pc, #28]	; (194c8 <smp_pairing_confirm+0x84>)
   194ac:	1ad2      	subs	r2, r2, r3
   194ae:	08d2      	lsrs	r2, r2, #3
   194b0:	0192      	lsls	r2, r2, #6
   194b2:	f042 0201 	orr.w	r2, r2, #1
   194b6:	f008 fa58 	bl	2196a <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   194ba:	2008      	movs	r0, #8
   194bc:	e7f2      	b.n	194a4 <smp_pairing_confirm+0x60>
   194be:	bf00      	nop
   194c0:	00025224 	.word	0x00025224
   194c4:	00025294 	.word	0x00025294
   194c8:	0002774b 	.word	0x0002774b

000194cc <smp_pairing_random>:
{
   194cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   194d0:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   194d2:	f100 0737 	add.w	r7, r0, #55	; 0x37
   194d6:	6889      	ldr	r1, [r1, #8]
{
   194d8:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   194da:	2210      	movs	r2, #16
   194dc:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   194de:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   194e0:	f008 fd37 	bl	21f52 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   194e4:	2105      	movs	r1, #5
   194e6:	4630      	mov	r0, r6
   194e8:	f00a f9db 	bl	238a2 <atomic_test_bit>
   194ec:	2800      	cmp	r0, #0
   194ee:	d147      	bne.n	19580 <smp_pairing_random+0xb4>
	struct bt_conn *conn = smp->chan.chan.conn;
   194f0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   194f4:	f104 0847 	add.w	r8, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   194f8:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   194fc:	ad0a      	add	r5, sp, #40	; 0x28
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   194fe:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   19500:	9201      	str	r2, [sp, #4]
   19502:	9300      	str	r3, [sp, #0]
   19504:	9502      	str	r5, [sp, #8]
   19506:	f104 0310 	add.w	r3, r4, #16
   1950a:	f104 0209 	add.w	r2, r4, #9
   1950e:	4639      	mov	r1, r7
   19510:	4640      	mov	r0, r8
   19512:	f00a faa5 	bl	23a60 <smp_c1>
	if (err) {
   19516:	bb18      	cbnz	r0, 19560 <smp_pairing_random+0x94>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   19518:	2210      	movs	r2, #16
   1951a:	4629      	mov	r1, r5
   1951c:	f104 0017 	add.w	r0, r4, #23
   19520:	f008 fcf0 	bl	21f04 <memcmp>
   19524:	2800      	cmp	r0, #0
   19526:	f040 8095 	bne.w	19654 <smp_pairing_random+0x188>
	memcpy(out, r2, 8);
   1952a:	2208      	movs	r2, #8
   1952c:	4639      	mov	r1, r7
   1952e:	4628      	mov	r0, r5
   19530:	f008 fd0f 	bl	21f52 <memcpy>
	memcpy(out + 8, r1, 8);
   19534:	2208      	movs	r2, #8
   19536:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1953a:	a80c      	add	r0, sp, #48	; 0x30
   1953c:	f008 fd09 	bl	21f52 <memcpy>
	return bt_encrypt_le(k, out, out);
   19540:	462a      	mov	r2, r5
   19542:	4629      	mov	r1, r5
   19544:	4640      	mov	r0, r8
   19546:	f00a fecb 	bl	242e0 <bt_encrypt_le>
		if (err) {
   1954a:	b158      	cbz	r0, 19564 <smp_pairing_random+0x98>
   1954c:	4973      	ldr	r1, [pc, #460]	; (1971c <smp_pairing_random+0x250>)
   1954e:	4b74      	ldr	r3, [pc, #464]	; (19720 <smp_pairing_random+0x254>)
			BT_ERR("Calculate STK failed");
   19550:	4874      	ldr	r0, [pc, #464]	; (19724 <smp_pairing_random+0x258>)
   19552:	1ac9      	subs	r1, r1, r3
   19554:	08c9      	lsrs	r1, r1, #3
   19556:	0189      	lsls	r1, r1, #6
   19558:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate confirm failed");
   1955c:	f008 f9f8 	bl	21950 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
   19560:	2508      	movs	r5, #8
   19562:	e078      	b.n	19656 <smp_pairing_random+0x18a>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   19564:	4629      	mov	r1, r5
   19566:	2210      	movs	r2, #16
   19568:	4640      	mov	r0, r8
   1956a:	f008 fcf2 	bl	21f52 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1956e:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   19570:	4630      	mov	r0, r6
   19572:	f00a f8b7 	bl	236e4 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   19576:	4620      	mov	r0, r4
   19578:	f00a f9dc 	bl	23934 <smp_send_pairing_random>
   1957c:	4605      	mov	r5, r0
   1957e:	e06a      	b.n	19656 <smp_pairing_random+0x18a>
	switch (smp->method) {
   19580:	7a21      	ldrb	r1, [r4, #8]
   19582:	2905      	cmp	r1, #5
   19584:	f200 80a9 	bhi.w	196da <smp_pairing_random+0x20e>
   19588:	e8df f001 	tbb	[pc, r1]
   1958c:	0341413b 	.word	0x0341413b
   19590:	8ba7      	.short	0x8ba7
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   19592:	4b65      	ldr	r3, [pc, #404]	; (19728 <smp_pairing_random+0x25c>)
   19594:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
   19596:	2220      	movs	r2, #32
   19598:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1959c:	a80a      	add	r0, sp, #40	; 0x28
   1959e:	f00a f895 	bl	236cc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   195a2:	2220      	movs	r2, #32
   195a4:	4629      	mov	r1, r5
   195a6:	a812      	add	r0, sp, #72	; 0x48
   195a8:	f00a f890 	bl	236cc <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   195ac:	2210      	movs	r2, #16
   195ae:	f104 0127 	add.w	r1, r4, #39	; 0x27
   195b2:	a81a      	add	r0, sp, #104	; 0x68
   195b4:	f00a f88a 	bl	236cc <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   195b8:	2210      	movs	r2, #16
   195ba:	4639      	mov	r1, r7
   195bc:	a806      	add	r0, sp, #24
   195be:	f00a f885 	bl	236cc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
   195c2:	ab06      	add	r3, sp, #24
   195c4:	2250      	movs	r2, #80	; 0x50
   195c6:	a90a      	add	r1, sp, #40	; 0x28
   195c8:	4618      	mov	r0, r3
   195ca:	f00a f8ae 	bl	2372a <bt_smp_aes_cmac>
	if (err) {
   195ce:	2800      	cmp	r0, #0
   195d0:	d1c6      	bne.n	19560 <smp_pairing_random+0x94>
	memcpy(passkey, xs + 12, 4);
   195d2:	2204      	movs	r2, #4
   195d4:	a909      	add	r1, sp, #36	; 0x24
   195d6:	a805      	add	r0, sp, #20
   195d8:	f008 fcbb 	bl	21f52 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   195dc:	9b05      	ldr	r3, [sp, #20]
   195de:	4953      	ldr	r1, [pc, #332]	; (1972c <smp_pairing_random+0x260>)
   195e0:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   195e2:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   195e4:	fbb3 f2f1 	udiv	r2, r3, r1
   195e8:	fb01 3312 	mls	r3, r1, r2, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   195ec:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   195ee:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   195f0:	f00a f878 	bl	236e4 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   195f4:	4b4e      	ldr	r3, [pc, #312]	; (19730 <smp_pairing_random+0x264>)
   195f6:	9905      	ldr	r1, [sp, #20]
   195f8:	681b      	ldr	r3, [r3, #0]
   195fa:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   195fe:	689b      	ldr	r3, [r3, #8]
   19600:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   19602:	210d      	movs	r1, #13
   19604:	4620      	mov	r0, r4
   19606:	f00a f86d 	bl	236e4 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1960a:	2110      	movs	r1, #16
   1960c:	e7b0      	b.n	19570 <smp_pairing_random+0xa4>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1960e:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   19612:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   19616:	4944      	ldr	r1, [pc, #272]	; (19728 <smp_pairing_random+0x25c>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   19618:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1961a:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1961c:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   19620:	9500      	str	r5, [sp, #0]
   19622:	6809      	ldr	r1, [r1, #0]
   19624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19628:	463a      	mov	r2, r7
   1962a:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1962e:	f00a f911 	bl	23854 <smp_f4>
   19632:	b140      	cbz	r0, 19646 <smp_pairing_random+0x17a>
   19634:	4939      	ldr	r1, [pc, #228]	; (1971c <smp_pairing_random+0x250>)
   19636:	4b3a      	ldr	r3, [pc, #232]	; (19720 <smp_pairing_random+0x254>)
		BT_ERR("Calculate confirm failed");
   19638:	483e      	ldr	r0, [pc, #248]	; (19734 <smp_pairing_random+0x268>)
   1963a:	1ac9      	subs	r1, r1, r3
   1963c:	08c9      	lsrs	r1, r1, #3
   1963e:	0189      	lsls	r1, r1, #6
   19640:	f041 0101 	orr.w	r1, r1, #1
   19644:	e78a      	b.n	1955c <smp_pairing_random+0x90>
	if (memcmp(smp->pcnf, cfm, 16)) {
   19646:	2210      	movs	r2, #16
   19648:	4629      	mov	r1, r5
   1964a:	f104 0017 	add.w	r0, r4, #23
   1964e:	f008 fc59 	bl	21f04 <memcmp>
   19652:	b120      	cbz	r0, 1965e <smp_pairing_random+0x192>
		return BT_SMP_ERR_CONFIRM_FAILED;
   19654:	2504      	movs	r5, #4
}
   19656:	4628      	mov	r0, r5
   19658:	b01e      	add	sp, #120	; 0x78
   1965a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->allowed_cmds,
   1965e:	2103      	movs	r1, #3
   19660:	4620      	mov	r0, r4
   19662:	f00a f83f 	bl	236e4 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   19666:	f00a f965 	bl	23934 <smp_send_pairing_random>
		if (err) {
   1966a:	4605      	mov	r5, r0
   1966c:	2800      	cmp	r0, #0
   1966e:	d1f2      	bne.n	19656 <smp_pairing_random+0x18a>
		smp->passkey_round++;
   19670:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   19674:	3301      	adds	r3, #1
   19676:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   19678:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   1967a:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   1967e:	d108      	bne.n	19692 <smp_pairing_random+0x1c6>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   19680:	4620      	mov	r0, r4
   19682:	210d      	movs	r1, #13
   19684:	f00a f82e 	bl	236e4 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   19688:	2110      	movs	r1, #16
   1968a:	4630      	mov	r0, r6
   1968c:	f00a f82a 	bl	236e4 <atomic_set_bit>
			return 0;
   19690:	e7e1      	b.n	19656 <smp_pairing_random+0x18a>
		if (bt_rand(smp->prnd, 16)) {
   19692:	2110      	movs	r1, #16
   19694:	f104 0027 	add.w	r0, r4, #39	; 0x27
   19698:	f001 fdc0 	bl	1b21c <bt_rand>
   1969c:	2800      	cmp	r0, #0
   1969e:	d0da      	beq.n	19656 <smp_pairing_random+0x18a>
   196a0:	e75e      	b.n	19560 <smp_pairing_random+0x94>
		if (bt_rand(smp->prnd, 16)) {
   196a2:	2110      	movs	r1, #16
   196a4:	f104 0027 	add.w	r0, r4, #39	; 0x27
   196a8:	f001 fdb8 	bl	1b21c <bt_rand>
   196ac:	2800      	cmp	r0, #0
   196ae:	f47f af57 	bne.w	19560 <smp_pairing_random+0x94>
		if (bt_auth && bt_auth->oob_data_request) {
   196b2:	4f1f      	ldr	r7, [pc, #124]	; (19730 <smp_pairing_random+0x264>)
   196b4:	683b      	ldr	r3, [r7, #0]
   196b6:	b1db      	cbz	r3, 196f0 <smp_pairing_random+0x224>
   196b8:	68db      	ldr	r3, [r3, #12]
   196ba:	b1cb      	cbz	r3, 196f0 <smp_pairing_random+0x224>
			struct bt_conn_oob_info info = {
   196bc:	4b1e      	ldr	r3, [pc, #120]	; (19738 <smp_pairing_random+0x26c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   196be:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
   196c0:	881b      	ldrh	r3, [r3, #0]
   196c2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   196c6:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   196c8:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   196ca:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   196ce:	d411      	bmi.n	196f4 <smp_pairing_random+0x228>
				     BT_CONN_OOB_BOTH_PEERS :
   196d0:	2b00      	cmp	r3, #0
   196d2:	bf0c      	ite	eq
   196d4:	2003      	moveq	r0, #3
   196d6:	2001      	movne	r0, #1
   196d8:	e00f      	b.n	196fa <smp_pairing_random+0x22e>
   196da:	4b11      	ldr	r3, [pc, #68]	; (19720 <smp_pairing_random+0x254>)
   196dc:	4a0f      	ldr	r2, [pc, #60]	; (1971c <smp_pairing_random+0x250>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
   196de:	4817      	ldr	r0, [pc, #92]	; (1973c <smp_pairing_random+0x270>)
   196e0:	1ad2      	subs	r2, r2, r3
   196e2:	08d2      	lsrs	r2, r2, #3
   196e4:	0192      	lsls	r2, r2, #6
   196e6:	f042 0201 	orr.w	r2, r2, #1
   196ea:	f008 f93e 	bl	2196a <log_1>
   196ee:	e737      	b.n	19560 <smp_pairing_random+0x94>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   196f0:	2502      	movs	r5, #2
   196f2:	e7b0      	b.n	19656 <smp_pairing_random+0x18a>
				     BT_CONN_OOB_BOTH_PEERS :
   196f4:	2b00      	cmp	r3, #0
   196f6:	bf18      	it	ne
   196f8:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
   196fa:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
   196fc:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
   19700:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   19704:	4630      	mov	r0, r6
   19706:	210c      	movs	r1, #12
   19708:	f009 ffec 	bl	236e4 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   1970c:	683b      	ldr	r3, [r7, #0]
   1970e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   19712:	68db      	ldr	r3, [r3, #12]
   19714:	a90a      	add	r1, sp, #40	; 0x28
   19716:	4798      	blx	r3
			return 0;
   19718:	e79d      	b.n	19656 <smp_pairing_random+0x18a>
   1971a:	bf00      	nop
   1971c:	00025294 	.word	0x00025294
   19720:	00025224 	.word	0x00025224
   19724:	00027846 	.word	0x00027846
   19728:	20002590 	.word	0x20002590
   1972c:	000f4240 	.word	0x000f4240
   19730:	20002488 	.word	0x20002488
   19734:	0002785b 	.word	0x0002785b
   19738:	000253fc 	.word	0x000253fc
   1973c:	0002774b 	.word	0x0002774b

00019740 <bt_smp_start_security>:
{
   19740:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   19744:	78c4      	ldrb	r4, [r0, #3]
   19746:	2c01      	cmp	r4, #1
{
   19748:	4605      	mov	r5, r0
	switch (conn->role) {
   1974a:	d005      	beq.n	19758 <bt_smp_start_security+0x18>
		return -EINVAL;
   1974c:	f06f 0415 	mvn.w	r4, #21
}
   19750:	4620      	mov	r0, r4
   19752:	b003      	add	sp, #12
   19754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
   19758:	f7ff f968 	bl	18a2c <smp_chan_get>
	if (!smp) {
   1975c:	4606      	mov	r6, r0
   1975e:	2800      	cmp	r0, #0
   19760:	f000 80a5 	beq.w	198ae <bt_smp_start_security+0x16e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   19764:	1d07      	adds	r7, r0, #4
   19766:	2104      	movs	r1, #4
   19768:	4638      	mov	r0, r7
   1976a:	f00a f89a 	bl	238a2 <atomic_test_bit>
   1976e:	2800      	cmp	r0, #0
   19770:	f040 80a0 	bne.w	198b4 <bt_smp_start_security+0x174>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19774:	2103      	movs	r1, #3
   19776:	4638      	mov	r0, r7
   19778:	f00a f893 	bl	238a2 <atomic_test_bit>
   1977c:	b110      	cbz	r0, 19784 <bt_smp_start_security+0x44>
		return -EBUSY;
   1977e:	f06f 040f 	mvn.w	r4, #15
   19782:	e7e5      	b.n	19750 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19784:	4621      	mov	r1, r4
   19786:	4638      	mov	r0, r7
   19788:	f00a f88b 	bl	238a2 <atomic_test_bit>
   1978c:	2800      	cmp	r0, #0
   1978e:	d1f6      	bne.n	1977e <bt_smp_start_security+0x3e>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   19790:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
   19792:	2b03      	cmp	r3, #3
   19794:	d03d      	beq.n	19812 <bt_smp_start_security+0xd2>
   19796:	d82c      	bhi.n	197f2 <bt_smp_start_security+0xb2>
   19798:	3b01      	subs	r3, #1
   1979a:	2b01      	cmp	r3, #1
   1979c:	d947      	bls.n	1982e <bt_smp_start_security+0xee>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   1979e:	210b      	movs	r1, #11
   197a0:	1d28      	adds	r0, r5, #4
   197a2:	f00a f87e 	bl	238a2 <atomic_test_bit>
   197a6:	2800      	cmp	r0, #0
   197a8:	d1d0      	bne.n	1974c <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
   197aa:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   197ae:	b983      	cbnz	r3, 197d2 <bt_smp_start_security+0x92>
						     conn->id, &conn->le.dst);
   197b0:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   197b4:	7a29      	ldrb	r1, [r5, #8]
   197b6:	4622      	mov	r2, r4
   197b8:	2020      	movs	r0, #32
   197ba:	f7fe fec7 	bl	1854c <bt_keys_find>
   197be:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   197c2:	b930      	cbnz	r0, 197d2 <bt_smp_start_security+0x92>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   197c4:	7a29      	ldrb	r1, [r5, #8]
   197c6:	4622      	mov	r2, r4
   197c8:	2004      	movs	r0, #4
   197ca:	f7fe febf 	bl	1854c <bt_keys_find>
   197ce:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
   197d2:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   197d6:	2b00      	cmp	r3, #0
   197d8:	d0b8      	beq.n	1974c <bt_smp_start_security+0xc>
   197da:	89da      	ldrh	r2, [r3, #14]
   197dc:	f002 0224 	and.w	r2, r2, #36	; 0x24
   197e0:	2a00      	cmp	r2, #0
   197e2:	d0b3      	beq.n	1974c <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   197e4:	7aaa      	ldrb	r2, [r5, #10]
   197e6:	2a02      	cmp	r2, #2
   197e8:	d921      	bls.n	1982e <bt_smp_start_security+0xee>
   197ea:	7b5b      	ldrb	r3, [r3, #13]
   197ec:	07db      	lsls	r3, r3, #31
   197ee:	d5ad      	bpl.n	1974c <bt_smp_start_security+0xc>
   197f0:	e01d      	b.n	1982e <bt_smp_start_security+0xee>
	switch (conn->required_sec_level) {
   197f2:	2b04      	cmp	r3, #4
   197f4:	d1d3      	bne.n	1979e <bt_smp_start_security+0x5e>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   197f6:	f7ff f8af 	bl	18958 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   197fa:	2803      	cmp	r0, #3
   197fc:	d104      	bne.n	19808 <bt_smp_start_security+0xc8>
   197fe:	4b2f      	ldr	r3, [pc, #188]	; (198bc <bt_smp_start_security+0x17c>)
   19800:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   19802:	b1fb      	cbz	r3, 19844 <bt_smp_start_security+0x104>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   19804:	68dc      	ldr	r4, [r3, #12]
   19806:	b10c      	cbz	r4, 1980c <bt_smp_start_security+0xcc>
   19808:	4b2d      	ldr	r3, [pc, #180]	; (198c0 <bt_smp_start_security+0x180>)
   1980a:	781c      	ldrb	r4, [r3, #0]
   1980c:	f004 0401 	and.w	r4, r4, #1
   19810:	e00b      	b.n	1982a <bt_smp_start_security+0xea>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   19812:	f7ff f8a1 	bl	18958 <get_io_capa>
   19816:	2803      	cmp	r0, #3
   19818:	d107      	bne.n	1982a <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
   1981a:	4b28      	ldr	r3, [pc, #160]	; (198bc <bt_smp_start_security+0x17c>)
   1981c:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1981e:	2c00      	cmp	r4, #0
   19820:	d0bd      	beq.n	1979e <bt_smp_start_security+0x5e>
		       (bt_auth && bt_auth->oob_data_request);
   19822:	68e4      	ldr	r4, [r4, #12]
   19824:	3c00      	subs	r4, #0
   19826:	bf18      	it	ne
   19828:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   1982a:	2c00      	cmp	r4, #0
   1982c:	d0b7      	beq.n	1979e <bt_smp_start_security+0x5e>
	if (!conn->le.keys) {
   1982e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   19832:	b14b      	cbz	r3, 19848 <bt_smp_start_security+0x108>
	if (smp_init(smp) != 0) {
   19834:	4630      	mov	r0, r6
   19836:	f7ff f939 	bl	18aac <smp_init>
   1983a:	4604      	mov	r4, r0
   1983c:	b180      	cbz	r0, 19860 <bt_smp_start_security+0x120>
		return -ENOBUFS;
   1983e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   19842:	e785      	b.n	19750 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
   19844:	2400      	movs	r4, #0
   19846:	e7e1      	b.n	1980c <bt_smp_start_security+0xcc>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   19848:	7a28      	ldrb	r0, [r5, #8]
   1984a:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1984e:	f7fe fe47 	bl	184e0 <bt_keys_get_addr>
   19852:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   19856:	2800      	cmp	r0, #0
   19858:	d1ec      	bne.n	19834 <bt_smp_start_security+0xf4>
			return -ENOMEM;
   1985a:	f06f 040b 	mvn.w	r4, #11
   1985e:	e777      	b.n	19750 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   19860:	210b      	movs	r1, #11
   19862:	4630      	mov	r0, r6
   19864:	f00a f847 	bl	238f6 <smp_create_pdu.isra.0>
	if (!req_buf) {
   19868:	4680      	mov	r8, r0
   1986a:	2800      	cmp	r0, #0
   1986c:	d0e7      	beq.n	1983e <bt_smp_start_security+0xfe>
   1986e:	2101      	movs	r1, #1
   19870:	3008      	adds	r0, #8
   19872:	f00a fb9c 	bl	23fae <net_buf_simple_add>
   19876:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   19878:	2009      	movs	r0, #9
   1987a:	f7ff f8b9 	bl	189f0 <get_auth.isra.0>
   1987e:	4623      	mov	r3, r4
   19880:	f889 0000 	strb.w	r0, [r9]
   19884:	4642      	mov	r2, r8
   19886:	9400      	str	r4, [sp, #0]
   19888:	2106      	movs	r1, #6
   1988a:	4628      	mov	r0, r5
   1988c:	f009 fee4 	bl	23658 <bt_l2cap_send_cb>
	if (err) {
   19890:	4604      	mov	r4, r0
   19892:	b118      	cbz	r0, 1989c <bt_smp_start_security+0x15c>
		net_buf_unref(req_buf);
   19894:	4640      	mov	r0, r8
   19896:	f000 fd35 	bl	1a304 <net_buf_unref>
		return err;
   1989a:	e759      	b.n	19750 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1989c:	4638      	mov	r0, r7
   1989e:	210f      	movs	r1, #15
   198a0:	f009 ff20 	bl	236e4 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   198a4:	2101      	movs	r1, #1
   198a6:	4630      	mov	r0, r6
   198a8:	f009 ff1c 	bl	236e4 <atomic_set_bit>
	return 0;
   198ac:	e750      	b.n	19750 <bt_smp_start_security+0x10>
		return -ENOTCONN;
   198ae:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   198b2:	e74d      	b.n	19750 <bt_smp_start_security+0x10>
		return -EIO;
   198b4:	f06f 0404 	mvn.w	r4, #4
   198b8:	e74a      	b.n	19750 <bt_smp_start_security+0x10>
   198ba:	bf00      	nop
   198bc:	20002488 	.word	0x20002488
   198c0:	200031a3 	.word	0x200031a3

000198c4 <smp_pairing_complete>:
{
   198c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   198c6:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   198ca:	4605      	mov	r5, r0
   198cc:	1d07      	adds	r7, r0, #4
	if (!status) {
   198ce:	b9b9      	cbnz	r1, 19900 <smp_pairing_complete+0x3c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   198d0:	210d      	movs	r1, #13
   198d2:	4638      	mov	r0, r7
   198d4:	f009 ffe5 	bl	238a2 <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
   198d8:	4b26      	ldr	r3, [pc, #152]	; (19974 <smp_pairing_complete+0xb0>)
   198da:	681b      	ldr	r3, [r3, #0]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   198dc:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
   198de:	b11b      	cbz	r3, 198e8 <smp_pairing_complete+0x24>
   198e0:	699b      	ldr	r3, [r3, #24]
   198e2:	b10b      	cbz	r3, 198e8 <smp_pairing_complete+0x24>
			bt_auth->pairing_failed(conn, security_err);
   198e4:	4620      	mov	r0, r4
   198e6:	4798      	blx	r3
	smp_reset(smp);
   198e8:	4628      	mov	r0, r5
   198ea:	f00a f896 	bl	23a1a <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   198ee:	7a62      	ldrb	r2, [r4, #9]
   198f0:	7aa3      	ldrb	r3, [r4, #10]
   198f2:	429a      	cmp	r2, r3
   198f4:	d03c      	beq.n	19970 <smp_pairing_complete+0xac>
		bt_smp_start_security(conn);
   198f6:	4620      	mov	r0, r4
}
   198f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   198fc:	f7ff bf20 	b.w	19740 <bt_smp_start_security>
	switch (smp_err) {
   19900:	3901      	subs	r1, #1
   19902:	b2c9      	uxtb	r1, r1
   19904:	290e      	cmp	r1, #14
   19906:	bf9c      	itt	ls
   19908:	4b1b      	ldrls	r3, [pc, #108]	; (19978 <smp_pairing_complete+0xb4>)
   1990a:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
   1990c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   19910:	bf88      	it	hi
   19912:	2609      	movhi	r6, #9
		if (conn->le.keys &&
   19914:	b143      	cbz	r3, 19928 <smp_pairing_complete+0x64>
   19916:	7b1b      	ldrb	r3, [r3, #12]
   19918:	bb1b      	cbnz	r3, 19962 <smp_pairing_complete+0x9e>
			bt_keys_clear(conn->le.keys);
   1991a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1991e:	f009 fe1f 	bl	23560 <bt_keys_clear>
			conn->le.keys = NULL;
   19922:	2300      	movs	r3, #0
   19924:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   19928:	2102      	movs	r1, #2
   1992a:	4638      	mov	r0, r7
   1992c:	f009 ffb9 	bl	238a2 <atomic_test_bit>
   19930:	b940      	cbnz	r0, 19944 <smp_pairing_complete+0x80>
	switch (err) {
   19932:	2e07      	cmp	r6, #7
   19934:	bf96      	itet	ls
   19936:	4b11      	ldrls	r3, [pc, #68]	; (1997c <smp_pairing_complete+0xb8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   19938:	211f      	movhi	r1, #31
   1993a:	5d99      	ldrbls	r1, [r3, r6]
			bt_conn_security_changed(conn,
   1993c:	4632      	mov	r2, r6
   1993e:	4620      	mov	r0, r4
   19940:	f7fb faf0 	bl	14f24 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   19944:	2103      	movs	r1, #3
   19946:	4638      	mov	r0, r7
   19948:	f009 ffab 	bl	238a2 <atomic_test_bit>
   1994c:	2800      	cmp	r0, #0
   1994e:	d0cb      	beq.n	198e8 <smp_pairing_complete+0x24>
   19950:	4b08      	ldr	r3, [pc, #32]	; (19974 <smp_pairing_complete+0xb0>)
   19952:	681b      	ldr	r3, [r3, #0]
   19954:	2b00      	cmp	r3, #0
   19956:	d0c7      	beq.n	198e8 <smp_pairing_complete+0x24>
		    bt_auth && bt_auth->pairing_failed) {
   19958:	69db      	ldr	r3, [r3, #28]
   1995a:	2b00      	cmp	r3, #0
   1995c:	d0c4      	beq.n	198e8 <smp_pairing_complete+0x24>
			bt_auth->pairing_failed(conn, security_err);
   1995e:	4631      	mov	r1, r6
   19960:	e7c0      	b.n	198e4 <smp_pairing_complete+0x20>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   19962:	2102      	movs	r1, #2
   19964:	4638      	mov	r0, r7
   19966:	f009 ff9c 	bl	238a2 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1996a:	2800      	cmp	r0, #0
   1996c:	d1d5      	bne.n	1991a <smp_pairing_complete+0x56>
   1996e:	e7db      	b.n	19928 <smp_pairing_complete+0x64>
}
   19970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19972:	bf00      	nop
   19974:	20002488 	.word	0x20002488
   19978:	000279e2 	.word	0x000279e2
   1997c:	000279fa 	.word	0x000279fa

00019980 <bt_smp_recv>:
{
   19980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   19982:	898b      	ldrh	r3, [r1, #12]
{
   19984:	4607      	mov	r7, r0
   19986:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   19988:	b95b      	cbnz	r3, 199a2 <bt_smp_recv+0x22>
   1998a:	493a      	ldr	r1, [pc, #232]	; (19a74 <bt_smp_recv+0xf4>)
   1998c:	4b3a      	ldr	r3, [pc, #232]	; (19a78 <bt_smp_recv+0xf8>)
		BT_ERR("Too small SMP PDU received");
   1998e:	483b      	ldr	r0, [pc, #236]	; (19a7c <bt_smp_recv+0xfc>)
   19990:	1ac9      	subs	r1, r1, r3
   19992:	08c9      	lsrs	r1, r1, #3
   19994:	0189      	lsls	r1, r1, #6
   19996:	f041 0101 	orr.w	r1, r1, #1
   1999a:	f007 ffd9 	bl	21950 <log_0>
}
   1999e:	2000      	movs	r0, #0
   199a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   199a2:	2101      	movs	r1, #1
   199a4:	f105 0008 	add.w	r0, r5, #8
   199a8:	f00a fb28 	bl	23ffc <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   199ac:	2104      	movs	r1, #4
   199ae:	4606      	mov	r6, r0
   199b0:	f1a7 00ec 	sub.w	r0, r7, #236	; 0xec
   199b4:	f009 ff75 	bl	238a2 <atomic_test_bit>
   199b8:	f1a7 04f0 	sub.w	r4, r7, #240	; 0xf0
   199bc:	7831      	ldrb	r1, [r6, #0]
   199be:	b150      	cbz	r0, 199d6 <bt_smp_recv+0x56>
   199c0:	4a2c      	ldr	r2, [pc, #176]	; (19a74 <bt_smp_recv+0xf4>)
   199c2:	4b2d      	ldr	r3, [pc, #180]	; (19a78 <bt_smp_recv+0xf8>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   199c4:	482e      	ldr	r0, [pc, #184]	; (19a80 <bt_smp_recv+0x100>)
   199c6:	1ad2      	subs	r2, r2, r3
   199c8:	08d2      	lsrs	r2, r2, #3
   199ca:	0192      	lsls	r2, r2, #6
   199cc:	f042 0202 	orr.w	r2, r2, #2
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   199d0:	f007 ffcb 	bl	2196a <log_1>
		return 0;
   199d4:	e7e3      	b.n	1999e <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   199d6:	290e      	cmp	r1, #14
   199d8:	d908      	bls.n	199ec <bt_smp_recv+0x6c>
   199da:	4a26      	ldr	r2, [pc, #152]	; (19a74 <bt_smp_recv+0xf4>)
   199dc:	4b26      	ldr	r3, [pc, #152]	; (19a78 <bt_smp_recv+0xf8>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   199de:	4829      	ldr	r0, [pc, #164]	; (19a84 <bt_smp_recv+0x104>)
   199e0:	1ad2      	subs	r2, r2, r3
   199e2:	08d2      	lsrs	r2, r2, #3
   199e4:	0192      	lsls	r2, r2, #6
   199e6:	f042 0202 	orr.w	r2, r2, #2
   199ea:	e7f1      	b.n	199d0 <bt_smp_recv+0x50>
	if (!handlers[hdr->code].func) {
   199ec:	4f26      	ldr	r7, [pc, #152]	; (19a88 <bt_smp_recv+0x108>)
   199ee:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   199f2:	b973      	cbnz	r3, 19a12 <bt_smp_recv+0x92>
   199f4:	4b20      	ldr	r3, [pc, #128]	; (19a78 <bt_smp_recv+0xf8>)
   199f6:	4a1f      	ldr	r2, [pc, #124]	; (19a74 <bt_smp_recv+0xf4>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   199f8:	4824      	ldr	r0, [pc, #144]	; (19a8c <bt_smp_recv+0x10c>)
   199fa:	1ad2      	subs	r2, r2, r3
   199fc:	08d2      	lsrs	r2, r2, #3
   199fe:	0192      	lsls	r2, r2, #6
   19a00:	f042 0202 	orr.w	r2, r2, #2
   19a04:	f007 ffb1 	bl	2196a <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   19a08:	2107      	movs	r1, #7
		smp_error(smp, err);
   19a0a:	4620      	mov	r0, r4
   19a0c:	f00a f965 	bl	23cda <smp_error>
   19a10:	e7c5      	b.n	1999e <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   19a12:	4620      	mov	r0, r4
   19a14:	f009 ffe9 	bl	239ea <atomic_test_and_clear_bit>
   19a18:	7831      	ldrb	r1, [r6, #0]
   19a1a:	b970      	cbnz	r0, 19a3a <bt_smp_recv+0xba>
   19a1c:	4b16      	ldr	r3, [pc, #88]	; (19a78 <bt_smp_recv+0xf8>)
   19a1e:	4a15      	ldr	r2, [pc, #84]	; (19a74 <bt_smp_recv+0xf4>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   19a20:	481b      	ldr	r0, [pc, #108]	; (19a90 <bt_smp_recv+0x110>)
   19a22:	1ad2      	subs	r2, r2, r3
   19a24:	08d2      	lsrs	r2, r2, #3
   19a26:	0192      	lsls	r2, r2, #6
   19a28:	f042 0202 	orr.w	r2, r2, #2
   19a2c:	f007 ff9d 	bl	2196a <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   19a30:	7833      	ldrb	r3, [r6, #0]
   19a32:	2b05      	cmp	r3, #5
   19a34:	d0b3      	beq.n	1999e <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   19a36:	2108      	movs	r1, #8
   19a38:	e7e7      	b.n	19a0a <bt_smp_recv+0x8a>
	if (buf->len != handlers[hdr->code].expect_len) {
   19a3a:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
   19a3e:	89a8      	ldrh	r0, [r5, #12]
   19a40:	791b      	ldrb	r3, [r3, #4]
   19a42:	4283      	cmp	r3, r0
   19a44:	d00d      	beq.n	19a62 <bt_smp_recv+0xe2>
   19a46:	4a0c      	ldr	r2, [pc, #48]	; (19a78 <bt_smp_recv+0xf8>)
   19a48:	4b0a      	ldr	r3, [pc, #40]	; (19a74 <bt_smp_recv+0xf4>)
   19a4a:	1a9b      	subs	r3, r3, r2
   19a4c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   19a4e:	019b      	lsls	r3, r3, #6
   19a50:	460a      	mov	r2, r1
   19a52:	f043 0301 	orr.w	r3, r3, #1
   19a56:	4601      	mov	r1, r0
   19a58:	480e      	ldr	r0, [pc, #56]	; (19a94 <bt_smp_recv+0x114>)
   19a5a:	f007 ff9a 	bl	21992 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   19a5e:	210a      	movs	r1, #10
   19a60:	e7d3      	b.n	19a0a <bt_smp_recv+0x8a>
	err = handlers[hdr->code].func(smp, buf);
   19a62:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
   19a66:	4620      	mov	r0, r4
   19a68:	4629      	mov	r1, r5
   19a6a:	4798      	blx	r3
	if (err) {
   19a6c:	4601      	mov	r1, r0
   19a6e:	2800      	cmp	r0, #0
   19a70:	d095      	beq.n	1999e <bt_smp_recv+0x1e>
   19a72:	e7ca      	b.n	19a0a <bt_smp_recv+0x8a>
   19a74:	00025294 	.word	0x00025294
   19a78:	00025224 	.word	0x00025224
   19a7c:	00027874 	.word	0x00027874
   19a80:	0002788f 	.word	0x0002788f
   19a84:	000278c0 	.word	0x000278c0
   19a88:	00025a4c 	.word	0x00025a4c
   19a8c:	000278e2 	.word	0x000278e2
   19a90:	000278fc 	.word	0x000278fc
   19a94:	000266ec 	.word	0x000266ec

00019a98 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   19a98:	4b12      	ldr	r3, [pc, #72]	; (19ae4 <bt_smp_pkey_ready+0x4c>)
{
   19a9a:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   19a9c:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   19a9e:	b958      	cbnz	r0, 19ab8 <bt_smp_pkey_ready+0x20>
   19aa0:	4911      	ldr	r1, [pc, #68]	; (19ae8 <bt_smp_pkey_ready+0x50>)
   19aa2:	4b12      	ldr	r3, [pc, #72]	; (19aec <bt_smp_pkey_ready+0x54>)
		BT_WARN("Public key not available");
   19aa4:	4812      	ldr	r0, [pc, #72]	; (19af0 <bt_smp_pkey_ready+0x58>)
   19aa6:	1ac9      	subs	r1, r1, r3
   19aa8:	08c9      	lsrs	r1, r1, #3
   19aaa:	0189      	lsls	r1, r1, #6
}
   19aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
   19ab0:	f041 0102 	orr.w	r1, r1, #2
   19ab4:	f007 bf4c 	b.w	21950 <log_0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19ab8:	4c0e      	ldr	r4, [pc, #56]	; (19af4 <bt_smp_pkey_ready+0x5c>)
	z_impl_k_sem_give(sem);
   19aba:	480f      	ldr	r0, [pc, #60]	; (19af8 <bt_smp_pkey_ready+0x60>)
   19abc:	f003 f9f6 	bl	1ceac <z_impl_k_sem_give>
   19ac0:	f3bf 8f5b 	dmb	ish
   19ac4:	6863      	ldr	r3, [r4, #4]
   19ac6:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   19aca:	065b      	lsls	r3, r3, #25
   19acc:	d509      	bpl.n	19ae2 <bt_smp_pkey_ready+0x4a>
		err = smp_public_key_periph(smp);
   19ace:	4620      	mov	r0, r4
   19ad0:	f7ff f982 	bl	18dd8 <smp_public_key_periph>
		if (err) {
   19ad4:	4601      	mov	r1, r0
   19ad6:	b120      	cbz	r0, 19ae2 <bt_smp_pkey_ready+0x4a>
			smp_error(smp, err);
   19ad8:	4620      	mov	r0, r4
}
   19ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
   19ade:	f00a b8fc 	b.w	23cda <smp_error>
}
   19ae2:	bd10      	pop	{r4, pc}
   19ae4:	20002590 	.word	0x20002590
   19ae8:	00025294 	.word	0x00025294
   19aec:	00025224 	.word	0x00025224
   19af0:	00027917 	.word	0x00027917
   19af4:	20001a08 	.word	0x20001a08
   19af8:	20000804 	.word	0x20000804

00019afc <smp_ident_addr_info>:
{
   19afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   19b00:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   19b02:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   19b06:	782b      	ldrb	r3, [r5, #0]
{
   19b08:	4604      	mov	r4, r0
   19b0a:	f107 0688 	add.w	r6, r7, #136	; 0x88
   19b0e:	b313      	cbz	r3, 19b56 <smp_ident_addr_info+0x5a>
	if (!bt_addr_le_is_identity(&req->addr)) {
   19b10:	79ab      	ldrb	r3, [r5, #6]
   19b12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19b16:	2bc0      	cmp	r3, #192	; 0xc0
   19b18:	d01d      	beq.n	19b56 <smp_ident_addr_info+0x5a>
   19b1a:	4b4b      	ldr	r3, [pc, #300]	; (19c48 <smp_ident_addr_info+0x14c>)
   19b1c:	4c4b      	ldr	r4, [pc, #300]	; (19c4c <smp_ident_addr_info+0x150>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   19b1e:	4628      	mov	r0, r5
   19b20:	1ae4      	subs	r4, r4, r3
   19b22:	f7f9 fabb 	bl	1309c <bt_addr_le_str_real>
   19b26:	f7f8 f801 	bl	11b2c <z_log_strdup>
   19b2a:	08e4      	lsrs	r4, r4, #3
   19b2c:	01a4      	lsls	r4, r4, #6
   19b2e:	f044 0401 	orr.w	r4, r4, #1
   19b32:	4601      	mov	r1, r0
   19b34:	4622      	mov	r2, r4
   19b36:	4846      	ldr	r0, [pc, #280]	; (19c50 <smp_ident_addr_info+0x154>)
   19b38:	f007 ff17 	bl	2196a <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   19b3c:	4630      	mov	r0, r6
   19b3e:	f7f9 faad 	bl	1309c <bt_addr_le_str_real>
   19b42:	f7f7 fff3 	bl	11b2c <z_log_strdup>
   19b46:	4622      	mov	r2, r4
   19b48:	4601      	mov	r1, r0
   19b4a:	4842      	ldr	r0, [pc, #264]	; (19c54 <smp_ident_addr_info+0x158>)
   19b4c:	f007 ff0d 	bl	2196a <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
   19b50:	200a      	movs	r0, #10
}
   19b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   19b56:	2207      	movs	r2, #7
   19b58:	4629      	mov	r1, r5
   19b5a:	4630      	mov	r0, r6
   19b5c:	f008 f9d2 	bl	21f04 <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   19b60:	b168      	cbz	r0, 19b7e <smp_ident_addr_info+0x82>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   19b62:	7a38      	ldrb	r0, [r7, #8]
   19b64:	4629      	mov	r1, r5
   19b66:	f7fe fd41 	bl	185ec <bt_keys_find_addr>
		if (keys) {
   19b6a:	4680      	mov	r8, r0
   19b6c:	b138      	cbz	r0, 19b7e <smp_ident_addr_info+0x82>
			if (!update_keys_check(smp, keys)) {
   19b6e:	4601      	mov	r1, r0
   19b70:	4620      	mov	r0, r4
   19b72:	f009 fe9f 	bl	238b4 <update_keys_check>
   19b76:	b300      	cbz	r0, 19bba <smp_ident_addr_info+0xbe>
			bt_keys_clear(keys);
   19b78:	4640      	mov	r0, r8
   19b7a:	f009 fcf1 	bl	23560 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19b7e:	210d      	movs	r1, #13
   19b80:	1d20      	adds	r0, r4, #4
   19b82:	f009 fe8e 	bl	238a2 <atomic_test_bit>
   19b86:	2800      	cmp	r0, #0
   19b88:	d046      	beq.n	19c18 <smp_ident_addr_info+0x11c>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   19b8a:	7a39      	ldrb	r1, [r7, #8]
   19b8c:	4632      	mov	r2, r6
   19b8e:	2002      	movs	r0, #2
   19b90:	f009 fcd2 	bl	23538 <bt_keys_get_type>
		if (!keys) {
   19b94:	4680      	mov	r8, r0
   19b96:	b990      	cbnz	r0, 19bbe <smp_ident_addr_info+0xc2>
   19b98:	4a2b      	ldr	r2, [pc, #172]	; (19c48 <smp_ident_addr_info+0x14c>)
   19b9a:	4c2c      	ldr	r4, [pc, #176]	; (19c4c <smp_ident_addr_info+0x150>)
			BT_ERR("Unable to get keys for %s",
   19b9c:	4630      	mov	r0, r6
   19b9e:	1aa4      	subs	r4, r4, r2
   19ba0:	f7f9 fa7c 	bl	1309c <bt_addr_le_str_real>
   19ba4:	f7f7 ffc2 	bl	11b2c <z_log_strdup>
   19ba8:	08e4      	lsrs	r4, r4, #3
   19baa:	01a4      	lsls	r4, r4, #6
   19bac:	f044 0401 	orr.w	r4, r4, #1
   19bb0:	4601      	mov	r1, r0
   19bb2:	4622      	mov	r2, r4
   19bb4:	4828      	ldr	r0, [pc, #160]	; (19c58 <smp_ident_addr_info+0x15c>)
   19bb6:	f007 fed8 	bl	2196a <log_1>
				return BT_SMP_ERR_UNSPECIFIED;
   19bba:	2008      	movs	r0, #8
   19bbc:	e7c9      	b.n	19b52 <smp_ident_addr_info+0x56>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   19bbe:	78fb      	ldrb	r3, [r7, #3]
   19bc0:	2b00      	cmp	r3, #0
   19bc2:	d13e      	bne.n	19c42 <smp_ident_addr_info+0x146>
			dst = &conn->le.resp_addr;
   19bc4:	f107 0196 	add.w	r1, r7, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   19bc8:	780b      	ldrb	r3, [r1, #0]
   19bca:	2b01      	cmp	r3, #1
   19bcc:	d121      	bne.n	19c12 <smp_ident_addr_info+0x116>
		if (bt_addr_le_is_rpa(dst)) {
   19bce:	798b      	ldrb	r3, [r1, #6]
   19bd0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19bd4:	2b40      	cmp	r3, #64	; 0x40
   19bd6:	d11c      	bne.n	19c12 <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
   19bd8:	2206      	movs	r2, #6
   19bda:	3101      	adds	r1, #1
   19bdc:	f108 003a 	add.w	r0, r8, #58	; 0x3a
   19be0:	f008 f9b7 	bl	21f52 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   19be4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
   19be8:	b19b      	cbz	r3, 19c12 <smp_ident_addr_info+0x116>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   19bea:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
   19bee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19bf2:	2bc0      	cmp	r3, #192	; 0xc0
   19bf4:	d00d      	beq.n	19c12 <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
   19bf6:	2207      	movs	r2, #7
   19bf8:	4629      	mov	r1, r5
   19bfa:	f108 0001 	add.w	r0, r8, #1
   19bfe:	f008 f9a8 	bl	21f52 <memcpy>
   19c02:	2207      	movs	r2, #7
   19c04:	4629      	mov	r1, r5
   19c06:	4630      	mov	r0, r6
   19c08:	f008 f9a3 	bl	21f52 <memcpy>
				bt_conn_identity_resolved(conn);
   19c0c:	4638      	mov	r0, r7
   19c0e:	f7fb f95b 	bl	14ec8 <bt_conn_identity_resolved>
		bt_id_add(keys);
   19c12:	4640      	mov	r0, r8
   19c14:	f7fe f92e 	bl	17e74 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   19c18:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   19c1c:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   19c20:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   19c22:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   19c26:	d503      	bpl.n	19c30 <smp_ident_addr_info+0x134>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19c28:	210a      	movs	r1, #10
   19c2a:	4620      	mov	r0, r4
   19c2c:	f009 fd5a 	bl	236e4 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   19c30:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   19c34:	b91d      	cbnz	r5, 19c3e <smp_ident_addr_info+0x142>
		smp_pairing_complete(smp, 0);
   19c36:	4629      	mov	r1, r5
   19c38:	4620      	mov	r0, r4
   19c3a:	f7ff fe43 	bl	198c4 <smp_pairing_complete>
	return 0;
   19c3e:	2000      	movs	r0, #0
   19c40:	e787      	b.n	19b52 <smp_ident_addr_info+0x56>
			dst = &conn->le.init_addr;
   19c42:	f107 018f 	add.w	r1, r7, #143	; 0x8f
   19c46:	e7bf      	b.n	19bc8 <smp_ident_addr_info+0xcc>
   19c48:	00025224 	.word	0x00025224
   19c4c:	00025294 	.word	0x00025294
   19c50:	00027930 	.word	0x00027930
   19c54:	0002795d 	.word	0x0002795d
   19c58:	0002782c 	.word	0x0002782c

00019c5c <smp_central_ident>:
{
   19c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   19c5e:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
{
   19c62:	4604      	mov	r4, r0
   19c64:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19c66:	3004      	adds	r0, #4
   19c68:	210d      	movs	r1, #13
   19c6a:	f009 fe1a 	bl	238a2 <atomic_test_bit>
   19c6e:	b338      	cbz	r0, 19cc0 <smp_central_ident+0x64>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   19c70:	f105 0788 	add.w	r7, r5, #136	; 0x88
   19c74:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   19c76:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   19c78:	463a      	mov	r2, r7
   19c7a:	2004      	movs	r0, #4
   19c7c:	f009 fc5c 	bl	23538 <bt_keys_get_type>
		if (!keys) {
   19c80:	4605      	mov	r5, r0
   19c82:	b990      	cbnz	r0, 19caa <smp_central_ident+0x4e>
   19c84:	4a1b      	ldr	r2, [pc, #108]	; (19cf4 <smp_central_ident+0x98>)
   19c86:	4c1c      	ldr	r4, [pc, #112]	; (19cf8 <smp_central_ident+0x9c>)
			BT_ERR("Unable to get keys for %s",
   19c88:	4638      	mov	r0, r7
   19c8a:	1aa4      	subs	r4, r4, r2
   19c8c:	f7f9 fa06 	bl	1309c <bt_addr_le_str_real>
   19c90:	f7f7 ff4c 	bl	11b2c <z_log_strdup>
   19c94:	08e4      	lsrs	r4, r4, #3
   19c96:	01a4      	lsls	r4, r4, #6
   19c98:	f044 0401 	orr.w	r4, r4, #1
   19c9c:	4601      	mov	r1, r0
   19c9e:	4622      	mov	r2, r4
   19ca0:	4816      	ldr	r0, [pc, #88]	; (19cfc <smp_central_ident+0xa0>)
   19ca2:	f007 fe62 	bl	2196a <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
   19ca6:	2008      	movs	r0, #8
}
   19ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   19caa:	2202      	movs	r2, #2
   19cac:	4631      	mov	r1, r6
   19cae:	3018      	adds	r0, #24
   19cb0:	f008 f94f 	bl	21f52 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   19cb4:	2208      	movs	r2, #8
   19cb6:	1cb1      	adds	r1, r6, #2
   19cb8:	f105 0010 	add.w	r0, r5, #16
   19cbc:	f008 f949 	bl	21f52 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   19cc0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   19cc4:	f023 0201 	bic.w	r2, r3, #1
   19cc8:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   19ccc:	079a      	lsls	r2, r3, #30
   19cce:	d50c      	bpl.n	19cea <smp_central_ident+0x8e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   19cd0:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19cd2:	4620      	mov	r0, r4
   19cd4:	f009 fd06 	bl	236e4 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   19cd8:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   19cdc:	b91d      	cbnz	r5, 19ce6 <smp_central_ident+0x8a>
		smp_pairing_complete(smp, 0);
   19cde:	4629      	mov	r1, r5
   19ce0:	4620      	mov	r0, r4
   19ce2:	f7ff fdef 	bl	198c4 <smp_pairing_complete>
	return 0;
   19ce6:	2000      	movs	r0, #0
   19ce8:	e7de      	b.n	19ca8 <smp_central_ident+0x4c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   19cea:	075b      	lsls	r3, r3, #29
   19cec:	d5f4      	bpl.n	19cd8 <smp_central_ident+0x7c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19cee:	210a      	movs	r1, #10
   19cf0:	e7ef      	b.n	19cd2 <smp_central_ident+0x76>
   19cf2:	bf00      	nop
   19cf4:	00025224 	.word	0x00025224
   19cf8:	00025294 	.word	0x00025294
   19cfc:	0002782c 	.word	0x0002782c

00019d00 <smp_pairing_failed>:
{
   19d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d02:	4a15      	ldr	r2, [pc, #84]	; (19d58 <smp_pairing_failed+0x58>)
   19d04:	4b15      	ldr	r3, [pc, #84]	; (19d5c <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   19d06:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   19d08:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	BT_ERR("reason 0x%x", req->reason);
   19d0c:	7829      	ldrb	r1, [r5, #0]
   19d0e:	1ad2      	subs	r2, r2, r3
   19d10:	08d2      	lsrs	r2, r2, #3
{
   19d12:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
   19d14:	0192      	lsls	r2, r2, #6
   19d16:	4812      	ldr	r0, [pc, #72]	; (19d60 <smp_pairing_failed+0x60>)
   19d18:	f042 0201 	orr.w	r2, r2, #1
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   19d1c:	1d27      	adds	r7, r4, #4
	BT_ERR("reason 0x%x", req->reason);
   19d1e:	f007 fe24 	bl	2196a <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   19d22:	210a      	movs	r1, #10
   19d24:	4638      	mov	r0, r7
   19d26:	f009 fe60 	bl	239ea <atomic_test_and_clear_bit>
   19d2a:	b140      	cbz	r0, 19d3e <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
   19d2c:	4b0d      	ldr	r3, [pc, #52]	; (19d64 <smp_pairing_failed+0x64>)
   19d2e:	681b      	ldr	r3, [r3, #0]
   19d30:	b963      	cbnz	r3, 19d4c <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
   19d32:	4620      	mov	r0, r4
   19d34:	7829      	ldrb	r1, [r5, #0]
   19d36:	f7ff fdc5 	bl	198c4 <smp_pairing_complete>
}
   19d3a:	2000      	movs	r0, #0
   19d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   19d3e:	210b      	movs	r1, #11
   19d40:	4638      	mov	r0, r7
   19d42:	f009 fe52 	bl	239ea <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   19d46:	2800      	cmp	r0, #0
   19d48:	d1f0      	bne.n	19d2c <smp_pairing_failed+0x2c>
   19d4a:	e7f2      	b.n	19d32 <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
   19d4c:	691b      	ldr	r3, [r3, #16]
   19d4e:	2b00      	cmp	r3, #0
   19d50:	d0ef      	beq.n	19d32 <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
   19d52:	4630      	mov	r0, r6
   19d54:	4798      	blx	r3
   19d56:	e7ec      	b.n	19d32 <smp_pairing_failed+0x32>
   19d58:	00025294 	.word	0x00025294
   19d5c:	00025224 	.word	0x00025224
   19d60:	00027944 	.word	0x00027944
   19d64:	20002488 	.word	0x20002488

00019d68 <bt_smp_encrypt_change>:
{
   19d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = chan->conn;
   19d6c:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19d6e:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   19d72:	b088      	sub	sp, #32
   19d74:	4604      	mov	r4, r0
   19d76:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19d78:	4630      	mov	r0, r6
   19d7a:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   19d7c:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   19d80:	f009 fe33 	bl	239ea <atomic_test_and_clear_bit>
   19d84:	b318      	cbz	r0, 19dce <bt_smp_encrypt_change+0x66>
	if (hci_status) {
   19d86:	b1bf      	cbz	r7, 19db8 <bt_smp_encrypt_change+0x50>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19d88:	2103      	movs	r1, #3
   19d8a:	4630      	mov	r0, r6
   19d8c:	f009 fd89 	bl	238a2 <atomic_test_bit>
   19d90:	b1e8      	cbz	r0, 19dce <bt_smp_encrypt_change+0x66>
			uint8_t smp_err = smp_err_get(
   19d92:	4638      	mov	r0, r7
   19d94:	f7fd fc3c 	bl	17610 <bt_security_err_get>
	switch (auth_err) {
   19d98:	3801      	subs	r0, #1
   19d9a:	b2c0      	uxtb	r0, r0
   19d9c:	2808      	cmp	r0, #8
   19d9e:	bf9a      	itte	ls
   19da0:	4b73      	ldrls	r3, [pc, #460]	; (19f70 <bt_smp_encrypt_change+0x208>)
   19da2:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   19da4:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   19da6:	2102      	movs	r1, #2
   19da8:	4630      	mov	r0, r6
   19daa:	f009 fc9b 	bl	236e4 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   19dae:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   19db0:	4628      	mov	r0, r5
   19db2:	f7ff fd87 	bl	198c4 <smp_pairing_complete>
   19db6:	e00a      	b.n	19dce <bt_smp_encrypt_change+0x66>
	if (!conn->encrypt) {
   19db8:	f898 300b 	ldrb.w	r3, [r8, #11]
   19dbc:	b13b      	cbz	r3, 19dce <bt_smp_encrypt_change+0x66>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19dbe:	2103      	movs	r1, #3
   19dc0:	4630      	mov	r0, r6
   19dc2:	f009 fd6e 	bl	238a2 <atomic_test_bit>
   19dc6:	b928      	cbnz	r0, 19dd4 <bt_smp_encrypt_change+0x6c>
		smp_reset(smp);
   19dc8:	4628      	mov	r0, r5
   19dca:	f009 fe26 	bl	23a1a <smp_reset>
}
   19dce:	b008      	add	sp, #32
   19dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19dd4:	2105      	movs	r1, #5
   19dd6:	4630      	mov	r0, r6
   19dd8:	f009 fd63 	bl	238a2 <atomic_test_bit>
   19ddc:	b1b8      	cbz	r0, 19e0e <bt_smp_encrypt_change+0xa6>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   19dde:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   19de2:	071b      	lsls	r3, r3, #28
   19de4:	d507      	bpl.n	19df6 <bt_smp_encrypt_change+0x8e>
   19de6:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   19dea:	071f      	lsls	r7, r3, #28
   19dec:	d503      	bpl.n	19df6 <bt_smp_encrypt_change+0x8e>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   19dee:	2111      	movs	r1, #17
   19df0:	4630      	mov	r0, r6
   19df2:	f009 fc77 	bl	236e4 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   19df6:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   19dfa:	f023 0308 	bic.w	r3, r3, #8
   19dfe:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   19e02:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   19e06:	f023 0308 	bic.w	r3, r3, #8
   19e0a:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   19e0e:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   19e12:	07d8      	lsls	r0, r3, #31
   19e14:	d51d      	bpl.n	19e52 <bt_smp_encrypt_change+0xea>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   19e16:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19e18:	4628      	mov	r0, r5
   19e1a:	f009 fc63 	bl	236e4 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   19e1e:	4630      	mov	r0, r6
   19e20:	2102      	movs	r1, #2
   19e22:	f009 fc5f 	bl	236e4 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
   19e26:	6820      	ldr	r0, [r4, #0]
	if (!keys) {
   19e28:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   19e2c:	b9cb      	cbnz	r3, 19e62 <bt_smp_encrypt_change+0xfa>
   19e2e:	4a51      	ldr	r2, [pc, #324]	; (19f74 <bt_smp_encrypt_change+0x20c>)
   19e30:	4c51      	ldr	r4, [pc, #324]	; (19f78 <bt_smp_encrypt_change+0x210>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   19e32:	3088      	adds	r0, #136	; 0x88
   19e34:	1aa4      	subs	r4, r4, r2
   19e36:	f7f9 f931 	bl	1309c <bt_addr_le_str_real>
   19e3a:	f7f7 fe77 	bl	11b2c <z_log_strdup>
   19e3e:	08e4      	lsrs	r4, r4, #3
   19e40:	01a4      	lsls	r4, r4, #6
   19e42:	f044 0401 	orr.w	r4, r4, #1
   19e46:	4601      	mov	r1, r0
   19e48:	4622      	mov	r2, r4
   19e4a:	484c      	ldr	r0, [pc, #304]	; (19f7c <bt_smp_encrypt_change+0x214>)
   19e4c:	f007 fd8d 	bl	2196a <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
   19e50:	e7bd      	b.n	19dce <bt_smp_encrypt_change+0x66>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   19e52:	0799      	lsls	r1, r3, #30
   19e54:	d501      	bpl.n	19e5a <bt_smp_encrypt_change+0xf2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   19e56:	2108      	movs	r1, #8
   19e58:	e7de      	b.n	19e18 <bt_smp_encrypt_change+0xb0>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   19e5a:	075a      	lsls	r2, r3, #29
   19e5c:	d5df      	bpl.n	19e1e <bt_smp_encrypt_change+0xb6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   19e5e:	210a      	movs	r1, #10
   19e60:	e7da      	b.n	19e18 <bt_smp_encrypt_change+0xb0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   19e62:	2105      	movs	r1, #5
   19e64:	4630      	mov	r0, r6
   19e66:	f009 fd1c 	bl	238a2 <atomic_test_bit>
   19e6a:	b9b0      	cbnz	r0, 19e9a <bt_smp_encrypt_change+0x132>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   19e6c:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   19e70:	07db      	lsls	r3, r3, #31
   19e72:	d512      	bpl.n	19e9a <bt_smp_encrypt_change+0x132>
	struct bt_keys *keys = conn->le.keys;
   19e74:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
   19e76:	211a      	movs	r1, #26
   19e78:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   19e7a:	f8d3 70b4 	ldr.w	r7, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
   19e7e:	f001 f9cd 	bl	1b21c <bt_rand>
   19e82:	4681      	mov	r9, r0
   19e84:	b170      	cbz	r0, 19ea4 <bt_smp_encrypt_change+0x13c>
   19e86:	493c      	ldr	r1, [pc, #240]	; (19f78 <bt_smp_encrypt_change+0x210>)
   19e88:	4b3a      	ldr	r3, [pc, #232]	; (19f74 <bt_smp_encrypt_change+0x20c>)
			BT_ERR("Unable to get random bytes");
   19e8a:	483d      	ldr	r0, [pc, #244]	; (19f80 <bt_smp_encrypt_change+0x218>)
   19e8c:	1ac9      	subs	r1, r1, r3
   19e8e:	08c9      	lsrs	r1, r1, #3
   19e90:	0189      	lsls	r1, r1, #6
   19e92:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Encrypt Info buffer");
   19e96:	f007 fd5b 	bl	21950 <log_0>
	if (!smp->local_dist && !smp->remote_dist) {
   19e9a:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   19e9e:	2900      	cmp	r1, #0
   19ea0:	d195      	bne.n	19dce <bt_smp_encrypt_change+0x66>
   19ea2:	e785      	b.n	19db0 <bt_smp_encrypt_change+0x48>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   19ea4:	2106      	movs	r1, #6
   19ea6:	4628      	mov	r0, r5
   19ea8:	f009 fd25 	bl	238f6 <smp_create_pdu.isra.0>
		if (!buf) {
   19eac:	4680      	mov	r8, r0
   19eae:	b940      	cbnz	r0, 19ec2 <bt_smp_encrypt_change+0x15a>
   19eb0:	4931      	ldr	r1, [pc, #196]	; (19f78 <bt_smp_encrypt_change+0x210>)
   19eb2:	4b30      	ldr	r3, [pc, #192]	; (19f74 <bt_smp_encrypt_change+0x20c>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
   19eb4:	4833      	ldr	r0, [pc, #204]	; (19f84 <bt_smp_encrypt_change+0x21c>)
   19eb6:	1ac9      	subs	r1, r1, r3
   19eb8:	08c9      	lsrs	r1, r1, #3
   19eba:	0189      	lsls	r1, r1, #6
   19ebc:	f041 0101 	orr.w	r1, r1, #1
   19ec0:	e7e9      	b.n	19e96 <bt_smp_encrypt_change+0x12e>
	return net_buf_simple_add(&buf->b, len);
   19ec2:	2110      	movs	r1, #16
   19ec4:	3008      	adds	r0, #8
   19ec6:	f00a f872 	bl	23fae <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   19eca:	7b3a      	ldrb	r2, [r7, #12]
   19ecc:	a901      	add	r1, sp, #4
   19ece:	4682      	mov	sl, r0
   19ed0:	f008 f83f 	bl	21f52 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   19ed4:	7b38      	ldrb	r0, [r7, #12]
   19ed6:	280f      	cmp	r0, #15
   19ed8:	d805      	bhi.n	19ee6 <bt_smp_encrypt_change+0x17e>
			(void)memset(info->ltk + keys->enc_size, 0,
   19eda:	f1c0 0210 	rsb	r2, r0, #16
   19ede:	4649      	mov	r1, r9
   19ee0:	4450      	add	r0, sl
   19ee2:	f008 f841 	bl	21f68 <memset>
		smp_send(smp, buf, NULL, NULL);
   19ee6:	4641      	mov	r1, r8
   19ee8:	2200      	movs	r2, #0
   19eea:	4628      	mov	r0, r5
   19eec:	f009 fc39 	bl	23762 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   19ef0:	2107      	movs	r1, #7
   19ef2:	4628      	mov	r0, r5
   19ef4:	f009 fcff 	bl	238f6 <smp_create_pdu.isra.0>
		if (!buf) {
   19ef8:	4680      	mov	r8, r0
   19efa:	b940      	cbnz	r0, 19f0e <bt_smp_encrypt_change+0x1a6>
   19efc:	491e      	ldr	r1, [pc, #120]	; (19f78 <bt_smp_encrypt_change+0x210>)
   19efe:	4b1d      	ldr	r3, [pc, #116]	; (19f74 <bt_smp_encrypt_change+0x20c>)
			BT_ERR("Unable to allocate Central Ident buffer");
   19f00:	4821      	ldr	r0, [pc, #132]	; (19f88 <bt_smp_encrypt_change+0x220>)
   19f02:	1ac9      	subs	r1, r1, r3
   19f04:	08c9      	lsrs	r1, r1, #3
   19f06:	0189      	lsls	r1, r1, #6
   19f08:	f041 0101 	orr.w	r1, r1, #1
   19f0c:	e7c3      	b.n	19e96 <bt_smp_encrypt_change+0x12e>
   19f0e:	210a      	movs	r1, #10
   19f10:	3008      	adds	r0, #8
   19f12:	f00a f84c 	bl	23fae <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   19f16:	2208      	movs	r2, #8
   19f18:	4681      	mov	r9, r0
   19f1a:	a905      	add	r1, sp, #20
   19f1c:	3002      	adds	r0, #2
   19f1e:	f008 f818 	bl	21f52 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   19f22:	2202      	movs	r2, #2
   19f24:	a907      	add	r1, sp, #28
   19f26:	4648      	mov	r0, r9
   19f28:	f008 f813 	bl	21f52 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   19f2c:	4641      	mov	r1, r8
   19f2e:	4628      	mov	r0, r5
   19f30:	4a16      	ldr	r2, [pc, #88]	; (19f8c <bt_smp_encrypt_change+0x224>)
   19f32:	f009 fc16 	bl	23762 <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   19f36:	210d      	movs	r1, #13
   19f38:	4630      	mov	r0, r6
   19f3a:	f009 fcb2 	bl	238a2 <atomic_test_bit>
   19f3e:	2800      	cmp	r0, #0
   19f40:	d0ab      	beq.n	19e9a <bt_smp_encrypt_change+0x132>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   19f42:	4638      	mov	r0, r7
   19f44:	2101      	movs	r1, #1
   19f46:	f009 fb07 	bl	23558 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   19f4a:	a901      	add	r1, sp, #4
   19f4c:	2210      	movs	r2, #16
   19f4e:	f107 004a 	add.w	r0, r7, #74	; 0x4a
   19f52:	f007 fffe 	bl	21f52 <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   19f56:	a905      	add	r1, sp, #20
   19f58:	2208      	movs	r2, #8
   19f5a:	f107 0040 	add.w	r0, r7, #64	; 0x40
   19f5e:	f007 fff8 	bl	21f52 <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   19f62:	2202      	movs	r2, #2
   19f64:	a907      	add	r1, sp, #28
   19f66:	f107 0048 	add.w	r0, r7, #72	; 0x48
   19f6a:	f007 fff2 	bl	21f52 <memcpy>
   19f6e:	e794      	b.n	19e9a <bt_smp_encrypt_change+0x132>
   19f70:	000279f1 	.word	0x000279f1
   19f74:	00025224 	.word	0x00025224
   19f78:	00025294 	.word	0x00025294
   19f7c:	00027950 	.word	0x00027950
   19f80:	00027965 	.word	0x00027965
   19f84:	00027980 	.word	0x00027980
   19f88:	000279a7 	.word	0x000279a7
   19f8c:	00023e31 	.word	0x00023e31

00019f90 <smp_timeout>:
   19f90:	4b0b      	ldr	r3, [pc, #44]	; (19fc0 <smp_timeout+0x30>)
   19f92:	490c      	ldr	r1, [pc, #48]	; (19fc4 <smp_timeout+0x34>)
{
   19f94:	b510      	push	{r4, lr}
   19f96:	1ac9      	subs	r1, r1, r3
   19f98:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
   19f9a:	0189      	lsls	r1, r1, #6
{
   19f9c:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   19f9e:	f041 0101 	orr.w	r1, r1, #1
   19fa2:	4809      	ldr	r0, [pc, #36]	; (19fc8 <smp_timeout+0x38>)
   19fa4:	f007 fcd4 	bl	21950 <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   19fa8:	f5a4 70ec 	sub.w	r0, r4, #472	; 0x1d8
   19fac:	2108      	movs	r1, #8
   19fae:	f7ff fc89 	bl	198c4 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   19fb2:	f5a4 70ea 	sub.w	r0, r4, #468	; 0x1d4
   19fb6:	2104      	movs	r1, #4
}
   19fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   19fbc:	f009 bb92 	b.w	236e4 <atomic_set_bit>
   19fc0:	00025224 	.word	0x00025224
   19fc4:	00025294 	.word	0x00025294
   19fc8:	000279cf 	.word	0x000279cf

00019fcc <bt_smp_update_keys>:
{
   19fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19fce:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   19fd0:	f7fe fd2c 	bl	18a2c <smp_chan_get>
	if (!smp) {
   19fd4:	4605      	mov	r5, r0
   19fd6:	2800      	cmp	r0, #0
   19fd8:	d07c      	beq.n	1a0d4 <bt_smp_update_keys+0x108>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   19fda:	1d06      	adds	r6, r0, #4
   19fdc:	2103      	movs	r1, #3
   19fde:	4630      	mov	r0, r6
   19fe0:	f009 fc5f 	bl	238a2 <atomic_test_bit>
   19fe4:	2800      	cmp	r0, #0
   19fe6:	d075      	beq.n	1a0d4 <bt_smp_update_keys+0x108>
	if (conn->le.keys) {
   19fe8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   19fec:	b108      	cbz	r0, 19ff2 <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
   19fee:	f009 fab7 	bl	23560 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   19ff2:	f104 0788 	add.w	r7, r4, #136	; 0x88
   19ff6:	7a20      	ldrb	r0, [r4, #8]
   19ff8:	4639      	mov	r1, r7
   19ffa:	f7fe fa71 	bl	184e0 <bt_keys_get_addr>
   19ffe:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   1a002:	b9b0      	cbnz	r0, 1a032 <bt_smp_update_keys+0x66>
   1a004:	4a34      	ldr	r2, [pc, #208]	; (1a0d8 <bt_smp_update_keys+0x10c>)
   1a006:	4c35      	ldr	r4, [pc, #212]	; (1a0dc <bt_smp_update_keys+0x110>)
		BT_ERR("Unable to get keys for %s",
   1a008:	4638      	mov	r0, r7
   1a00a:	1aa4      	subs	r4, r4, r2
   1a00c:	f7f9 f846 	bl	1309c <bt_addr_le_str_real>
   1a010:	f7f7 fd8c 	bl	11b2c <z_log_strdup>
   1a014:	08e4      	lsrs	r4, r4, #3
   1a016:	01a4      	lsls	r4, r4, #6
   1a018:	f044 0401 	orr.w	r4, r4, #1
   1a01c:	4601      	mov	r1, r0
   1a01e:	4622      	mov	r2, r4
   1a020:	482f      	ldr	r0, [pc, #188]	; (1a0e0 <bt_smp_update_keys+0x114>)
   1a022:	f007 fca2 	bl	2196a <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1a026:	4628      	mov	r0, r5
   1a028:	2108      	movs	r1, #8
}
   1a02a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1a02e:	f009 be54 	b.w	23cda <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1a032:	210e      	movs	r1, #14
   1a034:	4630      	mov	r0, r6
   1a036:	f009 fc34 	bl	238a2 <atomic_test_bit>
   1a03a:	b128      	cbz	r0, 1a048 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1a03c:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1a040:	7b53      	ldrb	r3, [r2, #13]
   1a042:	f043 0302 	orr.w	r3, r3, #2
   1a046:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1a048:	7a2a      	ldrb	r2, [r5, #8]
   1a04a:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   1a04e:	2a03      	cmp	r2, #3
   1a050:	7b4b      	ldrb	r3, [r1, #13]
   1a052:	d836      	bhi.n	1a0c2 <bt_smp_update_keys+0xf6>
   1a054:	b3c2      	cbz	r2, 1a0c8 <bt_smp_update_keys+0xfc>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1a056:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1a05a:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1a05c:	7d2b      	ldrb	r3, [r5, #20]
   1a05e:	7b6a      	ldrb	r2, [r5, #13]
   1a060:	4293      	cmp	r3, r2
   1a062:	bf28      	it	cs
   1a064:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1a066:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a068:	4630      	mov	r0, r6
   1a06a:	2105      	movs	r1, #5
   1a06c:	f009 fc19 	bl	238a2 <atomic_test_bit>
   1a070:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   1a074:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1a076:	b350      	cbz	r0, 1a0ce <bt_smp_update_keys+0x102>
		conn->le.keys->flags |= BT_KEYS_SC;
   1a078:	f042 0210 	orr.w	r2, r2, #16
   1a07c:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1a07e:	210d      	movs	r1, #13
   1a080:	4630      	mov	r0, r6
   1a082:	f009 fc0e 	bl	238a2 <atomic_test_bit>
   1a086:	b328      	cbz	r0, 1a0d4 <bt_smp_update_keys+0x108>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1a088:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1a08c:	2120      	movs	r1, #32
   1a08e:	f009 fa63 	bl	23558 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1a092:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1a096:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1a09a:	2210      	movs	r2, #16
   1a09c:	301a      	adds	r0, #26
   1a09e:	f007 ff58 	bl	21f52 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1a0a2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1a0a6:	2208      	movs	r2, #8
   1a0a8:	2100      	movs	r1, #0
   1a0aa:	3010      	adds	r0, #16
   1a0ac:	f007 ff5c 	bl	21f68 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1a0b0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1a0b4:	2202      	movs	r2, #2
}
   1a0b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1a0ba:	2100      	movs	r1, #0
   1a0bc:	3018      	adds	r0, #24
   1a0be:	f007 bf53 	b.w	21f68 <memset>
	switch (smp->method) {
   1a0c2:	3a05      	subs	r2, #5
   1a0c4:	2a01      	cmp	r2, #1
   1a0c6:	d9c6      	bls.n	1a056 <bt_smp_update_keys+0x8a>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1a0c8:	f023 0301 	bic.w	r3, r3, #1
   1a0cc:	e7c5      	b.n	1a05a <bt_smp_update_keys+0x8e>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1a0ce:	f022 0210 	bic.w	r2, r2, #16
   1a0d2:	735a      	strb	r2, [r3, #13]
}
   1a0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a0d6:	bf00      	nop
   1a0d8:	00025224 	.word	0x00025224
   1a0dc:	00025294 	.word	0x00025294
   1a0e0:	0002782c 	.word	0x0002782c

0001a0e4 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1a0e4:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1a0e6:	4b07      	ldr	r3, [pc, #28]	; (1a104 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1a0e8:	4807      	ldr	r0, [pc, #28]	; (1a108 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1a0ea:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1a0ee:	f003 0306 	and.w	r3, r3, #6
   1a0f2:	1f9a      	subs	r2, r3, #6
   1a0f4:	4253      	negs	r3, r2
   1a0f6:	4153      	adcs	r3, r2
   1a0f8:	4a04      	ldr	r2, [pc, #16]	; (1a10c <bt_smp_init+0x28>)
   1a0fa:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1a0fc:	f7fb f93a 	bl	15374 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1a100:	2000      	movs	r0, #0
   1a102:	bd08      	pop	{r3, pc}
   1a104:	200002a8 	.word	0x200002a8
   1a108:	200005a8 	.word	0x200005a8
   1a10c:	200031a3 	.word	0x200031a3

0001a110 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   1a110:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
   1a112:	7802      	ldrb	r2, [r0, #0]
   1a114:	2a01      	cmp	r2, #1
{
   1a116:	4604      	mov	r4, r0
   1a118:	460b      	mov	r3, r1
	switch (src->type) {
   1a11a:	d016      	beq.n	1a14a <uuid_to_uuid128+0x3a>
   1a11c:	2a02      	cmp	r2, #2
   1a11e:	d02c      	beq.n	1a17a <uuid_to_uuid128+0x6a>
   1a120:	b98a      	cbnz	r2, 1a146 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   1a122:	4a19      	ldr	r2, [pc, #100]	; (1a188 <uuid_to_uuid128+0x78>)
   1a124:	460d      	mov	r5, r1
   1a126:	f102 0710 	add.w	r7, r2, #16
   1a12a:	6810      	ldr	r0, [r2, #0]
   1a12c:	6851      	ldr	r1, [r2, #4]
   1a12e:	462e      	mov	r6, r5
   1a130:	c603      	stmia	r6!, {r0, r1}
   1a132:	3208      	adds	r2, #8
   1a134:	42ba      	cmp	r2, r7
   1a136:	4635      	mov	r5, r6
   1a138:	d1f7      	bne.n	1a12a <uuid_to_uuid128+0x1a>
   1a13a:	7812      	ldrb	r2, [r2, #0]
   1a13c:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   1a13e:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
   1a140:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   1a142:	0a12      	lsrs	r2, r2, #8
   1a144:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   1a146:	bcf0      	pop	{r4, r5, r6, r7}
   1a148:	4770      	bx	lr
		*dst = uuid128_base;
   1a14a:	4a0f      	ldr	r2, [pc, #60]	; (1a188 <uuid_to_uuid128+0x78>)
   1a14c:	460d      	mov	r5, r1
   1a14e:	f102 0710 	add.w	r7, r2, #16
   1a152:	6810      	ldr	r0, [r2, #0]
   1a154:	6851      	ldr	r1, [r2, #4]
   1a156:	462e      	mov	r6, r5
   1a158:	c603      	stmia	r6!, {r0, r1}
   1a15a:	3208      	adds	r2, #8
   1a15c:	42ba      	cmp	r2, r7
   1a15e:	4635      	mov	r5, r6
   1a160:	d1f7      	bne.n	1a152 <uuid_to_uuid128+0x42>
   1a162:	7812      	ldrb	r2, [r2, #0]
   1a164:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   1a166:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
   1a168:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   1a16a:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1a16e:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   1a170:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   1a172:	0a12      	lsrs	r2, r2, #8
   1a174:	7399      	strb	r1, [r3, #14]
   1a176:	741a      	strb	r2, [r3, #16]
}
   1a178:	e7e5      	b.n	1a146 <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
   1a17a:	4601      	mov	r1, r0
}
   1a17c:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
   1a17e:	2211      	movs	r2, #17
   1a180:	4618      	mov	r0, r3
   1a182:	f007 bee6 	b.w	21f52 <memcpy>
   1a186:	bf00      	nop
   1a188:	00027a44 	.word	0x00027a44

0001a18c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1a18c:	4b02      	ldr	r3, [pc, #8]	; (1a198 <net_buf_pool_get+0xc>)
   1a18e:	2228      	movs	r2, #40	; 0x28
   1a190:	fb02 3000 	mla	r0, r2, r0, r3
   1a194:	4770      	bx	lr
   1a196:	bf00      	nop
   1a198:	20000864 	.word	0x20000864

0001a19c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a19c:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1a19e:	4a05      	ldr	r2, [pc, #20]	; (1a1b4 <net_buf_id+0x18>)
   1a1a0:	2128      	movs	r1, #40	; 0x28
   1a1a2:	fb01 2303 	mla	r3, r1, r3, r2
   1a1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a1a8:	1ac0      	subs	r0, r0, r3
}
   1a1aa:	4b03      	ldr	r3, [pc, #12]	; (1a1b8 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1a1ac:	10c0      	asrs	r0, r0, #3
}
   1a1ae:	4358      	muls	r0, r3
   1a1b0:	4770      	bx	lr
   1a1b2:	bf00      	nop
   1a1b4:	20000864 	.word	0x20000864
   1a1b8:	aaaaaaab 	.word	0xaaaaaaab

0001a1bc <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1a1bc:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1a1be:	4a0a      	ldr	r2, [pc, #40]	; (1a1e8 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a1c0:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1a1c2:	2428      	movs	r4, #40	; 0x28
   1a1c4:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1a1c8:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1a1ca:	6a1b      	ldr	r3, [r3, #32]
   1a1cc:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1a1ce:	6823      	ldr	r3, [r4, #0]
   1a1d0:	429a      	cmp	r2, r3
   1a1d2:	bf94      	ite	ls
   1a1d4:	600a      	strls	r2, [r1, #0]
   1a1d6:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1a1d8:	f7ff ffe0 	bl	1a19c <net_buf_id>
   1a1dc:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1a1e0:	fb02 3000 	mla	r0, r2, r0, r3
   1a1e4:	bd10      	pop	{r4, pc}
   1a1e6:	bf00      	nop
   1a1e8:	20000864 	.word	0x20000864

0001a1ec <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1a1ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1a1f0:	4605      	mov	r5, r0
   1a1f2:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1a1f4:	4610      	mov	r0, r2
   1a1f6:	4619      	mov	r1, r3
{
   1a1f8:	4616      	mov	r6, r2
   1a1fa:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1a1fc:	f00a fd4b 	bl	24c96 <sys_clock_timeout_end_calc>
   1a200:	4680      	mov	r8, r0
   1a202:	4689      	mov	r9, r1
	__asm__ volatile(
   1a204:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a208:	f3ef 8a11 	mrs	sl, BASEPRI
   1a20c:	f383 8812 	msr	BASEPRI_MAX, r3
   1a210:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1a214:	8b6b      	ldrh	r3, [r5, #26]
   1a216:	2b00      	cmp	r3, #0
   1a218:	d054      	beq.n	1a2c4 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1a21a:	8b2a      	ldrh	r2, [r5, #24]
   1a21c:	429a      	cmp	r2, r3
   1a21e:	d93d      	bls.n	1a29c <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   1a220:	2200      	movs	r2, #0
   1a222:	2300      	movs	r3, #0
   1a224:	4628      	mov	r0, r5
   1a226:	f002 fa8f 	bl	1c748 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1a22a:	4604      	mov	r4, r0
   1a22c:	2800      	cmp	r0, #0
   1a22e:	d035      	beq.n	1a29c <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   1a230:	f38a 8811 	msr	BASEPRI, sl
   1a234:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1a238:	9b01      	ldr	r3, [sp, #4]
   1a23a:	2b00      	cmp	r3, #0
   1a23c:	d052      	beq.n	1a2e4 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1a23e:	ea56 0307 	orrs.w	r3, r6, r7
   1a242:	d010      	beq.n	1a266 <net_buf_alloc_len+0x7a>
   1a244:	1c7b      	adds	r3, r7, #1
   1a246:	bf08      	it	eq
   1a248:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1a24c:	d00b      	beq.n	1a266 <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1a24e:	f003 f897 	bl	1d380 <sys_clock_tick_get>
   1a252:	ebb8 0600 	subs.w	r6, r8, r0
   1a256:	eb69 0701 	sbc.w	r7, r9, r1
   1a25a:	2e00      	cmp	r6, #0
   1a25c:	f177 0300 	sbcs.w	r3, r7, #0
   1a260:	bfbc      	itt	lt
   1a262:	2600      	movlt	r6, #0
   1a264:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a266:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1a268:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1a2fc <net_buf_alloc_len+0x110>
   1a26c:	2228      	movs	r2, #40	; 0x28
   1a26e:	fb02 8303 	mla	r3, r2, r3, r8
   1a272:	a901      	add	r1, sp, #4
   1a274:	6a1b      	ldr	r3, [r3, #32]
   1a276:	681b      	ldr	r3, [r3, #0]
   1a278:	4632      	mov	r2, r6
   1a27a:	681d      	ldr	r5, [r3, #0]
   1a27c:	4620      	mov	r0, r4
   1a27e:	463b      	mov	r3, r7
   1a280:	47a8      	blx	r5
   1a282:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1a284:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1a286:	bb70      	cbnz	r0, 1a2e6 <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
   1a288:	79a0      	ldrb	r0, [r4, #6]
   1a28a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a28e:	4621      	mov	r1, r4
   1a290:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1a294:	f00a fb3c 	bl	24910 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1a298:	462c      	mov	r4, r5
}
   1a29a:	e01f      	b.n	1a2dc <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   1a29c:	8b68      	ldrh	r0, [r5, #26]
   1a29e:	1e43      	subs	r3, r0, #1
   1a2a0:	836b      	strh	r3, [r5, #26]
   1a2a2:	f38a 8811 	msr	BASEPRI, sl
   1a2a6:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1a2aa:	8b2c      	ldrh	r4, [r5, #24]
   1a2ac:	1a24      	subs	r4, r4, r0
   1a2ae:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1a2b0:	2318      	movs	r3, #24
   1a2b2:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1a2b6:	4811      	ldr	r0, [pc, #68]	; (1a2fc <net_buf_alloc_len+0x110>)
   1a2b8:	4b11      	ldr	r3, [pc, #68]	; (1a300 <net_buf_alloc_len+0x114>)
   1a2ba:	1a2d      	subs	r5, r5, r0
   1a2bc:	10ed      	asrs	r5, r5, #3
   1a2be:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1a2c0:	71a5      	strb	r5, [r4, #6]
		goto success;
   1a2c2:	e7b9      	b.n	1a238 <net_buf_alloc_len+0x4c>
   1a2c4:	f38a 8811 	msr	BASEPRI, sl
   1a2c8:	f3bf 8f6f 	isb	sy
   1a2cc:	4632      	mov	r2, r6
   1a2ce:	463b      	mov	r3, r7
   1a2d0:	4628      	mov	r0, r5
   1a2d2:	f002 fa39 	bl	1c748 <z_impl_k_queue_get>
	if (!buf) {
   1a2d6:	4604      	mov	r4, r0
   1a2d8:	2800      	cmp	r0, #0
   1a2da:	d1ad      	bne.n	1a238 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1a2dc:	4620      	mov	r0, r4
   1a2de:	b002      	add	sp, #8
   1a2e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   1a2e4:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1a2e6:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1a2e8:	2201      	movs	r2, #1
	buf->frags = NULL;
   1a2ea:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1a2ec:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1a2ee:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1a2f0:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1a2f2:	6923      	ldr	r3, [r4, #16]
   1a2f4:	81e2      	strh	r2, [r4, #14]
   1a2f6:	60a3      	str	r3, [r4, #8]
	return buf;
   1a2f8:	e7f0      	b.n	1a2dc <net_buf_alloc_len+0xf0>
   1a2fa:	bf00      	nop
   1a2fc:	20000864 	.word	0x20000864
   1a300:	cccccccd 	.word	0xcccccccd

0001a304 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1a304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a308:	4d17      	ldr	r5, [pc, #92]	; (1a368 <net_buf_unref+0x64>)
   1a30a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1a30c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1a30e:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   1a310:	b90c      	cbnz	r4, 1a316 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1a312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1a316:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1a318:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1a31c:	3b01      	subs	r3, #1
   1a31e:	b2db      	uxtb	r3, r3
   1a320:	7123      	strb	r3, [r4, #4]
   1a322:	2b00      	cmp	r3, #0
   1a324:	d1f5      	bne.n	1a312 <net_buf_unref+0xe>
		if (buf->__buf) {
   1a326:	6921      	ldr	r1, [r4, #16]
   1a328:	b159      	cbz	r1, 1a342 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1a32a:	7963      	ldrb	r3, [r4, #5]
   1a32c:	079b      	lsls	r3, r3, #30
   1a32e:	d407      	bmi.n	1a340 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   1a330:	79a3      	ldrb	r3, [r4, #6]
   1a332:	fb07 5303 	mla	r3, r7, r3, r5
   1a336:	4620      	mov	r0, r4
   1a338:	6a1b      	ldr	r3, [r3, #32]
   1a33a:	681b      	ldr	r3, [r3, #0]
   1a33c:	689b      	ldr	r3, [r3, #8]
   1a33e:	4798      	blx	r3
			buf->__buf = NULL;
   1a340:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1a342:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1a344:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1a346:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1a34a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1a34c:	69db      	ldr	r3, [r3, #28]
   1a34e:	b11b      	cbz	r3, 1a358 <net_buf_unref+0x54>
			pool->destroy(buf);
   1a350:	4620      	mov	r0, r4
   1a352:	4798      	blx	r3
{
   1a354:	4644      	mov	r4, r8
   1a356:	e7db      	b.n	1a310 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1a358:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a35c:	4621      	mov	r1, r4
   1a35e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1a362:	f00a fad5 	bl	24910 <k_queue_prepend>
}
   1a366:	e7f5      	b.n	1a354 <net_buf_unref+0x50>
   1a368:	20000864 	.word	0x20000864

0001a36c <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1a36c:	b570      	push	{r4, r5, r6, lr}
   1a36e:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   1a370:	480d      	ldr	r0, [pc, #52]	; (1a3a8 <onoff_stop+0x3c>)
   1a372:	1a23      	subs	r3, r4, r0
   1a374:	109a      	asrs	r2, r3, #2
   1a376:	4b0d      	ldr	r3, [pc, #52]	; (1a3ac <onoff_stop+0x40>)
   1a378:	4353      	muls	r3, r2
   1a37a:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
   1a37c:	250c      	movs	r5, #12
   1a37e:	435d      	muls	r5, r3
   1a380:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
   1a384:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
   1a386:	4418      	add	r0, r3
   1a388:	2140      	movs	r1, #64	; 0x40
   1a38a:	f009 fe5c 	bl	24046 <set_off_state>
	if (err < 0) {
   1a38e:	1e01      	subs	r1, r0, #0
   1a390:	db04      	blt.n	1a39c <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   1a392:	4b07      	ldr	r3, [pc, #28]	; (1a3b0 <onoff_stop+0x44>)
   1a394:	442b      	add	r3, r5
   1a396:	685b      	ldr	r3, [r3, #4]
   1a398:	4798      	blx	r3
	return 0;
   1a39a:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   1a39c:	4620      	mov	r0, r4
   1a39e:	4633      	mov	r3, r6
}
   1a3a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1a3a4:	4718      	bx	r3
   1a3a6:	bf00      	nop
   1a3a8:	200025a4 	.word	0x200025a4
   1a3ac:	b6db6db7 	.word	0xb6db6db7
   1a3b0:	00025b08 	.word	0x00025b08

0001a3b4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1a3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1a3b8:	4c0f      	ldr	r4, [pc, #60]	; (1a3f8 <onoff_start+0x44>)
   1a3ba:	4d10      	ldr	r5, [pc, #64]	; (1a3fc <onoff_start+0x48>)
   1a3bc:	1b03      	subs	r3, r0, r4
   1a3be:	109b      	asrs	r3, r3, #2
   1a3c0:	435d      	muls	r5, r3
   1a3c2:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
   1a3c4:	250c      	movs	r5, #12
   1a3c6:	435d      	muls	r5, r3
{
   1a3c8:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   1a3ca:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
   1a3ce:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   1a3d0:	4420      	add	r0, r4
   1a3d2:	2140      	movs	r1, #64	; 0x40
   1a3d4:	f009 fe50 	bl	24078 <set_starting_state>
	if (err < 0) {
   1a3d8:	1e01      	subs	r1, r0, #0
   1a3da:	db08      	blt.n	1a3ee <onoff_start+0x3a>
	subdata->cb = cb;
   1a3dc:	4b08      	ldr	r3, [pc, #32]	; (1a400 <onoff_start+0x4c>)
   1a3de:	442c      	add	r4, r5
	subdata->user_data = user_data;
   1a3e0:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1a3e4:	4b07      	ldr	r3, [pc, #28]	; (1a404 <onoff_start+0x50>)
   1a3e6:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   1a3e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   1a3ec:	4718      	bx	r3
		notify(mgr, err);
   1a3ee:	4638      	mov	r0, r7
   1a3f0:	4633      	mov	r3, r6
}
   1a3f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   1a3f6:	4718      	bx	r3
   1a3f8:	200025a4 	.word	0x200025a4
   1a3fc:	b6db6db7 	.word	0xb6db6db7
   1a400:	000240db 	.word	0x000240db
   1a404:	00025b08 	.word	0x00025b08

0001a408 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1a408:	2200      	movs	r2, #0
{
   1a40a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1a40c:	2101      	movs	r1, #1
{
   1a40e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1a410:	4610      	mov	r0, r2
   1a412:	f7f8 f947 	bl	126a4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1a416:	2000      	movs	r0, #0
   1a418:	f7f8 f912 	bl	12640 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1a41c:	480f      	ldr	r0, [pc, #60]	; (1a45c <clk_init+0x54>)
   1a41e:	f001 fcd7 	bl	1bdd0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1a422:	4b0f      	ldr	r3, [pc, #60]	; (1a460 <clk_init+0x58>)
   1a424:	4298      	cmp	r0, r3
   1a426:	d115      	bne.n	1a454 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1a428:	f009 ffc1 	bl	243ae <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   1a42c:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1a42e:	490d      	ldr	r1, [pc, #52]	; (1a464 <clk_init+0x5c>)
   1a430:	4630      	mov	r0, r6
   1a432:	f007 fc6d 	bl	21d10 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1a436:	2800      	cmp	r0, #0
   1a438:	db0b      	blt.n	1a452 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1a43a:	2501      	movs	r5, #1
   1a43c:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   1a43e:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1a440:	4908      	ldr	r1, [pc, #32]	; (1a464 <clk_init+0x5c>)
   1a442:	f104 001c 	add.w	r0, r4, #28
   1a446:	f007 fc63 	bl	21d10 <onoff_manager_init>
		if (err < 0) {
   1a44a:	2800      	cmp	r0, #0
   1a44c:	db01      	blt.n	1a452 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1a44e:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   1a450:	2000      	movs	r0, #0
}
   1a452:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1a454:	f06f 0004 	mvn.w	r0, #4
   1a458:	e7fb      	b.n	1a452 <clk_init+0x4a>
   1a45a:	bf00      	nop
   1a45c:	0001a49d 	.word	0x0001a49d
   1a460:	0bad0000 	.word	0x0bad0000
   1a464:	00025b20 	.word	0x00025b20

0001a468 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1a468:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1a46a:	230c      	movs	r3, #12
   1a46c:	4809      	ldr	r0, [pc, #36]	; (1a494 <clkstarted_handle.constprop.0+0x2c>)
   1a46e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1a470:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1a472:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1a474:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   1a478:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1a47a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   1a47c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1a47e:	4418      	add	r0, r3
   1a480:	f009 fe18 	bl	240b4 <set_on_state>
	if (callback) {
   1a484:	b12d      	cbz	r5, 1a492 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1a486:	4632      	mov	r2, r6
   1a488:	462b      	mov	r3, r5
   1a48a:	4803      	ldr	r0, [pc, #12]	; (1a498 <clkstarted_handle.constprop.0+0x30>)
}
   1a48c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1a490:	4718      	bx	r3
}
   1a492:	bd70      	pop	{r4, r5, r6, pc}
   1a494:	200025a4 	.word	0x200025a4
   1a498:	00024fac 	.word	0x00024fac

0001a49c <clock_event_handler>:
	switch (event) {
   1a49c:	b110      	cbz	r0, 1a4a4 <clock_event_handler+0x8>
   1a49e:	2801      	cmp	r0, #1
   1a4a0:	d004      	beq.n	1a4ac <clock_event_handler+0x10>
   1a4a2:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1a4a4:	4b03      	ldr	r3, [pc, #12]	; (1a4b4 <clock_event_handler+0x18>)
   1a4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a4a8:	075b      	lsls	r3, r3, #29
   1a4aa:	d101      	bne.n	1a4b0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1a4ac:	f7ff bfdc 	b.w	1a468 <clkstarted_handle.constprop.0>
}
   1a4b0:	4770      	bx	lr
   1a4b2:	bf00      	nop
   1a4b4:	200025a4 	.word	0x200025a4

0001a4b8 <generic_hfclk_start>:
{
   1a4b8:	b508      	push	{r3, lr}
	__asm__ volatile(
   1a4ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a4be:	f3ef 8111 	mrs	r1, BASEPRI
   1a4c2:	f383 8812 	msr	BASEPRI_MAX, r3
   1a4c6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1a4ca:	4a12      	ldr	r2, [pc, #72]	; (1a514 <generic_hfclk_start+0x5c>)
   1a4cc:	6813      	ldr	r3, [r2, #0]
   1a4ce:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1a4d2:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1a4d6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1a4d8:	d00c      	beq.n	1a4f4 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1a4da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a4de:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1a4e2:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1a4e6:	f013 0301 	ands.w	r3, r3, #1
   1a4ea:	d003      	beq.n	1a4f4 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1a4ec:	480a      	ldr	r0, [pc, #40]	; (1a518 <generic_hfclk_start+0x60>)
   1a4ee:	f009 fde1 	bl	240b4 <set_on_state>
			already_started = true;
   1a4f2:	2301      	movs	r3, #1
	__asm__ volatile(
   1a4f4:	f381 8811 	msr	BASEPRI, r1
   1a4f8:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1a4fc:	b123      	cbz	r3, 1a508 <generic_hfclk_start+0x50>
}
   1a4fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1a502:	2000      	movs	r0, #0
   1a504:	f7ff bfb0 	b.w	1a468 <clkstarted_handle.constprop.0>
}
   1a508:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1a50c:	2001      	movs	r0, #1
   1a50e:	f001 bc4f 	b.w	1bdb0 <nrfx_clock_start>
   1a512:	bf00      	nop
   1a514:	200025f4 	.word	0x200025f4
   1a518:	200025e4 	.word	0x200025e4

0001a51c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a51c:	4b09      	ldr	r3, [pc, #36]	; (1a544 <generic_hfclk_stop+0x28>)
   1a51e:	f3bf 8f5b 	dmb	ish
   1a522:	e853 2f00 	ldrex	r2, [r3]
   1a526:	f022 0102 	bic.w	r1, r2, #2
   1a52a:	e843 1000 	strex	r0, r1, [r3]
   1a52e:	2800      	cmp	r0, #0
   1a530:	d1f7      	bne.n	1a522 <generic_hfclk_stop+0x6>
   1a532:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1a536:	07d3      	lsls	r3, r2, #31
   1a538:	d402      	bmi.n	1a540 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1a53a:	2001      	movs	r0, #1
   1a53c:	f009 bf32 	b.w	243a4 <nrfx_clock_stop>
}
   1a540:	4770      	bx	lr
   1a542:	bf00      	nop
   1a544:	200025f4 	.word	0x200025f4

0001a548 <api_blocking_start>:
{
   1a548:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1a54a:	2200      	movs	r2, #0
   1a54c:	2301      	movs	r3, #1
   1a54e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1a552:	ab04      	add	r3, sp, #16
   1a554:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1a558:	4a09      	ldr	r2, [pc, #36]	; (1a580 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1a55a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1a55e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1a560:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1a564:	f009 fddf 	bl	24126 <api_start>
	if (err < 0) {
   1a568:	2800      	cmp	r0, #0
   1a56a:	db05      	blt.n	1a578 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1a56c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1a570:	2300      	movs	r3, #0
   1a572:	4668      	mov	r0, sp
   1a574:	f002 fcc0 	bl	1cef8 <z_impl_k_sem_take>
}
   1a578:	b007      	add	sp, #28
   1a57a:	f85d fb04 	ldr.w	pc, [sp], #4
   1a57e:	bf00      	nop
   1a580:	000240f9 	.word	0x000240f9

0001a584 <z_nrf_clock_control_lf_on>:
{
   1a584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a588:	493a      	ldr	r1, [pc, #232]	; (1a674 <z_nrf_clock_control_lf_on+0xf0>)
   1a58a:	f3bf 8f5b 	dmb	ish
   1a58e:	4606      	mov	r6, r0
   1a590:	2201      	movs	r2, #1
   1a592:	e851 3f00 	ldrex	r3, [r1]
   1a596:	e841 2000 	strex	r0, r2, [r1]
   1a59a:	2800      	cmp	r0, #0
   1a59c:	d1f9      	bne.n	1a592 <z_nrf_clock_control_lf_on+0xe>
   1a59e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1a5a2:	b933      	cbnz	r3, 1a5b2 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1a5a4:	4934      	ldr	r1, [pc, #208]	; (1a678 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
   1a5a6:	4835      	ldr	r0, [pc, #212]	; (1a67c <z_nrf_clock_control_lf_on+0xf8>)
   1a5a8:	604b      	str	r3, [r1, #4]
   1a5aa:	60cb      	str	r3, [r1, #12]
   1a5ac:	608a      	str	r2, [r1, #8]
   1a5ae:	f007 fbc2 	bl	21d36 <onoff_request>
	switch (start_mode) {
   1a5b2:	1e73      	subs	r3, r6, #1
   1a5b4:	2b01      	cmp	r3, #1
   1a5b6:	d832      	bhi.n	1a61e <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1a5b8:	2e01      	cmp	r6, #1
   1a5ba:	d107      	bne.n	1a5cc <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1a5bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a5c0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1a5c4:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1a5c8:	2b01      	cmp	r3, #1
   1a5ca:	d028      	beq.n	1a61e <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1a5cc:	f00a fb0e 	bl	24bec <k_is_in_isr>
   1a5d0:	4604      	mov	r4, r0
   1a5d2:	b918      	cbnz	r0, 1a5dc <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
   1a5d4:	4b2a      	ldr	r3, [pc, #168]	; (1a680 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
   1a5d6:	781b      	ldrb	r3, [r3, #0]
   1a5d8:	2b00      	cmp	r3, #0
   1a5da:	d144      	bne.n	1a666 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
   1a5dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a5e0:	f3ef 8511 	mrs	r5, BASEPRI
   1a5e4:	f383 8812 	msr	BASEPRI_MAX, r3
   1a5e8:	f3bf 8f6f 	isb	sy
   1a5ec:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1a5ee:	4f25      	ldr	r7, [pc, #148]	; (1a684 <z_nrf_clock_control_lf_on+0x100>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a5f0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1a688 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a5f4:	f8df 9094 	ldr.w	r9, [pc, #148]	; 1a68c <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1a5f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a5fc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1a600:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   1a604:	03d2      	lsls	r2, r2, #15
   1a606:	d50c      	bpl.n	1a622 <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1a608:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1a60c:	2b01      	cmp	r3, #1
   1a60e:	d001      	beq.n	1a614 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1a610:	2e01      	cmp	r6, #1
   1a612:	d106      	bne.n	1a622 <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
   1a614:	b30c      	cbz	r4, 1a65a <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
   1a616:	f385 8811 	msr	BASEPRI, r5
   1a61a:	f3bf 8f6f 	isb	sy
}
   1a61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1a622:	b1ac      	cbz	r4, 1a650 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1a624:	4628      	mov	r0, r5
   1a626:	f7f7 ff6b 	bl	12500 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1a62a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a62e:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1a632:	2b00      	cmp	r3, #0
   1a634:	d1e0      	bne.n	1a5f8 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1a636:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   1a638:	2900      	cmp	r1, #0
   1a63a:	d0dd      	beq.n	1a5f8 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a63c:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1a63e:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1a640:	2301      	movs	r3, #1
   1a642:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   1a646:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a64a:	f8c9 3000 	str.w	r3, [r9]
}
   1a64e:	e7d3      	b.n	1a5f8 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
   1a650:	2100      	movs	r1, #0
   1a652:	2021      	movs	r0, #33	; 0x21
   1a654:	f002 fb96 	bl	1cd84 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1a658:	e7e7      	b.n	1a62a <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
   1a65a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a65e:	2202      	movs	r2, #2
   1a660:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1a664:	e7db      	b.n	1a61e <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
   1a666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a66a:	2202      	movs	r2, #2
   1a66c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1a670:	4605      	mov	r5, r0
}
   1a672:	e7bc      	b.n	1a5ee <z_nrf_clock_control_lf_on+0x6a>
   1a674:	200025f8 	.word	0x200025f8
   1a678:	20002594 	.word	0x20002594
   1a67c:	200025c0 	.word	0x200025c0
   1a680:	200037ad 	.word	0x200037ad
   1a684:	40000104 	.word	0x40000104
   1a688:	e000e100 	.word	0xe000e100
   1a68c:	40000008 	.word	0x40000008

0001a690 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1a690:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1a692:	4b09      	ldr	r3, [pc, #36]	; (1a6b8 <gpio_nrfx_init+0x28>)
   1a694:	781a      	ldrb	r2, [r3, #0]
   1a696:	b96a      	cbnz	r2, 1a6b4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1a698:	2101      	movs	r1, #1
   1a69a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1a69c:	2006      	movs	r0, #6
   1a69e:	2105      	movs	r1, #5
   1a6a0:	f7f8 f800 	bl	126a4 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1a6a4:	2006      	movs	r0, #6
   1a6a6:	f7f7 ffcb 	bl	12640 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1a6aa:	4b04      	ldr	r3, [pc, #16]	; (1a6bc <gpio_nrfx_init+0x2c>)
   1a6ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1a6b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1a6b4:	2000      	movs	r0, #0
   1a6b6:	bd08      	pop	{r3, pc}
   1a6b8:	200031a4 	.word	0x200031a4
   1a6bc:	40006000 	.word	0x40006000

0001a6c0 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1a6c0:	4b2b      	ldr	r3, [pc, #172]	; (1a770 <gpio_nrfx_config+0xb0>)
{
   1a6c2:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1a6c4:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1a6c6:	482b      	ldr	r0, [pc, #172]	; (1a774 <gpio_nrfx_config+0xb4>)
   1a6c8:	4013      	ands	r3, r2
   1a6ca:	4283      	cmp	r3, r0
   1a6cc:	d041      	beq.n	1a752 <gpio_nrfx_config+0x92>
   1a6ce:	d80d      	bhi.n	1a6ec <gpio_nrfx_config+0x2c>
   1a6d0:	2b06      	cmp	r3, #6
   1a6d2:	d015      	beq.n	1a700 <gpio_nrfx_config+0x40>
   1a6d4:	d805      	bhi.n	1a6e2 <gpio_nrfx_config+0x22>
   1a6d6:	b19b      	cbz	r3, 1a700 <gpio_nrfx_config+0x40>
   1a6d8:	2b02      	cmp	r3, #2
   1a6da:	d03c      	beq.n	1a756 <gpio_nrfx_config+0x96>
   1a6dc:	f06f 0015 	mvn.w	r0, #21
   1a6e0:	e036      	b.n	1a750 <gpio_nrfx_config+0x90>
   1a6e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1a6e6:	d1f9      	bne.n	1a6dc <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1a6e8:	2301      	movs	r3, #1
   1a6ea:	e009      	b.n	1a700 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1a6ec:	4822      	ldr	r0, [pc, #136]	; (1a778 <gpio_nrfx_config+0xb8>)
   1a6ee:	4283      	cmp	r3, r0
   1a6f0:	d033      	beq.n	1a75a <gpio_nrfx_config+0x9a>
   1a6f2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1a6f6:	d032      	beq.n	1a75e <gpio_nrfx_config+0x9e>
   1a6f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1a6fc:	d1ee      	bne.n	1a6dc <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1a6fe:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1a700:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1a702:	bf54      	ite	pl
   1a704:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1a708:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1a70a:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1a70e:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1a710:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1a714:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1a718:	d507      	bpl.n	1a72a <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1a71a:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1a71e:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1a720:	d01f      	beq.n	1a762 <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1a722:	2201      	movs	r2, #1
   1a724:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1a726:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1a72a:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
   1a72c:	4c13      	ldr	r4, [pc, #76]	; (1a77c <gpio_nrfx_config+0xbc>)
   1a72e:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1a730:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1a734:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
   1a738:	bf18      	it	ne
   1a73a:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1a73e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   1a742:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1a746:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1a74a:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
   1a74e:	2000      	movs	r0, #0
}
   1a750:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1a752:	2307      	movs	r3, #7
   1a754:	e7d4      	b.n	1a700 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1a756:	2304      	movs	r3, #4
   1a758:	e7d2      	b.n	1a700 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1a75a:	2305      	movs	r3, #5
   1a75c:	e7d0      	b.n	1a700 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1a75e:	2303      	movs	r3, #3
   1a760:	e7ce      	b.n	1a700 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1a762:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1a764:	bf42      	ittt	mi
   1a766:	2201      	movmi	r2, #1
   1a768:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1a76a:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   1a76e:	e7dc      	b.n	1a72a <gpio_nrfx_config+0x6a>
   1a770:	00f00006 	.word	0x00f00006
   1a774:	00100006 	.word	0x00100006
   1a778:	00400002 	.word	0x00400002
   1a77c:	50000300 	.word	0x50000300

0001a780 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1a780:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   1a784:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1a786:	4b08      	ldr	r3, [pc, #32]	; (1a7a8 <nrf_gpio_cfg_sense_set+0x28>)
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1a788:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   1a78a:	bf18      	it	ne
   1a78c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1a790:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1a794:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
   1a798:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1a79c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   1a7a0:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
   1a7a4:	4770      	bx	lr
   1a7a6:	bf00      	nop
   1a7a8:	50000300 	.word	0x50000300

0001a7ac <check_level_trigger_pins>:
{
   1a7ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   1a7b0:	6903      	ldr	r3, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1a7b2:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t out = data->pin_int_en;
   1a7b6:	68de      	ldr	r6, [r3, #12]
        case 1: return NRF_P1;
   1a7b8:	f8df b07c 	ldr.w	fp, [pc, #124]	; 1a838 <check_level_trigger_pins+0x8c>
{
   1a7bc:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
   1a7be:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1a7c2:	430a      	orrs	r2, r1
   1a7c4:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1a7c8:	f8da 2004 	ldr.w	r2, [sl, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1a7cc:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   1a7ce:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
   1a7d2:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   1a7d4:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
   1a7d8:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
   1a7da:	2401      	movs	r4, #1
	uint32_t pin = 0U;
   1a7dc:	f04f 0900 	mov.w	r9, #0
	while (check_pins) {
   1a7e0:	b917      	cbnz	r7, 1a7e8 <check_level_trigger_pins+0x3c>
}
   1a7e2:	4628      	mov	r0, r5
   1a7e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
   1a7e8:	423c      	tst	r4, r7
   1a7ea:	d021      	beq.n	1a830 <check_level_trigger_pins+0x84>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1a7ec:	f89a 3008 	ldrb.w	r3, [sl, #8]
   1a7f0:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
   1a7f4:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1a7f6:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
			if (!(level_pins & bit)) {
   1a7fa:	d114      	bne.n	1a826 <check_level_trigger_pins+0x7a>
    return pin_number >> 5;
   1a7fc:	0942      	lsrs	r2, r0, #5
        case 1: return NRF_P1;
   1a7fe:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1a800:	f000 031f 	and.w	r3, r0, #31
        case 1: return NRF_P1;
   1a804:	bf14      	ite	ne
   1a806:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
   1a80a:	465a      	moveq	r2, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1a80c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1a814:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
   1a818:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
   1a81a:	bf02      	ittt	eq
   1a81c:	f8d8 3000 	ldreq.w	r3, [r8]
   1a820:	4323      	orreq	r3, r4
   1a822:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1a826:	2100      	movs	r1, #0
   1a828:	f7ff ffaa 	bl	1a780 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   1a82c:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
   1a830:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   1a834:	0064      	lsls	r4, r4, #1
   1a836:	e7d3      	b.n	1a7e0 <check_level_trigger_pins+0x34>
   1a838:	50000300 	.word	0x50000300

0001a83c <gpio_nrfx_pin_interrupt_configure>:
{
   1a83c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a83e:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1a840:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   1a842:	6907      	ldr	r7, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1a844:	7a09      	ldrb	r1, [r1, #8]
   1a846:	f006 051f 	and.w	r5, r6, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   1a84a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1a84e:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
   1a852:	d110      	bne.n	1a876 <gpio_nrfx_pin_interrupt_configure+0x3a>
    return pin_number >> 5;
   1a854:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
   1a856:	2801      	cmp	r0, #1
    *p_pin = pin_number & 0x1F;
   1a858:	f005 011f 	and.w	r1, r5, #31
        case 1: return NRF_P1;
   1a85c:	485d      	ldr	r0, [pc, #372]	; (1a9d4 <gpio_nrfx_pin_interrupt_configure+0x198>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1a85e:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
   1a862:	bf18      	it	ne
   1a864:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1a868:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1a86c:	07c8      	lsls	r0, r1, #31
   1a86e:	d507      	bpl.n	1a880 <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
   1a870:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a874:	e093      	b.n	1a99e <gpio_nrfx_pin_interrupt_configure+0x162>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1a876:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1a87a:	68f9      	ldr	r1, [r7, #12]
   1a87c:	f000 8091 	beq.w	1a9a2 <gpio_nrfx_pin_interrupt_configure+0x166>
   1a880:	68f8      	ldr	r0, [r7, #12]
   1a882:	2101      	movs	r1, #1
   1a884:	40b1      	lsls	r1, r6
   1a886:	4301      	orrs	r1, r0
   1a888:	6978      	ldr	r0, [r7, #20]
   1a88a:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1a88c:	2101      	movs	r1, #1
   1a88e:	40b1      	lsls	r1, r6
   1a890:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1a894:	69ba      	ldr	r2, [r7, #24]
   1a896:	bf0c      	ite	eq
   1a898:	4308      	orreq	r0, r1
   1a89a:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1a89c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1a8a0:	bf0c      	ite	eq
   1a8a2:	430a      	orreq	r2, r1
   1a8a4:	438a      	bicne	r2, r1
   1a8a6:	61ba      	str	r2, [r7, #24]
   1a8a8:	693a      	ldr	r2, [r7, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1a8aa:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1a8ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1a8b0:	bf0c      	ite	eq
   1a8b2:	4311      	orreq	r1, r2
   1a8b4:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1a8b8:	4a47      	ldr	r2, [pc, #284]	; (1a9d8 <gpio_nrfx_pin_interrupt_configure+0x19c>)
   1a8ba:	6139      	str	r1, [r7, #16]
   1a8bc:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1a8c0:	2000      	movs	r0, #0
   1a8c2:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1a8c4:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1a8c8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1a8cc:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1a8d0:	428d      	cmp	r5, r1
   1a8d2:	d16b      	bne.n	1a9ac <gpio_nrfx_pin_interrupt_configure+0x170>
		    && (intenset & BIT(i))) {
   1a8d4:	fa23 f100 	lsr.w	r1, r3, r0
   1a8d8:	07c9      	lsls	r1, r1, #31
   1a8da:	d567      	bpl.n	1a9ac <gpio_nrfx_pin_interrupt_configure+0x170>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1a8dc:	0083      	lsls	r3, r0, #2
   1a8de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a8e2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1a8e6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1a8ea:	f021 0101 	bic.w	r1, r1, #1
   1a8ee:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1a8f2:	2301      	movs	r3, #1
   1a8f4:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1a8f6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1a8fa:	b2c0      	uxtb	r0, r0
   1a8fc:	f001 fa70 	bl	1bde0 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1a900:	4628      	mov	r0, r5
   1a902:	2100      	movs	r1, #0
   1a904:	f7ff ff3c 	bl	1a780 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1a908:	68f8      	ldr	r0, [r7, #12]
   1a90a:	40f0      	lsrs	r0, r6
   1a90c:	f010 0001 	ands.w	r0, r0, #1
   1a910:	d045      	beq.n	1a99e <gpio_nrfx_pin_interrupt_configure+0x162>
		if (data->trig_edge & BIT(pin)) {
   1a912:	6978      	ldr	r0, [r7, #20]
   1a914:	40f0      	lsrs	r0, r6
   1a916:	f010 0401 	ands.w	r4, r0, #1
   1a91a:	d04e      	beq.n	1a9ba <gpio_nrfx_pin_interrupt_configure+0x17e>
				if (data->double_edge & BIT(pin)) {
   1a91c:	69bb      	ldr	r3, [r7, #24]
   1a91e:	40f3      	lsrs	r3, r6
   1a920:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1a922:	bf5f      	itttt	pl
   1a924:	6939      	ldrpl	r1, [r7, #16]
   1a926:	fa21 f606 	lsrpl.w	r6, r1, r6
   1a92a:	f006 0601 	andpl.w	r6, r6, #1
   1a92e:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1a932:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1a936:	bf54      	ite	pl
   1a938:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1a93a:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1a93c:	f001 fa72 	bl	1be24 <nrfx_gpiote_channel_alloc>
   1a940:	4b26      	ldr	r3, [pc, #152]	; (1a9dc <gpio_nrfx_pin_interrupt_configure+0x1a0>)
   1a942:	4298      	cmp	r0, r3
   1a944:	d136      	bne.n	1a9b4 <gpio_nrfx_pin_interrupt_configure+0x178>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1a946:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1a94a:	008b      	lsls	r3, r1, #2
   1a94c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a950:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a954:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1a956:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1a95a:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   1a95e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   1a962:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a966:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1a96a:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
   1a96e:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
   1a970:	008a      	lsls	r2, r1, #2
   1a972:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1a976:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a97a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a97e:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a980:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a984:	6010      	str	r0, [r2, #0]
   1a986:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1a988:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1a98c:	f042 0201 	orr.w	r2, r2, #1
   1a990:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1a994:	4a10      	ldr	r2, [pc, #64]	; (1a9d8 <gpio_nrfx_pin_interrupt_configure+0x19c>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1a996:	2301      	movs	r3, #1
   1a998:	408b      	lsls	r3, r1
   1a99a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1a99e:	b003      	add	sp, #12
   1a9a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1a9a2:	2001      	movs	r0, #1
   1a9a4:	40b0      	lsls	r0, r6
   1a9a6:	ea21 0100 	bic.w	r1, r1, r0
   1a9aa:	e76d      	b.n	1a888 <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1a9ac:	3001      	adds	r0, #1
   1a9ae:	2808      	cmp	r0, #8
   1a9b0:	d188      	bne.n	1a8c4 <gpio_nrfx_pin_interrupt_configure+0x88>
   1a9b2:	e7a5      	b.n	1a900 <gpio_nrfx_pin_interrupt_configure+0xc4>
		return -ENODEV;
   1a9b4:	f06f 0012 	mvn.w	r0, #18
   1a9b8:	e7f1      	b.n	1a99e <gpio_nrfx_pin_interrupt_configure+0x162>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1a9ba:	6939      	ldr	r1, [r7, #16]
   1a9bc:	40f1      	lsrs	r1, r6
   1a9be:	f001 0101 	and.w	r1, r1, #1
   1a9c2:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1a9c6:	4628      	mov	r0, r5
   1a9c8:	b2c9      	uxtb	r1, r1
   1a9ca:	f7ff fed9 	bl	1a780 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1a9ce:	4620      	mov	r0, r4
   1a9d0:	e7e5      	b.n	1a99e <gpio_nrfx_pin_interrupt_configure+0x162>
   1a9d2:	bf00      	nop
   1a9d4:	50000300 	.word	0x50000300
   1a9d8:	40006000 	.word	0x40006000
   1a9dc:	0bad0000 	.word	0x0bad0000

0001a9e0 <gpiote_event_handler>:
{
   1a9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1a9e2:	2400      	movs	r4, #0
{
   1a9e4:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1a9e6:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
   1a9ea:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a9ee:	4e26      	ldr	r6, [pc, #152]	; (1aa88 <gpiote_event_handler+0xa8>)
   1a9f0:	6835      	ldr	r5, [r6, #0]
	if (port_event) {
   1a9f2:	b15d      	cbz	r5, 1aa0c <gpiote_event_handler+0x2c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
   1a9f4:	a902      	add	r1, sp, #8
   1a9f6:	4825      	ldr	r0, [pc, #148]	; (1aa8c <gpiote_event_handler+0xac>)
   1a9f8:	f7ff fed8 	bl	1a7ac <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   1a9fc:	a903      	add	r1, sp, #12
		fired_triggers[0] =
   1a9fe:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   1aa00:	4823      	ldr	r0, [pc, #140]	; (1aa90 <gpiote_event_handler+0xb0>)
   1aa02:	f7ff fed3 	bl	1a7ac <check_level_trigger_pins>
		fired_triggers[1] =
   1aa06:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1aa08:	6034      	str	r4, [r6, #0]
   1aa0a:	6833      	ldr	r3, [r6, #0]
    return p_reg->INTENSET & mask;
   1aa0c:	4c21      	ldr	r4, [pc, #132]	; (1aa94 <gpiote_event_handler+0xb4>)
{
   1aa0e:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1aa10:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1aa12:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   1aa14:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
   1aa18:	fa06 f102 	lsl.w	r1, r6, r2
   1aa1c:	4219      	tst	r1, r3
   1aa1e:	d01b      	beq.n	1aa58 <gpiote_event_handler+0x78>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1aa20:	0091      	lsls	r1, r2, #2
   1aa22:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1aa26:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   1aa2a:	680b      	ldr	r3, [r1, #0]
   1aa2c:	b1a3      	cbz	r3, 1aa58 <gpiote_event_handler+0x78>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1aa2e:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1aa32:	af04      	add	r7, sp, #16
   1aa34:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1aa38:	f8c1 c000 	str.w	ip, [r1]
   1aa3c:	f3c3 3040 	ubfx	r0, r3, #13, #1
   1aa40:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1aa44:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1aa48:	f850 7c10 	ldr.w	r7, [r0, #-16]
   1aa4c:	fa06 f303 	lsl.w	r3, r6, r3
   1aa50:	433b      	orrs	r3, r7
   1aa52:	f840 3c10 	str.w	r3, [r0, #-16]
   1aa56:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1aa58:	3201      	adds	r2, #1
   1aa5a:	2a08      	cmp	r2, #8
   1aa5c:	d1da      	bne.n	1aa14 <gpiote_event_handler+0x34>
	if (fired_triggers[0]) {
   1aa5e:	9a00      	ldr	r2, [sp, #0]
   1aa60:	b11a      	cbz	r2, 1aa6a <gpiote_event_handler+0x8a>
	gpio_fire_callbacks(list, port, pins);
   1aa62:	490a      	ldr	r1, [pc, #40]	; (1aa8c <gpiote_event_handler+0xac>)
   1aa64:	480c      	ldr	r0, [pc, #48]	; (1aa98 <gpiote_event_handler+0xb8>)
   1aa66:	f009 fb78 	bl	2415a <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   1aa6a:	9a01      	ldr	r2, [sp, #4]
   1aa6c:	b11a      	cbz	r2, 1aa76 <gpiote_event_handler+0x96>
	gpio_fire_callbacks(list, port, pins);
   1aa6e:	4908      	ldr	r1, [pc, #32]	; (1aa90 <gpiote_event_handler+0xb0>)
   1aa70:	480a      	ldr	r0, [pc, #40]	; (1aa9c <gpiote_event_handler+0xbc>)
   1aa72:	f009 fb72 	bl	2415a <gpio_fire_callbacks>
	if (port_event) {
   1aa76:	b12d      	cbz	r5, 1aa84 <gpiote_event_handler+0xa4>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   1aa78:	4804      	ldr	r0, [pc, #16]	; (1aa8c <gpiote_event_handler+0xac>)
   1aa7a:	f009 fbd8 	bl	2422e <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1aa7e:	4804      	ldr	r0, [pc, #16]	; (1aa90 <gpiote_event_handler+0xb0>)
   1aa80:	f009 fbd5 	bl	2422e <cfg_level_pins>
}
   1aa84:	b005      	add	sp, #20
   1aa86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1aa88:	4000617c 	.word	0x4000617c
   1aa8c:	0002500c 	.word	0x0002500c
   1aa90:	00025024 	.word	0x00025024
   1aa94:	40006000 	.word	0x40006000
   1aa98:	20002600 	.word	0x20002600
   1aa9c:	2000261c 	.word	0x2000261c

0001aaa0 <random_byte_get>:
	__asm__ volatile(
   1aaa0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1aaa4:	f3ef 8211 	mrs	r2, BASEPRI
   1aaa8:	f383 8812 	msr	BASEPRI_MAX, r3
   1aaac:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1aab0:	4b08      	ldr	r3, [pc, #32]	; (1aad4 <random_byte_get+0x34>)
   1aab2:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1aab4:	b159      	cbz	r1, 1aace <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1aab6:	4908      	ldr	r1, [pc, #32]	; (1aad8 <random_byte_get+0x38>)
   1aab8:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1aabc:	2100      	movs	r1, #0
   1aabe:	6019      	str	r1, [r3, #0]
   1aac0:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1aac2:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1aac4:	f382 8811 	msr	BASEPRI, r2
   1aac8:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1aacc:	4770      	bx	lr
	int retval = -EAGAIN;
   1aace:	f06f 000a 	mvn.w	r0, #10
   1aad2:	e7f7      	b.n	1aac4 <random_byte_get+0x24>
   1aad4:	4000d100 	.word	0x4000d100
   1aad8:	4000d000 	.word	0x4000d000

0001aadc <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1aadc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aade:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1aae0:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1aae2:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1aae4:	f04f 0540 	mov.w	r5, #64	; 0x40
   1aae8:	f3ef 8011 	mrs	r0, BASEPRI
   1aaec:	f385 8812 	msr	BASEPRI_MAX, r5
   1aaf0:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1aaf4:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1aaf6:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1aafa:	1ba4      	subs	r4, r4, r6
   1aafc:	403c      	ands	r4, r7
	if (available < len) {
   1aafe:	42a2      	cmp	r2, r4
		len = available;
   1ab00:	bf88      	it	hi
   1ab02:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1ab04:	eb06 0c02 	add.w	ip, r6, r2
   1ab08:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   1ab0c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1ab0e:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1ab12:	f380 8811 	msr	BASEPRI, r0
   1ab16:	f3bf 8f6f 	isb	sy
   1ab1a:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   1ab1c:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   1ab1e:	4282      	cmp	r2, r0
   1ab20:	d119      	bne.n	1ab56 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1ab22:	4576      	cmp	r6, lr
   1ab24:	d10d      	bne.n	1ab42 <rng_pool_get+0x66>
	__asm__ volatile(
   1ab26:	f04f 0540 	mov.w	r5, #64	; 0x40
   1ab2a:	f3ef 8211 	mrs	r2, BASEPRI
   1ab2e:	f385 8812 	msr	BASEPRI_MAX, r5
   1ab32:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1ab36:	781d      	ldrb	r5, [r3, #0]
   1ab38:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1ab3a:	f382 8811 	msr	BASEPRI, r2
   1ab3e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1ab42:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1ab44:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1ab46:	b288      	uxth	r0, r1
	available = available - len;
   1ab48:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   1ab4a:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ab4c:	bf22      	ittt	cs
   1ab4e:	4b06      	ldrcs	r3, [pc, #24]	; (1ab68 <rng_pool_get+0x8c>)
   1ab50:	2201      	movcs	r2, #1
   1ab52:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1ab54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1ab56:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   1ab5a:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1ab5c:	f89c c005 	ldrb.w	ip, [ip, #5]
   1ab60:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   1ab64:	403d      	ands	r5, r7
   1ab66:	e7da      	b.n	1ab1e <rng_pool_get+0x42>
   1ab68:	4000d000 	.word	0x4000d000

0001ab6c <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ab6c:	43db      	mvns	r3, r3
{
   1ab6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ab72:	f013 0501 	ands.w	r5, r3, #1
{
   1ab76:	460e      	mov	r6, r1
   1ab78:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ab7a:	d004      	beq.n	1ab86 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1ab7c:	4821      	ldr	r0, [pc, #132]	; (1ac04 <entropy_nrf5_get_entropy_isr+0x98>)
   1ab7e:	f7ff ffad 	bl	1aadc <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1ab82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1ab86:	2a00      	cmp	r2, #0
   1ab88:	d033      	beq.n	1abf2 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1ab8a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ab8e:	f3ef 8811 	mrs	r8, BASEPRI
   1ab92:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab96:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1ab9a:	200d      	movs	r0, #13
   1ab9c:	f7f7 fd74 	bl	12688 <arch_irq_is_enabled>
   1aba0:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1aba2:	200d      	movs	r0, #13
   1aba4:	f7f7 fd5c 	bl	12660 <arch_irq_disable>
	__asm__ volatile(
   1aba8:	f388 8811 	msr	BASEPRI, r8
   1abac:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1abb0:	4a15      	ldr	r2, [pc, #84]	; (1ac08 <entropy_nrf5_get_entropy_isr+0x9c>)
   1abb2:	6015      	str	r5, [r2, #0]
   1abb4:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1abb6:	4b15      	ldr	r3, [pc, #84]	; (1ac0c <entropy_nrf5_get_entropy_isr+0xa0>)
   1abb8:	2101      	movs	r1, #1
   1abba:	6019      	str	r1, [r3, #0]
   1abbc:	4914      	ldr	r1, [pc, #80]	; (1ac10 <entropy_nrf5_get_entropy_isr+0xa4>)
   1abbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1abc2:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   1abc6:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1abc8:	4691      	mov	r9, r2
   1abca:	468a      	mov	sl, r1
   1abcc:	4698      	mov	r8, r3
   1abce:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   1abd2:	b183      	cbz	r3, 1abf6 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1abd4:	f7ff ff64 	bl	1aaa0 <random_byte_get>
			if (byte < 0) {
   1abd8:	1e03      	subs	r3, r0, #0
   1abda:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   1abde:	dbf6      	blt.n	1abce <entropy_nrf5_get_entropy_isr+0x62>
   1abe0:	3d01      	subs	r5, #1
   1abe2:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1abe4:	5573      	strb	r3, [r6, r5]
		} while (len);
   1abe6:	2d00      	cmp	r5, #0
   1abe8:	d1f1      	bne.n	1abce <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1abea:	b117      	cbz	r7, 1abf2 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1abec:	200d      	movs	r0, #13
   1abee:	f7f7 fd27 	bl	12640 <arch_irq_enable>
	return cnt;
   1abf2:	4620      	mov	r0, r4
   1abf4:	e7c5      	b.n	1ab82 <entropy_nrf5_get_entropy_isr+0x16>
   1abf6:	f3bf 8f4f 	dsb	sy
				__WFE();
   1abfa:	bf20      	wfe
				__SEV();
   1abfc:	bf40      	sev
				__WFE();
   1abfe:	bf20      	wfe
   1ac00:	e7e5      	b.n	1abce <entropy_nrf5_get_entropy_isr+0x62>
   1ac02:	bf00      	nop
   1ac04:	20002664 	.word	0x20002664
   1ac08:	4000d100 	.word	0x4000d100
   1ac0c:	4000d000 	.word	0x4000d000
   1ac10:	e000e100 	.word	0xe000e100

0001ac14 <entropy_nrf5_get_entropy>:
{
   1ac14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1ac18:	4f13      	ldr	r7, [pc, #76]	; (1ac68 <entropy_nrf5_get_entropy+0x54>)
   1ac1a:	460d      	mov	r5, r1
   1ac1c:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ac1e:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1ac22:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1ac26:	b914      	cbnz	r4, 1ac2e <entropy_nrf5_get_entropy+0x1a>
}
   1ac28:	4620      	mov	r0, r4
   1ac2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ac2e:	f04f 33ff 	mov.w	r3, #4294967295
   1ac32:	f04f 32ff 	mov.w	r2, #4294967295
   1ac36:	4638      	mov	r0, r7
   1ac38:	f002 f95e 	bl	1cef8 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ac3c:	4622      	mov	r2, r4
   1ac3e:	4629      	mov	r1, r5
   1ac40:	4640      	mov	r0, r8
   1ac42:	f7ff ff4b 	bl	1aadc <rng_pool_get>
   1ac46:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1ac48:	4638      	mov	r0, r7
   1ac4a:	f002 f92f 	bl	1ceac <z_impl_k_sem_give>
		if (bytes == 0U) {
   1ac4e:	b93e      	cbnz	r6, 1ac60 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1ac50:	f04f 32ff 	mov.w	r2, #4294967295
   1ac54:	f04f 33ff 	mov.w	r3, #4294967295
   1ac58:	4648      	mov	r0, r9
   1ac5a:	f002 f94d 	bl	1cef8 <z_impl_k_sem_take>
			continue;
   1ac5e:	e7e2      	b.n	1ac26 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1ac60:	1ba4      	subs	r4, r4, r6
   1ac62:	b2a4      	uxth	r4, r4
		buf += bytes;
   1ac64:	4435      	add	r5, r6
   1ac66:	e7de      	b.n	1ac26 <entropy_nrf5_get_entropy+0x12>
   1ac68:	20002634 	.word	0x20002634

0001ac6c <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1ac6c:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ac6e:	4c19      	ldr	r4, [pc, #100]	; (1acd4 <entropy_nrf5_init+0x68>)
   1ac70:	2201      	movs	r2, #1
   1ac72:	4611      	mov	r1, r2
   1ac74:	4620      	mov	r0, r4
   1ac76:	f009 ffa9 	bl	24bcc <z_impl_k_sem_init>
   1ac7a:	2201      	movs	r2, #1
   1ac7c:	2100      	movs	r1, #0
   1ac7e:	f104 0018 	add.w	r0, r4, #24
   1ac82:	f009 ffa3 	bl	24bcc <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1ac86:	f240 4307 	movw	r3, #1031	; 0x407
   1ac8a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1ac8e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1ac92:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1ac94:	230c      	movs	r3, #12
   1ac96:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1ac9a:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1ac9c:	4b0e      	ldr	r3, [pc, #56]	; (1acd8 <entropy_nrf5_init+0x6c>)
   1ac9e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1aca2:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1aca6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1acaa:	f022 0201 	bic.w	r2, r2, #1
   1acae:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1acb2:	4a0a      	ldr	r2, [pc, #40]	; (1acdc <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   1acb4:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1acb6:	6015      	str	r5, [r2, #0]
   1acb8:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1acba:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1acbe:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1acc0:	6019      	str	r1, [r3, #0]
   1acc2:	200d      	movs	r0, #13
   1acc4:	f7f7 fcee 	bl	126a4 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1acc8:	200d      	movs	r0, #13
   1acca:	f7f7 fcb9 	bl	12640 <arch_irq_enable>

	return 0;
}
   1acce:	4628      	mov	r0, r5
   1acd0:	bd38      	pop	{r3, r4, r5, pc}
   1acd2:	bf00      	nop
   1acd4:	20002634 	.word	0x20002634
   1acd8:	4000d000 	.word	0x4000d000
   1acdc:	4000d100 	.word	0x4000d100

0001ace0 <isr>:
{
   1ace0:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1ace2:	f7ff fedd 	bl	1aaa0 <random_byte_get>
	if (byte < 0) {
   1ace6:	2800      	cmp	r0, #0
   1ace8:	db20      	blt.n	1ad2c <isr+0x4c>
	uint8_t last  = rngp->last;
   1acea:	4b17      	ldr	r3, [pc, #92]	; (1ad48 <isr+0x68>)
   1acec:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1acf0:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1acf4:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1acf8:	1a51      	subs	r1, r2, r1
   1acfa:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1acfe:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1ad00:	d10d      	bne.n	1ad1e <isr+0x3e>
	uint8_t last  = rngp->last;
   1ad02:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1ad06:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1ad0a:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1ad0e:	1a51      	subs	r1, r2, r1
   1ad10:	ea34 0101 	bics.w	r1, r4, r1
   1ad14:	d10b      	bne.n	1ad2e <isr+0x4e>
   1ad16:	4b0d      	ldr	r3, [pc, #52]	; (1ad4c <isr+0x6c>)
   1ad18:	2201      	movs	r2, #1
   1ad1a:	601a      	str	r2, [r3, #0]
}
   1ad1c:	e00e      	b.n	1ad3c <isr+0x5c>
	rngp->buffer[last] = byte;
   1ad1e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1ad20:	3201      	adds	r2, #1
   1ad22:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1ad24:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1ad28:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1ad2c:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1ad2e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1ad30:	3201      	adds	r2, #1
   1ad32:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1ad34:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1ad38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1ad3c:	4804      	ldr	r0, [pc, #16]	; (1ad50 <isr+0x70>)
}
   1ad3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ad42:	f002 b8b3 	b.w	1ceac <z_impl_k_sem_give>
   1ad46:	bf00      	nop
   1ad48:	20002634 	.word	0x20002634
   1ad4c:	4000d004 	.word	0x4000d004
   1ad50:	2000264c 	.word	0x2000264c

0001ad54 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1ad54:	4919      	ldr	r1, [pc, #100]	; (1adbc <sys_clock_timeout_handler+0x68>)
{
   1ad56:	b570      	push	{r4, r5, r6, lr}
   1ad58:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   1ad5a:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1ad5e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   1ad60:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1ad64:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1ad68:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   1ad6a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1ad6e:	f04f 0500 	mov.w	r5, #0
   1ad72:	d20a      	bcs.n	1ad8a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1ad74:	4b12      	ldr	r3, [pc, #72]	; (1adc0 <sys_clock_timeout_handler+0x6c>)
   1ad76:	6819      	ldr	r1, [r3, #0]
   1ad78:	060a      	lsls	r2, r1, #24
   1ad7a:	0a0b      	lsrs	r3, r1, #8
   1ad7c:	1992      	adds	r2, r2, r6
   1ad7e:	4911      	ldr	r1, [pc, #68]	; (1adc4 <sys_clock_timeout_handler+0x70>)
   1ad80:	f143 0300 	adc.w	r3, r3, #0
   1ad84:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   1ad88:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1ad8a:	f002 fa8d 	bl	1d2a8 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   1ad8e:	00a3      	lsls	r3, r4, #2
   1ad90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ad94:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1ad98:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   1ad9c:	42b2      	cmp	r2, r6
   1ad9e:	d10b      	bne.n	1adb8 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   1ada0:	b91d      	cbnz	r5, 1adaa <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
   1ada2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1ada6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1adaa:	4b07      	ldr	r3, [pc, #28]	; (1adc8 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1adac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   1adb0:	fa00 f404 	lsl.w	r4, r0, r4
   1adb4:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   1adb8:	bd70      	pop	{r4, r5, r6, pc}
   1adba:	bf00      	nop
   1adbc:	20001c28 	.word	0x20001c28
   1adc0:	20002690 	.word	0x20002690
   1adc4:	20001c10 	.word	0x20001c10
   1adc8:	40011000 	.word	0x40011000

0001adcc <compare_int_lock>:
{
   1adcc:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1adce:	2301      	movs	r3, #1
   1add0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1add2:	4a11      	ldr	r2, [pc, #68]	; (1ae18 <compare_int_lock+0x4c>)
   1add4:	f3bf 8f5b 	dmb	ish
   1add8:	43dc      	mvns	r4, r3
   1adda:	e852 1f00 	ldrex	r1, [r2]
   1adde:	ea01 0c04 	and.w	ip, r1, r4
   1ade2:	e842 ce00 	strex	lr, ip, [r2]
   1ade6:	f1be 0f00 	cmp.w	lr, #0
   1adea:	d1f6      	bne.n	1adda <compare_int_lock+0xe>
   1adec:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1adf0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1adf4:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   1adf8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1adfc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1ae00:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1ae04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ae08:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   1ae0c:	420b      	tst	r3, r1
}
   1ae0e:	bf14      	ite	ne
   1ae10:	2001      	movne	r0, #1
   1ae12:	2000      	moveq	r0, #0
   1ae14:	bd10      	pop	{r4, pc}
   1ae16:	bf00      	nop
   1ae18:	2000268c 	.word	0x2000268c

0001ae1c <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
   1ae1c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ae1e:	4a12      	ldr	r2, [pc, #72]	; (1ae68 <compare_int_unlock.part.0+0x4c>)
   1ae20:	f3bf 8f5b 	dmb	ish
   1ae24:	4083      	lsls	r3, r0
   1ae26:	e852 1f00 	ldrex	r1, [r2]
   1ae2a:	4319      	orrs	r1, r3
   1ae2c:	e842 1c00 	strex	ip, r1, [r2]
   1ae30:	f1bc 0f00 	cmp.w	ip, #0
   1ae34:	d1f7      	bne.n	1ae26 <compare_int_unlock.part.0+0xa>
   1ae36:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1ae3a:	4a0c      	ldr	r2, [pc, #48]	; (1ae6c <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ae3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1ae40:	4083      	lsls	r3, r0
   1ae42:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ae46:	4b0a      	ldr	r3, [pc, #40]	; (1ae70 <compare_int_unlock.part.0+0x54>)
   1ae48:	f3bf 8f5b 	dmb	ish
   1ae4c:	681b      	ldr	r3, [r3, #0]
   1ae4e:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1ae52:	fa23 f000 	lsr.w	r0, r3, r0
   1ae56:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ae58:	bf42      	ittt	mi
   1ae5a:	4b06      	ldrmi	r3, [pc, #24]	; (1ae74 <compare_int_unlock.part.0+0x58>)
   1ae5c:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1ae60:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1ae64:	4770      	bx	lr
   1ae66:	bf00      	nop
   1ae68:	2000268c 	.word	0x2000268c
   1ae6c:	40011000 	.word	0x40011000
   1ae70:	20002688 	.word	0x20002688
   1ae74:	e000e100 	.word	0xe000e100

0001ae78 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1ae78:	4b0d      	ldr	r3, [pc, #52]	; (1aeb0 <z_nrf_rtc_timer_read+0x38>)
   1ae7a:	681b      	ldr	r3, [r3, #0]
   1ae7c:	0a19      	lsrs	r1, r3, #8
   1ae7e:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1ae80:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   1ae84:	4b0b      	ldr	r3, [pc, #44]	; (1aeb4 <z_nrf_rtc_timer_read+0x3c>)
   1ae86:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1ae8a:	18c0      	adds	r0, r0, r3
   1ae8c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1ae90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1ae94:	d20a      	bcs.n	1aeac <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1ae96:	4b08      	ldr	r3, [pc, #32]	; (1aeb8 <z_nrf_rtc_timer_read+0x40>)
   1ae98:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ae9c:	4299      	cmp	r1, r3
   1ae9e:	bf08      	it	eq
   1aea0:	4290      	cmpeq	r0, r2
   1aea2:	d203      	bcs.n	1aeac <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1aea4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1aea8:	f141 0100 	adc.w	r1, r1, #0
}
   1aeac:	4770      	bx	lr
   1aeae:	bf00      	nop
   1aeb0:	20002690 	.word	0x20002690
   1aeb4:	40011000 	.word	0x40011000
   1aeb8:	20001c10 	.word	0x20001c10

0001aebc <compare_set>:
{
   1aebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aec0:	b085      	sub	sp, #20
   1aec2:	4616      	mov	r6, r2
   1aec4:	461f      	mov	r7, r3
   1aec6:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   1aec8:	f7ff ff80 	bl	1adcc <compare_int_lock>
   1aecc:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1aece:	f7ff ffd3 	bl	1ae78 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1aed2:	42b9      	cmp	r1, r7
   1aed4:	bf08      	it	eq
   1aed6:	42b0      	cmpeq	r0, r6
   1aed8:	d27f      	bcs.n	1afda <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
   1aeda:	ebb6 0800 	subs.w	r8, r6, r0
   1aede:	eb67 0901 	sbc.w	r9, r7, r1
   1aee2:	2300      	movs	r3, #0
   1aee4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1aee8:	454b      	cmp	r3, r9
   1aeea:	bf08      	it	eq
   1aeec:	4542      	cmpeq	r2, r8
   1aeee:	f0c0 8085 	bcc.w	1affc <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
   1aef2:	4b44      	ldr	r3, [pc, #272]	; (1b004 <compare_set+0x148>)
   1aef4:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   1aef8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1aefc:	429f      	cmp	r7, r3
   1aefe:	bf08      	it	eq
   1af00:	4296      	cmpeq	r6, r2
   1af02:	d054      	beq.n	1afae <compare_set+0xf2>
   1af04:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1af08:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
   1af0c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1af10:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1af14:	fa0b f205 	lsl.w	r2, fp, r5
   1af18:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1af1c:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1af20:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1af24:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
   1af26:	4a38      	ldr	r2, [pc, #224]	; (1b008 <compare_set+0x14c>)
    return p_reg->CC[ch];
   1af28:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
   1af2c:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1af30:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   1af34:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1af38:	461c      	mov	r4, r3
   1af3a:	4693      	mov	fp, r2
     return p_reg->COUNTER;
   1af3c:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1af40:	eba0 000a 	sub.w	r0, r0, sl
   1af44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1af48:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   1af4c:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   1af4e:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
   1af52:	d105      	bne.n	1af60 <compare_set+0xa4>
   1af54:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   1af56:	2013      	movs	r0, #19
   1af58:	f009 fe99 	bl	24c8e <z_impl_k_busy_wait>
   1af5c:	4a2a      	ldr	r2, [pc, #168]	; (1b008 <compare_set+0x14c>)
   1af5e:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
   1af60:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1af62:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   1af66:	eba4 000c 	sub.w	r0, r4, ip
   1af6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   1af6e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1af72:	bf88      	it	hi
   1af74:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1af76:	2000      	movs	r0, #0
   1af78:	f8c8 0000 	str.w	r0, [r8]
   1af7c:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   1af80:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1af84:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1af88:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   1af8c:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1af90:	4582      	cmp	sl, r0
   1af92:	d006      	beq.n	1afa2 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
   1af94:	1a20      	subs	r0, r4, r0
   1af96:	3802      	subs	r0, #2
   1af98:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   1af9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1afa0:	d819      	bhi.n	1afd6 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
   1afa2:	1ae4      	subs	r4, r4, r3
   1afa4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   1afa8:	1932      	adds	r2, r6, r4
   1afaa:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
   1afae:	4c15      	ldr	r4, [pc, #84]	; (1b004 <compare_set+0x148>)
   1afb0:	0129      	lsls	r1, r5, #4
   1afb2:	eb04 1005 	add.w	r0, r4, r5, lsl #4
   1afb6:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
   1afba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
   1afbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
   1afbe:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
   1afc0:	6043      	str	r3, [r0, #4]
	return ret;
   1afc2:	2400      	movs	r4, #0
	if (key) {
   1afc4:	9b01      	ldr	r3, [sp, #4]
   1afc6:	b113      	cbz	r3, 1afce <compare_set+0x112>
   1afc8:	4628      	mov	r0, r5
   1afca:	f7ff ff27 	bl	1ae1c <compare_int_unlock.part.0>
}
   1afce:	4620      	mov	r0, r4
   1afd0:	b005      	add	sp, #20
   1afd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afd6:	4620      	mov	r0, r4
   1afd8:	e7b0      	b.n	1af3c <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   1afda:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1afdc:	4a0b      	ldr	r2, [pc, #44]	; (1b00c <compare_set+0x150>)
   1afde:	f3bf 8f5b 	dmb	ish
   1afe2:	40ab      	lsls	r3, r5
   1afe4:	e852 1f00 	ldrex	r1, [r2]
   1afe8:	4319      	orrs	r1, r3
   1afea:	e842 1000 	strex	r0, r1, [r2]
   1afee:	2800      	cmp	r0, #0
   1aff0:	d1f8      	bne.n	1afe4 <compare_set+0x128>
   1aff2:	f3bf 8f5b 	dmb	ish
   1aff6:	4632      	mov	r2, r6
   1aff8:	463b      	mov	r3, r7
   1affa:	e7d8      	b.n	1afae <compare_set+0xf2>
			return -EINVAL;
   1affc:	f06f 0415 	mvn.w	r4, #21
   1b000:	e7e0      	b.n	1afc4 <compare_set+0x108>
   1b002:	bf00      	nop
   1b004:	20001c18 	.word	0x20001c18
   1b008:	40011000 	.word	0x40011000
   1b00c:	20002688 	.word	0x20002688

0001b010 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   1b010:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return p_reg->INTENSET & mask;
   1b014:	4c2a      	ldr	r4, [pc, #168]	; (1b0c0 <rtc_nrf_isr+0xb0>)
   1b016:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1b01a:	0799      	lsls	r1, r3, #30
   1b01c:	d509      	bpl.n	1b032 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b01e:	4b29      	ldr	r3, [pc, #164]	; (1b0c4 <rtc_nrf_isr+0xb4>)
   1b020:	681a      	ldr	r2, [r3, #0]
   1b022:	b132      	cbz	r2, 1b032 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1b024:	2200      	movs	r2, #0
   1b026:	601a      	str	r2, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   1b028:	4a27      	ldr	r2, [pc, #156]	; (1b0c8 <rtc_nrf_isr+0xb8>)
   1b02a:	681b      	ldr	r3, [r3, #0]
   1b02c:	6813      	ldr	r3, [r2, #0]
   1b02e:	3301      	adds	r3, #1
   1b030:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b032:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b036:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   1b038:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1b03c:	03d2      	lsls	r2, r2, #15
   1b03e:	d52c      	bpl.n	1b09a <rtc_nrf_isr+0x8a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b040:	f3bf 8f5b 	dmb	ish
   1b044:	4a21      	ldr	r2, [pc, #132]	; (1b0cc <rtc_nrf_isr+0xbc>)
   1b046:	e852 1f00 	ldrex	r1, [r2]
   1b04a:	f021 0001 	bic.w	r0, r1, #1
   1b04e:	e842 0500 	strex	r5, r0, [r2]
   1b052:	2d00      	cmp	r5, #0
   1b054:	d1f7      	bne.n	1b046 <rtc_nrf_isr+0x36>
   1b056:	f3bf 8f5b 	dmb	ish
   1b05a:	4a1d      	ldr	r2, [pc, #116]	; (1b0d0 <rtc_nrf_isr+0xc0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1b05c:	b909      	cbnz	r1, 1b062 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b05e:	6811      	ldr	r1, [r2, #0]
		if (result) {
   1b060:	b1d9      	cbz	r1, 1b09a <rtc_nrf_isr+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1b062:	2500      	movs	r5, #0
   1b064:	6015      	str	r5, [r2, #0]
   1b066:	6812      	ldr	r2, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b068:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   1b06c:	f7ff ff04 	bl	1ae78 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b070:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b074:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1b076:	4b17      	ldr	r3, [pc, #92]	; (1b0d4 <rtc_nrf_isr+0xc4>)
   1b078:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   1b07c:	4549      	cmp	r1, r9
   1b07e:	bf08      	it	eq
   1b080:	4540      	cmpeq	r0, r8
   1b082:	d20f      	bcs.n	1b0a4 <rtc_nrf_isr+0x94>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1b084:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b086:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1b08a:	b141      	cbz	r1, 1b09e <rtc_nrf_isr+0x8e>
			handler(chan, expire_time, user_context);
   1b08c:	f8cd a000 	str.w	sl, [sp]
   1b090:	4642      	mov	r2, r8
   1b092:	464b      	mov	r3, r9
   1b094:	2000      	movs	r0, #0
   1b096:	4788      	blx	r1
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1b098:	e001      	b.n	1b09e <rtc_nrf_isr+0x8e>
   1b09a:	f383 8810 	msr	PRIMASK, r3
		process_channel(chan);
	}
}
   1b09e:	b002      	add	sp, #8
   1b0a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1b0a4:	f04f 36ff 	mov.w	r6, #4294967295
   1b0a8:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
   1b0ac:	e9d3 1a00 	ldrd	r1, sl, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1b0b0:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
   1b0b4:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1b0b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1b0ba:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   1b0be:	e7e2      	b.n	1b086 <rtc_nrf_isr+0x76>
   1b0c0:	40011000 	.word	0x40011000
   1b0c4:	40011104 	.word	0x40011104
   1b0c8:	20002690 	.word	0x20002690
   1b0cc:	20002688 	.word	0x20002688
   1b0d0:	40011140 	.word	0x40011140
   1b0d4:	20001c18 	.word	0x20001c18

0001b0d8 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   1b0d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1b0da:	4b1a      	ldr	r3, [pc, #104]	; (1b144 <sys_clock_driver_init+0x6c>)
    p_reg->PRESCALER = val;
   1b0dc:	4d1a      	ldr	r5, [pc, #104]	; (1b148 <sys_clock_driver_init+0x70>)
   1b0de:	2400      	movs	r4, #0
   1b0e0:	f04f 30ff 	mov.w	r0, #4294967295
   1b0e4:	f04f 31ff 	mov.w	r1, #4294967295
   1b0e8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1b0ec:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1b0f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1b0f4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b0f8:	4b14      	ldr	r3, [pc, #80]	; (1b14c <sys_clock_driver_init+0x74>)
   1b0fa:	2602      	movs	r6, #2
   1b0fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1b100:	2101      	movs	r1, #1
   1b102:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1b106:	2011      	movs	r0, #17
   1b108:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1b10c:	4622      	mov	r2, r4
   1b10e:	f7f7 fac9 	bl	126a4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1b112:	2011      	movs	r0, #17
   1b114:	f7f7 fa94 	bl	12640 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1b118:	4a0d      	ldr	r2, [pc, #52]	; (1b150 <sys_clock_driver_init+0x78>)
    p_reg->INTENSET = mask;
   1b11a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1b11e:	2301      	movs	r3, #1
   1b120:	6013      	str	r3, [r2, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1b122:	4a0c      	ldr	r2, [pc, #48]	; (1b154 <sys_clock_driver_init+0x7c>)
   1b124:	602b      	str	r3, [r5, #0]
   1b126:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1b128:	4b0b      	ldr	r3, [pc, #44]	; (1b158 <sys_clock_driver_init+0x80>)
   1b12a:	4a0c      	ldr	r2, [pc, #48]	; (1b15c <sys_clock_driver_init+0x84>)
   1b12c:	9300      	str	r3, [sp, #0]
   1b12e:	9401      	str	r4, [sp, #4]
   1b130:	2300      	movs	r3, #0
   1b132:	4620      	mov	r0, r4
   1b134:	f7ff fec2 	bl	1aebc <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1b138:	4630      	mov	r0, r6
   1b13a:	f7ff fa23 	bl	1a584 <z_nrf_clock_control_lf_on>

	return 0;
}
   1b13e:	4620      	mov	r0, r4
   1b140:	b002      	add	sp, #8
   1b142:	bd70      	pop	{r4, r5, r6, pc}
   1b144:	20001c18 	.word	0x20001c18
   1b148:	40011000 	.word	0x40011000
   1b14c:	e000e100 	.word	0xe000e100
   1b150:	40011008 	.word	0x40011008
   1b154:	2000268c 	.word	0x2000268c
   1b158:	0001ad55 	.word	0x0001ad55
   1b15c:	007fffff 	.word	0x007fffff

0001b160 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1b160:	4b14      	ldr	r3, [pc, #80]	; (1b1b4 <sys_clock_set_timeout+0x54>)
{
   1b162:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1b164:	f1b0 3fff 	cmp.w	r0, #4294967295
   1b168:	bf08      	it	eq
   1b16a:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1b16c:	1e44      	subs	r4, r0, #1
   1b16e:	2c00      	cmp	r4, #0
   1b170:	dd1e      	ble.n	1b1b0 <sys_clock_set_timeout+0x50>
   1b172:	429c      	cmp	r4, r3
   1b174:	bfa8      	it	ge
   1b176:	461c      	movge	r4, r3

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1b178:	f7ff fe7e 	bl	1ae78 <z_nrf_rtc_timer_read>
   1b17c:	4b0e      	ldr	r3, [pc, #56]	; (1b1b8 <sys_clock_set_timeout+0x58>)
		cyc = MAX_CYCLES;
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1b17e:	490f      	ldr	r1, [pc, #60]	; (1b1bc <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1b180:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b184:	1a80      	subs	r0, r0, r2
		ticks = 0;
   1b186:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1b18a:	bf28      	it	cs
   1b18c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1b18e:	3001      	adds	r0, #1
   1b190:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
   1b192:	4808      	ldr	r0, [pc, #32]	; (1b1b4 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1b194:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   1b196:	4284      	cmp	r4, r0
   1b198:	bf28      	it	cs
   1b19a:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1b19c:	1912      	adds	r2, r2, r4
   1b19e:	f04f 0000 	mov.w	r0, #0
   1b1a2:	9001      	str	r0, [sp, #4]
   1b1a4:	f143 0300 	adc.w	r3, r3, #0
   1b1a8:	f7ff fe88 	bl	1aebc <compare_set>
}
   1b1ac:	b002      	add	sp, #8
   1b1ae:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1b1b0:	2400      	movs	r4, #0
   1b1b2:	e7e1      	b.n	1b178 <sys_clock_set_timeout+0x18>
   1b1b4:	007fffff 	.word	0x007fffff
   1b1b8:	20001c28 	.word	0x20001c28
   1b1bc:	0001ad55 	.word	0x0001ad55

0001b1c0 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
   1b1c0:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1b1c2:	f7ff fe59 	bl	1ae78 <z_nrf_rtc_timer_read>
   1b1c6:	4b02      	ldr	r3, [pc, #8]	; (1b1d0 <sys_clock_elapsed+0x10>)
   1b1c8:	681b      	ldr	r3, [r3, #0]
}
   1b1ca:	1ac0      	subs	r0, r0, r3
   1b1cc:	bd08      	pop	{r3, pc}
   1b1ce:	bf00      	nop
   1b1d0:	20001c28 	.word	0x20001c28

0001b1d4 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1b1d4:	4602      	mov	r2, r0
   1b1d6:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1b1d8:	4801      	ldr	r0, [pc, #4]	; (1b1e0 <multithreading_lock_acquire+0xc>)
   1b1da:	f001 b96d 	b.w	1c4b8 <z_impl_k_mutex_lock>
   1b1de:	bf00      	nop
   1b1e0:	20000784 	.word	0x20000784

0001b1e4 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1b1e4:	4801      	ldr	r0, [pc, #4]	; (1b1ec <multithreading_lock_release+0x8>)
   1b1e6:	f001 b9e5 	b.w	1c5b4 <z_impl_k_mutex_unlock>
   1b1ea:	bf00      	nop
   1b1ec:	20000784 	.word	0x20000784

0001b1f0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1b1f0:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1b1f2:	f7f6 fe09 	bl	11e08 <z_impl_log_panic>
   1b1f6:	4b06      	ldr	r3, [pc, #24]	; (1b210 <k_sys_fatal_error_handler+0x20>)
   1b1f8:	4906      	ldr	r1, [pc, #24]	; (1b214 <k_sys_fatal_error_handler+0x24>)
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1b1fa:	4807      	ldr	r0, [pc, #28]	; (1b218 <k_sys_fatal_error_handler+0x28>)
   1b1fc:	1ac9      	subs	r1, r1, r3
   1b1fe:	08c9      	lsrs	r1, r1, #3
   1b200:	0189      	lsls	r1, r1, #6
   1b202:	f041 0101 	orr.w	r1, r1, #1
   1b206:	f006 fba3 	bl	21950 <log_0>
		sys_arch_reboot(0);
   1b20a:	2000      	movs	r0, #0
   1b20c:	f7f7 fec6 	bl	12f9c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1b210:	00025224 	.word	0x00025224
   1b214:	000252a4 	.word	0x000252a4
   1b218:	00027aa4 	.word	0x00027aa4

0001b21c <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   1b21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   1b220:	4c0b      	ldr	r4, [pc, #44]	; (1b250 <bt_rand+0x34>)
   1b222:	6823      	ldr	r3, [r4, #0]
{
   1b224:	4605      	mov	r5, r0
   1b226:	460e      	mov	r6, r1
   1b228:	4627      	mov	r7, r4
	if (unlikely(!dev)) {
   1b22a:	b13b      	cbz	r3, 1b23c <bt_rand+0x20>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1b22c:	6838      	ldr	r0, [r7, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1b22e:	6883      	ldr	r3, [r0, #8]
   1b230:	b2b2      	uxth	r2, r6
   1b232:	4629      	mov	r1, r5
   1b234:	681b      	ldr	r3, [r3, #0]
}
   1b236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b23a:	4718      	bx	r3
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1b23c:	4805      	ldr	r0, [pc, #20]	; (1b254 <bt_rand+0x38>)
   1b23e:	f000 ff71 	bl	1c124 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1b242:	6020      	str	r0, [r4, #0]
		if (!dev) {
   1b244:	2800      	cmp	r0, #0
   1b246:	d1f1      	bne.n	1b22c <bt_rand+0x10>
}
   1b248:	f06f 0012 	mvn.w	r0, #18
   1b24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b250:	20002694 	.word	0x20002694
   1b254:	00027a96 	.word	0x00027a96

0001b258 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   1b258:	460a      	mov	r2, r1
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1b25a:	4905      	ldr	r1, [pc, #20]	; (1b270 <rand_prio_low_vector_get_blocking+0x18>)
{
   1b25c:	b410      	push	{r4}
   1b25e:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1b260:	6808      	ldr	r0, [r1, #0]
   1b262:	6881      	ldr	r1, [r0, #8]
   1b264:	680c      	ldr	r4, [r1, #0]
   1b266:	4619      	mov	r1, r3
   1b268:	4623      	mov	r3, r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   1b26a:	bc10      	pop	{r4}
   1b26c:	4718      	bx	r3
   1b26e:	bf00      	nop
   1b270:	20002698 	.word	0x20002698

0001b274 <sdc_assertion_handler>:
{
   1b274:	b538      	push	{r3, r4, r5, lr}
   1b276:	4b0b      	ldr	r3, [pc, #44]	; (1b2a4 <sdc_assertion_handler+0x30>)
   1b278:	4c0b      	ldr	r4, [pc, #44]	; (1b2a8 <sdc_assertion_handler+0x34>)
   1b27a:	1ae4      	subs	r4, r4, r3
   1b27c:	460d      	mov	r5, r1
   1b27e:	08e4      	lsrs	r4, r4, #3
   1b280:	f7f6 fc54 	bl	11b2c <z_log_strdup>
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   1b284:	01a4      	lsls	r4, r4, #6
   1b286:	f044 0401 	orr.w	r4, r4, #1
   1b28a:	4601      	mov	r1, r0
   1b28c:	4623      	mov	r3, r4
   1b28e:	4807      	ldr	r0, [pc, #28]	; (1b2ac <sdc_assertion_handler+0x38>)
   1b290:	462a      	mov	r2, r5
   1b292:	f006 fb7e 	bl	21992 <log_2>
	k_oops();
   1b296:	4040      	eors	r0, r0
   1b298:	f380 8811 	msr	BASEPRI, r0
   1b29c:	f04f 0003 	mov.w	r0, #3
   1b2a0:	df02      	svc	2
}
   1b2a2:	bd38      	pop	{r3, r4, r5, pc}
   1b2a4:	00025224 	.word	0x00025224
   1b2a8:	000252ec 	.word	0x000252ec
   1b2ac:	00027acc 	.word	0x00027acc

0001b2b0 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1b2b0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1b2b2:	4804      	ldr	r0, [pc, #16]	; (1b2c4 <hci_driver_init+0x14>)
   1b2b4:	f7fc fa3a 	bl	1772c <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   1b2b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   1b2bc:	4802      	ldr	r0, [pc, #8]	; (1b2c8 <hci_driver_init+0x18>)
   1b2be:	f7e9 bc8f 	b.w	4be0 <sdc_init>
   1b2c2:	bf00      	nop
   1b2c4:	00025b78 	.word	0x00025b78
   1b2c8:	0001b275 	.word	0x0001b275

0001b2cc <rand_prio_low_vector_get>:
{
   1b2cc:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1b2ce:	4b08      	ldr	r3, [pc, #32]	; (1b2f0 <rand_prio_low_vector_get+0x24>)
{
   1b2d0:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1b2d2:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1b2d4:	6883      	ldr	r3, [r0, #8]
   1b2d6:	685d      	ldr	r5, [r3, #4]
   1b2d8:	460a      	mov	r2, r1
   1b2da:	b135      	cbz	r5, 1b2ea <rand_prio_low_vector_get+0x1e>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1b2dc:	2300      	movs	r3, #0
   1b2de:	4621      	mov	r1, r4
   1b2e0:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1b2e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1b2e6:	b2c0      	uxtb	r0, r0
   1b2e8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1b2ea:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b2ee:	e7f8      	b.n	1b2e2 <rand_prio_low_vector_get+0x16>
   1b2f0:	20002698 	.word	0x20002698

0001b2f4 <hci_driver_open>:
{
   1b2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b2f6:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1b2f8:	2200      	movs	r2, #0
   1b2fa:	2300      	movs	r3, #0
   1b2fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1b300:	2300      	movs	r3, #0
   1b302:	f06f 0209 	mvn.w	r2, #9
   1b306:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1b30a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1b30e:	9300      	str	r3, [sp, #0]
   1b310:	4955      	ldr	r1, [pc, #340]	; (1b468 <hci_driver_open+0x174>)
   1b312:	4b56      	ldr	r3, [pc, #344]	; (1b46c <hci_driver_open+0x178>)
   1b314:	4856      	ldr	r0, [pc, #344]	; (1b470 <hci_driver_open+0x17c>)
   1b316:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1b31a:	f001 fe63 	bl	1cfe4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1b31e:	4955      	ldr	r1, [pc, #340]	; (1b474 <hci_driver_open+0x180>)
   1b320:	4853      	ldr	r0, [pc, #332]	; (1b470 <hci_driver_open+0x17c>)
   1b322:	4c55      	ldr	r4, [pc, #340]	; (1b478 <hci_driver_open+0x184>)
   1b324:	f009 fc68 	bl	24bf8 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   1b328:	a80b      	add	r0, sp, #44	; 0x2c
   1b32a:	f7e9 fbcb 	bl	4ac4 <sdc_build_revision_get>
   1b32e:	4b53      	ldr	r3, [pc, #332]	; (1b47c <hci_driver_open+0x188>)
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1b330:	4853      	ldr	r0, [pc, #332]	; (1b480 <hci_driver_open+0x18c>)
   1b332:	1ae4      	subs	r4, r4, r3
   1b334:	08e4      	lsrs	r4, r4, #3
   1b336:	01a4      	lsls	r4, r4, #6
   1b338:	f044 0303 	orr.w	r3, r4, #3
   1b33c:	2214      	movs	r2, #20
   1b33e:	a90b      	add	r1, sp, #44	; 0x2c
   1b340:	f006 fb67 	bl	21a12 <log_hexdump>
			err = sdc_support_adv();
   1b344:	f7e9 fccc 	bl	4ce0 <sdc_support_adv>
			if (err) {
   1b348:	b110      	cbz	r0, 1b350 <hci_driver_open+0x5c>
		return -err;
   1b34a:	2086      	movs	r0, #134	; 0x86
}
   1b34c:	b011      	add	sp, #68	; 0x44
   1b34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sdc_support_slave();
   1b350:	f7e9 fcf6 	bl	4d40 <sdc_support_slave>
		if (err) {
   1b354:	2800      	cmp	r0, #0
   1b356:	d1f8      	bne.n	1b34a <hci_driver_open+0x56>
		err = sdc_support_dle();
   1b358:	f7e9 fcd2 	bl	4d00 <sdc_support_dle>
		if (err) {
   1b35c:	2800      	cmp	r0, #0
   1b35e:	d1f4      	bne.n	1b34a <hci_driver_open+0x56>
		err = sdc_support_le_2m_phy();
   1b360:	f7e9 fcde 	bl	4d20 <sdc_support_le_2m_phy>
		if (err) {
   1b364:	4606      	mov	r6, r0
   1b366:	2800      	cmp	r0, #0
   1b368:	d1ef      	bne.n	1b34a <hci_driver_open+0x56>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b36a:	ad08      	add	r5, sp, #32
   1b36c:	462a      	mov	r2, r5
   1b36e:	2101      	movs	r1, #1
	cfg.master_count.count = SDC_MASTER_COUNT;
   1b370:	f88d 0020 	strb.w	r0, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b374:	f7e9 fbb4 	bl	4ae0 <sdc_cfg_set>
	if (required_memory < 0) {
   1b378:	2800      	cmp	r0, #0
   1b37a:	dbe7      	blt.n	1b34c <hci_driver_open+0x58>
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   1b37c:	2701      	movs	r7, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b37e:	462a      	mov	r2, r5
   1b380:	2102      	movs	r1, #2
   1b382:	4630      	mov	r0, r6
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   1b384:	f88d 7020 	strb.w	r7, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b388:	f7e9 fbaa 	bl	4ae0 <sdc_cfg_set>
	if (required_memory < 0) {
   1b38c:	2800      	cmp	r0, #0
   1b38e:	dbdd      	blt.n	1b34c <hci_driver_open+0x58>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1b390:	4b3c      	ldr	r3, [pc, #240]	; (1b484 <hci_driver_open+0x190>)
   1b392:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b394:	462a      	mov	r2, r5
   1b396:	2103      	movs	r1, #3
   1b398:	4630      	mov	r0, r6
   1b39a:	f7e9 fba1 	bl	4ae0 <sdc_cfg_set>
	if (required_memory < 0) {
   1b39e:	2800      	cmp	r0, #0
   1b3a0:	dbd4      	blt.n	1b34c <hci_driver_open+0x58>
	cfg.event_length.event_length_us =
   1b3a2:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b3a6:	462a      	mov	r2, r5
   1b3a8:	2104      	movs	r1, #4
   1b3aa:	4630      	mov	r0, r6
	cfg.event_length.event_length_us =
   1b3ac:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b3ae:	f7e9 fb97 	bl	4ae0 <sdc_cfg_set>
	if (required_memory < 0) {
   1b3b2:	2800      	cmp	r0, #0
   1b3b4:	dbca      	blt.n	1b34c <hci_driver_open+0x58>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b3b6:	462a      	mov	r2, r5
   1b3b8:	2105      	movs	r1, #5
   1b3ba:	4630      	mov	r0, r6
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1b3bc:	f88d 7020 	strb.w	r7, [sp, #32]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b3c0:	f7e9 fb8e 	bl	4ae0 <sdc_cfg_set>
	if (required_memory < 0) {
   1b3c4:	2800      	cmp	r0, #0
   1b3c6:	dbc1      	blt.n	1b34c <hci_driver_open+0x58>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1b3c8:	231f      	movs	r3, #31
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b3ca:	462a      	mov	r2, r5
   1b3cc:	2107      	movs	r1, #7
   1b3ce:	4630      	mov	r0, r6
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1b3d0:	f8ad 3020 	strh.w	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b3d4:	f7e9 fb84 	bl	4ae0 <sdc_cfg_set>
		if (required_memory < 0) {
   1b3d8:	2800      	cmp	r0, #0
   1b3da:	dbb7      	blt.n	1b34c <hci_driver_open+0x58>
	if (required_memory > sizeof(sdc_mempool)) {
   1b3dc:	f5b0 6faf 	cmp.w	r0, #1400	; 0x578
   1b3e0:	dd10      	ble.n	1b404 <hci_driver_open+0x110>
		BT_ERR("Allocated memory too low: %u < %u",
   1b3e2:	4602      	mov	r2, r0
   1b3e4:	ea44 0307 	orr.w	r3, r4, r7
   1b3e8:	4827      	ldr	r0, [pc, #156]	; (1b488 <hci_driver_open+0x194>)
   1b3ea:	f44f 61af 	mov.w	r1, #1400	; 0x578
   1b3ee:	f006 fad0 	bl	21992 <log_2>
		k_panic();
   1b3f2:	4040      	eors	r0, r0
   1b3f4:	f380 8811 	msr	BASEPRI, r0
   1b3f8:	f04f 0004 	mov.w	r0, #4
   1b3fc:	df02      	svc	2
		return -ENOMEM;
   1b3fe:	f06f 000b 	mvn.w	r0, #11
   1b402:	e7a3      	b.n	1b34c <hci_driver_open+0x58>
   1b404:	4821      	ldr	r0, [pc, #132]	; (1b48c <hci_driver_open+0x198>)
   1b406:	f000 fe8d 	bl	1c124 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1b40a:	4b21      	ldr	r3, [pc, #132]	; (1b490 <hci_driver_open+0x19c>)
   1b40c:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   1b40e:	b938      	cbnz	r0, 1b420 <hci_driver_open+0x12c>
		BT_ERR("An entropy source is required");
   1b410:	4820      	ldr	r0, [pc, #128]	; (1b494 <hci_driver_open+0x1a0>)
   1b412:	f044 0101 	orr.w	r1, r4, #1
   1b416:	f006 fa9b 	bl	21950 <log_0>
		return -ENODEV;
   1b41a:	f06f 0012 	mvn.w	r0, #18
   1b41e:	e795      	b.n	1b34c <hci_driver_open+0x58>
	sdc_rand_source_t rand_functions = {
   1b420:	4b1d      	ldr	r3, [pc, #116]	; (1b498 <hci_driver_open+0x1a4>)
   1b422:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1b426:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1b42a:	4628      	mov	r0, r5
   1b42c:	f7e9 fce8 	bl	4e00 <sdc_rand_source_register>
	if (err) {
   1b430:	4601      	mov	r1, r0
   1b432:	b138      	cbz	r0, 1b444 <hci_driver_open+0x150>
		BT_ERR("Failed to register rand source (%d)", err);
   1b434:	4819      	ldr	r0, [pc, #100]	; (1b49c <hci_driver_open+0x1a8>)
   1b436:	f044 0201 	orr.w	r2, r4, #1
   1b43a:	f006 fa96 	bl	2196a <log_1>
		return -EINVAL;
   1b43e:	f06f 0015 	mvn.w	r0, #21
   1b442:	e783      	b.n	1b34c <hci_driver_open+0x58>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1b444:	f04f 30ff 	mov.w	r0, #4294967295
   1b448:	f04f 31ff 	mov.w	r1, #4294967295
   1b44c:	f7ff fec2 	bl	1b1d4 <multithreading_lock_acquire>
	if (!err) {
   1b450:	4604      	mov	r4, r0
   1b452:	b930      	cbnz	r0, 1b462 <hci_driver_open+0x16e>
		err = sdc_enable(host_signal, sdc_mempool);
   1b454:	4912      	ldr	r1, [pc, #72]	; (1b4a0 <hci_driver_open+0x1ac>)
   1b456:	4813      	ldr	r0, [pc, #76]	; (1b4a4 <hci_driver_open+0x1b0>)
   1b458:	f7e9 fb9a 	bl	4b90 <sdc_enable>
   1b45c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1b45e:	f7ff fec1 	bl	1b1e4 <multithreading_lock_release>
	if (err < 0) {
   1b462:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   1b466:	e771      	b.n	1b34c <hci_driver_open+0x58>
   1b468:	20004b80 	.word	0x20004b80
   1b46c:	0001b4a9 	.word	0x0001b4a9
   1b470:	20001c30 	.word	0x20001c30
   1b474:	00027af1 	.word	0x00027af1
   1b478:	000252ec 	.word	0x000252ec
   1b47c:	00025224 	.word	0x00025224
   1b480:	00027af8 	.word	0x00027af8
   1b484:	02031b1b 	.word	0x02031b1b
   1b488:	00027b1f 	.word	0x00027b1f
   1b48c:	00027a96 	.word	0x00027a96
   1b490:	20002698 	.word	0x20002698
   1b494:	00027b41 	.word	0x00027b41
   1b498:	000253ac 	.word	0x000253ac
   1b49c:	00027b5f 	.word	0x00027b5f
   1b4a0:	200031ee 	.word	0x200031ee
   1b4a4:	0001b5c5 	.word	0x0001b5c5

0001b4a8 <recv_thread>:
{
   1b4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b4ac:	4b3f      	ldr	r3, [pc, #252]	; (1b5ac <recv_thread+0x104>)
   1b4ae:	4e40      	ldr	r6, [pc, #256]	; (1b5b0 <recv_thread+0x108>)
	return z_impl_k_sem_take(sem, timeout);
   1b4b0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 1b5c0 <recv_thread+0x118>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1b4b4:	4d3f      	ldr	r5, [pc, #252]	; (1b5b4 <recv_thread+0x10c>)
   1b4b6:	1af6      	subs	r6, r6, r3
	bool received_data = false;
   1b4b8:	2700      	movs	r7, #0
   1b4ba:	08f6      	lsrs	r6, r6, #3
	bool received_evt = false;
   1b4bc:	463c      	mov	r4, r7
		if (!received_evt && !received_data) {
   1b4be:	b93c      	cbnz	r4, 1b4d0 <recv_thread+0x28>
   1b4c0:	b937      	cbnz	r7, 1b4d0 <recv_thread+0x28>
   1b4c2:	f04f 32ff 	mov.w	r2, #4294967295
   1b4c6:	f04f 33ff 	mov.w	r3, #4294967295
   1b4ca:	4640      	mov	r0, r8
   1b4cc:	f001 fd14 	bl	1cef8 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1b4d0:	f04f 30ff 	mov.w	r0, #4294967295
   1b4d4:	f04f 31ff 	mov.w	r1, #4294967295
   1b4d8:	f7ff fe7c 	bl	1b1d4 <multithreading_lock_acquire>
	if (!errcode) {
   1b4dc:	b160      	cbz	r0, 1b4f8 <recv_thread+0x50>
		return false;
   1b4de:	2400      	movs	r4, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1b4e0:	f04f 30ff 	mov.w	r0, #4294967295
   1b4e4:	f04f 31ff 	mov.w	r1, #4294967295
   1b4e8:	f7ff fe74 	bl	1b1d4 <multithreading_lock_acquire>
	if (!errcode) {
   1b4ec:	2800      	cmp	r0, #0
   1b4ee:	d03a      	beq.n	1b566 <recv_thread+0xbe>
		return false;
   1b4f0:	2700      	movs	r7, #0
	z_impl_k_yield();
   1b4f2:	f001 fbb9 	bl	1cc68 <z_impl_k_yield>
}
   1b4f6:	e7e2      	b.n	1b4be <recv_thread+0x16>
		errcode = hci_internal_evt_get(p_hci_buffer);
   1b4f8:	482e      	ldr	r0, [pc, #184]	; (1b5b4 <recv_thread+0x10c>)
   1b4fa:	f000 fbb5 	bl	1bc68 <hci_internal_evt_get>
   1b4fe:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1b500:	f7ff fe70 	bl	1b1e4 <multithreading_lock_release>
	if (errcode) {
   1b504:	2c00      	cmp	r4, #0
   1b506:	d1ea      	bne.n	1b4de <recv_thread+0x36>
	switch (hdr->evt) {
   1b508:	7828      	ldrb	r0, [r5, #0]
   1b50a:	283e      	cmp	r0, #62	; 0x3e
   1b50c:	d007      	beq.n	1b51e <recv_thread+0x76>
   1b50e:	28ff      	cmp	r0, #255	; 0xff
   1b510:	d01c      	beq.n	1b54c <recv_thread+0xa4>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1b512:	f04f 32ff 	mov.w	r2, #4294967295
   1b516:	f04f 33ff 	mov.w	r3, #4294967295
   1b51a:	2400      	movs	r4, #0
   1b51c:	e007      	b.n	1b52e <recv_thread+0x86>
		switch (me->subevent) {
   1b51e:	78ab      	ldrb	r3, [r5, #2]
   1b520:	2b02      	cmp	r3, #2
   1b522:	d001      	beq.n	1b528 <recv_thread+0x80>
   1b524:	2b0d      	cmp	r3, #13
		switch (subevent) {
   1b526:	d1f4      	bne.n	1b512 <recv_thread+0x6a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1b528:	2200      	movs	r2, #0
   1b52a:	2300      	movs	r3, #0
   1b52c:	2401      	movs	r4, #1
   1b52e:	4621      	mov	r1, r4
   1b530:	f7f9 f8c0 	bl	146b4 <bt_buf_get_evt>
	if (!evt_buf) {
   1b534:	4607      	mov	r7, r0
   1b536:	b960      	cbnz	r0, 1b552 <recv_thread+0xaa>
		if (discardable) {
   1b538:	2c00      	cmp	r4, #0
   1b53a:	d1d1      	bne.n	1b4e0 <recv_thread+0x38>
		BT_ERR("No event buffer available");
   1b53c:	01b1      	lsls	r1, r6, #6
   1b53e:	481e      	ldr	r0, [pc, #120]	; (1b5b8 <recv_thread+0x110>)
   1b540:	f041 0101 	orr.w	r1, r1, #1
   1b544:	f006 fa04 	bl	21950 <log_0>
	return true;
   1b548:	2401      	movs	r4, #1
   1b54a:	e7c9      	b.n	1b4e0 <recv_thread+0x38>
		switch (subevent) {
   1b54c:	78ab      	ldrb	r3, [r5, #2]
   1b54e:	2b80      	cmp	r3, #128	; 0x80
   1b550:	e7e9      	b.n	1b526 <recv_thread+0x7e>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1b552:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1b554:	4629      	mov	r1, r5
   1b556:	3202      	adds	r2, #2
   1b558:	3008      	adds	r0, #8
   1b55a:	f008 fd2e 	bl	23fba <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1b55e:	4638      	mov	r0, r7
   1b560:	f7fc f8b0 	bl	176c4 <bt_recv>
   1b564:	e7f0      	b.n	1b548 <recv_thread+0xa0>
		errcode = sdc_hci_data_get(p_hci_buffer);
   1b566:	4813      	ldr	r0, [pc, #76]	; (1b5b4 <recv_thread+0x10c>)
   1b568:	f7f1 fdac 	bl	d0c4 <sdc_hci_data_get>
   1b56c:	4607      	mov	r7, r0
		MULTITHREADING_LOCK_RELEASE();
   1b56e:	f7ff fe39 	bl	1b1e4 <multithreading_lock_release>
	if (errcode) {
   1b572:	2f00      	cmp	r7, #0
   1b574:	d1bc      	bne.n	1b4f0 <recv_thread+0x48>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1b576:	f04f 32ff 	mov.w	r2, #4294967295
   1b57a:	f04f 33ff 	mov.w	r3, #4294967295
   1b57e:	2003      	movs	r0, #3
   1b580:	f7f9 f86e 	bl	14660 <bt_buf_get_rx>
	if (!data_buf) {
   1b584:	4607      	mov	r7, r0
   1b586:	b938      	cbnz	r0, 1b598 <recv_thread+0xf0>
		BT_ERR("No data buffer available");
   1b588:	01b1      	lsls	r1, r6, #6
   1b58a:	480c      	ldr	r0, [pc, #48]	; (1b5bc <recv_thread+0x114>)
   1b58c:	f041 0101 	orr.w	r1, r1, #1
   1b590:	f006 f9de 	bl	21950 <log_0>
	return true;
   1b594:	2701      	movs	r7, #1
   1b596:	e7ac      	b.n	1b4f2 <recv_thread+0x4a>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1b598:	886a      	ldrh	r2, [r5, #2]
   1b59a:	4629      	mov	r1, r5
   1b59c:	3204      	adds	r2, #4
   1b59e:	3008      	adds	r0, #8
   1b5a0:	f008 fd0b 	bl	23fba <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1b5a4:	4638      	mov	r0, r7
   1b5a6:	f7fc f88d 	bl	176c4 <bt_recv>
   1b5aa:	e7f3      	b.n	1b594 <recv_thread+0xec>
   1b5ac:	00025224 	.word	0x00025224
   1b5b0:	000252ec 	.word	0x000252ec
   1b5b4:	200031a5 	.word	0x200031a5
   1b5b8:	00027b83 	.word	0x00027b83
   1b5bc:	00027b9d 	.word	0x00027b9d
   1b5c0:	2000081c 	.word	0x2000081c

0001b5c4 <host_signal>:
	z_impl_k_sem_give(sem);
   1b5c4:	4801      	ldr	r0, [pc, #4]	; (1b5cc <host_signal+0x8>)
   1b5c6:	f001 bc71 	b.w	1ceac <z_impl_k_sem_give>
   1b5ca:	bf00      	nop
   1b5cc:	2000081c 	.word	0x2000081c

0001b5d0 <hci_driver_send>:
{
   1b5d0:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   1b5d2:	8983      	ldrh	r3, [r0, #12]
{
   1b5d4:	4605      	mov	r5, r0
	if (!buf->len) {
   1b5d6:	b383      	cbz	r3, 1b63a <hci_driver_send+0x6a>
   1b5d8:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   1b5da:	b1ab      	cbz	r3, 1b608 <hci_driver_send+0x38>
   1b5dc:	2b02      	cmp	r3, #2
   1b5de:	d12c      	bne.n	1b63a <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1b5e0:	f04f 30ff 	mov.w	r0, #4294967295
   1b5e4:	f04f 31ff 	mov.w	r1, #4294967295
   1b5e8:	f7ff fdf4 	bl	1b1d4 <multithreading_lock_acquire>
	if (!errcode) {
   1b5ec:	4604      	mov	r4, r0
   1b5ee:	b948      	cbnz	r0, 1b604 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   1b5f0:	68a8      	ldr	r0, [r5, #8]
   1b5f2:	f7f1 fd74 	bl	d0de <sdc_hci_data_put>
   1b5f6:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1b5f8:	f7ff fdf4 	bl	1b1e4 <multithreading_lock_release>
		if (errcode) {
   1b5fc:	b1c4      	cbz	r4, 1b630 <hci_driver_send+0x60>
   1b5fe:	4810      	ldr	r0, [pc, #64]	; (1b640 <hci_driver_send+0x70>)
   1b600:	f001 fc54 	bl	1ceac <z_impl_k_sem_give>
}
   1b604:	4620      	mov	r0, r4
   1b606:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1b608:	f04f 30ff 	mov.w	r0, #4294967295
   1b60c:	f04f 31ff 	mov.w	r1, #4294967295
   1b610:	f7ff fde0 	bl	1b1d4 <multithreading_lock_acquire>
	if (!errcode) {
   1b614:	4604      	mov	r4, r0
   1b616:	2800      	cmp	r0, #0
   1b618:	d1f4      	bne.n	1b604 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   1b61a:	68a8      	ldr	r0, [r5, #8]
   1b61c:	f000 f812 	bl	1b644 <hci_internal_cmd_put>
   1b620:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1b622:	f7ff fddf 	bl	1b1e4 <multithreading_lock_release>
	if (errcode) {
   1b626:	2c00      	cmp	r4, #0
   1b628:	d1ec      	bne.n	1b604 <hci_driver_send+0x34>
   1b62a:	4805      	ldr	r0, [pc, #20]	; (1b640 <hci_driver_send+0x70>)
   1b62c:	f001 fc3e 	bl	1ceac <z_impl_k_sem_give>
		net_buf_unref(buf);
   1b630:	4628      	mov	r0, r5
   1b632:	f7fe fe67 	bl	1a304 <net_buf_unref>
   1b636:	2400      	movs	r4, #0
   1b638:	e7e4      	b.n	1b604 <hci_driver_send+0x34>
	switch (type) {
   1b63a:	f06f 0415 	mvn.w	r4, #21
   1b63e:	e7e1      	b.n	1b604 <hci_driver_send+0x34>
   1b640:	2000081c 	.word	0x2000081c

0001b644 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1b644:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1b646:	4c8e      	ldr	r4, [pc, #568]	; (1b880 <hci_internal_cmd_put+0x23c>)
   1b648:	7823      	ldrb	r3, [r4, #0]
   1b64a:	2b00      	cmp	r3, #0
   1b64c:	f040 82f7 	bne.w	1bc3e <hci_internal_cmd_put+0x5fa>
	return ((uint16_t)src[1] << 8) | src[0];
   1b650:	7843      	ldrb	r3, [r0, #1]
   1b652:	7805      	ldrb	r5, [r0, #0]
   1b654:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   1b658:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   1b65c:	b22e      	sxth	r6, r5
   1b65e:	ea4f 2395 	mov.w	r3, r5, lsr #10
   1b662:	d20d      	bcs.n	1b680 <hci_internal_cmd_put+0x3c>
   1b664:	b17b      	cbz	r3, 1b686 <hci_internal_cmd_put+0x42>
   1b666:	3b01      	subs	r3, #1
   1b668:	2b07      	cmp	r3, #7
   1b66a:	d80c      	bhi.n	1b686 <hci_internal_cmd_put+0x42>
   1b66c:	e8df f013 	tbh	[pc, r3, lsl #1]
   1b670:	000b000e 	.word	0x000b000e
   1b674:	0060002c 	.word	0x0060002c
   1b678:	000b000b 	.word	0x000b000b
   1b67c:	010c000b 	.word	0x010c000b
   1b680:	2b3f      	cmp	r3, #63	; 0x3f
   1b682:	f000 8233 	beq.w	1baec <hci_internal_cmd_put+0x4a8>
   1b686:	2304      	movs	r3, #4
   1b688:	2001      	movs	r0, #1
   1b68a:	e26b      	b.n	1bb64 <hci_internal_cmd_put+0x520>
	switch (opcode)	{
   1b68c:	f240 4306 	movw	r3, #1030	; 0x406
   1b690:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1b692:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1b696:	d005      	beq.n	1b6a4 <hci_internal_cmd_put+0x60>
   1b698:	f240 431d 	movw	r3, #1053	; 0x41d
   1b69c:	429e      	cmp	r6, r3
   1b69e:	d010      	beq.n	1b6c2 <hci_internal_cmd_put+0x7e>
	switch (opcode)	{
   1b6a0:	2001      	movs	r0, #1
   1b6a2:	e001      	b.n	1b6a8 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1b6a4:	f7f1 fe3d 	bl	d322 <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1b6a8:	230f      	movs	r3, #15
   1b6aa:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1b6ac:	2304      	movs	r3, #4
   1b6ae:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1b6b0:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1b6b2:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1b6b4:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1b6b6:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1b6ba:	2301      	movs	r3, #1
   1b6bc:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1b6be:	2000      	movs	r0, #0
}
   1b6c0:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1b6c2:	f7f1 fe30 	bl	d326 <sdc_hci_cmd_lc_read_remote_version_information>
   1b6c6:	e7ef      	b.n	1b6a8 <hci_internal_cmd_put+0x64>
	switch (opcode)	{
   1b6c8:	f640 4363 	movw	r3, #3171	; 0xc63
   1b6cc:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1b6ce:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1b6d2:	d025      	beq.n	1b720 <hci_internal_cmd_put+0xdc>
   1b6d4:	dc0f      	bgt.n	1b6f6 <hci_internal_cmd_put+0xb2>
   1b6d6:	f640 4303 	movw	r3, #3075	; 0xc03
   1b6da:	429e      	cmp	r6, r3
   1b6dc:	d018      	beq.n	1b710 <hci_internal_cmd_put+0xcc>
   1b6de:	f640 432d 	movw	r3, #3117	; 0xc2d
   1b6e2:	429e      	cmp	r6, r3
   1b6e4:	d017      	beq.n	1b716 <hci_internal_cmd_put+0xd2>
   1b6e6:	f640 4301 	movw	r3, #3073	; 0xc01
   1b6ea:	429e      	cmp	r6, r3
   1b6ec:	d1d8      	bne.n	1b6a0 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1b6ee:	f7f1 fd12 	bl	d116 <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1b6f2:	2304      	movs	r3, #4
   1b6f4:	e0b8      	b.n	1b868 <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1b6f6:	f640 437b 	movw	r3, #3195	; 0xc7b
   1b6fa:	429e      	cmp	r6, r3
   1b6fc:	d013      	beq.n	1b726 <hci_internal_cmd_put+0xe2>
   1b6fe:	f640 437c 	movw	r3, #3196	; 0xc7c
   1b702:	429e      	cmp	r6, r3
   1b704:	d1cc      	bne.n	1b6a0 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1b706:	495f      	ldr	r1, [pc, #380]	; (1b884 <hci_internal_cmd_put+0x240>)
   1b708:	f7f1 fd0f 	bl	d12a <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1b70c:	2306      	movs	r3, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1b70e:	e0ab      	b.n	1b868 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_reset();
   1b710:	f7e9 fc6a 	bl	4fe8 <sdc_hci_cmd_cb_reset>
   1b714:	e7ed      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1b716:	495b      	ldr	r1, [pc, #364]	; (1b884 <hci_internal_cmd_put+0x240>)
   1b718:	f7f1 fcfb 	bl	d112 <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1b71c:	2307      	movs	r3, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1b71e:	e0a3      	b.n	1b868 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1b720:	f7f1 fcfe 	bl	d120 <sdc_hci_cmd_cb_set_event_mask_page_2>
   1b724:	e7e5      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1b726:	4957      	ldr	r1, [pc, #348]	; (1b884 <hci_internal_cmd_put+0x240>)
   1b728:	f7f1 fcf1 	bl	d10e <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1b72c:	2308      	movs	r3, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1b72e:	e09b      	b.n	1b868 <hci_internal_cmd_put+0x224>
	switch (opcode)	{
   1b730:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   1b734:	3e01      	subs	r6, #1
   1b736:	2e08      	cmp	r6, #8
   1b738:	d8b2      	bhi.n	1b6a0 <hci_internal_cmd_put+0x5c>
   1b73a:	a301      	add	r3, pc, #4	; (adr r3, 1b740 <hci_internal_cmd_put+0xfc>)
   1b73c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1b740:	0001b765 	.word	0x0001b765
   1b744:	0001b76f 	.word	0x0001b76f
   1b748:	0001b849 	.word	0x0001b849
   1b74c:	0001b6a1 	.word	0x0001b6a1
   1b750:	0001b6a1 	.word	0x0001b6a1
   1b754:	0001b6a1 	.word	0x0001b6a1
   1b758:	0001b6a1 	.word	0x0001b6a1
   1b75c:	0001b6a1 	.word	0x0001b6a1
   1b760:	0001b861 	.word	0x0001b861
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1b764:	4847      	ldr	r0, [pc, #284]	; (1b884 <hci_internal_cmd_put+0x240>)
   1b766:	f7f1 fd91 	bl	d28c <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1b76a:	230c      	movs	r3, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1b76c:	e07c      	b.n	1b868 <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1b76e:	4845      	ldr	r0, [pc, #276]	; (1b884 <hci_internal_cmd_put+0x240>)
   1b770:	222e      	movs	r2, #46	; 0x2e
   1b772:	2100      	movs	r1, #0
   1b774:	f006 fbf8 	bl	21f68 <memset>
	cmds->hci_disconnect = 1;
   1b778:	79e3      	ldrb	r3, [r4, #7]
   1b77a:	f043 0320 	orr.w	r3, r3, #32
   1b77e:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1b780:	7a63      	ldrb	r3, [r4, #9]
   1b782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1b786:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1b788:	7b23      	ldrb	r3, [r4, #12]
   1b78a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1b78e:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1b790:	7c63      	ldrb	r3, [r4, #17]
   1b792:	f043 0304 	orr.w	r3, r3, #4
   1b796:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1b798:	7d63      	ldrb	r3, [r4, #21]
   1b79a:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1b79e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1b7a2:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1b7a4:	7da3      	ldrb	r3, [r4, #22]
   1b7a6:	f043 0302 	orr.w	r3, r3, #2
   1b7aa:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1b7ac:	7f63      	ldrb	r3, [r4, #29]
   1b7ae:	f043 0304 	orr.w	r3, r3, #4
   1b7b2:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1b7b4:	f894 3020 	ldrb.w	r3, [r4, #32]
   1b7b8:	f063 0308 	orn	r3, r3, #8
   1b7bc:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1b7c0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1b7c4:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1b7c8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   1b7cc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1b7d0:	f063 030c 	orn	r3, r3, #12
   1b7d4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   1b7d8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1b7dc:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   1b7e0:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   1b7e4:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1b7e8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1b7ec:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1b7f0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1b7f4:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1b7f8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1b7fc:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1b800:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1b804:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1b808:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   1b80c:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   1b810:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   1b814:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1b818:	f063 0301 	orn	r3, r3, #1
   1b81c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1b820:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1b824:	f043 0301 	orr.w	r3, r3, #1
   1b828:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1b82c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1b830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1b834:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   1b838:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   1b83c:	f043 0304 	orr.w	r3, r3, #4
   1b840:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	switch (hci_opcode) {
   1b844:	2344      	movs	r3, #68	; 0x44
   1b846:	e0de      	b.n	1ba06 <hci_internal_cmd_put+0x3c2>
	memset(features, 0, sizeof(*features));
   1b848:	480e      	ldr	r0, [pc, #56]	; (1b884 <hci_internal_cmd_put+0x240>)
   1b84a:	2208      	movs	r2, #8
   1b84c:	2100      	movs	r1, #0
   1b84e:	f006 fb8b 	bl	21f68 <memset>
	features->bdedr_not_supported = 1;
   1b852:	7ae3      	ldrb	r3, [r4, #11]
   1b854:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1b858:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	*(buf + 4) = states2;
   1b85c:	72e3      	strb	r3, [r4, #11]
   1b85e:	e0d1      	b.n	1ba04 <hci_internal_cmd_put+0x3c0>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1b860:	4808      	ldr	r0, [pc, #32]	; (1b884 <hci_internal_cmd_put+0x240>)
   1b862:	f7f1 fd11 	bl	d288 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1b866:	230a      	movs	r3, #10
	if (!command_generates_command_complete_event(opcode) ||
   1b868:	2801      	cmp	r0, #1
   1b86a:	f43f af1d 	beq.w	1b6a8 <hci_internal_cmd_put+0x64>
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1b86e:	220e      	movs	r2, #14
	evt_hdr->len = param_length;
   1b870:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1b872:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1b874:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1b876:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1b878:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1b87a:	71a0      	strb	r0, [r4, #6]
}
   1b87c:	e71d      	b.n	1b6ba <hci_internal_cmd_put+0x76>
   1b87e:	bf00      	nop
   1b880:	20003766 	.word	0x20003766
   1b884:	2000376d 	.word	0x2000376d
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1b888:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   1b88c:	3e01      	subs	r6, #1
   1b88e:	3003      	adds	r0, #3
	switch (opcode)	{
   1b890:	2e4d      	cmp	r6, #77	; 0x4d
   1b892:	f63f af05 	bhi.w	1b6a0 <hci_internal_cmd_put+0x5c>
   1b896:	a301      	add	r3, pc, #4	; (adr r3, 1b89c <hci_internal_cmd_put+0x258>)
   1b898:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1b89c:	0001b9d5 	.word	0x0001b9d5
   1b8a0:	0001b9db 	.word	0x0001b9db
   1b8a4:	0001b9e3 	.word	0x0001b9e3
   1b8a8:	0001b6a1 	.word	0x0001b6a1
   1b8ac:	0001ba0b 	.word	0x0001ba0b
   1b8b0:	0001ba11 	.word	0x0001ba11
   1b8b4:	0001ba17 	.word	0x0001ba17
   1b8b8:	0001ba21 	.word	0x0001ba21
   1b8bc:	0001ba27 	.word	0x0001ba27
   1b8c0:	0001ba2d 	.word	0x0001ba2d
   1b8c4:	0001b6a1 	.word	0x0001b6a1
   1b8c8:	0001b6a1 	.word	0x0001b6a1
   1b8cc:	0001b6a1 	.word	0x0001b6a1
   1b8d0:	0001b6a1 	.word	0x0001b6a1
   1b8d4:	0001ba33 	.word	0x0001ba33
   1b8d8:	0001ba3b 	.word	0x0001ba3b
   1b8dc:	0001ba41 	.word	0x0001ba41
   1b8e0:	0001ba47 	.word	0x0001ba47
   1b8e4:	0001b6a1 	.word	0x0001b6a1
   1b8e8:	0001b6a1 	.word	0x0001b6a1
   1b8ec:	0001ba4d 	.word	0x0001ba4d
   1b8f0:	0001ba57 	.word	0x0001ba57
   1b8f4:	0001ba5d 	.word	0x0001ba5d
   1b8f8:	0001ba67 	.word	0x0001ba67
   1b8fc:	0001b6a1 	.word	0x0001b6a1
   1b900:	0001ba6f 	.word	0x0001ba6f
   1b904:	0001ba77 	.word	0x0001ba77
   1b908:	0001ba7f 	.word	0x0001ba7f
   1b90c:	0001b6a1 	.word	0x0001b6a1
   1b910:	0001b6a1 	.word	0x0001b6a1
   1b914:	0001b6a1 	.word	0x0001b6a1
   1b918:	0001b6a1 	.word	0x0001b6a1
   1b91c:	0001b6a1 	.word	0x0001b6a1
   1b920:	0001ba87 	.word	0x0001ba87
   1b924:	0001ba8f 	.word	0x0001ba8f
   1b928:	0001ba97 	.word	0x0001ba97
   1b92c:	0001b6a1 	.word	0x0001b6a1
   1b930:	0001b6a1 	.word	0x0001b6a1
   1b934:	0001ba9d 	.word	0x0001ba9d
   1b938:	0001baa3 	.word	0x0001baa3
   1b93c:	0001baa9 	.word	0x0001baa9
   1b940:	0001baaf 	.word	0x0001baaf
   1b944:	0001b6a1 	.word	0x0001b6a1
   1b948:	0001b6a1 	.word	0x0001b6a1
   1b94c:	0001bab7 	.word	0x0001bab7
   1b950:	0001babd 	.word	0x0001babd
   1b954:	0001bac3 	.word	0x0001bac3
   1b958:	0001bacb 	.word	0x0001bacb
   1b95c:	0001bad3 	.word	0x0001bad3
   1b960:	0001bad9 	.word	0x0001bad9
   1b964:	0001b6a1 	.word	0x0001b6a1
   1b968:	0001b6a1 	.word	0x0001b6a1
   1b96c:	0001b6a1 	.word	0x0001b6a1
   1b970:	0001b6a1 	.word	0x0001b6a1
   1b974:	0001b6a1 	.word	0x0001b6a1
   1b978:	0001b6a1 	.word	0x0001b6a1
   1b97c:	0001b6a1 	.word	0x0001b6a1
   1b980:	0001b6a1 	.word	0x0001b6a1
   1b984:	0001b6a1 	.word	0x0001b6a1
   1b988:	0001b6a1 	.word	0x0001b6a1
   1b98c:	0001b6a1 	.word	0x0001b6a1
   1b990:	0001b6a1 	.word	0x0001b6a1
   1b994:	0001b6a1 	.word	0x0001b6a1
   1b998:	0001b6a1 	.word	0x0001b6a1
   1b99c:	0001b6a1 	.word	0x0001b6a1
   1b9a0:	0001b6a1 	.word	0x0001b6a1
   1b9a4:	0001b6a1 	.word	0x0001b6a1
   1b9a8:	0001b6a1 	.word	0x0001b6a1
   1b9ac:	0001b6a1 	.word	0x0001b6a1
   1b9b0:	0001b6a1 	.word	0x0001b6a1
   1b9b4:	0001b6a1 	.word	0x0001b6a1
   1b9b8:	0001b6a1 	.word	0x0001b6a1
   1b9bc:	0001b6a1 	.word	0x0001b6a1
   1b9c0:	0001b6a1 	.word	0x0001b6a1
   1b9c4:	0001badf 	.word	0x0001badf
   1b9c8:	0001b6a1 	.word	0x0001b6a1
   1b9cc:	0001b6a1 	.word	0x0001b6a1
   1b9d0:	0001bae7 	.word	0x0001bae7
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1b9d4:	f7f1 fc94 	bl	d300 <sdc_hci_cmd_le_set_event_mask>
   1b9d8:	e68b      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1b9da:	48a2      	ldr	r0, [pc, #648]	; (1bc64 <hci_internal_cmd_put+0x620>)
   1b9dc:	f7f1 fc6e 	bl	d2bc <sdc_hci_cmd_le_read_buffer_size>
   1b9e0:	e69c      	b.n	1b71c <hci_internal_cmd_put+0xd8>
	memset(features, 0, sizeof(*features));
   1b9e2:	48a0      	ldr	r0, [pc, #640]	; (1bc64 <hci_internal_cmd_put+0x620>)
   1b9e4:	2205      	movs	r2, #5
   1b9e6:	2100      	movs	r1, #0
   1b9e8:	f006 fabe 	bl	21f68 <memset>
	features->le_encryption = 1;
   1b9ec:	79e3      	ldrb	r3, [r4, #7]
   1b9ee:	f023 0375 	bic.w	r3, r3, #117	; 0x75
   1b9f2:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   1b9f6:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   1b9f8:	7a23      	ldrb	r3, [r4, #8]
   1b9fa:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1b9fe:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1ba02:	7223      	strb	r3, [r4, #8]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1ba04:	230c      	movs	r3, #12
	switch (hci_opcode) {
   1ba06:	2000      	movs	r0, #0
   1ba08:	e731      	b.n	1b86e <hci_internal_cmd_put+0x22a>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1ba0a:	f7f1 fc82 	bl	d312 <sdc_hci_cmd_le_set_random_address>
   1ba0e:	e670      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1ba10:	f7f1 fc70 	bl	d2f4 <sdc_hci_cmd_le_set_adv_params>
   1ba14:	e66d      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1ba16:	4893      	ldr	r0, [pc, #588]	; (1bc64 <hci_internal_cmd_put+0x620>)
   1ba18:	f7f1 fc4e 	bl	d2b8 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   1ba1c:	2305      	movs	r3, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1ba1e:	e723      	b.n	1b868 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1ba20:	f7f1 fc64 	bl	d2ec <sdc_hci_cmd_le_set_adv_data>
   1ba24:	e665      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1ba26:	f7f1 fc78 	bl	d31a <sdc_hci_cmd_le_set_scan_response_data>
   1ba2a:	e662      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1ba2c:	f7f1 fc60 	bl	d2f0 <sdc_hci_cmd_le_set_adv_enable>
   1ba30:	e65f      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   1ba32:	488c      	ldr	r0, [pc, #560]	; (1bc64 <hci_internal_cmd_put+0x620>)
   1ba34:	f7f1 fc52 	bl	d2dc <sdc_hci_cmd_le_read_white_list_size>
   1ba38:	e7f0      	b.n	1ba1c <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_clear_white_list();
   1ba3a:	f7f1 fc2f 	bl	d29c <sdc_hci_cmd_le_clear_white_list>
   1ba3e:	e658      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   1ba40:	f7f1 fc28 	bl	d294 <sdc_hci_cmd_le_add_device_to_white_list>
   1ba44:	e655      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   1ba46:	f7f1 fc4d 	bl	d2e4 <sdc_hci_cmd_le_remove_device_from_white_list>
   1ba4a:	e652      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1ba4c:	4985      	ldr	r1, [pc, #532]	; (1bc64 <hci_internal_cmd_put+0x620>)
   1ba4e:	f7f1 fc37 	bl	d2c0 <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1ba52:	230b      	movs	r3, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1ba54:	e708      	b.n	1b868 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1ba56:	f7f1 fc39 	bl	d2cc <sdc_hci_cmd_le_read_remote_features>
   1ba5a:	e625      	b.n	1b6a8 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1ba5c:	4981      	ldr	r1, [pc, #516]	; (1bc64 <hci_internal_cmd_put+0x620>)
   1ba5e:	f7f1 fc1f 	bl	d2a0 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1ba62:	2314      	movs	r3, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1ba64:	e700      	b.n	1b868 <hci_internal_cmd_put+0x224>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1ba66:	487f      	ldr	r0, [pc, #508]	; (1bc64 <hci_internal_cmd_put+0x620>)
   1ba68:	f7f1 fc24 	bl	d2b4 <sdc_hci_cmd_le_rand>
   1ba6c:	e67d      	b.n	1b76a <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1ba6e:	497d      	ldr	r1, [pc, #500]	; (1bc64 <hci_internal_cmd_put+0x620>)
   1ba70:	f7f1 fc1c 	bl	d2ac <sdc_hci_cmd_le_long_term_key_request_reply>
   1ba74:	e64a      	b.n	1b70c <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1ba76:	497b      	ldr	r1, [pc, #492]	; (1bc64 <hci_internal_cmd_put+0x620>)
   1ba78:	f7f1 fc14 	bl	d2a4 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1ba7c:	e646      	b.n	1b70c <hci_internal_cmd_put+0xc8>
	*buf = states1;
   1ba7e:	238f      	movs	r3, #143	; 0x8f
   1ba80:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1ba82:	23c0      	movs	r3, #192	; 0xc0
   1ba84:	e6ea      	b.n	1b85c <hci_internal_cmd_put+0x218>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1ba86:	4977      	ldr	r1, [pc, #476]	; (1bc64 <hci_internal_cmd_put+0x620>)
   1ba88:	f7f1 fc36 	bl	d2f8 <sdc_hci_cmd_le_set_data_length>
   1ba8c:	e63e      	b.n	1b70c <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1ba8e:	4875      	ldr	r0, [pc, #468]	; (1bc64 <hci_internal_cmd_put+0x620>)
   1ba90:	f7f1 fc20 	bl	d2d4 <sdc_hci_cmd_le_read_suggested_default_data_length>
   1ba94:	e64a      	b.n	1b72c <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1ba96:	f7f1 fc42 	bl	d31e <sdc_hci_cmd_le_write_suggested_default_data_length>
   1ba9a:	e62a      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   1ba9c:	f7f1 fbf8 	bl	d290 <sdc_hci_cmd_le_add_device_to_resolving_list>
   1baa0:	e627      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   1baa2:	f7f1 fc1d 	bl	d2e0 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   1baa6:	e624      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_clear_resolving_list();
   1baa8:	f7f1 fbf6 	bl	d298 <sdc_hci_cmd_le_clear_resolving_list>
   1baac:	e621      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   1baae:	486d      	ldr	r0, [pc, #436]	; (1bc64 <hci_internal_cmd_put+0x620>)
   1bab0:	f7f1 fc0e 	bl	d2d0 <sdc_hci_cmd_le_read_resolving_list_size>
   1bab4:	e7b2      	b.n	1ba1c <hci_internal_cmd_put+0x3d8>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   1bab6:	f7f1 fc17 	bl	d2e8 <sdc_hci_cmd_le_set_address_resolution_enable>
   1baba:	e61a      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   1babc:	f7f1 fc2b 	bl	d316 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   1bac0:	e617      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1bac2:	4868      	ldr	r0, [pc, #416]	; (1bc64 <hci_internal_cmd_put+0x620>)
   1bac4:	f7f1 fbfe 	bl	d2c4 <sdc_hci_cmd_le_read_max_data_length>
   1bac8:	e64f      	b.n	1b76a <hci_internal_cmd_put+0x126>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1baca:	4966      	ldr	r1, [pc, #408]	; (1bc64 <hci_internal_cmd_put+0x620>)
   1bacc:	f7f1 fbfc 	bl	d2c8 <sdc_hci_cmd_le_read_phy>
   1bad0:	e62c      	b.n	1b72c <hci_internal_cmd_put+0xe8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1bad2:	f7f1 fc13 	bl	d2fc <sdc_hci_cmd_le_set_default_phy>
   1bad6:	e60c      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1bad8:	f7f1 fc17 	bl	d30a <sdc_hci_cmd_le_set_phy>
   1badc:	e5e4      	b.n	1b6a8 <hci_internal_cmd_put+0x64>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1bade:	4861      	ldr	r0, [pc, #388]	; (1bc64 <hci_internal_cmd_put+0x620>)
   1bae0:	f7f1 fbfa 	bl	d2d8 <sdc_hci_cmd_le_read_transmit_power>
   1bae4:	e612      	b.n	1b70c <hci_internal_cmd_put+0xc8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   1bae6:	f7f1 fc12 	bl	d30e <sdc_hci_cmd_le_set_privacy_mode>
   1baea:	e602      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
	switch (opcode)	{
   1baec:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   1baf0:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1baf2:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   1baf6:	d821      	bhi.n	1bb3c <hci_internal_cmd_put+0x4f8>
   1baf8:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   1bafc:	f43f add0 	beq.w	1b6a0 <hci_internal_cmd_put+0x5c>
   1bb00:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   1bb04:	3b01      	subs	r3, #1
   1bb06:	2b09      	cmp	r3, #9
   1bb08:	f63f adca 	bhi.w	1b6a0 <hci_internal_cmd_put+0x5c>
   1bb0c:	a201      	add	r2, pc, #4	; (adr r2, 1bb14 <hci_internal_cmd_put+0x4d0>)
   1bb0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1bb12:	bf00      	nop
   1bb14:	0001bb5d 	.word	0x0001bb5d
   1bb18:	0001bb8b 	.word	0x0001bb8b
   1bb1c:	0001b6a1 	.word	0x0001b6a1
   1bb20:	0001b6a1 	.word	0x0001b6a1
   1bb24:	0001b6a1 	.word	0x0001b6a1
   1bb28:	0001bbcf 	.word	0x0001bbcf
   1bb2c:	0001b6a1 	.word	0x0001b6a1
   1bb30:	0001b6a1 	.word	0x0001b6a1
   1bb34:	0001bbbb 	.word	0x0001bbbb
   1bb38:	0001bbc5 	.word	0x0001bbc5
   1bb3c:	f505 7340 	add.w	r3, r5, #768	; 0x300
   1bb40:	b29b      	uxth	r3, r3
   1bb42:	2b05      	cmp	r3, #5
   1bb44:	f63f adac 	bhi.w	1b6a0 <hci_internal_cmd_put+0x5c>
   1bb48:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   1bb4c:	2b05      	cmp	r3, #5
   1bb4e:	f63f ada7 	bhi.w	1b6a0 <hci_internal_cmd_put+0x5c>
   1bb52:	e8df f003 	tbb	[pc, r3]
   1bb56:	4c40      	.short	0x4c40
   1bb58:	5855524f 	.word	0x5855524f
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1bb5c:	4841      	ldr	r0, [pc, #260]	; (1bc64 <hci_internal_cmd_put+0x620>)
   1bb5e:	f7e9 fa57 	bl	5010 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1bb62:	2310      	movs	r3, #16
	switch (hci_opcode) {
   1bb64:	f242 0219 	movw	r2, #8217	; 0x2019
   1bb68:	4296      	cmp	r6, r2
   1bb6a:	dc5c      	bgt.n	1bc26 <hci_internal_cmd_put+0x5e2>
   1bb6c:	f242 020c 	movw	r2, #8204	; 0x200c
   1bb70:	4296      	cmp	r6, r2
   1bb72:	dc4b      	bgt.n	1bc0c <hci_internal_cmd_put+0x5c8>
   1bb74:	f240 4206 	movw	r2, #1030	; 0x406
   1bb78:	4296      	cmp	r6, r2
   1bb7a:	f43f ad95 	beq.w	1b6a8 <hci_internal_cmd_put+0x64>
   1bb7e:	f240 421d 	movw	r2, #1053	; 0x41d
   1bb82:	4296      	cmp	r6, r2
   1bb84:	f43f ad90 	beq.w	1b6a8 <hci_internal_cmd_put+0x64>
   1bb88:	e66e      	b.n	1b868 <hci_internal_cmd_put+0x224>
	memset(cmds, 0, sizeof(*cmds));
   1bb8a:	4836      	ldr	r0, [pc, #216]	; (1bc64 <hci_internal_cmd_put+0x620>)
   1bb8c:	2202      	movs	r2, #2
   1bb8e:	2100      	movs	r1, #0
   1bb90:	f006 f9ea 	bl	21f68 <memset>
	cmds->read_version_info = 1;
   1bb94:	79e3      	ldrb	r3, [r4, #7]
   1bb96:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1bb9a:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1bb9e:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1bba0:	7a23      	ldrb	r3, [r4, #8]
   1bba2:	f023 0307 	bic.w	r3, r3, #7
   1bba6:	f043 0307 	orr.w	r3, r3, #7
   1bbaa:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   1bbac:	f242 0319 	movw	r3, #8217	; 0x2019
   1bbb0:	429e      	cmp	r6, r3
   1bbb2:	dd47      	ble.n	1bc44 <hci_internal_cmd_put+0x600>
   1bbb4:	f242 0332 	movw	r3, #8242	; 0x2032
   1bbb8:	e04f      	b.n	1bc5a <hci_internal_cmd_put+0x616>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1bbba:	482a      	ldr	r0, [pc, #168]	; (1bc64 <hci_internal_cmd_put+0x620>)
   1bbbc:	f7f1 fb17 	bl	d1ee <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1bbc0:	231b      	movs	r3, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1bbc2:	e7cf      	b.n	1bb64 <hci_internal_cmd_put+0x520>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1bbc4:	4827      	ldr	r0, [pc, #156]	; (1bc64 <hci_internal_cmd_put+0x620>)
   1bbc6:	f7f1 fac5 	bl	d154 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   1bbca:	2324      	movs	r3, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1bbcc:	e7ca      	b.n	1bb64 <hci_internal_cmd_put+0x520>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1bbce:	f7f1 fb59 	bl	d284 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1bbd2:	2304      	movs	r3, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1bbd4:	e7c6      	b.n	1bb64 <hci_internal_cmd_put+0x520>
	memset(cmds, 0, sizeof(*cmds));
   1bbd6:	4823      	ldr	r0, [pc, #140]	; (1bc64 <hci_internal_cmd_put+0x620>)
   1bbd8:	2201      	movs	r2, #1
   1bbda:	2100      	movs	r1, #0
   1bbdc:	f006 f9c4 	bl	21f68 <memset>
	cmds->read_supported_vs_commands = 1;
   1bbe0:	79e3      	ldrb	r3, [r4, #7]
   1bbe2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1bbe6:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1bbea:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   1bbec:	e62a      	b.n	1b844 <hci_internal_cmd_put+0x200>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1bbee:	f7f1 faaa 	bl	d146 <sdc_hci_cmd_vs_llpm_mode_set>
   1bbf2:	e57e      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1bbf4:	f7f1 faa3 	bl	d13e <sdc_hci_cmd_vs_conn_update>
   1bbf8:	e57b      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1bbfa:	f7f1 fa98 	bl	d12e <sdc_hci_cmd_vs_conn_event_extend>
   1bbfe:	e578      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1bc00:	f7f1 faa3 	bl	d14a <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1bc04:	e575      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1bc06:	f7f1 fa9c 	bl	d142 <sdc_hci_cmd_vs_event_length_set>
   1bc0a:	e572      	b.n	1b6f2 <hci_internal_cmd_put+0xae>
   1bc0c:	f5a5 5200 	sub.w	r2, r5, #8192	; 0x2000
   1bc10:	3a0d      	subs	r2, #13
   1bc12:	2101      	movs	r1, #1
   1bc14:	b292      	uxth	r2, r2
   1bc16:	fa01 f202 	lsl.w	r2, r1, r2
   1bc1a:	f241 2141 	movw	r1, #4673	; 0x1241
   1bc1e:	420a      	tst	r2, r1
   1bc20:	f43f ae22 	beq.w	1b868 <hci_internal_cmd_put+0x224>
   1bc24:	e540      	b.n	1b6a8 <hci_internal_cmd_put+0x64>
	switch (hci_opcode) {
   1bc26:	f242 0232 	movw	r2, #8242	; 0x2032
   1bc2a:	4296      	cmp	r6, r2
   1bc2c:	f43f ad3c 	beq.w	1b6a8 <hci_internal_cmd_put+0x64>
   1bc30:	f5a5 5201 	sub.w	r2, r5, #8256	; 0x2040
   1bc34:	3a03      	subs	r2, #3
   1bc36:	2a01      	cmp	r2, #1
   1bc38:	f67f ad36 	bls.w	1b6a8 <hci_internal_cmd_put+0x64>
   1bc3c:	e614      	b.n	1b868 <hci_internal_cmd_put+0x224>
		return -NRF_EPERM;
   1bc3e:	f04f 30ff 	mov.w	r0, #4294967295
   1bc42:	e53d      	b.n	1b6c0 <hci_internal_cmd_put+0x7c>
	switch (hci_opcode) {
   1bc44:	f242 030c 	movw	r3, #8204	; 0x200c
   1bc48:	429e      	cmp	r6, r3
   1bc4a:	f73f adfb 	bgt.w	1b844 <hci_internal_cmd_put+0x200>
   1bc4e:	f240 4306 	movw	r3, #1030	; 0x406
   1bc52:	429e      	cmp	r6, r3
   1bc54:	d004      	beq.n	1bc60 <hci_internal_cmd_put+0x61c>
   1bc56:	f240 431d 	movw	r3, #1053	; 0x41d
   1bc5a:	429e      	cmp	r6, r3
   1bc5c:	f47f adf2 	bne.w	1b844 <hci_internal_cmd_put+0x200>
   1bc60:	2000      	movs	r0, #0
   1bc62:	e521      	b.n	1b6a8 <hci_internal_cmd_put+0x64>
   1bc64:	2000376d 	.word	0x2000376d

0001bc68 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1bc68:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1bc6a:	4c07      	ldr	r4, [pc, #28]	; (1bc88 <hci_internal_evt_get+0x20>)
   1bc6c:	7823      	ldrb	r3, [r4, #0]
   1bc6e:	b13b      	cbz	r3, 1bc80 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1bc70:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   1bc72:	1c61      	adds	r1, r4, #1
   1bc74:	3202      	adds	r2, #2
   1bc76:	f006 f96c 	bl	21f52 <memcpy>
		cmd_complete_or_status.occurred = false;
   1bc7a:	2000      	movs	r0, #0
   1bc7c:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1bc7e:	bd10      	pop	{r4, pc}
   1bc80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   1bc84:	f7f1 ba36 	b.w	d0f4 <sdc_hci_evt_get>
   1bc88:	20003766 	.word	0x20003766

0001bc8c <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   1bc8c:	b538      	push	{r3, r4, r5, lr}
   1bc8e:	4b0b      	ldr	r3, [pc, #44]	; (1bcbc <m_assert_handler+0x30>)
   1bc90:	4c0b      	ldr	r4, [pc, #44]	; (1bcc0 <m_assert_handler+0x34>)
   1bc92:	1ae4      	subs	r4, r4, r3
   1bc94:	460d      	mov	r5, r1
   1bc96:	08e4      	lsrs	r4, r4, #3
   1bc98:	f7f5 ff48 	bl	11b2c <z_log_strdup>
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   1bc9c:	01a4      	lsls	r4, r4, #6
   1bc9e:	f044 0401 	orr.w	r4, r4, #1
   1bca2:	4601      	mov	r1, r0
   1bca4:	4623      	mov	r3, r4
   1bca6:	4807      	ldr	r0, [pc, #28]	; (1bcc4 <m_assert_handler+0x38>)
   1bca8:	462a      	mov	r2, r5
   1bcaa:	f005 fe72 	bl	21992 <log_2>
	k_oops();
   1bcae:	4040      	eors	r0, r0
   1bcb0:	f380 8811 	msr	BASEPRI, r0
   1bcb4:	f04f 0003 	mov.w	r0, #3
   1bcb8:	df02      	svc	2
}
   1bcba:	bd38      	pop	{r3, r4, r5, pc}
   1bcbc:	00025224 	.word	0x00025224
   1bcc0:	000252bc 	.word	0x000252bc
   1bcc4:	00027bec 	.word	0x00027bec

0001bcc8 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1bcc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1bcca:	2332      	movs	r3, #50	; 0x32
   1bccc:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1bcd0:	4a10      	ldr	r2, [pc, #64]	; (1bd14 <mpsl_lib_init+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   1bcd2:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1bcd4:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1bcd6:	2119      	movs	r1, #25
   1bcd8:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1bcda:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1bcde:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1bce2:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1bce6:	f7e8 fd43 	bl	4770 <mpsl_init>
	if (err) {
   1bcea:	4604      	mov	r4, r0
   1bcec:	b970      	cbnz	r0, 1bd0c <mpsl_lib_init+0x44>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1bcee:	4601      	mov	r1, r0
   1bcf0:	462a      	mov	r2, r5
   1bcf2:	2008      	movs	r0, #8
   1bcf4:	f7f6 fcd6 	bl	126a4 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1bcf8:	462a      	mov	r2, r5
   1bcfa:	4621      	mov	r1, r4
   1bcfc:	200b      	movs	r0, #11
   1bcfe:	f7f6 fcd1 	bl	126a4 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1bd02:	462a      	mov	r2, r5
   1bd04:	4621      	mov	r1, r4
   1bd06:	4628      	mov	r0, r5
   1bd08:	f7f6 fccc 	bl	126a4 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   1bd0c:	4620      	mov	r0, r4
   1bd0e:	b003      	add	sp, #12
   1bd10:	bd30      	pop	{r4, r5, pc}
   1bd12:	bf00      	nop
   1bd14:	0001bc8d 	.word	0x0001bc8d

0001bd18 <mpsl_low_prio_irq_handler>:
   1bd18:	4801      	ldr	r0, [pc, #4]	; (1bd20 <mpsl_low_prio_irq_handler+0x8>)
   1bd1a:	f001 b8c7 	b.w	1ceac <z_impl_k_sem_give>
   1bd1e:	bf00      	nop
   1bd20:	20000834 	.word	0x20000834

0001bd24 <signal_thread>:
{
   1bd24:	b510      	push	{r4, lr}
	return z_impl_k_sem_take(sem, timeout);
   1bd26:	4c09      	ldr	r4, [pc, #36]	; (1bd4c <signal_thread+0x28>)
   1bd28:	f04f 32ff 	mov.w	r2, #4294967295
   1bd2c:	f04f 33ff 	mov.w	r3, #4294967295
   1bd30:	4620      	mov	r0, r4
   1bd32:	f001 f8e1 	bl	1cef8 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   1bd36:	f04f 31ff 	mov.w	r1, #4294967295
   1bd3a:	f04f 30ff 	mov.w	r0, #4294967295
   1bd3e:	f7ff fa49 	bl	1b1d4 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   1bd42:	f7f0 fd66 	bl	c812 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   1bd46:	f7ff fa4d 	bl	1b1e4 <multithreading_lock_release>
	while (true) {
   1bd4a:	e7ed      	b.n	1bd28 <signal_thread+0x4>
   1bd4c:	20000834 	.word	0x20000834

0001bd50 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   1bd50:	b530      	push	{r4, r5, lr}
   1bd52:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1bd54:	4d0f      	ldr	r5, [pc, #60]	; (1bd94 <mpsl_signal_thread_init+0x44>)
   1bd56:	4910      	ldr	r1, [pc, #64]	; (1bd98 <mpsl_signal_thread_init+0x48>)
   1bd58:	2200      	movs	r2, #0
   1bd5a:	2300      	movs	r3, #0
   1bd5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1bd60:	2400      	movs	r4, #0
   1bd62:	f06f 0309 	mvn.w	r3, #9
   1bd66:	e9cd 3403 	strd	r3, r4, [sp, #12]
   1bd6a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1bd6e:	4b0b      	ldr	r3, [pc, #44]	; (1bd9c <mpsl_signal_thread_init+0x4c>)
   1bd70:	9400      	str	r4, [sp, #0]
   1bd72:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1bd76:	4628      	mov	r0, r5
   1bd78:	f001 f934 	bl	1cfe4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1bd7c:	4908      	ldr	r1, [pc, #32]	; (1bda0 <mpsl_signal_thread_init+0x50>)
   1bd7e:	4628      	mov	r0, r5
   1bd80:	f008 ff3a 	bl	24bf8 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1bd84:	4622      	mov	r2, r4
   1bd86:	2104      	movs	r1, #4
   1bd88:	2019      	movs	r0, #25
   1bd8a:	f7f6 fc8b 	bl	126a4 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1bd8e:	4620      	mov	r0, r4
   1bd90:	b009      	add	sp, #36	; 0x24
   1bd92:	bd30      	pop	{r4, r5, pc}
   1bd94:	20001cb0 	.word	0x20001cb0
   1bd98:	20004fa0 	.word	0x20004fa0
   1bd9c:	0001bd25 	.word	0x0001bd25
   1bda0:	00027c00 	.word	0x00027c00

0001bda4 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1bda4:	4b01      	ldr	r3, [pc, #4]	; (1bdac <mpsl_hfclk_callback+0x8>)
   1bda6:	2000      	movs	r0, #0
   1bda8:	681b      	ldr	r3, [r3, #0]
   1bdaa:	4718      	bx	r3
   1bdac:	2000269c 	.word	0x2000269c

0001bdb0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   1bdb0:	b120      	cbz	r0, 1bdbc <nrfx_clock_start+0xc>
   1bdb2:	2801      	cmp	r0, #1
   1bdb4:	d106      	bne.n	1bdc4 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1bdb6:	4804      	ldr	r0, [pc, #16]	; (1bdc8 <nrfx_clock_start+0x18>)
   1bdb8:	f7e8 bb3a 	b.w	4430 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1bdbc:	4b03      	ldr	r3, [pc, #12]	; (1bdcc <nrfx_clock_start+0x1c>)
   1bdbe:	2001      	movs	r0, #1
   1bdc0:	681b      	ldr	r3, [r3, #0]
   1bdc2:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1bdc4:	4770      	bx	lr
   1bdc6:	bf00      	nop
   1bdc8:	0001bda5 	.word	0x0001bda5
   1bdcc:	2000269c 	.word	0x2000269c

0001bdd0 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1bdd0:	4b01      	ldr	r3, [pc, #4]	; (1bdd8 <nrfx_clock_init+0x8>)
   1bdd2:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1bdd4:	4801      	ldr	r0, [pc, #4]	; (1bddc <nrfx_clock_init+0xc>)
   1bdd6:	4770      	bx	lr
   1bdd8:	2000269c 	.word	0x2000269c
   1bddc:	0bad0000 	.word	0x0bad0000

0001bde0 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1bde0:	2301      	movs	r3, #1
   1bde2:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1bde6:	f010 0fff 	tst.w	r0, #255	; 0xff
   1bdea:	d012      	beq.n	1be12 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   1bdec:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bdf0:	f3ef 8111 	mrs	r1, BASEPRI
   1bdf4:	f383 8812 	msr	BASEPRI_MAX, r3
   1bdf8:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1bdfc:	4a06      	ldr	r2, [pc, #24]	; (1be18 <nrfx_gpiote_channel_free+0x38>)
   1bdfe:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1be00:	ea23 0000 	bic.w	r0, r3, r0
   1be04:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   1be06:	f381 8811 	msr	BASEPRI, r1
   1be0a:	f3bf 8f6f 	isb	sy
   1be0e:	4803      	ldr	r0, [pc, #12]	; (1be1c <nrfx_gpiote_channel_free+0x3c>)
   1be10:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1be12:	4803      	ldr	r0, [pc, #12]	; (1be20 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1be14:	4770      	bx	lr
   1be16:	bf00      	nop
   1be18:	200026a0 	.word	0x200026a0
   1be1c:	0bad0000 	.word	0x0bad0000
   1be20:	0bad0004 	.word	0x0bad0004

0001be24 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   1be24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1be28:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   1be2a:	f8df e060 	ldr.w	lr, [pc, #96]	; 1be8c <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1be2e:	4816      	ldr	r0, [pc, #88]	; (1be88 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   1be30:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1be90 <nrfx_gpiote_channel_alloc+0x6c>
{
   1be34:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1be36:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   1be38:	2601      	movs	r6, #1
   1be3a:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   1be3c:	f04f 0140 	mov.w	r1, #64	; 0x40
   1be40:	f3ef 8c11 	mrs	ip, BASEPRI
   1be44:	f381 8812 	msr	BASEPRI_MAX, r1
   1be48:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1be4c:	fa22 f103 	lsr.w	r1, r2, r3
   1be50:	07c9      	lsls	r1, r1, #31
   1be52:	d50a      	bpl.n	1be6a <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   1be54:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   1be58:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1be5c:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   1be5e:	bf01      	itttt	eq
   1be60:	4339      	orreq	r1, r7
   1be62:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
   1be66:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   1be68:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   1be6a:	f38c 8811 	msr	BASEPRI, ip
   1be6e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1be72:	4540      	cmp	r0, r8
   1be74:	d005      	beq.n	1be82 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   1be76:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1be7a:	439a      	bics	r2, r3
   1be7c:	f104 0401 	add.w	r4, r4, #1
   1be80:	d1db      	bne.n	1be3a <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1be82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1be86:	bf00      	nop
   1be88:	0bad0002 	.word	0x0bad0002
   1be8c:	200026a0 	.word	0x200026a0
   1be90:	0bad0000 	.word	0x0bad0000

0001be94 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   1be94:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1be98:	4905      	ldr	r1, [pc, #20]	; (1beb0 <__NVIC_SystemReset+0x1c>)
   1be9a:	4b06      	ldr	r3, [pc, #24]	; (1beb4 <__NVIC_SystemReset+0x20>)
   1be9c:	68ca      	ldr	r2, [r1, #12]
   1be9e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1bea2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1bea4:	60cb      	str	r3, [r1, #12]
   1bea6:	f3bf 8f4f 	dsb	sy
    __NOP();
   1beaa:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1beac:	e7fd      	b.n	1beaa <__NVIC_SystemReset+0x16>
   1beae:	bf00      	nop
   1beb0:	e000ed00 	.word	0xe000ed00
   1beb4:	05fa0004 	.word	0x05fa0004

0001beb8 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1beb8:	4b03      	ldr	r3, [pc, #12]	; (1bec8 <nrf52_errata_136+0x10>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1beba:	6818      	ldr	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   1bebc:	f1a0 0308 	sub.w	r3, r0, #8
   1bec0:	4258      	negs	r0, r3
   1bec2:	4158      	adcs	r0, r3
   1bec4:	4770      	bx	lr
   1bec6:	bf00      	nop
   1bec8:	10000130 	.word	0x10000130

0001becc <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1becc:	4b06      	ldr	r3, [pc, #24]	; (1bee8 <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1bece:	681b      	ldr	r3, [r3, #0]
   1bed0:	2b08      	cmp	r3, #8
   1bed2:	d106      	bne.n	1bee2 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1bed4:	4b05      	ldr	r3, [pc, #20]	; (1beec <nrf52_errata_103+0x20>)
   1bed6:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   1bed8:	2b05      	cmp	r3, #5
   1beda:	d802      	bhi.n	1bee2 <nrf52_errata_103+0x16>
   1bedc:	4a04      	ldr	r2, [pc, #16]	; (1bef0 <nrf52_errata_103+0x24>)
   1bede:	5cd0      	ldrb	r0, [r2, r3]
   1bee0:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1bee2:	2000      	movs	r0, #0
    #endif
}
   1bee4:	4770      	bx	lr
   1bee6:	bf00      	nop
   1bee8:	10000130 	.word	0x10000130
   1beec:	10000134 	.word	0x10000134
   1bef0:	00027c1c 	.word	0x00027c1c

0001bef4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1bef4:	4a02      	ldr	r2, [pc, #8]	; (1bf00 <nvmc_wait+0xc>)
   1bef6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1befa:	2b00      	cmp	r3, #0
   1befc:	d0fb      	beq.n	1bef6 <nvmc_wait+0x2>
}
   1befe:	4770      	bx	lr
   1bf00:	4001e000 	.word	0x4001e000

0001bf04 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1bf04:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1bf06:	f7ff ffd7 	bl	1beb8 <nrf52_errata_136>
   1bf0a:	b140      	cbz	r0, 1bf1e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1bf0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1bf10:	2200      	movs	r2, #0
   1bf12:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1bf16:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1bf1a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1bf1e:	f7ff ffcb 	bl	1beb8 <nrf52_errata_136>
   1bf22:	2800      	cmp	r0, #0
   1bf24:	d046      	beq.n	1bfb4 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1bf26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1bf2a:	4b61      	ldr	r3, [pc, #388]	; (1c0b0 <SystemInit+0x1ac>)
   1bf2c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1bf30:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1bf34:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1bf38:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1bf3c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1bf40:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1bf44:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1bf48:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1bf4c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1bf50:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1bf54:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1bf58:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1bf5c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1bf60:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1bf64:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1bf68:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1bf6c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1bf70:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1bf74:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1bf78:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1bf7c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1bf80:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1bf84:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1bf88:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1bf8c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1bf90:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1bf94:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1bf98:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1bf9c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1bfa0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1bfa4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1bfa8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1bfac:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1bfb0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1bfb4:	f7ff ff8a 	bl	1becc <nrf52_errata_103>
   1bfb8:	b110      	cbz	r0, 1bfc0 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1bfba:	4b3e      	ldr	r3, [pc, #248]	; (1c0b4 <SystemInit+0x1b0>)
   1bfbc:	4a3e      	ldr	r2, [pc, #248]	; (1c0b8 <SystemInit+0x1b4>)
   1bfbe:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1bfc0:	f7ff ff84 	bl	1becc <nrf52_errata_103>
   1bfc4:	b118      	cbz	r0, 1bfce <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1bfc6:	4b3d      	ldr	r3, [pc, #244]	; (1c0bc <SystemInit+0x1b8>)
   1bfc8:	22fb      	movs	r2, #251	; 0xfb
   1bfca:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1bfce:	f7ff ff7d 	bl	1becc <nrf52_errata_103>
   1bfd2:	b148      	cbz	r0, 1bfe8 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1bfd4:	493a      	ldr	r1, [pc, #232]	; (1c0c0 <SystemInit+0x1bc>)
   1bfd6:	4b3b      	ldr	r3, [pc, #236]	; (1c0c4 <SystemInit+0x1c0>)
   1bfd8:	680a      	ldr	r2, [r1, #0]
   1bfda:	681b      	ldr	r3, [r3, #0]
   1bfdc:	f022 020f 	bic.w	r2, r2, #15
   1bfe0:	f003 030f 	and.w	r3, r3, #15
   1bfe4:	4313      	orrs	r3, r2
   1bfe6:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1bfe8:	f7ff ff70 	bl	1becc <nrf52_errata_103>
   1bfec:	b118      	cbz	r0, 1bff6 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1bfee:	4b36      	ldr	r3, [pc, #216]	; (1c0c8 <SystemInit+0x1c4>)
   1bff0:	f44f 7200 	mov.w	r2, #512	; 0x200
   1bff4:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1bff6:	f7ff ff5f 	bl	1beb8 <nrf52_errata_136>
   1bffa:	b148      	cbz	r0, 1c010 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1bffc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c000:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1c004:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1c006:	bf44      	itt	mi
   1c008:	f06f 0201 	mvnmi.w	r2, #1
   1c00c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c010:	4b2e      	ldr	r3, [pc, #184]	; (1c0cc <SystemInit+0x1c8>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1c012:	681b      	ldr	r3, [r3, #0]
   1c014:	2b08      	cmp	r3, #8
   1c016:	d10e      	bne.n	1c036 <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1c018:	4b2d      	ldr	r3, [pc, #180]	; (1c0d0 <SystemInit+0x1cc>)
   1c01a:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   1c01c:	2b05      	cmp	r3, #5
   1c01e:	d802      	bhi.n	1c026 <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   1c020:	4a2c      	ldr	r2, [pc, #176]	; (1c0d4 <SystemInit+0x1d0>)
   1c022:	5cd3      	ldrb	r3, [r2, r3]
   1c024:	b13b      	cbz	r3, 1c036 <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1c026:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1c02a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1c02e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c032:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
   1c036:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   1c03a:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   1c03e:	07db      	lsls	r3, r3, #31
   1c040:	d514      	bpl.n	1c06c <SystemInit+0x168>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1c042:	4825      	ldr	r0, [pc, #148]	; (1c0d8 <SystemInit+0x1d4>)
   1c044:	2301      	movs	r3, #1
   1c046:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   1c04a:	f7ff ff53 	bl	1bef4 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
   1c04e:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   1c052:	f023 0301 	bic.w	r3, r3, #1
   1c056:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
   1c05a:	f7ff ff4b 	bl	1bef4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1c05e:	2300      	movs	r3, #0
   1c060:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   1c064:	f7ff ff46 	bl	1bef4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
   1c068:	f7ff ff14 	bl	1be94 <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1c06c:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
   1c070:	2b00      	cmp	r3, #0
   1c072:	db03      	blt.n	1c07c <SystemInit+0x178>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1c074:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1c078:	2b00      	cmp	r3, #0
   1c07a:	da14      	bge.n	1c0a6 <SystemInit+0x1a2>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1c07c:	4916      	ldr	r1, [pc, #88]	; (1c0d8 <SystemInit+0x1d4>)
   1c07e:	2301      	movs	r3, #1
   1c080:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1c084:	f7ff ff36 	bl	1bef4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1c088:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   1c08c:	2412      	movs	r4, #18
   1c08e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1c092:	f7ff ff2f 	bl	1bef4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1c096:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1c09a:	f7ff ff2b 	bl	1bef4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1c09e:	2300      	movs	r3, #0
   1c0a0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
   1c0a4:	e7de      	b.n	1c064 <SystemInit+0x160>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1c0a6:	4b0d      	ldr	r3, [pc, #52]	; (1c0dc <SystemInit+0x1d8>)
   1c0a8:	4a0d      	ldr	r2, [pc, #52]	; (1c0e0 <SystemInit+0x1dc>)
   1c0aa:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1c0ac:	bd10      	pop	{r4, pc}
   1c0ae:	bf00      	nop
   1c0b0:	4000c000 	.word	0x4000c000
   1c0b4:	4000568c 	.word	0x4000568c
   1c0b8:	00038148 	.word	0x00038148
   1c0bc:	4000f000 	.word	0x4000f000
   1c0c0:	40000ee4 	.word	0x40000ee4
   1c0c4:	10000258 	.word	0x10000258
   1c0c8:	40029640 	.word	0x40029640
   1c0cc:	10000130 	.word	0x10000130
   1c0d0:	10000134 	.word	0x10000134
   1c0d4:	00027c16 	.word	0x00027c16
   1c0d8:	4001e000 	.word	0x4001e000
   1c0dc:	200005b0 	.word	0x200005b0
   1c0e0:	03d09000 	.word	0x03d09000

0001c0e4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1c0e4:	4b0e      	ldr	r3, [pc, #56]	; (1c120 <z_sys_init_run_level+0x3c>)
{
   1c0e6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1c0e8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1c0ec:	3001      	adds	r0, #1
   1c0ee:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1c0f2:	42a6      	cmp	r6, r4
   1c0f4:	d800      	bhi.n	1c0f8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1c0f6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1c0f8:	e9d4 3500 	ldrd	r3, r5, [r4]
   1c0fc:	4628      	mov	r0, r5
   1c0fe:	4798      	blx	r3
		if (dev != NULL) {
   1c100:	b165      	cbz	r5, 1c11c <z_sys_init_run_level+0x38>
			if (rc != 0) {
   1c102:	68eb      	ldr	r3, [r5, #12]
   1c104:	b130      	cbz	r0, 1c114 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1c106:	2800      	cmp	r0, #0
   1c108:	bfb8      	it	lt
   1c10a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1c10c:	28ff      	cmp	r0, #255	; 0xff
   1c10e:	bfa8      	it	ge
   1c110:	20ff      	movge	r0, #255	; 0xff
   1c112:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1c114:	785a      	ldrb	r2, [r3, #1]
   1c116:	f042 0201 	orr.w	r2, r2, #1
   1c11a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1c11c:	3408      	adds	r4, #8
   1c11e:	e7e8      	b.n	1c0f2 <z_sys_init_run_level+0xe>
   1c120:	00025b8c 	.word	0x00025b8c

0001c124 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1c124:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1c126:	4605      	mov	r5, r0
   1c128:	b910      	cbnz	r0, 1c130 <z_impl_device_get_binding+0xc>
		return NULL;
   1c12a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   1c12c:	4620      	mov	r0, r4
   1c12e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   1c130:	7803      	ldrb	r3, [r0, #0]
   1c132:	2b00      	cmp	r3, #0
   1c134:	d0f9      	beq.n	1c12a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   1c136:	4a0f      	ldr	r2, [pc, #60]	; (1c174 <z_impl_device_get_binding+0x50>)
   1c138:	4c0f      	ldr	r4, [pc, #60]	; (1c178 <z_impl_device_get_binding+0x54>)
   1c13a:	4616      	mov	r6, r2
   1c13c:	4294      	cmp	r4, r2
   1c13e:	d108      	bne.n	1c152 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1c140:	4c0d      	ldr	r4, [pc, #52]	; (1c178 <z_impl_device_get_binding+0x54>)
   1c142:	42b4      	cmp	r4, r6
   1c144:	d0f1      	beq.n	1c12a <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1c146:	4620      	mov	r0, r4
   1c148:	f008 f941 	bl	243ce <z_device_ready>
   1c14c:	b950      	cbnz	r0, 1c164 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   1c14e:	3418      	adds	r4, #24
   1c150:	e7f7      	b.n	1c142 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   1c152:	4620      	mov	r0, r4
   1c154:	f008 f93b 	bl	243ce <z_device_ready>
   1c158:	b110      	cbz	r0, 1c160 <z_impl_device_get_binding+0x3c>
   1c15a:	6823      	ldr	r3, [r4, #0]
   1c15c:	42ab      	cmp	r3, r5
   1c15e:	d0e5      	beq.n	1c12c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1c160:	3418      	adds	r4, #24
   1c162:	e7eb      	b.n	1c13c <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1c164:	6821      	ldr	r1, [r4, #0]
   1c166:	4628      	mov	r0, r5
   1c168:	f005 fec0 	bl	21eec <strcmp>
   1c16c:	2800      	cmp	r0, #0
   1c16e:	d1ee      	bne.n	1c14e <z_impl_device_get_binding+0x2a>
   1c170:	e7dc      	b.n	1c12c <z_impl_device_get_binding+0x8>
   1c172:	bf00      	nop
   1c174:	0002503c 	.word	0x0002503c
   1c178:	00024fac 	.word	0x00024fac

0001c17c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1c17c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c180:	4606      	mov	r6, r0
   1c182:	460f      	mov	r7, r1
	__asm__ volatile(
   1c184:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c188:	f3ef 8811 	mrs	r8, BASEPRI
   1c18c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c190:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1c194:	f000 fe10 	bl	1cdb8 <z_impl_z_current_get>
   1c198:	4c1f      	ldr	r4, [pc, #124]	; (1c218 <z_fatal_error+0x9c>)
   1c19a:	4b20      	ldr	r3, [pc, #128]	; (1c21c <z_fatal_error+0xa0>)
   1c19c:	1ae4      	subs	r4, r4, r3
   1c19e:	2e04      	cmp	r6, #4
   1c1a0:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1c1a4:	bf96      	itet	ls
   1c1a6:	4a1e      	ldrls	r2, [pc, #120]	; (1c220 <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1c1a8:	4a1e      	ldrhi	r2, [pc, #120]	; (1c224 <z_fatal_error+0xa8>)
   1c1aa:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1c1ae:	01a4      	lsls	r4, r4, #6
   1c1b0:	f044 0301 	orr.w	r3, r4, #1
   1c1b4:	4605      	mov	r5, r0
   1c1b6:	f8ad 3000 	strh.w	r3, [sp]
   1c1ba:	481b      	ldr	r0, [pc, #108]	; (1c228 <z_fatal_error+0xac>)
   1c1bc:	2300      	movs	r3, #0
   1c1be:	4631      	mov	r1, r6
   1c1c0:	f005 fc00 	bl	219c4 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1c1c4:	b147      	cbz	r7, 1c1d8 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1c1c6:	69fb      	ldr	r3, [r7, #28]
   1c1c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1c1cc:	b123      	cbz	r3, 1c1d8 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1c1ce:	4817      	ldr	r0, [pc, #92]	; (1c22c <z_fatal_error+0xb0>)
   1c1d0:	f044 0101 	orr.w	r1, r4, #1
   1c1d4:	f005 fbbc 	bl	21950 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1c1d8:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1c1dc:	b12d      	cbz	r5, 1c1ea <z_fatal_error+0x6e>
   1c1de:	4628      	mov	r0, r5
   1c1e0:	f008 fd0d 	bl	24bfe <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1c1e4:	b108      	cbz	r0, 1c1ea <z_fatal_error+0x6e>
   1c1e6:	7803      	ldrb	r3, [r0, #0]
   1c1e8:	b903      	cbnz	r3, 1c1ec <z_fatal_error+0x70>
		thread_name = "unknown";
   1c1ea:	4811      	ldr	r0, [pc, #68]	; (1c230 <z_fatal_error+0xb4>)
   1c1ec:	f7f5 fc9e 	bl	11b2c <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   1c1f0:	4623      	mov	r3, r4
   1c1f2:	4602      	mov	r2, r0
   1c1f4:	4629      	mov	r1, r5
   1c1f6:	480f      	ldr	r0, [pc, #60]	; (1c234 <z_fatal_error+0xb8>)
   1c1f8:	f005 fbcb 	bl	21992 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1c1fc:	4639      	mov	r1, r7
   1c1fe:	4630      	mov	r0, r6
   1c200:	f7fe fff6 	bl	1b1f0 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1c204:	f388 8811 	msr	BASEPRI, r8
   1c208:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1c20c:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1c20e:	b002      	add	sp, #8
   1c210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c214:	f7f6 bdc0 	b.w	12d98 <z_impl_k_thread_abort>
   1c218:	000252d4 	.word	0x000252d4
   1c21c:	00025224 	.word	0x00025224
   1c220:	00025ba4 	.word	0x00025ba4
   1c224:	00027c22 	.word	0x00027c22
   1c228:	00027c30 	.word	0x00027c30
   1c22c:	00027c58 	.word	0x00027c58
   1c230:	00026ceb 	.word	0x00026ceb
   1c234:	00027c79 	.word	0x00027c79

0001c238 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1c238:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1c23a:	4c09      	ldr	r4, [pc, #36]	; (1c260 <idle+0x28>)
	__asm__ volatile(
   1c23c:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c240:	f3ef 8311 	mrs	r3, BASEPRI
   1c244:	f382 8812 	msr	BASEPRI_MAX, r2
   1c248:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1c24c:	f008 fcf1 	bl	24c32 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   1c250:	61a0      	str	r0, [r4, #24]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   1c252:	f7f6 f8bb 	bl	123cc <pm_system_suspend>
   1c256:	2800      	cmp	r0, #0
   1c258:	d1f0      	bne.n	1c23c <idle+0x4>
	arch_cpu_idle();
   1c25a:	f7f6 f943 	bl	124e4 <arch_cpu_idle>
}
   1c25e:	e7ed      	b.n	1c23c <idle+0x4>
   1c260:	20002700 	.word	0x20002700

0001c264 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   1c264:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   1c266:	2300      	movs	r3, #0
{
   1c268:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
   1c26a:	2201      	movs	r2, #1
   1c26c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1c270:	220f      	movs	r2, #15
   1c272:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
   1c276:	4c0d      	ldr	r4, [pc, #52]	; (1c2ac <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1c278:	4a0d      	ldr	r2, [pc, #52]	; (1c2b0 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
   1c27a:	9301      	str	r3, [sp, #4]
   1c27c:	490d      	ldr	r1, [pc, #52]	; (1c2b4 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1c27e:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
   1c280:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1c284:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
   1c288:	f44f 75b0 	mov.w	r5, #352	; 0x160
   1c28c:	9300      	str	r3, [sp, #0]
   1c28e:	fb05 1100 	mla	r1, r5, r0, r1
   1c292:	4b09      	ldr	r3, [pc, #36]	; (1c2b8 <init_idle_thread+0x54>)
   1c294:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1c298:	4620      	mov	r0, r4
   1c29a:	f000 fe71 	bl	1cf80 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1c29e:	7b63      	ldrb	r3, [r4, #13]
   1c2a0:	f023 0304 	bic.w	r3, r3, #4
   1c2a4:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1c2a6:	b007      	add	sp, #28
   1c2a8:	bd30      	pop	{r4, r5, pc}
   1c2aa:	bf00      	nop
   1c2ac:	20001d30 	.word	0x20001d30
   1c2b0:	20002700 	.word	0x20002700
   1c2b4:	20005be0 	.word	0x20005be0
   1c2b8:	0001c239 	.word	0x0001c239

0001c2bc <bg_thread_main>:
{
   1c2bc:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1c2be:	4b0a      	ldr	r3, [pc, #40]	; (1c2e8 <bg_thread_main+0x2c>)
   1c2c0:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1c2c2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1c2c4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1c2c6:	f7ff ff0d 	bl	1c0e4 <z_sys_init_run_level>
	boot_banner();
   1c2ca:	f008 fe13 	bl	24ef4 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1c2ce:	2003      	movs	r0, #3
   1c2d0:	f7ff ff08 	bl	1c0e4 <z_sys_init_run_level>
	z_init_static_threads();
   1c2d4:	f000 feb2 	bl	1d03c <z_init_static_threads>
	main();
   1c2d8:	f7f4 fce2 	bl	10ca0 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1c2dc:	4a03      	ldr	r2, [pc, #12]	; (1c2ec <bg_thread_main+0x30>)
   1c2de:	7b13      	ldrb	r3, [r2, #12]
   1c2e0:	f023 0301 	bic.w	r3, r3, #1
   1c2e4:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1c2e6:	bd08      	pop	{r3, pc}
   1c2e8:	200037ad 	.word	0x200037ad
   1c2ec:	20001db0 	.word	0x20001db0

0001c2f0 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1c2f0:	4802      	ldr	r0, [pc, #8]	; (1c2fc <z_bss_zero+0xc>)
   1c2f2:	4a03      	ldr	r2, [pc, #12]	; (1c300 <z_bss_zero+0x10>)
   1c2f4:	2100      	movs	r1, #0
   1c2f6:	1a12      	subs	r2, r2, r0
   1c2f8:	f005 be36 	b.w	21f68 <memset>
   1c2fc:	20000958 	.word	0x20000958
   1c300:	2000396c 	.word	0x2000396c

0001c304 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1c304:	b580      	push	{r7, lr}
   1c306:	b0a6      	sub	sp, #152	; 0x98
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1c308:	f7f5 fb50 	bl	119ac <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1c30c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 1c3e8 <z_cstart+0xe4>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1c310:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1c314:	4d2e      	ldr	r5, [pc, #184]	; (1c3d0 <z_cstart+0xcc>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1c316:	4e2f      	ldr	r6, [pc, #188]	; (1c3d4 <z_cstart+0xd0>)
   1c318:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c31a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 1c3ec <z_cstart+0xe8>
   1c31e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1c322:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c324:	23e0      	movs	r3, #224	; 0xe0
   1c326:	2400      	movs	r4, #0
   1c328:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1c32c:	2320      	movs	r3, #32
   1c32e:	77eb      	strb	r3, [r5, #31]
   1c330:	762c      	strb	r4, [r5, #24]
   1c332:	766c      	strb	r4, [r5, #25]
   1c334:	76ac      	strb	r4, [r5, #26]
   1c336:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1c33a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1c33c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1c340:	626b      	str	r3, [r5, #36]	; 0x24
   1c342:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1c346:	f7f6 fcd1 	bl	12cec <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1c34a:	f7f6 f8c5 	bl	124d8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1c34e:	f04f 33ff 	mov.w	r3, #4294967295
   1c352:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1c354:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1c356:	f7f6 fddb 	bl	12f10 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1c35a:	f7f6 fd2f 	bl	12dbc <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1c35e:	f240 1301 	movw	r3, #257	; 0x101
   1c362:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1c366:	ab06      	add	r3, sp, #24
   1c368:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1c36a:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1c36e:	f008 f82d 	bl	243cc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1c372:	4620      	mov	r0, r4
   1c374:	f7ff feb6 	bl	1c0e4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1c378:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   1c37a:	4d17      	ldr	r5, [pc, #92]	; (1c3d8 <z_cstart+0xd4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1c37c:	f7ff feb2 	bl	1c0e4 <z_sys_init_run_level>
	z_sched_init();
   1c380:	f000 fc66 	bl	1cc50 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c384:	4b15      	ldr	r3, [pc, #84]	; (1c3dc <z_cstart+0xd8>)
   1c386:	9305      	str	r3, [sp, #20]
   1c388:	2301      	movs	r3, #1
   1c38a:	4915      	ldr	r1, [pc, #84]	; (1c3e0 <z_cstart+0xdc>)
   1c38c:	9400      	str	r4, [sp, #0]
   1c38e:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1c392:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1c396:	464b      	mov	r3, r9
   1c398:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1c39c:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   1c39e:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c3a0:	f000 fdee 	bl	1cf80 <z_setup_new_thread>
   1c3a4:	7b6a      	ldrb	r2, [r5, #13]
   1c3a6:	f022 0204 	bic.w	r2, r2, #4
   1c3aa:	736a      	strb	r2, [r5, #13]
   1c3ac:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
   1c3ae:	4628      	mov	r0, r5
   1c3b0:	f008 fb53 	bl	24a5a <z_ready_thread>
		init_idle_thread(i);
   1c3b4:	4620      	mov	r0, r4
   1c3b6:	f7ff ff55 	bl	1c264 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1c3ba:	4b0a      	ldr	r3, [pc, #40]	; (1c3e4 <z_cstart+0xe0>)
   1c3bc:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1c3be:	464a      	mov	r2, r9
   1c3c0:	4639      	mov	r1, r7
   1c3c2:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   1c3c4:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   1c3c6:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1c3ca:	f7f6 f9ff 	bl	127cc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1c3ce:	bf00      	nop
   1c3d0:	e000ed00 	.word	0xe000ed00
   1c3d4:	20002700 	.word	0x20002700
   1c3d8:	20001db0 	.word	0x20001db0
   1c3dc:	00027cdb 	.word	0x00027cdb
   1c3e0:	200053c0 	.word	0x200053c0
   1c3e4:	20001d30 	.word	0x20001d30
   1c3e8:	20006560 	.word	0x20006560
   1c3ec:	0001c2bd 	.word	0x0001c2bd

0001c3f0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1c3f0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1c3f2:	4c06      	ldr	r4, [pc, #24]	; (1c40c <statics_init+0x1c>)
   1c3f4:	4d06      	ldr	r5, [pc, #24]	; (1c410 <statics_init+0x20>)
   1c3f6:	42ac      	cmp	r4, r5
   1c3f8:	d301      	bcc.n	1c3fe <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1c3fa:	2000      	movs	r0, #0
   1c3fc:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1c3fe:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1c402:	4620      	mov	r0, r4
   1c404:	f007 fff4 	bl	243f0 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1c408:	3414      	adds	r4, #20
   1c40a:	e7f4      	b.n	1c3f6 <statics_init+0x6>
   1c40c:	20000770 	.word	0x20000770
   1c410:	20000770 	.word	0x20000770

0001c414 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1c414:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1c416:	4b0e      	ldr	r3, [pc, #56]	; (1c450 <init_mem_slab_module+0x3c>)
   1c418:	4c0e      	ldr	r4, [pc, #56]	; (1c454 <init_mem_slab_module+0x40>)
   1c41a:	42a3      	cmp	r3, r4
   1c41c:	d301      	bcc.n	1c422 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1c41e:	2000      	movs	r0, #0
	return rc;
}
   1c420:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1c422:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1c426:	ea41 0200 	orr.w	r2, r1, r0
   1c42a:	f012 0203 	ands.w	r2, r2, #3
   1c42e:	d10b      	bne.n	1c448 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1c430:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1c432:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1c434:	42aa      	cmp	r2, r5
   1c436:	d101      	bne.n	1c43c <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1c438:	331c      	adds	r3, #28
   1c43a:	e7ee      	b.n	1c41a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1c43c:	695e      	ldr	r6, [r3, #20]
   1c43e:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1c440:	3201      	adds	r2, #1
		slab->free_list = p;
   1c442:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1c444:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1c446:	e7f5      	b.n	1c434 <init_mem_slab_module+0x20>
		return -EINVAL;
   1c448:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1c44c:	e7e8      	b.n	1c420 <init_mem_slab_module+0xc>
   1c44e:	bf00      	nop
   1c450:	2000071c 	.word	0x2000071c
   1c454:	20000770 	.word	0x20000770

0001c458 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1c458:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1c45a:	460c      	mov	r4, r1
   1c45c:	4616      	mov	r6, r2
   1c45e:	461f      	mov	r7, r3
   1c460:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c464:	f3ef 8111 	mrs	r1, BASEPRI
   1c468:	f383 8812 	msr	BASEPRI_MAX, r3
   1c46c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1c470:	6943      	ldr	r3, [r0, #20]
   1c472:	b15b      	cbz	r3, 1c48c <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1c474:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1c476:	681b      	ldr	r3, [r3, #0]
   1c478:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1c47a:	6983      	ldr	r3, [r0, #24]
   1c47c:	3301      	adds	r3, #1
   1c47e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1c480:	2000      	movs	r0, #0
	__asm__ volatile(
   1c482:	f381 8811 	msr	BASEPRI, r1
   1c486:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1c48a:	e011      	b.n	1c4b0 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1c48c:	ea56 0207 	orrs.w	r2, r6, r7
   1c490:	d103      	bne.n	1c49a <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1c492:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1c494:	f06f 000b 	mvn.w	r0, #11
   1c498:	e7f3      	b.n	1c482 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1c49a:	4602      	mov	r2, r0
   1c49c:	e9cd 6700 	strd	r6, r7, [sp]
   1c4a0:	3008      	adds	r0, #8
   1c4a2:	f000 fb27 	bl	1caf4 <z_pend_curr>
		if (result == 0) {
   1c4a6:	b918      	cbnz	r0, 1c4b0 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1c4a8:	4b02      	ldr	r3, [pc, #8]	; (1c4b4 <k_mem_slab_alloc+0x5c>)
   1c4aa:	689b      	ldr	r3, [r3, #8]
   1c4ac:	695b      	ldr	r3, [r3, #20]
   1c4ae:	6023      	str	r3, [r4, #0]
}
   1c4b0:	b002      	add	sp, #8
   1c4b2:	bdd0      	pop	{r4, r6, r7, pc}
   1c4b4:	20002700 	.word	0x20002700

0001c4b8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1c4b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c4bc:	4604      	mov	r4, r0
   1c4be:	4616      	mov	r6, r2
   1c4c0:	461f      	mov	r7, r3
	__asm__ volatile(
   1c4c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c4c6:	f3ef 8811 	mrs	r8, BASEPRI
   1c4ca:	f383 8812 	msr	BASEPRI_MAX, r3
   1c4ce:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1c4d2:	68c3      	ldr	r3, [r0, #12]
   1c4d4:	4a35      	ldr	r2, [pc, #212]	; (1c5ac <z_impl_k_mutex_lock+0xf4>)
   1c4d6:	b16b      	cbz	r3, 1c4f4 <z_impl_k_mutex_lock+0x3c>
   1c4d8:	6880      	ldr	r0, [r0, #8]
   1c4da:	6891      	ldr	r1, [r2, #8]
   1c4dc:	4288      	cmp	r0, r1
   1c4de:	d019      	beq.n	1c514 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1c4e0:	ea56 0307 	orrs.w	r3, r6, r7
   1c4e4:	d118      	bne.n	1c518 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1c4e6:	f388 8811 	msr	BASEPRI, r8
   1c4ea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1c4ee:	f06f 000f 	mvn.w	r0, #15
   1c4f2:	e00c      	b.n	1c50e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1c4f4:	6891      	ldr	r1, [r2, #8]
   1c4f6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1c4fa:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1c4fc:	3301      	adds	r3, #1
   1c4fe:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1c500:	6893      	ldr	r3, [r2, #8]
   1c502:	60a3      	str	r3, [r4, #8]
   1c504:	f388 8811 	msr	BASEPRI, r8
   1c508:	f3bf 8f6f 	isb	sy
		return 0;
   1c50c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1c50e:	b002      	add	sp, #8
   1c510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1c514:	6921      	ldr	r1, [r4, #16]
   1c516:	e7f0      	b.n	1c4fa <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1c518:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1c51c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   1c520:	4299      	cmp	r1, r3
   1c522:	bfa8      	it	ge
   1c524:	4619      	movge	r1, r3
   1c526:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1c52a:	4291      	cmp	r1, r2
   1c52c:	bfb8      	it	lt
   1c52e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1c530:	428b      	cmp	r3, r1
   1c532:	dd2f      	ble.n	1c594 <z_impl_k_mutex_lock+0xdc>
		return z_set_prio(mutex->owner, new_prio);
   1c534:	f000 faf2 	bl	1cb1c <z_set_prio>
   1c538:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1c53a:	e9cd 6700 	strd	r6, r7, [sp]
   1c53e:	481c      	ldr	r0, [pc, #112]	; (1c5b0 <z_impl_k_mutex_lock+0xf8>)
   1c540:	4622      	mov	r2, r4
   1c542:	4641      	mov	r1, r8
   1c544:	f000 fad6 	bl	1caf4 <z_pend_curr>
	if (got_mutex == 0) {
   1c548:	2800      	cmp	r0, #0
   1c54a:	d0e0      	beq.n	1c50e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1c54c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c550:	f3ef 8611 	mrs	r6, BASEPRI
   1c554:	f383 8812 	msr	BASEPRI_MAX, r3
   1c558:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1c55c:	6823      	ldr	r3, [r4, #0]
   1c55e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c560:	429c      	cmp	r4, r3
   1c562:	d00a      	beq.n	1c57a <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1c564:	b14b      	cbz	r3, 1c57a <z_impl_k_mutex_lock+0xc2>
   1c566:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1c56a:	4299      	cmp	r1, r3
   1c56c:	bfa8      	it	ge
   1c56e:	4619      	movge	r1, r3
   1c570:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1c574:	4299      	cmp	r1, r3
   1c576:	bfb8      	it	lt
   1c578:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1c57a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1c57c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1c580:	4299      	cmp	r1, r3
   1c582:	d109      	bne.n	1c598 <z_impl_k_mutex_lock+0xe0>
	if (resched) {
   1c584:	b16d      	cbz	r5, 1c5a2 <z_impl_k_mutex_lock+0xea>
		z_reschedule(&lock, key);
   1c586:	480a      	ldr	r0, [pc, #40]	; (1c5b0 <z_impl_k_mutex_lock+0xf8>)
   1c588:	4631      	mov	r1, r6
   1c58a:	f000 f959 	bl	1c840 <z_reschedule>
	return -EAGAIN;
   1c58e:	f06f 000a 	mvn.w	r0, #10
   1c592:	e7bc      	b.n	1c50e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1c594:	2500      	movs	r5, #0
   1c596:	e7d0      	b.n	1c53a <z_impl_k_mutex_lock+0x82>
		return z_set_prio(mutex->owner, new_prio);
   1c598:	f000 fac0 	bl	1cb1c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1c59c:	2800      	cmp	r0, #0
   1c59e:	d1f2      	bne.n	1c586 <z_impl_k_mutex_lock+0xce>
   1c5a0:	e7f0      	b.n	1c584 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1c5a2:	f386 8811 	msr	BASEPRI, r6
   1c5a6:	f3bf 8f6f 	isb	sy
   1c5aa:	e7f0      	b.n	1c58e <z_impl_k_mutex_lock+0xd6>
   1c5ac:	20002700 	.word	0x20002700
   1c5b0:	200037ae 	.word	0x200037ae

0001c5b4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1c5b4:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1c5b6:	6883      	ldr	r3, [r0, #8]
{
   1c5b8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1c5ba:	2b00      	cmp	r3, #0
   1c5bc:	d036      	beq.n	1c62c <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1c5be:	4a1e      	ldr	r2, [pc, #120]	; (1c638 <z_impl_k_mutex_unlock+0x84>)
   1c5c0:	6892      	ldr	r2, [r2, #8]
   1c5c2:	4293      	cmp	r3, r2
   1c5c4:	d135      	bne.n	1c632 <z_impl_k_mutex_unlock+0x7e>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1c5c6:	7bda      	ldrb	r2, [r3, #15]
   1c5c8:	3a01      	subs	r2, #1
   1c5ca:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1c5cc:	68c3      	ldr	r3, [r0, #12]
   1c5ce:	2b01      	cmp	r3, #1
   1c5d0:	d905      	bls.n	1c5de <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1c5d2:	3b01      	subs	r3, #1
   1c5d4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1c5d6:	f000 fb1f 	bl	1cc18 <k_sched_unlock>

	return 0;
   1c5da:	2000      	movs	r0, #0
}
   1c5dc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1c5de:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c5e2:	f3ef 8511 	mrs	r5, BASEPRI
   1c5e6:	f383 8812 	msr	BASEPRI_MAX, r3
   1c5ea:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1c5ee:	6901      	ldr	r1, [r0, #16]
   1c5f0:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1c5f2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1c5f6:	4299      	cmp	r1, r3
   1c5f8:	d001      	beq.n	1c5fe <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1c5fa:	f000 fa8f 	bl	1cb1c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1c5fe:	4620      	mov	r0, r4
   1c600:	f008 fa9f 	bl	24b42 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1c604:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1c606:	b158      	cbz	r0, 1c620 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1c608:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1c60c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1c60e:	2200      	movs	r2, #0
   1c610:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1c612:	f008 fa22 	bl	24a5a <z_ready_thread>
		z_reschedule(&lock, key);
   1c616:	4809      	ldr	r0, [pc, #36]	; (1c63c <z_impl_k_mutex_unlock+0x88>)
   1c618:	4629      	mov	r1, r5
   1c61a:	f000 f911 	bl	1c840 <z_reschedule>
   1c61e:	e7da      	b.n	1c5d6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1c620:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1c622:	f385 8811 	msr	BASEPRI, r5
   1c626:	f3bf 8f6f 	isb	sy
   1c62a:	e7d4      	b.n	1c5d6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1c62c:	f06f 0015 	mvn.w	r0, #21
   1c630:	e7d4      	b.n	1c5dc <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1c632:	f04f 30ff 	mov.w	r0, #4294967295
   1c636:	e7d1      	b.n	1c5dc <z_impl_k_mutex_unlock+0x28>
   1c638:	20002700 	.word	0x20002700
   1c63c:	200037ae 	.word	0x200037ae

0001c640 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1c640:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1c644:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1c646:	4b29      	ldr	r3, [pc, #164]	; (1c6ec <z_impl_k_poll+0xac>)
   1c648:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   1c64a:	2301      	movs	r3, #1
   1c64c:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	poller->mode = MODE_POLL;
   1c650:	f885 3061 	strb.w	r3, [r5, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1c654:	ea52 0307 	orrs.w	r3, r2, r7
{
   1c658:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1c65a:	bf0c      	ite	eq
   1c65c:	2301      	moveq	r3, #1
   1c65e:	2300      	movne	r3, #0
   1c660:	f105 0260 	add.w	r2, r5, #96	; 0x60
{
   1c664:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1c666:	f007 ffdc 	bl	24622 <register_events>
   1c66a:	4681      	mov	r9, r0
	__asm__ volatile(
   1c66c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c670:	f3ef 8a11 	mrs	sl, BASEPRI
   1c674:	f383 8812 	msr	BASEPRI_MAX, r3
   1c678:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1c67c:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
   1c680:	b964      	cbnz	r4, 1c69c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1c682:	4601      	mov	r1, r0
   1c684:	4652      	mov	r2, sl
   1c686:	4640      	mov	r0, r8
   1c688:	f007 ff69 	bl	2455e <clear_event_registrations>
	__asm__ volatile(
   1c68c:	f38a 8811 	msr	BASEPRI, sl
   1c690:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1c694:	4620      	mov	r0, r4
   1c696:	b002      	add	sp, #8
   1c698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1c69c:	2300      	movs	r3, #0
   1c69e:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c6a2:	ea56 0307 	orrs.w	r3, r6, r7
   1c6a6:	d106      	bne.n	1c6b6 <z_impl_k_poll+0x76>
   1c6a8:	f38a 8811 	msr	BASEPRI, sl
   1c6ac:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1c6b0:	f06f 040a 	mvn.w	r4, #10
   1c6b4:	e7ee      	b.n	1c694 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c6b6:	e9cd 6700 	strd	r6, r7, [sp]
   1c6ba:	4a0d      	ldr	r2, [pc, #52]	; (1c6f0 <z_impl_k_poll+0xb0>)
   1c6bc:	480d      	ldr	r0, [pc, #52]	; (1c6f4 <z_impl_k_poll+0xb4>)
   1c6be:	4651      	mov	r1, sl
   1c6c0:	f000 fa18 	bl	1caf4 <z_pend_curr>
   1c6c4:	4604      	mov	r4, r0
	__asm__ volatile(
   1c6c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c6ca:	f3ef 8511 	mrs	r5, BASEPRI
   1c6ce:	f383 8812 	msr	BASEPRI_MAX, r3
   1c6d2:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1c6d6:	462a      	mov	r2, r5
   1c6d8:	4649      	mov	r1, r9
   1c6da:	4640      	mov	r0, r8
   1c6dc:	f007 ff3f 	bl	2455e <clear_event_registrations>
	__asm__ volatile(
   1c6e0:	f385 8811 	msr	BASEPRI, r5
   1c6e4:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1c6e8:	e7d4      	b.n	1c694 <z_impl_k_poll+0x54>
   1c6ea:	bf00      	nop
   1c6ec:	20002700 	.word	0x20002700
   1c6f0:	200005b4 	.word	0x200005b4
   1c6f4:	200037ae 	.word	0x200037ae

0001c6f8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1c6f8:	b538      	push	{r3, r4, r5, lr}
   1c6fa:	4603      	mov	r3, r0
	__asm__ volatile(
   1c6fc:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c700:	f3ef 8511 	mrs	r5, BASEPRI
   1c704:	f382 8812 	msr	BASEPRI_MAX, r2
   1c708:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1c70c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1c70e:	2101      	movs	r1, #1
   1c710:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1c712:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1c714:	4283      	cmp	r3, r0
   1c716:	d106      	bne.n	1c726 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1c718:	f385 8811 	msr	BASEPRI, r5
   1c71c:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1c720:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1c722:	4620      	mov	r0, r4
   1c724:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1c726:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1c72a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c72c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c72e:	2300      	movs	r3, #0
	node->prev = NULL;
   1c730:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c734:	f007 ffec 	bl	24710 <signal_poll_event>
	z_reschedule(&lock, key);
   1c738:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c73a:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1c73c:	4801      	ldr	r0, [pc, #4]	; (1c744 <z_impl_k_poll_signal_raise+0x4c>)
   1c73e:	f000 f87f 	bl	1c840 <z_reschedule>
	return rc;
   1c742:	e7ee      	b.n	1c722 <z_impl_k_poll_signal_raise+0x2a>
   1c744:	200037ae 	.word	0x200037ae

0001c748 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1c748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c74a:	4616      	mov	r6, r2
   1c74c:	461f      	mov	r7, r3
	__asm__ volatile(
   1c74e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c752:	f3ef 8511 	mrs	r5, BASEPRI
   1c756:	f383 8812 	msr	BASEPRI_MAX, r3
   1c75a:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1c75e:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1c760:	b19c      	cbz	r4, 1c78a <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1c762:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1c764:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1c766:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1c76a:	4294      	cmp	r4, r2
	list->head = node;
   1c76c:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1c76e:	bf08      	it	eq
   1c770:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1c772:	2101      	movs	r1, #1
   1c774:	4620      	mov	r0, r4
   1c776:	f008 f8a8 	bl	248ca <z_queue_node_peek>
   1c77a:	4604      	mov	r4, r0
	__asm__ volatile(
   1c77c:	f385 8811 	msr	BASEPRI, r5
   1c780:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1c784:	4620      	mov	r0, r4
   1c786:	b003      	add	sp, #12
   1c788:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c78a:	ea56 0307 	orrs.w	r3, r6, r7
   1c78e:	d0f5      	beq.n	1c77c <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1c790:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1c794:	e9cd 6700 	strd	r6, r7, [sp]
   1c798:	4629      	mov	r1, r5
   1c79a:	4610      	mov	r0, r2
   1c79c:	f000 f9aa 	bl	1caf4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1c7a0:	2800      	cmp	r0, #0
   1c7a2:	d1ef      	bne.n	1c784 <z_impl_k_queue_get+0x3c>
   1c7a4:	4b01      	ldr	r3, [pc, #4]	; (1c7ac <z_impl_k_queue_get+0x64>)
   1c7a6:	689b      	ldr	r3, [r3, #8]
   1c7a8:	695c      	ldr	r4, [r3, #20]
   1c7aa:	e7eb      	b.n	1c784 <z_impl_k_queue_get+0x3c>
   1c7ac:	20002700 	.word	0x20002700

0001c7b0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1c7b0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1c7b2:	4c08      	ldr	r4, [pc, #32]	; (1c7d4 <z_reset_time_slice+0x24>)
   1c7b4:	6823      	ldr	r3, [r4, #0]
   1c7b6:	b15b      	cbz	r3, 1c7d0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1c7b8:	f7fe fd02 	bl	1b1c0 <sys_clock_elapsed>
   1c7bc:	4603      	mov	r3, r0
   1c7be:	6820      	ldr	r0, [r4, #0]
   1c7c0:	4a05      	ldr	r2, [pc, #20]	; (1c7d8 <z_reset_time_slice+0x28>)
   1c7c2:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1c7c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1c7c8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1c7ca:	2100      	movs	r1, #0
   1c7cc:	f008 ba41 	b.w	24c52 <z_set_timeout_expiry>
}
   1c7d0:	bd10      	pop	{r4, pc}
   1c7d2:	bf00      	nop
   1c7d4:	20002730 	.word	0x20002730
   1c7d8:	20002700 	.word	0x20002700

0001c7dc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1c7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c7de:	4604      	mov	r4, r0
   1c7e0:	460d      	mov	r5, r1
	__asm__ volatile(
   1c7e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c7e6:	f3ef 8611 	mrs	r6, BASEPRI
   1c7ea:	f383 8812 	msr	BASEPRI_MAX, r3
   1c7ee:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1c7f2:	4b10      	ldr	r3, [pc, #64]	; (1c834 <k_sched_time_slice_set+0x58>)
   1c7f4:	2200      	movs	r2, #0
   1c7f6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1c7fa:	f240 30e7 	movw	r0, #999	; 0x3e7
   1c7fe:	2100      	movs	r1, #0
   1c800:	611a      	str	r2, [r3, #16]
   1c802:	fbe7 0104 	umlal	r0, r1, r7, r4
   1c806:	2300      	movs	r3, #0
   1c808:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c80c:	f7e4 fc78 	bl	1100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1c810:	2c00      	cmp	r4, #0
   1c812:	4b09      	ldr	r3, [pc, #36]	; (1c838 <k_sched_time_slice_set+0x5c>)
   1c814:	dc09      	bgt.n	1c82a <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   1c816:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1c818:	4b08      	ldr	r3, [pc, #32]	; (1c83c <k_sched_time_slice_set+0x60>)
   1c81a:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1c81c:	f7ff ffc8 	bl	1c7b0 <z_reset_time_slice>
	__asm__ volatile(
   1c820:	f386 8811 	msr	BASEPRI, r6
   1c824:	f3bf 8f6f 	isb	sy
	}
}
   1c828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1c82a:	2802      	cmp	r0, #2
   1c82c:	bfb8      	it	lt
   1c82e:	2002      	movlt	r0, #2
   1c830:	e7f1      	b.n	1c816 <k_sched_time_slice_set+0x3a>
   1c832:	bf00      	nop
   1c834:	20002700 	.word	0x20002700
   1c838:	20002730 	.word	0x20002730
   1c83c:	2000272c 	.word	0x2000272c

0001c840 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1c840:	b949      	cbnz	r1, 1c856 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1c842:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1c846:	b930      	cbnz	r0, 1c856 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1c848:	4b05      	ldr	r3, [pc, #20]	; (1c860 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1c84a:	69da      	ldr	r2, [r3, #28]
   1c84c:	689b      	ldr	r3, [r3, #8]
   1c84e:	429a      	cmp	r2, r3
   1c850:	d001      	beq.n	1c856 <z_reschedule+0x16>
	ret = arch_swap(key);
   1c852:	f7f5 bf6b 	b.w	1272c <arch_swap>
   1c856:	f381 8811 	msr	BASEPRI, r1
   1c85a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1c85e:	4770      	bx	lr
   1c860:	20002700 	.word	0x20002700

0001c864 <k_sched_lock>:
	__asm__ volatile(
   1c864:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c868:	f3ef 8111 	mrs	r1, BASEPRI
   1c86c:	f383 8812 	msr	BASEPRI_MAX, r3
   1c870:	f3bf 8f6f 	isb	sy
   1c874:	4b04      	ldr	r3, [pc, #16]	; (1c888 <k_sched_lock+0x24>)
   1c876:	689a      	ldr	r2, [r3, #8]
   1c878:	7bd3      	ldrb	r3, [r2, #15]
   1c87a:	3b01      	subs	r3, #1
   1c87c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1c87e:	f381 8811 	msr	BASEPRI, r1
   1c882:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1c886:	4770      	bx	lr
   1c888:	20002700 	.word	0x20002700

0001c88c <update_cache>:
{
   1c88c:	b538      	push	{r3, r4, r5, lr}
   1c88e:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1c890:	480c      	ldr	r0, [pc, #48]	; (1c8c4 <update_cache+0x38>)
   1c892:	4d0d      	ldr	r5, [pc, #52]	; (1c8c8 <update_cache+0x3c>)
   1c894:	f008 f8d7 	bl	24a46 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1c898:	4604      	mov	r4, r0
   1c89a:	b900      	cbnz	r0, 1c89e <update_cache+0x12>
   1c89c:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   1c89e:	68ab      	ldr	r3, [r5, #8]
   1c8a0:	b94a      	cbnz	r2, 1c8b6 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1c8a2:	7b5a      	ldrb	r2, [r3, #13]
   1c8a4:	06d2      	lsls	r2, r2, #27
   1c8a6:	d106      	bne.n	1c8b6 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1c8a8:	69a2      	ldr	r2, [r4, #24]
   1c8aa:	b922      	cbnz	r2, 1c8b6 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1c8ac:	89da      	ldrh	r2, [r3, #14]
   1c8ae:	2a7f      	cmp	r2, #127	; 0x7f
   1c8b0:	d901      	bls.n	1c8b6 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1c8b2:	61eb      	str	r3, [r5, #28]
}
   1c8b4:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1c8b6:	429c      	cmp	r4, r3
   1c8b8:	d001      	beq.n	1c8be <update_cache+0x32>
			z_reset_time_slice();
   1c8ba:	f7ff ff79 	bl	1c7b0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1c8be:	61ec      	str	r4, [r5, #28]
}
   1c8c0:	e7f8      	b.n	1c8b4 <update_cache+0x28>
   1c8c2:	bf00      	nop
   1c8c4:	20002720 	.word	0x20002720
   1c8c8:	20002700 	.word	0x20002700

0001c8cc <move_thread_to_end_of_prio_q>:
{
   1c8cc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1c8ce:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1c8d2:	7b43      	ldrb	r3, [r0, #13]
   1c8d4:	2a00      	cmp	r2, #0
{
   1c8d6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1c8d8:	da04      	bge.n	1c8e4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c8da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c8de:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1c8e0:	f008 f85c 	bl	2499c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1c8e4:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1c8e6:	4a17      	ldr	r2, [pc, #92]	; (1c944 <move_thread_to_end_of_prio_q+0x78>)
   1c8e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c8ec:	4610      	mov	r0, r2
   1c8ee:	734b      	strb	r3, [r1, #13]
   1c8f0:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c8f4:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c8f6:	4283      	cmp	r3, r0
   1c8f8:	bf08      	it	eq
   1c8fa:	2300      	moveq	r3, #0
   1c8fc:	2b00      	cmp	r3, #0
   1c8fe:	bf38      	it	cc
   1c900:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c902:	b1cb      	cbz	r3, 1c938 <move_thread_to_end_of_prio_q+0x6c>
	int32_t b1 = thread_1->base.prio;
   1c904:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1c908:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1c90c:	42a6      	cmp	r6, r4
   1c90e:	d00f      	beq.n	1c930 <move_thread_to_end_of_prio_q+0x64>
		return b2 - b1;
   1c910:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1c912:	2c00      	cmp	r4, #0
   1c914:	dd0c      	ble.n	1c930 <move_thread_to_end_of_prio_q+0x64>
	sys_dnode_t *const prev = successor->prev;
   1c916:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1c918:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1c91c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1c91e:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1c920:	6890      	ldr	r0, [r2, #8]
   1c922:	1a43      	subs	r3, r0, r1
   1c924:	4258      	negs	r0, r3
}
   1c926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1c92a:	4158      	adcs	r0, r3
   1c92c:	f7ff bfae 	b.w	1c88c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1c930:	42ab      	cmp	r3, r5
   1c932:	d001      	beq.n	1c938 <move_thread_to_end_of_prio_q+0x6c>
   1c934:	681b      	ldr	r3, [r3, #0]
   1c936:	e7e4      	b.n	1c902 <move_thread_to_end_of_prio_q+0x36>
	node->prev = tail;
   1c938:	e9c1 0500 	strd	r0, r5, [r1]
	tail->next = node;
   1c93c:	6029      	str	r1, [r5, #0]
	list->tail = node;
   1c93e:	6251      	str	r1, [r2, #36]	; 0x24
}
   1c940:	e7ee      	b.n	1c920 <move_thread_to_end_of_prio_q+0x54>
   1c942:	bf00      	nop
   1c944:	20002700 	.word	0x20002700

0001c948 <z_time_slice>:
{
   1c948:	b570      	push	{r4, r5, r6, lr}
   1c94a:	4601      	mov	r1, r0
	__asm__ volatile(
   1c94c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c950:	f3ef 8411 	mrs	r4, BASEPRI
   1c954:	f383 8812 	msr	BASEPRI_MAX, r3
   1c958:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1c95c:	4b16      	ldr	r3, [pc, #88]	; (1c9b8 <z_time_slice+0x70>)
   1c95e:	4a17      	ldr	r2, [pc, #92]	; (1c9bc <z_time_slice+0x74>)
   1c960:	6898      	ldr	r0, [r3, #8]
   1c962:	6815      	ldr	r5, [r2, #0]
   1c964:	42a8      	cmp	r0, r5
   1c966:	461d      	mov	r5, r3
   1c968:	d106      	bne.n	1c978 <z_time_slice+0x30>
			z_reset_time_slice();
   1c96a:	f7ff ff21 	bl	1c7b0 <z_reset_time_slice>
	__asm__ volatile(
   1c96e:	f384 8811 	msr	BASEPRI, r4
   1c972:	f3bf 8f6f 	isb	sy
}
   1c976:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1c978:	2600      	movs	r6, #0
   1c97a:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1c97c:	4a10      	ldr	r2, [pc, #64]	; (1c9c0 <z_time_slice+0x78>)
   1c97e:	6812      	ldr	r2, [r2, #0]
   1c980:	b1ba      	cbz	r2, 1c9b2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1c982:	89c2      	ldrh	r2, [r0, #14]
   1c984:	2a7f      	cmp	r2, #127	; 0x7f
   1c986:	d814      	bhi.n	1c9b2 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1c988:	7b42      	ldrb	r2, [r0, #13]
   1c98a:	06d2      	lsls	r2, r2, #27
   1c98c:	d111      	bne.n	1c9b2 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1c98e:	4a0d      	ldr	r2, [pc, #52]	; (1c9c4 <z_time_slice+0x7c>)
   1c990:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1c994:	6812      	ldr	r2, [r2, #0]
   1c996:	4296      	cmp	r6, r2
   1c998:	db0b      	blt.n	1c9b2 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1c99a:	4a0b      	ldr	r2, [pc, #44]	; (1c9c8 <z_time_slice+0x80>)
   1c99c:	4290      	cmp	r0, r2
   1c99e:	d008      	beq.n	1c9b2 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1c9a0:	691a      	ldr	r2, [r3, #16]
   1c9a2:	428a      	cmp	r2, r1
   1c9a4:	dc02      	bgt.n	1c9ac <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1c9a6:	f7ff ff91 	bl	1c8cc <move_thread_to_end_of_prio_q>
   1c9aa:	e7de      	b.n	1c96a <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1c9ac:	1a52      	subs	r2, r2, r1
   1c9ae:	611a      	str	r2, [r3, #16]
   1c9b0:	e7dd      	b.n	1c96e <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1c9b2:	2300      	movs	r3, #0
   1c9b4:	612b      	str	r3, [r5, #16]
   1c9b6:	e7da      	b.n	1c96e <z_time_slice+0x26>
   1c9b8:	20002700 	.word	0x20002700
   1c9bc:	20002728 	.word	0x20002728
   1c9c0:	20002730 	.word	0x20002730
   1c9c4:	2000272c 	.word	0x2000272c
   1c9c8:	20001d30 	.word	0x20001d30

0001c9cc <ready_thread>:
{
   1c9cc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1c9ce:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1c9d2:	7b42      	ldrb	r2, [r0, #13]
   1c9d4:	2b00      	cmp	r3, #0
   1c9d6:	db2d      	blt.n	1ca34 <ready_thread+0x68>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1c9d8:	06d3      	lsls	r3, r2, #27
   1c9da:	d12b      	bne.n	1ca34 <ready_thread+0x68>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *to)
{
	return !sys_dnode_is_linked(&to->node);
   1c9dc:	6983      	ldr	r3, [r0, #24]
   1c9de:	bb4b      	cbnz	r3, 1ca34 <ready_thread+0x68>
	return list->head == list;
   1c9e0:	4915      	ldr	r1, [pc, #84]	; (1ca38 <ready_thread+0x6c>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1c9e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1c9e6:	7342      	strb	r2, [r0, #13]
   1c9e8:	460a      	mov	r2, r1
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c9ea:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	return list->head == list;
   1c9ec:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c9f0:	4294      	cmp	r4, r2
   1c9f2:	bf18      	it	ne
   1c9f4:	4623      	movne	r3, r4
   1c9f6:	2b00      	cmp	r3, #0
   1c9f8:	bf38      	it	cc
   1c9fa:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c9fc:	b1ab      	cbz	r3, 1ca2a <ready_thread+0x5e>
	int32_t b1 = thread_1->base.prio;
   1c9fe:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1ca02:	f993 400e 	ldrsb.w	r4, [r3, #14]
	if (b1 != b2) {
   1ca06:	42a6      	cmp	r6, r4
   1ca08:	d00b      	beq.n	1ca22 <ready_thread+0x56>
		return b2 - b1;
   1ca0a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ca0c:	2c00      	cmp	r4, #0
   1ca0e:	dd08      	ble.n	1ca22 <ready_thread+0x56>
	sys_dnode_t *const prev = successor->prev;
   1ca10:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1ca12:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1ca16:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1ca18:	6058      	str	r0, [r3, #4]
}
   1ca1a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1ca1c:	2000      	movs	r0, #0
   1ca1e:	f7ff bf35 	b.w	1c88c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1ca22:	42ab      	cmp	r3, r5
   1ca24:	d001      	beq.n	1ca2a <ready_thread+0x5e>
   1ca26:	681b      	ldr	r3, [r3, #0]
   1ca28:	e7e8      	b.n	1c9fc <ready_thread+0x30>
	node->prev = tail;
   1ca2a:	e9c0 2500 	strd	r2, r5, [r0]
	tail->next = node;
   1ca2e:	6028      	str	r0, [r5, #0]
	list->tail = node;
   1ca30:	6248      	str	r0, [r1, #36]	; 0x24
}
   1ca32:	e7f2      	b.n	1ca1a <ready_thread+0x4e>
}
   1ca34:	bc70      	pop	{r4, r5, r6}
   1ca36:	4770      	bx	lr
   1ca38:	20002700 	.word	0x20002700

0001ca3c <z_sched_start>:
{
   1ca3c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ca3e:	f04f 0240 	mov.w	r2, #64	; 0x40
   1ca42:	f3ef 8411 	mrs	r4, BASEPRI
   1ca46:	f382 8812 	msr	BASEPRI_MAX, r2
   1ca4a:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1ca4e:	7b42      	ldrb	r2, [r0, #13]
   1ca50:	0751      	lsls	r1, r2, #29
   1ca52:	d404      	bmi.n	1ca5e <z_sched_start+0x22>
	__asm__ volatile(
   1ca54:	f384 8811 	msr	BASEPRI, r4
   1ca58:	f3bf 8f6f 	isb	sy
}
   1ca5c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ca5e:	f022 0204 	bic.w	r2, r2, #4
   1ca62:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1ca64:	f7ff ffb2 	bl	1c9cc <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1ca68:	4621      	mov	r1, r4
   1ca6a:	4802      	ldr	r0, [pc, #8]	; (1ca74 <z_sched_start+0x38>)
}
   1ca6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1ca70:	f7ff bee6 	b.w	1c840 <z_reschedule>
   1ca74:	200037ae 	.word	0x200037ae

0001ca78 <unready_thread>:
{
   1ca78:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1ca7a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1ca7e:	7b43      	ldrb	r3, [r0, #13]
   1ca80:	2a00      	cmp	r2, #0
{
   1ca82:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1ca84:	da04      	bge.n	1ca90 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ca86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ca8a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ca8c:	f007 ff86 	bl	2499c <sys_dlist_remove>
	update_cache(thread == _current);
   1ca90:	4b04      	ldr	r3, [pc, #16]	; (1caa4 <unready_thread+0x2c>)
   1ca92:	6898      	ldr	r0, [r3, #8]
   1ca94:	1a43      	subs	r3, r0, r1
   1ca96:	4258      	negs	r0, r3
   1ca98:	4158      	adcs	r0, r3
}
   1ca9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1ca9e:	f7ff bef5 	b.w	1c88c <update_cache>
   1caa2:	bf00      	nop
   1caa4:	20002700 	.word	0x20002700

0001caa8 <pend>:
{
   1caa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1caac:	4606      	mov	r6, r0
   1caae:	4614      	mov	r4, r2
   1cab0:	461d      	mov	r5, r3
	__asm__ volatile(
   1cab2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cab6:	f3ef 8711 	mrs	r7, BASEPRI
   1caba:	f383 8812 	msr	BASEPRI_MAX, r3
   1cabe:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1cac2:	f007 fffc 	bl	24abe <add_to_waitq_locked>
	__asm__ volatile(
   1cac6:	f387 8811 	msr	BASEPRI, r7
   1caca:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1cace:	1c6b      	adds	r3, r5, #1
   1cad0:	bf08      	it	eq
   1cad2:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   1cad6:	d008      	beq.n	1caea <pend+0x42>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1cad8:	4622      	mov	r2, r4
   1cada:	462b      	mov	r3, r5
   1cadc:	f106 0018 	add.w	r0, r6, #24
   1cae0:	4903      	ldr	r1, [pc, #12]	; (1caf0 <pend+0x48>)
}
   1cae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cae6:	f000 bb57 	b.w	1d198 <z_add_timeout>
   1caea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1caee:	bf00      	nop
   1caf0:	00024a7b 	.word	0x00024a7b

0001caf4 <z_pend_curr>:
{
   1caf4:	b510      	push	{r4, lr}
	pending_current = _current;
   1caf6:	4b07      	ldr	r3, [pc, #28]	; (1cb14 <z_pend_curr+0x20>)
   1caf8:	6898      	ldr	r0, [r3, #8]
   1cafa:	4b07      	ldr	r3, [pc, #28]	; (1cb18 <z_pend_curr+0x24>)
{
   1cafc:	460c      	mov	r4, r1
	pending_current = _current;
   1cafe:	6018      	str	r0, [r3, #0]
{
   1cb00:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1cb02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cb06:	f7ff ffcf 	bl	1caa8 <pend>
   1cb0a:	4620      	mov	r0, r4
}
   1cb0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cb10:	f7f5 be0c 	b.w	1272c <arch_swap>
   1cb14:	20002700 	.word	0x20002700
   1cb18:	20002728 	.word	0x20002728

0001cb1c <z_set_prio>:
{
   1cb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cb1e:	4604      	mov	r4, r0
	__asm__ volatile(
   1cb20:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cb24:	f3ef 8611 	mrs	r6, BASEPRI
   1cb28:	f383 8812 	msr	BASEPRI_MAX, r3
   1cb2c:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1cb30:	7b43      	ldrb	r3, [r0, #13]
   1cb32:	06da      	lsls	r2, r3, #27
   1cb34:	b249      	sxtb	r1, r1
   1cb36:	d138      	bne.n	1cbaa <z_set_prio+0x8e>
	return !sys_dnode_is_linked(&to->node);
   1cb38:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1cb3a:	2d00      	cmp	r5, #0
   1cb3c:	d135      	bne.n	1cbaa <z_set_prio+0x8e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1cb3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1cb42:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1cb44:	f007 ff2a 	bl	2499c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1cb48:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   1cb4a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1cb4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1cb50:	7343      	strb	r3, [r0, #13]
	return list->head == list;
   1cb52:	4817      	ldr	r0, [pc, #92]	; (1cbb0 <z_set_prio+0x94>)
   1cb54:	4603      	mov	r3, r0
   1cb56:	f853 7f20 	ldr.w	r7, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cb5a:	429f      	cmp	r7, r3
   1cb5c:	bf18      	it	ne
   1cb5e:	463d      	movne	r5, r7
   1cb60:	2d00      	cmp	r5, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1cb62:	6a47      	ldr	r7, [r0, #36]	; 0x24
   1cb64:	461a      	mov	r2, r3
   1cb66:	462b      	mov	r3, r5
   1cb68:	bf38      	it	cc
   1cb6a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1cb6c:	b1c3      	cbz	r3, 1cba0 <z_set_prio+0x84>
	int32_t b2 = thread_2->base.prio;
   1cb6e:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1cb72:	42a9      	cmp	r1, r5
   1cb74:	d010      	beq.n	1cb98 <z_set_prio+0x7c>
		return b2 - b1;
   1cb76:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1cb78:	2d00      	cmp	r5, #0
   1cb7a:	dd0d      	ble.n	1cb98 <z_set_prio+0x7c>
	sys_dnode_t *const prev = successor->prev;
   1cb7c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1cb7e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1cb82:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1cb84:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1cb86:	2001      	movs	r0, #1
   1cb88:	f7ff fe80 	bl	1c88c <update_cache>
   1cb8c:	2001      	movs	r0, #1
	__asm__ volatile(
   1cb8e:	f386 8811 	msr	BASEPRI, r6
   1cb92:	f3bf 8f6f 	isb	sy
}
   1cb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1cb98:	42bb      	cmp	r3, r7
   1cb9a:	d001      	beq.n	1cba0 <z_set_prio+0x84>
   1cb9c:	681b      	ldr	r3, [r3, #0]
   1cb9e:	e7e5      	b.n	1cb6c <z_set_prio+0x50>
	node->prev = tail;
   1cba0:	e9c4 2700 	strd	r2, r7, [r4]
	tail->next = node;
   1cba4:	603c      	str	r4, [r7, #0]
	list->tail = node;
   1cba6:	6244      	str	r4, [r0, #36]	; 0x24
}
   1cba8:	e7ed      	b.n	1cb86 <z_set_prio+0x6a>
			thread->base.prio = prio;
   1cbaa:	73a1      	strb	r1, [r4, #14]
   1cbac:	2000      	movs	r0, #0
   1cbae:	e7ee      	b.n	1cb8e <z_set_prio+0x72>
   1cbb0:	20002700 	.word	0x20002700

0001cbb4 <z_impl_k_thread_suspend>:
{
   1cbb4:	b570      	push	{r4, r5, r6, lr}
   1cbb6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1cbb8:	3018      	adds	r0, #24
   1cbba:	f008 f824 	bl	24c06 <z_abort_timeout>
	__asm__ volatile(
   1cbbe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cbc2:	f3ef 8611 	mrs	r6, BASEPRI
   1cbc6:	f383 8812 	msr	BASEPRI_MAX, r3
   1cbca:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1cbce:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1cbd2:	7b63      	ldrb	r3, [r4, #13]
   1cbd4:	2a00      	cmp	r2, #0
   1cbd6:	da05      	bge.n	1cbe4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1cbd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1cbdc:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1cbde:	4620      	mov	r0, r4
   1cbe0:	f007 fedc 	bl	2499c <sys_dlist_remove>
		update_cache(thread == _current);
   1cbe4:	4d0b      	ldr	r5, [pc, #44]	; (1cc14 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1cbe6:	7b63      	ldrb	r3, [r4, #13]
   1cbe8:	68a8      	ldr	r0, [r5, #8]
   1cbea:	f043 0310 	orr.w	r3, r3, #16
   1cbee:	7363      	strb	r3, [r4, #13]
   1cbf0:	1b03      	subs	r3, r0, r4
   1cbf2:	4258      	negs	r0, r3
   1cbf4:	4158      	adcs	r0, r3
   1cbf6:	f7ff fe49 	bl	1c88c <update_cache>
	__asm__ volatile(
   1cbfa:	f386 8811 	msr	BASEPRI, r6
   1cbfe:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1cc02:	68ab      	ldr	r3, [r5, #8]
   1cc04:	42a3      	cmp	r3, r4
   1cc06:	d103      	bne.n	1cc10 <z_impl_k_thread_suspend+0x5c>
}
   1cc08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1cc0c:	f007 bf11 	b.w	24a32 <z_reschedule_unlocked>
}
   1cc10:	bd70      	pop	{r4, r5, r6, pc}
   1cc12:	bf00      	nop
   1cc14:	20002700 	.word	0x20002700

0001cc18 <k_sched_unlock>:
{
   1cc18:	b510      	push	{r4, lr}
	__asm__ volatile(
   1cc1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cc1e:	f3ef 8411 	mrs	r4, BASEPRI
   1cc22:	f383 8812 	msr	BASEPRI_MAX, r3
   1cc26:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1cc2a:	4b08      	ldr	r3, [pc, #32]	; (1cc4c <k_sched_unlock+0x34>)
   1cc2c:	689a      	ldr	r2, [r3, #8]
   1cc2e:	7bd3      	ldrb	r3, [r2, #15]
   1cc30:	3301      	adds	r3, #1
   1cc32:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1cc34:	2000      	movs	r0, #0
   1cc36:	f7ff fe29 	bl	1c88c <update_cache>
	__asm__ volatile(
   1cc3a:	f384 8811 	msr	BASEPRI, r4
   1cc3e:	f3bf 8f6f 	isb	sy
}
   1cc42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1cc46:	f007 bef4 	b.w	24a32 <z_reschedule_unlocked>
   1cc4a:	bf00      	nop
   1cc4c:	20002700 	.word	0x20002700

0001cc50 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1cc50:	4b04      	ldr	r3, [pc, #16]	; (1cc64 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1cc52:	2100      	movs	r1, #0
   1cc54:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1cc58:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1cc5c:	4608      	mov	r0, r1
   1cc5e:	f7ff bdbd 	b.w	1c7dc <k_sched_time_slice_set>
   1cc62:	bf00      	nop
   1cc64:	20002700 	.word	0x20002700

0001cc68 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1cc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1cc6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cc6e:	f3ef 8411 	mrs	r4, BASEPRI
   1cc72:	f383 8812 	msr	BASEPRI_MAX, r3
   1cc76:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
   1cc7a:	491b      	ldr	r1, [pc, #108]	; (1cce8 <z_impl_k_yield+0x80>)
   1cc7c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1cc7e:	7b43      	ldrb	r3, [r0, #13]
   1cc80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1cc84:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1cc86:	f007 fe89 	bl	2499c <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
   1cc8a:	688a      	ldr	r2, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1cc8c:	7b53      	ldrb	r3, [r2, #13]
	return list->head == list;
   1cc8e:	4608      	mov	r0, r1
   1cc90:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1cc94:	7353      	strb	r3, [r2, #13]
   1cc96:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1cc9a:	6a4e      	ldr	r6, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cc9c:	4283      	cmp	r3, r0
   1cc9e:	bf08      	it	eq
   1cca0:	2300      	moveq	r3, #0
   1cca2:	2b00      	cmp	r3, #0
   1cca4:	bf38      	it	cc
   1cca6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1cca8:	b1cb      	cbz	r3, 1ccde <z_impl_k_yield+0x76>
	int32_t b1 = thread_1->base.prio;
   1ccaa:	f992 700e 	ldrsb.w	r7, [r2, #14]
	int32_t b2 = thread_2->base.prio;
   1ccae:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1ccb2:	42af      	cmp	r7, r5
   1ccb4:	d00f      	beq.n	1ccd6 <z_impl_k_yield+0x6e>
		return b2 - b1;
   1ccb6:	1bed      	subs	r5, r5, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ccb8:	2d00      	cmp	r5, #0
   1ccba:	dd0c      	ble.n	1ccd6 <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
   1ccbc:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1ccbe:	e9c2 3100 	strd	r3, r1, [r2]
	prev->next = node;
   1ccc2:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1ccc4:	605a      	str	r2, [r3, #4]
	update_cache(1);
   1ccc6:	2001      	movs	r0, #1
   1ccc8:	f7ff fde0 	bl	1c88c <update_cache>
   1cccc:	4620      	mov	r0, r4
	z_swap(&sched_spinlock, key);
}
   1ccce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1ccd2:	f7f5 bd2b 	b.w	1272c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1ccd6:	42b3      	cmp	r3, r6
   1ccd8:	d001      	beq.n	1ccde <z_impl_k_yield+0x76>
   1ccda:	681b      	ldr	r3, [r3, #0]
   1ccdc:	e7e4      	b.n	1cca8 <z_impl_k_yield+0x40>
	node->prev = tail;
   1ccde:	e9c2 0600 	strd	r0, r6, [r2]
	tail->next = node;
   1cce2:	6032      	str	r2, [r6, #0]
	list->tail = node;
   1cce4:	624a      	str	r2, [r1, #36]	; 0x24
}
   1cce6:	e7ee      	b.n	1ccc6 <z_impl_k_yield+0x5e>
   1cce8:	20002700 	.word	0x20002700

0001ccec <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   1ccec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ccf0:	4604      	mov	r4, r0
   1ccf2:	460d      	mov	r5, r1
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1ccf4:	ea54 0105 	orrs.w	r1, r4, r5
   1ccf8:	d104      	bne.n	1cd04 <z_tick_sleep+0x18>
	z_impl_k_yield();
   1ccfa:	f7ff ffb5 	bl	1cc68 <z_impl_k_yield>
		k_yield();
		return 0;
   1ccfe:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   1cd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   1cd04:	f06f 0101 	mvn.w	r1, #1
   1cd08:	1a0a      	subs	r2, r1, r0
   1cd0a:	f04f 31ff 	mov.w	r1, #4294967295
   1cd0e:	eb61 0305 	sbc.w	r3, r1, r5
   1cd12:	2a01      	cmp	r2, #1
   1cd14:	f173 0300 	sbcs.w	r3, r3, #0
   1cd18:	da2a      	bge.n	1cd70 <z_tick_sleep+0x84>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1cd1a:	f007 ffb4 	bl	24c86 <sys_clock_tick_get_32>
   1cd1e:	1906      	adds	r6, r0, r4
   1cd20:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cd24:	f3ef 8811 	mrs	r8, BASEPRI
   1cd28:	f383 8812 	msr	BASEPRI_MAX, r3
   1cd2c:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1cd30:	4f11      	ldr	r7, [pc, #68]	; (1cd78 <z_tick_sleep+0x8c>)
   1cd32:	4b12      	ldr	r3, [pc, #72]	; (1cd7c <z_tick_sleep+0x90>)
   1cd34:	68b8      	ldr	r0, [r7, #8]
   1cd36:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1cd38:	f7ff fe9e 	bl	1ca78 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1cd3c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1cd3e:	4910      	ldr	r1, [pc, #64]	; (1cd80 <z_tick_sleep+0x94>)
   1cd40:	4622      	mov	r2, r4
   1cd42:	462b      	mov	r3, r5
   1cd44:	3018      	adds	r0, #24
   1cd46:	f000 fa27 	bl	1d198 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1cd4a:	68ba      	ldr	r2, [r7, #8]
   1cd4c:	7b53      	ldrb	r3, [r2, #13]
   1cd4e:	f043 0310 	orr.w	r3, r3, #16
   1cd52:	7353      	strb	r3, [r2, #13]
   1cd54:	4640      	mov	r0, r8
   1cd56:	f7f5 fce9 	bl	1272c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1cd5a:	f007 ff94 	bl	24c86 <sys_clock_tick_get_32>
   1cd5e:	1a30      	subs	r0, r6, r0
   1cd60:	eb66 0106 	sbc.w	r1, r6, r6
	if (ticks > 0) {
   1cd64:	2801      	cmp	r0, #1
   1cd66:	f171 0300 	sbcs.w	r3, r1, #0
		return ticks;
   1cd6a:	bfb8      	it	lt
   1cd6c:	2000      	movlt	r0, #0
   1cd6e:	e7c7      	b.n	1cd00 <z_tick_sleep+0x14>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1cd70:	f06f 0601 	mvn.w	r6, #1
   1cd74:	1a36      	subs	r6, r6, r0
   1cd76:	e7d3      	b.n	1cd20 <z_tick_sleep+0x34>
   1cd78:	20002700 	.word	0x20002700
   1cd7c:	20002728 	.word	0x20002728
   1cd80:	00024a7b 	.word	0x00024a7b

0001cd84 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1cd84:	b508      	push	{r3, lr}
   1cd86:	460b      	mov	r3, r1
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1cd88:	3301      	adds	r3, #1
   1cd8a:	bf08      	it	eq
   1cd8c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1cd90:	d106      	bne.n	1cda0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1cd92:	4b08      	ldr	r3, [pc, #32]	; (1cdb4 <z_impl_k_sleep+0x30>)
   1cd94:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1cd96:	f7ff ff0d 	bl	1cbb4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1cd9a:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1cd9e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1cda0:	f7ff ffa4 	bl	1ccec <z_tick_sleep>
		} else {
			return (t * to_hz + off) / from_hz;
   1cda4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1cda8:	fb80 2303 	smull	r2, r3, r0, r3
   1cdac:	0bd0      	lsrs	r0, r2, #15
   1cdae:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1cdb2:	e7f4      	b.n	1cd9e <z_impl_k_sleep+0x1a>
   1cdb4:	20002700 	.word	0x20002700

0001cdb8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1cdb8:	4b01      	ldr	r3, [pc, #4]	; (1cdc0 <z_impl_z_current_get+0x8>)
   1cdba:	6898      	ldr	r0, [r3, #8]
   1cdbc:	4770      	bx	lr
   1cdbe:	bf00      	nop
   1cdc0:	20002700 	.word	0x20002700

0001cdc4 <z_impl_k_is_preempt_thread>:
   1cdc4:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1cdc8:	b93b      	cbnz	r3, 1cdda <z_impl_k_is_preempt_thread+0x16>
   1cdca:	4b05      	ldr	r3, [pc, #20]	; (1cde0 <z_impl_k_is_preempt_thread+0x1c>)
   1cdcc:	689b      	ldr	r3, [r3, #8]
   1cdce:	89d8      	ldrh	r0, [r3, #14]
   1cdd0:	287f      	cmp	r0, #127	; 0x7f
   1cdd2:	bf8c      	ite	hi
   1cdd4:	2000      	movhi	r0, #0
   1cdd6:	2001      	movls	r0, #1
   1cdd8:	4770      	bx	lr
   1cdda:	2000      	movs	r0, #0
}
   1cddc:	4770      	bx	lr
   1cdde:	bf00      	nop
   1cde0:	20002700 	.word	0x20002700

0001cde4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1cde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cde8:	4604      	mov	r4, r0
   1cdea:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cdee:	f3ef 8611 	mrs	r6, BASEPRI
   1cdf2:	f383 8812 	msr	BASEPRI_MAX, r3
   1cdf6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1cdfa:	7b43      	ldrb	r3, [r0, #13]
   1cdfc:	071a      	lsls	r2, r3, #28
   1cdfe:	d505      	bpl.n	1ce0c <z_thread_abort+0x28>
	__asm__ volatile(
   1ce00:	f386 8811 	msr	BASEPRI, r6
   1ce04:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1ce08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1ce0c:	f023 0220 	bic.w	r2, r3, #32
   1ce10:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1ce14:	09d2      	lsrs	r2, r2, #7
   1ce16:	d120      	bne.n	1ce5a <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1ce18:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1ce1a:	68a3      	ldr	r3, [r4, #8]
   1ce1c:	b113      	cbz	r3, 1ce24 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1ce1e:	4620      	mov	r0, r4
   1ce20:	f007 fdc4 	bl	249ac <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1ce24:	f104 0018 	add.w	r0, r4, #24
   1ce28:	f007 feed 	bl	24c06 <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1ce2c:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1ce30:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1ce34:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ce36:	42bd      	cmp	r5, r7
   1ce38:	d000      	beq.n	1ce3c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1ce3a:	b9b5      	cbnz	r5, 1ce6a <z_thread_abort+0x86>
		update_cache(1);
   1ce3c:	2001      	movs	r0, #1
   1ce3e:	f7ff fd25 	bl	1c88c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1ce42:	4b10      	ldr	r3, [pc, #64]	; (1ce84 <z_thread_abort+0xa0>)
   1ce44:	689b      	ldr	r3, [r3, #8]
   1ce46:	42a3      	cmp	r3, r4
   1ce48:	d1da      	bne.n	1ce00 <z_thread_abort+0x1c>
   1ce4a:	f3ef 8305 	mrs	r3, IPSR
   1ce4e:	2b00      	cmp	r3, #0
   1ce50:	d1d6      	bne.n	1ce00 <z_thread_abort+0x1c>
   1ce52:	4630      	mov	r0, r6
   1ce54:	f7f5 fc6a 	bl	1272c <arch_swap>
	return ret;
   1ce58:	e7d2      	b.n	1ce00 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ce5a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1ce5e:	f043 0308 	orr.w	r3, r3, #8
   1ce62:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ce64:	f007 fd9a 	bl	2499c <sys_dlist_remove>
}
   1ce68:	e7d7      	b.n	1ce1a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   1ce6a:	4628      	mov	r0, r5
   1ce6c:	f007 fd9e 	bl	249ac <unpend_thread_no_timeout>
   1ce70:	f105 0018 	add.w	r0, r5, #24
   1ce74:	f007 fec7 	bl	24c06 <z_abort_timeout>
   1ce78:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1ce7c:	4628      	mov	r0, r5
   1ce7e:	f7ff fda5 	bl	1c9cc <ready_thread>
   1ce82:	e7d7      	b.n	1ce34 <z_thread_abort+0x50>
   1ce84:	20002700 	.word	0x20002700

0001ce88 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1ce88:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1ce8a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1ce8e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1ce90:	e9cd 6700 	strd	r6, r7, [sp]
   1ce94:	f7ff fe2e 	bl	1caf4 <z_pend_curr>

	if (data != NULL) {
   1ce98:	b11c      	cbz	r4, 1cea2 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1ce9a:	4b03      	ldr	r3, [pc, #12]	; (1cea8 <z_sched_wait+0x20>)
   1ce9c:	689b      	ldr	r3, [r3, #8]
   1ce9e:	695b      	ldr	r3, [r3, #20]
   1cea0:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1cea2:	b002      	add	sp, #8
   1cea4:	bdd0      	pop	{r4, r6, r7, pc}
   1cea6:	bf00      	nop
   1cea8:	20002700 	.word	0x20002700

0001ceac <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1ceac:	b538      	push	{r3, r4, r5, lr}
   1ceae:	4604      	mov	r4, r0
	__asm__ volatile(
   1ceb0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ceb4:	f3ef 8511 	mrs	r5, BASEPRI
   1ceb8:	f383 8812 	msr	BASEPRI_MAX, r3
   1cebc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1cec0:	f007 fe3f 	bl	24b42 <z_unpend_first_thread>

	if (thread != NULL) {
   1cec4:	b148      	cbz	r0, 1ceda <z_impl_k_sem_give+0x2e>
   1cec6:	2200      	movs	r2, #0
   1cec8:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1ceca:	f007 fdc6 	bl	24a5a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1cece:	4629      	mov	r1, r5
   1ced0:	4808      	ldr	r0, [pc, #32]	; (1cef4 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1ced2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1ced6:	f7ff bcb3 	b.w	1c840 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1ceda:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1cede:	429a      	cmp	r2, r3
   1cee0:	bf18      	it	ne
   1cee2:	3301      	addne	r3, #1
   1cee4:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1cee6:	2102      	movs	r1, #2
   1cee8:	f104 0010 	add.w	r0, r4, #16
   1ceec:	f007 fc7b 	bl	247e6 <z_handle_obj_poll_events>
}
   1cef0:	e7ed      	b.n	1cece <z_impl_k_sem_give+0x22>
   1cef2:	bf00      	nop
   1cef4:	200037ae 	.word	0x200037ae

0001cef8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1cef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cefa:	4614      	mov	r4, r2
   1cefc:	461d      	mov	r5, r3
   1cefe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cf02:	f3ef 8111 	mrs	r1, BASEPRI
   1cf06:	f383 8812 	msr	BASEPRI_MAX, r3
   1cf0a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1cf0e:	6883      	ldr	r3, [r0, #8]
   1cf10:	b143      	cbz	r3, 1cf24 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1cf12:	3b01      	subs	r3, #1
   1cf14:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1cf16:	f381 8811 	msr	BASEPRI, r1
   1cf1a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1cf1e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1cf20:	b003      	add	sp, #12
   1cf22:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1cf24:	ea54 0305 	orrs.w	r3, r4, r5
   1cf28:	d106      	bne.n	1cf38 <z_impl_k_sem_take+0x40>
   1cf2a:	f381 8811 	msr	BASEPRI, r1
   1cf2e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1cf32:	f06f 000f 	mvn.w	r0, #15
   1cf36:	e7f3      	b.n	1cf20 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1cf38:	4602      	mov	r2, r0
   1cf3a:	e9cd 4500 	strd	r4, r5, [sp]
   1cf3e:	4802      	ldr	r0, [pc, #8]	; (1cf48 <z_impl_k_sem_take+0x50>)
   1cf40:	f7ff fdd8 	bl	1caf4 <z_pend_curr>
	return ret;
   1cf44:	e7ec      	b.n	1cf20 <z_impl_k_sem_take+0x28>
   1cf46:	bf00      	nop
   1cf48:	200037ae 	.word	0x200037ae

0001cf4c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1cf4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1cf4e:	4b09      	ldr	r3, [pc, #36]	; (1cf74 <k_sys_work_q_init+0x28>)
   1cf50:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1cf52:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1cf54:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1cf56:	9300      	str	r3, [sp, #0]
   1cf58:	4907      	ldr	r1, [pc, #28]	; (1cf78 <k_sys_work_q_init+0x2c>)
   1cf5a:	4808      	ldr	r0, [pc, #32]	; (1cf7c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1cf5c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1cf60:	f04f 33ff 	mov.w	r3, #4294967295
   1cf64:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1cf68:	f000 fbd2 	bl	1d710 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1cf6c:	4620      	mov	r0, r4
   1cf6e:	b004      	add	sp, #16
   1cf70:	bd10      	pop	{r4, pc}
   1cf72:	bf00      	nop
   1cf74:	00027ce3 	.word	0x00027ce3
   1cf78:	20006560 	.word	0x20006560
   1cf7c:	20001e30 	.word	0x20001e30

0001cf80 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1cf80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1cf84:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1cf86:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1cf88:	2604      	movs	r6, #4
   1cf8a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1cf8c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1cf8e:	7386      	strb	r6, [r0, #14]
	sys_dlist_init(&w->waitq);
   1cf90:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   1cf94:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1cf96:	1dd6      	adds	r6, r2, #7
	list->tail = (sys_dnode_t *)list;
   1cf98:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1cf9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1cf9e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1cfa0:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1cfa4:	3720      	adds	r7, #32
	node->prev = NULL;
   1cfa6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1cfaa:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1cfae:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1cfb0:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1cfb2:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1cfb4:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1cfb8:	9202      	str	r2, [sp, #8]
   1cfba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1cfbc:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1cfbe:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1cfc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1cfc2:	9200      	str	r2, [sp, #0]
   1cfc4:	4642      	mov	r2, r8
{
   1cfc6:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1cfc8:	f7f5 fbca 	bl	12760 <arch_new_thread>
	if (!_current) {
   1cfcc:	4b04      	ldr	r3, [pc, #16]	; (1cfe0 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1cfce:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1cfd0:	689b      	ldr	r3, [r3, #8]
   1cfd2:	b103      	cbz	r3, 1cfd6 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1cfd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1cfd6:	6763      	str	r3, [r4, #116]	; 0x74
}
   1cfd8:	4640      	mov	r0, r8
   1cfda:	b004      	add	sp, #16
   1cfdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cfe0:	20002700 	.word	0x20002700

0001cfe4 <z_impl_k_thread_create>:
{
   1cfe4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cfe6:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1cfe8:	2500      	movs	r5, #0
   1cfea:	9505      	str	r5, [sp, #20]
   1cfec:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1cfee:	9504      	str	r5, [sp, #16]
   1cff0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1cff2:	9503      	str	r5, [sp, #12]
   1cff4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1cff6:	9502      	str	r5, [sp, #8]
{
   1cff8:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1cffc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1cffe:	9501      	str	r5, [sp, #4]
   1d000:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1d002:	9500      	str	r5, [sp, #0]
{
   1d004:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d006:	f7ff ffbb 	bl	1cf80 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1d00a:	1c7b      	adds	r3, r7, #1
   1d00c:	bf08      	it	eq
   1d00e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1d012:	d005      	beq.n	1d020 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d014:	ea56 0307 	orrs.w	r3, r6, r7
   1d018:	d105      	bne.n	1d026 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1d01a:	4620      	mov	r0, r4
   1d01c:	f7ff fd0e 	bl	1ca3c <z_sched_start>
}
   1d020:	4620      	mov	r0, r4
   1d022:	b007      	add	sp, #28
   1d024:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1d026:	4904      	ldr	r1, [pc, #16]	; (1d038 <z_impl_k_thread_create+0x54>)
   1d028:	4632      	mov	r2, r6
   1d02a:	463b      	mov	r3, r7
   1d02c:	f104 0018 	add.w	r0, r4, #24
   1d030:	f000 f8b2 	bl	1d198 <z_add_timeout>
   1d034:	e7f4      	b.n	1d020 <z_impl_k_thread_create+0x3c>
   1d036:	bf00      	nop
   1d038:	00024a7b 	.word	0x00024a7b

0001d03c <z_init_static_threads>:
{
   1d03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1d040:	4e2a      	ldr	r6, [pc, #168]	; (1d0ec <z_init_static_threads+0xb0>)
   1d042:	4d2b      	ldr	r5, [pc, #172]	; (1d0f0 <z_init_static_threads+0xb4>)
{
   1d044:	b086      	sub	sp, #24
   1d046:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1d048:	42b5      	cmp	r5, r6
   1d04a:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1d04e:	d310      	bcc.n	1d072 <z_init_static_threads+0x36>
	k_sched_lock();
   1d050:	f7ff fc08 	bl	1c864 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1d054:	4c26      	ldr	r4, [pc, #152]	; (1d0f0 <z_init_static_threads+0xb4>)
   1d056:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1d0f4 <z_init_static_threads+0xb8>
   1d05a:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1d05e:	f240 36e7 	movw	r6, #999	; 0x3e7
   1d062:	2700      	movs	r7, #0
   1d064:	4544      	cmp	r4, r8
   1d066:	d321      	bcc.n	1d0ac <z_init_static_threads+0x70>
}
   1d068:	b006      	add	sp, #24
   1d06a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1d06e:	f7ff bdd3 	b.w	1cc18 <k_sched_unlock>
		z_setup_new_thread(
   1d072:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1d076:	9305      	str	r3, [sp, #20]
   1d078:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1d07c:	9304      	str	r3, [sp, #16]
   1d07e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1d082:	9303      	str	r3, [sp, #12]
   1d084:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1d088:	9302      	str	r3, [sp, #8]
   1d08a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1d08e:	9301      	str	r3, [sp, #4]
   1d090:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1d094:	9300      	str	r3, [sp, #0]
   1d096:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1d09a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1d09e:	f7ff ff6f 	bl	1cf80 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1d0a2:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1d0a6:	655d      	str	r5, [r3, #84]	; 0x54
   1d0a8:	4625      	mov	r5, r4
   1d0aa:	e7cd      	b.n	1d048 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1d0ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d0ae:	1c5a      	adds	r2, r3, #1
   1d0b0:	d00d      	beq.n	1d0ce <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   1d0b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1d0b6:	4630      	mov	r0, r6
   1d0b8:	4639      	mov	r1, r7
   1d0ba:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d0be:	42b9      	cmp	r1, r7
   1d0c0:	bf08      	it	eq
   1d0c2:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1d0c4:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d0c6:	d104      	bne.n	1d0d2 <z_init_static_threads+0x96>
	z_sched_start(thread);
   1d0c8:	4628      	mov	r0, r5
   1d0ca:	f7ff fcb7 	bl	1ca3c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1d0ce:	3430      	adds	r4, #48	; 0x30
   1d0d0:	e7c8      	b.n	1d064 <z_init_static_threads+0x28>
   1d0d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d0d6:	2300      	movs	r3, #0
   1d0d8:	f7e4 f812 	bl	1100 <__aeabi_uldivmod>
   1d0dc:	4602      	mov	r2, r0
   1d0de:	460b      	mov	r3, r1
   1d0e0:	f105 0018 	add.w	r0, r5, #24
   1d0e4:	4651      	mov	r1, sl
   1d0e6:	f000 f857 	bl	1d198 <z_add_timeout>
   1d0ea:	e7f0      	b.n	1d0ce <z_init_static_threads+0x92>
   1d0ec:	2000071c 	.word	0x2000071c
   1d0f0:	2000071c 	.word	0x2000071c
   1d0f4:	00024a7b 	.word	0x00024a7b

0001d0f8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1d0f8:	4b03      	ldr	r3, [pc, #12]	; (1d108 <elapsed+0x10>)
   1d0fa:	681b      	ldr	r3, [r3, #0]
   1d0fc:	b90b      	cbnz	r3, 1d102 <elapsed+0xa>
   1d0fe:	f7fe b85f 	b.w	1b1c0 <sys_clock_elapsed>
}
   1d102:	2000      	movs	r0, #0
   1d104:	4770      	bx	lr
   1d106:	bf00      	nop
   1d108:	20002734 	.word	0x20002734

0001d10c <remove_timeout>:
{
   1d10c:	b530      	push	{r4, r5, lr}
   1d10e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1d110:	b168      	cbz	r0, 1d12e <remove_timeout+0x22>
   1d112:	4a0a      	ldr	r2, [pc, #40]	; (1d13c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1d114:	6852      	ldr	r2, [r2, #4]
   1d116:	4290      	cmp	r0, r2
   1d118:	d009      	beq.n	1d12e <remove_timeout+0x22>
	if (next(t) != NULL) {
   1d11a:	b143      	cbz	r3, 1d12e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1d11c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1d120:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1d124:	1912      	adds	r2, r2, r4
   1d126:	eb45 0101 	adc.w	r1, r5, r1
   1d12a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   1d12e:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   1d130:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1d132:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d134:	2300      	movs	r3, #0
	node->prev = NULL;
   1d136:	e9c0 3300 	strd	r3, r3, [r0]
}
   1d13a:	bd30      	pop	{r4, r5, pc}
   1d13c:	200005bc 	.word	0x200005bc

0001d140 <next_timeout>:

static int32_t next_timeout(void)
{
   1d140:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1d142:	4b13      	ldr	r3, [pc, #76]	; (1d190 <next_timeout+0x50>)
   1d144:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d146:	429c      	cmp	r4, r3
   1d148:	bf08      	it	eq
   1d14a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1d14c:	f7ff ffd4 	bl	1d0f8 <elapsed>
   1d150:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1d152:	b1bc      	cbz	r4, 1d184 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1d154:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   1d158:	1b40      	subs	r0, r0, r5
   1d15a:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1d15e:	2801      	cmp	r0, #1
   1d160:	f171 0300 	sbcs.w	r3, r1, #0
   1d164:	db11      	blt.n	1d18a <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1d166:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1d16a:	2300      	movs	r3, #0
   1d16c:	4282      	cmp	r2, r0
   1d16e:	eb73 0401 	sbcs.w	r4, r3, r1
   1d172:	da00      	bge.n	1d176 <next_timeout+0x36>
   1d174:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1d176:	4b07      	ldr	r3, [pc, #28]	; (1d194 <next_timeout+0x54>)
   1d178:	691b      	ldr	r3, [r3, #16]
   1d17a:	b113      	cbz	r3, 1d182 <next_timeout+0x42>
   1d17c:	4298      	cmp	r0, r3
   1d17e:	bfa8      	it	ge
   1d180:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1d182:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1d184:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1d188:	e7f5      	b.n	1d176 <next_timeout+0x36>
   1d18a:	2000      	movs	r0, #0
   1d18c:	e7f3      	b.n	1d176 <next_timeout+0x36>
   1d18e:	bf00      	nop
   1d190:	200005bc 	.word	0x200005bc
   1d194:	20002700 	.word	0x20002700

0001d198 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d198:	f1b3 3fff 	cmp.w	r3, #4294967295
   1d19c:	bf08      	it	eq
   1d19e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1d1a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1a6:	4604      	mov	r4, r0
   1d1a8:	4692      	mov	sl, r2
   1d1aa:	469b      	mov	fp, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d1ac:	d073      	beq.n	1d296 <z_add_timeout+0xfe>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1d1ae:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1d1b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d1b4:	f3ef 8511 	mrs	r5, BASEPRI
   1d1b8:	f383 8812 	msr	BASEPRI_MAX, r3
   1d1bc:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1d1c0:	f06f 0301 	mvn.w	r3, #1
   1d1c4:	ebb3 080a 	subs.w	r8, r3, sl
   1d1c8:	f04f 32ff 	mov.w	r2, #4294967295
   1d1cc:	eb62 090b 	sbc.w	r9, r2, fp
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1d1d0:	f1b8 0f00 	cmp.w	r8, #0
   1d1d4:	f179 0100 	sbcs.w	r1, r9, #0
   1d1d8:	db1c      	blt.n	1d214 <z_add_timeout+0x7c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1d1da:	4830      	ldr	r0, [pc, #192]	; (1d29c <z_add_timeout+0x104>)
   1d1dc:	e9d0 1000 	ldrd	r1, r0, [r0]
   1d1e0:	1a5b      	subs	r3, r3, r1
   1d1e2:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   1d1e6:	ebb3 060a 	subs.w	r6, r3, sl
   1d1ea:	eb62 070b 	sbc.w	r7, r2, fp
   1d1ee:	2e01      	cmp	r6, #1
   1d1f0:	f177 0300 	sbcs.w	r3, r7, #0
   1d1f4:	bfbc      	itt	lt
   1d1f6:	2601      	movlt	r6, #1
   1d1f8:	2700      	movlt	r7, #0
   1d1fa:	e9c4 6704 	strd	r6, r7, [r4, #16]
	return list->head == list;
   1d1fe:	4a28      	ldr	r2, [pc, #160]	; (1d2a0 <z_add_timeout+0x108>)
   1d200:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d204:	4293      	cmp	r3, r2
   1d206:	d11e      	bne.n	1d246 <z_add_timeout+0xae>
	node->prev = tail;
   1d208:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
   1d20c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   1d210:	6054      	str	r4, [r2, #4]
}
   1d212:	e02d      	b.n	1d270 <z_add_timeout+0xd8>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1d214:	f7ff ff70 	bl	1d0f8 <elapsed>
   1d218:	f11a 0301 	adds.w	r3, sl, #1
   1d21c:	9300      	str	r3, [sp, #0]
   1d21e:	f14b 0300 	adc.w	r3, fp, #0
   1d222:	9301      	str	r3, [sp, #4]
   1d224:	e9dd 2300 	ldrd	r2, r3, [sp]
   1d228:	1812      	adds	r2, r2, r0
   1d22a:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   1d22e:	e9c4 2304 	strd	r2, r3, [r4, #16]
   1d232:	e7e4      	b.n	1d1fe <z_add_timeout+0x66>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1d234:	ebb6 0008 	subs.w	r0, r6, r8
   1d238:	eb67 0109 	sbc.w	r1, r7, r9
	return (node == list->tail) ? NULL : node->next;
   1d23c:	4563      	cmp	r3, ip
   1d23e:	e9c4 0104 	strd	r0, r1, [r4, #16]
   1d242:	d0e1      	beq.n	1d208 <z_add_timeout+0x70>
   1d244:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1d246:	2b00      	cmp	r3, #0
   1d248:	d0de      	beq.n	1d208 <z_add_timeout+0x70>
			if (t->dticks > to->dticks) {
   1d24a:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
   1d24e:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
   1d252:	4546      	cmp	r6, r8
   1d254:	eb77 0109 	sbcs.w	r1, r7, r9
   1d258:	daec      	bge.n	1d234 <z_add_timeout+0x9c>
				t->dticks -= to->dticks;
   1d25a:	ebb8 0006 	subs.w	r0, r8, r6
   1d25e:	eb69 0107 	sbc.w	r1, r9, r7
   1d262:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1d266:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1d268:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   1d26c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   1d26e:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1d270:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d272:	4293      	cmp	r3, r2
   1d274:	d00b      	beq.n	1d28e <z_add_timeout+0xf6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1d276:	429c      	cmp	r4, r3
   1d278:	d109      	bne.n	1d28e <z_add_timeout+0xf6>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1d27a:	f7ff ff61 	bl	1d140 <next_timeout>

			if (next_time == 0 ||
   1d27e:	b118      	cbz	r0, 1d288 <z_add_timeout+0xf0>
			    _current_cpu->slice_ticks != next_time) {
   1d280:	4b08      	ldr	r3, [pc, #32]	; (1d2a4 <z_add_timeout+0x10c>)
			if (next_time == 0 ||
   1d282:	691b      	ldr	r3, [r3, #16]
   1d284:	4283      	cmp	r3, r0
   1d286:	d002      	beq.n	1d28e <z_add_timeout+0xf6>
				sys_clock_set_timeout(next_time, false);
   1d288:	2100      	movs	r1, #0
   1d28a:	f7fd ff69 	bl	1b160 <sys_clock_set_timeout>
	__asm__ volatile(
   1d28e:	f385 8811 	msr	BASEPRI, r5
   1d292:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1d296:	b003      	add	sp, #12
   1d298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d29c:	20001ed0 	.word	0x20001ed0
   1d2a0:	200005bc 	.word	0x200005bc
   1d2a4:	20002700 	.word	0x20002700

0001d2a8 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1d2a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2ac:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1d2ae:	f7ff fb4b 	bl	1c948 <z_time_slice>
	__asm__ volatile(
   1d2b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d2b6:	f3ef 8411 	mrs	r4, BASEPRI
   1d2ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1d2be:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1d2c2:	4d2c      	ldr	r5, [pc, #176]	; (1d374 <sys_clock_announce+0xcc>)
   1d2c4:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 1d378 <sys_clock_announce+0xd0>
	return list->head == list;
   1d2c8:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 1d37c <sys_clock_announce+0xd4>
   1d2cc:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1d2ce:	4651      	mov	r1, sl
   1d2d0:	f8d5 c000 	ldr.w	ip, [r5]
   1d2d4:	f8db 0000 	ldr.w	r0, [fp]
   1d2d8:	4662      	mov	r2, ip
   1d2da:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d2dc:	4558      	cmp	r0, fp
   1d2de:	e9da 8900 	ldrd	r8, r9, [sl]
   1d2e2:	e9cd 2300 	strd	r2, r3, [sp]
   1d2e6:	d00d      	beq.n	1d304 <sys_clock_announce+0x5c>
   1d2e8:	b160      	cbz	r0, 1d304 <sys_clock_announce+0x5c>
   1d2ea:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1d2ee:	45b4      	cmp	ip, r6
   1d2f0:	41bb      	sbcs	r3, r7
   1d2f2:	da1e      	bge.n	1d332 <sys_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1d2f4:	9b00      	ldr	r3, [sp, #0]
   1d2f6:	ebb6 0c03 	subs.w	ip, r6, r3
   1d2fa:	9b01      	ldr	r3, [sp, #4]
   1d2fc:	eb67 0603 	sbc.w	r6, r7, r3
   1d300:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   1d304:	9b00      	ldr	r3, [sp, #0]
   1d306:	eb13 0208 	adds.w	r2, r3, r8
   1d30a:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1d30c:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   1d310:	eb43 0309 	adc.w	r3, r3, r9
   1d314:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   1d318:	602e      	str	r6, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1d31a:	f7ff ff11 	bl	1d140 <next_timeout>
   1d31e:	4631      	mov	r1, r6
   1d320:	f7fd ff1e 	bl	1b160 <sys_clock_set_timeout>
	__asm__ volatile(
   1d324:	f384 8811 	msr	BASEPRI, r4
   1d328:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1d32c:	b003      	add	sp, #12
   1d32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1d332:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   1d336:	f04f 0200 	mov.w	r2, #0
   1d33a:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1d33e:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1d342:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1d346:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1d34a:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1d34e:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1d350:	f7ff fedc 	bl	1d10c <remove_timeout>
   1d354:	f384 8811 	msr	BASEPRI, r4
   1d358:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1d35c:	6883      	ldr	r3, [r0, #8]
   1d35e:	4798      	blx	r3
	__asm__ volatile(
   1d360:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d364:	f3ef 8411 	mrs	r4, BASEPRI
   1d368:	f383 8812 	msr	BASEPRI_MAX, r3
   1d36c:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1d370:	4901      	ldr	r1, [pc, #4]	; (1d378 <sys_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1d372:	e7ad      	b.n	1d2d0 <sys_clock_announce+0x28>
   1d374:	20002734 	.word	0x20002734
   1d378:	20001ed0 	.word	0x20001ed0
   1d37c:	200005bc 	.word	0x200005bc

0001d380 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1d380:	b510      	push	{r4, lr}
   1d382:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d386:	f3ef 8411 	mrs	r4, BASEPRI
   1d38a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d38e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1d392:	f7fd ff15 	bl	1b1c0 <sys_clock_elapsed>
   1d396:	4b06      	ldr	r3, [pc, #24]	; (1d3b0 <sys_clock_tick_get+0x30>)
   1d398:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d39c:	1812      	adds	r2, r2, r0
   1d39e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1d3a2:	f384 8811 	msr	BASEPRI, r4
   1d3a6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1d3aa:	4610      	mov	r0, r2
   1d3ac:	4619      	mov	r1, r3
   1d3ae:	bd10      	pop	{r4, pc}
   1d3b0:	20001ed0 	.word	0x20001ed0

0001d3b4 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1d3b4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1d3b8:	4604      	mov	r4, r0
	__asm__ volatile(
   1d3ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d3be:	f3ef 8611 	mrs	r6, BASEPRI
   1d3c2:	f383 8812 	msr	BASEPRI_MAX, r3
   1d3c6:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1d3ca:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1d3ce:	f112 0801 	adds.w	r8, r2, #1
   1d3d2:	f143 0900 	adc.w	r9, r3, #0
   1d3d6:	f1b9 0f00 	cmp.w	r9, #0
   1d3da:	bf08      	it	eq
   1d3dc:	f1b8 0f02 	cmpeq.w	r8, #2
   1d3e0:	d302      	bcc.n	1d3e8 <z_timer_expiration_handler+0x34>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1d3e2:	4911      	ldr	r1, [pc, #68]	; (1d428 <z_timer_expiration_handler+0x74>)
   1d3e4:	f7ff fed8 	bl	1d198 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1d3e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d3ea:	3301      	adds	r3, #1
   1d3ec:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1d3ee:	6a23      	ldr	r3, [r4, #32]
   1d3f0:	b10b      	cbz	r3, 1d3f6 <z_timer_expiration_handler+0x42>
		timer->expiry_fn(timer);
   1d3f2:	4620      	mov	r0, r4
   1d3f4:	4798      	blx	r3
	return list->head == list;
   1d3f6:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d3fa:	42a5      	cmp	r5, r4
   1d3fc:	d000      	beq.n	1d400 <z_timer_expiration_handler+0x4c>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1d3fe:	b92d      	cbnz	r5, 1d40c <z_timer_expiration_handler+0x58>
	__asm__ volatile(
   1d400:	f386 8811 	msr	BASEPRI, r6
   1d404:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1d408:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	z_unpend_thread_no_timeout(thread);
   1d40c:	4628      	mov	r0, r5
   1d40e:	f007 fae0 	bl	249d2 <z_unpend_thread_no_timeout>
   1d412:	2300      	movs	r3, #0
   1d414:	67eb      	str	r3, [r5, #124]	; 0x7c
   1d416:	f386 8811 	msr	BASEPRI, r6
   1d41a:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   1d41e:	4628      	mov	r0, r5
}
   1d420:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
	z_ready_thread(thread);
   1d424:	f007 bb19 	b.w	24a5a <z_ready_thread>
   1d428:	0001d3b5 	.word	0x0001d3b5

0001d42c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1d42c:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1d430:	4619      	mov	r1, r3
   1d432:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1d434:	1c4c      	adds	r4, r1, #1
{
   1d436:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1d438:	bf08      	it	eq
   1d43a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1d43e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1d442:	4680      	mov	r8, r0
   1d444:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1d446:	d04c      	beq.n	1d4e2 <z_impl_k_timer_start+0xb6>
   1d448:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1d44a:	1c6b      	adds	r3, r5, #1
   1d44c:	bf08      	it	eq
   1d44e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1d452:	4614      	mov	r4, r2
   1d454:	d019      	beq.n	1d48a <z_impl_k_timer_start+0x5e>
   1d456:	ea54 0305 	orrs.w	r3, r4, r5
   1d45a:	d016      	beq.n	1d48a <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   1d45c:	f06f 0301 	mvn.w	r3, #1
   1d460:	ebb3 0a02 	subs.w	sl, r3, r2
   1d464:	f04f 33ff 	mov.w	r3, #4294967295
   1d468:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1d46c:	f1ba 0f00 	cmp.w	sl, #0
   1d470:	f17b 0300 	sbcs.w	r3, fp, #0
   1d474:	da09      	bge.n	1d48a <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   1d476:	f112 34ff 	adds.w	r4, r2, #4294967295
   1d47a:	f145 35ff 	adc.w	r5, r5, #4294967295
   1d47e:	2c01      	cmp	r4, #1
   1d480:	f175 0300 	sbcs.w	r3, r5, #0
   1d484:	bfbc      	itt	lt
   1d486:	2401      	movlt	r4, #1
   1d488:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1d48a:	f06f 0301 	mvn.w	r3, #1
   1d48e:	1a1b      	subs	r3, r3, r0
   1d490:	9300      	str	r3, [sp, #0]
   1d492:	f04f 33ff 	mov.w	r3, #4294967295
   1d496:	eb63 0301 	sbc.w	r3, r3, r1
   1d49a:	9301      	str	r3, [sp, #4]
   1d49c:	e9dd 2300 	ldrd	r2, r3, [sp]
   1d4a0:	2a00      	cmp	r2, #0
   1d4a2:	f173 0300 	sbcs.w	r3, r3, #0
   1d4a6:	da0c      	bge.n	1d4c2 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1d4a8:	f110 38ff 	adds.w	r8, r0, #4294967295
   1d4ac:	f141 39ff 	adc.w	r9, r1, #4294967295
   1d4b0:	f1b8 0f00 	cmp.w	r8, #0
   1d4b4:	f179 0300 	sbcs.w	r3, r9, #0
   1d4b8:	bfbc      	itt	lt
   1d4ba:	f04f 0800 	movlt.w	r8, #0
   1d4be:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   1d4c2:	4630      	mov	r0, r6
   1d4c4:	f007 fb9f 	bl	24c06 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1d4c8:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1d4ca:	4907      	ldr	r1, [pc, #28]	; (1d4e8 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   1d4cc:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1d4ce:	4642      	mov	r2, r8
   1d4d0:	464b      	mov	r3, r9
   1d4d2:	4630      	mov	r0, r6
	timer->period = period;
   1d4d4:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1d4d8:	b002      	add	sp, #8
   1d4da:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1d4de:	f7ff be5b 	b.w	1d198 <z_add_timeout>
}
   1d4e2:	b002      	add	sp, #8
   1d4e4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1d4e8:	0001d3b5 	.word	0x0001d3b5

0001d4ec <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1d4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1d4f0:	4e4b      	ldr	r6, [pc, #300]	; (1d620 <work_queue_main+0x134>)
{
   1d4f2:	b085      	sub	sp, #20
   1d4f4:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1d4f6:	f04f 38ff 	mov.w	r8, #4294967295
   1d4fa:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
   1d4fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d502:	f3ef 8711 	mrs	r7, BASEPRI
   1d506:	f383 8812 	msr	BASEPRI_MAX, r3
   1d50a:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1d50e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
   1d512:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
   1d516:	b985      	cbnz	r5, 1d53a <work_queue_main+0x4e>
	*flagp &= ~BIT(bit);
   1d518:	f023 0204 	bic.w	r2, r3, #4
		} else if (flag_test_and_clear(&queue->flags,
   1d51c:	075d      	lsls	r5, r3, #29
	*flagp &= ~BIT(bit);
   1d51e:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   1d522:	d433      	bmi.n	1d58c <work_queue_main+0xa0>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1d524:	2300      	movs	r3, #0
   1d526:	e9cd 8900 	strd	r8, r9, [sp]
   1d52a:	9302      	str	r3, [sp, #8]
   1d52c:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1d530:	4639      	mov	r1, r7
   1d532:	483c      	ldr	r0, [pc, #240]	; (1d624 <work_queue_main+0x138>)
   1d534:	f7ff fca8 	bl	1ce88 <z_sched_wait>
			continue;
   1d538:	e7e1      	b.n	1d4fe <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d53a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   1d53e:	6829      	ldr	r1, [r5, #0]
	list->head = node;
   1d540:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1d544:	4295      	cmp	r5, r2
   1d546:	d101      	bne.n	1d54c <work_queue_main+0x60>
	list->tail = node;
   1d548:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1d54c:	f043 0302 	orr.w	r3, r3, #2
   1d550:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1d554:	68eb      	ldr	r3, [r5, #12]
   1d556:	f023 0304 	bic.w	r3, r3, #4
   1d55a:	f043 0301 	orr.w	r3, r3, #1
   1d55e:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1d560:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1d562:	f387 8811 	msr	BASEPRI, r7
   1d566:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   1d56a:	4628      	mov	r0, r5
   1d56c:	4798      	blx	r3
	__asm__ volatile(
   1d56e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d572:	f3ef 8b11 	mrs	fp, BASEPRI
   1d576:	f383 8812 	msr	BASEPRI_MAX, r3
   1d57a:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1d57e:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1d580:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1d582:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1d586:	d40b      	bmi.n	1d5a0 <work_queue_main+0xb4>
	*flagp &= ~BIT(bit);
   1d588:	60ea      	str	r2, [r5, #12]
   1d58a:	e00e      	b.n	1d5aa <work_queue_main+0xbe>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1d58c:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1d590:	2200      	movs	r2, #0
   1d592:	2101      	movs	r1, #1
   1d594:	4628      	mov	r0, r5
   1d596:	f007 fafc 	bl	24b92 <z_sched_wake>
   1d59a:	2800      	cmp	r0, #0
   1d59c:	d1f8      	bne.n	1d590 <work_queue_main+0xa4>
   1d59e:	e7c1      	b.n	1d524 <work_queue_main+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1d5a0:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1d5a2:	f023 0303 	bic.w	r3, r3, #3
   1d5a6:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1d5a8:	b970      	cbnz	r0, 1d5c8 <work_queue_main+0xdc>
	*flagp &= ~BIT(bit);
   1d5aa:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1d5ae:	f023 0302 	bic.w	r3, r3, #2
   1d5b2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1d5b6:	f38b 8811 	msr	BASEPRI, fp
   1d5ba:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   1d5be:	05d8      	lsls	r0, r3, #23
   1d5c0:	d49d      	bmi.n	1d4fe <work_queue_main+0x12>
	z_impl_k_yield();
   1d5c2:	f7ff fb51 	bl	1cc68 <z_impl_k_yield>
}
   1d5c6:	e79a      	b.n	1d4fe <work_queue_main+0x12>
	return node->next;
   1d5c8:	6807      	ldr	r7, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d5ca:	f04f 0a00 	mov.w	sl, #0
   1d5ce:	2f00      	cmp	r7, #0
   1d5d0:	bf38      	it	cc
   1d5d2:	2700      	movcc	r7, #0
	parent->next = child;
   1d5d4:	4653      	mov	r3, sl
		if (wc->work == work) {
   1d5d6:	6842      	ldr	r2, [r0, #4]
   1d5d8:	4295      	cmp	r5, r2
   1d5da:	4601      	mov	r1, r0
   1d5dc:	d10e      	bne.n	1d5fc <work_queue_main+0x110>
Z_GENLIST_REMOVE(slist, snode)
   1d5de:	6801      	ldr	r1, [r0, #0]
   1d5e0:	f1ba 0f00 	cmp.w	sl, #0
   1d5e4:	d114      	bne.n	1d610 <work_queue_main+0x124>
   1d5e6:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1d5e8:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1d5ea:	4290      	cmp	r0, r2
   1d5ec:	d100      	bne.n	1d5f0 <work_queue_main+0x104>
	list->tail = node;
   1d5ee:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1d5f0:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1d5f4:	f7ff fc5a 	bl	1ceac <z_impl_k_sem_give>
}
   1d5f8:	4651      	mov	r1, sl
   1d5fa:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1d5fc:	2f00      	cmp	r7, #0
   1d5fe:	d0d4      	beq.n	1d5aa <work_queue_main+0xbe>
	return node->next;
   1d600:	683a      	ldr	r2, [r7, #0]
   1d602:	2a00      	cmp	r2, #0
   1d604:	bf38      	it	cc
   1d606:	2200      	movcc	r2, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d608:	4638      	mov	r0, r7
   1d60a:	468a      	mov	sl, r1
   1d60c:	4617      	mov	r7, r2
   1d60e:	e7e2      	b.n	1d5d6 <work_queue_main+0xea>
	parent->next = child;
   1d610:	f8ca 1000 	str.w	r1, [sl]
Z_GENLIST_REMOVE(slist, snode)
   1d614:	6872      	ldr	r2, [r6, #4]
   1d616:	4290      	cmp	r0, r2
	list->tail = node;
   1d618:	bf08      	it	eq
   1d61a:	f8c6 a004 	streq.w	sl, [r6, #4]
}
   1d61e:	e7e7      	b.n	1d5f0 <work_queue_main+0x104>
   1d620:	20002738 	.word	0x20002738
   1d624:	200037ae 	.word	0x200037ae

0001d628 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1d628:	68c3      	ldr	r3, [r0, #12]
{
   1d62a:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1d62c:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1d630:	079b      	lsls	r3, r3, #30
{
   1d632:	4605      	mov	r5, r0
   1d634:	460c      	mov	r4, r1
	if (ret) {
   1d636:	d50d      	bpl.n	1d654 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1d638:	2201      	movs	r2, #1
   1d63a:	2100      	movs	r1, #0
   1d63c:	f104 0008 	add.w	r0, r4, #8
   1d640:	f007 fac4 	bl	24bcc <z_impl_k_sem_init>
	parent->next = child;
   1d644:	2300      	movs	r3, #0
   1d646:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1d648:	4b05      	ldr	r3, [pc, #20]	; (1d660 <cancel_sync_locked+0x38>)
	canceler->work = work;
   1d64a:	6065      	str	r5, [r4, #4]
   1d64c:	685a      	ldr	r2, [r3, #4]
   1d64e:	b91a      	cbnz	r2, 1d658 <cancel_sync_locked+0x30>
	list->head = node;
   1d650:	e9c3 4400 	strd	r4, r4, [r3]
}
   1d654:	4630      	mov	r0, r6
   1d656:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1d658:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1d65a:	605c      	str	r4, [r3, #4]
}
   1d65c:	e7fa      	b.n	1d654 <cancel_sync_locked+0x2c>
   1d65e:	bf00      	nop
   1d660:	20002738 	.word	0x20002738

0001d664 <submit_to_queue_locked>:
{
   1d664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1d666:	68c3      	ldr	r3, [r0, #12]
   1d668:	079a      	lsls	r2, r3, #30
{
   1d66a:	4604      	mov	r4, r0
   1d66c:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1d66e:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1d672:	d41f      	bmi.n	1d6b4 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1d674:	075f      	lsls	r7, r3, #29
   1d676:	d41f      	bmi.n	1d6b8 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   1d678:	680a      	ldr	r2, [r1, #0]
   1d67a:	b90a      	cbnz	r2, 1d680 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1d67c:	6882      	ldr	r2, [r0, #8]
   1d67e:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1d680:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   1d682:	bf44      	itt	mi
   1d684:	68a3      	ldrmi	r3, [r4, #8]
   1d686:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   1d688:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1d68a:	bf4c      	ite	mi
   1d68c:	2502      	movmi	r5, #2
		ret = 1;
   1d68e:	2501      	movpl	r5, #1
	if (queue == NULL) {
   1d690:	b37f      	cbz	r7, 1d6f2 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1d692:	4b1b      	ldr	r3, [pc, #108]	; (1d700 <submit_to_queue_locked+0x9c>)
   1d694:	689b      	ldr	r3, [r3, #8]
   1d696:	42bb      	cmp	r3, r7
   1d698:	d111      	bne.n	1d6be <submit_to_queue_locked+0x5a>
   1d69a:	f007 faa7 	bl	24bec <k_is_in_isr>
   1d69e:	f080 0001 	eor.w	r0, r0, #1
   1d6a2:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   1d6a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1d6a8:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1d6aa:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1d6ae:	d523      	bpl.n	1d6f8 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   1d6b0:	b13a      	cbz	r2, 1d6c2 <submit_to_queue_locked+0x5e>
   1d6b2:	b940      	cbnz	r0, 1d6c6 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   1d6b4:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1d6b8:	2300      	movs	r3, #0
   1d6ba:	6033      	str	r3, [r6, #0]
	return ret;
   1d6bc:	e013      	b.n	1d6e6 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1d6be:	2000      	movs	r0, #0
   1d6c0:	e7f0      	b.n	1d6a4 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   1d6c2:	071b      	lsls	r3, r3, #28
   1d6c4:	d4f6      	bmi.n	1d6b4 <submit_to_queue_locked+0x50>
	parent->next = child;
   1d6c6:	2300      	movs	r3, #0
   1d6c8:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1d6ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1d6ce:	b963      	cbnz	r3, 1d6ea <submit_to_queue_locked+0x86>
	list->head = node;
   1d6d0:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1d6d4:	4638      	mov	r0, r7
   1d6d6:	f007 fb30 	bl	24d3a <notify_queue_locked>
	*flagp |= BIT(bit);
   1d6da:	68e3      	ldr	r3, [r4, #12]
   1d6dc:	f043 0304 	orr.w	r3, r3, #4
   1d6e0:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1d6e2:	6833      	ldr	r3, [r6, #0]
   1d6e4:	60a3      	str	r3, [r4, #8]
}
   1d6e6:	4628      	mov	r0, r5
   1d6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1d6ea:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1d6ec:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1d6f0:	e7f0      	b.n	1d6d4 <submit_to_queue_locked+0x70>
		return -EINVAL;
   1d6f2:	f06f 0515 	mvn.w	r5, #21
   1d6f6:	e7df      	b.n	1d6b8 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   1d6f8:	f06f 0512 	mvn.w	r5, #18
   1d6fc:	e7dc      	b.n	1d6b8 <submit_to_queue_locked+0x54>
   1d6fe:	bf00      	nop
   1d700:	20002700 	.word	0x20002700

0001d704 <k_work_submit>:
{
   1d704:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1d706:	4801      	ldr	r0, [pc, #4]	; (1d70c <k_work_submit+0x8>)
   1d708:	f007 bb87 	b.w	24e1a <k_work_submit_to_queue>
   1d70c:	20001e30 	.word	0x20001e30

0001d710 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1d710:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d712:	b089      	sub	sp, #36	; 0x24
   1d714:	4604      	mov	r4, r0
	list->head = NULL;
   1d716:	2000      	movs	r0, #0
	list->tail = NULL;
   1d718:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1d71c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1d71e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1d722:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1d726:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1d72a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1d72e:	b31d      	cbz	r5, 1d778 <k_work_queue_start+0x68>
   1d730:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1d732:	2800      	cmp	r0, #0
   1d734:	f240 1001 	movw	r0, #257	; 0x101
   1d738:	bf08      	it	eq
   1d73a:	2001      	moveq	r0, #1
	*flagp = flags;
   1d73c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1d740:	2000      	movs	r0, #0
   1d742:	f04f 36ff 	mov.w	r6, #4294967295
   1d746:	f04f 37ff 	mov.w	r7, #4294967295
   1d74a:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1d74e:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1d752:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1d756:	4b09      	ldr	r3, [pc, #36]	; (1d77c <k_work_queue_start+0x6c>)
   1d758:	9400      	str	r4, [sp, #0]
   1d75a:	4620      	mov	r0, r4
   1d75c:	f7ff fc42 	bl	1cfe4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1d760:	b125      	cbz	r5, 1d76c <k_work_queue_start+0x5c>
   1d762:	6829      	ldr	r1, [r5, #0]
   1d764:	b111      	cbz	r1, 1d76c <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1d766:	4620      	mov	r0, r4
   1d768:	f007 fa46 	bl	24bf8 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1d76c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1d76e:	b009      	add	sp, #36	; 0x24
   1d770:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1d774:	f007 ba45 	b.w	24c02 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1d778:	2001      	movs	r0, #1
   1d77a:	e7df      	b.n	1d73c <k_work_queue_start+0x2c>
   1d77c:	0001d4ed 	.word	0x0001d4ed

0001d780 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1d780:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d782:	4614      	mov	r4, r2
   1d784:	9001      	str	r0, [sp, #4]
   1d786:	461d      	mov	r5, r3
   1d788:	4608      	mov	r0, r1
	__asm__ volatile(
   1d78a:	f04f 0140 	mov.w	r1, #64	; 0x40
   1d78e:	f3ef 8611 	mrs	r6, BASEPRI
   1d792:	f381 8812 	msr	BASEPRI_MAX, r1
   1d796:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   1d79a:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1d79c:	f011 0f0e 	tst.w	r1, #14
   1d7a0:	d115      	bne.n	1d7ce <k_work_schedule_for_queue+0x4e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d7a2:	432c      	orrs	r4, r5
   1d7a4:	d108      	bne.n	1d7b8 <k_work_schedule_for_queue+0x38>
		return submit_to_queue_locked(work, queuep);
   1d7a6:	a901      	add	r1, sp, #4
   1d7a8:	f7ff ff5c 	bl	1d664 <submit_to_queue_locked>
	__asm__ volatile(
   1d7ac:	f386 8811 	msr	BASEPRI, r6
   1d7b0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1d7b4:	b002      	add	sp, #8
   1d7b6:	bd70      	pop	{r4, r5, r6, pc}
	*flagp |= BIT(bit);
   1d7b8:	f041 0108 	orr.w	r1, r1, #8
   1d7bc:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1d7be:	9901      	ldr	r1, [sp, #4]
   1d7c0:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1d7c2:	3010      	adds	r0, #16
   1d7c4:	4903      	ldr	r1, [pc, #12]	; (1d7d4 <k_work_schedule_for_queue+0x54>)
   1d7c6:	f7ff fce7 	bl	1d198 <z_add_timeout>
	return ret;
   1d7ca:	2001      	movs	r0, #1
   1d7cc:	e7ee      	b.n	1d7ac <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   1d7ce:	2000      	movs	r0, #0
   1d7d0:	e7ec      	b.n	1d7ac <k_work_schedule_for_queue+0x2c>
   1d7d2:	bf00      	nop
   1d7d4:	00024dcb 	.word	0x00024dcb

0001d7d8 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1d7d8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1d7da:	4801      	ldr	r0, [pc, #4]	; (1d7e0 <k_work_schedule+0x8>)
   1d7dc:	f7ff bfd0 	b.w	1d780 <k_work_schedule_for_queue>
   1d7e0:	20001e30 	.word	0x20001e30

0001d7e4 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1d7e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d7e6:	460c      	mov	r4, r1
   1d7e8:	9001      	str	r0, [sp, #4]
   1d7ea:	4616      	mov	r6, r2
   1d7ec:	461f      	mov	r7, r3
	__asm__ volatile(
   1d7ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d7f2:	f3ef 8511 	mrs	r5, BASEPRI
   1d7f6:	f383 8812 	msr	BASEPRI_MAX, r3
   1d7fa:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1d7fe:	4608      	mov	r0, r1
   1d800:	f007 faa2 	bl	24d48 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d804:	ea56 0307 	orrs.w	r3, r6, r7
   1d808:	d109      	bne.n	1d81e <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1d80a:	a901      	add	r1, sp, #4
   1d80c:	4620      	mov	r0, r4
   1d80e:	f7ff ff29 	bl	1d664 <submit_to_queue_locked>
	__asm__ volatile(
   1d812:	f385 8811 	msr	BASEPRI, r5
   1d816:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1d81a:	b003      	add	sp, #12
   1d81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1d81e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1d820:	4906      	ldr	r1, [pc, #24]	; (1d83c <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1d822:	f043 0308 	orr.w	r3, r3, #8
   1d826:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1d828:	9b01      	ldr	r3, [sp, #4]
   1d82a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1d82c:	f104 0010 	add.w	r0, r4, #16
   1d830:	4632      	mov	r2, r6
   1d832:	463b      	mov	r3, r7
   1d834:	f7ff fcb0 	bl	1d198 <z_add_timeout>
	return ret;
   1d838:	2001      	movs	r0, #1
   1d83a:	e7ea      	b.n	1d812 <k_work_reschedule_for_queue+0x2e>
   1d83c:	00024dcb 	.word	0x00024dcb

0001d840 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1d840:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1d842:	4801      	ldr	r0, [pc, #4]	; (1d848 <k_work_reschedule+0x8>)
   1d844:	f7ff bfce 	b.w	1d7e4 <k_work_reschedule_for_queue>
   1d848:	20001e30 	.word	0x20001e30

0001d84c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1d84c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   1d84e:	4806      	ldr	r0, [pc, #24]	; (1d868 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   1d850:	4a06      	ldr	r2, [pc, #24]	; (1d86c <z_data_copy+0x20>)
   1d852:	4907      	ldr	r1, [pc, #28]	; (1d870 <z_data_copy+0x24>)
   1d854:	1a12      	subs	r2, r2, r0
   1d856:	f004 fb7c 	bl	21f52 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1d85a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1d85e:	4a05      	ldr	r2, [pc, #20]	; (1d874 <z_data_copy+0x28>)
   1d860:	4905      	ldr	r1, [pc, #20]	; (1d878 <z_data_copy+0x2c>)
   1d862:	4806      	ldr	r0, [pc, #24]	; (1d87c <z_data_copy+0x30>)
   1d864:	f004 bb75 	b.w	21f52 <memcpy>
   1d868:	20000000 	.word	0x20000000
   1d86c:	20000954 	.word	0x20000954
   1d870:	00027cec 	.word	0x00027cec
   1d874:	00000000 	.word	0x00000000
   1d878:	00027cec 	.word	0x00027cec
   1d87c:	20000000 	.word	0x20000000

0001d880 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1d880:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d882:	4606      	mov	r6, r0
   1d884:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1d886:	f007 f9b1 	bl	24bec <k_is_in_isr>
   1d88a:	b980      	cbnz	r0, 1d8ae <z_thread_aligned_alloc+0x2e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1d88c:	4b0b      	ldr	r3, [pc, #44]	; (1d8bc <z_thread_aligned_alloc+0x3c>)
   1d88e:	689b      	ldr	r3, [r3, #8]
   1d890:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1d892:	b184      	cbz	r4, 1d8b6 <z_thread_aligned_alloc+0x36>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1d894:	2204      	movs	r2, #4
   1d896:	18aa      	adds	r2, r5, r2
   1d898:	d209      	bcs.n	1d8ae <z_thread_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1d89a:	2000      	movs	r0, #0
   1d89c:	2100      	movs	r1, #0
   1d89e:	e9cd 0100 	strd	r0, r1, [sp]
   1d8a2:	f046 0104 	orr.w	r1, r6, #4
   1d8a6:	4620      	mov	r0, r4
   1d8a8:	f006 fdaa 	bl	24400 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1d8ac:	b908      	cbnz	r0, 1d8b2 <z_thread_aligned_alloc+0x32>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1d8ae:	2400      	movs	r4, #0
	}

	return ret;
   1d8b0:	e001      	b.n	1d8b6 <z_thread_aligned_alloc+0x36>
	*heap_ref = heap;
   1d8b2:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1d8b4:	1d04      	adds	r4, r0, #4
}
   1d8b6:	4620      	mov	r0, r4
   1d8b8:	b002      	add	sp, #8
   1d8ba:	bd70      	pop	{r4, r5, r6, pc}
   1d8bc:	20002700 	.word	0x20002700

0001d8c0 <nrf_cc3xx_platform_init>:
   1d8c0:	b510      	push	{r4, lr}
   1d8c2:	4c0c      	ldr	r4, [pc, #48]	; (1d8f4 <nrf_cc3xx_platform_init+0x34>)
   1d8c4:	6823      	ldr	r3, [r4, #0]
   1d8c6:	b113      	cbz	r3, 1d8ce <nrf_cc3xx_platform_init+0xe>
   1d8c8:	4b0b      	ldr	r3, [pc, #44]	; (1d8f8 <nrf_cc3xx_platform_init+0x38>)
   1d8ca:	681b      	ldr	r3, [r3, #0]
   1d8cc:	b92b      	cbnz	r3, 1d8da <nrf_cc3xx_platform_init+0x1a>
   1d8ce:	f000 fabd 	bl	1de4c <CC_LibInit>
   1d8d2:	b930      	cbnz	r0, 1d8e2 <nrf_cc3xx_platform_init+0x22>
   1d8d4:	4b08      	ldr	r3, [pc, #32]	; (1d8f8 <nrf_cc3xx_platform_init+0x38>)
   1d8d6:	2201      	movs	r2, #1
   1d8d8:	601a      	str	r2, [r3, #0]
   1d8da:	2301      	movs	r3, #1
   1d8dc:	6023      	str	r3, [r4, #0]
   1d8de:	2000      	movs	r0, #0
   1d8e0:	bd10      	pop	{r4, pc}
   1d8e2:	3801      	subs	r0, #1
   1d8e4:	2806      	cmp	r0, #6
   1d8e6:	d901      	bls.n	1d8ec <nrf_cc3xx_platform_init+0x2c>
   1d8e8:	4804      	ldr	r0, [pc, #16]	; (1d8fc <nrf_cc3xx_platform_init+0x3c>)
   1d8ea:	bd10      	pop	{r4, pc}
   1d8ec:	4b04      	ldr	r3, [pc, #16]	; (1d900 <nrf_cc3xx_platform_init+0x40>)
   1d8ee:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1d8f2:	bd10      	pop	{r4, pc}
   1d8f4:	20002740 	.word	0x20002740
   1d8f8:	20002744 	.word	0x20002744
   1d8fc:	ffff8ffe 	.word	0xffff8ffe
   1d900:	00025bb8 	.word	0x00025bb8

0001d904 <nrf_cc3xx_platform_abort>:
   1d904:	f3bf 8f4f 	dsb	sy
   1d908:	4905      	ldr	r1, [pc, #20]	; (1d920 <nrf_cc3xx_platform_abort+0x1c>)
   1d90a:	4b06      	ldr	r3, [pc, #24]	; (1d924 <nrf_cc3xx_platform_abort+0x20>)
   1d90c:	68ca      	ldr	r2, [r1, #12]
   1d90e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1d912:	4313      	orrs	r3, r2
   1d914:	60cb      	str	r3, [r1, #12]
   1d916:	f3bf 8f4f 	dsb	sy
   1d91a:	bf00      	nop
   1d91c:	e7fd      	b.n	1d91a <nrf_cc3xx_platform_abort+0x16>
   1d91e:	bf00      	nop
   1d920:	e000ed00 	.word	0xe000ed00
   1d924:	05fa0004 	.word	0x05fa0004

0001d928 <CC_PalAbort>:
   1d928:	b4f0      	push	{r4, r5, r6, r7}
   1d92a:	4f09      	ldr	r7, [pc, #36]	; (1d950 <CC_PalAbort+0x28>)
   1d92c:	4e09      	ldr	r6, [pc, #36]	; (1d954 <CC_PalAbort+0x2c>)
   1d92e:	4c0a      	ldr	r4, [pc, #40]	; (1d958 <CC_PalAbort+0x30>)
   1d930:	4a0a      	ldr	r2, [pc, #40]	; (1d95c <CC_PalAbort+0x34>)
   1d932:	4d0b      	ldr	r5, [pc, #44]	; (1d960 <CC_PalAbort+0x38>)
   1d934:	490b      	ldr	r1, [pc, #44]	; (1d964 <CC_PalAbort+0x3c>)
   1d936:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   1d93a:	603b      	str	r3, [r7, #0]
   1d93c:	6852      	ldr	r2, [r2, #4]
   1d93e:	6033      	str	r3, [r6, #0]
   1d940:	6023      	str	r3, [r4, #0]
   1d942:	2400      	movs	r4, #0
   1d944:	602b      	str	r3, [r5, #0]
   1d946:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   1d94a:	bcf0      	pop	{r4, r5, r6, r7}
   1d94c:	4710      	bx	r2
   1d94e:	bf00      	nop
   1d950:	5002b400 	.word	0x5002b400
   1d954:	5002b404 	.word	0x5002b404
   1d958:	5002b408 	.word	0x5002b408
   1d95c:	200005c4 	.word	0x200005c4
   1d960:	5002b40c 	.word	0x5002b40c
   1d964:	5002a000 	.word	0x5002a000

0001d968 <nrf_cc3xx_platform_set_abort>:
   1d968:	e9d0 1200 	ldrd	r1, r2, [r0]
   1d96c:	4b01      	ldr	r3, [pc, #4]	; (1d974 <nrf_cc3xx_platform_set_abort+0xc>)
   1d96e:	e9c3 1200 	strd	r1, r2, [r3]
   1d972:	4770      	bx	lr
   1d974:	200005c4 	.word	0x200005c4

0001d978 <nrf_cc3xx_platform_ctr_drbg_init>:
   1d978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d97c:	4c15      	ldr	r4, [pc, #84]	; (1d9d4 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   1d97e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1d9dc <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   1d982:	2800      	cmp	r0, #0
   1d984:	bf18      	it	ne
   1d986:	4604      	movne	r4, r0
   1d988:	b083      	sub	sp, #12
   1d98a:	6820      	ldr	r0, [r4, #0]
   1d98c:	4540      	cmp	r0, r8
   1d98e:	d01d      	beq.n	1d9cc <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   1d990:	460d      	mov	r5, r1
   1d992:	4620      	mov	r0, r4
   1d994:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   1d998:	f104 0904 	add.w	r9, r4, #4
   1d99c:	4616      	mov	r6, r2
   1d99e:	f504 778c 	add.w	r7, r4, #280	; 0x118
   1d9a2:	f000 fe9f 	bl	1e6e4 <mbedtls_platform_zeroize>
   1d9a6:	4648      	mov	r0, r9
   1d9a8:	f000 f940 	bl	1dc2c <cc_mbedtls_entropy_init>
   1d9ac:	4638      	mov	r0, r7
   1d9ae:	f001 fa75 	bl	1ee9c <cc_mbedtls_ctr_drbg_init>
   1d9b2:	4909      	ldr	r1, [pc, #36]	; (1d9d8 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   1d9b4:	9600      	str	r6, [sp, #0]
   1d9b6:	464a      	mov	r2, r9
   1d9b8:	4638      	mov	r0, r7
   1d9ba:	462b      	mov	r3, r5
   1d9bc:	f001 fa80 	bl	1eec0 <cc_mbedtls_ctr_drbg_seed>
   1d9c0:	b908      	cbnz	r0, 1d9c6 <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   1d9c2:	f8c4 8000 	str.w	r8, [r4]
   1d9c6:	b003      	add	sp, #12
   1d9c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d9cc:	2000      	movs	r0, #0
   1d9ce:	b003      	add	sp, #12
   1d9d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d9d4:	200037b0 	.word	0x200037b0
   1d9d8:	0001dca9 	.word	0x0001dca9
   1d9dc:	5ac9bca5 	.word	0x5ac9bca5

0001d9e0 <nrf_cc3xx_platform_ctr_drbg_get>:
   1d9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d9e2:	4c0d      	ldr	r4, [pc, #52]	; (1da18 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   1d9e4:	4e0d      	ldr	r6, [pc, #52]	; (1da1c <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   1d9e6:	2800      	cmp	r0, #0
   1d9e8:	bf08      	it	eq
   1d9ea:	4620      	moveq	r0, r4
   1d9ec:	b083      	sub	sp, #12
   1d9ee:	6807      	ldr	r7, [r0, #0]
   1d9f0:	42b7      	cmp	r7, r6
   1d9f2:	d10e      	bne.n	1da12 <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   1d9f4:	2600      	movs	r6, #0
   1d9f6:	461d      	mov	r5, r3
   1d9f8:	f500 708c 	add.w	r0, r0, #280	; 0x118
   1d9fc:	9600      	str	r6, [sp, #0]
   1d9fe:	4633      	mov	r3, r6
   1da00:	4614      	mov	r4, r2
   1da02:	f001 faad 	bl	1ef60 <cc_mbedtls_ctr_drbg_random_with_add>
   1da06:	2800      	cmp	r0, #0
   1da08:	bf18      	it	ne
   1da0a:	4634      	movne	r4, r6
   1da0c:	602c      	str	r4, [r5, #0]
   1da0e:	b003      	add	sp, #12
   1da10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1da12:	4803      	ldr	r0, [pc, #12]	; (1da20 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   1da14:	e7fb      	b.n	1da0e <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   1da16:	bf00      	nop
   1da18:	200037b0 	.word	0x200037b0
   1da1c:	5ac9bca5 	.word	0x5ac9bca5
   1da20:	ffff8fe8 	.word	0xffff8fe8

0001da24 <mutex_free>:
   1da24:	b510      	push	{r4, lr}
   1da26:	4604      	mov	r4, r0
   1da28:	b130      	cbz	r0, 1da38 <mutex_free+0x14>
   1da2a:	6863      	ldr	r3, [r4, #4]
   1da2c:	06db      	lsls	r3, r3, #27
   1da2e:	d502      	bpl.n	1da36 <mutex_free+0x12>
   1da30:	2300      	movs	r3, #0
   1da32:	6023      	str	r3, [r4, #0]
   1da34:	6063      	str	r3, [r4, #4]
   1da36:	bd10      	pop	{r4, pc}
   1da38:	4b02      	ldr	r3, [pc, #8]	; (1da44 <mutex_free+0x20>)
   1da3a:	4803      	ldr	r0, [pc, #12]	; (1da48 <mutex_free+0x24>)
   1da3c:	685b      	ldr	r3, [r3, #4]
   1da3e:	4798      	blx	r3
   1da40:	e7f3      	b.n	1da2a <mutex_free+0x6>
   1da42:	bf00      	nop
   1da44:	200005c4 	.word	0x200005c4
   1da48:	00025bd4 	.word	0x00025bd4

0001da4c <mutex_unlock>:
   1da4c:	b168      	cbz	r0, 1da6a <mutex_unlock+0x1e>
   1da4e:	6843      	ldr	r3, [r0, #4]
   1da50:	b13b      	cbz	r3, 1da62 <mutex_unlock+0x16>
   1da52:	06db      	lsls	r3, r3, #27
   1da54:	d507      	bpl.n	1da66 <mutex_unlock+0x1a>
   1da56:	f3bf 8f5f 	dmb	sy
   1da5a:	2300      	movs	r3, #0
   1da5c:	6003      	str	r3, [r0, #0]
   1da5e:	4618      	mov	r0, r3
   1da60:	4770      	bx	lr
   1da62:	4803      	ldr	r0, [pc, #12]	; (1da70 <mutex_unlock+0x24>)
   1da64:	4770      	bx	lr
   1da66:	4803      	ldr	r0, [pc, #12]	; (1da74 <mutex_unlock+0x28>)
   1da68:	4770      	bx	lr
   1da6a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1da6e:	4770      	bx	lr
   1da70:	ffff8fea 	.word	0xffff8fea
   1da74:	ffff8fe9 	.word	0xffff8fe9

0001da78 <mutex_init>:
   1da78:	b510      	push	{r4, lr}
   1da7a:	4604      	mov	r4, r0
   1da7c:	b120      	cbz	r0, 1da88 <mutex_init+0x10>
   1da7e:	2200      	movs	r2, #0
   1da80:	2311      	movs	r3, #17
   1da82:	6022      	str	r2, [r4, #0]
   1da84:	6063      	str	r3, [r4, #4]
   1da86:	bd10      	pop	{r4, pc}
   1da88:	4801      	ldr	r0, [pc, #4]	; (1da90 <mutex_init+0x18>)
   1da8a:	f7ff ff4d 	bl	1d928 <CC_PalAbort>
   1da8e:	e7f6      	b.n	1da7e <mutex_init+0x6>
   1da90:	00025bfc 	.word	0x00025bfc

0001da94 <mutex_lock>:
   1da94:	b1c0      	cbz	r0, 1dac8 <mutex_lock+0x34>
   1da96:	6843      	ldr	r3, [r0, #4]
   1da98:	b1a3      	cbz	r3, 1dac4 <mutex_lock+0x30>
   1da9a:	06db      	lsls	r3, r3, #27
   1da9c:	d510      	bpl.n	1dac0 <mutex_lock+0x2c>
   1da9e:	2201      	movs	r2, #1
   1daa0:	f3bf 8f5b 	dmb	ish
   1daa4:	e850 3f00 	ldrex	r3, [r0]
   1daa8:	e840 2100 	strex	r1, r2, [r0]
   1daac:	2900      	cmp	r1, #0
   1daae:	d1f9      	bne.n	1daa4 <mutex_lock+0x10>
   1dab0:	f3bf 8f5b 	dmb	ish
   1dab4:	2b01      	cmp	r3, #1
   1dab6:	d0f3      	beq.n	1daa0 <mutex_lock+0xc>
   1dab8:	f3bf 8f5f 	dmb	sy
   1dabc:	2000      	movs	r0, #0
   1dabe:	4770      	bx	lr
   1dac0:	4803      	ldr	r0, [pc, #12]	; (1dad0 <mutex_lock+0x3c>)
   1dac2:	4770      	bx	lr
   1dac4:	4803      	ldr	r0, [pc, #12]	; (1dad4 <mutex_lock+0x40>)
   1dac6:	4770      	bx	lr
   1dac8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1dacc:	4770      	bx	lr
   1dace:	bf00      	nop
   1dad0:	ffff8fe9 	.word	0xffff8fe9
   1dad4:	ffff8fea 	.word	0xffff8fea

0001dad8 <nrf_cc3xx_platform_set_mutexes>:
   1dad8:	b570      	push	{r4, r5, r6, lr}
   1dada:	e9d0 2300 	ldrd	r2, r3, [r0]
   1dade:	4c13      	ldr	r4, [pc, #76]	; (1db2c <nrf_cc3xx_platform_set_mutexes+0x54>)
   1dae0:	4d13      	ldr	r5, [pc, #76]	; (1db30 <nrf_cc3xx_platform_set_mutexes+0x58>)
   1dae2:	e9c4 2300 	strd	r2, r3, [r4]
   1dae6:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   1daea:	e9c4 6302 	strd	r6, r3, [r4, #8]
   1daee:	4b11      	ldr	r3, [pc, #68]	; (1db34 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   1daf0:	6808      	ldr	r0, [r1, #0]
   1daf2:	6018      	str	r0, [r3, #0]
   1daf4:	6848      	ldr	r0, [r1, #4]
   1daf6:	6058      	str	r0, [r3, #4]
   1daf8:	6888      	ldr	r0, [r1, #8]
   1dafa:	6098      	str	r0, [r3, #8]
   1dafc:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   1db00:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   1db04:	60de      	str	r6, [r3, #12]
   1db06:	6118      	str	r0, [r3, #16]
   1db08:	06cb      	lsls	r3, r1, #27
   1db0a:	d50d      	bpl.n	1db28 <nrf_cc3xx_platform_set_mutexes+0x50>
   1db0c:	2300      	movs	r3, #0
   1db0e:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   1db12:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   1db16:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1db1a:	4790      	blx	r2
   1db1c:	6823      	ldr	r3, [r4, #0]
   1db1e:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   1db22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1db26:	4718      	bx	r3
   1db28:	bd70      	pop	{r4, r5, r6, pc}
   1db2a:	bf00      	nop
   1db2c:	200005d4 	.word	0x200005d4
   1db30:	200037b0 	.word	0x200037b0
   1db34:	200005e4 	.word	0x200005e4

0001db38 <entropy_update>:
   1db38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1db3c:	2b20      	cmp	r3, #32
   1db3e:	b08b      	sub	sp, #44	; 0x2c
   1db40:	461d      	mov	r5, r3
   1db42:	4606      	mov	r6, r0
   1db44:	4689      	mov	r9, r1
   1db46:	4690      	mov	r8, r2
   1db48:	d826      	bhi.n	1db98 <entropy_update+0x60>
   1db4a:	b2db      	uxtb	r3, r3
   1db4c:	af02      	add	r7, sp, #8
   1db4e:	6831      	ldr	r1, [r6, #0]
   1db50:	f88d 9004 	strb.w	r9, [sp, #4]
   1db54:	f88d 3005 	strb.w	r3, [sp, #5]
   1db58:	f106 0904 	add.w	r9, r6, #4
   1db5c:	b921      	cbnz	r1, 1db68 <entropy_update+0x30>
   1db5e:	4648      	mov	r0, r9
   1db60:	f000 fe62 	bl	1e828 <cc_mbedtls_sha256_starts_ret>
   1db64:	4604      	mov	r4, r0
   1db66:	b940      	cbnz	r0, 1db7a <entropy_update+0x42>
   1db68:	2301      	movs	r3, #1
   1db6a:	6033      	str	r3, [r6, #0]
   1db6c:	2202      	movs	r2, #2
   1db6e:	a901      	add	r1, sp, #4
   1db70:	4648      	mov	r0, r9
   1db72:	f000 fe6d 	bl	1e850 <cc_mbedtls_sha256_update_ret>
   1db76:	4604      	mov	r4, r0
   1db78:	b138      	cbz	r0, 1db8a <entropy_update+0x52>
   1db7a:	4638      	mov	r0, r7
   1db7c:	2120      	movs	r1, #32
   1db7e:	f000 fdb1 	bl	1e6e4 <mbedtls_platform_zeroize>
   1db82:	4620      	mov	r0, r4
   1db84:	b00b      	add	sp, #44	; 0x2c
   1db86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1db8a:	462a      	mov	r2, r5
   1db8c:	4641      	mov	r1, r8
   1db8e:	4648      	mov	r0, r9
   1db90:	f000 fe5e 	bl	1e850 <cc_mbedtls_sha256_update_ret>
   1db94:	4604      	mov	r4, r0
   1db96:	e7f0      	b.n	1db7a <entropy_update+0x42>
   1db98:	af02      	add	r7, sp, #8
   1db9a:	4619      	mov	r1, r3
   1db9c:	4610      	mov	r0, r2
   1db9e:	2300      	movs	r3, #0
   1dba0:	463a      	mov	r2, r7
   1dba2:	f001 fad1 	bl	1f148 <cc_mbedtls_sha256_ret>
   1dba6:	4604      	mov	r4, r0
   1dba8:	2800      	cmp	r0, #0
   1dbaa:	d1e6      	bne.n	1db7a <entropy_update+0x42>
   1dbac:	2320      	movs	r3, #32
   1dbae:	461d      	mov	r5, r3
   1dbb0:	46b8      	mov	r8, r7
   1dbb2:	e7cc      	b.n	1db4e <entropy_update+0x16>

0001dbb4 <entropy_gather_internal.part.0>:
   1dbb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dbb6:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1dbba:	b0a7      	sub	sp, #156	; 0x9c
   1dbbc:	2b00      	cmp	r3, #0
   1dbbe:	bfd8      	it	le
   1dbc0:	ae02      	addle	r6, sp, #8
   1dbc2:	dd2c      	ble.n	1dc1e <entropy_gather_internal.part.0+0x6a>
   1dbc4:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   1dbc8:	4605      	mov	r5, r0
   1dbca:	2300      	movs	r3, #0
   1dbcc:	ae02      	add	r6, sp, #8
   1dbce:	9301      	str	r3, [sp, #4]
   1dbd0:	f1a4 0701 	sub.w	r7, r4, #1
   1dbd4:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   1dbd8:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   1dbdc:	4631      	mov	r1, r6
   1dbde:	ab01      	add	r3, sp, #4
   1dbe0:	2290      	movs	r2, #144	; 0x90
   1dbe2:	47a0      	blx	r4
   1dbe4:	fab7 f787 	clz	r7, r7
   1dbe8:	097f      	lsrs	r7, r7, #5
   1dbea:	4604      	mov	r4, r0
   1dbec:	b910      	cbnz	r0, 1dbf4 <entropy_gather_internal.part.0+0x40>
   1dbee:	9b01      	ldr	r3, [sp, #4]
   1dbf0:	b93b      	cbnz	r3, 1dc02 <entropy_gather_internal.part.0+0x4e>
   1dbf2:	b1a7      	cbz	r7, 1dc1e <entropy_gather_internal.part.0+0x6a>
   1dbf4:	4630      	mov	r0, r6
   1dbf6:	2190      	movs	r1, #144	; 0x90
   1dbf8:	f000 fd74 	bl	1e6e4 <mbedtls_platform_zeroize>
   1dbfc:	4620      	mov	r0, r4
   1dbfe:	b027      	add	sp, #156	; 0x9c
   1dc00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dc02:	4601      	mov	r1, r0
   1dc04:	4632      	mov	r2, r6
   1dc06:	4628      	mov	r0, r5
   1dc08:	f7ff ff96 	bl	1db38 <entropy_update>
   1dc0c:	b950      	cbnz	r0, 1dc24 <entropy_gather_internal.part.0+0x70>
   1dc0e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   1dc12:	9a01      	ldr	r2, [sp, #4]
   1dc14:	4413      	add	r3, r2
   1dc16:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   1dc1a:	2f00      	cmp	r7, #0
   1dc1c:	d1ea      	bne.n	1dbf4 <entropy_gather_internal.part.0+0x40>
   1dc1e:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1dc22:	e7e7      	b.n	1dbf4 <entropy_gather_internal.part.0+0x40>
   1dc24:	4604      	mov	r4, r0
   1dc26:	4620      	mov	r0, r4
   1dc28:	b027      	add	sp, #156	; 0x9c
   1dc2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001dc2c <cc_mbedtls_entropy_init>:
   1dc2c:	b570      	push	{r4, r5, r6, lr}
   1dc2e:	2500      	movs	r5, #0
   1dc30:	4604      	mov	r4, r0
   1dc32:	4629      	mov	r1, r5
   1dc34:	2214      	movs	r2, #20
   1dc36:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   1dc3a:	30f8      	adds	r0, #248	; 0xf8
   1dc3c:	f004 f994 	bl	21f68 <memset>
   1dc40:	4b15      	ldr	r3, [pc, #84]	; (1dc98 <cc_mbedtls_entropy_init+0x6c>)
   1dc42:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   1dc46:	681b      	ldr	r3, [r3, #0]
   1dc48:	4630      	mov	r0, r6
   1dc4a:	4798      	blx	r3
   1dc4c:	4620      	mov	r0, r4
   1dc4e:	f840 5b04 	str.w	r5, [r0], #4
   1dc52:	f000 fdcf 	bl	1e7f4 <cc_mbedtls_sha256_init>
   1dc56:	4b11      	ldr	r3, [pc, #68]	; (1dc9c <cc_mbedtls_entropy_init+0x70>)
   1dc58:	4630      	mov	r0, r6
   1dc5a:	681b      	ldr	r3, [r3, #0]
   1dc5c:	4798      	blx	r3
   1dc5e:	b9c8      	cbnz	r0, 1dc94 <cc_mbedtls_entropy_init+0x68>
   1dc60:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1dc64:	42ab      	cmp	r3, r5
   1dc66:	dc0f      	bgt.n	1dc88 <cc_mbedtls_entropy_init+0x5c>
   1dc68:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1dc6c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1dc70:	490b      	ldr	r1, [pc, #44]	; (1dca0 <cc_mbedtls_entropy_init+0x74>)
   1dc72:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   1dc76:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
   1dc7a:	3301      	adds	r3, #1
   1dc7c:	2020      	movs	r0, #32
   1dc7e:	2101      	movs	r1, #1
   1dc80:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
   1dc84:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   1dc88:	4b06      	ldr	r3, [pc, #24]	; (1dca4 <cc_mbedtls_entropy_init+0x78>)
   1dc8a:	4630      	mov	r0, r6
   1dc8c:	681b      	ldr	r3, [r3, #0]
   1dc8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1dc92:	4718      	bx	r3
   1dc94:	bd70      	pop	{r4, r5, r6, pc}
   1dc96:	bf00      	nop
   1dc98:	20000628 	.word	0x20000628
   1dc9c:	2000062c 	.word	0x2000062c
   1dca0:	0001e6f9 	.word	0x0001e6f9
   1dca4:	20000630 	.word	0x20000630

0001dca8 <cc_mbedtls_entropy_func>:
   1dca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dcac:	2a20      	cmp	r2, #32
   1dcae:	b088      	sub	sp, #32
   1dcb0:	d876      	bhi.n	1dda0 <cc_mbedtls_entropy_func+0xf8>
   1dcb2:	4b3d      	ldr	r3, [pc, #244]	; (1dda8 <cc_mbedtls_entropy_func+0x100>)
   1dcb4:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   1dcb8:	681b      	ldr	r3, [r3, #0]
   1dcba:	4604      	mov	r4, r0
   1dcbc:	4648      	mov	r0, r9
   1dcbe:	4617      	mov	r7, r2
   1dcc0:	4688      	mov	r8, r1
   1dcc2:	4798      	blx	r3
   1dcc4:	4605      	mov	r5, r0
   1dcc6:	bba0      	cbnz	r0, 1dd32 <cc_mbedtls_entropy_func+0x8a>
   1dcc8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1dccc:	f240 1601 	movw	r6, #257	; 0x101
   1dcd0:	e001      	b.n	1dcd6 <cc_mbedtls_entropy_func+0x2e>
   1dcd2:	3e01      	subs	r6, #1
   1dcd4:	d060      	beq.n	1dd98 <cc_mbedtls_entropy_func+0xf0>
   1dcd6:	4620      	mov	r0, r4
   1dcd8:	b37b      	cbz	r3, 1dd3a <cc_mbedtls_entropy_func+0x92>
   1dcda:	f7ff ff6b 	bl	1dbb4 <entropy_gather_internal.part.0>
   1dcde:	4605      	mov	r5, r0
   1dce0:	bb68      	cbnz	r0, 1dd3e <cc_mbedtls_entropy_func+0x96>
   1dce2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1dce6:	2b00      	cmp	r3, #0
   1dce8:	ddf3      	ble.n	1dcd2 <cc_mbedtls_entropy_func+0x2a>
   1dcea:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   1dcee:	4290      	cmp	r0, r2
   1dcf0:	d3ef      	bcc.n	1dcd2 <cc_mbedtls_entropy_func+0x2a>
   1dcf2:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1dcf6:	2a01      	cmp	r2, #1
   1dcf8:	d1eb      	bne.n	1dcd2 <cc_mbedtls_entropy_func+0x2a>
   1dcfa:	281f      	cmp	r0, #31
   1dcfc:	d9e9      	bls.n	1dcd2 <cc_mbedtls_entropy_func+0x2a>
   1dcfe:	466e      	mov	r6, sp
   1dd00:	4629      	mov	r1, r5
   1dd02:	2220      	movs	r2, #32
   1dd04:	4630      	mov	r0, r6
   1dd06:	f104 0a04 	add.w	sl, r4, #4
   1dd0a:	f004 f92d 	bl	21f68 <memset>
   1dd0e:	4631      	mov	r1, r6
   1dd10:	4650      	mov	r0, sl
   1dd12:	f000 fda5 	bl	1e860 <cc_mbedtls_sha256_finish_ret>
   1dd16:	4605      	mov	r5, r0
   1dd18:	b198      	cbz	r0, 1dd42 <cc_mbedtls_entropy_func+0x9a>
   1dd1a:	4630      	mov	r0, r6
   1dd1c:	2120      	movs	r1, #32
   1dd1e:	f000 fce1 	bl	1e6e4 <mbedtls_platform_zeroize>
   1dd22:	4b22      	ldr	r3, [pc, #136]	; (1ddac <cc_mbedtls_entropy_func+0x104>)
   1dd24:	4648      	mov	r0, r9
   1dd26:	681b      	ldr	r3, [r3, #0]
   1dd28:	4798      	blx	r3
   1dd2a:	2800      	cmp	r0, #0
   1dd2c:	bf18      	it	ne
   1dd2e:	f06f 051d 	mvnne.w	r5, #29
   1dd32:	4628      	mov	r0, r5
   1dd34:	b008      	add	sp, #32
   1dd36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1dd3a:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1dd3e:	466e      	mov	r6, sp
   1dd40:	e7eb      	b.n	1dd1a <cc_mbedtls_entropy_func+0x72>
   1dd42:	4650      	mov	r0, sl
   1dd44:	f000 fd6a 	bl	1e81c <cc_mbedtls_sha256_free>
   1dd48:	4650      	mov	r0, sl
   1dd4a:	f000 fd53 	bl	1e7f4 <cc_mbedtls_sha256_init>
   1dd4e:	4629      	mov	r1, r5
   1dd50:	4650      	mov	r0, sl
   1dd52:	f000 fd69 	bl	1e828 <cc_mbedtls_sha256_starts_ret>
   1dd56:	4605      	mov	r5, r0
   1dd58:	2800      	cmp	r0, #0
   1dd5a:	d1de      	bne.n	1dd1a <cc_mbedtls_entropy_func+0x72>
   1dd5c:	4650      	mov	r0, sl
   1dd5e:	2220      	movs	r2, #32
   1dd60:	4631      	mov	r1, r6
   1dd62:	f000 fd75 	bl	1e850 <cc_mbedtls_sha256_update_ret>
   1dd66:	4605      	mov	r5, r0
   1dd68:	2800      	cmp	r0, #0
   1dd6a:	d1d6      	bne.n	1dd1a <cc_mbedtls_entropy_func+0x72>
   1dd6c:	4603      	mov	r3, r0
   1dd6e:	4632      	mov	r2, r6
   1dd70:	2120      	movs	r1, #32
   1dd72:	4630      	mov	r0, r6
   1dd74:	f001 f9e8 	bl	1f148 <cc_mbedtls_sha256_ret>
   1dd78:	4605      	mov	r5, r0
   1dd7a:	2800      	cmp	r0, #0
   1dd7c:	d1cd      	bne.n	1dd1a <cc_mbedtls_entropy_func+0x72>
   1dd7e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1dd82:	2b00      	cmp	r3, #0
   1dd84:	bfc4      	itt	gt
   1dd86:	2300      	movgt	r3, #0
   1dd88:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   1dd8c:	463a      	mov	r2, r7
   1dd8e:	4640      	mov	r0, r8
   1dd90:	4631      	mov	r1, r6
   1dd92:	f004 f8de 	bl	21f52 <memcpy>
   1dd96:	e7c0      	b.n	1dd1a <cc_mbedtls_entropy_func+0x72>
   1dd98:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1dd9c:	466e      	mov	r6, sp
   1dd9e:	e7bc      	b.n	1dd1a <cc_mbedtls_entropy_func+0x72>
   1dda0:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1dda4:	e7c5      	b.n	1dd32 <cc_mbedtls_entropy_func+0x8a>
   1dda6:	bf00      	nop
   1dda8:	2000062c 	.word	0x2000062c
   1ddac:	20000630 	.word	0x20000630

0001ddb0 <RndStartupTest.constprop.0>:
   1ddb0:	b530      	push	{r4, r5, lr}
   1ddb2:	b08d      	sub	sp, #52	; 0x34
   1ddb4:	2100      	movs	r1, #0
   1ddb6:	2228      	movs	r2, #40	; 0x28
   1ddb8:	a802      	add	r0, sp, #8
   1ddba:	9101      	str	r1, [sp, #4]
   1ddbc:	f004 f8d4 	bl	21f68 <memset>
   1ddc0:	a802      	add	r0, sp, #8
   1ddc2:	f001 f9e9 	bl	1f198 <RNG_PLAT_SetUserRngParameters>
   1ddc6:	4604      	mov	r4, r0
   1ddc8:	b110      	cbz	r0, 1ddd0 <RndStartupTest.constprop.0+0x20>
   1ddca:	4620      	mov	r0, r4
   1ddcc:	b00d      	add	sp, #52	; 0x34
   1ddce:	bd30      	pop	{r4, r5, pc}
   1ddd0:	4d18      	ldr	r5, [pc, #96]	; (1de34 <RndStartupTest.constprop.0+0x84>)
   1ddd2:	f04f 31ff 	mov.w	r1, #4294967295
   1ddd6:	6828      	ldr	r0, [r5, #0]
   1ddd8:	f000 f93c 	bl	1e054 <CC_PalMutexLock>
   1dddc:	4604      	mov	r4, r0
   1ddde:	b9c0      	cbnz	r0, 1de12 <RndStartupTest.constprop.0+0x62>
   1dde0:	2000      	movs	r0, #0
   1dde2:	f000 f967 	bl	1e0b4 <CC_PalPowerSaveModeSelect>
   1dde6:	bb00      	cbnz	r0, 1de2a <RndStartupTest.constprop.0+0x7a>
   1dde8:	4a13      	ldr	r2, [pc, #76]	; (1de38 <RndStartupTest.constprop.0+0x88>)
   1ddea:	a902      	add	r1, sp, #8
   1ddec:	a801      	add	r0, sp, #4
   1ddee:	f000 fc6b 	bl	1e6c8 <LLF_RND_RunTrngStartupTest>
   1ddf2:	4604      	mov	r4, r0
   1ddf4:	2001      	movs	r0, #1
   1ddf6:	f000 f95d 	bl	1e0b4 <CC_PalPowerSaveModeSelect>
   1ddfa:	b990      	cbnz	r0, 1de22 <RndStartupTest.constprop.0+0x72>
   1ddfc:	6828      	ldr	r0, [r5, #0]
   1ddfe:	f000 f931 	bl	1e064 <CC_PalMutexUnlock>
   1de02:	2800      	cmp	r0, #0
   1de04:	d0e1      	beq.n	1ddca <RndStartupTest.constprop.0+0x1a>
   1de06:	480d      	ldr	r0, [pc, #52]	; (1de3c <RndStartupTest.constprop.0+0x8c>)
   1de08:	f7ff fd8e 	bl	1d928 <CC_PalAbort>
   1de0c:	4620      	mov	r0, r4
   1de0e:	b00d      	add	sp, #52	; 0x34
   1de10:	bd30      	pop	{r4, r5, pc}
   1de12:	480b      	ldr	r0, [pc, #44]	; (1de40 <RndStartupTest.constprop.0+0x90>)
   1de14:	f7ff fd88 	bl	1d928 <CC_PalAbort>
   1de18:	2c01      	cmp	r4, #1
   1de1a:	bf08      	it	eq
   1de1c:	2405      	moveq	r4, #5
   1de1e:	d0ed      	beq.n	1ddfc <RndStartupTest.constprop.0+0x4c>
   1de20:	e7de      	b.n	1dde0 <RndStartupTest.constprop.0+0x30>
   1de22:	4808      	ldr	r0, [pc, #32]	; (1de44 <RndStartupTest.constprop.0+0x94>)
   1de24:	f7ff fd80 	bl	1d928 <CC_PalAbort>
   1de28:	e7e8      	b.n	1ddfc <RndStartupTest.constprop.0+0x4c>
   1de2a:	4807      	ldr	r0, [pc, #28]	; (1de48 <RndStartupTest.constprop.0+0x98>)
   1de2c:	f7ff fd7c 	bl	1d928 <CC_PalAbort>
   1de30:	e7da      	b.n	1dde8 <RndStartupTest.constprop.0+0x38>
   1de32:	bf00      	nop
   1de34:	20000624 	.word	0x20000624
   1de38:	200027c0 	.word	0x200027c0
   1de3c:	00025c78 	.word	0x00025c78
   1de40:	00025c20 	.word	0x00025c20
   1de44:	00025c58 	.word	0x00025c58
   1de48:	00025c38 	.word	0x00025c38

0001de4c <CC_LibInit>:
   1de4c:	b510      	push	{r4, lr}
   1de4e:	b082      	sub	sp, #8
   1de50:	f000 f854 	bl	1defc <CC_HalInit>
   1de54:	b128      	cbz	r0, 1de62 <CC_LibInit+0x16>
   1de56:	f000 f8a3 	bl	1dfa0 <CC_PalTerminate>
   1de5a:	2403      	movs	r4, #3
   1de5c:	4620      	mov	r0, r4
   1de5e:	b002      	add	sp, #8
   1de60:	bd10      	pop	{r4, pc}
   1de62:	f000 f86f 	bl	1df44 <CC_PalInit>
   1de66:	b9d0      	cbnz	r0, 1de9e <CC_LibInit+0x52>
   1de68:	f000 f924 	bl	1e0b4 <CC_PalPowerSaveModeSelect>
   1de6c:	b9d8      	cbnz	r0, 1dea6 <CC_LibInit+0x5a>
   1de6e:	4b1e      	ldr	r3, [pc, #120]	; (1dee8 <CC_LibInit+0x9c>)
   1de70:	681b      	ldr	r3, [r3, #0]
   1de72:	0e1b      	lsrs	r3, r3, #24
   1de74:	2bf0      	cmp	r3, #240	; 0xf0
   1de76:	d10a      	bne.n	1de8e <CC_LibInit+0x42>
   1de78:	4a1c      	ldr	r2, [pc, #112]	; (1deec <CC_LibInit+0xa0>)
   1de7a:	4b1d      	ldr	r3, [pc, #116]	; (1def0 <CC_LibInit+0xa4>)
   1de7c:	6812      	ldr	r2, [r2, #0]
   1de7e:	429a      	cmp	r2, r3
   1de80:	d029      	beq.n	1ded6 <CC_LibInit+0x8a>
   1de82:	f000 f83d 	bl	1df00 <CC_HalTerminate>
   1de86:	2407      	movs	r4, #7
   1de88:	f000 f88a 	bl	1dfa0 <CC_PalTerminate>
   1de8c:	e7e6      	b.n	1de5c <CC_LibInit+0x10>
   1de8e:	f000 f837 	bl	1df00 <CC_HalTerminate>
   1de92:	f000 f885 	bl	1dfa0 <CC_PalTerminate>
   1de96:	2406      	movs	r4, #6
   1de98:	4620      	mov	r0, r4
   1de9a:	b002      	add	sp, #8
   1de9c:	bd10      	pop	{r4, pc}
   1de9e:	2404      	movs	r4, #4
   1dea0:	4620      	mov	r0, r4
   1dea2:	b002      	add	sp, #8
   1dea4:	bd10      	pop	{r4, pc}
   1dea6:	f000 f82b 	bl	1df00 <CC_HalTerminate>
   1deaa:	f000 f879 	bl	1dfa0 <CC_PalTerminate>
   1deae:	f7ff ff7f 	bl	1ddb0 <RndStartupTest.constprop.0>
   1deb2:	4604      	mov	r4, r0
   1deb4:	b958      	cbnz	r0, 1dece <CC_LibInit+0x82>
   1deb6:	4602      	mov	r2, r0
   1deb8:	4601      	mov	r1, r0
   1deba:	f7ff fd5d 	bl	1d978 <nrf_cc3xx_platform_ctr_drbg_init>
   1debe:	b930      	cbnz	r0, 1dece <CC_LibInit+0x82>
   1dec0:	490c      	ldr	r1, [pc, #48]	; (1def4 <CC_LibInit+0xa8>)
   1dec2:	ab01      	add	r3, sp, #4
   1dec4:	2268      	movs	r2, #104	; 0x68
   1dec6:	f7ff fd8b 	bl	1d9e0 <nrf_cc3xx_platform_ctr_drbg_get>
   1deca:	2800      	cmp	r0, #0
   1decc:	d0c6      	beq.n	1de5c <CC_LibInit+0x10>
   1dece:	2405      	movs	r4, #5
   1ded0:	4620      	mov	r0, r4
   1ded2:	b002      	add	sp, #8
   1ded4:	bd10      	pop	{r4, pc}
   1ded6:	2001      	movs	r0, #1
   1ded8:	f000 f8ec 	bl	1e0b4 <CC_PalPowerSaveModeSelect>
   1dedc:	2800      	cmp	r0, #0
   1dede:	d1e2      	bne.n	1dea6 <CC_LibInit+0x5a>
   1dee0:	4b05      	ldr	r3, [pc, #20]	; (1def8 <CC_LibInit+0xac>)
   1dee2:	6018      	str	r0, [r3, #0]
   1dee4:	e7e3      	b.n	1deae <CC_LibInit+0x62>
   1dee6:	bf00      	nop
   1dee8:	5002b928 	.word	0x5002b928
   1deec:	5002ba24 	.word	0x5002ba24
   1def0:	20e00000 	.word	0x20e00000
   1def4:	20002758 	.word	0x20002758
   1def8:	5002ba0c 	.word	0x5002ba0c

0001defc <CC_HalInit>:
   1defc:	2000      	movs	r0, #0
   1defe:	4770      	bx	lr

0001df00 <CC_HalTerminate>:
   1df00:	2000      	movs	r0, #0
   1df02:	4770      	bx	lr

0001df04 <CC_HalClearInterruptBit>:
   1df04:	0543      	lsls	r3, r0, #21
   1df06:	d503      	bpl.n	1df10 <CC_HalClearInterruptBit+0xc>
   1df08:	4b03      	ldr	r3, [pc, #12]	; (1df18 <CC_HalClearInterruptBit+0x14>)
   1df0a:	f04f 32ff 	mov.w	r2, #4294967295
   1df0e:	601a      	str	r2, [r3, #0]
   1df10:	4b02      	ldr	r3, [pc, #8]	; (1df1c <CC_HalClearInterruptBit+0x18>)
   1df12:	6018      	str	r0, [r3, #0]
   1df14:	4770      	bx	lr
   1df16:	bf00      	nop
   1df18:	5002b108 	.word	0x5002b108
   1df1c:	5002ba08 	.word	0x5002ba08

0001df20 <CC_HalMaskInterrupt>:
   1df20:	4b01      	ldr	r3, [pc, #4]	; (1df28 <CC_HalMaskInterrupt+0x8>)
   1df22:	6018      	str	r0, [r3, #0]
   1df24:	4770      	bx	lr
   1df26:	bf00      	nop
   1df28:	5002ba04 	.word	0x5002ba04

0001df2c <CC_HalWaitInterrupt>:
   1df2c:	b108      	cbz	r0, 1df32 <CC_HalWaitInterrupt+0x6>
   1df2e:	f000 b86f 	b.w	1e010 <CC_PalWaitInterrupt>
   1df32:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1df36:	4770      	bx	lr

0001df38 <CC_HalWaitInterruptRND>:
   1df38:	b108      	cbz	r0, 1df3e <CC_HalWaitInterruptRND+0x6>
   1df3a:	f000 b84f 	b.w	1dfdc <CC_PalWaitInterruptRND>
   1df3e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   1df42:	4770      	bx	lr

0001df44 <CC_PalInit>:
   1df44:	b510      	push	{r4, lr}
   1df46:	4811      	ldr	r0, [pc, #68]	; (1df8c <CC_PalInit+0x48>)
   1df48:	f000 f870 	bl	1e02c <CC_PalMutexCreate>
   1df4c:	b100      	cbz	r0, 1df50 <CC_PalInit+0xc>
   1df4e:	bd10      	pop	{r4, pc}
   1df50:	480f      	ldr	r0, [pc, #60]	; (1df90 <CC_PalInit+0x4c>)
   1df52:	f000 f86b 	bl	1e02c <CC_PalMutexCreate>
   1df56:	2800      	cmp	r0, #0
   1df58:	d1f9      	bne.n	1df4e <CC_PalInit+0xa>
   1df5a:	4c0e      	ldr	r4, [pc, #56]	; (1df94 <CC_PalInit+0x50>)
   1df5c:	4620      	mov	r0, r4
   1df5e:	f000 f865 	bl	1e02c <CC_PalMutexCreate>
   1df62:	2800      	cmp	r0, #0
   1df64:	d1f3      	bne.n	1df4e <CC_PalInit+0xa>
   1df66:	4b0c      	ldr	r3, [pc, #48]	; (1df98 <CC_PalInit+0x54>)
   1df68:	480c      	ldr	r0, [pc, #48]	; (1df9c <CC_PalInit+0x58>)
   1df6a:	601c      	str	r4, [r3, #0]
   1df6c:	f000 f85e 	bl	1e02c <CC_PalMutexCreate>
   1df70:	4601      	mov	r1, r0
   1df72:	2800      	cmp	r0, #0
   1df74:	d1eb      	bne.n	1df4e <CC_PalInit+0xa>
   1df76:	f000 f82d 	bl	1dfd4 <CC_PalDmaInit>
   1df7a:	4604      	mov	r4, r0
   1df7c:	b108      	cbz	r0, 1df82 <CC_PalInit+0x3e>
   1df7e:	4620      	mov	r0, r4
   1df80:	bd10      	pop	{r4, pc}
   1df82:	f000 f879 	bl	1e078 <CC_PalPowerSaveModeInit>
   1df86:	4620      	mov	r0, r4
   1df88:	e7fa      	b.n	1df80 <CC_PalInit+0x3c>
   1df8a:	bf00      	nop
   1df8c:	20000620 	.word	0x20000620
   1df90:	20000614 	.word	0x20000614
   1df94:	2000061c 	.word	0x2000061c
   1df98:	20000624 	.word	0x20000624
   1df9c:	20000618 	.word	0x20000618

0001dfa0 <CC_PalTerminate>:
   1dfa0:	b508      	push	{r3, lr}
   1dfa2:	4808      	ldr	r0, [pc, #32]	; (1dfc4 <CC_PalTerminate+0x24>)
   1dfa4:	f000 f84c 	bl	1e040 <CC_PalMutexDestroy>
   1dfa8:	4807      	ldr	r0, [pc, #28]	; (1dfc8 <CC_PalTerminate+0x28>)
   1dfaa:	f000 f849 	bl	1e040 <CC_PalMutexDestroy>
   1dfae:	4807      	ldr	r0, [pc, #28]	; (1dfcc <CC_PalTerminate+0x2c>)
   1dfb0:	f000 f846 	bl	1e040 <CC_PalMutexDestroy>
   1dfb4:	4806      	ldr	r0, [pc, #24]	; (1dfd0 <CC_PalTerminate+0x30>)
   1dfb6:	f000 f843 	bl	1e040 <CC_PalMutexDestroy>
   1dfba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1dfbe:	f000 b80b 	b.w	1dfd8 <CC_PalDmaTerminate>
   1dfc2:	bf00      	nop
   1dfc4:	20000620 	.word	0x20000620
   1dfc8:	20000614 	.word	0x20000614
   1dfcc:	2000061c 	.word	0x2000061c
   1dfd0:	20000618 	.word	0x20000618

0001dfd4 <CC_PalDmaInit>:
   1dfd4:	2000      	movs	r0, #0
   1dfd6:	4770      	bx	lr

0001dfd8 <CC_PalDmaTerminate>:
   1dfd8:	4770      	bx	lr
   1dfda:	bf00      	nop

0001dfdc <CC_PalWaitInterruptRND>:
   1dfdc:	b410      	push	{r4}
   1dfde:	4c08      	ldr	r4, [pc, #32]	; (1e000 <CC_PalWaitInterruptRND+0x24>)
   1dfe0:	4602      	mov	r2, r0
   1dfe2:	6823      	ldr	r3, [r4, #0]
   1dfe4:	4213      	tst	r3, r2
   1dfe6:	d0fc      	beq.n	1dfe2 <CC_PalWaitInterruptRND+0x6>
   1dfe8:	b121      	cbz	r1, 1dff4 <CC_PalWaitInterruptRND+0x18>
   1dfea:	4b06      	ldr	r3, [pc, #24]	; (1e004 <CC_PalWaitInterruptRND+0x28>)
   1dfec:	4806      	ldr	r0, [pc, #24]	; (1e008 <CC_PalWaitInterruptRND+0x2c>)
   1dfee:	681b      	ldr	r3, [r3, #0]
   1dff0:	600b      	str	r3, [r1, #0]
   1dff2:	6003      	str	r3, [r0, #0]
   1dff4:	4b05      	ldr	r3, [pc, #20]	; (1e00c <CC_PalWaitInterruptRND+0x30>)
   1dff6:	601a      	str	r2, [r3, #0]
   1dff8:	2000      	movs	r0, #0
   1dffa:	bc10      	pop	{r4}
   1dffc:	4770      	bx	lr
   1dffe:	bf00      	nop
   1e000:	5002ba00 	.word	0x5002ba00
   1e004:	5002b104 	.word	0x5002b104
   1e008:	5002b108 	.word	0x5002b108
   1e00c:	5002ba08 	.word	0x5002ba08

0001e010 <CC_PalWaitInterrupt>:
   1e010:	4904      	ldr	r1, [pc, #16]	; (1e024 <CC_PalWaitInterrupt+0x14>)
   1e012:	4602      	mov	r2, r0
   1e014:	680b      	ldr	r3, [r1, #0]
   1e016:	421a      	tst	r2, r3
   1e018:	d0fc      	beq.n	1e014 <CC_PalWaitInterrupt+0x4>
   1e01a:	4b03      	ldr	r3, [pc, #12]	; (1e028 <CC_PalWaitInterrupt+0x18>)
   1e01c:	2000      	movs	r0, #0
   1e01e:	601a      	str	r2, [r3, #0]
   1e020:	4770      	bx	lr
   1e022:	bf00      	nop
   1e024:	5002ba00 	.word	0x5002ba00
   1e028:	5002ba08 	.word	0x5002ba08

0001e02c <CC_PalMutexCreate>:
   1e02c:	b508      	push	{r3, lr}
   1e02e:	4b03      	ldr	r3, [pc, #12]	; (1e03c <CC_PalMutexCreate+0x10>)
   1e030:	6802      	ldr	r2, [r0, #0]
   1e032:	681b      	ldr	r3, [r3, #0]
   1e034:	6810      	ldr	r0, [r2, #0]
   1e036:	4798      	blx	r3
   1e038:	2000      	movs	r0, #0
   1e03a:	bd08      	pop	{r3, pc}
   1e03c:	200005d4 	.word	0x200005d4

0001e040 <CC_PalMutexDestroy>:
   1e040:	b508      	push	{r3, lr}
   1e042:	4b03      	ldr	r3, [pc, #12]	; (1e050 <CC_PalMutexDestroy+0x10>)
   1e044:	6802      	ldr	r2, [r0, #0]
   1e046:	685b      	ldr	r3, [r3, #4]
   1e048:	6810      	ldr	r0, [r2, #0]
   1e04a:	4798      	blx	r3
   1e04c:	2000      	movs	r0, #0
   1e04e:	bd08      	pop	{r3, pc}
   1e050:	200005d4 	.word	0x200005d4

0001e054 <CC_PalMutexLock>:
   1e054:	4b02      	ldr	r3, [pc, #8]	; (1e060 <CC_PalMutexLock+0xc>)
   1e056:	6802      	ldr	r2, [r0, #0]
   1e058:	689b      	ldr	r3, [r3, #8]
   1e05a:	6810      	ldr	r0, [r2, #0]
   1e05c:	4718      	bx	r3
   1e05e:	bf00      	nop
   1e060:	200005d4 	.word	0x200005d4

0001e064 <CC_PalMutexUnlock>:
   1e064:	b508      	push	{r3, lr}
   1e066:	4b03      	ldr	r3, [pc, #12]	; (1e074 <CC_PalMutexUnlock+0x10>)
   1e068:	6802      	ldr	r2, [r0, #0]
   1e06a:	68db      	ldr	r3, [r3, #12]
   1e06c:	6810      	ldr	r0, [r2, #0]
   1e06e:	4798      	blx	r3
   1e070:	2000      	movs	r0, #0
   1e072:	bd08      	pop	{r3, pc}
   1e074:	200005d4 	.word	0x200005d4

0001e078 <CC_PalPowerSaveModeInit>:
   1e078:	b570      	push	{r4, r5, r6, lr}
   1e07a:	4c09      	ldr	r4, [pc, #36]	; (1e0a0 <CC_PalPowerSaveModeInit+0x28>)
   1e07c:	4d09      	ldr	r5, [pc, #36]	; (1e0a4 <CC_PalPowerSaveModeInit+0x2c>)
   1e07e:	6920      	ldr	r0, [r4, #16]
   1e080:	68ab      	ldr	r3, [r5, #8]
   1e082:	4798      	blx	r3
   1e084:	b118      	cbz	r0, 1e08e <CC_PalPowerSaveModeInit+0x16>
   1e086:	4b08      	ldr	r3, [pc, #32]	; (1e0a8 <CC_PalPowerSaveModeInit+0x30>)
   1e088:	4808      	ldr	r0, [pc, #32]	; (1e0ac <CC_PalPowerSaveModeInit+0x34>)
   1e08a:	685b      	ldr	r3, [r3, #4]
   1e08c:	4798      	blx	r3
   1e08e:	4a08      	ldr	r2, [pc, #32]	; (1e0b0 <CC_PalPowerSaveModeInit+0x38>)
   1e090:	68eb      	ldr	r3, [r5, #12]
   1e092:	6920      	ldr	r0, [r4, #16]
   1e094:	2100      	movs	r1, #0
   1e096:	6011      	str	r1, [r2, #0]
   1e098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e09c:	4718      	bx	r3
   1e09e:	bf00      	nop
   1e0a0:	200005e4 	.word	0x200005e4
   1e0a4:	200005d4 	.word	0x200005d4
   1e0a8:	200005c4 	.word	0x200005c4
   1e0ac:	00025c90 	.word	0x00025c90
   1e0b0:	200029e0 	.word	0x200029e0

0001e0b4 <CC_PalPowerSaveModeSelect>:
   1e0b4:	b570      	push	{r4, r5, r6, lr}
   1e0b6:	4d1a      	ldr	r5, [pc, #104]	; (1e120 <CC_PalPowerSaveModeSelect+0x6c>)
   1e0b8:	4e1a      	ldr	r6, [pc, #104]	; (1e124 <CC_PalPowerSaveModeSelect+0x70>)
   1e0ba:	4604      	mov	r4, r0
   1e0bc:	68b2      	ldr	r2, [r6, #8]
   1e0be:	6928      	ldr	r0, [r5, #16]
   1e0c0:	4790      	blx	r2
   1e0c2:	b9f0      	cbnz	r0, 1e102 <CC_PalPowerSaveModeSelect+0x4e>
   1e0c4:	b15c      	cbz	r4, 1e0de <CC_PalPowerSaveModeSelect+0x2a>
   1e0c6:	4c18      	ldr	r4, [pc, #96]	; (1e128 <CC_PalPowerSaveModeSelect+0x74>)
   1e0c8:	6823      	ldr	r3, [r4, #0]
   1e0ca:	b1ab      	cbz	r3, 1e0f8 <CC_PalPowerSaveModeSelect+0x44>
   1e0cc:	2b01      	cmp	r3, #1
   1e0ce:	d01a      	beq.n	1e106 <CC_PalPowerSaveModeSelect+0x52>
   1e0d0:	3b01      	subs	r3, #1
   1e0d2:	6023      	str	r3, [r4, #0]
   1e0d4:	6928      	ldr	r0, [r5, #16]
   1e0d6:	68f3      	ldr	r3, [r6, #12]
   1e0d8:	4798      	blx	r3
   1e0da:	2000      	movs	r0, #0
   1e0dc:	bd70      	pop	{r4, r5, r6, pc}
   1e0de:	4c12      	ldr	r4, [pc, #72]	; (1e128 <CC_PalPowerSaveModeSelect+0x74>)
   1e0e0:	6821      	ldr	r1, [r4, #0]
   1e0e2:	b939      	cbnz	r1, 1e0f4 <CC_PalPowerSaveModeSelect+0x40>
   1e0e4:	4b11      	ldr	r3, [pc, #68]	; (1e12c <CC_PalPowerSaveModeSelect+0x78>)
   1e0e6:	4a12      	ldr	r2, [pc, #72]	; (1e130 <CC_PalPowerSaveModeSelect+0x7c>)
   1e0e8:	2001      	movs	r0, #1
   1e0ea:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   1e0ee:	6813      	ldr	r3, [r2, #0]
   1e0f0:	2b00      	cmp	r3, #0
   1e0f2:	d1fc      	bne.n	1e0ee <CC_PalPowerSaveModeSelect+0x3a>
   1e0f4:	3101      	adds	r1, #1
   1e0f6:	6021      	str	r1, [r4, #0]
   1e0f8:	68f3      	ldr	r3, [r6, #12]
   1e0fa:	6928      	ldr	r0, [r5, #16]
   1e0fc:	4798      	blx	r3
   1e0fe:	2000      	movs	r0, #0
   1e100:	bd70      	pop	{r4, r5, r6, pc}
   1e102:	480c      	ldr	r0, [pc, #48]	; (1e134 <CC_PalPowerSaveModeSelect+0x80>)
   1e104:	bd70      	pop	{r4, r5, r6, pc}
   1e106:	4a0a      	ldr	r2, [pc, #40]	; (1e130 <CC_PalPowerSaveModeSelect+0x7c>)
   1e108:	6813      	ldr	r3, [r2, #0]
   1e10a:	2b00      	cmp	r3, #0
   1e10c:	d1fc      	bne.n	1e108 <CC_PalPowerSaveModeSelect+0x54>
   1e10e:	4a07      	ldr	r2, [pc, #28]	; (1e12c <CC_PalPowerSaveModeSelect+0x78>)
   1e110:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1e114:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   1e118:	f7ff ff02 	bl	1df20 <CC_HalMaskInterrupt>
   1e11c:	6823      	ldr	r3, [r4, #0]
   1e11e:	e7d7      	b.n	1e0d0 <CC_PalPowerSaveModeSelect+0x1c>
   1e120:	200005e4 	.word	0x200005e4
   1e124:	200005d4 	.word	0x200005d4
   1e128:	200029e0 	.word	0x200029e0
   1e12c:	5002a000 	.word	0x5002a000
   1e130:	5002b910 	.word	0x5002b910
   1e134:	ffff8fe9 	.word	0xffff8fe9

0001e138 <mutex_init>:
   1e138:	4b01      	ldr	r3, [pc, #4]	; (1e140 <mutex_init+0x8>)
   1e13a:	681b      	ldr	r3, [r3, #0]
   1e13c:	4718      	bx	r3
   1e13e:	bf00      	nop
   1e140:	200005d4 	.word	0x200005d4

0001e144 <mutex_lock>:
   1e144:	4b01      	ldr	r3, [pc, #4]	; (1e14c <mutex_lock+0x8>)
   1e146:	689b      	ldr	r3, [r3, #8]
   1e148:	4718      	bx	r3
   1e14a:	bf00      	nop
   1e14c:	200005d4 	.word	0x200005d4

0001e150 <mutex_unlock>:
   1e150:	4b01      	ldr	r3, [pc, #4]	; (1e158 <mutex_unlock+0x8>)
   1e152:	68db      	ldr	r3, [r3, #12]
   1e154:	4718      	bx	r3
   1e156:	bf00      	nop
   1e158:	200005d4 	.word	0x200005d4

0001e15c <startTrngHW>:
   1e15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e160:	2800      	cmp	r0, #0
   1e162:	d077      	beq.n	1e254 <startTrngHW+0xf8>
   1e164:	460c      	mov	r4, r1
   1e166:	2900      	cmp	r1, #0
   1e168:	d074      	beq.n	1e254 <startTrngHW+0xf8>
   1e16a:	461d      	mov	r5, r3
   1e16c:	2b00      	cmp	r3, #0
   1e16e:	d071      	beq.n	1e254 <startTrngHW+0xf8>
   1e170:	4606      	mov	r6, r0
   1e172:	b11a      	cbz	r2, 1e17c <startTrngHW+0x20>
   1e174:	2201      	movs	r2, #1
   1e176:	2300      	movs	r3, #0
   1e178:	602a      	str	r2, [r5, #0]
   1e17a:	6003      	str	r3, [r0, #0]
   1e17c:	682b      	ldr	r3, [r5, #0]
   1e17e:	2b00      	cmp	r3, #0
   1e180:	d064      	beq.n	1e24c <startTrngHW+0xf0>
   1e182:	4629      	mov	r1, r5
   1e184:	4620      	mov	r0, r4
   1e186:	f001 f8cd 	bl	1f324 <LLF_RND_GetFastestRosc>
   1e18a:	4607      	mov	r7, r0
   1e18c:	2800      	cmp	r0, #0
   1e18e:	d15e      	bne.n	1e24e <startTrngHW+0xf2>
   1e190:	6828      	ldr	r0, [r5, #0]
   1e192:	4621      	mov	r1, r4
   1e194:	f001 f8a8 	bl	1f2e8 <LLF_RND_GetRoscSampleCnt>
   1e198:	4607      	mov	r7, r0
   1e19a:	2800      	cmp	r0, #0
   1e19c:	d157      	bne.n	1e24e <startTrngHW+0xf2>
   1e19e:	682b      	ldr	r3, [r5, #0]
   1e1a0:	2b08      	cmp	r3, #8
   1e1a2:	d066      	beq.n	1e272 <startTrngHW+0x116>
   1e1a4:	2b04      	cmp	r3, #4
   1e1a6:	d067      	beq.n	1e278 <startTrngHW+0x11c>
   1e1a8:	f1a3 0802 	sub.w	r8, r3, #2
   1e1ac:	fab8 f888 	clz	r8, r8
   1e1b0:	ea4f 1858 	mov.w	r8, r8, lsr #5
   1e1b4:	4b32      	ldr	r3, [pc, #200]	; (1e280 <startTrngHW+0x124>)
   1e1b6:	4933      	ldr	r1, [pc, #204]	; (1e284 <startTrngHW+0x128>)
   1e1b8:	4a33      	ldr	r2, [pc, #204]	; (1e288 <startTrngHW+0x12c>)
   1e1ba:	2001      	movs	r0, #1
   1e1bc:	6018      	str	r0, [r3, #0]
   1e1be:	469c      	mov	ip, r3
   1e1c0:	6008      	str	r0, [r1, #0]
   1e1c2:	f8cc 0000 	str.w	r0, [ip]
   1e1c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e1c8:	6013      	str	r3, [r2, #0]
   1e1ca:	6811      	ldr	r1, [r2, #0]
   1e1cc:	428b      	cmp	r3, r1
   1e1ce:	d1f8      	bne.n	1e1c2 <startTrngHW+0x66>
   1e1d0:	4b2e      	ldr	r3, [pc, #184]	; (1e28c <startTrngHW+0x130>)
   1e1d2:	f04f 0900 	mov.w	r9, #0
   1e1d6:	f8c3 9000 	str.w	r9, [r3]
   1e1da:	f04f 30ff 	mov.w	r0, #4294967295
   1e1de:	f7ff fe91 	bl	1df04 <CC_HalClearInterruptBit>
   1e1e2:	4b2b      	ldr	r3, [pc, #172]	; (1e290 <startTrngHW+0x134>)
   1e1e4:	f06f 021b 	mvn.w	r2, #27
   1e1e8:	601a      	str	r2, [r3, #0]
   1e1ea:	4648      	mov	r0, r9
   1e1ec:	f7ff fe98 	bl	1df20 <CC_HalMaskInterrupt>
   1e1f0:	4a28      	ldr	r2, [pc, #160]	; (1e294 <startTrngHW+0x138>)
   1e1f2:	4b29      	ldr	r3, [pc, #164]	; (1e298 <startTrngHW+0x13c>)
   1e1f4:	f8c2 8000 	str.w	r8, [r2]
   1e1f8:	6818      	ldr	r0, [r3, #0]
   1e1fa:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1e1fe:	f7ff fe8f 	bl	1df20 <CC_HalMaskInterrupt>
   1e202:	4b26      	ldr	r3, [pc, #152]	; (1e29c <startTrngHW+0x140>)
   1e204:	220a      	movs	r2, #10
   1e206:	601a      	str	r2, [r3, #0]
   1e208:	9908      	ldr	r1, [sp, #32]
   1e20a:	6923      	ldr	r3, [r4, #16]
   1e20c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1e20e:	2901      	cmp	r1, #1
   1e210:	d024      	beq.n	1e25c <startTrngHW+0x100>
   1e212:	4923      	ldr	r1, [pc, #140]	; (1e2a0 <startTrngHW+0x144>)
   1e214:	fba1 1303 	umull	r1, r3, r1, r3
   1e218:	091b      	lsrs	r3, r3, #4
   1e21a:	fb03 f302 	mul.w	r3, r3, r2
   1e21e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1e222:	4920      	ldr	r1, [pc, #128]	; (1e2a4 <startTrngHW+0x148>)
   1e224:	4a19      	ldr	r2, [pc, #100]	; (1e28c <startTrngHW+0x130>)
   1e226:	03db      	lsls	r3, r3, #15
   1e228:	099b      	lsrs	r3, r3, #6
   1e22a:	600b      	str	r3, [r1, #0]
   1e22c:	2301      	movs	r3, #1
   1e22e:	6013      	str	r3, [r2, #0]
   1e230:	6833      	ldr	r3, [r6, #0]
   1e232:	682a      	ldr	r2, [r5, #0]
   1e234:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1e238:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1e23c:	6033      	str	r3, [r6, #0]
   1e23e:	682a      	ldr	r2, [r5, #0]
   1e240:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e244:	6033      	str	r3, [r6, #0]
   1e246:	4638      	mov	r0, r7
   1e248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e24c:	4f16      	ldr	r7, [pc, #88]	; (1e2a8 <startTrngHW+0x14c>)
   1e24e:	4638      	mov	r0, r7
   1e250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e254:	4f15      	ldr	r7, [pc, #84]	; (1e2ac <startTrngHW+0x150>)
   1e256:	4638      	mov	r0, r7
   1e258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e25c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e260:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   1e264:	3101      	adds	r1, #1
   1e266:	d002      	beq.n	1e26e <startTrngHW+0x112>
   1e268:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   1e26c:	e7d1      	b.n	1e212 <startTrngHW+0xb6>
   1e26e:	2316      	movs	r3, #22
   1e270:	e7d3      	b.n	1e21a <startTrngHW+0xbe>
   1e272:	f04f 0803 	mov.w	r8, #3
   1e276:	e79d      	b.n	1e1b4 <startTrngHW+0x58>
   1e278:	f04f 0802 	mov.w	r8, #2
   1e27c:	e79a      	b.n	1e1b4 <startTrngHW+0x58>
   1e27e:	bf00      	nop
   1e280:	5002b1c4 	.word	0x5002b1c4
   1e284:	5002b140 	.word	0x5002b140
   1e288:	5002b130 	.word	0x5002b130
   1e28c:	5002b12c 	.word	0x5002b12c
   1e290:	5002b100 	.word	0x5002b100
   1e294:	5002b10c 	.word	0x5002b10c
   1e298:	5002ba04 	.word	0x5002ba04
   1e29c:	5002b138 	.word	0x5002b138
   1e2a0:	aaaaaaab 	.word	0xaaaaaaab
   1e2a4:	5002b1d8 	.word	0x5002b1d8
   1e2a8:	00f10c31 	.word	0x00f10c31
   1e2ac:	00f10c35 	.word	0x00f10c35

0001e2b0 <LLF_RND_RepetitionCounterTest.part.0>:
   1e2b0:	b4f0      	push	{r4, r5, r6, r7}
   1e2b2:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   1e2b6:	2400      	movs	r4, #0
   1e2b8:	f10c 3cff 	add.w	ip, ip, #4294967295
   1e2bc:	4626      	mov	r6, r4
   1e2be:	4627      	mov	r7, r4
   1e2c0:	e006      	b.n	1e2d0 <LLF_RND_RepetitionCounterTest.part.0+0x20>
   1e2c2:	429f      	cmp	r7, r3
   1e2c4:	d016      	beq.n	1e2f4 <LLF_RND_RepetitionCounterTest.part.0+0x44>
   1e2c6:	2601      	movs	r6, #1
   1e2c8:	4565      	cmp	r5, ip
   1e2ca:	d819      	bhi.n	1e300 <LLF_RND_RepetitionCounterTest.part.0+0x50>
   1e2cc:	462c      	mov	r4, r5
   1e2ce:	461f      	mov	r7, r3
   1e2d0:	0963      	lsrs	r3, r4, #5
   1e2d2:	f004 011f 	and.w	r1, r4, #31
   1e2d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1e2da:	291f      	cmp	r1, #31
   1e2dc:	fa23 f301 	lsr.w	r3, r3, r1
   1e2e0:	f104 0501 	add.w	r5, r4, #1
   1e2e4:	bf18      	it	ne
   1e2e6:	f003 0301 	andne.w	r3, r3, #1
   1e2ea:	2c00      	cmp	r4, #0
   1e2ec:	d1e9      	bne.n	1e2c2 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   1e2ee:	2601      	movs	r6, #1
   1e2f0:	4635      	mov	r5, r6
   1e2f2:	e7eb      	b.n	1e2cc <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   1e2f4:	3601      	adds	r6, #1
   1e2f6:	4296      	cmp	r6, r2
   1e2f8:	d1e6      	bne.n	1e2c8 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   1e2fa:	4803      	ldr	r0, [pc, #12]	; (1e308 <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   1e2fc:	bcf0      	pop	{r4, r5, r6, r7}
   1e2fe:	4770      	bx	lr
   1e300:	2000      	movs	r0, #0
   1e302:	bcf0      	pop	{r4, r5, r6, r7}
   1e304:	4770      	bx	lr
   1e306:	bf00      	nop
   1e308:	00f10c36 	.word	0x00f10c36

0001e30c <LLF_RND_AdaptiveProportionTest>:
   1e30c:	2800      	cmp	r0, #0
   1e30e:	d061      	beq.n	1e3d4 <LLF_RND_AdaptiveProportionTest+0xc8>
   1e310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e314:	1e4c      	subs	r4, r1, #1
   1e316:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   1e31a:	d227      	bcs.n	1e36c <LLF_RND_AdaptiveProportionTest+0x60>
   1e31c:	b333      	cbz	r3, 1e36c <LLF_RND_AdaptiveProportionTest+0x60>
   1e31e:	b32a      	cbz	r2, 1e36c <LLF_RND_AdaptiveProportionTest+0x60>
   1e320:	00cd      	lsls	r5, r1, #3
   1e322:	2b01      	cmp	r3, #1
   1e324:	f105 3eff 	add.w	lr, r5, #4294967295
   1e328:	d030      	beq.n	1e38c <LLF_RND_AdaptiveProportionTest+0x80>
   1e32a:	2100      	movs	r1, #0
   1e32c:	468c      	mov	ip, r1
   1e32e:	460f      	mov	r7, r1
   1e330:	460e      	mov	r6, r1
   1e332:	f103 38ff 	add.w	r8, r3, #4294967295
   1e336:	094c      	lsrs	r4, r1, #5
   1e338:	f001 051f 	and.w	r5, r1, #31
   1e33c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   1e340:	2d1f      	cmp	r5, #31
   1e342:	fa24 f405 	lsr.w	r4, r4, r5
   1e346:	bf18      	it	ne
   1e348:	f004 0401 	andne.w	r4, r4, #1
   1e34c:	b921      	cbnz	r1, 1e358 <LLF_RND_AdaptiveProportionTest+0x4c>
   1e34e:	2601      	movs	r6, #1
   1e350:	46b4      	mov	ip, r6
   1e352:	4631      	mov	r1, r6
   1e354:	4627      	mov	r7, r4
   1e356:	e7ee      	b.n	1e336 <LLF_RND_AdaptiveProportionTest+0x2a>
   1e358:	42b3      	cmp	r3, r6
   1e35a:	d013      	beq.n	1e384 <LLF_RND_AdaptiveProportionTest+0x78>
   1e35c:	42a7      	cmp	r7, r4
   1e35e:	d101      	bne.n	1e364 <LLF_RND_AdaptiveProportionTest+0x58>
   1e360:	f10c 0c01 	add.w	ip, ip, #1
   1e364:	4546      	cmp	r6, r8
   1e366:	d104      	bne.n	1e372 <LLF_RND_AdaptiveProportionTest+0x66>
   1e368:	4562      	cmp	r2, ip
   1e36a:	d202      	bcs.n	1e372 <LLF_RND_AdaptiveProportionTest+0x66>
   1e36c:	481a      	ldr	r0, [pc, #104]	; (1e3d8 <LLF_RND_AdaptiveProportionTest+0xcc>)
   1e36e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e372:	463c      	mov	r4, r7
   1e374:	3101      	adds	r1, #1
   1e376:	458e      	cmp	lr, r1
   1e378:	f106 0601 	add.w	r6, r6, #1
   1e37c:	d2ea      	bcs.n	1e354 <LLF_RND_AdaptiveProportionTest+0x48>
   1e37e:	2000      	movs	r0, #0
   1e380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e384:	2600      	movs	r6, #0
   1e386:	f04f 0c01 	mov.w	ip, #1
   1e38a:	e7f3      	b.n	1e374 <LLF_RND_AdaptiveProportionTest+0x68>
   1e38c:	2600      	movs	r6, #0
   1e38e:	46b4      	mov	ip, r6
   1e390:	4637      	mov	r7, r6
   1e392:	4634      	mov	r4, r6
   1e394:	0961      	lsrs	r1, r4, #5
   1e396:	f004 031f 	and.w	r3, r4, #31
   1e39a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1e39e:	2b1f      	cmp	r3, #31
   1e3a0:	fa21 f103 	lsr.w	r1, r1, r3
   1e3a4:	bf18      	it	ne
   1e3a6:	f001 0101 	andne.w	r1, r1, #1
   1e3aa:	b13c      	cbz	r4, 1e3bc <LLF_RND_AdaptiveProportionTest+0xb0>
   1e3ac:	b95f      	cbnz	r7, 1e3c6 <LLF_RND_AdaptiveProportionTest+0xba>
   1e3ae:	458c      	cmp	ip, r1
   1e3b0:	d001      	beq.n	1e3b6 <LLF_RND_AdaptiveProportionTest+0xaa>
   1e3b2:	4661      	mov	r1, ip
   1e3b4:	e008      	b.n	1e3c8 <LLF_RND_AdaptiveProportionTest+0xbc>
   1e3b6:	3601      	adds	r6, #1
   1e3b8:	4661      	mov	r1, ip
   1e3ba:	e005      	b.n	1e3c8 <LLF_RND_AdaptiveProportionTest+0xbc>
   1e3bc:	2601      	movs	r6, #1
   1e3be:	4634      	mov	r4, r6
   1e3c0:	468c      	mov	ip, r1
   1e3c2:	2701      	movs	r7, #1
   1e3c4:	e7e6      	b.n	1e394 <LLF_RND_AdaptiveProportionTest+0x88>
   1e3c6:	463e      	mov	r6, r7
   1e3c8:	42b2      	cmp	r2, r6
   1e3ca:	d3cf      	bcc.n	1e36c <LLF_RND_AdaptiveProportionTest+0x60>
   1e3cc:	3401      	adds	r4, #1
   1e3ce:	42ac      	cmp	r4, r5
   1e3d0:	d1f6      	bne.n	1e3c0 <LLF_RND_AdaptiveProportionTest+0xb4>
   1e3d2:	e7d4      	b.n	1e37e <LLF_RND_AdaptiveProportionTest+0x72>
   1e3d4:	4800      	ldr	r0, [pc, #0]	; (1e3d8 <LLF_RND_AdaptiveProportionTest+0xcc>)
   1e3d6:	4770      	bx	lr
   1e3d8:	00f10c37 	.word	0x00f10c37

0001e3dc <getTrngSource>:
   1e3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3e0:	b08d      	sub	sp, #52	; 0x34
   1e3e2:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   1e3e6:	4607      	mov	r7, r0
   1e3e8:	460c      	mov	r4, r1
   1e3ea:	2d00      	cmp	r5, #0
   1e3ec:	d14c      	bne.n	1e488 <getTrngSource+0xac>
   1e3ee:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1e3f2:	601e      	str	r6, [r3, #0]
   1e3f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1e3f6:	2100      	movs	r1, #0
   1e3f8:	6019      	str	r1, [r3, #0]
   1e3fa:	2a00      	cmp	r2, #0
   1e3fc:	f000 811f 	beq.w	1e63e <getTrngSource+0x262>
   1e400:	4a9b      	ldr	r2, [pc, #620]	; (1e670 <getTrngSource+0x294>)
   1e402:	4b9c      	ldr	r3, [pc, #624]	; (1e674 <getTrngSource+0x298>)
   1e404:	6811      	ldr	r1, [r2, #0]
   1e406:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1e408:	681b      	ldr	r3, [r3, #0]
   1e40a:	429a      	cmp	r2, r3
   1e40c:	d147      	bne.n	1e49e <getTrngSource+0xc2>
   1e40e:	290a      	cmp	r1, #10
   1e410:	d145      	bne.n	1e49e <getTrngSource+0xc2>
   1e412:	78fb      	ldrb	r3, [r7, #3]
   1e414:	9304      	str	r3, [sp, #16]
   1e416:	4b98      	ldr	r3, [pc, #608]	; (1e678 <getTrngSource+0x29c>)
   1e418:	fba3 230a 	umull	r2, r3, r3, sl
   1e41c:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   1e420:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   1e424:	f106 0208 	add.w	r2, r6, #8
   1e428:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   1e42c:	2304      	movs	r3, #4
   1e42e:	9203      	str	r2, [sp, #12]
   1e430:	9302      	str	r3, [sp, #8]
   1e432:	46b8      	mov	r8, r7
   1e434:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1e436:	f8c3 a000 	str.w	sl, [r3]
   1e43a:	f1ba 0f00 	cmp.w	sl, #0
   1e43e:	f000 80c4 	beq.w	1e5ca <getTrngSource+0x1ee>
   1e442:	9e03      	ldr	r6, [sp, #12]
   1e444:	4655      	mov	r5, sl
   1e446:	f04f 0900 	mov.w	r9, #0
   1e44a:	f000 ff7b 	bl	1f344 <LLF_RND_TurnOffTrng>
   1e44e:	2300      	movs	r3, #0
   1e450:	9305      	str	r3, [sp, #20]
   1e452:	f1b8 0f00 	cmp.w	r8, #0
   1e456:	f000 80e6 	beq.w	1e626 <getTrngSource+0x24a>
   1e45a:	2c00      	cmp	r4, #0
   1e45c:	f000 80e3 	beq.w	1e626 <getTrngSource+0x24a>
   1e460:	9b04      	ldr	r3, [sp, #16]
   1e462:	2b00      	cmp	r3, #0
   1e464:	f000 80dd 	beq.w	1e622 <getTrngSource+0x246>
   1e468:	a904      	add	r1, sp, #16
   1e46a:	4620      	mov	r0, r4
   1e46c:	f000 ff5a 	bl	1f324 <LLF_RND_GetFastestRosc>
   1e470:	b1b8      	cbz	r0, 1e4a2 <getTrngSource+0xc6>
   1e472:	4b82      	ldr	r3, [pc, #520]	; (1e67c <getTrngSource+0x2a0>)
   1e474:	4298      	cmp	r0, r3
   1e476:	f040 80a8 	bne.w	1e5ca <getTrngSource+0x1ee>
   1e47a:	9002      	str	r0, [sp, #8]
   1e47c:	f000 ff62 	bl	1f344 <LLF_RND_TurnOffTrng>
   1e480:	9802      	ldr	r0, [sp, #8]
   1e482:	b00d      	add	sp, #52	; 0x34
   1e484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e488:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1e48c:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   1e490:	3001      	adds	r0, #1
   1e492:	bf14      	ite	ne
   1e494:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   1e498:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   1e49c:	e7a9      	b.n	1e3f2 <getTrngSource+0x16>
   1e49e:	4878      	ldr	r0, [pc, #480]	; (1e680 <getTrngSource+0x2a4>)
   1e4a0:	e7eb      	b.n	1e47a <getTrngSource+0x9e>
   1e4a2:	9804      	ldr	r0, [sp, #16]
   1e4a4:	4621      	mov	r1, r4
   1e4a6:	f000 ff1f 	bl	1f2e8 <LLF_RND_GetRoscSampleCnt>
   1e4aa:	2800      	cmp	r0, #0
   1e4ac:	d1e1      	bne.n	1e472 <getTrngSource+0x96>
   1e4ae:	9f04      	ldr	r7, [sp, #16]
   1e4b0:	2f08      	cmp	r7, #8
   1e4b2:	f000 80ba 	beq.w	1e62a <getTrngSource+0x24e>
   1e4b6:	2f04      	cmp	r7, #4
   1e4b8:	f000 80b9 	beq.w	1e62e <getTrngSource+0x252>
   1e4bc:	f1a7 0702 	sub.w	r7, r7, #2
   1e4c0:	fab7 f787 	clz	r7, r7
   1e4c4:	097f      	lsrs	r7, r7, #5
   1e4c6:	496f      	ldr	r1, [pc, #444]	; (1e684 <getTrngSource+0x2a8>)
   1e4c8:	2301      	movs	r3, #1
   1e4ca:	600b      	str	r3, [r1, #0]
   1e4cc:	f841 3c84 	str.w	r3, [r1, #-132]
   1e4d0:	4619      	mov	r1, r3
   1e4d2:	4b6c      	ldr	r3, [pc, #432]	; (1e684 <getTrngSource+0x2a8>)
   1e4d4:	4867      	ldr	r0, [pc, #412]	; (1e674 <getTrngSource+0x298>)
   1e4d6:	6019      	str	r1, [r3, #0]
   1e4d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e4da:	6003      	str	r3, [r0, #0]
   1e4dc:	6800      	ldr	r0, [r0, #0]
   1e4de:	4283      	cmp	r3, r0
   1e4e0:	d1f7      	bne.n	1e4d2 <getTrngSource+0xf6>
   1e4e2:	4a69      	ldr	r2, [pc, #420]	; (1e688 <getTrngSource+0x2ac>)
   1e4e4:	2300      	movs	r3, #0
   1e4e6:	6013      	str	r3, [r2, #0]
   1e4e8:	f04f 30ff 	mov.w	r0, #4294967295
   1e4ec:	f7ff fd0a 	bl	1df04 <CC_HalClearInterruptBit>
   1e4f0:	2300      	movs	r3, #0
   1e4f2:	4618      	mov	r0, r3
   1e4f4:	4b65      	ldr	r3, [pc, #404]	; (1e68c <getTrngSource+0x2b0>)
   1e4f6:	f06f 011b 	mvn.w	r1, #27
   1e4fa:	6019      	str	r1, [r3, #0]
   1e4fc:	f7ff fd10 	bl	1df20 <CC_HalMaskInterrupt>
   1e500:	4963      	ldr	r1, [pc, #396]	; (1e690 <getTrngSource+0x2b4>)
   1e502:	4b64      	ldr	r3, [pc, #400]	; (1e694 <getTrngSource+0x2b8>)
   1e504:	600f      	str	r7, [r1, #0]
   1e506:	6818      	ldr	r0, [r3, #0]
   1e508:	4f5b      	ldr	r7, [pc, #364]	; (1e678 <getTrngSource+0x29c>)
   1e50a:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   1e50e:	f7ff fd07 	bl	1df20 <CC_HalMaskInterrupt>
   1e512:	4b57      	ldr	r3, [pc, #348]	; (1e670 <getTrngSource+0x294>)
   1e514:	4860      	ldr	r0, [pc, #384]	; (1e698 <getTrngSource+0x2bc>)
   1e516:	210a      	movs	r1, #10
   1e518:	6019      	str	r1, [r3, #0]
   1e51a:	6921      	ldr	r1, [r4, #16]
   1e51c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e51e:	fba7 c101 	umull	ip, r1, r7, r1
   1e522:	0909      	lsrs	r1, r1, #4
   1e524:	fb03 f301 	mul.w	r3, r3, r1
   1e528:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1e52c:	03db      	lsls	r3, r3, #15
   1e52e:	099b      	lsrs	r3, r3, #6
   1e530:	6003      	str	r3, [r0, #0]
   1e532:	4b55      	ldr	r3, [pc, #340]	; (1e688 <getTrngSource+0x2ac>)
   1e534:	2201      	movs	r2, #1
   1e536:	601a      	str	r2, [r3, #0]
   1e538:	9904      	ldr	r1, [sp, #16]
   1e53a:	f8d8 2000 	ldr.w	r2, [r8]
   1e53e:	020b      	lsls	r3, r1, #8
   1e540:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   1e544:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1e548:	4313      	orrs	r3, r2
   1e54a:	f8c8 3000 	str.w	r3, [r8]
   1e54e:	a805      	add	r0, sp, #20
   1e550:	f000 feba 	bl	1f2c8 <LLF_RND_WaitRngInterrupt>
   1e554:	9b05      	ldr	r3, [sp, #20]
   1e556:	f003 031a 	and.w	r3, r3, #26
   1e55a:	4303      	orrs	r3, r0
   1e55c:	d135      	bne.n	1e5ca <getTrngSource+0x1ee>
   1e55e:	4a4f      	ldr	r2, [pc, #316]	; (1e69c <getTrngSource+0x2c0>)
   1e560:	4b4f      	ldr	r3, [pc, #316]	; (1e6a0 <getTrngSource+0x2c4>)
   1e562:	6812      	ldr	r2, [r2, #0]
   1e564:	9206      	str	r2, [sp, #24]
   1e566:	681a      	ldr	r2, [r3, #0]
   1e568:	9207      	str	r2, [sp, #28]
   1e56a:	685a      	ldr	r2, [r3, #4]
   1e56c:	9208      	str	r2, [sp, #32]
   1e56e:	689a      	ldr	r2, [r3, #8]
   1e570:	9209      	str	r2, [sp, #36]	; 0x24
   1e572:	68da      	ldr	r2, [r3, #12]
   1e574:	920a      	str	r2, [sp, #40]	; 0x28
   1e576:	3310      	adds	r3, #16
   1e578:	fba7 2705 	umull	r2, r7, r7, r5
   1e57c:	681b      	ldr	r3, [r3, #0]
   1e57e:	930b      	str	r3, [sp, #44]	; 0x2c
   1e580:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   1e584:	d102      	bne.n	1e58c <getTrngSource+0x1b0>
   1e586:	f1bb 0f00 	cmp.w	fp, #0
   1e58a:	d141      	bne.n	1e610 <getTrngSource+0x234>
   1e58c:	2218      	movs	r2, #24
   1e58e:	4630      	mov	r0, r6
   1e590:	eb0d 0102 	add.w	r1, sp, r2
   1e594:	f000 fe3c 	bl	1f210 <CC_PalMemCopyPlat>
   1e598:	3d18      	subs	r5, #24
   1e59a:	3618      	adds	r6, #24
   1e59c:	f109 0901 	add.w	r9, r9, #1
   1e5a0:	2d00      	cmp	r5, #0
   1e5a2:	f47f af52 	bne.w	1e44a <getTrngSource+0x6e>
   1e5a6:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   1e5aa:	d85d      	bhi.n	1e668 <getTrngSource+0x28c>
   1e5ac:	9d03      	ldr	r5, [sp, #12]
   1e5ae:	6962      	ldr	r2, [r4, #20]
   1e5b0:	4651      	mov	r1, sl
   1e5b2:	4628      	mov	r0, r5
   1e5b4:	f7ff fe7c 	bl	1e2b0 <LLF_RND_RepetitionCounterTest.part.0>
   1e5b8:	2800      	cmp	r0, #0
   1e5ba:	d04b      	beq.n	1e654 <getTrngSource+0x278>
   1e5bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1e5be:	2300      	movs	r3, #0
   1e5c0:	6013      	str	r3, [r2, #0]
   1e5c2:	4b2e      	ldr	r3, [pc, #184]	; (1e67c <getTrngSource+0x2a0>)
   1e5c4:	4298      	cmp	r0, r3
   1e5c6:	f43f af58 	beq.w	1e47a <getTrngSource+0x9e>
   1e5ca:	9d04      	ldr	r5, [sp, #16]
   1e5cc:	2d08      	cmp	r5, #8
   1e5ce:	d034      	beq.n	1e63a <getTrngSource+0x25e>
   1e5d0:	2200      	movs	r2, #0
   1e5d2:	ab04      	add	r3, sp, #16
   1e5d4:	006d      	lsls	r5, r5, #1
   1e5d6:	9200      	str	r2, [sp, #0]
   1e5d8:	4621      	mov	r1, r4
   1e5da:	4640      	mov	r0, r8
   1e5dc:	9504      	str	r5, [sp, #16]
   1e5de:	f7ff fdbd 	bl	1e15c <startTrngHW>
   1e5e2:	4b30      	ldr	r3, [pc, #192]	; (1e6a4 <getTrngSource+0x2c8>)
   1e5e4:	4298      	cmp	r0, r3
   1e5e6:	d024      	beq.n	1e632 <getTrngSource+0x256>
   1e5e8:	2800      	cmp	r0, #0
   1e5ea:	f47f af46 	bne.w	1e47a <getTrngSource+0x9e>
   1e5ee:	f8d8 2000 	ldr.w	r2, [r8]
   1e5f2:	0a13      	lsrs	r3, r2, #8
   1e5f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1e5f8:	4313      	orrs	r3, r2
   1e5fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1e5fe:	f8c8 3000 	str.w	r3, [r8]
   1e602:	9b02      	ldr	r3, [sp, #8]
   1e604:	3b01      	subs	r3, #1
   1e606:	9302      	str	r3, [sp, #8]
   1e608:	f47f af14 	bne.w	1e434 <getTrngSource+0x58>
   1e60c:	2000      	movs	r0, #0
   1e60e:	e734      	b.n	1e47a <getTrngSource+0x9e>
   1e610:	4630      	mov	r0, r6
   1e612:	465a      	mov	r2, fp
   1e614:	a906      	add	r1, sp, #24
   1e616:	f000 fdfb 	bl	1f210 <CC_PalMemCopyPlat>
   1e61a:	eba5 050b 	sub.w	r5, r5, fp
   1e61e:	445e      	add	r6, fp
   1e620:	e7bc      	b.n	1e59c <getTrngSource+0x1c0>
   1e622:	4820      	ldr	r0, [pc, #128]	; (1e6a4 <getTrngSource+0x2c8>)
   1e624:	e725      	b.n	1e472 <getTrngSource+0x96>
   1e626:	4820      	ldr	r0, [pc, #128]	; (1e6a8 <getTrngSource+0x2cc>)
   1e628:	e723      	b.n	1e472 <getTrngSource+0x96>
   1e62a:	2703      	movs	r7, #3
   1e62c:	e74b      	b.n	1e4c6 <getTrngSource+0xea>
   1e62e:	2702      	movs	r7, #2
   1e630:	e749      	b.n	1e4c6 <getTrngSource+0xea>
   1e632:	6a23      	ldr	r3, [r4, #32]
   1e634:	2b00      	cmp	r3, #0
   1e636:	f43f af20 	beq.w	1e47a <getTrngSource+0x9e>
   1e63a:	481c      	ldr	r0, [pc, #112]	; (1e6ac <getTrngSource+0x2d0>)
   1e63c:	e71d      	b.n	1e47a <getTrngSource+0x9e>
   1e63e:	9500      	str	r5, [sp, #0]
   1e640:	ab04      	add	r3, sp, #16
   1e642:	2201      	movs	r2, #1
   1e644:	4621      	mov	r1, r4
   1e646:	4638      	mov	r0, r7
   1e648:	f7ff fd88 	bl	1e15c <startTrngHW>
   1e64c:	2800      	cmp	r0, #0
   1e64e:	f43f aee2 	beq.w	1e416 <getTrngSource+0x3a>
   1e652:	e712      	b.n	1e47a <getTrngSource+0x9e>
   1e654:	69a2      	ldr	r2, [r4, #24]
   1e656:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1e65a:	4651      	mov	r1, sl
   1e65c:	4628      	mov	r0, r5
   1e65e:	f7ff fe55 	bl	1e30c <LLF_RND_AdaptiveProportionTest>
   1e662:	2800      	cmp	r0, #0
   1e664:	d1aa      	bne.n	1e5bc <getTrngSource+0x1e0>
   1e666:	e7d1      	b.n	1e60c <getTrngSource+0x230>
   1e668:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1e66a:	601d      	str	r5, [r3, #0]
   1e66c:	e7ad      	b.n	1e5ca <getTrngSource+0x1ee>
   1e66e:	bf00      	nop
   1e670:	5002b138 	.word	0x5002b138
   1e674:	5002b130 	.word	0x5002b130
   1e678:	aaaaaaab 	.word	0xaaaaaaab
   1e67c:	00f10c02 	.word	0x00f10c02
   1e680:	00f10c30 	.word	0x00f10c30
   1e684:	5002b1c4 	.word	0x5002b1c4
   1e688:	5002b12c 	.word	0x5002b12c
   1e68c:	5002b100 	.word	0x5002b100
   1e690:	5002b10c 	.word	0x5002b10c
   1e694:	5002ba04 	.word	0x5002ba04
   1e698:	5002b1d8 	.word	0x5002b1d8
   1e69c:	5002b114 	.word	0x5002b114
   1e6a0:	5002b118 	.word	0x5002b118
   1e6a4:	00f10c31 	.word	0x00f10c31
   1e6a8:	00f10c35 	.word	0x00f10c35
   1e6ac:	00f10c32 	.word	0x00f10c32

0001e6b0 <LLF_RND_GetTrngSource>:
   1e6b0:	b430      	push	{r4, r5}
   1e6b2:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1e6b6:	9d04      	ldr	r5, [sp, #16]
   1e6b8:	9402      	str	r4, [sp, #8]
   1e6ba:	2400      	movs	r4, #0
   1e6bc:	e9cd 5403 	strd	r5, r4, [sp, #12]
   1e6c0:	bc30      	pop	{r4, r5}
   1e6c2:	f7ff be8b 	b.w	1e3dc <getTrngSource>
   1e6c6:	bf00      	nop

0001e6c8 <LLF_RND_RunTrngStartupTest>:
   1e6c8:	b510      	push	{r4, lr}
   1e6ca:	b086      	sub	sp, #24
   1e6cc:	ab05      	add	r3, sp, #20
   1e6ce:	2401      	movs	r4, #1
   1e6d0:	e9cd 2401 	strd	r2, r4, [sp, #4]
   1e6d4:	9300      	str	r3, [sp, #0]
   1e6d6:	2200      	movs	r2, #0
   1e6d8:	ab04      	add	r3, sp, #16
   1e6da:	f7ff fe7f 	bl	1e3dc <getTrngSource>
   1e6de:	b006      	add	sp, #24
   1e6e0:	bd10      	pop	{r4, pc}
   1e6e2:	bf00      	nop

0001e6e4 <mbedtls_platform_zeroize>:
   1e6e4:	b138      	cbz	r0, 1e6f6 <mbedtls_platform_zeroize+0x12>
   1e6e6:	b131      	cbz	r1, 1e6f6 <mbedtls_platform_zeroize+0x12>
   1e6e8:	4401      	add	r1, r0
   1e6ea:	2200      	movs	r2, #0
   1e6ec:	4603      	mov	r3, r0
   1e6ee:	3001      	adds	r0, #1
   1e6f0:	4281      	cmp	r1, r0
   1e6f2:	701a      	strb	r2, [r3, #0]
   1e6f4:	d1fa      	bne.n	1e6ec <mbedtls_platform_zeroize+0x8>
   1e6f6:	4770      	bx	lr

0001e6f8 <mbedtls_hardware_poll>:
   1e6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e6fa:	b089      	sub	sp, #36	; 0x24
   1e6fc:	9205      	str	r2, [sp, #20]
   1e6fe:	2900      	cmp	r1, #0
   1e700:	d064      	beq.n	1e7cc <mbedtls_hardware_poll+0xd4>
   1e702:	461c      	mov	r4, r3
   1e704:	2b00      	cmp	r3, #0
   1e706:	d061      	beq.n	1e7cc <mbedtls_hardware_poll+0xd4>
   1e708:	4615      	mov	r5, r2
   1e70a:	2a00      	cmp	r2, #0
   1e70c:	d05e      	beq.n	1e7cc <mbedtls_hardware_poll+0xd4>
   1e70e:	4f31      	ldr	r7, [pc, #196]	; (1e7d4 <mbedtls_hardware_poll+0xdc>)
   1e710:	460e      	mov	r6, r1
   1e712:	6838      	ldr	r0, [r7, #0]
   1e714:	f04f 31ff 	mov.w	r1, #4294967295
   1e718:	f7ff fc9c 	bl	1e054 <CC_PalMutexLock>
   1e71c:	2800      	cmp	r0, #0
   1e71e:	d14b      	bne.n	1e7b8 <mbedtls_hardware_poll+0xc0>
   1e720:	2000      	movs	r0, #0
   1e722:	f7ff fcc7 	bl	1e0b4 <CC_PalPowerSaveModeSelect>
   1e726:	2800      	cmp	r0, #0
   1e728:	d142      	bne.n	1e7b0 <mbedtls_hardware_poll+0xb8>
   1e72a:	482b      	ldr	r0, [pc, #172]	; (1e7d8 <mbedtls_hardware_poll+0xe0>)
   1e72c:	f000 fd34 	bl	1f198 <RNG_PLAT_SetUserRngParameters>
   1e730:	b1d8      	cbz	r0, 1e76a <mbedtls_hardware_poll+0x72>
   1e732:	2001      	movs	r0, #1
   1e734:	f04f 36ff 	mov.w	r6, #4294967295
   1e738:	f7ff fcbc 	bl	1e0b4 <CC_PalPowerSaveModeSelect>
   1e73c:	2800      	cmp	r0, #0
   1e73e:	d133      	bne.n	1e7a8 <mbedtls_hardware_poll+0xb0>
   1e740:	4826      	ldr	r0, [pc, #152]	; (1e7dc <mbedtls_hardware_poll+0xe4>)
   1e742:	f44f 7108 	mov.w	r1, #544	; 0x220
   1e746:	f7ff ffcd 	bl	1e6e4 <mbedtls_platform_zeroize>
   1e74a:	4825      	ldr	r0, [pc, #148]	; (1e7e0 <mbedtls_hardware_poll+0xe8>)
   1e74c:	2104      	movs	r1, #4
   1e74e:	f7ff ffc9 	bl	1e6e4 <mbedtls_platform_zeroize>
   1e752:	4821      	ldr	r0, [pc, #132]	; (1e7d8 <mbedtls_hardware_poll+0xe0>)
   1e754:	2128      	movs	r1, #40	; 0x28
   1e756:	f7ff ffc5 	bl	1e6e4 <mbedtls_platform_zeroize>
   1e75a:	6838      	ldr	r0, [r7, #0]
   1e75c:	f7ff fc82 	bl	1e064 <CC_PalMutexUnlock>
   1e760:	2800      	cmp	r0, #0
   1e762:	d12d      	bne.n	1e7c0 <mbedtls_hardware_poll+0xc8>
   1e764:	4630      	mov	r0, r6
   1e766:	b009      	add	sp, #36	; 0x24
   1e768:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e76a:	491c      	ldr	r1, [pc, #112]	; (1e7dc <mbedtls_hardware_poll+0xe4>)
   1e76c:	9003      	str	r0, [sp, #12]
   1e76e:	ab07      	add	r3, sp, #28
   1e770:	4602      	mov	r2, r0
   1e772:	9102      	str	r1, [sp, #8]
   1e774:	9300      	str	r3, [sp, #0]
   1e776:	4918      	ldr	r1, [pc, #96]	; (1e7d8 <mbedtls_hardware_poll+0xe0>)
   1e778:	4819      	ldr	r0, [pc, #100]	; (1e7e0 <mbedtls_hardware_poll+0xe8>)
   1e77a:	9401      	str	r4, [sp, #4]
   1e77c:	ab05      	add	r3, sp, #20
   1e77e:	f7ff ff97 	bl	1e6b0 <LLF_RND_GetTrngSource>
   1e782:	4603      	mov	r3, r0
   1e784:	2800      	cmp	r0, #0
   1e786:	d1d4      	bne.n	1e732 <mbedtls_hardware_poll+0x3a>
   1e788:	6822      	ldr	r2, [r4, #0]
   1e78a:	42aa      	cmp	r2, r5
   1e78c:	d3d1      	bcc.n	1e732 <mbedtls_hardware_poll+0x3a>
   1e78e:	9907      	ldr	r1, [sp, #28]
   1e790:	4630      	mov	r0, r6
   1e792:	3108      	adds	r1, #8
   1e794:	462a      	mov	r2, r5
   1e796:	461e      	mov	r6, r3
   1e798:	f000 fd3a 	bl	1f210 <CC_PalMemCopyPlat>
   1e79c:	6025      	str	r5, [r4, #0]
   1e79e:	2001      	movs	r0, #1
   1e7a0:	f7ff fc88 	bl	1e0b4 <CC_PalPowerSaveModeSelect>
   1e7a4:	2800      	cmp	r0, #0
   1e7a6:	d0cb      	beq.n	1e740 <mbedtls_hardware_poll+0x48>
   1e7a8:	480e      	ldr	r0, [pc, #56]	; (1e7e4 <mbedtls_hardware_poll+0xec>)
   1e7aa:	f7ff f8bd 	bl	1d928 <CC_PalAbort>
   1e7ae:	e7c7      	b.n	1e740 <mbedtls_hardware_poll+0x48>
   1e7b0:	480d      	ldr	r0, [pc, #52]	; (1e7e8 <mbedtls_hardware_poll+0xf0>)
   1e7b2:	f7ff f8b9 	bl	1d928 <CC_PalAbort>
   1e7b6:	e7b8      	b.n	1e72a <mbedtls_hardware_poll+0x32>
   1e7b8:	480c      	ldr	r0, [pc, #48]	; (1e7ec <mbedtls_hardware_poll+0xf4>)
   1e7ba:	f7ff f8b5 	bl	1d928 <CC_PalAbort>
   1e7be:	e7af      	b.n	1e720 <mbedtls_hardware_poll+0x28>
   1e7c0:	480b      	ldr	r0, [pc, #44]	; (1e7f0 <mbedtls_hardware_poll+0xf8>)
   1e7c2:	f7ff f8b1 	bl	1d928 <CC_PalAbort>
   1e7c6:	4630      	mov	r0, r6
   1e7c8:	b009      	add	sp, #36	; 0x24
   1e7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e7cc:	f04f 36ff 	mov.w	r6, #4294967295
   1e7d0:	e7c8      	b.n	1e764 <mbedtls_hardware_poll+0x6c>
   1e7d2:	bf00      	nop
   1e7d4:	20000624 	.word	0x20000624
   1e7d8:	20002c08 	.word	0x20002c08
   1e7dc:	200029e8 	.word	0x200029e8
   1e7e0:	200029e4 	.word	0x200029e4
   1e7e4:	00025c58 	.word	0x00025c58
   1e7e8:	00025c38 	.word	0x00025c38
   1e7ec:	00025c20 	.word	0x00025c20
   1e7f0:	00025cb0 	.word	0x00025cb0

0001e7f4 <cc_mbedtls_sha256_init>:
   1e7f4:	b510      	push	{r4, lr}
   1e7f6:	4604      	mov	r4, r0
   1e7f8:	b128      	cbz	r0, 1e806 <cc_mbedtls_sha256_init+0x12>
   1e7fa:	4620      	mov	r0, r4
   1e7fc:	21f0      	movs	r1, #240	; 0xf0
   1e7fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e802:	f000 bd09 	b.w	1f218 <CC_PalMemSetZeroPlat>
   1e806:	4804      	ldr	r0, [pc, #16]	; (1e818 <cc_mbedtls_sha256_init+0x24>)
   1e808:	f7ff f88e 	bl	1d928 <CC_PalAbort>
   1e80c:	4620      	mov	r0, r4
   1e80e:	21f0      	movs	r1, #240	; 0xf0
   1e810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e814:	f000 bd00 	b.w	1f218 <CC_PalMemSetZeroPlat>
   1e818:	00025cc8 	.word	0x00025cc8

0001e81c <cc_mbedtls_sha256_free>:
   1e81c:	b110      	cbz	r0, 1e824 <cc_mbedtls_sha256_free+0x8>
   1e81e:	21f0      	movs	r1, #240	; 0xf0
   1e820:	f7ff bf60 	b.w	1e6e4 <mbedtls_platform_zeroize>
   1e824:	4770      	bx	lr
   1e826:	bf00      	nop

0001e828 <cc_mbedtls_sha256_starts_ret>:
   1e828:	b508      	push	{r3, lr}
   1e82a:	b161      	cbz	r1, 1e846 <cc_mbedtls_sha256_starts_ret+0x1e>
   1e82c:	2901      	cmp	r1, #1
   1e82e:	d107      	bne.n	1e840 <cc_mbedtls_sha256_starts_ret+0x18>
   1e830:	2102      	movs	r1, #2
   1e832:	f000 f839 	bl	1e8a8 <mbedtls_sha_starts_internal>
   1e836:	2800      	cmp	r0, #0
   1e838:	bf18      	it	ne
   1e83a:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1e83e:	bd08      	pop	{r3, pc}
   1e840:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1e844:	bd08      	pop	{r3, pc}
   1e846:	2101      	movs	r1, #1
   1e848:	f000 f82e 	bl	1e8a8 <mbedtls_sha_starts_internal>
   1e84c:	e7f3      	b.n	1e836 <cc_mbedtls_sha256_starts_ret+0xe>
   1e84e:	bf00      	nop

0001e850 <cc_mbedtls_sha256_update_ret>:
   1e850:	b508      	push	{r3, lr}
   1e852:	f000 f86b 	bl	1e92c <mbedtls_sha_update_internal>
   1e856:	2800      	cmp	r0, #0
   1e858:	bf18      	it	ne
   1e85a:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   1e85e:	bd08      	pop	{r3, pc}

0001e860 <cc_mbedtls_sha256_finish_ret>:
   1e860:	b570      	push	{r4, r5, r6, lr}
   1e862:	b1e8      	cbz	r0, 1e8a0 <cc_mbedtls_sha256_finish_ret+0x40>
   1e864:	460e      	mov	r6, r1
   1e866:	b1d9      	cbz	r1, 1e8a0 <cc_mbedtls_sha256_finish_ret+0x40>
   1e868:	4604      	mov	r4, r0
   1e86a:	f000 f831 	bl	1e8d0 <mbedtls_sha_finish_internal>
   1e86e:	4605      	mov	r5, r0
   1e870:	b9b0      	cbnz	r0, 1e8a0 <cc_mbedtls_sha256_finish_ret+0x40>
   1e872:	6823      	ldr	r3, [r4, #0]
   1e874:	2b01      	cmp	r3, #1
   1e876:	d00b      	beq.n	1e890 <cc_mbedtls_sha256_finish_ret+0x30>
   1e878:	2b02      	cmp	r3, #2
   1e87a:	d001      	beq.n	1e880 <cc_mbedtls_sha256_finish_ret+0x20>
   1e87c:	4628      	mov	r0, r5
   1e87e:	bd70      	pop	{r4, r5, r6, pc}
   1e880:	f104 0108 	add.w	r1, r4, #8
   1e884:	4630      	mov	r0, r6
   1e886:	221c      	movs	r2, #28
   1e888:	f000 fcc2 	bl	1f210 <CC_PalMemCopyPlat>
   1e88c:	4628      	mov	r0, r5
   1e88e:	bd70      	pop	{r4, r5, r6, pc}
   1e890:	f104 0108 	add.w	r1, r4, #8
   1e894:	4630      	mov	r0, r6
   1e896:	2220      	movs	r2, #32
   1e898:	f000 fcba 	bl	1f210 <CC_PalMemCopyPlat>
   1e89c:	4628      	mov	r0, r5
   1e89e:	bd70      	pop	{r4, r5, r6, pc}
   1e8a0:	f06f 0536 	mvn.w	r5, #54	; 0x36
   1e8a4:	e7ea      	b.n	1e87c <cc_mbedtls_sha256_finish_ret+0x1c>
   1e8a6:	bf00      	nop

0001e8a8 <mbedtls_sha_starts_internal>:
   1e8a8:	b178      	cbz	r0, 1e8ca <mbedtls_sha_starts_internal+0x22>
   1e8aa:	b538      	push	{r3, r4, r5, lr}
   1e8ac:	4604      	mov	r4, r0
   1e8ae:	460d      	mov	r5, r1
   1e8b0:	21f0      	movs	r1, #240	; 0xf0
   1e8b2:	f000 fcb1 	bl	1f218 <CC_PalMemSetZeroPlat>
   1e8b6:	2340      	movs	r3, #64	; 0x40
   1e8b8:	6025      	str	r5, [r4, #0]
   1e8ba:	65e3      	str	r3, [r4, #92]	; 0x5c
   1e8bc:	4620      	mov	r0, r4
   1e8be:	f000 fd83 	bl	1f3c8 <InitHashDrv>
   1e8c2:	3800      	subs	r0, #0
   1e8c4:	bf18      	it	ne
   1e8c6:	2001      	movne	r0, #1
   1e8c8:	bd38      	pop	{r3, r4, r5, pc}
   1e8ca:	2001      	movs	r0, #1
   1e8cc:	4770      	bx	lr
   1e8ce:	bf00      	nop

0001e8d0 <mbedtls_sha_finish_internal>:
   1e8d0:	b570      	push	{r4, r5, r6, lr}
   1e8d2:	6e05      	ldr	r5, [r0, #96]	; 0x60
   1e8d4:	b0a4      	sub	sp, #144	; 0x90
   1e8d6:	4604      	mov	r4, r0
   1e8d8:	ae04      	add	r6, sp, #16
   1e8da:	b9e5      	cbnz	r5, 1e916 <mbedtls_sha_finish_internal+0x46>
   1e8dc:	2201      	movs	r2, #1
   1e8de:	2300      	movs	r3, #0
   1e8e0:	6062      	str	r2, [r4, #4]
   1e8e2:	4630      	mov	r0, r6
   1e8e4:	e9cd 3300 	strd	r3, r3, [sp]
   1e8e8:	aa02      	add	r2, sp, #8
   1e8ea:	4629      	mov	r1, r5
   1e8ec:	f000 fd38 	bl	1f360 <SetDataBuffersInfo>
   1e8f0:	b110      	cbz	r0, 1e8f8 <mbedtls_sha_finish_internal+0x28>
   1e8f2:	2001      	movs	r0, #1
   1e8f4:	b024      	add	sp, #144	; 0x90
   1e8f6:	bd70      	pop	{r4, r5, r6, pc}
   1e8f8:	462a      	mov	r2, r5
   1e8fa:	a902      	add	r1, sp, #8
   1e8fc:	4620      	mov	r0, r4
   1e8fe:	f000 fd8d 	bl	1f41c <ProcessHashDrv>
   1e902:	2800      	cmp	r0, #0
   1e904:	d1f5      	bne.n	1e8f2 <mbedtls_sha_finish_internal+0x22>
   1e906:	4620      	mov	r0, r4
   1e908:	f000 feb6 	bl	1f678 <FinishHashDrv>
   1e90c:	2800      	cmp	r0, #0
   1e90e:	d1f0      	bne.n	1e8f2 <mbedtls_sha_finish_internal+0x22>
   1e910:	6620      	str	r0, [r4, #96]	; 0x60
   1e912:	b024      	add	sp, #144	; 0x90
   1e914:	bd70      	pop	{r4, r5, r6, pc}
   1e916:	2d80      	cmp	r5, #128	; 0x80
   1e918:	462a      	mov	r2, r5
   1e91a:	4630      	mov	r0, r6
   1e91c:	bf28      	it	cs
   1e91e:	2280      	movcs	r2, #128	; 0x80
   1e920:	f104 0164 	add.w	r1, r4, #100	; 0x64
   1e924:	f000 fc74 	bl	1f210 <CC_PalMemCopyPlat>
   1e928:	6e25      	ldr	r5, [r4, #96]	; 0x60
   1e92a:	e7d7      	b.n	1e8dc <mbedtls_sha_finish_internal+0xc>

0001e92c <mbedtls_sha_update_internal>:
   1e92c:	2800      	cmp	r0, #0
   1e92e:	d054      	beq.n	1e9da <mbedtls_sha_update_internal+0xae>
   1e930:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e932:	4614      	mov	r4, r2
   1e934:	b0a5      	sub	sp, #148	; 0x94
   1e936:	b1b2      	cbz	r2, 1e966 <mbedtls_sha_update_internal+0x3a>
   1e938:	460e      	mov	r6, r1
   1e93a:	b351      	cbz	r1, 1e992 <mbedtls_sha_update_internal+0x66>
   1e93c:	4605      	mov	r5, r0
   1e93e:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   1e942:	1a1a      	subs	r2, r3, r0
   1e944:	fbb2 f7f3 	udiv	r7, r2, r3
   1e948:	fb03 2717 	mls	r7, r3, r7, r2
   1e94c:	42a7      	cmp	r7, r4
   1e94e:	bf28      	it	cs
   1e950:	4627      	movcs	r7, r4
   1e952:	2f00      	cmp	r7, #0
   1e954:	d143      	bne.n	1e9de <mbedtls_sha_update_internal+0xb2>
   1e956:	4283      	cmp	r3, r0
   1e958:	d008      	beq.n	1e96c <mbedtls_sha_update_internal+0x40>
   1e95a:	fbb4 f7f3 	udiv	r7, r4, r3
   1e95e:	fb03 f707 	mul.w	r7, r3, r7
   1e962:	b9cf      	cbnz	r7, 1e998 <mbedtls_sha_update_internal+0x6c>
   1e964:	bb6c      	cbnz	r4, 1e9c2 <mbedtls_sha_update_internal+0x96>
   1e966:	2000      	movs	r0, #0
   1e968:	b025      	add	sp, #148	; 0x94
   1e96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e96c:	2b80      	cmp	r3, #128	; 0x80
   1e96e:	bf28      	it	cs
   1e970:	2380      	movcs	r3, #128	; 0x80
   1e972:	461a      	mov	r2, r3
   1e974:	f105 0164 	add.w	r1, r5, #100	; 0x64
   1e978:	a804      	add	r0, sp, #16
   1e97a:	f000 fc49 	bl	1f210 <CC_PalMemCopyPlat>
   1e97e:	2300      	movs	r3, #0
   1e980:	e9cd 3300 	strd	r3, r3, [sp]
   1e984:	a804      	add	r0, sp, #16
   1e986:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   1e988:	aa02      	add	r2, sp, #8
   1e98a:	f000 fce9 	bl	1f360 <SetDataBuffersInfo>
   1e98e:	2800      	cmp	r0, #0
   1e990:	d032      	beq.n	1e9f8 <mbedtls_sha_update_internal+0xcc>
   1e992:	2001      	movs	r0, #1
   1e994:	b025      	add	sp, #148	; 0x94
   1e996:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e998:	2300      	movs	r3, #0
   1e99a:	e9cd 3300 	strd	r3, r3, [sp]
   1e99e:	aa02      	add	r2, sp, #8
   1e9a0:	4639      	mov	r1, r7
   1e9a2:	4630      	mov	r0, r6
   1e9a4:	f000 fcdc 	bl	1f360 <SetDataBuffersInfo>
   1e9a8:	2800      	cmp	r0, #0
   1e9aa:	d1f2      	bne.n	1e992 <mbedtls_sha_update_internal+0x66>
   1e9ac:	a902      	add	r1, sp, #8
   1e9ae:	463a      	mov	r2, r7
   1e9b0:	4628      	mov	r0, r5
   1e9b2:	f000 fd33 	bl	1f41c <ProcessHashDrv>
   1e9b6:	2800      	cmp	r0, #0
   1e9b8:	d1eb      	bne.n	1e992 <mbedtls_sha_update_internal+0x66>
   1e9ba:	1be4      	subs	r4, r4, r7
   1e9bc:	443e      	add	r6, r7
   1e9be:	2c00      	cmp	r4, #0
   1e9c0:	d0d1      	beq.n	1e966 <mbedtls_sha_update_internal+0x3a>
   1e9c2:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1e9c4:	3019      	adds	r0, #25
   1e9c6:	4622      	mov	r2, r4
   1e9c8:	4631      	mov	r1, r6
   1e9ca:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1e9ce:	f000 fc1f 	bl	1f210 <CC_PalMemCopyPlat>
   1e9d2:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   1e9d4:	4422      	add	r2, r4
   1e9d6:	662a      	str	r2, [r5, #96]	; 0x60
   1e9d8:	e7c5      	b.n	1e966 <mbedtls_sha_update_internal+0x3a>
   1e9da:	2001      	movs	r0, #1
   1e9dc:	4770      	bx	lr
   1e9de:	f105 0364 	add.w	r3, r5, #100	; 0x64
   1e9e2:	4418      	add	r0, r3
   1e9e4:	463a      	mov	r2, r7
   1e9e6:	f000 fc13 	bl	1f210 <CC_PalMemCopyPlat>
   1e9ea:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
   1e9ee:	4438      	add	r0, r7
   1e9f0:	443e      	add	r6, r7
   1e9f2:	1be4      	subs	r4, r4, r7
   1e9f4:	6628      	str	r0, [r5, #96]	; 0x60
   1e9f6:	e7ae      	b.n	1e956 <mbedtls_sha_update_internal+0x2a>
   1e9f8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   1e9fa:	a902      	add	r1, sp, #8
   1e9fc:	4628      	mov	r0, r5
   1e9fe:	f000 fd0d 	bl	1f41c <ProcessHashDrv>
   1ea02:	2800      	cmp	r0, #0
   1ea04:	d1c5      	bne.n	1e992 <mbedtls_sha_update_internal+0x66>
   1ea06:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1ea08:	6628      	str	r0, [r5, #96]	; 0x60
   1ea0a:	e7a6      	b.n	1e95a <mbedtls_sha_update_internal+0x2e>

0001ea0c <block_cipher_df>:
   1ea0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea10:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   1ea14:	b0b1      	sub	sp, #196	; 0xc4
   1ea16:	f200 812e 	bhi.w	1ec76 <block_cipher_df+0x26a>
   1ea1a:	f8df 926c 	ldr.w	r9, [pc, #620]	; 1ec88 <block_cipher_df+0x27c>
   1ea1e:	4614      	mov	r4, r2
   1ea20:	460d      	mov	r5, r1
   1ea22:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1ea26:	2100      	movs	r1, #0
   1ea28:	4682      	mov	sl, r0
   1ea2a:	4648      	mov	r0, r9
   1ea2c:	f003 fa9c 	bl	21f68 <memset>
   1ea30:	a813      	add	r0, sp, #76	; 0x4c
   1ea32:	f000 fe63 	bl	1f6fc <cc_mbedtls_aes_init>
   1ea36:	2600      	movs	r6, #0
   1ea38:	4629      	mov	r1, r5
   1ea3a:	2320      	movs	r3, #32
   1ea3c:	ba65      	rev16	r5, r4
   1ea3e:	4622      	mov	r2, r4
   1ea40:	f109 0018 	add.w	r0, r9, #24
   1ea44:	f8a9 5012 	strh.w	r5, [r9, #18]
   1ea48:	f889 3017 	strb.w	r3, [r9, #23]
   1ea4c:	f8a9 6010 	strh.w	r6, [r9, #16]
   1ea50:	f003 fa7f 	bl	21f52 <memcpy>
   1ea54:	eb09 0304 	add.w	r3, r9, r4
   1ea58:	2280      	movs	r2, #128	; 0x80
   1ea5a:	4d88      	ldr	r5, [pc, #544]	; (1ec7c <block_cipher_df+0x270>)
   1ea5c:	761a      	strb	r2, [r3, #24]
   1ea5e:	4b88      	ldr	r3, [pc, #544]	; (1ec80 <block_cipher_df+0x274>)
   1ea60:	9503      	str	r5, [sp, #12]
   1ea62:	9304      	str	r3, [sp, #16]
   1ea64:	a813      	add	r0, sp, #76	; 0x4c
   1ea66:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
   1ea6a:	a903      	add	r1, sp, #12
   1ea6c:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
   1ea70:	e9cd 5305 	strd	r5, r3, [sp, #20]
   1ea74:	f000 fe58 	bl	1f728 <cc_mbedtls_aes_setkey_enc>
   1ea78:	4680      	mov	r8, r0
   1ea7a:	2800      	cmp	r0, #0
   1ea7c:	f040 80da 	bne.w	1ec34 <block_cipher_df+0x228>
   1ea80:	f104 0319 	add.w	r3, r4, #25
   1ea84:	9301      	str	r3, [sp, #4]
   1ea86:	af07      	add	r7, sp, #28
   1ea88:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1ea8c:	2210      	movs	r2, #16
   1ea8e:	2100      	movs	r1, #0
   1ea90:	4638      	mov	r0, r7
   1ea92:	f003 fa69 	bl	21f68 <memset>
   1ea96:	4c7b      	ldr	r4, [pc, #492]	; (1ec84 <block_cipher_df+0x278>)
   1ea98:	9d01      	ldr	r5, [sp, #4]
   1ea9a:	f89d 601d 	ldrb.w	r6, [sp, #29]
   1ea9e:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   1eaa2:	f89d e01c 	ldrb.w	lr, [sp, #28]
   1eaa6:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   1eaaa:	f89d c01f 	ldrb.w	ip, [sp, #31]
   1eaae:	f89d 001e 	ldrb.w	r0, [sp, #30]
   1eab2:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   1eab6:	404e      	eors	r6, r1
   1eab8:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
   1eabc:	f88d 601d 	strb.w	r6, [sp, #29]
   1eac0:	ea8e 0303 	eor.w	r3, lr, r3
   1eac4:	4050      	eors	r0, r2
   1eac6:	ea8c 0101 	eor.w	r1, ip, r1
   1eaca:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1eace:	f88d 301c 	strb.w	r3, [sp, #28]
   1ead2:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
   1ead6:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   1eada:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
   1eade:	f88d 001e 	strb.w	r0, [sp, #30]
   1eae2:	f88d 101f 	strb.w	r1, [sp, #31]
   1eae6:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   1eaea:	f814 1c09 	ldrb.w	r1, [r4, #-9]
   1eaee:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
   1eaf2:	405a      	eors	r2, r3
   1eaf4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1eaf8:	f88d 2020 	strb.w	r2, [sp, #32]
   1eafc:	ea8c 0606 	eor.w	r6, ip, r6
   1eb00:	4048      	eors	r0, r1
   1eb02:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   1eb06:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1eb0a:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
   1eb0e:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
   1eb12:	ea8e 0303 	eor.w	r3, lr, r3
   1eb16:	f814 6c06 	ldrb.w	r6, [r4, #-6]
   1eb1a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   1eb1e:	ea8c 0101 	eor.w	r1, ip, r1
   1eb22:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1eb26:	f814 cc07 	ldrb.w	ip, [r4, #-7]
   1eb2a:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   1eb2e:	ea82 020c 	eor.w	r2, r2, ip
   1eb32:	4073      	eors	r3, r6
   1eb34:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   1eb38:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   1eb3c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   1eb40:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
   1eb44:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
   1eb48:	f814 2c05 	ldrb.w	r2, [r4, #-5]
   1eb4c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   1eb50:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1eb54:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1eb58:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   1eb5c:	ea8e 0202 	eor.w	r2, lr, r2
   1eb60:	4041      	eors	r1, r0
   1eb62:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   1eb66:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   1eb6a:	4073      	eors	r3, r6
   1eb6c:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   1eb70:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
   1eb74:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1eb78:	ea8c 0000 	eor.w	r0, ip, r0
   1eb7c:	4056      	eors	r6, r2
   1eb7e:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
   1eb82:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
   1eb86:	463b      	mov	r3, r7
   1eb88:	463a      	mov	r2, r7
   1eb8a:	2101      	movs	r1, #1
   1eb8c:	a813      	add	r0, sp, #76	; 0x4c
   1eb8e:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
   1eb92:	f000 fde3 	bl	1f75c <cc_mbedtls_aes_crypt_ecb>
   1eb96:	2d10      	cmp	r5, #16
   1eb98:	bf94      	ite	ls
   1eb9a:	1b6d      	subls	r5, r5, r5
   1eb9c:	3d10      	subhi	r5, #16
   1eb9e:	2800      	cmp	r0, #0
   1eba0:	d167      	bne.n	1ec72 <block_cipher_df+0x266>
   1eba2:	3410      	adds	r4, #16
   1eba4:	2d00      	cmp	r5, #0
   1eba6:	f47f af78 	bne.w	1ea9a <block_cipher_df+0x8e>
   1ebaa:	eb0b 0008 	add.w	r0, fp, r8
   1ebae:	2210      	movs	r2, #16
   1ebb0:	4639      	mov	r1, r7
   1ebb2:	f003 f9ce 	bl	21f52 <memcpy>
   1ebb6:	f899 3003 	ldrb.w	r3, [r9, #3]
   1ebba:	f108 0810 	add.w	r8, r8, #16
   1ebbe:	3301      	adds	r3, #1
   1ebc0:	f1b8 0f20 	cmp.w	r8, #32
   1ebc4:	f889 3003 	strb.w	r3, [r9, #3]
   1ebc8:	f47f af60 	bne.w	1ea8c <block_cipher_df+0x80>
   1ebcc:	2280      	movs	r2, #128	; 0x80
   1ebce:	4659      	mov	r1, fp
   1ebd0:	a813      	add	r0, sp, #76	; 0x4c
   1ebd2:	f000 fda9 	bl	1f728 <cc_mbedtls_aes_setkey_enc>
   1ebd6:	4680      	mov	r8, r0
   1ebd8:	bb78      	cbnz	r0, 1ec3a <block_cipher_df+0x22e>
   1ebda:	f10a 0520 	add.w	r5, sl, #32
   1ebde:	4654      	mov	r4, sl
   1ebe0:	ab0f      	add	r3, sp, #60	; 0x3c
   1ebe2:	461a      	mov	r2, r3
   1ebe4:	2101      	movs	r1, #1
   1ebe6:	a813      	add	r0, sp, #76	; 0x4c
   1ebe8:	f000 fdb8 	bl	1f75c <cc_mbedtls_aes_crypt_ecb>
   1ebec:	2210      	movs	r2, #16
   1ebee:	4680      	mov	r8, r0
   1ebf0:	a90f      	add	r1, sp, #60	; 0x3c
   1ebf2:	4620      	mov	r0, r4
   1ebf4:	4414      	add	r4, r2
   1ebf6:	f1b8 0f00 	cmp.w	r8, #0
   1ebfa:	d11e      	bne.n	1ec3a <block_cipher_df+0x22e>
   1ebfc:	f003 f9a9 	bl	21f52 <memcpy>
   1ec00:	42ac      	cmp	r4, r5
   1ec02:	d1ed      	bne.n	1ebe0 <block_cipher_df+0x1d4>
   1ec04:	a813      	add	r0, sp, #76	; 0x4c
   1ec06:	f000 fd89 	bl	1f71c <cc_mbedtls_aes_free>
   1ec0a:	481f      	ldr	r0, [pc, #124]	; (1ec88 <block_cipher_df+0x27c>)
   1ec0c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1ec10:	f7ff fd68 	bl	1e6e4 <mbedtls_platform_zeroize>
   1ec14:	4658      	mov	r0, fp
   1ec16:	2120      	movs	r1, #32
   1ec18:	f7ff fd64 	bl	1e6e4 <mbedtls_platform_zeroize>
   1ec1c:	a803      	add	r0, sp, #12
   1ec1e:	2110      	movs	r1, #16
   1ec20:	f7ff fd60 	bl	1e6e4 <mbedtls_platform_zeroize>
   1ec24:	4638      	mov	r0, r7
   1ec26:	2110      	movs	r1, #16
   1ec28:	f7ff fd5c 	bl	1e6e4 <mbedtls_platform_zeroize>
   1ec2c:	4640      	mov	r0, r8
   1ec2e:	b031      	add	sp, #196	; 0xc4
   1ec30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec34:	af07      	add	r7, sp, #28
   1ec36:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   1ec3a:	a813      	add	r0, sp, #76	; 0x4c
   1ec3c:	f000 fd6e 	bl	1f71c <cc_mbedtls_aes_free>
   1ec40:	4811      	ldr	r0, [pc, #68]	; (1ec88 <block_cipher_df+0x27c>)
   1ec42:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1ec46:	f7ff fd4d 	bl	1e6e4 <mbedtls_platform_zeroize>
   1ec4a:	4658      	mov	r0, fp
   1ec4c:	2120      	movs	r1, #32
   1ec4e:	f7ff fd49 	bl	1e6e4 <mbedtls_platform_zeroize>
   1ec52:	a803      	add	r0, sp, #12
   1ec54:	2110      	movs	r1, #16
   1ec56:	f7ff fd45 	bl	1e6e4 <mbedtls_platform_zeroize>
   1ec5a:	4638      	mov	r0, r7
   1ec5c:	2110      	movs	r1, #16
   1ec5e:	f7ff fd41 	bl	1e6e4 <mbedtls_platform_zeroize>
   1ec62:	4650      	mov	r0, sl
   1ec64:	2120      	movs	r1, #32
   1ec66:	f7ff fd3d 	bl	1e6e4 <mbedtls_platform_zeroize>
   1ec6a:	4640      	mov	r0, r8
   1ec6c:	b031      	add	sp, #196	; 0xc4
   1ec6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec72:	4680      	mov	r8, r0
   1ec74:	e7e1      	b.n	1ec3a <block_cipher_df+0x22e>
   1ec76:	f06f 0837 	mvn.w	r8, #55	; 0x37
   1ec7a:	e7f6      	b.n	1ec6a <block_cipher_df+0x25e>
   1ec7c:	03020100 	.word	0x03020100
   1ec80:	07060504 	.word	0x07060504
   1ec84:	20002c40 	.word	0x20002c40
   1ec88:	20002c30 	.word	0x20002c30

0001ec8c <ctr_drbg_update_internal>:
   1ec8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ec90:	b088      	sub	sp, #32
   1ec92:	4604      	mov	r4, r0
   1ec94:	2220      	movs	r2, #32
   1ec96:	460d      	mov	r5, r1
   1ec98:	4668      	mov	r0, sp
   1ec9a:	2100      	movs	r1, #0
   1ec9c:	eb04 0802 	add.w	r8, r4, r2
   1eca0:	f003 f962 	bl	21f68 <memset>
   1eca4:	466e      	mov	r6, sp
   1eca6:	7be2      	ldrb	r2, [r4, #15]
   1eca8:	3201      	adds	r2, #1
   1ecaa:	b2d2      	uxtb	r2, r2
   1ecac:	73e2      	strb	r2, [r4, #15]
   1ecae:	2a00      	cmp	r2, #0
   1ecb0:	d14d      	bne.n	1ed4e <ctr_drbg_update_internal+0xc2>
   1ecb2:	7ba2      	ldrb	r2, [r4, #14]
   1ecb4:	3201      	adds	r2, #1
   1ecb6:	b2d2      	uxtb	r2, r2
   1ecb8:	73a2      	strb	r2, [r4, #14]
   1ecba:	2a00      	cmp	r2, #0
   1ecbc:	d147      	bne.n	1ed4e <ctr_drbg_update_internal+0xc2>
   1ecbe:	7b63      	ldrb	r3, [r4, #13]
   1ecc0:	3301      	adds	r3, #1
   1ecc2:	b2db      	uxtb	r3, r3
   1ecc4:	7363      	strb	r3, [r4, #13]
   1ecc6:	2b00      	cmp	r3, #0
   1ecc8:	d141      	bne.n	1ed4e <ctr_drbg_update_internal+0xc2>
   1ecca:	7b23      	ldrb	r3, [r4, #12]
   1eccc:	3301      	adds	r3, #1
   1ecce:	b2db      	uxtb	r3, r3
   1ecd0:	7323      	strb	r3, [r4, #12]
   1ecd2:	2b00      	cmp	r3, #0
   1ecd4:	d13b      	bne.n	1ed4e <ctr_drbg_update_internal+0xc2>
   1ecd6:	7ae3      	ldrb	r3, [r4, #11]
   1ecd8:	3301      	adds	r3, #1
   1ecda:	b2db      	uxtb	r3, r3
   1ecdc:	72e3      	strb	r3, [r4, #11]
   1ecde:	2b00      	cmp	r3, #0
   1ece0:	d135      	bne.n	1ed4e <ctr_drbg_update_internal+0xc2>
   1ece2:	7aa3      	ldrb	r3, [r4, #10]
   1ece4:	3301      	adds	r3, #1
   1ece6:	b2db      	uxtb	r3, r3
   1ece8:	72a3      	strb	r3, [r4, #10]
   1ecea:	2b00      	cmp	r3, #0
   1ecec:	d12f      	bne.n	1ed4e <ctr_drbg_update_internal+0xc2>
   1ecee:	7a63      	ldrb	r3, [r4, #9]
   1ecf0:	3301      	adds	r3, #1
   1ecf2:	b2db      	uxtb	r3, r3
   1ecf4:	7263      	strb	r3, [r4, #9]
   1ecf6:	bb53      	cbnz	r3, 1ed4e <ctr_drbg_update_internal+0xc2>
   1ecf8:	7a23      	ldrb	r3, [r4, #8]
   1ecfa:	3301      	adds	r3, #1
   1ecfc:	b2db      	uxtb	r3, r3
   1ecfe:	7223      	strb	r3, [r4, #8]
   1ed00:	bb2b      	cbnz	r3, 1ed4e <ctr_drbg_update_internal+0xc2>
   1ed02:	79e3      	ldrb	r3, [r4, #7]
   1ed04:	3301      	adds	r3, #1
   1ed06:	b2db      	uxtb	r3, r3
   1ed08:	71e3      	strb	r3, [r4, #7]
   1ed0a:	bb03      	cbnz	r3, 1ed4e <ctr_drbg_update_internal+0xc2>
   1ed0c:	79a3      	ldrb	r3, [r4, #6]
   1ed0e:	3301      	adds	r3, #1
   1ed10:	b2db      	uxtb	r3, r3
   1ed12:	71a3      	strb	r3, [r4, #6]
   1ed14:	b9db      	cbnz	r3, 1ed4e <ctr_drbg_update_internal+0xc2>
   1ed16:	7963      	ldrb	r3, [r4, #5]
   1ed18:	3301      	adds	r3, #1
   1ed1a:	b2db      	uxtb	r3, r3
   1ed1c:	7163      	strb	r3, [r4, #5]
   1ed1e:	b9b3      	cbnz	r3, 1ed4e <ctr_drbg_update_internal+0xc2>
   1ed20:	7923      	ldrb	r3, [r4, #4]
   1ed22:	3301      	adds	r3, #1
   1ed24:	b2db      	uxtb	r3, r3
   1ed26:	7123      	strb	r3, [r4, #4]
   1ed28:	b98b      	cbnz	r3, 1ed4e <ctr_drbg_update_internal+0xc2>
   1ed2a:	78e3      	ldrb	r3, [r4, #3]
   1ed2c:	3301      	adds	r3, #1
   1ed2e:	b2db      	uxtb	r3, r3
   1ed30:	70e3      	strb	r3, [r4, #3]
   1ed32:	b963      	cbnz	r3, 1ed4e <ctr_drbg_update_internal+0xc2>
   1ed34:	78a3      	ldrb	r3, [r4, #2]
   1ed36:	3301      	adds	r3, #1
   1ed38:	b2db      	uxtb	r3, r3
   1ed3a:	70a3      	strb	r3, [r4, #2]
   1ed3c:	b93b      	cbnz	r3, 1ed4e <ctr_drbg_update_internal+0xc2>
   1ed3e:	7863      	ldrb	r3, [r4, #1]
   1ed40:	3301      	adds	r3, #1
   1ed42:	b2db      	uxtb	r3, r3
   1ed44:	7063      	strb	r3, [r4, #1]
   1ed46:	b913      	cbnz	r3, 1ed4e <ctr_drbg_update_internal+0xc2>
   1ed48:	7823      	ldrb	r3, [r4, #0]
   1ed4a:	3301      	adds	r3, #1
   1ed4c:	7023      	strb	r3, [r4, #0]
   1ed4e:	4633      	mov	r3, r6
   1ed50:	4622      	mov	r2, r4
   1ed52:	2101      	movs	r1, #1
   1ed54:	4640      	mov	r0, r8
   1ed56:	f000 fd01 	bl	1f75c <cc_mbedtls_aes_crypt_ecb>
   1ed5a:	4607      	mov	r7, r0
   1ed5c:	2800      	cmp	r0, #0
   1ed5e:	d12b      	bne.n	1edb8 <ctr_drbg_update_internal+0x12c>
   1ed60:	3610      	adds	r6, #16
   1ed62:	ab08      	add	r3, sp, #32
   1ed64:	429e      	cmp	r6, r3
   1ed66:	d19e      	bne.n	1eca6 <ctr_drbg_update_internal+0x1a>
   1ed68:	9e01      	ldr	r6, [sp, #4]
   1ed6a:	686a      	ldr	r2, [r5, #4]
   1ed6c:	9f00      	ldr	r7, [sp, #0]
   1ed6e:	6829      	ldr	r1, [r5, #0]
   1ed70:	68ab      	ldr	r3, [r5, #8]
   1ed72:	4072      	eors	r2, r6
   1ed74:	9e02      	ldr	r6, [sp, #8]
   1ed76:	9201      	str	r2, [sp, #4]
   1ed78:	4079      	eors	r1, r7
   1ed7a:	4073      	eors	r3, r6
   1ed7c:	9100      	str	r1, [sp, #0]
   1ed7e:	9e03      	ldr	r6, [sp, #12]
   1ed80:	68e9      	ldr	r1, [r5, #12]
   1ed82:	692a      	ldr	r2, [r5, #16]
   1ed84:	9302      	str	r3, [sp, #8]
   1ed86:	4071      	eors	r1, r6
   1ed88:	9e04      	ldr	r6, [sp, #16]
   1ed8a:	696b      	ldr	r3, [r5, #20]
   1ed8c:	9103      	str	r1, [sp, #12]
   1ed8e:	4056      	eors	r6, r2
   1ed90:	9a05      	ldr	r2, [sp, #20]
   1ed92:	9604      	str	r6, [sp, #16]
   1ed94:	ea83 0102 	eor.w	r1, r3, r2
   1ed98:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   1ed9c:	9d06      	ldr	r5, [sp, #24]
   1ed9e:	9105      	str	r1, [sp, #20]
   1eda0:	4055      	eors	r5, r2
   1eda2:	9a07      	ldr	r2, [sp, #28]
   1eda4:	4640      	mov	r0, r8
   1eda6:	4053      	eors	r3, r2
   1eda8:	4669      	mov	r1, sp
   1edaa:	2280      	movs	r2, #128	; 0x80
   1edac:	e9cd 5306 	strd	r5, r3, [sp, #24]
   1edb0:	f000 fcba 	bl	1f728 <cc_mbedtls_aes_setkey_enc>
   1edb4:	4607      	mov	r7, r0
   1edb6:	b138      	cbz	r0, 1edc8 <ctr_drbg_update_internal+0x13c>
   1edb8:	4668      	mov	r0, sp
   1edba:	2120      	movs	r1, #32
   1edbc:	f7ff fc92 	bl	1e6e4 <mbedtls_platform_zeroize>
   1edc0:	4638      	mov	r0, r7
   1edc2:	b008      	add	sp, #32
   1edc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1edc8:	2210      	movs	r2, #16
   1edca:	4620      	mov	r0, r4
   1edcc:	eb0d 0102 	add.w	r1, sp, r2
   1edd0:	f003 f8bf 	bl	21f52 <memcpy>
   1edd4:	e7f0      	b.n	1edb8 <ctr_drbg_update_internal+0x12c>
   1edd6:	bf00      	nop

0001edd8 <mbedtls_ctr_drbg_reseed_internal>:
   1edd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1eddc:	4604      	mov	r4, r0
   1edde:	6980      	ldr	r0, [r0, #24]
   1ede0:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   1ede4:	d851      	bhi.n	1ee8a <mbedtls_ctr_drbg_reseed_internal+0xb2>
   1ede6:	461d      	mov	r5, r3
   1ede8:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   1edec:	42ab      	cmp	r3, r5
   1edee:	d34c      	bcc.n	1ee8a <mbedtls_ctr_drbg_reseed_internal+0xb2>
   1edf0:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   1edf4:	1a18      	subs	r0, r3, r0
   1edf6:	4290      	cmp	r0, r2
   1edf8:	4616      	mov	r6, r2
   1edfa:	d346      	bcc.n	1ee8a <mbedtls_ctr_drbg_reseed_internal+0xb2>
   1edfc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1ee98 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   1ee00:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1ee04:	460f      	mov	r7, r1
   1ee06:	4640      	mov	r0, r8
   1ee08:	2100      	movs	r1, #0
   1ee0a:	f003 f8ad 	bl	21f68 <memset>
   1ee0e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1ee12:	69a2      	ldr	r2, [r4, #24]
   1ee14:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1ee18:	4641      	mov	r1, r8
   1ee1a:	4798      	blx	r3
   1ee1c:	2800      	cmp	r0, #0
   1ee1e:	d137      	bne.n	1ee90 <mbedtls_ctr_drbg_reseed_internal+0xb8>
   1ee20:	f8d4 9018 	ldr.w	r9, [r4, #24]
   1ee24:	b135      	cbz	r5, 1ee34 <mbedtls_ctr_drbg_reseed_internal+0x5c>
   1ee26:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1ee2a:	462a      	mov	r2, r5
   1ee2c:	4641      	mov	r1, r8
   1ee2e:	4798      	blx	r3
   1ee30:	bb70      	cbnz	r0, 1ee90 <mbedtls_ctr_drbg_reseed_internal+0xb8>
   1ee32:	44a9      	add	r9, r5
   1ee34:	b107      	cbz	r7, 1ee38 <mbedtls_ctr_drbg_reseed_internal+0x60>
   1ee36:	b9c6      	cbnz	r6, 1ee6a <mbedtls_ctr_drbg_reseed_internal+0x92>
   1ee38:	4917      	ldr	r1, [pc, #92]	; (1ee98 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1ee3a:	464a      	mov	r2, r9
   1ee3c:	4608      	mov	r0, r1
   1ee3e:	f7ff fde5 	bl	1ea0c <block_cipher_df>
   1ee42:	4605      	mov	r5, r0
   1ee44:	b138      	cbz	r0, 1ee56 <mbedtls_ctr_drbg_reseed_internal+0x7e>
   1ee46:	4814      	ldr	r0, [pc, #80]	; (1ee98 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1ee48:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1ee4c:	f7ff fc4a 	bl	1e6e4 <mbedtls_platform_zeroize>
   1ee50:	4628      	mov	r0, r5
   1ee52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ee56:	4910      	ldr	r1, [pc, #64]	; (1ee98 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1ee58:	4620      	mov	r0, r4
   1ee5a:	f7ff ff17 	bl	1ec8c <ctr_drbg_update_internal>
   1ee5e:	4605      	mov	r5, r0
   1ee60:	2800      	cmp	r0, #0
   1ee62:	d1f0      	bne.n	1ee46 <mbedtls_ctr_drbg_reseed_internal+0x6e>
   1ee64:	2301      	movs	r3, #1
   1ee66:	6123      	str	r3, [r4, #16]
   1ee68:	e7ed      	b.n	1ee46 <mbedtls_ctr_drbg_reseed_internal+0x6e>
   1ee6a:	4639      	mov	r1, r7
   1ee6c:	eb08 0009 	add.w	r0, r8, r9
   1ee70:	4632      	mov	r2, r6
   1ee72:	f003 f86e 	bl	21f52 <memcpy>
   1ee76:	4908      	ldr	r1, [pc, #32]	; (1ee98 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1ee78:	44b1      	add	r9, r6
   1ee7a:	464a      	mov	r2, r9
   1ee7c:	4608      	mov	r0, r1
   1ee7e:	f7ff fdc5 	bl	1ea0c <block_cipher_df>
   1ee82:	4605      	mov	r5, r0
   1ee84:	2800      	cmp	r0, #0
   1ee86:	d1de      	bne.n	1ee46 <mbedtls_ctr_drbg_reseed_internal+0x6e>
   1ee88:	e7e5      	b.n	1ee56 <mbedtls_ctr_drbg_reseed_internal+0x7e>
   1ee8a:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1ee8e:	e7df      	b.n	1ee50 <mbedtls_ctr_drbg_reseed_internal+0x78>
   1ee90:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1ee94:	e7dc      	b.n	1ee50 <mbedtls_ctr_drbg_reseed_internal+0x78>
   1ee96:	bf00      	nop
   1ee98:	20002dd0 	.word	0x20002dd0

0001ee9c <cc_mbedtls_ctr_drbg_init>:
   1ee9c:	b510      	push	{r4, lr}
   1ee9e:	22a4      	movs	r2, #164	; 0xa4
   1eea0:	4604      	mov	r4, r0
   1eea2:	2100      	movs	r1, #0
   1eea4:	f003 f860 	bl	21f68 <memset>
   1eea8:	4b04      	ldr	r3, [pc, #16]	; (1eebc <cc_mbedtls_ctr_drbg_init+0x20>)
   1eeaa:	f04f 32ff 	mov.w	r2, #4294967295
   1eeae:	6122      	str	r2, [r4, #16]
   1eeb0:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1eeb4:	681b      	ldr	r3, [r3, #0]
   1eeb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1eeba:	4718      	bx	r3
   1eebc:	20000628 	.word	0x20000628

0001eec0 <cc_mbedtls_ctr_drbg_seed>:
   1eec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1eec4:	b085      	sub	sp, #20
   1eec6:	4605      	mov	r5, r0
   1eec8:	460f      	mov	r7, r1
   1eeca:	4616      	mov	r6, r2
   1eecc:	4668      	mov	r0, sp
   1eece:	2210      	movs	r2, #16
   1eed0:	2100      	movs	r1, #0
   1eed2:	4699      	mov	r9, r3
   1eed4:	f003 f848 	bl	21f68 <memset>
   1eed8:	4b1f      	ldr	r3, [pc, #124]	; (1ef58 <cc_mbedtls_ctr_drbg_seed+0x98>)
   1eeda:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   1eede:	681b      	ldr	r3, [r3, #0]
   1eee0:	4640      	mov	r0, r8
   1eee2:	4798      	blx	r3
   1eee4:	b120      	cbz	r0, 1eef0 <cc_mbedtls_ctr_drbg_seed+0x30>
   1eee6:	4604      	mov	r4, r0
   1eee8:	4620      	mov	r0, r4
   1eeea:	b005      	add	sp, #20
   1eeec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1eef0:	f105 0420 	add.w	r4, r5, #32
   1eef4:	4620      	mov	r0, r4
   1eef6:	f000 fc01 	bl	1f6fc <cc_mbedtls_aes_init>
   1eefa:	69aa      	ldr	r2, [r5, #24]
   1eefc:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1ef00:	692e      	ldr	r6, [r5, #16]
   1ef02:	b9fa      	cbnz	r2, 1ef44 <cc_mbedtls_ctr_drbg_seed+0x84>
   1ef04:	2220      	movs	r2, #32
   1ef06:	2e00      	cmp	r6, #0
   1ef08:	61aa      	str	r2, [r5, #24]
   1ef0a:	db22      	blt.n	1ef52 <cc_mbedtls_ctr_drbg_seed+0x92>
   1ef0c:	f64f 73f0 	movw	r3, #65520	; 0xfff0
   1ef10:	4620      	mov	r0, r4
   1ef12:	4669      	mov	r1, sp
   1ef14:	61eb      	str	r3, [r5, #28]
   1ef16:	2280      	movs	r2, #128	; 0x80
   1ef18:	f000 fc06 	bl	1f728 <cc_mbedtls_aes_setkey_enc>
   1ef1c:	4604      	mov	r4, r0
   1ef1e:	b930      	cbnz	r0, 1ef2e <cc_mbedtls_ctr_drbg_seed+0x6e>
   1ef20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1ef22:	4633      	mov	r3, r6
   1ef24:	4649      	mov	r1, r9
   1ef26:	4628      	mov	r0, r5
   1ef28:	f7ff ff56 	bl	1edd8 <mbedtls_ctr_drbg_reseed_internal>
   1ef2c:	4604      	mov	r4, r0
   1ef2e:	4b0b      	ldr	r3, [pc, #44]	; (1ef5c <cc_mbedtls_ctr_drbg_seed+0x9c>)
   1ef30:	4640      	mov	r0, r8
   1ef32:	681b      	ldr	r3, [r3, #0]
   1ef34:	4798      	blx	r3
   1ef36:	2800      	cmp	r0, #0
   1ef38:	bf18      	it	ne
   1ef3a:	4604      	movne	r4, r0
   1ef3c:	4620      	mov	r0, r4
   1ef3e:	b005      	add	sp, #20
   1ef40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ef44:	2e00      	cmp	r6, #0
   1ef46:	dae1      	bge.n	1ef0c <cc_mbedtls_ctr_drbg_seed+0x4c>
   1ef48:	2a17      	cmp	r2, #23
   1ef4a:	d802      	bhi.n	1ef52 <cc_mbedtls_ctr_drbg_seed+0x92>
   1ef4c:	1c53      	adds	r3, r2, #1
   1ef4e:	085e      	lsrs	r6, r3, #1
   1ef50:	e7dc      	b.n	1ef0c <cc_mbedtls_ctr_drbg_seed+0x4c>
   1ef52:	2600      	movs	r6, #0
   1ef54:	e7da      	b.n	1ef0c <cc_mbedtls_ctr_drbg_seed+0x4c>
   1ef56:	bf00      	nop
   1ef58:	2000062c 	.word	0x2000062c
   1ef5c:	20000630 	.word	0x20000630

0001ef60 <cc_mbedtls_ctr_drbg_random_with_add>:
   1ef60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef64:	b08d      	sub	sp, #52	; 0x34
   1ef66:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1ef6a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   1ef6e:	f200 80e4 	bhi.w	1f13a <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   1ef72:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   1ef76:	f200 80dd 	bhi.w	1f134 <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   1ef7a:	4604      	mov	r4, r0
   1ef7c:	4615      	mov	r5, r2
   1ef7e:	460e      	mov	r6, r1
   1ef80:	2220      	movs	r2, #32
   1ef82:	2100      	movs	r1, #0
   1ef84:	a804      	add	r0, sp, #16
   1ef86:	461f      	mov	r7, r3
   1ef88:	f002 ffee 	bl	21f68 <memset>
   1ef8c:	4b6c      	ldr	r3, [pc, #432]	; (1f140 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   1ef8e:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   1ef92:	681b      	ldr	r3, [r3, #0]
   1ef94:	4648      	mov	r0, r9
   1ef96:	4798      	blx	r3
   1ef98:	4683      	mov	fp, r0
   1ef9a:	2800      	cmp	r0, #0
   1ef9c:	f040 8093 	bne.w	1f0c6 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1efa0:	6922      	ldr	r2, [r4, #16]
   1efa2:	69e3      	ldr	r3, [r4, #28]
   1efa4:	429a      	cmp	r2, r3
   1efa6:	f300 8092 	bgt.w	1f0ce <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1efaa:	6963      	ldr	r3, [r4, #20]
   1efac:	2b00      	cmp	r3, #0
   1efae:	f040 808e 	bne.w	1f0ce <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   1efb2:	f1b8 0f00 	cmp.w	r8, #0
   1efb6:	f040 80a9 	bne.w	1f10c <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   1efba:	f8df a188 	ldr.w	sl, [pc, #392]	; 1f144 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1efbe:	466f      	mov	r7, sp
   1efc0:	2d00      	cmp	r5, #0
   1efc2:	f000 8098 	beq.w	1f0f6 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1efc6:	f104 0820 	add.w	r8, r4, #32
   1efca:	466f      	mov	r7, sp
   1efcc:	e00e      	b.n	1efec <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   1efce:	2d10      	cmp	r5, #16
   1efd0:	46ab      	mov	fp, r5
   1efd2:	bf28      	it	cs
   1efd4:	f04f 0b10 	movcs.w	fp, #16
   1efd8:	4630      	mov	r0, r6
   1efda:	465a      	mov	r2, fp
   1efdc:	4639      	mov	r1, r7
   1efde:	f002 ffb8 	bl	21f52 <memcpy>
   1efe2:	ebb5 050b 	subs.w	r5, r5, fp
   1efe6:	445e      	add	r6, fp
   1efe8:	f000 8085 	beq.w	1f0f6 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   1efec:	7be3      	ldrb	r3, [r4, #15]
   1efee:	3301      	adds	r3, #1
   1eff0:	b2db      	uxtb	r3, r3
   1eff2:	73e3      	strb	r3, [r4, #15]
   1eff4:	2b00      	cmp	r3, #0
   1eff6:	d14d      	bne.n	1f094 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1eff8:	7ba3      	ldrb	r3, [r4, #14]
   1effa:	3301      	adds	r3, #1
   1effc:	b2db      	uxtb	r3, r3
   1effe:	73a3      	strb	r3, [r4, #14]
   1f000:	2b00      	cmp	r3, #0
   1f002:	d147      	bne.n	1f094 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1f004:	7b63      	ldrb	r3, [r4, #13]
   1f006:	3301      	adds	r3, #1
   1f008:	b2db      	uxtb	r3, r3
   1f00a:	7363      	strb	r3, [r4, #13]
   1f00c:	2b00      	cmp	r3, #0
   1f00e:	d141      	bne.n	1f094 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1f010:	7b23      	ldrb	r3, [r4, #12]
   1f012:	3301      	adds	r3, #1
   1f014:	b2db      	uxtb	r3, r3
   1f016:	7323      	strb	r3, [r4, #12]
   1f018:	2b00      	cmp	r3, #0
   1f01a:	d13b      	bne.n	1f094 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1f01c:	7ae3      	ldrb	r3, [r4, #11]
   1f01e:	3301      	adds	r3, #1
   1f020:	b2db      	uxtb	r3, r3
   1f022:	72e3      	strb	r3, [r4, #11]
   1f024:	2b00      	cmp	r3, #0
   1f026:	d135      	bne.n	1f094 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1f028:	7aa3      	ldrb	r3, [r4, #10]
   1f02a:	3301      	adds	r3, #1
   1f02c:	b2db      	uxtb	r3, r3
   1f02e:	72a3      	strb	r3, [r4, #10]
   1f030:	2b00      	cmp	r3, #0
   1f032:	d12f      	bne.n	1f094 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1f034:	7a63      	ldrb	r3, [r4, #9]
   1f036:	3301      	adds	r3, #1
   1f038:	b2db      	uxtb	r3, r3
   1f03a:	7263      	strb	r3, [r4, #9]
   1f03c:	bb53      	cbnz	r3, 1f094 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1f03e:	7a23      	ldrb	r3, [r4, #8]
   1f040:	3301      	adds	r3, #1
   1f042:	b2db      	uxtb	r3, r3
   1f044:	7223      	strb	r3, [r4, #8]
   1f046:	bb2b      	cbnz	r3, 1f094 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1f048:	79e3      	ldrb	r3, [r4, #7]
   1f04a:	3301      	adds	r3, #1
   1f04c:	b2db      	uxtb	r3, r3
   1f04e:	71e3      	strb	r3, [r4, #7]
   1f050:	bb03      	cbnz	r3, 1f094 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1f052:	79a3      	ldrb	r3, [r4, #6]
   1f054:	3301      	adds	r3, #1
   1f056:	b2db      	uxtb	r3, r3
   1f058:	71a3      	strb	r3, [r4, #6]
   1f05a:	b9db      	cbnz	r3, 1f094 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1f05c:	7963      	ldrb	r3, [r4, #5]
   1f05e:	3301      	adds	r3, #1
   1f060:	b2db      	uxtb	r3, r3
   1f062:	7163      	strb	r3, [r4, #5]
   1f064:	b9b3      	cbnz	r3, 1f094 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1f066:	7923      	ldrb	r3, [r4, #4]
   1f068:	3301      	adds	r3, #1
   1f06a:	b2db      	uxtb	r3, r3
   1f06c:	7123      	strb	r3, [r4, #4]
   1f06e:	b98b      	cbnz	r3, 1f094 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1f070:	78e3      	ldrb	r3, [r4, #3]
   1f072:	3301      	adds	r3, #1
   1f074:	b2db      	uxtb	r3, r3
   1f076:	70e3      	strb	r3, [r4, #3]
   1f078:	b963      	cbnz	r3, 1f094 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1f07a:	78a3      	ldrb	r3, [r4, #2]
   1f07c:	3301      	adds	r3, #1
   1f07e:	b2db      	uxtb	r3, r3
   1f080:	70a3      	strb	r3, [r4, #2]
   1f082:	b93b      	cbnz	r3, 1f094 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1f084:	7863      	ldrb	r3, [r4, #1]
   1f086:	3301      	adds	r3, #1
   1f088:	b2db      	uxtb	r3, r3
   1f08a:	7063      	strb	r3, [r4, #1]
   1f08c:	b913      	cbnz	r3, 1f094 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   1f08e:	7823      	ldrb	r3, [r4, #0]
   1f090:	3301      	adds	r3, #1
   1f092:	7023      	strb	r3, [r4, #0]
   1f094:	463b      	mov	r3, r7
   1f096:	4622      	mov	r2, r4
   1f098:	2101      	movs	r1, #1
   1f09a:	4640      	mov	r0, r8
   1f09c:	f000 fb5e 	bl	1f75c <cc_mbedtls_aes_crypt_ecb>
   1f0a0:	4683      	mov	fp, r0
   1f0a2:	2800      	cmp	r0, #0
   1f0a4:	d093      	beq.n	1efce <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   1f0a6:	f8da 3000 	ldr.w	r3, [sl]
   1f0aa:	4648      	mov	r0, r9
   1f0ac:	4798      	blx	r3
   1f0ae:	2120      	movs	r1, #32
   1f0b0:	4603      	mov	r3, r0
   1f0b2:	a804      	add	r0, sp, #16
   1f0b4:	2b00      	cmp	r3, #0
   1f0b6:	bf18      	it	ne
   1f0b8:	469b      	movne	fp, r3
   1f0ba:	f7ff fb13 	bl	1e6e4 <mbedtls_platform_zeroize>
   1f0be:	4638      	mov	r0, r7
   1f0c0:	2110      	movs	r1, #16
   1f0c2:	f7ff fb0f 	bl	1e6e4 <mbedtls_platform_zeroize>
   1f0c6:	4658      	mov	r0, fp
   1f0c8:	b00d      	add	sp, #52	; 0x34
   1f0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0ce:	4642      	mov	r2, r8
   1f0d0:	4639      	mov	r1, r7
   1f0d2:	2300      	movs	r3, #0
   1f0d4:	4620      	mov	r0, r4
   1f0d6:	f7ff fe7f 	bl	1edd8 <mbedtls_ctr_drbg_reseed_internal>
   1f0da:	f8df a068 	ldr.w	sl, [pc, #104]	; 1f144 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1f0de:	2800      	cmp	r0, #0
   1f0e0:	f43f af6d 	beq.w	1efbe <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1f0e4:	f8da 3000 	ldr.w	r3, [sl]
   1f0e8:	4648      	mov	r0, r9
   1f0ea:	4798      	blx	r3
   1f0ec:	4683      	mov	fp, r0
   1f0ee:	2800      	cmp	r0, #0
   1f0f0:	f43f af65 	beq.w	1efbe <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   1f0f4:	e7e7      	b.n	1f0c6 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1f0f6:	a904      	add	r1, sp, #16
   1f0f8:	4620      	mov	r0, r4
   1f0fa:	f7ff fdc7 	bl	1ec8c <ctr_drbg_update_internal>
   1f0fe:	4683      	mov	fp, r0
   1f100:	2800      	cmp	r0, #0
   1f102:	d1d0      	bne.n	1f0a6 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1f104:	6923      	ldr	r3, [r4, #16]
   1f106:	3301      	adds	r3, #1
   1f108:	6123      	str	r3, [r4, #16]
   1f10a:	e7cc      	b.n	1f0a6 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1f10c:	4642      	mov	r2, r8
   1f10e:	4639      	mov	r1, r7
   1f110:	a804      	add	r0, sp, #16
   1f112:	f7ff fc7b 	bl	1ea0c <block_cipher_df>
   1f116:	4683      	mov	fp, r0
   1f118:	b118      	cbz	r0, 1f122 <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   1f11a:	f8df a028 	ldr.w	sl, [pc, #40]	; 1f144 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   1f11e:	466f      	mov	r7, sp
   1f120:	e7c1      	b.n	1f0a6 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   1f122:	a904      	add	r1, sp, #16
   1f124:	4620      	mov	r0, r4
   1f126:	f7ff fdb1 	bl	1ec8c <ctr_drbg_update_internal>
   1f12a:	4683      	mov	fp, r0
   1f12c:	2800      	cmp	r0, #0
   1f12e:	f43f af44 	beq.w	1efba <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1f132:	e7f2      	b.n	1f11a <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   1f134:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   1f138:	e7c5      	b.n	1f0c6 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1f13a:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   1f13e:	e7c2      	b.n	1f0c6 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   1f140:	2000062c 	.word	0x2000062c
   1f144:	20000630 	.word	0x20000630

0001f148 <cc_mbedtls_sha256_ret>:
   1f148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f14a:	461c      	mov	r4, r3
   1f14c:	4605      	mov	r5, r0
   1f14e:	4811      	ldr	r0, [pc, #68]	; (1f194 <cc_mbedtls_sha256_ret+0x4c>)
   1f150:	460e      	mov	r6, r1
   1f152:	4617      	mov	r7, r2
   1f154:	f7ff fb4e 	bl	1e7f4 <cc_mbedtls_sha256_init>
   1f158:	4621      	mov	r1, r4
   1f15a:	480e      	ldr	r0, [pc, #56]	; (1f194 <cc_mbedtls_sha256_ret+0x4c>)
   1f15c:	f7ff fb64 	bl	1e828 <cc_mbedtls_sha256_starts_ret>
   1f160:	4604      	mov	r4, r0
   1f162:	b120      	cbz	r0, 1f16e <cc_mbedtls_sha256_ret+0x26>
   1f164:	480b      	ldr	r0, [pc, #44]	; (1f194 <cc_mbedtls_sha256_ret+0x4c>)
   1f166:	f7ff fb59 	bl	1e81c <cc_mbedtls_sha256_free>
   1f16a:	4620      	mov	r0, r4
   1f16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f16e:	4809      	ldr	r0, [pc, #36]	; (1f194 <cc_mbedtls_sha256_ret+0x4c>)
   1f170:	4632      	mov	r2, r6
   1f172:	4629      	mov	r1, r5
   1f174:	f7ff fb6c 	bl	1e850 <cc_mbedtls_sha256_update_ret>
   1f178:	4604      	mov	r4, r0
   1f17a:	2800      	cmp	r0, #0
   1f17c:	d1f2      	bne.n	1f164 <cc_mbedtls_sha256_ret+0x1c>
   1f17e:	4639      	mov	r1, r7
   1f180:	4804      	ldr	r0, [pc, #16]	; (1f194 <cc_mbedtls_sha256_ret+0x4c>)
   1f182:	f7ff fb6d 	bl	1e860 <cc_mbedtls_sha256_finish_ret>
   1f186:	4604      	mov	r4, r0
   1f188:	4802      	ldr	r0, [pc, #8]	; (1f194 <cc_mbedtls_sha256_ret+0x4c>)
   1f18a:	f7ff fb47 	bl	1e81c <cc_mbedtls_sha256_free>
   1f18e:	4620      	mov	r0, r4
   1f190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f192:	bf00      	nop
   1f194:	20002f50 	.word	0x20002f50

0001f198 <RNG_PLAT_SetUserRngParameters>:
   1f198:	b530      	push	{r4, r5, lr}
   1f19a:	b083      	sub	sp, #12
   1f19c:	231c      	movs	r3, #28
   1f19e:	a901      	add	r1, sp, #4
   1f1a0:	4604      	mov	r4, r0
   1f1a2:	9301      	str	r3, [sp, #4]
   1f1a4:	f000 f83c 	bl	1f220 <CC_PalTrngParamGet>
   1f1a8:	4605      	mov	r5, r0
   1f1aa:	b938      	cbnz	r0, 1f1bc <RNG_PLAT_SetUserRngParameters+0x24>
   1f1ac:	9b01      	ldr	r3, [sp, #4]
   1f1ae:	2b1c      	cmp	r3, #28
   1f1b0:	d007      	beq.n	1f1c2 <RNG_PLAT_SetUserRngParameters+0x2a>
   1f1b2:	4d15      	ldr	r5, [pc, #84]	; (1f208 <RNG_PLAT_SetUserRngParameters+0x70>)
   1f1b4:	4620      	mov	r0, r4
   1f1b6:	211c      	movs	r1, #28
   1f1b8:	f000 f82e 	bl	1f218 <CC_PalMemSetZeroPlat>
   1f1bc:	4628      	mov	r0, r5
   1f1be:	b003      	add	sp, #12
   1f1c0:	bd30      	pop	{r4, r5, pc}
   1f1c2:	e9d4 3200 	ldrd	r3, r2, [r4]
   1f1c6:	2101      	movs	r1, #1
   1f1c8:	3b00      	subs	r3, #0
   1f1ca:	bf18      	it	ne
   1f1cc:	2301      	movne	r3, #1
   1f1ce:	61e1      	str	r1, [r4, #28]
   1f1d0:	b10a      	cbz	r2, 1f1d6 <RNG_PLAT_SetUserRngParameters+0x3e>
   1f1d2:	f043 0302 	orr.w	r3, r3, #2
   1f1d6:	68a2      	ldr	r2, [r4, #8]
   1f1d8:	b932      	cbnz	r2, 1f1e8 <RNG_PLAT_SetUserRngParameters+0x50>
   1f1da:	68e2      	ldr	r2, [r4, #12]
   1f1dc:	b942      	cbnz	r2, 1f1f0 <RNG_PLAT_SetUserRngParameters+0x58>
   1f1de:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1f1e2:	b97b      	cbnz	r3, 1f204 <RNG_PLAT_SetUserRngParameters+0x6c>
   1f1e4:	4d09      	ldr	r5, [pc, #36]	; (1f20c <RNG_PLAT_SetUserRngParameters+0x74>)
   1f1e6:	e7e5      	b.n	1f1b4 <RNG_PLAT_SetUserRngParameters+0x1c>
   1f1e8:	68e2      	ldr	r2, [r4, #12]
   1f1ea:	f043 0304 	orr.w	r3, r3, #4
   1f1ee:	b13a      	cbz	r2, 1f200 <RNG_PLAT_SetUserRngParameters+0x68>
   1f1f0:	f043 0308 	orr.w	r3, r3, #8
   1f1f4:	2200      	movs	r2, #0
   1f1f6:	4628      	mov	r0, r5
   1f1f8:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1f1fc:	b003      	add	sp, #12
   1f1fe:	bd30      	pop	{r4, r5, pc}
   1f200:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1f204:	4615      	mov	r5, r2
   1f206:	e7d9      	b.n	1f1bc <RNG_PLAT_SetUserRngParameters+0x24>
   1f208:	00f00c37 	.word	0x00f00c37
   1f20c:	00f00c0e 	.word	0x00f00c0e

0001f210 <CC_PalMemCopyPlat>:
   1f210:	f002 be88 	b.w	21f24 <memmove>

0001f214 <CC_PalMemSetPlat>:
   1f214:	f002 bea8 	b.w	21f68 <memset>

0001f218 <CC_PalMemSetZeroPlat>:
   1f218:	460a      	mov	r2, r1
   1f21a:	2100      	movs	r1, #0
   1f21c:	f002 bea4 	b.w	21f68 <memset>

0001f220 <CC_PalTrngParamGet>:
   1f220:	b118      	cbz	r0, 1f22a <CC_PalTrngParamGet+0xa>
   1f222:	b111      	cbz	r1, 1f22a <CC_PalTrngParamGet+0xa>
   1f224:	680b      	ldr	r3, [r1, #0]
   1f226:	2b1c      	cmp	r3, #28
   1f228:	d001      	beq.n	1f22e <CC_PalTrngParamGet+0xe>
   1f22a:	2001      	movs	r0, #1
   1f22c:	4770      	bx	lr
   1f22e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f232:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   1f236:	3201      	adds	r2, #1
   1f238:	bf14      	ite	ne
   1f23a:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   1f23e:	f241 225c 	movweq	r2, #4700	; 0x125c
   1f242:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f246:	6002      	str	r2, [r0, #0]
   1f248:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   1f24c:	3201      	adds	r2, #1
   1f24e:	bf14      	ite	ne
   1f250:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   1f254:	f641 1264 	movweq	r2, #6500	; 0x1964
   1f258:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f25c:	6042      	str	r2, [r0, #4]
   1f25e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   1f262:	3201      	adds	r2, #1
   1f264:	bf14      	ite	ne
   1f266:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   1f26a:	f640 62d8 	movweq	r2, #3800	; 0xed8
   1f26e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f272:	6082      	str	r2, [r0, #8]
   1f274:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   1f278:	3201      	adds	r2, #1
   1f27a:	bf14      	ite	ne
   1f27c:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   1f280:	f241 3288 	movweq	r2, #5000	; 0x1388
   1f284:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f288:	60c2      	str	r2, [r0, #12]
   1f28a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   1f28e:	3201      	adds	r2, #1
   1f290:	bf14      	ite	ne
   1f292:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   1f296:	2290      	moveq	r2, #144	; 0x90
   1f298:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f29c:	6102      	str	r2, [r0, #16]
   1f29e:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   1f2a2:	3201      	adds	r2, #1
   1f2a4:	bf14      	ite	ne
   1f2a6:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   1f2aa:	2251      	moveq	r2, #81	; 0x51
   1f2ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f2b0:	6142      	str	r2, [r0, #20]
   1f2b2:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   1f2b6:	3201      	adds	r2, #1
   1f2b8:	bf14      	ite	ne
   1f2ba:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   1f2be:	f240 3337 	movweq	r3, #823	; 0x337
   1f2c2:	6183      	str	r3, [r0, #24]
   1f2c4:	2000      	movs	r0, #0
   1f2c6:	4770      	bx	lr

0001f2c8 <LLF_RND_WaitRngInterrupt>:
   1f2c8:	b508      	push	{r3, lr}
   1f2ca:	4601      	mov	r1, r0
   1f2cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1f2d0:	f7fe fe32 	bl	1df38 <CC_HalWaitInterruptRND>
   1f2d4:	4902      	ldr	r1, [pc, #8]	; (1f2e0 <LLF_RND_WaitRngInterrupt+0x18>)
   1f2d6:	4a03      	ldr	r2, [pc, #12]	; (1f2e4 <LLF_RND_WaitRngInterrupt+0x1c>)
   1f2d8:	2300      	movs	r3, #0
   1f2da:	600b      	str	r3, [r1, #0]
   1f2dc:	6013      	str	r3, [r2, #0]
   1f2de:	bd08      	pop	{r3, pc}
   1f2e0:	5002b1c8 	.word	0x5002b1c8
   1f2e4:	5002b12c 	.word	0x5002b12c

0001f2e8 <LLF_RND_GetRoscSampleCnt>:
   1f2e8:	3801      	subs	r0, #1
   1f2ea:	2807      	cmp	r0, #7
   1f2ec:	d805      	bhi.n	1f2fa <LLF_RND_GetRoscSampleCnt+0x12>
   1f2ee:	e8df f000 	tbb	[pc, r0]
   1f2f2:	0e0a      	.short	0x0e0a
   1f2f4:	04041204 	.word	0x04041204
   1f2f8:	0604      	.short	0x0604
   1f2fa:	4809      	ldr	r0, [pc, #36]	; (1f320 <LLF_RND_GetRoscSampleCnt+0x38>)
   1f2fc:	4770      	bx	lr
   1f2fe:	68cb      	ldr	r3, [r1, #12]
   1f300:	624b      	str	r3, [r1, #36]	; 0x24
   1f302:	2000      	movs	r0, #0
   1f304:	4770      	bx	lr
   1f306:	680b      	ldr	r3, [r1, #0]
   1f308:	624b      	str	r3, [r1, #36]	; 0x24
   1f30a:	2000      	movs	r0, #0
   1f30c:	4770      	bx	lr
   1f30e:	684b      	ldr	r3, [r1, #4]
   1f310:	624b      	str	r3, [r1, #36]	; 0x24
   1f312:	2000      	movs	r0, #0
   1f314:	4770      	bx	lr
   1f316:	688b      	ldr	r3, [r1, #8]
   1f318:	624b      	str	r3, [r1, #36]	; 0x24
   1f31a:	2000      	movs	r0, #0
   1f31c:	4770      	bx	lr
   1f31e:	bf00      	nop
   1f320:	00f10c31 	.word	0x00f10c31

0001f324 <LLF_RND_GetFastestRosc>:
   1f324:	680b      	ldr	r3, [r1, #0]
   1f326:	e002      	b.n	1f32e <LLF_RND_GetFastestRosc+0xa>
   1f328:	2b08      	cmp	r3, #8
   1f32a:	600b      	str	r3, [r1, #0]
   1f32c:	d806      	bhi.n	1f33c <LLF_RND_GetFastestRosc+0x18>
   1f32e:	6a02      	ldr	r2, [r0, #32]
   1f330:	4213      	tst	r3, r2
   1f332:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1f336:	d0f7      	beq.n	1f328 <LLF_RND_GetFastestRosc+0x4>
   1f338:	2000      	movs	r0, #0
   1f33a:	4770      	bx	lr
   1f33c:	4800      	ldr	r0, [pc, #0]	; (1f340 <LLF_RND_GetFastestRosc+0x1c>)
   1f33e:	4770      	bx	lr
   1f340:	00f10c31 	.word	0x00f10c31

0001f344 <LLF_RND_TurnOffTrng>:
   1f344:	4904      	ldr	r1, [pc, #16]	; (1f358 <LLF_RND_TurnOffTrng+0x14>)
   1f346:	4a05      	ldr	r2, [pc, #20]	; (1f35c <LLF_RND_TurnOffTrng+0x18>)
   1f348:	2300      	movs	r3, #0
   1f34a:	600b      	str	r3, [r1, #0]
   1f34c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1f350:	6013      	str	r3, [r2, #0]
   1f352:	f7fe bdd7 	b.w	1df04 <CC_HalClearInterruptBit>
   1f356:	bf00      	nop
   1f358:	5002b12c 	.word	0x5002b12c
   1f35c:	5002b1c4 	.word	0x5002b1c4

0001f360 <SetDataBuffersInfo>:
   1f360:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f362:	b083      	sub	sp, #12
   1f364:	2400      	movs	r4, #0
   1f366:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1f36a:	f88d 4007 	strb.w	r4, [sp, #7]
   1f36e:	d325      	bcc.n	1f3bc <SetDataBuffersInfo+0x5c>
   1f370:	460c      	mov	r4, r1
   1f372:	4404      	add	r4, r0
   1f374:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1f378:	4605      	mov	r5, r0
   1f37a:	d81f      	bhi.n	1f3bc <SetDataBuffersInfo+0x5c>
   1f37c:	4617      	mov	r7, r2
   1f37e:	461e      	mov	r6, r3
   1f380:	2201      	movs	r2, #1
   1f382:	f10d 0307 	add.w	r3, sp, #7
   1f386:	f000 fa13 	bl	1f7b0 <CC_PalDataBufferAttrGet>
   1f38a:	4604      	mov	r4, r0
   1f38c:	b9b0      	cbnz	r0, 1f3bc <SetDataBuffersInfo+0x5c>
   1f38e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f390:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f394:	603d      	str	r5, [r7, #0]
   1f396:	713b      	strb	r3, [r7, #4]
   1f398:	b192      	cbz	r2, 1f3c0 <SetDataBuffersInfo+0x60>
   1f39a:	b14e      	cbz	r6, 1f3b0 <SetDataBuffersInfo+0x50>
   1f39c:	4602      	mov	r2, r0
   1f39e:	9908      	ldr	r1, [sp, #32]
   1f3a0:	f10d 0307 	add.w	r3, sp, #7
   1f3a4:	4630      	mov	r0, r6
   1f3a6:	f000 fa03 	bl	1f7b0 <CC_PalDataBufferAttrGet>
   1f3aa:	b938      	cbnz	r0, 1f3bc <SetDataBuffersInfo+0x5c>
   1f3ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1f3b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f3b2:	4620      	mov	r0, r4
   1f3b4:	6016      	str	r6, [r2, #0]
   1f3b6:	7113      	strb	r3, [r2, #4]
   1f3b8:	b003      	add	sp, #12
   1f3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f3bc:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   1f3c0:	4620      	mov	r0, r4
   1f3c2:	b003      	add	sp, #12
   1f3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f3c6:	bf00      	nop

0001f3c8 <InitHashDrv>:
   1f3c8:	b1e8      	cbz	r0, 1f406 <InitHashDrv+0x3e>
   1f3ca:	b510      	push	{r4, lr}
   1f3cc:	6804      	ldr	r4, [r0, #0]
   1f3ce:	2c01      	cmp	r4, #1
   1f3d0:	d004      	beq.n	1f3dc <InitHashDrv+0x14>
   1f3d2:	2c02      	cmp	r4, #2
   1f3d4:	d010      	beq.n	1f3f8 <InitHashDrv+0x30>
   1f3d6:	b144      	cbz	r4, 1f3ea <InitHashDrv+0x22>
   1f3d8:	480c      	ldr	r0, [pc, #48]	; (1f40c <InitHashDrv+0x44>)
   1f3da:	bd10      	pop	{r4, pc}
   1f3dc:	490c      	ldr	r1, [pc, #48]	; (1f410 <InitHashDrv+0x48>)
   1f3de:	2220      	movs	r2, #32
   1f3e0:	3008      	adds	r0, #8
   1f3e2:	f7ff ff15 	bl	1f210 <CC_PalMemCopyPlat>
   1f3e6:	2000      	movs	r0, #0
   1f3e8:	bd10      	pop	{r4, pc}
   1f3ea:	490a      	ldr	r1, [pc, #40]	; (1f414 <InitHashDrv+0x4c>)
   1f3ec:	2214      	movs	r2, #20
   1f3ee:	3008      	adds	r0, #8
   1f3f0:	f7ff ff0e 	bl	1f210 <CC_PalMemCopyPlat>
   1f3f4:	4620      	mov	r0, r4
   1f3f6:	bd10      	pop	{r4, pc}
   1f3f8:	4907      	ldr	r1, [pc, #28]	; (1f418 <InitHashDrv+0x50>)
   1f3fa:	2220      	movs	r2, #32
   1f3fc:	3008      	adds	r0, #8
   1f3fe:	f7ff ff07 	bl	1f210 <CC_PalMemCopyPlat>
   1f402:	2000      	movs	r0, #0
   1f404:	bd10      	pop	{r4, pc}
   1f406:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1f40a:	4770      	bx	lr
   1f40c:	00f30001 	.word	0x00f30001
   1f410:	00025d0c 	.word	0x00025d0c
   1f414:	00025cd8 	.word	0x00025cd8
   1f418:	00025cec 	.word	0x00025cec

0001f41c <ProcessHashDrv>:
   1f41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f420:	2900      	cmp	r1, #0
   1f422:	f000 80ef 	beq.w	1f604 <ProcessHashDrv+0x1e8>
   1f426:	4604      	mov	r4, r0
   1f428:	2800      	cmp	r0, #0
   1f42a:	f000 80ef 	beq.w	1f60c <ProcessHashDrv+0x1f0>
   1f42e:	6803      	ldr	r3, [r0, #0]
   1f430:	4617      	mov	r7, r2
   1f432:	460e      	mov	r6, r1
   1f434:	2b00      	cmp	r3, #0
   1f436:	f000 80b9 	beq.w	1f5ac <ProcessHashDrv+0x190>
   1f43a:	3b01      	subs	r3, #1
   1f43c:	2b01      	cmp	r3, #1
   1f43e:	f200 80cd 	bhi.w	1f5dc <ProcessHashDrv+0x1c0>
   1f442:	4874      	ldr	r0, [pc, #464]	; (1f614 <ProcessHashDrv+0x1f8>)
   1f444:	f04f 31ff 	mov.w	r1, #4294967295
   1f448:	f04f 0802 	mov.w	r8, #2
   1f44c:	f7fe fe02 	bl	1e054 <CC_PalMutexLock>
   1f450:	2800      	cmp	r0, #0
   1f452:	f040 80b5 	bne.w	1f5c0 <ProcessHashDrv+0x1a4>
   1f456:	2000      	movs	r0, #0
   1f458:	f7fe fe2c 	bl	1e0b4 <CC_PalPowerSaveModeSelect>
   1f45c:	4605      	mov	r5, r0
   1f45e:	2800      	cmp	r0, #0
   1f460:	f040 80b8 	bne.w	1f5d4 <ProcessHashDrv+0x1b8>
   1f464:	4a6c      	ldr	r2, [pc, #432]	; (1f618 <ProcessHashDrv+0x1fc>)
   1f466:	6813      	ldr	r3, [r2, #0]
   1f468:	2b00      	cmp	r3, #0
   1f46a:	d1fc      	bne.n	1f466 <ProcessHashDrv+0x4a>
   1f46c:	486b      	ldr	r0, [pc, #428]	; (1f61c <ProcessHashDrv+0x200>)
   1f46e:	6803      	ldr	r3, [r0, #0]
   1f470:	2b00      	cmp	r3, #0
   1f472:	d1fc      	bne.n	1f46e <ProcessHashDrv+0x52>
   1f474:	f04f 30ff 	mov.w	r0, #4294967295
   1f478:	f7fe fd44 	bl	1df04 <CC_HalClearInterruptBit>
   1f47c:	4b68      	ldr	r3, [pc, #416]	; (1f620 <ProcessHashDrv+0x204>)
   1f47e:	6818      	ldr	r0, [r3, #0]
   1f480:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   1f484:	f7fe fd4c 	bl	1df20 <CC_HalMaskInterrupt>
   1f488:	4866      	ldr	r0, [pc, #408]	; (1f624 <ProcessHashDrv+0x208>)
   1f48a:	4a67      	ldr	r2, [pc, #412]	; (1f628 <ProcessHashDrv+0x20c>)
   1f48c:	4967      	ldr	r1, [pc, #412]	; (1f62c <ProcessHashDrv+0x210>)
   1f48e:	2301      	movs	r3, #1
   1f490:	6003      	str	r3, [r0, #0]
   1f492:	2007      	movs	r0, #7
   1f494:	6010      	str	r0, [r2, #0]
   1f496:	600b      	str	r3, [r1, #0]
   1f498:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
   1f49c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1f49e:	6013      	str	r3, [r2, #0]
   1f4a0:	4b63      	ldr	r3, [pc, #396]	; (1f630 <ProcessHashDrv+0x214>)
   1f4a2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1f4a4:	6051      	str	r1, [r2, #4]
   1f4a6:	f8c3 8000 	str.w	r8, [r3]
   1f4aa:	6823      	ldr	r3, [r4, #0]
   1f4ac:	b15b      	cbz	r3, 1f4c6 <ProcessHashDrv+0xaa>
   1f4ae:	3b01      	subs	r3, #1
   1f4b0:	2b01      	cmp	r3, #1
   1f4b2:	d817      	bhi.n	1f4e4 <ProcessHashDrv+0xc8>
   1f4b4:	4b5f      	ldr	r3, [pc, #380]	; (1f634 <ProcessHashDrv+0x218>)
   1f4b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1f4b8:	601a      	str	r2, [r3, #0]
   1f4ba:	6a22      	ldr	r2, [r4, #32]
   1f4bc:	f843 2c04 	str.w	r2, [r3, #-4]
   1f4c0:	69e2      	ldr	r2, [r4, #28]
   1f4c2:	f843 2c08 	str.w	r2, [r3, #-8]
   1f4c6:	4b5c      	ldr	r3, [pc, #368]	; (1f638 <ProcessHashDrv+0x21c>)
   1f4c8:	69a2      	ldr	r2, [r4, #24]
   1f4ca:	601a      	str	r2, [r3, #0]
   1f4cc:	6962      	ldr	r2, [r4, #20]
   1f4ce:	f843 2c04 	str.w	r2, [r3, #-4]
   1f4d2:	6922      	ldr	r2, [r4, #16]
   1f4d4:	f843 2c08 	str.w	r2, [r3, #-8]
   1f4d8:	68e2      	ldr	r2, [r4, #12]
   1f4da:	f843 2c0c 	str.w	r2, [r3, #-12]
   1f4de:	68a2      	ldr	r2, [r4, #8]
   1f4e0:	f843 2c10 	str.w	r2, [r3, #-16]
   1f4e4:	4a55      	ldr	r2, [pc, #340]	; (1f63c <ProcessHashDrv+0x220>)
   1f4e6:	6813      	ldr	r3, [r2, #0]
   1f4e8:	2b00      	cmp	r3, #0
   1f4ea:	d1fc      	bne.n	1f4e6 <ProcessHashDrv+0xca>
   1f4ec:	2f00      	cmp	r7, #0
   1f4ee:	d059      	beq.n	1f5a4 <ProcessHashDrv+0x188>
   1f4f0:	6863      	ldr	r3, [r4, #4]
   1f4f2:	2b01      	cmp	r3, #1
   1f4f4:	bf04      	itt	eq
   1f4f6:	4a52      	ldreq	r2, [pc, #328]	; (1f640 <ProcessHashDrv+0x224>)
   1f4f8:	6013      	streq	r3, [r2, #0]
   1f4fa:	4a52      	ldr	r2, [pc, #328]	; (1f644 <ProcessHashDrv+0x228>)
   1f4fc:	4b52      	ldr	r3, [pc, #328]	; (1f648 <ProcessHashDrv+0x22c>)
   1f4fe:	6831      	ldr	r1, [r6, #0]
   1f500:	6011      	str	r1, [r2, #0]
   1f502:	2040      	movs	r0, #64	; 0x40
   1f504:	601f      	str	r7, [r3, #0]
   1f506:	f7fe fd11 	bl	1df2c <CC_HalWaitInterrupt>
   1f50a:	4605      	mov	r5, r0
   1f50c:	4a4b      	ldr	r2, [pc, #300]	; (1f63c <ProcessHashDrv+0x220>)
   1f50e:	6813      	ldr	r3, [r2, #0]
   1f510:	2b00      	cmp	r3, #0
   1f512:	d1fc      	bne.n	1f50e <ProcessHashDrv+0xf2>
   1f514:	4a41      	ldr	r2, [pc, #260]	; (1f61c <ProcessHashDrv+0x200>)
   1f516:	6813      	ldr	r3, [r2, #0]
   1f518:	2b00      	cmp	r3, #0
   1f51a:	d1fc      	bne.n	1f516 <ProcessHashDrv+0xfa>
   1f51c:	6823      	ldr	r3, [r4, #0]
   1f51e:	b15b      	cbz	r3, 1f538 <ProcessHashDrv+0x11c>
   1f520:	3b01      	subs	r3, #1
   1f522:	2b01      	cmp	r3, #1
   1f524:	d817      	bhi.n	1f556 <ProcessHashDrv+0x13a>
   1f526:	4a43      	ldr	r2, [pc, #268]	; (1f634 <ProcessHashDrv+0x218>)
   1f528:	4b48      	ldr	r3, [pc, #288]	; (1f64c <ProcessHashDrv+0x230>)
   1f52a:	6812      	ldr	r2, [r2, #0]
   1f52c:	6262      	str	r2, [r4, #36]	; 0x24
   1f52e:	681a      	ldr	r2, [r3, #0]
   1f530:	6222      	str	r2, [r4, #32]
   1f532:	3b04      	subs	r3, #4
   1f534:	681b      	ldr	r3, [r3, #0]
   1f536:	61e3      	str	r3, [r4, #28]
   1f538:	4a3f      	ldr	r2, [pc, #252]	; (1f638 <ProcessHashDrv+0x21c>)
   1f53a:	4b45      	ldr	r3, [pc, #276]	; (1f650 <ProcessHashDrv+0x234>)
   1f53c:	6812      	ldr	r2, [r2, #0]
   1f53e:	61a2      	str	r2, [r4, #24]
   1f540:	681a      	ldr	r2, [r3, #0]
   1f542:	6162      	str	r2, [r4, #20]
   1f544:	f853 2c04 	ldr.w	r2, [r3, #-4]
   1f548:	6122      	str	r2, [r4, #16]
   1f54a:	f853 2c08 	ldr.w	r2, [r3, #-8]
   1f54e:	60e2      	str	r2, [r4, #12]
   1f550:	3b0c      	subs	r3, #12
   1f552:	681b      	ldr	r3, [r3, #0]
   1f554:	60a3      	str	r3, [r4, #8]
   1f556:	4b3f      	ldr	r3, [pc, #252]	; (1f654 <ProcessHashDrv+0x238>)
   1f558:	4a3f      	ldr	r2, [pc, #252]	; (1f658 <ProcessHashDrv+0x23c>)
   1f55a:	681b      	ldr	r3, [r3, #0]
   1f55c:	64a3      	str	r3, [r4, #72]	; 0x48
   1f55e:	6812      	ldr	r2, [r2, #0]
   1f560:	4b32      	ldr	r3, [pc, #200]	; (1f62c <ProcessHashDrv+0x210>)
   1f562:	64e2      	str	r2, [r4, #76]	; 0x4c
   1f564:	4836      	ldr	r0, [pc, #216]	; (1f640 <ProcessHashDrv+0x224>)
   1f566:	493d      	ldr	r1, [pc, #244]	; (1f65c <ProcessHashDrv+0x240>)
   1f568:	2201      	movs	r2, #1
   1f56a:	601a      	str	r2, [r3, #0]
   1f56c:	2300      	movs	r3, #0
   1f56e:	4a33      	ldr	r2, [pc, #204]	; (1f63c <ProcessHashDrv+0x220>)
   1f570:	6003      	str	r3, [r0, #0]
   1f572:	600b      	str	r3, [r1, #0]
   1f574:	6813      	ldr	r3, [r2, #0]
   1f576:	2b00      	cmp	r3, #0
   1f578:	d1fc      	bne.n	1f574 <ProcessHashDrv+0x158>
   1f57a:	4a2a      	ldr	r2, [pc, #168]	; (1f624 <ProcessHashDrv+0x208>)
   1f57c:	6013      	str	r3, [r2, #0]
   1f57e:	2d00      	cmp	r5, #0
   1f580:	d13a      	bne.n	1f5f8 <ProcessHashDrv+0x1dc>
   1f582:	4b27      	ldr	r3, [pc, #156]	; (1f620 <ProcessHashDrv+0x204>)
   1f584:	6818      	ldr	r0, [r3, #0]
   1f586:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1f58a:	f7fe fcc9 	bl	1df20 <CC_HalMaskInterrupt>
   1f58e:	2001      	movs	r0, #1
   1f590:	f7fe fd90 	bl	1e0b4 <CC_PalPowerSaveModeSelect>
   1f594:	bb60      	cbnz	r0, 1f5f0 <ProcessHashDrv+0x1d4>
   1f596:	481f      	ldr	r0, [pc, #124]	; (1f614 <ProcessHashDrv+0x1f8>)
   1f598:	f7fe fd64 	bl	1e064 <CC_PalMutexUnlock>
   1f59c:	bb10      	cbnz	r0, 1f5e4 <ProcessHashDrv+0x1c8>
   1f59e:	4628      	mov	r0, r5
   1f5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f5a4:	4b2d      	ldr	r3, [pc, #180]	; (1f65c <ProcessHashDrv+0x240>)
   1f5a6:	2204      	movs	r2, #4
   1f5a8:	601a      	str	r2, [r3, #0]
   1f5aa:	e7af      	b.n	1f50c <ProcessHashDrv+0xf0>
   1f5ac:	4819      	ldr	r0, [pc, #100]	; (1f614 <ProcessHashDrv+0x1f8>)
   1f5ae:	f04f 31ff 	mov.w	r1, #4294967295
   1f5b2:	f04f 0801 	mov.w	r8, #1
   1f5b6:	f7fe fd4d 	bl	1e054 <CC_PalMutexLock>
   1f5ba:	2800      	cmp	r0, #0
   1f5bc:	f43f af4b 	beq.w	1f456 <ProcessHashDrv+0x3a>
   1f5c0:	4827      	ldr	r0, [pc, #156]	; (1f660 <ProcessHashDrv+0x244>)
   1f5c2:	f7fe f9b1 	bl	1d928 <CC_PalAbort>
   1f5c6:	2000      	movs	r0, #0
   1f5c8:	f7fe fd74 	bl	1e0b4 <CC_PalPowerSaveModeSelect>
   1f5cc:	4605      	mov	r5, r0
   1f5ce:	2800      	cmp	r0, #0
   1f5d0:	f43f af48 	beq.w	1f464 <ProcessHashDrv+0x48>
   1f5d4:	4823      	ldr	r0, [pc, #140]	; (1f664 <ProcessHashDrv+0x248>)
   1f5d6:	f7fe f9a7 	bl	1d928 <CC_PalAbort>
   1f5da:	e743      	b.n	1f464 <ProcessHashDrv+0x48>
   1f5dc:	4d22      	ldr	r5, [pc, #136]	; (1f668 <ProcessHashDrv+0x24c>)
   1f5de:	4628      	mov	r0, r5
   1f5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f5e4:	4821      	ldr	r0, [pc, #132]	; (1f66c <ProcessHashDrv+0x250>)
   1f5e6:	f7fe f99f 	bl	1d928 <CC_PalAbort>
   1f5ea:	4628      	mov	r0, r5
   1f5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f5f0:	481f      	ldr	r0, [pc, #124]	; (1f670 <ProcessHashDrv+0x254>)
   1f5f2:	f7fe f999 	bl	1d928 <CC_PalAbort>
   1f5f6:	e7ce      	b.n	1f596 <ProcessHashDrv+0x17a>
   1f5f8:	f104 0008 	add.w	r0, r4, #8
   1f5fc:	2110      	movs	r1, #16
   1f5fe:	f7ff fe0b 	bl	1f218 <CC_PalMemSetZeroPlat>
   1f602:	e7be      	b.n	1f582 <ProcessHashDrv+0x166>
   1f604:	4d1b      	ldr	r5, [pc, #108]	; (1f674 <ProcessHashDrv+0x258>)
   1f606:	4628      	mov	r0, r5
   1f608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f60c:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   1f610:	e7c5      	b.n	1f59e <ProcessHashDrv+0x182>
   1f612:	bf00      	nop
   1f614:	20000620 	.word	0x20000620
   1f618:	5002b91c 	.word	0x5002b91c
   1f61c:	5002bc20 	.word	0x5002bc20
   1f620:	5002ba04 	.word	0x5002ba04
   1f624:	5002b818 	.word	0x5002b818
   1f628:	5002b900 	.word	0x5002b900
   1f62c:	5002b7c4 	.word	0x5002b7c4
   1f630:	5002b7c0 	.word	0x5002b7c0
   1f634:	5002b65c 	.word	0x5002b65c
   1f638:	5002b650 	.word	0x5002b650
   1f63c:	5002b910 	.word	0x5002b910
   1f640:	5002b684 	.word	0x5002b684
   1f644:	5002bc28 	.word	0x5002bc28
   1f648:	5002bc2c 	.word	0x5002bc2c
   1f64c:	5002b658 	.word	0x5002b658
   1f650:	5002b64c 	.word	0x5002b64c
   1f654:	5002b7cc 	.word	0x5002b7cc
   1f658:	5002b7d0 	.word	0x5002b7d0
   1f65c:	5002b7c8 	.word	0x5002b7c8
   1f660:	00025c20 	.word	0x00025c20
   1f664:	00025c38 	.word	0x00025c38
   1f668:	00f30001 	.word	0x00f30001
   1f66c:	00025c78 	.word	0x00025c78
   1f670:	00025c58 	.word	0x00025c58
   1f674:	00f30003 	.word	0x00f30003

0001f678 <FinishHashDrv>:
   1f678:	2800      	cmp	r0, #0
   1f67a:	d03b      	beq.n	1f6f4 <FinishHashDrv+0x7c>
   1f67c:	b4f0      	push	{r4, r5, r6, r7}
   1f67e:	b082      	sub	sp, #8
   1f680:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1f682:	9301      	str	r3, [sp, #4]
   1f684:	6883      	ldr	r3, [r0, #8]
   1f686:	fa93 fc83 	rev.w	ip, r3
   1f68a:	9b01      	ldr	r3, [sp, #4]
   1f68c:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   1f690:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
   1f694:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
   1f698:	ba1b      	rev	r3, r3
   1f69a:	6243      	str	r3, [r0, #36]	; 0x24
   1f69c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1f69e:	9301      	str	r3, [sp, #4]
   1f6a0:	ba09      	rev	r1, r1
   1f6a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1f6a4:	61c1      	str	r1, [r0, #28]
   1f6a6:	ba12      	rev	r2, r2
   1f6a8:	6202      	str	r2, [r0, #32]
   1f6aa:	ba3f      	rev	r7, r7
   1f6ac:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
   1f6b0:	ba36      	rev	r6, r6
   1f6b2:	ba2d      	rev	r5, r5
   1f6b4:	ba24      	rev	r4, r4
   1f6b6:	e9c0 c702 	strd	ip, r7, [r0, #8]
   1f6ba:	e9c0 6504 	strd	r6, r5, [r0, #16]
   1f6be:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   1f6c0:	6b06      	ldr	r6, [r0, #48]	; 0x30
   1f6c2:	6b45      	ldr	r5, [r0, #52]	; 0x34
   1f6c4:	6184      	str	r4, [r0, #24]
   1f6c6:	fa93 fc83 	rev.w	ip, r3
   1f6ca:	6b84      	ldr	r4, [r0, #56]	; 0x38
   1f6cc:	9b01      	ldr	r3, [sp, #4]
   1f6ce:	ba3f      	rev	r7, r7
   1f6d0:	ba36      	rev	r6, r6
   1f6d2:	ba2d      	rev	r5, r5
   1f6d4:	ba24      	rev	r4, r4
   1f6d6:	ba09      	rev	r1, r1
   1f6d8:	ba12      	rev	r2, r2
   1f6da:	ba1b      	rev	r3, r3
   1f6dc:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
   1f6e0:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   1f6e4:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   1f6e8:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   1f6ec:	2000      	movs	r0, #0
   1f6ee:	b002      	add	sp, #8
   1f6f0:	bcf0      	pop	{r4, r5, r6, r7}
   1f6f2:	4770      	bx	lr
   1f6f4:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   1f6f8:	4770      	bx	lr
   1f6fa:	bf00      	nop

0001f6fc <cc_mbedtls_aes_init>:
   1f6fc:	b510      	push	{r4, lr}
   1f6fe:	4604      	mov	r4, r0
   1f700:	b130      	cbz	r0, 1f710 <cc_mbedtls_aes_init+0x14>
   1f702:	2200      	movs	r2, #0
   1f704:	2301      	movs	r3, #1
   1f706:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   1f70a:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   1f70e:	bd10      	pop	{r4, pc}
   1f710:	4801      	ldr	r0, [pc, #4]	; (1f718 <cc_mbedtls_aes_init+0x1c>)
   1f712:	f7fe f909 	bl	1d928 <CC_PalAbort>
   1f716:	e7f4      	b.n	1f702 <cc_mbedtls_aes_init+0x6>
   1f718:	00025d2c 	.word	0x00025d2c

0001f71c <cc_mbedtls_aes_free>:
   1f71c:	b118      	cbz	r0, 1f726 <cc_mbedtls_aes_free+0xa>
   1f71e:	2274      	movs	r2, #116	; 0x74
   1f720:	2100      	movs	r1, #0
   1f722:	f7ff bd77 	b.w	1f214 <CC_PalMemSetPlat>
   1f726:	4770      	bx	lr

0001f728 <cc_mbedtls_aes_setkey_enc>:
   1f728:	b190      	cbz	r0, 1f750 <cc_mbedtls_aes_setkey_enc+0x28>
   1f72a:	b1a1      	cbz	r1, 1f756 <cc_mbedtls_aes_setkey_enc+0x2e>
   1f72c:	b510      	push	{r4, lr}
   1f72e:	2a80      	cmp	r2, #128	; 0x80
   1f730:	f04f 0400 	mov.w	r4, #0
   1f734:	6384      	str	r4, [r0, #56]	; 0x38
   1f736:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   1f73a:	d106      	bne.n	1f74a <cc_mbedtls_aes_setkey_enc+0x22>
   1f73c:	6304      	str	r4, [r0, #48]	; 0x30
   1f73e:	2210      	movs	r2, #16
   1f740:	3010      	adds	r0, #16
   1f742:	f7ff fd65 	bl	1f210 <CC_PalMemCopyPlat>
   1f746:	4620      	mov	r0, r4
   1f748:	bd10      	pop	{r4, pc}
   1f74a:	f06f 001f 	mvn.w	r0, #31
   1f74e:	bd10      	pop	{r4, pc}
   1f750:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1f754:	4770      	bx	lr
   1f756:	f06f 001f 	mvn.w	r0, #31
   1f75a:	4770      	bx	lr

0001f75c <cc_mbedtls_aes_crypt_ecb>:
   1f75c:	b320      	cbz	r0, 1f7a8 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1f75e:	b31a      	cbz	r2, 1f7a8 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1f760:	b313      	cbz	r3, 1f7a8 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1f762:	2901      	cmp	r1, #1
   1f764:	d820      	bhi.n	1f7a8 <cc_mbedtls_aes_crypt_ecb+0x4c>
   1f766:	b570      	push	{r4, r5, r6, lr}
   1f768:	4604      	mov	r4, r0
   1f76a:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1f76c:	b086      	sub	sp, #24
   1f76e:	d016      	beq.n	1f79e <cc_mbedtls_aes_crypt_ecb+0x42>
   1f770:	2901      	cmp	r1, #1
   1f772:	d116      	bne.n	1f7a2 <cc_mbedtls_aes_crypt_ecb+0x46>
   1f774:	2100      	movs	r1, #0
   1f776:	2510      	movs	r5, #16
   1f778:	ae04      	add	r6, sp, #16
   1f77a:	6361      	str	r1, [r4, #52]	; 0x34
   1f77c:	4610      	mov	r0, r2
   1f77e:	e9cd 5600 	strd	r5, r6, [sp]
   1f782:	aa02      	add	r2, sp, #8
   1f784:	4629      	mov	r1, r5
   1f786:	f7ff fdeb 	bl	1f360 <SetDataBuffersInfo>
   1f78a:	b950      	cbnz	r0, 1f7a2 <cc_mbedtls_aes_crypt_ecb+0x46>
   1f78c:	462b      	mov	r3, r5
   1f78e:	4632      	mov	r2, r6
   1f790:	a902      	add	r1, sp, #8
   1f792:	4620      	mov	r0, r4
   1f794:	f000 f8d6 	bl	1f944 <ProcessAesDrv>
   1f798:	b918      	cbnz	r0, 1f7a2 <cc_mbedtls_aes_crypt_ecb+0x46>
   1f79a:	b006      	add	sp, #24
   1f79c:	bd70      	pop	{r4, r5, r6, pc}
   1f79e:	2900      	cmp	r1, #0
   1f7a0:	d0e8      	beq.n	1f774 <cc_mbedtls_aes_crypt_ecb+0x18>
   1f7a2:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1f7a6:	e7f8      	b.n	1f79a <cc_mbedtls_aes_crypt_ecb+0x3e>
   1f7a8:	f06f 0021 	mvn.w	r0, #33	; 0x21
   1f7ac:	4770      	bx	lr
   1f7ae:	bf00      	nop

0001f7b0 <CC_PalDataBufferAttrGet>:
   1f7b0:	2000      	movs	r0, #0
   1f7b2:	7018      	strb	r0, [r3, #0]
   1f7b4:	4770      	bx	lr
   1f7b6:	bf00      	nop

0001f7b8 <LoadAesKey>:
   1f7b8:	2800      	cmp	r0, #0
   1f7ba:	d03b      	beq.n	1f834 <LoadAesKey+0x7c>
   1f7bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   1f7c0:	2b00      	cmp	r3, #0
   1f7c2:	d02c      	beq.n	1f81e <LoadAesKey+0x66>
   1f7c4:	2b03      	cmp	r3, #3
   1f7c6:	b510      	push	{r4, lr}
   1f7c8:	d00f      	beq.n	1f7ea <LoadAesKey+0x32>
   1f7ca:	481c      	ldr	r0, [pc, #112]	; (1f83c <LoadAesKey+0x84>)
   1f7cc:	4c1c      	ldr	r4, [pc, #112]	; (1f840 <LoadAesKey+0x88>)
   1f7ce:	6822      	ldr	r2, [r4, #0]
   1f7d0:	4b1c      	ldr	r3, [pc, #112]	; (1f844 <LoadAesKey+0x8c>)
   1f7d2:	6812      	ldr	r2, [r2, #0]
   1f7d4:	601a      	str	r2, [r3, #0]
   1f7d6:	6822      	ldr	r2, [r4, #0]
   1f7d8:	6852      	ldr	r2, [r2, #4]
   1f7da:	605a      	str	r2, [r3, #4]
   1f7dc:	6822      	ldr	r2, [r4, #0]
   1f7de:	6892      	ldr	r2, [r2, #8]
   1f7e0:	609a      	str	r2, [r3, #8]
   1f7e2:	6822      	ldr	r2, [r4, #0]
   1f7e4:	68d2      	ldr	r2, [r2, #12]
   1f7e6:	60da      	str	r2, [r3, #12]
   1f7e8:	bd10      	pop	{r4, pc}
   1f7ea:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1f7ec:	6c00      	ldr	r0, [r0, #64]	; 0x40
   1f7ee:	4c14      	ldr	r4, [pc, #80]	; (1f840 <LoadAesKey+0x88>)
   1f7f0:	f000 fba4 	bl	1ff3c <kmu_validate_kdr_slot_and_size>
   1f7f4:	2800      	cmp	r0, #0
   1f7f6:	d1ea      	bne.n	1f7ce <LoadAesKey+0x16>
   1f7f8:	6821      	ldr	r1, [r4, #0]
   1f7fa:	4a12      	ldr	r2, [pc, #72]	; (1f844 <LoadAesKey+0x8c>)
   1f7fc:	6809      	ldr	r1, [r1, #0]
   1f7fe:	6011      	str	r1, [r2, #0]
   1f800:	6821      	ldr	r1, [r4, #0]
   1f802:	4b11      	ldr	r3, [pc, #68]	; (1f848 <LoadAesKey+0x90>)
   1f804:	6849      	ldr	r1, [r1, #4]
   1f806:	6019      	str	r1, [r3, #0]
   1f808:	6821      	ldr	r1, [r4, #0]
   1f80a:	6889      	ldr	r1, [r1, #8]
   1f80c:	6091      	str	r1, [r2, #8]
   1f80e:	6822      	ldr	r2, [r4, #0]
   1f810:	68d2      	ldr	r2, [r2, #12]
   1f812:	609a      	str	r2, [r3, #8]
   1f814:	f000 fb9e 	bl	1ff54 <kmu_use_kdr_key>
   1f818:	2800      	cmp	r0, #0
   1f81a:	d1d8      	bne.n	1f7ce <LoadAesKey+0x16>
   1f81c:	bd10      	pop	{r4, pc}
   1f81e:	4a09      	ldr	r2, [pc, #36]	; (1f844 <LoadAesKey+0x8c>)
   1f820:	6901      	ldr	r1, [r0, #16]
   1f822:	6011      	str	r1, [r2, #0]
   1f824:	6941      	ldr	r1, [r0, #20]
   1f826:	6051      	str	r1, [r2, #4]
   1f828:	6981      	ldr	r1, [r0, #24]
   1f82a:	6091      	str	r1, [r2, #8]
   1f82c:	69c1      	ldr	r1, [r0, #28]
   1f82e:	60d1      	str	r1, [r2, #12]
   1f830:	4618      	mov	r0, r3
   1f832:	4770      	bx	lr
   1f834:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   1f838:	4770      	bx	lr
   1f83a:	bf00      	nop
   1f83c:	00f10009 	.word	0x00f10009
   1f840:	20000610 	.word	0x20000610
   1f844:	5002b400 	.word	0x5002b400
   1f848:	5002b404 	.word	0x5002b404

0001f84c <InitAes.part.0>:
   1f84c:	4a32      	ldr	r2, [pc, #200]	; (1f918 <InitAes.part.0+0xcc>)
   1f84e:	b510      	push	{r4, lr}
   1f850:	4604      	mov	r4, r0
   1f852:	6813      	ldr	r3, [r2, #0]
   1f854:	2b00      	cmp	r3, #0
   1f856:	d1fc      	bne.n	1f852 <InitAes.part.0+0x6>
   1f858:	4a30      	ldr	r2, [pc, #192]	; (1f91c <InitAes.part.0+0xd0>)
   1f85a:	6813      	ldr	r3, [r2, #0]
   1f85c:	2b00      	cmp	r3, #0
   1f85e:	d1fc      	bne.n	1f85a <InitAes.part.0+0xe>
   1f860:	4a2f      	ldr	r2, [pc, #188]	; (1f920 <InitAes.part.0+0xd4>)
   1f862:	6813      	ldr	r3, [r2, #0]
   1f864:	2b00      	cmp	r3, #0
   1f866:	d1fc      	bne.n	1f862 <InitAes.part.0+0x16>
   1f868:	4a2e      	ldr	r2, [pc, #184]	; (1f924 <InitAes.part.0+0xd8>)
   1f86a:	6813      	ldr	r3, [r2, #0]
   1f86c:	2b00      	cmp	r3, #0
   1f86e:	d1fc      	bne.n	1f86a <InitAes.part.0+0x1e>
   1f870:	4a2d      	ldr	r2, [pc, #180]	; (1f928 <InitAes.part.0+0xdc>)
   1f872:	6813      	ldr	r3, [r2, #0]
   1f874:	2b00      	cmp	r3, #0
   1f876:	d1fc      	bne.n	1f872 <InitAes.part.0+0x26>
   1f878:	4a2c      	ldr	r2, [pc, #176]	; (1f92c <InitAes.part.0+0xe0>)
   1f87a:	6813      	ldr	r3, [r2, #0]
   1f87c:	2b00      	cmp	r3, #0
   1f87e:	d1fc      	bne.n	1f87a <InitAes.part.0+0x2e>
   1f880:	f04f 30ff 	mov.w	r0, #4294967295
   1f884:	f7fe fb3e 	bl	1df04 <CC_HalClearInterruptBit>
   1f888:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f88a:	f023 0304 	bic.w	r3, r3, #4
   1f88e:	2b03      	cmp	r3, #3
   1f890:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1f892:	d036      	beq.n	1f902 <InitAes.part.0+0xb6>
   1f894:	2b01      	cmp	r3, #1
   1f896:	4b26      	ldr	r3, [pc, #152]	; (1f930 <InitAes.part.0+0xe4>)
   1f898:	6818      	ldr	r0, [r3, #0]
   1f89a:	bf0c      	ite	eq
   1f89c:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   1f8a0:	f020 0020 	bicne.w	r0, r0, #32
   1f8a4:	f7fe fb3c 	bl	1df20 <CC_HalMaskInterrupt>
   1f8a8:	4b22      	ldr	r3, [pc, #136]	; (1f934 <InitAes.part.0+0xe8>)
   1f8aa:	4a1b      	ldr	r2, [pc, #108]	; (1f918 <InitAes.part.0+0xcc>)
   1f8ac:	2101      	movs	r1, #1
   1f8ae:	6019      	str	r1, [r3, #0]
   1f8b0:	6813      	ldr	r3, [r2, #0]
   1f8b2:	2b00      	cmp	r3, #0
   1f8b4:	d1fc      	bne.n	1f8b0 <InitAes.part.0+0x64>
   1f8b6:	4a19      	ldr	r2, [pc, #100]	; (1f91c <InitAes.part.0+0xd0>)
   1f8b8:	6813      	ldr	r3, [r2, #0]
   1f8ba:	2b00      	cmp	r3, #0
   1f8bc:	d1fc      	bne.n	1f8b8 <InitAes.part.0+0x6c>
   1f8be:	491e      	ldr	r1, [pc, #120]	; (1f938 <InitAes.part.0+0xec>)
   1f8c0:	4a15      	ldr	r2, [pc, #84]	; (1f918 <InitAes.part.0+0xcc>)
   1f8c2:	600b      	str	r3, [r1, #0]
   1f8c4:	6813      	ldr	r3, [r2, #0]
   1f8c6:	2b00      	cmp	r3, #0
   1f8c8:	d1fc      	bne.n	1f8c4 <InitAes.part.0+0x78>
   1f8ca:	4a14      	ldr	r2, [pc, #80]	; (1f91c <InitAes.part.0+0xd0>)
   1f8cc:	6813      	ldr	r3, [r2, #0]
   1f8ce:	2b00      	cmp	r3, #0
   1f8d0:	d1fc      	bne.n	1f8cc <InitAes.part.0+0x80>
   1f8d2:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1f8d4:	f022 0104 	bic.w	r1, r2, #4
   1f8d8:	2903      	cmp	r1, #3
   1f8da:	bf18      	it	ne
   1f8dc:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   1f8de:	4917      	ldr	r1, [pc, #92]	; (1f93c <InitAes.part.0+0xf0>)
   1f8e0:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1f8e4:	bf18      	it	ne
   1f8e6:	f003 0301 	andne.w	r3, r3, #1
   1f8ea:	f002 021c 	and.w	r2, r2, #28
   1f8ee:	4313      	orrs	r3, r2
   1f8f0:	600b      	str	r3, [r1, #0]
   1f8f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f8f4:	2b07      	cmp	r3, #7
   1f8f6:	d102      	bne.n	1f8fe <InitAes.part.0+0xb2>
   1f8f8:	4b11      	ldr	r3, [pc, #68]	; (1f940 <InitAes.part.0+0xf4>)
   1f8fa:	2201      	movs	r2, #1
   1f8fc:	601a      	str	r2, [r3, #0]
   1f8fe:	2000      	movs	r0, #0
   1f900:	bd10      	pop	{r4, pc}
   1f902:	2b01      	cmp	r3, #1
   1f904:	4b0a      	ldr	r3, [pc, #40]	; (1f930 <InitAes.part.0+0xe4>)
   1f906:	6818      	ldr	r0, [r3, #0]
   1f908:	bf0c      	ite	eq
   1f90a:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   1f90e:	f020 0010 	bicne.w	r0, r0, #16
   1f912:	f7fe fb05 	bl	1df20 <CC_HalMaskInterrupt>
   1f916:	e7c7      	b.n	1f8a8 <InitAes.part.0+0x5c>
   1f918:	5002b910 	.word	0x5002b910
   1f91c:	5002b470 	.word	0x5002b470
   1f920:	5002bd20 	.word	0x5002bd20
   1f924:	5002bc20 	.word	0x5002bc20
   1f928:	5002bd38 	.word	0x5002bd38
   1f92c:	5002bc38 	.word	0x5002bc38
   1f930:	5002ba04 	.word	0x5002ba04
   1f934:	5002b900 	.word	0x5002b900
   1f938:	5002b4bc 	.word	0x5002b4bc
   1f93c:	5002b4c0 	.word	0x5002b4c0
   1f940:	5002b47c 	.word	0x5002b47c

0001f944 <ProcessAesDrv>:
   1f944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f948:	b087      	sub	sp, #28
   1f94a:	2900      	cmp	r1, #0
   1f94c:	f000 80a5 	beq.w	1fa9a <ProcessAesDrv+0x156>
   1f950:	4616      	mov	r6, r2
   1f952:	2a00      	cmp	r2, #0
   1f954:	f000 80a1 	beq.w	1fa9a <ProcessAesDrv+0x156>
   1f958:	4604      	mov	r4, r0
   1f95a:	2800      	cmp	r0, #0
   1f95c:	f000 813f 	beq.w	1fbde <ProcessAesDrv+0x29a>
   1f960:	461f      	mov	r7, r3
   1f962:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1f964:	460d      	mov	r5, r1
   1f966:	2b00      	cmp	r3, #0
   1f968:	d150      	bne.n	1fa0c <ProcessAesDrv+0xc8>
   1f96a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   1f96e:	d252      	bcs.n	1fa16 <ProcessAesDrv+0xd2>
   1f970:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1f974:	2b04      	cmp	r3, #4
   1f976:	f000 8109 	beq.w	1fb8c <ProcessAesDrv+0x248>
   1f97a:	f04f 0800 	mov.w	r8, #0
   1f97e:	48aa      	ldr	r0, [pc, #680]	; (1fc28 <ProcessAesDrv+0x2e4>)
   1f980:	f04f 31ff 	mov.w	r1, #4294967295
   1f984:	f7fe fb66 	bl	1e054 <CC_PalMutexLock>
   1f988:	2800      	cmp	r0, #0
   1f98a:	f040 80de 	bne.w	1fb4a <ProcessAesDrv+0x206>
   1f98e:	2000      	movs	r0, #0
   1f990:	f7fe fb90 	bl	1e0b4 <CC_PalPowerSaveModeSelect>
   1f994:	2800      	cmp	r0, #0
   1f996:	f040 80e1 	bne.w	1fb5c <ProcessAesDrv+0x218>
   1f99a:	4ba4      	ldr	r3, [pc, #656]	; (1fc2c <ProcessAesDrv+0x2e8>)
   1f99c:	4aa4      	ldr	r2, [pc, #656]	; (1fc30 <ProcessAesDrv+0x2ec>)
   1f99e:	2101      	movs	r1, #1
   1f9a0:	6019      	str	r1, [r3, #0]
   1f9a2:	6813      	ldr	r3, [r2, #0]
   1f9a4:	2b00      	cmp	r3, #0
   1f9a6:	d1fc      	bne.n	1f9a2 <ProcessAesDrv+0x5e>
   1f9a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f9aa:	2b03      	cmp	r3, #3
   1f9ac:	dc39      	bgt.n	1fa22 <ProcessAesDrv+0xde>
   1f9ae:	2b00      	cmp	r3, #0
   1f9b0:	da3a      	bge.n	1fa28 <ProcessAesDrv+0xe4>
   1f9b2:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 1fc7c <ProcessAesDrv+0x338>
   1f9b6:	4a9e      	ldr	r2, [pc, #632]	; (1fc30 <ProcessAesDrv+0x2ec>)
   1f9b8:	6813      	ldr	r3, [r2, #0]
   1f9ba:	2b00      	cmp	r3, #0
   1f9bc:	d1fc      	bne.n	1f9b8 <ProcessAesDrv+0x74>
   1f9be:	f1b8 0f00 	cmp.w	r8, #0
   1f9c2:	f040 80da 	bne.w	1fb7a <ProcessAesDrv+0x236>
   1f9c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f9c8:	f023 0304 	bic.w	r3, r3, #4
   1f9cc:	2b03      	cmp	r3, #3
   1f9ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1f9d0:	d058      	beq.n	1fa84 <ProcessAesDrv+0x140>
   1f9d2:	2b01      	cmp	r3, #1
   1f9d4:	4b97      	ldr	r3, [pc, #604]	; (1fc34 <ProcessAesDrv+0x2f0>)
   1f9d6:	6818      	ldr	r0, [r3, #0]
   1f9d8:	bf0c      	ite	eq
   1f9da:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   1f9de:	f040 0020 	orrne.w	r0, r0, #32
   1f9e2:	f7fe fa9d 	bl	1df20 <CC_HalMaskInterrupt>
   1f9e6:	4b91      	ldr	r3, [pc, #580]	; (1fc2c <ProcessAesDrv+0x2e8>)
   1f9e8:	2200      	movs	r2, #0
   1f9ea:	601a      	str	r2, [r3, #0]
   1f9ec:	2001      	movs	r0, #1
   1f9ee:	f7fe fb61 	bl	1e0b4 <CC_PalPowerSaveModeSelect>
   1f9f2:	2800      	cmp	r0, #0
   1f9f4:	f040 80bd 	bne.w	1fb72 <ProcessAesDrv+0x22e>
   1f9f8:	488b      	ldr	r0, [pc, #556]	; (1fc28 <ProcessAesDrv+0x2e4>)
   1f9fa:	f7fe fb33 	bl	1e064 <CC_PalMutexUnlock>
   1f9fe:	2800      	cmp	r0, #0
   1fa00:	f040 80b0 	bne.w	1fb64 <ProcessAesDrv+0x220>
   1fa04:	4648      	mov	r0, r9
   1fa06:	b007      	add	sp, #28
   1fa08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa0c:	2b01      	cmp	r3, #1
   1fa0e:	d1af      	bne.n	1f970 <ProcessAesDrv+0x2c>
   1fa10:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   1fa14:	d3ac      	bcc.n	1f970 <ProcessAesDrv+0x2c>
   1fa16:	f8df 9268 	ldr.w	r9, [pc, #616]	; 1fc80 <ProcessAesDrv+0x33c>
   1fa1a:	4648      	mov	r0, r9
   1fa1c:	b007      	add	sp, #28
   1fa1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa22:	3b06      	subs	r3, #6
   1fa24:	2b01      	cmp	r3, #1
   1fa26:	d8c4      	bhi.n	1f9b2 <ProcessAesDrv+0x6e>
   1fa28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1fa2a:	2b01      	cmp	r3, #1
   1fa2c:	f200 80d4 	bhi.w	1fbd8 <ProcessAesDrv+0x294>
   1fa30:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1fa32:	2b01      	cmp	r3, #1
   1fa34:	d837      	bhi.n	1faa6 <ProcessAesDrv+0x162>
   1fa36:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1fa38:	2b01      	cmp	r3, #1
   1fa3a:	f200 8131 	bhi.w	1fca0 <ProcessAesDrv+0x35c>
   1fa3e:	4620      	mov	r0, r4
   1fa40:	f7ff ff04 	bl	1f84c <InitAes.part.0>
   1fa44:	4681      	mov	r9, r0
   1fa46:	2800      	cmp	r0, #0
   1fa48:	d1b5      	bne.n	1f9b6 <ProcessAesDrv+0x72>
   1fa4a:	4620      	mov	r0, r4
   1fa4c:	f7ff feb4 	bl	1f7b8 <LoadAesKey>
   1fa50:	4681      	mov	r9, r0
   1fa52:	2800      	cmp	r0, #0
   1fa54:	d1af      	bne.n	1f9b6 <ProcessAesDrv+0x72>
   1fa56:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1fa58:	2b07      	cmp	r3, #7
   1fa5a:	d8aa      	bhi.n	1f9b2 <ProcessAesDrv+0x6e>
   1fa5c:	a201      	add	r2, pc, #4	; (adr r2, 1fa64 <ProcessAesDrv+0x120>)
   1fa5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1fa62:	bf00      	nop
   1fa64:	0001fac1 	.word	0x0001fac1
   1fa68:	0001faad 	.word	0x0001faad
   1fa6c:	0001fc1d 	.word	0x0001fc1d
   1fa70:	0001faad 	.word	0x0001faad
   1fa74:	0001f9b3 	.word	0x0001f9b3
   1fa78:	0001f9b3 	.word	0x0001f9b3
   1fa7c:	0001fc1d 	.word	0x0001fc1d
   1fa80:	0001faad 	.word	0x0001faad
   1fa84:	2b01      	cmp	r3, #1
   1fa86:	4b6b      	ldr	r3, [pc, #428]	; (1fc34 <ProcessAesDrv+0x2f0>)
   1fa88:	6818      	ldr	r0, [r3, #0]
   1fa8a:	bf0c      	ite	eq
   1fa8c:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   1fa90:	f040 0010 	orrne.w	r0, r0, #16
   1fa94:	f7fe fa44 	bl	1df20 <CC_HalMaskInterrupt>
   1fa98:	e7a5      	b.n	1f9e6 <ProcessAesDrv+0xa2>
   1fa9a:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 1fc84 <ProcessAesDrv+0x340>
   1fa9e:	4648      	mov	r0, r9
   1faa0:	b007      	add	sp, #28
   1faa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1faa6:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 1fc88 <ProcessAesDrv+0x344>
   1faaa:	e784      	b.n	1f9b6 <ProcessAesDrv+0x72>
   1faac:	4b62      	ldr	r3, [pc, #392]	; (1fc38 <ProcessAesDrv+0x2f4>)
   1faae:	6822      	ldr	r2, [r4, #0]
   1fab0:	601a      	str	r2, [r3, #0]
   1fab2:	6862      	ldr	r2, [r4, #4]
   1fab4:	605a      	str	r2, [r3, #4]
   1fab6:	68a2      	ldr	r2, [r4, #8]
   1fab8:	609a      	str	r2, [r3, #8]
   1faba:	68e2      	ldr	r2, [r4, #12]
   1fabc:	60da      	str	r2, [r3, #12]
   1fabe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1fac0:	682a      	ldr	r2, [r5, #0]
   1fac2:	f023 0304 	bic.w	r3, r3, #4
   1fac6:	2b03      	cmp	r3, #3
   1fac8:	d009      	beq.n	1fade <ProcessAesDrv+0x19a>
   1faca:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1facc:	6833      	ldr	r3, [r6, #0]
   1face:	2901      	cmp	r1, #1
   1fad0:	bf07      	ittee	eq
   1fad2:	485a      	ldreq	r0, [pc, #360]	; (1fc3c <ProcessAesDrv+0x2f8>)
   1fad4:	495a      	ldreq	r1, [pc, #360]	; (1fc40 <ProcessAesDrv+0x2fc>)
   1fad6:	485b      	ldrne	r0, [pc, #364]	; (1fc44 <ProcessAesDrv+0x300>)
   1fad8:	495b      	ldrne	r1, [pc, #364]	; (1fc48 <ProcessAesDrv+0x304>)
   1fada:	6003      	str	r3, [r0, #0]
   1fadc:	600f      	str	r7, [r1, #0]
   1fade:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1fae0:	2b01      	cmp	r3, #1
   1fae2:	bf0b      	itete	eq
   1fae4:	4b59      	ldreq	r3, [pc, #356]	; (1fc4c <ProcessAesDrv+0x308>)
   1fae6:	4b5a      	ldrne	r3, [pc, #360]	; (1fc50 <ProcessAesDrv+0x30c>)
   1fae8:	495a      	ldreq	r1, [pc, #360]	; (1fc54 <ProcessAesDrv+0x310>)
   1faea:	495b      	ldrne	r1, [pc, #364]	; (1fc58 <ProcessAesDrv+0x314>)
   1faec:	600a      	str	r2, [r1, #0]
   1faee:	601f      	str	r7, [r3, #0]
   1faf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1faf2:	f023 0304 	bic.w	r3, r3, #4
   1faf6:	2b03      	cmp	r3, #3
   1faf8:	d074      	beq.n	1fbe4 <ProcessAesDrv+0x2a0>
   1fafa:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1fafc:	2b01      	cmp	r3, #1
   1fafe:	bf0c      	ite	eq
   1fb00:	2080      	moveq	r0, #128	; 0x80
   1fb02:	2020      	movne	r0, #32
   1fb04:	f7fe fa12 	bl	1df2c <CC_HalWaitInterrupt>
   1fb08:	4681      	mov	r9, r0
   1fb0a:	2800      	cmp	r0, #0
   1fb0c:	f47f af53 	bne.w	1f9b6 <ProcessAesDrv+0x72>
   1fb10:	4b47      	ldr	r3, [pc, #284]	; (1fc30 <ProcessAesDrv+0x2ec>)
   1fb12:	681a      	ldr	r2, [r3, #0]
   1fb14:	2a00      	cmp	r2, #0
   1fb16:	d1fc      	bne.n	1fb12 <ProcessAesDrv+0x1ce>
   1fb18:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1fb1a:	3b01      	subs	r3, #1
   1fb1c:	4691      	mov	r9, r2
   1fb1e:	2b06      	cmp	r3, #6
   1fb20:	d810      	bhi.n	1fb44 <ProcessAesDrv+0x200>
   1fb22:	e8df f003 	tbb	[pc, r3]
   1fb26:	7d04      	.short	0x7d04
   1fb28:	7d0f0f04 	.word	0x7d0f0f04
   1fb2c:	04          	.byte	0x04
   1fb2d:	00          	.byte	0x00
   1fb2e:	4a42      	ldr	r2, [pc, #264]	; (1fc38 <ProcessAesDrv+0x2f4>)
   1fb30:	4b4a      	ldr	r3, [pc, #296]	; (1fc5c <ProcessAesDrv+0x318>)
   1fb32:	6812      	ldr	r2, [r2, #0]
   1fb34:	6022      	str	r2, [r4, #0]
   1fb36:	681a      	ldr	r2, [r3, #0]
   1fb38:	6062      	str	r2, [r4, #4]
   1fb3a:	685a      	ldr	r2, [r3, #4]
   1fb3c:	60a2      	str	r2, [r4, #8]
   1fb3e:	3308      	adds	r3, #8
   1fb40:	681b      	ldr	r3, [r3, #0]
   1fb42:	60e3      	str	r3, [r4, #12]
   1fb44:	2301      	movs	r3, #1
   1fb46:	65a3      	str	r3, [r4, #88]	; 0x58
   1fb48:	e735      	b.n	1f9b6 <ProcessAesDrv+0x72>
   1fb4a:	4845      	ldr	r0, [pc, #276]	; (1fc60 <ProcessAesDrv+0x31c>)
   1fb4c:	f7fd feec 	bl	1d928 <CC_PalAbort>
   1fb50:	2000      	movs	r0, #0
   1fb52:	f7fe faaf 	bl	1e0b4 <CC_PalPowerSaveModeSelect>
   1fb56:	2800      	cmp	r0, #0
   1fb58:	f43f af1f 	beq.w	1f99a <ProcessAesDrv+0x56>
   1fb5c:	4841      	ldr	r0, [pc, #260]	; (1fc64 <ProcessAesDrv+0x320>)
   1fb5e:	f7fd fee3 	bl	1d928 <CC_PalAbort>
   1fb62:	e71a      	b.n	1f99a <ProcessAesDrv+0x56>
   1fb64:	4840      	ldr	r0, [pc, #256]	; (1fc68 <ProcessAesDrv+0x324>)
   1fb66:	f7fd fedf 	bl	1d928 <CC_PalAbort>
   1fb6a:	4648      	mov	r0, r9
   1fb6c:	b007      	add	sp, #28
   1fb6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb72:	483e      	ldr	r0, [pc, #248]	; (1fc6c <ProcessAesDrv+0x328>)
   1fb74:	f7fd fed8 	bl	1d928 <CC_PalAbort>
   1fb78:	e73e      	b.n	1f9f8 <ProcessAesDrv+0xb4>
   1fb7a:	2304      	movs	r3, #4
   1fb7c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1fb80:	2120      	movs	r1, #32
   1fb82:	f104 0010 	add.w	r0, r4, #16
   1fb86:	f7ff fb47 	bl	1f218 <CC_PalMemSetZeroPlat>
   1fb8a:	e71c      	b.n	1f9c6 <ProcessAesDrv+0x82>
   1fb8c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1fb8e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1fb90:	f000 f9c8 	bl	1ff24 <kmu_validate_slot_and_size>
   1fb94:	b9e8      	cbnz	r0, 1fbd2 <ProcessAesDrv+0x28e>
   1fb96:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1fc8c <ProcessAesDrv+0x348>
   1fb9a:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 1fc90 <ProcessAesDrv+0x34c>
   1fb9e:	f8d8 3000 	ldr.w	r3, [r8]
   1fba2:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 1fc94 <ProcessAesDrv+0x350>
   1fba6:	681b      	ldr	r3, [r3, #0]
   1fba8:	f8cb 3000 	str.w	r3, [fp]
   1fbac:	f8d8 3000 	ldr.w	r3, [r8]
   1fbb0:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 1fc98 <ProcessAesDrv+0x354>
   1fbb4:	685b      	ldr	r3, [r3, #4]
   1fbb6:	f8ca 3000 	str.w	r3, [sl]
   1fbba:	f8d8 3000 	ldr.w	r3, [r8]
   1fbbe:	4a2c      	ldr	r2, [pc, #176]	; (1fc70 <ProcessAesDrv+0x32c>)
   1fbc0:	689b      	ldr	r3, [r3, #8]
   1fbc2:	f8c9 3000 	str.w	r3, [r9]
   1fbc6:	f8d8 3000 	ldr.w	r3, [r8]
   1fbca:	68db      	ldr	r3, [r3, #12]
   1fbcc:	6013      	str	r3, [r2, #0]
   1fbce:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1fbd0:	b171      	cbz	r1, 1fbf0 <ProcessAesDrv+0x2ac>
   1fbd2:	f04f 0801 	mov.w	r8, #1
   1fbd6:	e6d2      	b.n	1f97e <ProcessAesDrv+0x3a>
   1fbd8:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1fc9c <ProcessAesDrv+0x358>
   1fbdc:	e6eb      	b.n	1f9b6 <ProcessAesDrv+0x72>
   1fbde:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   1fbe2:	e70f      	b.n	1fa04 <ProcessAesDrv+0xc0>
   1fbe4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1fbe6:	2b01      	cmp	r3, #1
   1fbe8:	bf0c      	ite	eq
   1fbea:	2040      	moveq	r0, #64	; 0x40
   1fbec:	2010      	movne	r0, #16
   1fbee:	e789      	b.n	1fb04 <ProcessAesDrv+0x1c0>
   1fbf0:	f104 0310 	add.w	r3, r4, #16
   1fbf4:	4618      	mov	r0, r3
   1fbf6:	9305      	str	r3, [sp, #20]
   1fbf8:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   1fbfc:	e9cd 3200 	strd	r3, r2, [sp]
   1fc00:	9002      	str	r0, [sp, #8]
   1fc02:	2010      	movs	r0, #16
   1fc04:	9003      	str	r0, [sp, #12]
   1fc06:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   1fc0a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1fc0c:	f000 f9ae 	bl	1ff6c <kmu_derive_cmac>
   1fc10:	2800      	cmp	r0, #0
   1fc12:	d148      	bne.n	1fca6 <ProcessAesDrv+0x362>
   1fc14:	2300      	movs	r3, #0
   1fc16:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   1fc1a:	e7da      	b.n	1fbd2 <ProcessAesDrv+0x28e>
   1fc1c:	4b15      	ldr	r3, [pc, #84]	; (1fc74 <ProcessAesDrv+0x330>)
   1fc1e:	e746      	b.n	1faae <ProcessAesDrv+0x16a>
   1fc20:	4a14      	ldr	r2, [pc, #80]	; (1fc74 <ProcessAesDrv+0x330>)
   1fc22:	4b15      	ldr	r3, [pc, #84]	; (1fc78 <ProcessAesDrv+0x334>)
   1fc24:	e785      	b.n	1fb32 <ProcessAesDrv+0x1ee>
   1fc26:	bf00      	nop
   1fc28:	20000620 	.word	0x20000620
   1fc2c:	5002b810 	.word	0x5002b810
   1fc30:	5002b910 	.word	0x5002b910
   1fc34:	5002ba04 	.word	0x5002ba04
   1fc38:	5002b440 	.word	0x5002b440
   1fc3c:	5002bd28 	.word	0x5002bd28
   1fc40:	5002bd2c 	.word	0x5002bd2c
   1fc44:	5002bd30 	.word	0x5002bd30
   1fc48:	5002bd34 	.word	0x5002bd34
   1fc4c:	5002bc2c 	.word	0x5002bc2c
   1fc50:	5002bc34 	.word	0x5002bc34
   1fc54:	5002bc28 	.word	0x5002bc28
   1fc58:	5002bc30 	.word	0x5002bc30
   1fc5c:	5002b444 	.word	0x5002b444
   1fc60:	00025c20 	.word	0x00025c20
   1fc64:	00025c38 	.word	0x00025c38
   1fc68:	00025c78 	.word	0x00025c78
   1fc6c:	00025c58 	.word	0x00025c58
   1fc70:	5002b40c 	.word	0x5002b40c
   1fc74:	5002b460 	.word	0x5002b460
   1fc78:	5002b464 	.word	0x5002b464
   1fc7c:	00f10001 	.word	0x00f10001
   1fc80:	00f10005 	.word	0x00f10005
   1fc84:	00f1000b 	.word	0x00f1000b
   1fc88:	00f10003 	.word	0x00f10003
   1fc8c:	20000610 	.word	0x20000610
   1fc90:	5002b400 	.word	0x5002b400
   1fc94:	5002b404 	.word	0x5002b404
   1fc98:	5002b408 	.word	0x5002b408
   1fc9c:	00f10002 	.word	0x00f10002
   1fca0:	f8df 9038 	ldr.w	r9, [pc, #56]	; 1fcdc <ProcessAesDrv+0x398>
   1fca4:	e687      	b.n	1f9b6 <ProcessAesDrv+0x72>
   1fca6:	f8d8 3000 	ldr.w	r3, [r8]
   1fcaa:	4a0b      	ldr	r2, [pc, #44]	; (1fcd8 <ProcessAesDrv+0x394>)
   1fcac:	681b      	ldr	r3, [r3, #0]
   1fcae:	f8cb 3000 	str.w	r3, [fp]
   1fcb2:	f8d8 3000 	ldr.w	r3, [r8]
   1fcb6:	685b      	ldr	r3, [r3, #4]
   1fcb8:	f8ca 3000 	str.w	r3, [sl]
   1fcbc:	f8d8 3000 	ldr.w	r3, [r8]
   1fcc0:	689b      	ldr	r3, [r3, #8]
   1fcc2:	f8c9 3000 	str.w	r3, [r9]
   1fcc6:	f8d8 3000 	ldr.w	r3, [r8]
   1fcca:	68db      	ldr	r3, [r3, #12]
   1fccc:	6013      	str	r3, [r2, #0]
   1fcce:	9805      	ldr	r0, [sp, #20]
   1fcd0:	2110      	movs	r1, #16
   1fcd2:	f7ff faa1 	bl	1f218 <CC_PalMemSetZeroPlat>
   1fcd6:	e79d      	b.n	1fc14 <ProcessAesDrv+0x2d0>
   1fcd8:	5002b40c 	.word	0x5002b40c
   1fcdc:	00f10004 	.word	0x00f10004

0001fce0 <FinishAesDrv>:
   1fce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fce4:	b301      	cbz	r1, 1fd28 <FinishAesDrv+0x48>
   1fce6:	b1fa      	cbz	r2, 1fd28 <FinishAesDrv+0x48>
   1fce8:	4604      	mov	r4, r0
   1fcea:	2800      	cmp	r0, #0
   1fcec:	d07a      	beq.n	1fde4 <FinishAesDrv+0x104>
   1fcee:	461d      	mov	r5, r3
   1fcf0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1fcf2:	2b07      	cmp	r3, #7
   1fcf4:	460e      	mov	r6, r1
   1fcf6:	d01b      	beq.n	1fd30 <FinishAesDrv+0x50>
   1fcf8:	b95d      	cbnz	r5, 1fd12 <FinishAesDrv+0x32>
   1fcfa:	2b03      	cmp	r3, #3
   1fcfc:	d110      	bne.n	1fd20 <FinishAesDrv+0x40>
   1fcfe:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1fd00:	b973      	cbnz	r3, 1fd20 <FinishAesDrv+0x40>
   1fd02:	f100 0364 	add.w	r3, r0, #100	; 0x64
   1fd06:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   1fd0a:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   1fd0e:	600b      	str	r3, [r1, #0]
   1fd10:	2510      	movs	r5, #16
   1fd12:	462b      	mov	r3, r5
   1fd14:	4631      	mov	r1, r6
   1fd16:	4620      	mov	r0, r4
   1fd18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1fd1c:	f7ff be12 	b.w	1f944 <ProcessAesDrv>
   1fd20:	462f      	mov	r7, r5
   1fd22:	4638      	mov	r0, r7
   1fd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fd28:	4f66      	ldr	r7, [pc, #408]	; (1fec4 <FinishAesDrv+0x1e4>)
   1fd2a:	4638      	mov	r0, r7
   1fd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fd30:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1fd32:	2b00      	cmp	r3, #0
   1fd34:	d159      	bne.n	1fdea <FinishAesDrv+0x10a>
   1fd36:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1fd3a:	d25b      	bcs.n	1fdf4 <FinishAesDrv+0x114>
   1fd3c:	b915      	cbnz	r5, 1fd44 <FinishAesDrv+0x64>
   1fd3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1fd40:	2b00      	cmp	r3, #0
   1fd42:	d157      	bne.n	1fdf4 <FinishAesDrv+0x114>
   1fd44:	4860      	ldr	r0, [pc, #384]	; (1fec8 <FinishAesDrv+0x1e8>)
   1fd46:	f04f 31ff 	mov.w	r1, #4294967295
   1fd4a:	f7fe f983 	bl	1e054 <CC_PalMutexLock>
   1fd4e:	2800      	cmp	r0, #0
   1fd50:	f040 8097 	bne.w	1fe82 <FinishAesDrv+0x1a2>
   1fd54:	2000      	movs	r0, #0
   1fd56:	f7fe f9ad 	bl	1e0b4 <CC_PalPowerSaveModeSelect>
   1fd5a:	2800      	cmp	r0, #0
   1fd5c:	f040 808d 	bne.w	1fe7a <FinishAesDrv+0x19a>
   1fd60:	4b5a      	ldr	r3, [pc, #360]	; (1fecc <FinishAesDrv+0x1ec>)
   1fd62:	4a5b      	ldr	r2, [pc, #364]	; (1fed0 <FinishAesDrv+0x1f0>)
   1fd64:	2101      	movs	r1, #1
   1fd66:	6019      	str	r1, [r3, #0]
   1fd68:	6813      	ldr	r3, [r2, #0]
   1fd6a:	2b00      	cmp	r3, #0
   1fd6c:	d1fc      	bne.n	1fd68 <FinishAesDrv+0x88>
   1fd6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1fd70:	2b03      	cmp	r3, #3
   1fd72:	dd20      	ble.n	1fdb6 <FinishAesDrv+0xd6>
   1fd74:	3b06      	subs	r3, #6
   1fd76:	2b01      	cmp	r3, #1
   1fd78:	d81f      	bhi.n	1fdba <FinishAesDrv+0xda>
   1fd7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1fd7c:	2b01      	cmp	r3, #1
   1fd7e:	d83b      	bhi.n	1fdf8 <FinishAesDrv+0x118>
   1fd80:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1fd82:	2b01      	cmp	r3, #1
   1fd84:	f200 8085 	bhi.w	1fe92 <FinishAesDrv+0x1b2>
   1fd88:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1fd8a:	2b01      	cmp	r3, #1
   1fd8c:	f200 8083 	bhi.w	1fe96 <FinishAesDrv+0x1b6>
   1fd90:	4620      	mov	r0, r4
   1fd92:	f7ff fd5b 	bl	1f84c <InitAes.part.0>
   1fd96:	4607      	mov	r7, r0
   1fd98:	b980      	cbnz	r0, 1fdbc <FinishAesDrv+0xdc>
   1fd9a:	4620      	mov	r0, r4
   1fd9c:	f7ff fd0c 	bl	1f7b8 <LoadAesKey>
   1fda0:	4607      	mov	r7, r0
   1fda2:	b958      	cbnz	r0, 1fdbc <FinishAesDrv+0xdc>
   1fda4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1fda6:	2b07      	cmp	r3, #7
   1fda8:	d807      	bhi.n	1fdba <FinishAesDrv+0xda>
   1fdaa:	e8df f003 	tbb	[pc, r3]
   1fdae:	2730      	.short	0x2730
   1fdb0:	06062755 	.word	0x06062755
   1fdb4:	2755      	.short	0x2755
   1fdb6:	2b00      	cmp	r3, #0
   1fdb8:	dadf      	bge.n	1fd7a <FinishAesDrv+0x9a>
   1fdba:	4f46      	ldr	r7, [pc, #280]	; (1fed4 <FinishAesDrv+0x1f4>)
   1fdbc:	4a44      	ldr	r2, [pc, #272]	; (1fed0 <FinishAesDrv+0x1f0>)
   1fdbe:	6813      	ldr	r3, [r2, #0]
   1fdc0:	2b00      	cmp	r3, #0
   1fdc2:	d1fc      	bne.n	1fdbe <FinishAesDrv+0xde>
   1fdc4:	4a41      	ldr	r2, [pc, #260]	; (1fecc <FinishAesDrv+0x1ec>)
   1fdc6:	2001      	movs	r0, #1
   1fdc8:	6013      	str	r3, [r2, #0]
   1fdca:	f7fe f973 	bl	1e0b4 <CC_PalPowerSaveModeSelect>
   1fdce:	2800      	cmp	r0, #0
   1fdd0:	d15b      	bne.n	1fe8a <FinishAesDrv+0x1aa>
   1fdd2:	483d      	ldr	r0, [pc, #244]	; (1fec8 <FinishAesDrv+0x1e8>)
   1fdd4:	f7fe f946 	bl	1e064 <CC_PalMutexUnlock>
   1fdd8:	2800      	cmp	r0, #0
   1fdda:	d0a2      	beq.n	1fd22 <FinishAesDrv+0x42>
   1fddc:	483e      	ldr	r0, [pc, #248]	; (1fed8 <FinishAesDrv+0x1f8>)
   1fdde:	f7fd fda3 	bl	1d928 <CC_PalAbort>
   1fde2:	e79e      	b.n	1fd22 <FinishAesDrv+0x42>
   1fde4:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   1fde8:	e79b      	b.n	1fd22 <FinishAesDrv+0x42>
   1fdea:	2b01      	cmp	r3, #1
   1fdec:	d1a6      	bne.n	1fd3c <FinishAesDrv+0x5c>
   1fdee:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1fdf2:	d3a3      	bcc.n	1fd3c <FinishAesDrv+0x5c>
   1fdf4:	4f39      	ldr	r7, [pc, #228]	; (1fedc <FinishAesDrv+0x1fc>)
   1fdf6:	e794      	b.n	1fd22 <FinishAesDrv+0x42>
   1fdf8:	4f39      	ldr	r7, [pc, #228]	; (1fee0 <FinishAesDrv+0x200>)
   1fdfa:	e7df      	b.n	1fdbc <FinishAesDrv+0xdc>
   1fdfc:	4b39      	ldr	r3, [pc, #228]	; (1fee4 <FinishAesDrv+0x204>)
   1fdfe:	6822      	ldr	r2, [r4, #0]
   1fe00:	601a      	str	r2, [r3, #0]
   1fe02:	6862      	ldr	r2, [r4, #4]
   1fe04:	605a      	str	r2, [r3, #4]
   1fe06:	68a2      	ldr	r2, [r4, #8]
   1fe08:	609a      	str	r2, [r3, #8]
   1fe0a:	68e2      	ldr	r2, [r4, #12]
   1fe0c:	60da      	str	r2, [r3, #12]
   1fe0e:	4936      	ldr	r1, [pc, #216]	; (1fee8 <FinishAesDrv+0x208>)
   1fe10:	4a36      	ldr	r2, [pc, #216]	; (1feec <FinishAesDrv+0x20c>)
   1fe12:	2301      	movs	r3, #1
   1fe14:	600b      	str	r3, [r1, #0]
   1fe16:	6015      	str	r5, [r2, #0]
   1fe18:	2d00      	cmp	r5, #0
   1fe1a:	d13e      	bne.n	1fe9a <FinishAesDrv+0x1ba>
   1fe1c:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1fe1e:	b90a      	cbnz	r2, 1fe24 <FinishAesDrv+0x144>
   1fe20:	4a33      	ldr	r2, [pc, #204]	; (1fef0 <FinishAesDrv+0x210>)
   1fe22:	6013      	str	r3, [r2, #0]
   1fe24:	4b2a      	ldr	r3, [pc, #168]	; (1fed0 <FinishAesDrv+0x1f0>)
   1fe26:	681f      	ldr	r7, [r3, #0]
   1fe28:	2f00      	cmp	r7, #0
   1fe2a:	d1fc      	bne.n	1fe26 <FinishAesDrv+0x146>
   1fe2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1fe2e:	3b01      	subs	r3, #1
   1fe30:	2b06      	cmp	r3, #6
   1fe32:	d8c3      	bhi.n	1fdbc <FinishAesDrv+0xdc>
   1fe34:	a201      	add	r2, pc, #4	; (adr r2, 1fe3c <FinishAesDrv+0x15c>)
   1fe36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1fe3a:	bf00      	nop
   1fe3c:	0001fe5d 	.word	0x0001fe5d
   1fe40:	0001fe75 	.word	0x0001fe75
   1fe44:	0001fe5d 	.word	0x0001fe5d
   1fe48:	0001fdbd 	.word	0x0001fdbd
   1fe4c:	0001fdbd 	.word	0x0001fdbd
   1fe50:	0001fe75 	.word	0x0001fe75
   1fe54:	0001fe5d 	.word	0x0001fe5d
   1fe58:	4b26      	ldr	r3, [pc, #152]	; (1fef4 <FinishAesDrv+0x214>)
   1fe5a:	e7d0      	b.n	1fdfe <FinishAesDrv+0x11e>
   1fe5c:	4a21      	ldr	r2, [pc, #132]	; (1fee4 <FinishAesDrv+0x204>)
   1fe5e:	4b26      	ldr	r3, [pc, #152]	; (1fef8 <FinishAesDrv+0x218>)
   1fe60:	6812      	ldr	r2, [r2, #0]
   1fe62:	6022      	str	r2, [r4, #0]
   1fe64:	681a      	ldr	r2, [r3, #0]
   1fe66:	6062      	str	r2, [r4, #4]
   1fe68:	685a      	ldr	r2, [r3, #4]
   1fe6a:	60a2      	str	r2, [r4, #8]
   1fe6c:	3308      	adds	r3, #8
   1fe6e:	681b      	ldr	r3, [r3, #0]
   1fe70:	60e3      	str	r3, [r4, #12]
   1fe72:	e7a3      	b.n	1fdbc <FinishAesDrv+0xdc>
   1fe74:	4a1f      	ldr	r2, [pc, #124]	; (1fef4 <FinishAesDrv+0x214>)
   1fe76:	4b21      	ldr	r3, [pc, #132]	; (1fefc <FinishAesDrv+0x21c>)
   1fe78:	e7f2      	b.n	1fe60 <FinishAesDrv+0x180>
   1fe7a:	4821      	ldr	r0, [pc, #132]	; (1ff00 <FinishAesDrv+0x220>)
   1fe7c:	f7fd fd54 	bl	1d928 <CC_PalAbort>
   1fe80:	e76e      	b.n	1fd60 <FinishAesDrv+0x80>
   1fe82:	4820      	ldr	r0, [pc, #128]	; (1ff04 <FinishAesDrv+0x224>)
   1fe84:	f7fd fd50 	bl	1d928 <CC_PalAbort>
   1fe88:	e764      	b.n	1fd54 <FinishAesDrv+0x74>
   1fe8a:	481f      	ldr	r0, [pc, #124]	; (1ff08 <FinishAesDrv+0x228>)
   1fe8c:	f7fd fd4c 	bl	1d928 <CC_PalAbort>
   1fe90:	e79f      	b.n	1fdd2 <FinishAesDrv+0xf2>
   1fe92:	4f1e      	ldr	r7, [pc, #120]	; (1ff0c <FinishAesDrv+0x22c>)
   1fe94:	e792      	b.n	1fdbc <FinishAesDrv+0xdc>
   1fe96:	4f1e      	ldr	r7, [pc, #120]	; (1ff10 <FinishAesDrv+0x230>)
   1fe98:	e790      	b.n	1fdbc <FinishAesDrv+0xdc>
   1fe9a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   1fe9c:	6833      	ldr	r3, [r6, #0]
   1fe9e:	2a01      	cmp	r2, #1
   1fea0:	d00a      	beq.n	1feb8 <FinishAesDrv+0x1d8>
   1fea2:	491c      	ldr	r1, [pc, #112]	; (1ff14 <FinishAesDrv+0x234>)
   1fea4:	4a1c      	ldr	r2, [pc, #112]	; (1ff18 <FinishAesDrv+0x238>)
   1fea6:	600b      	str	r3, [r1, #0]
   1fea8:	2010      	movs	r0, #16
   1feaa:	6015      	str	r5, [r2, #0]
   1feac:	f7fe f83e 	bl	1df2c <CC_HalWaitInterrupt>
   1feb0:	4607      	mov	r7, r0
   1feb2:	2800      	cmp	r0, #0
   1feb4:	d0b6      	beq.n	1fe24 <FinishAesDrv+0x144>
   1feb6:	e781      	b.n	1fdbc <FinishAesDrv+0xdc>
   1feb8:	4918      	ldr	r1, [pc, #96]	; (1ff1c <FinishAesDrv+0x23c>)
   1feba:	4a19      	ldr	r2, [pc, #100]	; (1ff20 <FinishAesDrv+0x240>)
   1febc:	600b      	str	r3, [r1, #0]
   1febe:	2040      	movs	r0, #64	; 0x40
   1fec0:	6015      	str	r5, [r2, #0]
   1fec2:	e7f3      	b.n	1feac <FinishAesDrv+0x1cc>
   1fec4:	00f1000b 	.word	0x00f1000b
   1fec8:	20000620 	.word	0x20000620
   1fecc:	5002b810 	.word	0x5002b810
   1fed0:	5002b910 	.word	0x5002b910
   1fed4:	00f10001 	.word	0x00f10001
   1fed8:	00025c78 	.word	0x00025c78
   1fedc:	00f10005 	.word	0x00f10005
   1fee0:	00f10002 	.word	0x00f10002
   1fee4:	5002b440 	.word	0x5002b440
   1fee8:	5002b47c 	.word	0x5002b47c
   1feec:	5002b4bc 	.word	0x5002b4bc
   1fef0:	5002b524 	.word	0x5002b524
   1fef4:	5002b460 	.word	0x5002b460
   1fef8:	5002b444 	.word	0x5002b444
   1fefc:	5002b464 	.word	0x5002b464
   1ff00:	00025c38 	.word	0x00025c38
   1ff04:	00025c20 	.word	0x00025c20
   1ff08:	00025c58 	.word	0x00025c58
   1ff0c:	00f10003 	.word	0x00f10003
   1ff10:	00f10004 	.word	0x00f10004
   1ff14:	5002bc30 	.word	0x5002bc30
   1ff18:	5002bc34 	.word	0x5002bc34
   1ff1c:	5002bc28 	.word	0x5002bc28
   1ff20:	5002bc2c 	.word	0x5002bc2c

0001ff24 <kmu_validate_slot_and_size>:
   1ff24:	b921      	cbnz	r1, 1ff30 <kmu_validate_slot_and_size+0xc>
   1ff26:	4b03      	ldr	r3, [pc, #12]	; (1ff34 <kmu_validate_slot_and_size+0x10>)
   1ff28:	2800      	cmp	r0, #0
   1ff2a:	bf18      	it	ne
   1ff2c:	4618      	movne	r0, r3
   1ff2e:	4770      	bx	lr
   1ff30:	4801      	ldr	r0, [pc, #4]	; (1ff38 <kmu_validate_slot_and_size+0x14>)
   1ff32:	4770      	bx	lr
   1ff34:	00f70001 	.word	0x00f70001
   1ff38:	00f70003 	.word	0x00f70003

0001ff3c <kmu_validate_kdr_slot_and_size>:
   1ff3c:	b921      	cbnz	r1, 1ff48 <kmu_validate_kdr_slot_and_size+0xc>
   1ff3e:	4b03      	ldr	r3, [pc, #12]	; (1ff4c <kmu_validate_kdr_slot_and_size+0x10>)
   1ff40:	2800      	cmp	r0, #0
   1ff42:	bf18      	it	ne
   1ff44:	4618      	movne	r0, r3
   1ff46:	4770      	bx	lr
   1ff48:	4801      	ldr	r0, [pc, #4]	; (1ff50 <kmu_validate_kdr_slot_and_size+0x14>)
   1ff4a:	4770      	bx	lr
   1ff4c:	00f70001 	.word	0x00f70001
   1ff50:	00f70003 	.word	0x00f70003

0001ff54 <kmu_use_kdr_key>:
   1ff54:	4903      	ldr	r1, [pc, #12]	; (1ff64 <kmu_use_kdr_key+0x10>)
   1ff56:	4b04      	ldr	r3, [pc, #16]	; (1ff68 <kmu_use_kdr_key+0x14>)
   1ff58:	2000      	movs	r0, #0
   1ff5a:	2201      	movs	r2, #1
   1ff5c:	6008      	str	r0, [r1, #0]
   1ff5e:	601a      	str	r2, [r3, #0]
   1ff60:	4770      	bx	lr
   1ff62:	bf00      	nop
   1ff64:	5002ba38 	.word	0x5002ba38
   1ff68:	5002b478 	.word	0x5002b478

0001ff6c <kmu_derive_cmac>:
   1ff6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff70:	b0cd      	sub	sp, #308	; 0x134
   1ff72:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   1ff76:	460f      	mov	r7, r1
   1ff78:	2100      	movs	r1, #0
   1ff7a:	460c      	mov	r4, r1
   1ff7c:	4681      	mov	r9, r0
   1ff7e:	4616      	mov	r6, r2
   1ff80:	a80e      	add	r0, sp, #56	; 0x38
   1ff82:	2274      	movs	r2, #116	; 0x74
   1ff84:	469b      	mov	fp, r3
   1ff86:	f001 ffef 	bl	21f68 <memset>
   1ff8a:	4621      	mov	r1, r4
   1ff8c:	2280      	movs	r2, #128	; 0x80
   1ff8e:	a82c      	add	r0, sp, #176	; 0xb0
   1ff90:	942b      	str	r4, [sp, #172]	; 0xac
   1ff92:	f001 ffe9 	bl	21f68 <memset>
   1ff96:	2384      	movs	r3, #132	; 0x84
   1ff98:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   1ff9c:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   1ffa0:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   1ffa4:	9305      	str	r3, [sp, #20]
   1ffa6:	d860      	bhi.n	2006a <kmu_derive_cmac+0xfe>
   1ffa8:	ab05      	add	r3, sp, #20
   1ffaa:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   1ffae:	9301      	str	r3, [sp, #4]
   1ffb0:	9502      	str	r5, [sp, #8]
   1ffb2:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   1ffb6:	4659      	mov	r1, fp
   1ffb8:	4630      	mov	r0, r6
   1ffba:	f8cd a000 	str.w	sl, [sp]
   1ffbe:	f000 f865 	bl	2008c <UtilCmacBuildDataForDerivation>
   1ffc2:	2800      	cmp	r0, #0
   1ffc4:	d14c      	bne.n	20060 <kmu_derive_cmac+0xf4>
   1ffc6:	2303      	movs	r3, #3
   1ffc8:	f88d 3013 	strb.w	r3, [sp, #19]
   1ffcc:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1ffd0:	901c      	str	r0, [sp, #112]	; 0x70
   1ffd2:	2200      	movs	r2, #0
   1ffd4:	2110      	movs	r1, #16
   1ffd6:	a80e      	add	r0, sp, #56	; 0x38
   1ffd8:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   1ffdc:	2607      	movs	r6, #7
   1ffde:	2301      	movs	r3, #1
   1ffe0:	2401      	movs	r4, #1
   1ffe2:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   1ffe6:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   1ffea:	971a      	str	r7, [sp, #104]	; 0x68
   1ffec:	961b      	str	r6, [sp, #108]	; 0x6c
   1ffee:	9426      	str	r4, [sp, #152]	; 0x98
   1fff0:	f10d 0920 	add.w	r9, sp, #32
   1fff4:	f7ff f910 	bl	1f218 <CC_PalMemSetZeroPlat>
   1fff8:	2110      	movs	r1, #16
   1fffa:	e9cd 1900 	strd	r1, r9, [sp]
   1fffe:	ab0a      	add	r3, sp, #40	; 0x28
   20000:	9905      	ldr	r1, [sp, #20]
   20002:	4650      	mov	r0, sl
   20004:	aa06      	add	r2, sp, #24
   20006:	f7ff f9ab 	bl	1f360 <SetDataBuffersInfo>
   2000a:	4607      	mov	r7, r0
   2000c:	b150      	cbz	r0, 20024 <kmu_derive_cmac+0xb8>
   2000e:	e01e      	b.n	2004e <kmu_derive_cmac+0xe2>
   20010:	f7ff f8fe 	bl	1f210 <CC_PalMemCopyPlat>
   20014:	2110      	movs	r1, #16
   20016:	a80e      	add	r0, sp, #56	; 0x38
   20018:	f7ff f8fe 	bl	1f218 <CC_PalMemSetZeroPlat>
   2001c:	3401      	adds	r4, #1
   2001e:	1bad      	subs	r5, r5, r6
   20020:	b2e4      	uxtb	r4, r4
   20022:	d027      	beq.n	20074 <kmu_derive_cmac+0x108>
   20024:	9b05      	ldr	r3, [sp, #20]
   20026:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   2002a:	2d10      	cmp	r5, #16
   2002c:	464a      	mov	r2, r9
   2002e:	a906      	add	r1, sp, #24
   20030:	a80e      	add	r0, sp, #56	; 0x38
   20032:	462e      	mov	r6, r5
   20034:	bf28      	it	cs
   20036:	2610      	movcs	r6, #16
   20038:	f7ff fe52 	bl	1fce0 <FinishAesDrv>
   2003c:	4603      	mov	r3, r0
   2003e:	4632      	mov	r2, r6
   20040:	eb08 0007 	add.w	r0, r8, r7
   20044:	a90e      	add	r1, sp, #56	; 0x38
   20046:	4437      	add	r7, r6
   20048:	2b00      	cmp	r3, #0
   2004a:	d0e1      	beq.n	20010 <kmu_derive_cmac+0xa4>
   2004c:	461f      	mov	r7, r3
   2004e:	a80e      	add	r0, sp, #56	; 0x38
   20050:	2274      	movs	r2, #116	; 0x74
   20052:	2100      	movs	r1, #0
   20054:	f7ff f8de 	bl	1f214 <CC_PalMemSetPlat>
   20058:	4638      	mov	r0, r7
   2005a:	b04d      	add	sp, #308	; 0x134
   2005c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20060:	4f08      	ldr	r7, [pc, #32]	; (20084 <kmu_derive_cmac+0x118>)
   20062:	4638      	mov	r0, r7
   20064:	b04d      	add	sp, #308	; 0x134
   20066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2006a:	4f07      	ldr	r7, [pc, #28]	; (20088 <kmu_derive_cmac+0x11c>)
   2006c:	4638      	mov	r0, r7
   2006e:	b04d      	add	sp, #308	; 0x134
   20070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20074:	a80e      	add	r0, sp, #56	; 0x38
   20076:	2274      	movs	r2, #116	; 0x74
   20078:	2100      	movs	r1, #0
   2007a:	462f      	mov	r7, r5
   2007c:	f7ff f8ca 	bl	1f214 <CC_PalMemSetPlat>
   20080:	e7ea      	b.n	20058 <kmu_derive_cmac+0xec>
   20082:	bf00      	nop
   20084:	00f1000e 	.word	0x00f1000e
   20088:	00f1000f 	.word	0x00f1000f

0002008c <UtilCmacBuildDataForDerivation>:
   2008c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20090:	b082      	sub	sp, #8
   20092:	2600      	movs	r6, #0
   20094:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   20096:	9601      	str	r6, [sp, #4]
   20098:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2009c:	d83c      	bhi.n	20118 <UtilCmacBuildDataForDerivation+0x8c>
   2009e:	00ee      	lsls	r6, r5, #3
   200a0:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   200a4:	f101 35ff 	add.w	r5, r1, #4294967295
   200a8:	461f      	mov	r7, r3
   200aa:	bf34      	ite	cc
   200ac:	2303      	movcc	r3, #3
   200ae:	2304      	movcs	r3, #4
   200b0:	2d3f      	cmp	r5, #63	; 0x3f
   200b2:	460c      	mov	r4, r1
   200b4:	9300      	str	r3, [sp, #0]
   200b6:	d82f      	bhi.n	20118 <UtilCmacBuildDataForDerivation+0x8c>
   200b8:	b370      	cbz	r0, 20118 <UtilCmacBuildDataForDerivation+0x8c>
   200ba:	4690      	mov	r8, r2
   200bc:	b117      	cbz	r7, 200c4 <UtilCmacBuildDataForDerivation+0x38>
   200be:	b35a      	cbz	r2, 20118 <UtilCmacBuildDataForDerivation+0x8c>
   200c0:	2f40      	cmp	r7, #64	; 0x40
   200c2:	d829      	bhi.n	20118 <UtilCmacBuildDataForDerivation+0x8c>
   200c4:	9a08      	ldr	r2, [sp, #32]
   200c6:	b33a      	cbz	r2, 20118 <UtilCmacBuildDataForDerivation+0x8c>
   200c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   200ca:	6811      	ldr	r1, [r2, #0]
   200cc:	b321      	cbz	r1, 20118 <UtilCmacBuildDataForDerivation+0x8c>
   200ce:	19e2      	adds	r2, r4, r7
   200d0:	4413      	add	r3, r2
   200d2:	4299      	cmp	r1, r3
   200d4:	d320      	bcc.n	20118 <UtilCmacBuildDataForDerivation+0x8c>
   200d6:	9b08      	ldr	r3, [sp, #32]
   200d8:	4622      	mov	r2, r4
   200da:	4601      	mov	r1, r0
   200dc:	1c58      	adds	r0, r3, #1
   200de:	f7ff f897 	bl	1f210 <CC_PalMemCopyPlat>
   200e2:	9b08      	ldr	r3, [sp, #32]
   200e4:	4423      	add	r3, r4
   200e6:	2200      	movs	r2, #0
   200e8:	3402      	adds	r4, #2
   200ea:	705a      	strb	r2, [r3, #1]
   200ec:	bb07      	cbnz	r7, 20130 <UtilCmacBuildDataForDerivation+0xa4>
   200ee:	2eff      	cmp	r6, #255	; 0xff
   200f0:	9600      	str	r6, [sp, #0]
   200f2:	d915      	bls.n	20120 <UtilCmacBuildDataForDerivation+0x94>
   200f4:	9b08      	ldr	r3, [sp, #32]
   200f6:	0235      	lsls	r5, r6, #8
   200f8:	b2ad      	uxth	r5, r5
   200fa:	1918      	adds	r0, r3, r4
   200fc:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   20100:	2202      	movs	r2, #2
   20102:	a901      	add	r1, sp, #4
   20104:	9501      	str	r5, [sp, #4]
   20106:	f7ff f883 	bl	1f210 <CC_PalMemCopyPlat>
   2010a:	3402      	adds	r4, #2
   2010c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2010e:	2000      	movs	r0, #0
   20110:	601c      	str	r4, [r3, #0]
   20112:	b002      	add	sp, #8
   20114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20118:	4809      	ldr	r0, [pc, #36]	; (20140 <UtilCmacBuildDataForDerivation+0xb4>)
   2011a:	b002      	add	sp, #8
   2011c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20120:	9b08      	ldr	r3, [sp, #32]
   20122:	2201      	movs	r2, #1
   20124:	1918      	adds	r0, r3, r4
   20126:	4669      	mov	r1, sp
   20128:	f7ff f872 	bl	1f210 <CC_PalMemCopyPlat>
   2012c:	3401      	adds	r4, #1
   2012e:	e7ed      	b.n	2010c <UtilCmacBuildDataForDerivation+0x80>
   20130:	9b08      	ldr	r3, [sp, #32]
   20132:	4641      	mov	r1, r8
   20134:	1918      	adds	r0, r3, r4
   20136:	463a      	mov	r2, r7
   20138:	f7ff f86a 	bl	1f210 <CC_PalMemCopyPlat>
   2013c:	443c      	add	r4, r7
   2013e:	e7d6      	b.n	200ee <UtilCmacBuildDataForDerivation+0x62>
   20140:	80000006 	.word	0x80000006

00020144 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   20144:	78cb      	ldrb	r3, [r1, #3]
   20146:	7802      	ldrb	r2, [r0, #0]
   20148:	4053      	eors	r3, r2
   2014a:	7003      	strb	r3, [r0, #0]
   2014c:	884b      	ldrh	r3, [r1, #2]
   2014e:	7842      	ldrb	r2, [r0, #1]
   20150:	4053      	eors	r3, r2
   20152:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   20154:	680a      	ldr	r2, [r1, #0]
   20156:	7883      	ldrb	r3, [r0, #2]
   20158:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2015c:	7083      	strb	r3, [r0, #2]
   2015e:	680a      	ldr	r2, [r1, #0]
   20160:	78c3      	ldrb	r3, [r0, #3]
   20162:	4053      	eors	r3, r2
   20164:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   20166:	79cb      	ldrb	r3, [r1, #7]
   20168:	7902      	ldrb	r2, [r0, #4]
   2016a:	4053      	eors	r3, r2
   2016c:	7103      	strb	r3, [r0, #4]
   2016e:	88cb      	ldrh	r3, [r1, #6]
   20170:	7942      	ldrb	r2, [r0, #5]
   20172:	4053      	eors	r3, r2
   20174:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   20176:	684a      	ldr	r2, [r1, #4]
   20178:	7983      	ldrb	r3, [r0, #6]
   2017a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2017e:	7183      	strb	r3, [r0, #6]
   20180:	684a      	ldr	r2, [r1, #4]
   20182:	79c3      	ldrb	r3, [r0, #7]
   20184:	4053      	eors	r3, r2
   20186:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   20188:	7acb      	ldrb	r3, [r1, #11]
   2018a:	7a02      	ldrb	r2, [r0, #8]
   2018c:	4053      	eors	r3, r2
   2018e:	7203      	strb	r3, [r0, #8]
   20190:	7a42      	ldrb	r2, [r0, #9]
   20192:	894b      	ldrh	r3, [r1, #10]
   20194:	4053      	eors	r3, r2
   20196:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   20198:	688a      	ldr	r2, [r1, #8]
   2019a:	7a83      	ldrb	r3, [r0, #10]
   2019c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   201a0:	7283      	strb	r3, [r0, #10]
   201a2:	688a      	ldr	r2, [r1, #8]
   201a4:	7ac3      	ldrb	r3, [r0, #11]
   201a6:	4053      	eors	r3, r2
   201a8:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   201aa:	7bcb      	ldrb	r3, [r1, #15]
   201ac:	7b02      	ldrb	r2, [r0, #12]
   201ae:	4053      	eors	r3, r2
   201b0:	7303      	strb	r3, [r0, #12]
   201b2:	89cb      	ldrh	r3, [r1, #14]
   201b4:	7b42      	ldrb	r2, [r0, #13]
   201b6:	4053      	eors	r3, r2
   201b8:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   201ba:	68ca      	ldr	r2, [r1, #12]
   201bc:	7b83      	ldrb	r3, [r0, #14]
   201be:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   201c2:	7383      	strb	r3, [r0, #14]
   201c4:	68ca      	ldr	r2, [r1, #12]
   201c6:	7bc3      	ldrb	r3, [r0, #15]
   201c8:	4053      	eors	r3, r2
   201ca:	73c3      	strb	r3, [r0, #15]
}
   201cc:	4770      	bx	lr

000201ce <shift_rows>:
{
   201ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   201d0:	7802      	ldrb	r2, [r0, #0]
   201d2:	f88d 2000 	strb.w	r2, [sp]
   201d6:	7942      	ldrb	r2, [r0, #5]
   201d8:	f88d 2001 	strb.w	r2, [sp, #1]
   201dc:	7a82      	ldrb	r2, [r0, #10]
   201de:	f88d 2002 	strb.w	r2, [sp, #2]
   201e2:	7bc2      	ldrb	r2, [r0, #15]
   201e4:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   201e8:	7902      	ldrb	r2, [r0, #4]
   201ea:	f88d 2004 	strb.w	r2, [sp, #4]
   201ee:	7a42      	ldrb	r2, [r0, #9]
   201f0:	f88d 2005 	strb.w	r2, [sp, #5]
   201f4:	7b82      	ldrb	r2, [r0, #14]
   201f6:	f88d 2006 	strb.w	r2, [sp, #6]
   201fa:	78c2      	ldrb	r2, [r0, #3]
   201fc:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   20200:	7a02      	ldrb	r2, [r0, #8]
   20202:	f88d 2008 	strb.w	r2, [sp, #8]
   20206:	7b42      	ldrb	r2, [r0, #13]
   20208:	f88d 2009 	strb.w	r2, [sp, #9]
   2020c:	7882      	ldrb	r2, [r0, #2]
   2020e:	f88d 200a 	strb.w	r2, [sp, #10]
   20212:	79c2      	ldrb	r2, [r0, #7]
   20214:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   20218:	7b02      	ldrb	r2, [r0, #12]
   2021a:	f88d 200c 	strb.w	r2, [sp, #12]
   2021e:	7842      	ldrb	r2, [r0, #1]
   20220:	7ac3      	ldrb	r3, [r0, #11]
   20222:	f88d 200d 	strb.w	r2, [sp, #13]
   20226:	7982      	ldrb	r2, [r0, #6]
   20228:	f88d 200e 	strb.w	r2, [sp, #14]
   2022c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   20230:	2310      	movs	r3, #16
   20232:	466a      	mov	r2, sp
   20234:	4619      	mov	r1, r3
   20236:	f001 fe05 	bl	21e44 <_copy>
}
   2023a:	b005      	add	sp, #20
   2023c:	f85d fb04 	ldr.w	pc, [sp], #4

00020240 <mult_row_column>:
{
   20240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20242:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   20244:	7808      	ldrb	r0, [r1, #0]
{
   20246:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   20248:	f001 fe0b 	bl	21e62 <_double_byte>
   2024c:	4605      	mov	r5, r0
   2024e:	7860      	ldrb	r0, [r4, #1]
   20250:	f001 fe07 	bl	21e62 <_double_byte>
   20254:	78a2      	ldrb	r2, [r4, #2]
   20256:	7863      	ldrb	r3, [r4, #1]
   20258:	4053      	eors	r3, r2
   2025a:	78e2      	ldrb	r2, [r4, #3]
   2025c:	4053      	eors	r3, r2
   2025e:	405d      	eors	r5, r3
   20260:	4045      	eors	r5, r0
   20262:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   20264:	7860      	ldrb	r0, [r4, #1]
   20266:	7827      	ldrb	r7, [r4, #0]
   20268:	f001 fdfb 	bl	21e62 <_double_byte>
   2026c:	4605      	mov	r5, r0
   2026e:	78a0      	ldrb	r0, [r4, #2]
   20270:	f001 fdf7 	bl	21e62 <_double_byte>
   20274:	78a3      	ldrb	r3, [r4, #2]
   20276:	405f      	eors	r7, r3
   20278:	78e3      	ldrb	r3, [r4, #3]
   2027a:	405f      	eors	r7, r3
   2027c:	407d      	eors	r5, r7
   2027e:	4045      	eors	r5, r0
   20280:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   20282:	78a0      	ldrb	r0, [r4, #2]
   20284:	7865      	ldrb	r5, [r4, #1]
   20286:	7827      	ldrb	r7, [r4, #0]
   20288:	f001 fdeb 	bl	21e62 <_double_byte>
   2028c:	406f      	eors	r7, r5
   2028e:	4605      	mov	r5, r0
   20290:	78e0      	ldrb	r0, [r4, #3]
   20292:	f001 fde6 	bl	21e62 <_double_byte>
   20296:	78e3      	ldrb	r3, [r4, #3]
   20298:	405f      	eors	r7, r3
   2029a:	407d      	eors	r5, r7
   2029c:	4045      	eors	r5, r0
   2029e:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   202a0:	7820      	ldrb	r0, [r4, #0]
   202a2:	f001 fdde 	bl	21e62 <_double_byte>
   202a6:	7863      	ldrb	r3, [r4, #1]
   202a8:	7825      	ldrb	r5, [r4, #0]
   202aa:	405d      	eors	r5, r3
   202ac:	78a3      	ldrb	r3, [r4, #2]
   202ae:	405d      	eors	r5, r3
   202b0:	4045      	eors	r5, r0
   202b2:	78e0      	ldrb	r0, [r4, #3]
   202b4:	f001 fdd5 	bl	21e62 <_double_byte>
   202b8:	b2ed      	uxtb	r5, r5
   202ba:	4045      	eors	r5, r0
   202bc:	70f5      	strb	r5, [r6, #3]
}
   202be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000202c0 <bas_init>:
}
   202c0:	2000      	movs	r0, #0
   202c2:	4770      	bx	lr

000202c4 <encode_uint>:
{
   202c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   202c8:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   202ca:	78d3      	ldrb	r3, [r2, #3]
{
   202cc:	4614      	mov	r4, r2
	switch (specifier) {
   202ce:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   202d0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   202d4:	4606      	mov	r6, r0
   202d6:	460f      	mov	r7, r1
   202d8:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   202da:	d02d      	beq.n	20338 <encode_uint+0x74>
   202dc:	d828      	bhi.n	20330 <encode_uint+0x6c>
		return 16;
   202de:	2b58      	cmp	r3, #88	; 0x58
   202e0:	bf14      	ite	ne
   202e2:	250a      	movne	r5, #10
   202e4:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
   202e6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   202ea:	46aa      	mov	sl, r5
   202ec:	f04f 0b00 	mov.w	fp, #0
   202f0:	4652      	mov	r2, sl
   202f2:	465b      	mov	r3, fp
   202f4:	4630      	mov	r0, r6
   202f6:	4639      	mov	r1, r7
   202f8:	f7e0 ff02 	bl	1100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   202fc:	2a09      	cmp	r2, #9
   202fe:	b2d3      	uxtb	r3, r2
   20300:	d81f      	bhi.n	20342 <encode_uint+0x7e>
   20302:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   20304:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   20306:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   20308:	bf08      	it	eq
   2030a:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2030c:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   20310:	d301      	bcc.n	20316 <encode_uint+0x52>
   20312:	45c8      	cmp	r8, r9
   20314:	d812      	bhi.n	2033c <encode_uint+0x78>
	if (conv->flag_hash) {
   20316:	7823      	ldrb	r3, [r4, #0]
   20318:	069b      	lsls	r3, r3, #26
   2031a:	d505      	bpl.n	20328 <encode_uint+0x64>
		if (radix == 8) {
   2031c:	2d08      	cmp	r5, #8
   2031e:	d116      	bne.n	2034e <encode_uint+0x8a>
			conv->altform_0 = true;
   20320:	78a3      	ldrb	r3, [r4, #2]
   20322:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   20326:	70a3      	strb	r3, [r4, #2]
}
   20328:	4640      	mov	r0, r8
   2032a:	b003      	add	sp, #12
   2032c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   20330:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   20334:	2b70      	cmp	r3, #112	; 0x70
   20336:	e7d3      	b.n	202e0 <encode_uint+0x1c>
	switch (specifier) {
   20338:	2508      	movs	r5, #8
   2033a:	e7d4      	b.n	202e6 <encode_uint+0x22>
		value /= radix;
   2033c:	4606      	mov	r6, r0
   2033e:	460f      	mov	r7, r1
   20340:	e7d6      	b.n	202f0 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   20342:	9a01      	ldr	r2, [sp, #4]
   20344:	2a19      	cmp	r2, #25
   20346:	bf94      	ite	ls
   20348:	3337      	addls	r3, #55	; 0x37
   2034a:	3357      	addhi	r3, #87	; 0x57
   2034c:	e7da      	b.n	20304 <encode_uint+0x40>
		} else if (radix == 16) {
   2034e:	2d10      	cmp	r5, #16
   20350:	d1ea      	bne.n	20328 <encode_uint+0x64>
			conv->altform_0c = true;
   20352:	78a3      	ldrb	r3, [r4, #2]
   20354:	f043 0310 	orr.w	r3, r3, #16
   20358:	e7e5      	b.n	20326 <encode_uint+0x62>

0002035a <outs>:
{
   2035a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2035e:	4607      	mov	r7, r0
   20360:	4688      	mov	r8, r1
   20362:	4615      	mov	r5, r2
   20364:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   20366:	4614      	mov	r4, r2
   20368:	42b4      	cmp	r4, r6
   2036a:	eba4 0005 	sub.w	r0, r4, r5
   2036e:	d302      	bcc.n	20376 <outs+0x1c>
   20370:	b93e      	cbnz	r6, 20382 <outs+0x28>
   20372:	7823      	ldrb	r3, [r4, #0]
   20374:	b12b      	cbz	r3, 20382 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   20376:	f814 0b01 	ldrb.w	r0, [r4], #1
   2037a:	4641      	mov	r1, r8
   2037c:	47b8      	blx	r7
		if (rc < 0) {
   2037e:	2800      	cmp	r0, #0
   20380:	daf2      	bge.n	20368 <outs+0xe>
}
   20382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020386 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   20386:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   20388:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2038a:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2038c:	f912 3b10 	ldrsb.w	r3, [r2], #16
   20390:	2b00      	cmp	r3, #0
   20392:	bfb4      	ite	lt
   20394:	2387      	movlt	r3, #135	; 0x87
   20396:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   20398:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2039c:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   203a0:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   203a2:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   203a6:	d002      	beq.n	203ae <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   203a8:	7813      	ldrb	r3, [r2, #0]
   203aa:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   203ac:	e7f4      	b.n	20398 <gf_double+0x12>
	}
}
   203ae:	bd10      	pop	{r4, pc}

000203b0 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   203b0:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   203b2:	b120      	cbz	r0, 203be <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   203b4:	2258      	movs	r2, #88	; 0x58
   203b6:	2100      	movs	r1, #0
   203b8:	f001 fd51 	bl	21e5e <_set>
   203bc:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   203be:	bd08      	pop	{r3, pc}

000203c0 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   203c0:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   203c2:	4604      	mov	r4, r0
   203c4:	b188      	cbz	r0, 203ea <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   203c6:	2210      	movs	r2, #16
   203c8:	2100      	movs	r1, #0
   203ca:	f001 fd48 	bl	21e5e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   203ce:	2210      	movs	r2, #16
   203d0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   203d4:	2100      	movs	r1, #0
   203d6:	f001 fd42 	bl	21e5e <_set>
	s->leftover_offset = 0;
   203da:	2300      	movs	r3, #0
   203dc:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   203de:	2200      	movs	r2, #0
   203e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   203e4:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   203e8:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   203ea:	bd10      	pop	{r4, pc}

000203ec <tc_cmac_setup>:
{
   203ec:	b570      	push	{r4, r5, r6, lr}
   203ee:	460d      	mov	r5, r1
   203f0:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   203f2:	4604      	mov	r4, r0
   203f4:	b310      	cbz	r0, 2043c <tc_cmac_setup+0x50>
   203f6:	b311      	cbz	r1, 2043e <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   203f8:	2258      	movs	r2, #88	; 0x58
   203fa:	2100      	movs	r1, #0
   203fc:	f001 fd2f 	bl	21e5e <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   20400:	4629      	mov	r1, r5
	s->sched = sched;
   20402:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   20404:	4630      	mov	r0, r6
   20406:	f7f0 fc9f 	bl	10d48 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2040a:	2210      	movs	r2, #16
   2040c:	2100      	movs	r1, #0
   2040e:	4620      	mov	r0, r4
   20410:	f001 fd25 	bl	21e5e <_set>
	gf_double (s->K1, s->iv);
   20414:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   20418:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2041a:	4621      	mov	r1, r4
   2041c:	4620      	mov	r0, r4
   2041e:	f7f0 fce5 	bl	10dec <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   20422:	4621      	mov	r1, r4
   20424:	4628      	mov	r0, r5
   20426:	f7ff ffae 	bl	20386 <gf_double>
	gf_double (s->K2, s->K1);
   2042a:	4629      	mov	r1, r5
   2042c:	f104 0020 	add.w	r0, r4, #32
   20430:	f7ff ffa9 	bl	20386 <gf_double>
	tc_cmac_init(s);
   20434:	4620      	mov	r0, r4
   20436:	f7ff ffc3 	bl	203c0 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2043a:	2001      	movs	r0, #1
}
   2043c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2043e:	4608      	mov	r0, r1
   20440:	e7fc      	b.n	2043c <tc_cmac_setup+0x50>

00020442 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   20442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20446:	460d      	mov	r5, r1
   20448:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2044a:	4604      	mov	r4, r0
   2044c:	2800      	cmp	r0, #0
   2044e:	d062      	beq.n	20516 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   20450:	b912      	cbnz	r2, 20458 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   20452:	2001      	movs	r0, #1
}
   20454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   20458:	2900      	cmp	r1, #0
   2045a:	d05c      	beq.n	20516 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   2045c:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   20460:	ea50 0301 	orrs.w	r3, r0, r1
   20464:	d057      	beq.n	20516 <tc_cmac_update+0xd4>
	s->countdown--;
   20466:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   2046a:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   2046e:	f141 33ff 	adc.w	r3, r1, #4294967295
   20472:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   20476:	f1b8 0f00 	cmp.w	r8, #0
   2047a:	d02a      	beq.n	204d2 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2047c:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   20480:	f108 0030 	add.w	r0, r8, #48	; 0x30
   20484:	42be      	cmp	r6, r7
   20486:	4420      	add	r0, r4
   20488:	d208      	bcs.n	2049c <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2048a:	462a      	mov	r2, r5
   2048c:	4633      	mov	r3, r6
   2048e:	4631      	mov	r1, r6
   20490:	f001 fcd8 	bl	21e44 <_copy>
			s->leftover_offset += data_length;
   20494:	6c62      	ldr	r2, [r4, #68]	; 0x44
   20496:	4432      	add	r2, r6
   20498:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2049a:	e7da      	b.n	20452 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   2049c:	463b      	mov	r3, r7
   2049e:	462a      	mov	r2, r5
   204a0:	4639      	mov	r1, r7
   204a2:	f001 fccf 	bl	21e44 <_copy>
		data_length -= remaining_space;
   204a6:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   204a8:	2300      	movs	r3, #0
   204aa:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   204ac:	4446      	add	r6, r8
		data += remaining_space;
   204ae:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   204b0:	1e63      	subs	r3, r4, #1
   204b2:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   204b6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   204ba:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   204be:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   204c0:	ea82 0200 	eor.w	r2, r2, r0
   204c4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   204c6:	d1f6      	bne.n	204b6 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   204c8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   204ca:	4621      	mov	r1, r4
   204cc:	4620      	mov	r0, r4
   204ce:	f7f0 fc8d 	bl	10dec <tc_aes_encrypt>
   204d2:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   204d6:	2e10      	cmp	r6, #16
   204d8:	d80a      	bhi.n	204f0 <tc_cmac_update+0xae>
	if (data_length > 0) {
   204da:	2e00      	cmp	r6, #0
   204dc:	d0b9      	beq.n	20452 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   204de:	4633      	mov	r3, r6
   204e0:	462a      	mov	r2, r5
   204e2:	4631      	mov	r1, r6
   204e4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   204e8:	f001 fcac 	bl	21e44 <_copy>
		s->leftover_offset = data_length;
   204ec:	6466      	str	r6, [r4, #68]	; 0x44
   204ee:	e7b0      	b.n	20452 <tc_cmac_update+0x10>
   204f0:	1e63      	subs	r3, r4, #1
   204f2:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   204f4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   204f8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   204fc:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   204fe:	ea82 0200 	eor.w	r2, r2, r0
   20502:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20504:	d1f6      	bne.n	204f4 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   20506:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   20508:	4621      	mov	r1, r4
   2050a:	4620      	mov	r0, r4
   2050c:	f7f0 fc6e 	bl	10dec <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   20510:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   20512:	3e10      	subs	r6, #16
   20514:	e7df      	b.n	204d6 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   20516:	2000      	movs	r0, #0
   20518:	e79c      	b.n	20454 <tc_cmac_update+0x12>

0002051a <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2051a:	b570      	push	{r4, r5, r6, lr}
   2051c:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2051e:	4605      	mov	r5, r0
   20520:	b1e8      	cbz	r0, 2055e <tc_cmac_final+0x44>
   20522:	b369      	cbz	r1, 20580 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   20524:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   20526:	2a10      	cmp	r2, #16
   20528:	d11a      	bne.n	20560 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2052a:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2052c:	1e63      	subs	r3, r4, #1
   2052e:	3901      	subs	r1, #1
   20530:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   20534:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   20538:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   2053c:	4072      	eors	r2, r6
   2053e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   20542:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   20544:	ea82 0206 	eor.w	r2, r2, r6
   20548:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2054a:	d1f3      	bne.n	20534 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2054c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2054e:	4621      	mov	r1, r4
   20550:	4628      	mov	r0, r5
   20552:	f7f0 fc4b 	bl	10dec <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   20556:	4620      	mov	r0, r4
   20558:	f7ff ff2a 	bl	203b0 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2055c:	2001      	movs	r0, #1
}
   2055e:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   20560:	f102 0030 	add.w	r0, r2, #48	; 0x30
   20564:	2100      	movs	r1, #0
   20566:	f1c2 0210 	rsb	r2, r2, #16
   2056a:	4420      	add	r0, r4
   2056c:	f001 fc77 	bl	21e5e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   20570:	6c63      	ldr	r3, [r4, #68]	; 0x44
   20572:	4423      	add	r3, r4
   20574:	2280      	movs	r2, #128	; 0x80
   20576:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2057a:	f104 0120 	add.w	r1, r4, #32
   2057e:	e7d5      	b.n	2052c <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   20580:	4608      	mov	r0, r1
   20582:	e7ec      	b.n	2055e <tc_cmac_final+0x44>

00020584 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   20584:	4770      	bx	lr

00020586 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   20586:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   2058a:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   2058e:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   20590:	4640      	mov	r0, r8
{
   20592:	461f      	mov	r7, r3
   20594:	460c      	mov	r4, r1
   20596:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   20598:	f001 fc98 	bl	21ecc <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   2059c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   205a0:	9300      	str	r3, [sp, #0]
   205a2:	b280      	uxth	r0, r0
   205a4:	e9cd 8001 	strd	r8, r0, [sp, #4]
   205a8:	463b      	mov	r3, r7
   205aa:	4632      	mov	r2, r6
   205ac:	4621      	mov	r1, r4
   205ae:	4628      	mov	r0, r5
   205b0:	f002 fd0c 	bl	22fcc <bt_gatt_attr_read>
}
   205b4:	b004      	add	sp, #16
   205b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000205ba <uECC_vli_add>:
{
   205ba:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   205bc:	2400      	movs	r4, #0
{
   205be:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   205c0:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   205c2:	b265      	sxtb	r5, r4
   205c4:	42ab      	cmp	r3, r5
   205c6:	dc00      	bgt.n	205ca <uECC_vli_add+0x10>
}
   205c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   205ca:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   205ce:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   205d2:	443d      	add	r5, r7
   205d4:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   205d6:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   205d8:	bf8c      	ite	hi
   205da:	2701      	movhi	r7, #1
   205dc:	2700      	movls	r7, #0
		result[i] = sum;
   205de:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   205e2:	bf18      	it	ne
   205e4:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   205e6:	3401      	adds	r4, #1
   205e8:	e7eb      	b.n	205c2 <uECC_vli_add+0x8>

000205ea <uECC_vli_rshift1>:
	vli += num_words;
   205ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   205ee:	2300      	movs	r3, #0
	while (vli-- > end) {
   205f0:	4288      	cmp	r0, r1
   205f2:	d300      	bcc.n	205f6 <uECC_vli_rshift1+0xc>
}
   205f4:	4770      	bx	lr
		uECC_word_t temp = *vli;
   205f6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   205fa:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   205fe:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   20600:	07d3      	lsls	r3, r2, #31
   20602:	e7f5      	b.n	205f0 <uECC_vli_rshift1+0x6>

00020604 <vli_modInv_update>:
	if (!EVEN(uv)) {
   20604:	6803      	ldr	r3, [r0, #0]
{
   20606:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   20608:	f013 0601 	ands.w	r6, r3, #1
{
   2060c:	4605      	mov	r5, r0
   2060e:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   20610:	d005      	beq.n	2061e <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   20612:	4613      	mov	r3, r2
   20614:	460a      	mov	r2, r1
   20616:	4601      	mov	r1, r0
   20618:	f7ff ffcf 	bl	205ba <uECC_vli_add>
   2061c:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   2061e:	4621      	mov	r1, r4
   20620:	4628      	mov	r0, r5
   20622:	f7ff ffe2 	bl	205ea <uECC_vli_rshift1>
	if (carry) {
   20626:	b146      	cbz	r6, 2063a <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   20628:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   2062c:	3a01      	subs	r2, #1
   2062e:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   20632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   20636:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   2063a:	bd70      	pop	{r4, r5, r6, pc}

0002063c <uECC_vli_mult>:
{
   2063c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   20640:	2500      	movs	r5, #0
{
   20642:	b087      	sub	sp, #28
   20644:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   20648:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   2064a:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   2064c:	fa4f f885 	sxtb.w	r8, r5
   20650:	4543      	cmp	r3, r8
   20652:	dc16      	bgt.n	20682 <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   20654:	f04f 35ff 	mov.w	r5, #4294967295
   20658:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   2065c:	9502      	str	r5, [sp, #8]
   2065e:	f04f 0a00 	mov.w	sl, #0
   20662:	9e02      	ldr	r6, [sp, #8]
   20664:	fa53 fe8a 	uxtab	lr, r3, sl
   20668:	fa4f fe8e 	sxtb.w	lr, lr
   2066c:	45b6      	cmp	lr, r6
   2066e:	fa5f f58a 	uxtb.w	r5, sl
   20672:	db2d      	blt.n	206d0 <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   20674:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   20678:	f840 2c04 	str.w	r2, [r0, #-4]
}
   2067c:	b007      	add	sp, #28
   2067e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20682:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   20684:	f04f 0c00 	mov.w	ip, #0
   20688:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   2068c:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   2068e:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   20692:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   20694:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   20698:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   2069c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   206a0:	fba7 ab06 	umull	sl, fp, r7, r6
   206a4:	eb1a 0601 	adds.w	r6, sl, r1
   206a8:	f10c 0c01 	add.w	ip, ip, #1
   206ac:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   206b0:	fa4f fa8c 	sxtb.w	sl, ip
   206b4:	bf2c      	ite	cs
   206b6:	2201      	movcs	r2, #1
   206b8:	2200      	movcc	r2, #0
   206ba:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   206bc:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   206be:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   206c0:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   206c2:	dde4      	ble.n	2068e <uECC_vli_mult+0x52>
		result[k] = r0;
   206c4:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   206c8:	463a      	mov	r2, r7
   206ca:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   206cc:	4674      	mov	r4, lr
   206ce:	e7bd      	b.n	2064c <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   206d0:	3501      	adds	r5, #1
   206d2:	9900      	ldr	r1, [sp, #0]
   206d4:	9e01      	ldr	r6, [sp, #4]
   206d6:	fa4f fc85 	sxtb.w	ip, r5
   206da:	ebae 0b0c 	sub.w	fp, lr, ip
   206de:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   206e2:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   206e6:	4621      	mov	r1, r4
   206e8:	2400      	movs	r4, #0
   206ea:	459c      	cmp	ip, r3
   206ec:	db05      	blt.n	206fa <uECC_vli_mult+0xbe>
		result[k] = r0;
   206ee:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   206f2:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   206f6:	460a      	mov	r2, r1
   206f8:	e7b3      	b.n	20662 <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   206fa:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   206fe:	f855 7b04 	ldr.w	r7, [r5], #4
   20702:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   20706:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   2070a:	fba7 6706 	umull	r6, r7, r7, r6
   2070e:	eb16 0801 	adds.w	r8, r6, r1
   20712:	eb57 0902 	adcs.w	r9, r7, r2
   20716:	bf2c      	ite	cs
   20718:	2201      	movcs	r2, #1
   2071a:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2071c:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   20720:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   20722:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   20724:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   20726:	fa4f fc8c 	sxtb.w	ip, ip
   2072a:	e7de      	b.n	206ea <uECC_vli_mult+0xae>

0002072c <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   2072c:	2300      	movs	r3, #0
{
   2072e:	b510      	push	{r4, lr}
		 vli[i] = 0;
   20730:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   20732:	b25a      	sxtb	r2, r3
   20734:	4291      	cmp	r1, r2
   20736:	dc00      	bgt.n	2073a <uECC_vli_clear+0xe>
}
   20738:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   2073a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   2073e:	3301      	adds	r3, #1
   20740:	e7f7      	b.n	20732 <uECC_vli_clear+0x6>

00020742 <uECC_vli_isZero>:
{
   20742:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   20744:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   20746:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   20748:	b25c      	sxtb	r4, r3
   2074a:	42a1      	cmp	r1, r4
   2074c:	dc03      	bgt.n	20756 <uECC_vli_isZero+0x14>
}
   2074e:	fab2 f082 	clz	r0, r2
   20752:	0940      	lsrs	r0, r0, #5
   20754:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   20756:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   2075a:	3301      	adds	r3, #1
   2075c:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   2075e:	e7f3      	b.n	20748 <uECC_vli_isZero+0x6>

00020760 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   20760:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   20762:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   20764:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   20768:	f001 011f 	and.w	r1, r1, #31
   2076c:	fa03 f101 	lsl.w	r1, r3, r1
}
   20770:	4008      	ands	r0, r1
   20772:	4770      	bx	lr

00020774 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   20774:	3901      	subs	r1, #1
   20776:	b24b      	sxtb	r3, r1
{
   20778:	4602      	mov	r2, r0
   2077a:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   2077e:	2b00      	cmp	r3, #0
   20780:	da03      	bge.n	2078a <uECC_vli_numBits+0x16>
	return (i + 1);
   20782:	3301      	adds	r3, #1
   20784:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   20786:	b938      	cbnz	r0, 20798 <uECC_vli_numBits+0x24>
   20788:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   2078a:	f851 0904 	ldr.w	r0, [r1], #-4
   2078e:	2800      	cmp	r0, #0
   20790:	d1f7      	bne.n	20782 <uECC_vli_numBits+0xe>
   20792:	3b01      	subs	r3, #1
   20794:	b25b      	sxtb	r3, r3
   20796:	e7f2      	b.n	2077e <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   20798:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   2079c:	3b01      	subs	r3, #1
   2079e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   207a2:	2300      	movs	r3, #0
   207a4:	b922      	cbnz	r2, 207b0 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   207a6:	3801      	subs	r0, #1
   207a8:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   207ac:	b200      	sxth	r0, r0
}
   207ae:	4770      	bx	lr
		digit >>= 1;
   207b0:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   207b2:	3301      	adds	r3, #1
   207b4:	e7f6      	b.n	207a4 <uECC_vli_numBits+0x30>

000207b6 <uECC_vli_set>:
{
   207b6:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   207b8:	2300      	movs	r3, #0
   207ba:	b25c      	sxtb	r4, r3
   207bc:	42a2      	cmp	r2, r4
   207be:	dc00      	bgt.n	207c2 <uECC_vli_set+0xc>
}
   207c0:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   207c2:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   207c6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   207ca:	3301      	adds	r3, #1
   207cc:	e7f5      	b.n	207ba <uECC_vli_set+0x4>

000207ce <uECC_vli_cmp_unsafe>:
{
   207ce:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   207d0:	3a01      	subs	r2, #1
   207d2:	b253      	sxtb	r3, r2
   207d4:	009a      	lsls	r2, r3, #2
   207d6:	2b00      	cmp	r3, #0
   207d8:	da01      	bge.n	207de <uECC_vli_cmp_unsafe+0x10>
	return 0;
   207da:	2000      	movs	r0, #0
}
   207dc:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   207de:	5885      	ldr	r5, [r0, r2]
   207e0:	588c      	ldr	r4, [r1, r2]
   207e2:	42a5      	cmp	r5, r4
   207e4:	d805      	bhi.n	207f2 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   207e6:	f1a2 0204 	sub.w	r2, r2, #4
   207ea:	d304      	bcc.n	207f6 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   207ec:	3b01      	subs	r3, #1
   207ee:	b25b      	sxtb	r3, r3
   207f0:	e7f1      	b.n	207d6 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   207f2:	2001      	movs	r0, #1
   207f4:	e7f2      	b.n	207dc <uECC_vli_cmp_unsafe+0xe>
			return -1;
   207f6:	f04f 30ff 	mov.w	r0, #4294967295
   207fa:	e7ef      	b.n	207dc <uECC_vli_cmp_unsafe+0xe>

000207fc <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   207fc:	3a01      	subs	r2, #1
   207fe:	b253      	sxtb	r3, r2
{
   20800:	b570      	push	{r4, r5, r6, lr}
   20802:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   20804:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   20806:	2b00      	cmp	r3, #0
   20808:	da03      	bge.n	20812 <uECC_vli_equal+0x16>
}
   2080a:	1e20      	subs	r0, r4, #0
   2080c:	bf18      	it	ne
   2080e:	2001      	movne	r0, #1
   20810:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   20812:	5885      	ldr	r5, [r0, r2]
   20814:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   20816:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   20818:	4075      	eors	r5, r6
   2081a:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   2081c:	b25b      	sxtb	r3, r3
   2081e:	3a04      	subs	r2, #4
   20820:	e7f1      	b.n	20806 <uECC_vli_equal+0xa>

00020822 <uECC_vli_sub>:
{
   20822:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   20824:	2400      	movs	r4, #0
{
   20826:	4606      	mov	r6, r0
   20828:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   2082a:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   2082c:	b265      	sxtb	r5, r4
   2082e:	45ac      	cmp	ip, r5
   20830:	dc00      	bgt.n	20834 <uECC_vli_sub+0x12>
}
   20832:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   20834:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   20838:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   2083c:	1a3d      	subs	r5, r7, r0
   2083e:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   20840:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   20842:	bf34      	ite	cc
   20844:	2701      	movcc	r7, #1
   20846:	2700      	movcs	r7, #0
		result[i] = diff;
   20848:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   2084c:	bf18      	it	ne
   2084e:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   20850:	3401      	adds	r4, #1
   20852:	e7eb      	b.n	2082c <uECC_vli_sub+0xa>

00020854 <uECC_vli_modAdd>:
{
   20854:	b570      	push	{r4, r5, r6, lr}
   20856:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   2085a:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   2085c:	4633      	mov	r3, r6
{
   2085e:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   20860:	f7ff feab 	bl	205ba <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   20864:	b930      	cbnz	r0, 20874 <uECC_vli_modAdd+0x20>
   20866:	4632      	mov	r2, r6
   20868:	4621      	mov	r1, r4
   2086a:	4628      	mov	r0, r5
   2086c:	f7ff ffaf 	bl	207ce <uECC_vli_cmp_unsafe>
   20870:	2801      	cmp	r0, #1
   20872:	d007      	beq.n	20884 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   20874:	4633      	mov	r3, r6
   20876:	462a      	mov	r2, r5
   20878:	4621      	mov	r1, r4
   2087a:	4620      	mov	r0, r4
}
   2087c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   20880:	f7ff bfcf 	b.w	20822 <uECC_vli_sub>
}
   20884:	bd70      	pop	{r4, r5, r6, pc}

00020886 <uECC_vli_modSub>:
{
   20886:	b570      	push	{r4, r5, r6, lr}
   20888:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   2088c:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   2088e:	4633      	mov	r3, r6
{
   20890:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   20892:	f7ff ffc6 	bl	20822 <uECC_vli_sub>
	if (l_borrow) {
   20896:	b138      	cbz	r0, 208a8 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   20898:	4633      	mov	r3, r6
   2089a:	462a      	mov	r2, r5
   2089c:	4621      	mov	r1, r4
   2089e:	4620      	mov	r0, r4
}
   208a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   208a4:	f7ff be89 	b.w	205ba <uECC_vli_add>
}
   208a8:	bd70      	pop	{r4, r5, r6, pc}

000208aa <uECC_vli_mmod>:
{
   208aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   208ae:	b0a5      	sub	sp, #148	; 0x94
   208b0:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   208b2:	ab14      	add	r3, sp, #80	; 0x50
   208b4:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   208b8:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   208ba:	4629      	mov	r1, r5
   208bc:	4610      	mov	r0, r2
{
   208be:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   208c0:	f7ff ff58 	bl	20774 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   208c4:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   208c8:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   208ca:	2c00      	cmp	r4, #0
   208cc:	4621      	mov	r1, r4
   208ce:	bfb8      	it	lt
   208d0:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   208d4:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   208d6:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   208da:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   208de:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   208e0:	f004 071f 	and.w	r7, r4, #31
   208e4:	bf58      	it	pl
   208e6:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   208e8:	f7ff ff20 	bl	2072c <uECC_vli_clear>
	if (bit_shift > 0) {
   208ec:	2f00      	cmp	r7, #0
   208ee:	b208      	sxth	r0, r1
   208f0:	dd2b      	ble.n	2094a <uECC_vli_mmod+0xa0>
   208f2:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   208f4:	2200      	movs	r2, #0
   208f6:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   208fa:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   208fe:	4613      	mov	r3, r2
   20900:	429d      	cmp	r5, r3
   20902:	d817      	bhi.n	20934 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   20904:	006b      	lsls	r3, r5, #1
   20906:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   20908:	ab04      	add	r3, sp, #16
   2090a:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2090e:	1e6f      	subs	r7, r5, #1
   20910:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   20912:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   20914:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   20918:	2c00      	cmp	r4, #0
   2091a:	da54      	bge.n	209c6 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   2091c:	ab24      	add	r3, sp, #144	; 0x90
   2091e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   20922:	462a      	mov	r2, r5
   20924:	f856 1c88 	ldr.w	r1, [r6, #-136]
   20928:	4640      	mov	r0, r8
   2092a:	f7ff ff44 	bl	207b6 <uECC_vli_set>
}
   2092e:	b025      	add	sp, #148	; 0x94
   20930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   20934:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   20938:	fa0c f007 	lsl.w	r0, ip, r7
   2093c:	4302      	orrs	r2, r0
   2093e:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   20942:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   20944:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   20948:	e7da      	b.n	20900 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   2094a:	ab04      	add	r3, sp, #16
   2094c:	462a      	mov	r2, r5
   2094e:	4631      	mov	r1, r6
   20950:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   20954:	f7ff ff2f 	bl	207b6 <uECC_vli_set>
   20958:	e7d4      	b.n	20904 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2095a:	fa0f fe82 	sxth.w	lr, r2
   2095e:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   20962:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   20966:	ab24      	add	r3, sp, #144	; 0x90
   20968:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   2096c:	3001      	adds	r0, #1
   2096e:	f852 3c80 	ldr.w	r3, [r2, #-128]
   20972:	440b      	add	r3, r1
   20974:	ebbb 0303 	subs.w	r3, fp, r3
   20978:	bf34      	ite	cc
   2097a:	2201      	movcc	r2, #1
   2097c:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   2097e:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   20980:	bf18      	it	ne
   20982:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   20984:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   20988:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   2098c:	9b01      	ldr	r3, [sp, #4]
   2098e:	b242      	sxtb	r2, r0
   20990:	429a      	cmp	r2, r3
   20992:	dbe2      	blt.n	2095a <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   20994:	1a73      	subs	r3, r6, r1
   20996:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   20998:	4629      	mov	r1, r5
   2099a:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   2099c:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   2099e:	f7ff fe24 	bl	205ea <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   209a2:	ab24      	add	r3, sp, #144	; 0x90
   209a4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   209a8:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   209aa:	f853 2c80 	ldr.w	r2, [r3, #-128]
   209ae:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   209b2:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   209b4:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   209b8:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   209ba:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   209be:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   209c0:	f7ff fe13 	bl	205ea <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   209c4:	e7a8      	b.n	20918 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   209c6:	ab24      	add	r3, sp, #144	; 0x90
   209c8:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   209ca:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   209ce:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   209d0:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   209d4:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   209d8:	e7d8      	b.n	2098c <uECC_vli_mmod+0xe2>

000209da <uECC_vli_modMult_fast>:
{
   209da:	b530      	push	{r4, r5, lr}
   209dc:	461c      	mov	r4, r3
   209de:	b091      	sub	sp, #68	; 0x44
   209e0:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   209e2:	f993 3000 	ldrsb.w	r3, [r3]
   209e6:	4668      	mov	r0, sp
   209e8:	f7ff fe28 	bl	2063c <uECC_vli_mult>
	curve->mmod_fast(result, product);
   209ec:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   209f0:	4669      	mov	r1, sp
   209f2:	4628      	mov	r0, r5
   209f4:	4798      	blx	r3
}
   209f6:	b011      	add	sp, #68	; 0x44
   209f8:	bd30      	pop	{r4, r5, pc}

000209fa <uECC_vli_modSquare_fast>:
{
   209fa:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   209fc:	460a      	mov	r2, r1
   209fe:	f7ff bfec 	b.w	209da <uECC_vli_modMult_fast>

00020a02 <double_jacobian_default>:
{
   20a02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   20a06:	f993 6000 	ldrsb.w	r6, [r3]
{
   20a0a:	b092      	sub	sp, #72	; 0x48
   20a0c:	4604      	mov	r4, r0
   20a0e:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   20a10:	4610      	mov	r0, r2
   20a12:	4631      	mov	r1, r6
{
   20a14:	4615      	mov	r5, r2
   20a16:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   20a18:	f7ff fe93 	bl	20742 <uECC_vli_isZero>
   20a1c:	2800      	cmp	r0, #0
   20a1e:	f040 8091 	bne.w	20b44 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   20a22:	463a      	mov	r2, r7
   20a24:	4649      	mov	r1, r9
   20a26:	a802      	add	r0, sp, #8
   20a28:	f7ff ffe7 	bl	209fa <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   20a2c:	463b      	mov	r3, r7
   20a2e:	aa02      	add	r2, sp, #8
   20a30:	4621      	mov	r1, r4
   20a32:	a80a      	add	r0, sp, #40	; 0x28
   20a34:	f7ff ffd1 	bl	209da <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   20a38:	a902      	add	r1, sp, #8
   20a3a:	4608      	mov	r0, r1
   20a3c:	463a      	mov	r2, r7
   20a3e:	f7ff ffdc 	bl	209fa <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   20a42:	463b      	mov	r3, r7
   20a44:	462a      	mov	r2, r5
   20a46:	4649      	mov	r1, r9
   20a48:	4648      	mov	r0, r9
   20a4a:	f7ff ffc6 	bl	209da <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   20a4e:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   20a52:	463a      	mov	r2, r7
   20a54:	4629      	mov	r1, r5
   20a56:	4628      	mov	r0, r5
   20a58:	f7ff ffcf 	bl	209fa <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   20a5c:	4643      	mov	r3, r8
   20a5e:	462a      	mov	r2, r5
   20a60:	4621      	mov	r1, r4
   20a62:	4620      	mov	r0, r4
   20a64:	9600      	str	r6, [sp, #0]
   20a66:	f7ff fef5 	bl	20854 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   20a6a:	4643      	mov	r3, r8
   20a6c:	462a      	mov	r2, r5
   20a6e:	4629      	mov	r1, r5
   20a70:	4628      	mov	r0, r5
   20a72:	9600      	str	r6, [sp, #0]
   20a74:	f7ff feee 	bl	20854 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   20a78:	4643      	mov	r3, r8
   20a7a:	462a      	mov	r2, r5
   20a7c:	4621      	mov	r1, r4
   20a7e:	4628      	mov	r0, r5
   20a80:	9600      	str	r6, [sp, #0]
   20a82:	f7ff ff00 	bl	20886 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   20a86:	463b      	mov	r3, r7
   20a88:	462a      	mov	r2, r5
   20a8a:	4621      	mov	r1, r4
   20a8c:	4620      	mov	r0, r4
   20a8e:	f7ff ffa4 	bl	209da <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   20a92:	4643      	mov	r3, r8
   20a94:	4622      	mov	r2, r4
   20a96:	4621      	mov	r1, r4
   20a98:	4628      	mov	r0, r5
   20a9a:	9600      	str	r6, [sp, #0]
   20a9c:	f7ff feda 	bl	20854 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   20aa0:	4643      	mov	r3, r8
   20aa2:	9600      	str	r6, [sp, #0]
   20aa4:	462a      	mov	r2, r5
   20aa6:	4621      	mov	r1, r4
   20aa8:	4620      	mov	r0, r4
   20aaa:	f7ff fed3 	bl	20854 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   20aae:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   20ab0:	07db      	lsls	r3, r3, #31
   20ab2:	d54a      	bpl.n	20b4a <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   20ab4:	4633      	mov	r3, r6
   20ab6:	4642      	mov	r2, r8
   20ab8:	4621      	mov	r1, r4
   20aba:	4620      	mov	r0, r4
   20abc:	f7ff fd7d 	bl	205ba <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   20ac0:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   20ac2:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   20ac4:	4620      	mov	r0, r4
   20ac6:	f7ff fd90 	bl	205ea <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   20aca:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   20ace:	3b01      	subs	r3, #1
   20ad0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   20ad4:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   20ad8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   20adc:	463a      	mov	r2, r7
   20ade:	4621      	mov	r1, r4
   20ae0:	4628      	mov	r0, r5
   20ae2:	f7ff ff8a 	bl	209fa <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   20ae6:	4643      	mov	r3, r8
   20ae8:	aa0a      	add	r2, sp, #40	; 0x28
   20aea:	4629      	mov	r1, r5
   20aec:	4628      	mov	r0, r5
   20aee:	9600      	str	r6, [sp, #0]
   20af0:	f7ff fec9 	bl	20886 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   20af4:	4643      	mov	r3, r8
   20af6:	aa0a      	add	r2, sp, #40	; 0x28
   20af8:	4629      	mov	r1, r5
   20afa:	4628      	mov	r0, r5
   20afc:	9600      	str	r6, [sp, #0]
   20afe:	f7ff fec2 	bl	20886 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   20b02:	a90a      	add	r1, sp, #40	; 0x28
   20b04:	4608      	mov	r0, r1
   20b06:	4643      	mov	r3, r8
   20b08:	462a      	mov	r2, r5
   20b0a:	9600      	str	r6, [sp, #0]
   20b0c:	f7ff febb 	bl	20886 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   20b10:	463b      	mov	r3, r7
   20b12:	aa0a      	add	r2, sp, #40	; 0x28
   20b14:	4621      	mov	r1, r4
   20b16:	4620      	mov	r0, r4
   20b18:	f7ff ff5f 	bl	209da <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   20b1c:	aa02      	add	r2, sp, #8
   20b1e:	4643      	mov	r3, r8
   20b20:	4610      	mov	r0, r2
   20b22:	4621      	mov	r1, r4
   20b24:	9600      	str	r6, [sp, #0]
   20b26:	f7ff feae 	bl	20886 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   20b2a:	4632      	mov	r2, r6
   20b2c:	4629      	mov	r1, r5
   20b2e:	4620      	mov	r0, r4
   20b30:	f7ff fe41 	bl	207b6 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   20b34:	4649      	mov	r1, r9
   20b36:	4628      	mov	r0, r5
   20b38:	f7ff fe3d 	bl	207b6 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   20b3c:	a902      	add	r1, sp, #8
   20b3e:	4648      	mov	r0, r9
   20b40:	f7ff fe39 	bl	207b6 <uECC_vli_set>
}
   20b44:	b012      	add	sp, #72	; 0x48
   20b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   20b4a:	4631      	mov	r1, r6
   20b4c:	4620      	mov	r0, r4
   20b4e:	f7ff fd4c 	bl	205ea <uECC_vli_rshift1>
   20b52:	e7c3      	b.n	20adc <double_jacobian_default+0xda>

00020b54 <x_side_default>:
{
   20b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20b58:	4615      	mov	r5, r2
   20b5a:	b08a      	sub	sp, #40	; 0x28
   20b5c:	4604      	mov	r4, r0
   20b5e:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   20b60:	221c      	movs	r2, #28
   20b62:	2100      	movs	r1, #0
   20b64:	a803      	add	r0, sp, #12
   20b66:	f001 f9ff 	bl	21f68 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   20b6a:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   20b6c:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   20b70:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   20b72:	462a      	mov	r2, r5
   20b74:	4631      	mov	r1, r6
   20b76:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   20b78:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   20b7a:	f7ff ff3e 	bl	209fa <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   20b7e:	463b      	mov	r3, r7
   20b80:	aa02      	add	r2, sp, #8
   20b82:	4621      	mov	r1, r4
   20b84:	4620      	mov	r0, r4
   20b86:	f8cd 8000 	str.w	r8, [sp]
   20b8a:	f7ff fe7c 	bl	20886 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   20b8e:	462b      	mov	r3, r5
   20b90:	4632      	mov	r2, r6
   20b92:	4621      	mov	r1, r4
   20b94:	4620      	mov	r0, r4
   20b96:	f7ff ff20 	bl	209da <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   20b9a:	f8cd 8000 	str.w	r8, [sp]
   20b9e:	463b      	mov	r3, r7
   20ba0:	f105 0284 	add.w	r2, r5, #132	; 0x84
   20ba4:	4621      	mov	r1, r4
   20ba6:	4620      	mov	r0, r4
   20ba8:	f7ff fe54 	bl	20854 <uECC_vli_modAdd>
}
   20bac:	b00a      	add	sp, #40	; 0x28
   20bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020bb2 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   20bb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20bb6:	b09a      	sub	sp, #104	; 0x68
   20bb8:	4616      	mov	r6, r2
   20bba:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   20bbe:	4644      	mov	r4, r8
{
   20bc0:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   20bc2:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   20bc6:	9500      	str	r5, [sp, #0]
{
   20bc8:	4607      	mov	r7, r0
   20bca:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   20bcc:	4623      	mov	r3, r4
   20bce:	4602      	mov	r2, r0
   20bd0:	4631      	mov	r1, r6
   20bd2:	a802      	add	r0, sp, #8
   20bd4:	f7ff fe57 	bl	20886 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   20bd8:	a902      	add	r1, sp, #8
   20bda:	4642      	mov	r2, r8
   20bdc:	4608      	mov	r0, r1
   20bde:	f7ff ff0c 	bl	209fa <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   20be2:	4643      	mov	r3, r8
   20be4:	aa02      	add	r2, sp, #8
   20be6:	4639      	mov	r1, r7
   20be8:	4638      	mov	r0, r7
   20bea:	f7ff fef6 	bl	209da <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   20bee:	4643      	mov	r3, r8
   20bf0:	aa02      	add	r2, sp, #8
   20bf2:	4631      	mov	r1, r6
   20bf4:	4630      	mov	r0, r6
   20bf6:	f7ff fef0 	bl	209da <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   20bfa:	4623      	mov	r3, r4
   20bfc:	4652      	mov	r2, sl
   20bfe:	4649      	mov	r1, r9
   20c00:	a802      	add	r0, sp, #8
   20c02:	9500      	str	r5, [sp, #0]
   20c04:	f7ff fe26 	bl	20854 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   20c08:	4623      	mov	r3, r4
   20c0a:	4652      	mov	r2, sl
   20c0c:	4649      	mov	r1, r9
   20c0e:	4648      	mov	r0, r9
   20c10:	9500      	str	r5, [sp, #0]
   20c12:	f7ff fe38 	bl	20886 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   20c16:	4623      	mov	r3, r4
   20c18:	463a      	mov	r2, r7
   20c1a:	4631      	mov	r1, r6
   20c1c:	a80a      	add	r0, sp, #40	; 0x28
   20c1e:	9500      	str	r5, [sp, #0]
   20c20:	f7ff fe31 	bl	20886 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   20c24:	4643      	mov	r3, r8
   20c26:	aa0a      	add	r2, sp, #40	; 0x28
   20c28:	4651      	mov	r1, sl
   20c2a:	4650      	mov	r0, sl
   20c2c:	f7ff fed5 	bl	209da <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   20c30:	4623      	mov	r3, r4
   20c32:	4632      	mov	r2, r6
   20c34:	4639      	mov	r1, r7
   20c36:	a80a      	add	r0, sp, #40	; 0x28
   20c38:	9500      	str	r5, [sp, #0]
   20c3a:	f7ff fe0b 	bl	20854 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   20c3e:	4642      	mov	r2, r8
   20c40:	4649      	mov	r1, r9
   20c42:	4630      	mov	r0, r6
   20c44:	f7ff fed9 	bl	209fa <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   20c48:	4623      	mov	r3, r4
   20c4a:	aa0a      	add	r2, sp, #40	; 0x28
   20c4c:	4631      	mov	r1, r6
   20c4e:	4630      	mov	r0, r6
   20c50:	9500      	str	r5, [sp, #0]
   20c52:	f7ff fe18 	bl	20886 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   20c56:	4623      	mov	r3, r4
   20c58:	4632      	mov	r2, r6
   20c5a:	4639      	mov	r1, r7
   20c5c:	a812      	add	r0, sp, #72	; 0x48
   20c5e:	9500      	str	r5, [sp, #0]
   20c60:	f7ff fe11 	bl	20886 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   20c64:	4643      	mov	r3, r8
   20c66:	aa12      	add	r2, sp, #72	; 0x48
   20c68:	4649      	mov	r1, r9
   20c6a:	4648      	mov	r0, r9
   20c6c:	f7ff feb5 	bl	209da <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   20c70:	4623      	mov	r3, r4
   20c72:	4652      	mov	r2, sl
   20c74:	4649      	mov	r1, r9
   20c76:	4648      	mov	r0, r9
   20c78:	9500      	str	r5, [sp, #0]
   20c7a:	f7ff fe04 	bl	20886 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   20c7e:	4642      	mov	r2, r8
   20c80:	a902      	add	r1, sp, #8
   20c82:	a812      	add	r0, sp, #72	; 0x48
   20c84:	f7ff feb9 	bl	209fa <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   20c88:	a912      	add	r1, sp, #72	; 0x48
   20c8a:	4623      	mov	r3, r4
   20c8c:	aa0a      	add	r2, sp, #40	; 0x28
   20c8e:	4608      	mov	r0, r1
   20c90:	9500      	str	r5, [sp, #0]
   20c92:	f7ff fdf8 	bl	20886 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   20c96:	4623      	mov	r3, r4
   20c98:	463a      	mov	r2, r7
   20c9a:	a912      	add	r1, sp, #72	; 0x48
   20c9c:	a80a      	add	r0, sp, #40	; 0x28
   20c9e:	9500      	str	r5, [sp, #0]
   20ca0:	f7ff fdf1 	bl	20886 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   20ca4:	a90a      	add	r1, sp, #40	; 0x28
   20ca6:	4643      	mov	r3, r8
   20ca8:	aa02      	add	r2, sp, #8
   20caa:	4608      	mov	r0, r1
   20cac:	f7ff fe95 	bl	209da <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   20cb0:	4623      	mov	r3, r4
   20cb2:	4652      	mov	r2, sl
   20cb4:	a90a      	add	r1, sp, #40	; 0x28
   20cb6:	4650      	mov	r0, sl
   20cb8:	9500      	str	r5, [sp, #0]
   20cba:	f7ff fde4 	bl	20886 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   20cbe:	462a      	mov	r2, r5
   20cc0:	a912      	add	r1, sp, #72	; 0x48
   20cc2:	4638      	mov	r0, r7
   20cc4:	f7ff fd77 	bl	207b6 <uECC_vli_set>
}
   20cc8:	b01a      	add	sp, #104	; 0x68
   20cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00020cce <uECC_vli_modInv>:
{
   20cce:	b5f0      	push	{r4, r5, r6, r7, lr}
   20cd0:	460f      	mov	r7, r1
   20cd2:	b0a1      	sub	sp, #132	; 0x84
   20cd4:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   20cd6:	4619      	mov	r1, r3
   20cd8:	4638      	mov	r0, r7
{
   20cda:	4615      	mov	r5, r2
   20cdc:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   20cde:	f7ff fd30 	bl	20742 <uECC_vli_isZero>
   20ce2:	b120      	cbz	r0, 20cee <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   20ce4:	4630      	mov	r0, r6
   20ce6:	f7ff fd21 	bl	2072c <uECC_vli_clear>
}
   20cea:	b021      	add	sp, #132	; 0x84
   20cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   20cee:	4622      	mov	r2, r4
   20cf0:	4639      	mov	r1, r7
   20cf2:	4668      	mov	r0, sp
   20cf4:	f7ff fd5f 	bl	207b6 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   20cf8:	4629      	mov	r1, r5
   20cfa:	a808      	add	r0, sp, #32
   20cfc:	f7ff fd5b 	bl	207b6 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   20d00:	a810      	add	r0, sp, #64	; 0x40
   20d02:	4621      	mov	r1, r4
   20d04:	f7ff fd12 	bl	2072c <uECC_vli_clear>
	u[0] = 1;
   20d08:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   20d0a:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   20d0c:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   20d0e:	f7ff fd0d 	bl	2072c <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   20d12:	4622      	mov	r2, r4
   20d14:	a908      	add	r1, sp, #32
   20d16:	4668      	mov	r0, sp
   20d18:	f7ff fd59 	bl	207ce <uECC_vli_cmp_unsafe>
   20d1c:	b928      	cbnz	r0, 20d2a <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   20d1e:	4622      	mov	r2, r4
   20d20:	a910      	add	r1, sp, #64	; 0x40
   20d22:	4630      	mov	r0, r6
   20d24:	f7ff fd47 	bl	207b6 <uECC_vli_set>
   20d28:	e7df      	b.n	20cea <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   20d2a:	9b00      	ldr	r3, [sp, #0]
   20d2c:	07da      	lsls	r2, r3, #31
   20d2e:	d409      	bmi.n	20d44 <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   20d30:	4621      	mov	r1, r4
   20d32:	4668      	mov	r0, sp
   20d34:	f7ff fc59 	bl	205ea <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   20d38:	4622      	mov	r2, r4
   20d3a:	4629      	mov	r1, r5
   20d3c:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   20d3e:	f7ff fc61 	bl	20604 <vli_modInv_update>
   20d42:	e7e6      	b.n	20d12 <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   20d44:	9b08      	ldr	r3, [sp, #32]
   20d46:	07db      	lsls	r3, r3, #31
   20d48:	d407      	bmi.n	20d5a <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   20d4a:	4621      	mov	r1, r4
   20d4c:	a808      	add	r0, sp, #32
   20d4e:	f7ff fc4c 	bl	205ea <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   20d52:	4622      	mov	r2, r4
   20d54:	4629      	mov	r1, r5
   20d56:	a818      	add	r0, sp, #96	; 0x60
   20d58:	e7f1      	b.n	20d3e <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   20d5a:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   20d5c:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   20d5e:	dd1c      	ble.n	20d9a <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   20d60:	aa08      	add	r2, sp, #32
   20d62:	4669      	mov	r1, sp
   20d64:	4668      	mov	r0, sp
   20d66:	f7ff fd5c 	bl	20822 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   20d6a:	4621      	mov	r1, r4
   20d6c:	4668      	mov	r0, sp
   20d6e:	f7ff fc3c 	bl	205ea <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   20d72:	4622      	mov	r2, r4
   20d74:	a918      	add	r1, sp, #96	; 0x60
   20d76:	a810      	add	r0, sp, #64	; 0x40
   20d78:	f7ff fd29 	bl	207ce <uECC_vli_cmp_unsafe>
   20d7c:	2800      	cmp	r0, #0
   20d7e:	da05      	bge.n	20d8c <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   20d80:	a910      	add	r1, sp, #64	; 0x40
   20d82:	4623      	mov	r3, r4
   20d84:	462a      	mov	r2, r5
   20d86:	4608      	mov	r0, r1
   20d88:	f7ff fc17 	bl	205ba <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   20d8c:	a910      	add	r1, sp, #64	; 0x40
   20d8e:	4623      	mov	r3, r4
   20d90:	aa18      	add	r2, sp, #96	; 0x60
   20d92:	4608      	mov	r0, r1
   20d94:	f7ff fd45 	bl	20822 <uECC_vli_sub>
   20d98:	e7ce      	b.n	20d38 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   20d9a:	a908      	add	r1, sp, #32
   20d9c:	466a      	mov	r2, sp
   20d9e:	4608      	mov	r0, r1
   20da0:	f7ff fd3f 	bl	20822 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   20da4:	4621      	mov	r1, r4
   20da6:	a808      	add	r0, sp, #32
   20da8:	f7ff fc1f 	bl	205ea <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   20dac:	4622      	mov	r2, r4
   20dae:	a910      	add	r1, sp, #64	; 0x40
   20db0:	a818      	add	r0, sp, #96	; 0x60
   20db2:	f7ff fd0c 	bl	207ce <uECC_vli_cmp_unsafe>
   20db6:	2800      	cmp	r0, #0
   20db8:	da05      	bge.n	20dc6 <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   20dba:	a918      	add	r1, sp, #96	; 0x60
   20dbc:	4623      	mov	r3, r4
   20dbe:	462a      	mov	r2, r5
   20dc0:	4608      	mov	r0, r1
   20dc2:	f7ff fbfa 	bl	205ba <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   20dc6:	a918      	add	r1, sp, #96	; 0x60
   20dc8:	4623      	mov	r3, r4
   20dca:	aa10      	add	r2, sp, #64	; 0x40
   20dcc:	4608      	mov	r0, r1
   20dce:	f7ff fd28 	bl	20822 <uECC_vli_sub>
   20dd2:	e7be      	b.n	20d52 <uECC_vli_modInv+0x84>

00020dd4 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   20dd4:	7809      	ldrb	r1, [r1, #0]
   20dd6:	0049      	lsls	r1, r1, #1
   20dd8:	b249      	sxtb	r1, r1
   20dda:	f7ff bcb2 	b.w	20742 <uECC_vli_isZero>

00020dde <apply_z>:
{
   20dde:	b5f0      	push	{r4, r5, r6, r7, lr}
   20de0:	4615      	mov	r5, r2
   20de2:	b089      	sub	sp, #36	; 0x24
   20de4:	461c      	mov	r4, r3
   20de6:	4607      	mov	r7, r0
   20de8:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   20dea:	461a      	mov	r2, r3
   20dec:	4629      	mov	r1, r5
   20dee:	4668      	mov	r0, sp
   20df0:	f7ff fe03 	bl	209fa <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   20df4:	4623      	mov	r3, r4
   20df6:	466a      	mov	r2, sp
   20df8:	4639      	mov	r1, r7
   20dfa:	4638      	mov	r0, r7
   20dfc:	f7ff fded 	bl	209da <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   20e00:	4623      	mov	r3, r4
   20e02:	462a      	mov	r2, r5
   20e04:	4669      	mov	r1, sp
   20e06:	4668      	mov	r0, sp
   20e08:	f7ff fde7 	bl	209da <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   20e0c:	4623      	mov	r3, r4
   20e0e:	466a      	mov	r2, sp
   20e10:	4631      	mov	r1, r6
   20e12:	4630      	mov	r0, r6
   20e14:	f7ff fde1 	bl	209da <uECC_vli_modMult_fast>
}
   20e18:	b009      	add	sp, #36	; 0x24
   20e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020e1c <XYcZ_add>:
{
   20e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20e20:	b08a      	sub	sp, #40	; 0x28
   20e22:	4614      	mov	r4, r2
   20e24:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   20e28:	4655      	mov	r5, sl
{
   20e2a:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   20e2c:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   20e30:	9600      	str	r6, [sp, #0]
{
   20e32:	4680      	mov	r8, r0
   20e34:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   20e36:	462b      	mov	r3, r5
   20e38:	4602      	mov	r2, r0
   20e3a:	4621      	mov	r1, r4
   20e3c:	a802      	add	r0, sp, #8
   20e3e:	f7ff fd22 	bl	20886 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   20e42:	a902      	add	r1, sp, #8
   20e44:	4652      	mov	r2, sl
   20e46:	4608      	mov	r0, r1
   20e48:	f7ff fdd7 	bl	209fa <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   20e4c:	4653      	mov	r3, sl
   20e4e:	aa02      	add	r2, sp, #8
   20e50:	4641      	mov	r1, r8
   20e52:	4640      	mov	r0, r8
   20e54:	f7ff fdc1 	bl	209da <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   20e58:	4653      	mov	r3, sl
   20e5a:	aa02      	add	r2, sp, #8
   20e5c:	4621      	mov	r1, r4
   20e5e:	4620      	mov	r0, r4
   20e60:	f7ff fdbb 	bl	209da <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   20e64:	462b      	mov	r3, r5
   20e66:	464a      	mov	r2, r9
   20e68:	4639      	mov	r1, r7
   20e6a:	4638      	mov	r0, r7
   20e6c:	9600      	str	r6, [sp, #0]
   20e6e:	f7ff fd0a 	bl	20886 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   20e72:	4652      	mov	r2, sl
   20e74:	4639      	mov	r1, r7
   20e76:	a802      	add	r0, sp, #8
   20e78:	f7ff fdbf 	bl	209fa <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   20e7c:	a902      	add	r1, sp, #8
   20e7e:	462b      	mov	r3, r5
   20e80:	4642      	mov	r2, r8
   20e82:	4608      	mov	r0, r1
   20e84:	9600      	str	r6, [sp, #0]
   20e86:	f7ff fcfe 	bl	20886 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   20e8a:	a902      	add	r1, sp, #8
   20e8c:	462b      	mov	r3, r5
   20e8e:	4622      	mov	r2, r4
   20e90:	4608      	mov	r0, r1
   20e92:	9600      	str	r6, [sp, #0]
   20e94:	f7ff fcf7 	bl	20886 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   20e98:	462b      	mov	r3, r5
   20e9a:	4642      	mov	r2, r8
   20e9c:	4621      	mov	r1, r4
   20e9e:	4620      	mov	r0, r4
   20ea0:	9600      	str	r6, [sp, #0]
   20ea2:	f7ff fcf0 	bl	20886 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   20ea6:	4653      	mov	r3, sl
   20ea8:	4622      	mov	r2, r4
   20eaa:	4649      	mov	r1, r9
   20eac:	4648      	mov	r0, r9
   20eae:	f7ff fd94 	bl	209da <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   20eb2:	462b      	mov	r3, r5
   20eb4:	aa02      	add	r2, sp, #8
   20eb6:	4641      	mov	r1, r8
   20eb8:	4620      	mov	r0, r4
   20eba:	9600      	str	r6, [sp, #0]
   20ebc:	f7ff fce3 	bl	20886 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   20ec0:	4653      	mov	r3, sl
   20ec2:	4622      	mov	r2, r4
   20ec4:	4639      	mov	r1, r7
   20ec6:	4638      	mov	r0, r7
   20ec8:	f7ff fd87 	bl	209da <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   20ecc:	462b      	mov	r3, r5
   20ece:	464a      	mov	r2, r9
   20ed0:	4639      	mov	r1, r7
   20ed2:	4638      	mov	r0, r7
   20ed4:	9600      	str	r6, [sp, #0]
   20ed6:	f7ff fcd6 	bl	20886 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   20eda:	4632      	mov	r2, r6
   20edc:	a902      	add	r1, sp, #8
   20ede:	4620      	mov	r0, r4
   20ee0:	f7ff fc69 	bl	207b6 <uECC_vli_set>
}
   20ee4:	b00a      	add	sp, #40	; 0x28
   20ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00020eea <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   20eea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20eee:	b0b1      	sub	sp, #196	; 0xc4
   20ef0:	e9cd 0103 	strd	r0, r1, [sp, #12]
   20ef4:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   20ef6:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   20efa:	a818      	add	r0, sp, #96	; 0x60
{
   20efc:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   20efe:	463a      	mov	r2, r7
{
   20f00:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   20f02:	f7ff fc58 	bl	207b6 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   20f06:	00bb      	lsls	r3, r7, #2
   20f08:	9305      	str	r3, [sp, #20]
   20f0a:	9b04      	ldr	r3, [sp, #16]
   20f0c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   20f10:	4619      	mov	r1, r3
   20f12:	a828      	add	r0, sp, #160	; 0xa0
   20f14:	9302      	str	r3, [sp, #8]
   20f16:	f7ff fc4e 	bl	207b6 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   20f1a:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   20f1e:	2e00      	cmp	r6, #0
   20f20:	f000 8088 	beq.w	21034 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   20f24:	462a      	mov	r2, r5
   20f26:	4631      	mov	r1, r6
   20f28:	a808      	add	r0, sp, #32
   20f2a:	f7ff fc44 	bl	207b6 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   20f2e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   20f32:	462a      	mov	r2, r5
   20f34:	a918      	add	r1, sp, #96	; 0x60
   20f36:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   20f38:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   20f3c:	f7ff fc3b 	bl	207b6 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   20f40:	a928      	add	r1, sp, #160	; 0xa0
   20f42:	4648      	mov	r0, r9
   20f44:	f7ff fc37 	bl	207b6 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   20f48:	4623      	mov	r3, r4
   20f4a:	aa08      	add	r2, sp, #32
   20f4c:	a928      	add	r1, sp, #160	; 0xa0
   20f4e:	a818      	add	r0, sp, #96	; 0x60
   20f50:	f7ff ff45 	bl	20dde <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   20f54:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   20f58:	4623      	mov	r3, r4
   20f5a:	aa08      	add	r2, sp, #32
   20f5c:	a928      	add	r1, sp, #160	; 0xa0
   20f5e:	a818      	add	r0, sp, #96	; 0x60
   20f60:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   20f62:	4623      	mov	r3, r4
   20f64:	aa08      	add	r2, sp, #32
   20f66:	4649      	mov	r1, r9
   20f68:	4640      	mov	r0, r8
   20f6a:	f7ff ff38 	bl	20dde <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   20f6e:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   20f72:	3d02      	subs	r5, #2
   20f74:	b22d      	sxth	r5, r5
   20f76:	2d00      	cmp	r5, #0
   20f78:	dc63      	bgt.n	21042 <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   20f7a:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   20f7e:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   20f80:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   20f84:	ab10      	add	r3, sp, #64	; 0x40
   20f86:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   20f8a:	43ed      	mvns	r5, r5
   20f8c:	ab20      	add	r3, sp, #128	; 0x80
   20f8e:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   20f92:	f005 0501 	and.w	r5, r5, #1
   20f96:	ab10      	add	r3, sp, #64	; 0x40
   20f98:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   20f9c:	ab20      	add	r3, sp, #128	; 0x80
   20f9e:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   20fa2:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   20fa6:	462b      	mov	r3, r5
   20fa8:	464a      	mov	r2, r9
   20faa:	4631      	mov	r1, r6
   20fac:	4640      	mov	r0, r8
   20fae:	f7ff fe00 	bl	20bb2 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   20fb2:	4653      	mov	r3, sl
   20fb4:	aa10      	add	r2, sp, #64	; 0x40
   20fb6:	a918      	add	r1, sp, #96	; 0x60
   20fb8:	a808      	add	r0, sp, #32
   20fba:	9700      	str	r7, [sp, #0]
   20fbc:	f7ff fc63 	bl	20886 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   20fc0:	a908      	add	r1, sp, #32
   20fc2:	4623      	mov	r3, r4
   20fc4:	4632      	mov	r2, r6
   20fc6:	4608      	mov	r0, r1
   20fc8:	f7ff fd07 	bl	209da <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   20fcc:	a908      	add	r1, sp, #32
   20fce:	9a04      	ldr	r2, [sp, #16]
   20fd0:	4623      	mov	r3, r4
   20fd2:	4608      	mov	r0, r1
   20fd4:	f7ff fd01 	bl	209da <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   20fd8:	a908      	add	r1, sp, #32
   20fda:	463b      	mov	r3, r7
   20fdc:	4652      	mov	r2, sl
   20fde:	4608      	mov	r0, r1
   20fe0:	f7ff fe75 	bl	20cce <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   20fe4:	a908      	add	r1, sp, #32
   20fe6:	9a02      	ldr	r2, [sp, #8]
   20fe8:	4623      	mov	r3, r4
   20fea:	4608      	mov	r0, r1
   20fec:	f7ff fcf5 	bl	209da <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   20ff0:	a908      	add	r1, sp, #32
   20ff2:	4623      	mov	r3, r4
   20ff4:	4642      	mov	r2, r8
   20ff6:	4608      	mov	r0, r1
   20ff8:	f7ff fcef 	bl	209da <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   20ffc:	9400      	str	r4, [sp, #0]
   20ffe:	4633      	mov	r3, r6
   21000:	4642      	mov	r2, r8
   21002:	4629      	mov	r1, r5
   21004:	4648      	mov	r0, r9
   21006:	f7ff ff09 	bl	20e1c <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   2100a:	4623      	mov	r3, r4
   2100c:	aa08      	add	r2, sp, #32
   2100e:	a920      	add	r1, sp, #128	; 0x80
   21010:	a810      	add	r0, sp, #64	; 0x40
   21012:	f7ff fee4 	bl	20dde <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   21016:	9803      	ldr	r0, [sp, #12]
   21018:	463a      	mov	r2, r7
   2101a:	a910      	add	r1, sp, #64	; 0x40
   2101c:	f7ff fbcb 	bl	207b6 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   21020:	9b03      	ldr	r3, [sp, #12]
   21022:	9c05      	ldr	r4, [sp, #20]
   21024:	4423      	add	r3, r4
   21026:	a920      	add	r1, sp, #128	; 0x80
   21028:	4618      	mov	r0, r3
   2102a:	f7ff fbc4 	bl	207b6 <uECC_vli_set>
}
   2102e:	b031      	add	sp, #196	; 0xc4
   21030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   21034:	4629      	mov	r1, r5
   21036:	a808      	add	r0, sp, #32
   21038:	f7ff fb78 	bl	2072c <uECC_vli_clear>
		z[0] = 1;
   2103c:	2301      	movs	r3, #1
   2103e:	9308      	str	r3, [sp, #32]
   21040:	e775      	b.n	20f2e <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   21042:	4629      	mov	r1, r5
   21044:	4650      	mov	r0, sl
   21046:	f7ff fb8b 	bl	20760 <uECC_vli_testBit>
   2104a:	fab0 f680 	clz	r6, r0
   2104e:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   21050:	f1c6 0101 	rsb	r1, r6, #1
   21054:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   21058:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   2105c:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   21060:	4633      	mov	r3, r6
   21062:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   21066:	465a      	mov	r2, fp
   21068:	9400      	str	r4, [sp, #0]
   2106a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   2106e:	f7ff fda0 	bl	20bb2 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   21072:	9907      	ldr	r1, [sp, #28]
   21074:	9806      	ldr	r0, [sp, #24]
   21076:	9400      	str	r4, [sp, #0]
   21078:	460b      	mov	r3, r1
   2107a:	4602      	mov	r2, r0
   2107c:	4631      	mov	r1, r6
   2107e:	4658      	mov	r0, fp
   21080:	f7ff fecc 	bl	20e1c <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   21084:	3d01      	subs	r5, #1
   21086:	e775      	b.n	20f74 <EccPoint_mult+0x8a>

00021088 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   21088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2108c:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   21090:	f119 081f 	adds.w	r8, r9, #31
{
   21094:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   21096:	bf48      	it	mi
   21098:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   2109c:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2109e:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   210a2:	3524      	adds	r5, #36	; 0x24
   210a4:	4601      	mov	r1, r0
{
   210a6:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   210a8:	4643      	mov	r3, r8
   210aa:	462a      	mov	r2, r5
   210ac:	4630      	mov	r0, r6
   210ae:	f7ff fa84 	bl	205ba <uECC_vli_add>
   210b2:	4604      	mov	r4, r0
   210b4:	b990      	cbnz	r0, 210dc <regularize_k+0x54>
   210b6:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   210ba:	da06      	bge.n	210ca <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   210bc:	4649      	mov	r1, r9
   210be:	4630      	mov	r0, r6
   210c0:	f7ff fb4e 	bl	20760 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   210c4:	1e04      	subs	r4, r0, #0
   210c6:	bf18      	it	ne
   210c8:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   210ca:	4643      	mov	r3, r8
   210cc:	462a      	mov	r2, r5
   210ce:	4631      	mov	r1, r6
   210d0:	4638      	mov	r0, r7
   210d2:	f7ff fa72 	bl	205ba <uECC_vli_add>

	return carry;
}
   210d6:	4620      	mov	r0, r4
   210d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   210dc:	2401      	movs	r4, #1
   210de:	e7f4      	b.n	210ca <regularize_k+0x42>

000210e0 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   210e0:	b530      	push	{r4, r5, lr}
   210e2:	4614      	mov	r4, r2
   210e4:	b095      	sub	sp, #84	; 0x54
   210e6:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   210e8:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   210ea:	4623      	mov	r3, r4
{
   210ec:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   210ee:	a904      	add	r1, sp, #16
   210f0:	9102      	str	r1, [sp, #8]
   210f2:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   210f4:	f7ff ffc8 	bl	21088 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   210f8:	fab0 f380 	clz	r3, r0
   210fc:	095b      	lsrs	r3, r3, #5
   210fe:	aa14      	add	r2, sp, #80	; 0x50
   21100:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   21104:	8863      	ldrh	r3, [r4, #2]
   21106:	9401      	str	r4, [sp, #4]
   21108:	3301      	adds	r3, #1
   2110a:	b21b      	sxth	r3, r3
   2110c:	9300      	str	r3, [sp, #0]
   2110e:	f852 2c48 	ldr.w	r2, [r2, #-72]
   21112:	2300      	movs	r3, #0
   21114:	f104 0144 	add.w	r1, r4, #68	; 0x44
   21118:	4628      	mov	r0, r5
   2111a:	f7ff fee6 	bl	20eea <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   2111e:	4621      	mov	r1, r4
   21120:	4628      	mov	r0, r5
   21122:	f7ff fe57 	bl	20dd4 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   21126:	fab0 f080 	clz	r0, r0
   2112a:	0940      	lsrs	r0, r0, #5
   2112c:	b015      	add	sp, #84	; 0x54
   2112e:	bd30      	pop	{r4, r5, pc}

00021130 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   21130:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   21132:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   21134:	1e4f      	subs	r7, r1, #1
   21136:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   21138:	428c      	cmp	r4, r1
   2113a:	f105 0501 	add.w	r5, r5, #1
   2113e:	db00      	blt.n	21142 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   21140:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   21142:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   21144:	f023 0603 	bic.w	r6, r3, #3
   21148:	f003 0303 	and.w	r3, r3, #3
   2114c:	5996      	ldr	r6, [r2, r6]
   2114e:	00db      	lsls	r3, r3, #3
   21150:	fa26 f303 	lsr.w	r3, r6, r3
   21154:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   21156:	e7ee      	b.n	21136 <uECC_vli_nativeToBytes+0x6>

00021158 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   21158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2115a:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2115c:	1cd1      	adds	r1, r2, #3
   2115e:	bf48      	it	mi
   21160:	1d91      	addmi	r1, r2, #6
   21162:	f341 0187 	sbfx	r1, r1, #2, #8
{
   21166:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   21168:	f7ff fae0 	bl	2072c <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   2116c:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   2116e:	1e67      	subs	r7, r4, #1
   21170:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   21172:	42a2      	cmp	r2, r4
   21174:	f105 0501 	add.w	r5, r5, #1
   21178:	db00      	blt.n	2117c <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   2117a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   2117c:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   2117e:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   21182:	5cb2      	ldrb	r2, [r6, r2]
   21184:	f003 0303 	and.w	r3, r3, #3
   21188:	00db      	lsls	r3, r3, #3
   2118a:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   2118e:	5842      	ldr	r2, [r0, r1]
   21190:	431a      	orrs	r2, r3
   21192:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   21194:	e7ec      	b.n	21170 <uECC_vli_bytesToNative+0x18>

00021196 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   21196:	b5f0      	push	{r4, r5, r6, r7, lr}
   21198:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   2119a:	f991 6000 	ldrsb.w	r6, [r1]
{
   2119e:	4605      	mov	r5, r0
   211a0:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   211a2:	f7ff fe17 	bl	20dd4 <EccPoint_isZero>
   211a6:	bb28      	cbnz	r0, 211f4 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   211a8:	1d27      	adds	r7, r4, #4
   211aa:	4632      	mov	r2, r6
   211ac:	4629      	mov	r1, r5
   211ae:	4638      	mov	r0, r7
   211b0:	f7ff fb0d 	bl	207ce <uECC_vli_cmp_unsafe>
   211b4:	2801      	cmp	r0, #1
   211b6:	d120      	bne.n	211fa <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   211b8:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   211bc:	4632      	mov	r2, r6
   211be:	4638      	mov	r0, r7
   211c0:	f7ff fb05 	bl	207ce <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   211c4:	2801      	cmp	r0, #1
   211c6:	d118      	bne.n	211fa <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   211c8:	4622      	mov	r2, r4
   211ca:	4668      	mov	r0, sp
   211cc:	f7ff fc15 	bl	209fa <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   211d0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   211d4:	4622      	mov	r2, r4
   211d6:	4629      	mov	r1, r5
   211d8:	a808      	add	r0, sp, #32
   211da:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   211dc:	4632      	mov	r2, r6
   211de:	a908      	add	r1, sp, #32
   211e0:	4668      	mov	r0, sp
   211e2:	f7ff fb0b 	bl	207fc <uECC_vli_equal>
   211e6:	2800      	cmp	r0, #0
		return -3;
   211e8:	bf0c      	ite	eq
   211ea:	2000      	moveq	r0, #0
   211ec:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   211f0:	b011      	add	sp, #68	; 0x44
   211f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   211f4:	f04f 30ff 	mov.w	r0, #4294967295
   211f8:	e7fa      	b.n	211f0 <uECC_valid_point+0x5a>
		return -2;
   211fa:	f06f 0001 	mvn.w	r0, #1
   211fe:	e7f7      	b.n	211f0 <uECC_valid_point+0x5a>

00021200 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   21200:	b570      	push	{r4, r5, r6, lr}
   21202:	460c      	mov	r4, r1
   21204:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   21206:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   21208:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   2120c:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   2120e:	4601      	mov	r1, r0
   21210:	4668      	mov	r0, sp
   21212:	f7ff ffa1 	bl	21158 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   21216:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   2121a:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   2121e:	18a9      	adds	r1, r5, r2
   21220:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   21224:	f7ff ff98 	bl	21158 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   21228:	2210      	movs	r2, #16
   2122a:	4631      	mov	r1, r6
   2122c:	4668      	mov	r0, sp
   2122e:	f7ff face 	bl	207ce <uECC_vli_cmp_unsafe>
   21232:	b128      	cbz	r0, 21240 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   21234:	4621      	mov	r1, r4
   21236:	4668      	mov	r0, sp
   21238:	f7ff ffad 	bl	21196 <uECC_valid_point>
}
   2123c:	b010      	add	sp, #64	; 0x40
   2123e:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   21240:	f06f 0003 	mvn.w	r0, #3
   21244:	e7fa      	b.n	2123c <uECC_valid_public_key+0x3c>

00021246 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   21246:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2124a:	4606      	mov	r6, r0
   2124c:	b0a9      	sub	sp, #164	; 0xa4
   2124e:	4688      	mov	r8, r1
   21250:	4614      	mov	r4, r2
   21252:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   21254:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   21258:	f7f0 fa4e 	bl	116f8 <uECC_get_rng>
		if (!rng_function ||
   2125c:	4603      	mov	r3, r0
   2125e:	2800      	cmp	r0, #0
   21260:	d03e      	beq.n	212e0 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   21262:	2140      	movs	r1, #64	; 0x40
   21264:	a808      	add	r0, sp, #32
   21266:	4798      	blx	r3
		if (!rng_function ||
   21268:	b3d0      	cbz	r0, 212e0 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   2126a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   2126e:	f112 031f 	adds.w	r3, r2, #31
   21272:	bf48      	it	mi
   21274:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   21278:	466d      	mov	r5, sp
   2127a:	464a      	mov	r2, r9
   2127c:	a908      	add	r1, sp, #32
   2127e:	4628      	mov	r0, r5
   21280:	f343 1347 	sbfx	r3, r3, #5, #8
   21284:	f7ff fb11 	bl	208aa <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   21288:	4622      	mov	r2, r4
   2128a:	4629      	mov	r1, r5
   2128c:	a818      	add	r0, sp, #96	; 0x60
   2128e:	f7ff ff27 	bl	210e0 <EccPoint_compute_public_key>
   21292:	b318      	cbz	r0, 212dc <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   21294:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   21298:	1dd9      	adds	r1, r3, #7
   2129a:	bf48      	it	mi
   2129c:	f103 010e 	addmi.w	r1, r3, #14
   212a0:	462a      	mov	r2, r5
   212a2:	4640      	mov	r0, r8
   212a4:	10c9      	asrs	r1, r1, #3
   212a6:	f7ff ff43 	bl	21130 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   212aa:	f994 1001 	ldrsb.w	r1, [r4, #1]
   212ae:	aa18      	add	r2, sp, #96	; 0x60
   212b0:	4630      	mov	r0, r6
   212b2:	f7ff ff3d 	bl	21130 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   212b6:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   212ba:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   212be:	ab18      	add	r3, sp, #96	; 0x60
   212c0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   212c4:	1870      	adds	r0, r6, r1
   212c6:	f7ff ff33 	bl	21130 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   212ca:	2220      	movs	r2, #32
   212cc:	2100      	movs	r1, #0
   212ce:	4628      	mov	r0, r5
   212d0:	f000 fe4a 	bl	21f68 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   212d4:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   212d6:	b029      	add	sp, #164	; 0xa4
   212d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   212dc:	3f01      	subs	r7, #1
   212de:	d1bb      	bne.n	21258 <uECC_make_key+0x12>
        		return 0;
   212e0:	2000      	movs	r0, #0
   212e2:	e7f8      	b.n	212d6 <uECC_make_key+0x90>

000212e4 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   212e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   212e8:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   212ea:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   212ee:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   212f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   212f6:	b0a4      	sub	sp, #144	; 0x90
   212f8:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   212fa:	1dda      	adds	r2, r3, #7
   212fc:	bf48      	it	mi
   212fe:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   21302:	ad04      	add	r5, sp, #16
{
   21304:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   21306:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   21308:	4628      	mov	r0, r5
   2130a:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   2130c:	9502      	str	r5, [sp, #8]
   2130e:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   21310:	f7ff ff22 	bl	21158 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   21314:	463a      	mov	r2, r7
   21316:	4649      	mov	r1, r9
   21318:	a814      	add	r0, sp, #80	; 0x50
   2131a:	f7ff ff1d 	bl	21158 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   2131e:	ab14      	add	r3, sp, #80	; 0x50
   21320:	eb09 0107 	add.w	r1, r9, r7
   21324:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   21328:	463a      	mov	r2, r7
   2132a:	f7ff ff15 	bl	21158 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   2132e:	4623      	mov	r3, r4
   21330:	4632      	mov	r2, r6
   21332:	4629      	mov	r1, r5
   21334:	4628      	mov	r0, r5
   21336:	f7ff fea7 	bl	21088 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   2133a:	fab0 f080 	clz	r0, r0
   2133e:	9401      	str	r4, [sp, #4]
   21340:	ab24      	add	r3, sp, #144	; 0x90
   21342:	0940      	lsrs	r0, r0, #5
   21344:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   21348:	8863      	ldrh	r3, [r4, #2]
   2134a:	3301      	adds	r3, #1
   2134c:	b21b      	sxth	r3, r3
   2134e:	9300      	str	r3, [sp, #0]
   21350:	a914      	add	r1, sp, #80	; 0x50
   21352:	2300      	movs	r3, #0
   21354:	f850 2c88 	ldr.w	r2, [r0, #-136]
   21358:	4608      	mov	r0, r1
   2135a:	f7ff fdc6 	bl	20eea <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   2135e:	aa14      	add	r2, sp, #80	; 0x50
   21360:	4639      	mov	r1, r7
   21362:	4640      	mov	r0, r8
   21364:	f7ff fee4 	bl	21130 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   21368:	4621      	mov	r1, r4
   2136a:	a814      	add	r0, sp, #80	; 0x50
   2136c:	f7ff fd32 	bl	20dd4 <EccPoint_isZero>
   21370:	af02      	add	r7, sp, #8
   21372:	4604      	mov	r4, r0
   21374:	2208      	movs	r2, #8
   21376:	2100      	movs	r1, #0
   21378:	4638      	mov	r0, r7
   2137a:	f000 fdf5 	bl	21f68 <memset>
   2137e:	2220      	movs	r2, #32
   21380:	2100      	movs	r1, #0
   21382:	4630      	mov	r0, r6
   21384:	f000 fdf0 	bl	21f68 <memset>
   21388:	2220      	movs	r2, #32
   2138a:	2100      	movs	r1, #0
   2138c:	4628      	mov	r0, r5
   2138e:	f000 fdeb 	bl	21f68 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   21392:	fab4 f084 	clz	r0, r4
   21396:	0940      	lsrs	r0, r0, #5
   21398:	b024      	add	sp, #144	; 0x90
   2139a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002139e <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   2139e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   213a0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   213a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   213a8:	bf2c      	ite	cs
   213aa:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   213ae:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   213b2:	4770      	bx	lr

000213b4 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   213b4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   213b8:	6880      	ldr	r0, [r0, #8]
   213ba:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   213be:	bf2c      	ite	cs
   213c0:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   213c4:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   213c8:	4770      	bx	lr

000213ca <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   213ca:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   213cc:	2201      	movs	r2, #1
   213ce:	f7ff ffe6 	bl	2139e <chunk_field>
}
   213d2:	0840      	lsrs	r0, r0, #1
   213d4:	bd08      	pop	{r3, pc}

000213d6 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   213d6:	6883      	ldr	r3, [r0, #8]
   213d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   213dc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   213e0:	d308      	bcc.n	213f4 <set_chunk_used+0x1e>
		if (used) {
   213e2:	684b      	ldr	r3, [r1, #4]
   213e4:	b11a      	cbz	r2, 213ee <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   213e6:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   213ea:	604b      	str	r3, [r1, #4]
   213ec:	4770      	bx	lr
   213ee:	f023 0301 	bic.w	r3, r3, #1
   213f2:	e7fa      	b.n	213ea <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   213f4:	884b      	ldrh	r3, [r1, #2]
   213f6:	b11a      	cbz	r2, 21400 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   213f8:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   213fc:	804b      	strh	r3, [r1, #2]
		}
	}
}
   213fe:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   21400:	f023 0301 	bic.w	r3, r3, #1
   21404:	e7fa      	b.n	213fc <set_chunk_used+0x26>

00021406 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21406:	0053      	lsls	r3, r2, #1
   21408:	2201      	movs	r2, #1
   2140a:	f7ff bfd3 	b.w	213b4 <chunk_set>

0002140e <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   2140e:	6880      	ldr	r0, [r0, #8]
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   21410:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21412:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   21416:	bf2c      	ite	cs
   21418:	2002      	movcs	r0, #2
   2141a:	2001      	movcc	r0, #1
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   2141c:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   2141e:	fab0 f080 	clz	r0, r0
}
   21422:	f1c0 001f 	rsb	r0, r0, #31
   21426:	4770      	bx	lr

00021428 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   21428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2142c:	4616      	mov	r6, r2
   2142e:	4604      	mov	r4, r0
   21430:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   21432:	f7ff ffca 	bl	213ca <chunk_size>
   21436:	4631      	mov	r1, r6
   21438:	4605      	mov	r5, r0
   2143a:	4620      	mov	r0, r4
   2143c:	f7ff ffc5 	bl	213ca <chunk_size>
   21440:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   21442:	462a      	mov	r2, r5
   21444:	4639      	mov	r1, r7
   21446:	4620      	mov	r0, r4
   21448:	f7ff ffdd 	bl	21406 <set_chunk_size>
	return c + chunk_size(h, c);
   2144c:	4631      	mov	r1, r6
   2144e:	4620      	mov	r0, r4
   21450:	f7ff ffbb 	bl	213ca <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   21454:	462b      	mov	r3, r5
   21456:	1831      	adds	r1, r6, r0
   21458:	2200      	movs	r2, #0
   2145a:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   2145c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21460:	f7ff bfa8 	b.w	213b4 <chunk_set>

00021464 <split_chunks>:
{
   21464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21468:	4614      	mov	r4, r2
   2146a:	4605      	mov	r5, r0
   2146c:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   2146e:	f7ff ffac 	bl	213ca <chunk_size>
	chunksz_t lsz = rc - lc;
   21472:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   21476:	1b37      	subs	r7, r6, r4
   21478:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   2147a:	4642      	mov	r2, r8
   2147c:	4631      	mov	r1, r6
   2147e:	4628      	mov	r0, r5
   21480:	f7ff ffc1 	bl	21406 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   21484:	463a      	mov	r2, r7
   21486:	4621      	mov	r1, r4
   21488:	4628      	mov	r0, r5
   2148a:	f7ff ffbc 	bl	21406 <set_chunk_size>
   2148e:	4643      	mov	r3, r8
   21490:	2200      	movs	r2, #0
   21492:	4621      	mov	r1, r4
   21494:	4628      	mov	r0, r5
   21496:	f7ff ff8d 	bl	213b4 <chunk_set>
	return c + chunk_size(h, c);
   2149a:	4621      	mov	r1, r4
   2149c:	4628      	mov	r0, r5
   2149e:	f7ff ff94 	bl	213ca <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   214a2:	463b      	mov	r3, r7
   214a4:	1821      	adds	r1, r4, r0
   214a6:	2200      	movs	r2, #0
   214a8:	4628      	mov	r0, r5
}
   214aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   214ae:	f7ff bf81 	b.w	213b4 <chunk_set>

000214b2 <free_list_remove_bidx>:
{
   214b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   214b6:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   214b8:	2203      	movs	r2, #3
   214ba:	460e      	mov	r6, r1
   214bc:	4604      	mov	r4, r0
   214be:	f7ff ff6e 	bl	2139e <chunk_field>
	if (next_free_chunk(h, c) == c) {
   214c2:	4286      	cmp	r6, r0
   214c4:	4605      	mov	r5, r0
   214c6:	f107 0804 	add.w	r8, r7, #4
   214ca:	d10b      	bne.n	214e4 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   214cc:	2301      	movs	r3, #1
   214ce:	fa03 f707 	lsl.w	r7, r3, r7
   214d2:	68e3      	ldr	r3, [r4, #12]
   214d4:	ea23 0307 	bic.w	r3, r3, r7
   214d8:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   214da:	2300      	movs	r3, #0
   214dc:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   214e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   214e4:	4631      	mov	r1, r6
   214e6:	2202      	movs	r2, #2
   214e8:	4620      	mov	r0, r4
   214ea:	f7ff ff58 	bl	2139e <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   214ee:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   214f0:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   214f2:	4601      	mov	r1, r0
		b->next = second;
   214f4:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   214f8:	4620      	mov	r0, r4
   214fa:	2203      	movs	r2, #3
   214fc:	f7ff ff5a 	bl	213b4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   21500:	4633      	mov	r3, r6
   21502:	4629      	mov	r1, r5
   21504:	4620      	mov	r0, r4
   21506:	2202      	movs	r2, #2
}
   21508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2150c:	f7ff bf52 	b.w	213b4 <chunk_set>

00021510 <free_list_remove>:
{
   21510:	b538      	push	{r3, r4, r5, lr}
   21512:	4604      	mov	r4, r0
   21514:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   21516:	f7ff ff58 	bl	213ca <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   2151a:	68a3      	ldr	r3, [r4, #8]
   2151c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21520:	4601      	mov	r1, r0
   21522:	d301      	bcc.n	21528 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   21524:	2801      	cmp	r0, #1
   21526:	d009      	beq.n	2153c <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   21528:	4620      	mov	r0, r4
   2152a:	f7ff ff70 	bl	2140e <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   2152e:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   21530:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   21532:	4620      	mov	r0, r4
}
   21534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   21538:	f7ff bfbb 	b.w	214b2 <free_list_remove_bidx>
}
   2153c:	bd38      	pop	{r3, r4, r5, pc}

0002153e <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   2153e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21542:	4605      	mov	r5, r0
   21544:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   21546:	f7ff ff62 	bl	2140e <bucket_idx>
   2154a:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   2154e:	4606      	mov	r6, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   21550:	f8da 9010 	ldr.w	r9, [sl, #16]
   21554:	f1b9 0f00 	cmp.w	r9, #0
   21558:	d01b      	beq.n	21592 <alloc_chunk+0x54>
   2155a:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   2155c:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   21560:	4628      	mov	r0, r5
   21562:	4621      	mov	r1, r4
   21564:	f7ff ff31 	bl	213ca <chunk_size>
   21568:	4540      	cmp	r0, r8
   2156a:	d307      	bcc.n	2157c <alloc_chunk+0x3e>
				free_list_remove_bidx(h, c, bi);
   2156c:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   2156e:	4621      	mov	r1, r4
   21570:	4628      	mov	r0, r5
   21572:	f7ff ff9e 	bl	214b2 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   21576:	4620      	mov	r0, r4
   21578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   2157c:	2203      	movs	r2, #3
   2157e:	4621      	mov	r1, r4
   21580:	4628      	mov	r0, r5
   21582:	f7ff ff0c 	bl	2139e <chunk_field>
		} while (--i && b->next != first);
   21586:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   21588:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   2158c:	d001      	beq.n	21592 <alloc_chunk+0x54>
   2158e:	4581      	cmp	r9, r0
   21590:	d1e4      	bne.n	2155c <alloc_chunk+0x1e>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   21592:	68e9      	ldr	r1, [r5, #12]
   21594:	3601      	adds	r6, #1
   21596:	f04f 34ff 	mov.w	r4, #4294967295
   2159a:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   2159c:	400c      	ands	r4, r1
   2159e:	d0ea      	beq.n	21576 <alloc_chunk+0x38>
		int minbucket = __builtin_ctz(bmask);
   215a0:	fa94 f2a4 	rbit	r2, r4
   215a4:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   215a8:	1d13      	adds	r3, r2, #4
   215aa:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   215ae:	e7de      	b.n	2156e <alloc_chunk+0x30>

000215b0 <free_list_add>:
{
   215b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   215b4:	4604      	mov	r4, r0
   215b6:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   215b8:	f7ff ff07 	bl	213ca <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   215bc:	68a3      	ldr	r3, [r4, #8]
   215be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   215c2:	4601      	mov	r1, r0
   215c4:	d301      	bcc.n	215ca <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   215c6:	2801      	cmp	r0, #1
   215c8:	d035      	beq.n	21636 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   215ca:	4620      	mov	r0, r4
   215cc:	f7ff ff1f 	bl	2140e <bucket_idx>
	if (b->next == 0U) {
   215d0:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   215d4:	6916      	ldr	r6, [r2, #16]
   215d6:	b99e      	cbnz	r6, 21600 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   215d8:	2301      	movs	r3, #1
   215da:	fa03 f000 	lsl.w	r0, r3, r0
   215de:	68e3      	ldr	r3, [r4, #12]
   215e0:	4303      	orrs	r3, r0
   215e2:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   215e4:	4629      	mov	r1, r5
		b->next = c;
   215e6:	6115      	str	r5, [r2, #16]
   215e8:	462b      	mov	r3, r5
   215ea:	2202      	movs	r2, #2
   215ec:	4620      	mov	r0, r4
   215ee:	f7ff fee1 	bl	213b4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   215f2:	2203      	movs	r2, #3
   215f4:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   215f6:	4620      	mov	r0, r4
}
   215f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   215fc:	f7ff beda 	b.w	213b4 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   21600:	2202      	movs	r2, #2
   21602:	4631      	mov	r1, r6
   21604:	4620      	mov	r0, r4
   21606:	f7ff feca 	bl	2139e <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   2160a:	2202      	movs	r2, #2
   2160c:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   2160e:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   21610:	4629      	mov	r1, r5
   21612:	4620      	mov	r0, r4
   21614:	f7ff fece 	bl	213b4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   21618:	4633      	mov	r3, r6
   2161a:	2203      	movs	r2, #3
   2161c:	4629      	mov	r1, r5
   2161e:	4620      	mov	r0, r4
   21620:	f7ff fec8 	bl	213b4 <chunk_set>
   21624:	2203      	movs	r2, #3
   21626:	4639      	mov	r1, r7
   21628:	462b      	mov	r3, r5
   2162a:	4620      	mov	r0, r4
   2162c:	f7ff fec2 	bl	213b4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   21630:	2202      	movs	r2, #2
   21632:	4631      	mov	r1, r6
   21634:	e7df      	b.n	215f6 <free_list_add+0x46>
   21636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002163a <free_chunk>:
{
   2163a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2163c:	460c      	mov	r4, r1
   2163e:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   21640:	f7ff fec3 	bl	213ca <chunk_size>
   21644:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   21646:	2201      	movs	r2, #1
   21648:	4631      	mov	r1, r6
   2164a:	4628      	mov	r0, r5
   2164c:	f7ff fea7 	bl	2139e <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   21650:	07c3      	lsls	r3, r0, #31
   21652:	d40c      	bmi.n	2166e <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   21654:	4631      	mov	r1, r6
   21656:	4628      	mov	r0, r5
   21658:	f7ff ff5a 	bl	21510 <free_list_remove>
	return c + chunk_size(h, c);
   2165c:	4621      	mov	r1, r4
   2165e:	4628      	mov	r0, r5
   21660:	f7ff feb3 	bl	213ca <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   21664:	4621      	mov	r1, r4
   21666:	1822      	adds	r2, r4, r0
   21668:	4628      	mov	r0, r5
   2166a:	f7ff fedd 	bl	21428 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   2166e:	2200      	movs	r2, #0
   21670:	4621      	mov	r1, r4
   21672:	4628      	mov	r0, r5
   21674:	f7ff fe93 	bl	2139e <chunk_field>
   21678:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2167a:	2201      	movs	r2, #1
   2167c:	4639      	mov	r1, r7
   2167e:	4628      	mov	r0, r5
   21680:	f7ff fe8d 	bl	2139e <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   21684:	f010 0601 	ands.w	r6, r0, #1
   21688:	d113      	bne.n	216b2 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   2168a:	4639      	mov	r1, r7
   2168c:	4628      	mov	r0, r5
   2168e:	f7ff ff3f 	bl	21510 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   21692:	4621      	mov	r1, r4
   21694:	4632      	mov	r2, r6
   21696:	4628      	mov	r0, r5
   21698:	f7ff fe81 	bl	2139e <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   2169c:	4622      	mov	r2, r4
   2169e:	1a21      	subs	r1, r4, r0
   216a0:	4628      	mov	r0, r5
   216a2:	f7ff fec1 	bl	21428 <merge_chunks>
   216a6:	4621      	mov	r1, r4
   216a8:	4632      	mov	r2, r6
   216aa:	4628      	mov	r0, r5
   216ac:	f7ff fe77 	bl	2139e <chunk_field>
   216b0:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   216b2:	4621      	mov	r1, r4
   216b4:	4628      	mov	r0, r5
}
   216b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   216ba:	f7ff bf79 	b.w	215b0 <free_list_add>

000216be <sys_heap_free>:
{
   216be:	b510      	push	{r4, lr}
	if (mem == NULL) {
   216c0:	b191      	cbz	r1, 216e8 <sys_heap_free+0x2a>
	struct z_heap *h = heap->heap;
   216c2:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   216c4:	6883      	ldr	r3, [r0, #8]
   216c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   216ca:	bf2c      	ite	cs
   216cc:	2408      	movcs	r4, #8
   216ce:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   216d0:	1b0c      	subs	r4, r1, r4
   216d2:	1a24      	subs	r4, r4, r0
   216d4:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   216d6:	4621      	mov	r1, r4
   216d8:	2200      	movs	r2, #0
   216da:	f7ff fe7c 	bl	213d6 <set_chunk_used>
	free_chunk(h, c);
   216de:	4621      	mov	r1, r4
}
   216e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   216e4:	f7ff bfa9 	b.w	2163a <free_chunk>
}
   216e8:	bd10      	pop	{r4, pc}

000216ea <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   216ea:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   216ec:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   216ee:	b909      	cbnz	r1, 216f4 <sys_heap_alloc+0xa>
		return NULL;
   216f0:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   216f2:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   216f4:	68ab      	ldr	r3, [r5, #8]
   216f6:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   216fa:	d9f9      	bls.n	216f0 <sys_heap_alloc+0x6>
   216fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21700:	bf2c      	ite	cs
   21702:	2208      	movcs	r2, #8
   21704:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21706:	1dcc      	adds	r4, r1, #7
   21708:	4414      	add	r4, r2
   2170a:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2170c:	4621      	mov	r1, r4
   2170e:	4628      	mov	r0, r5
   21710:	f7ff ff15 	bl	2153e <alloc_chunk>
	if (c == 0U) {
   21714:	4606      	mov	r6, r0
   21716:	2800      	cmp	r0, #0
   21718:	d0ea      	beq.n	216f0 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2171a:	4601      	mov	r1, r0
   2171c:	4628      	mov	r0, r5
   2171e:	f7ff fe54 	bl	213ca <chunk_size>
   21722:	42a0      	cmp	r0, r4
   21724:	d909      	bls.n	2173a <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   21726:	4434      	add	r4, r6
   21728:	4631      	mov	r1, r6
   2172a:	4628      	mov	r0, r5
   2172c:	4622      	mov	r2, r4
   2172e:	f7ff fe99 	bl	21464 <split_chunks>
		free_list_add(h, c + chunk_sz);
   21732:	4621      	mov	r1, r4
   21734:	4628      	mov	r0, r5
   21736:	f7ff ff3b 	bl	215b0 <free_list_add>
	set_chunk_used(h, c, true);
   2173a:	4628      	mov	r0, r5
   2173c:	2201      	movs	r2, #1
   2173e:	4631      	mov	r1, r6
   21740:	f7ff fe49 	bl	213d6 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   21744:	68ab      	ldr	r3, [r5, #8]
   21746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2174a:	bf2c      	ite	cs
   2174c:	2008      	movcs	r0, #8
   2174e:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   21750:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   21754:	4428      	add	r0, r5
	return chunk_mem(h, c);
   21756:	e7cc      	b.n	216f2 <sys_heap_alloc+0x8>

00021758 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   21758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   2175c:	6806      	ldr	r6, [r0, #0]
{
   2175e:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   21760:	424a      	negs	r2, r1
   21762:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   21766:	ea31 0202 	bics.w	r2, r1, r2
   2176a:	68b5      	ldr	r5, [r6, #8]
{
   2176c:	460b      	mov	r3, r1
	if (align != rew) {
   2176e:	d00f      	beq.n	21790 <sys_heap_aligned_alloc+0x38>
   21770:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   21774:	bf34      	ite	cc
   21776:	2104      	movcc	r1, #4
   21778:	2108      	movcs	r1, #8
   2177a:	42b9      	cmp	r1, r7
   2177c:	460a      	mov	r2, r1
   2177e:	46b9      	mov	r9, r7
   21780:	bf28      	it	cs
   21782:	463a      	movcs	r2, r7
		align -= rew;
   21784:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   21786:	b994      	cbnz	r4, 217ae <sys_heap_aligned_alloc+0x56>
		return NULL;
   21788:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   2178a:	4628      	mov	r0, r5
   2178c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21790:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   21794:	bf34      	ite	cc
   21796:	2204      	movcc	r2, #4
   21798:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   2179a:	4291      	cmp	r1, r2
   2179c:	d804      	bhi.n	217a8 <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   2179e:	4621      	mov	r1, r4
}
   217a0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   217a4:	f7ff bfa1 	b.w	216ea <sys_heap_alloc>
		rew = 0;
   217a8:	f04f 0900 	mov.w	r9, #0
   217ac:	e7eb      	b.n	21786 <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   217ae:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   217b2:	d9e9      	bls.n	21788 <sys_heap_aligned_alloc+0x30>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   217b4:	1de1      	adds	r1, r4, #7
   217b6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   217ba:	4439      	add	r1, r7
   217bc:	bf2c      	ite	cs
   217be:	2308      	movcs	r3, #8
   217c0:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   217c2:	1a89      	subs	r1, r1, r2
   217c4:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   217c6:	08c9      	lsrs	r1, r1, #3
   217c8:	4630      	mov	r0, r6
   217ca:	f7ff feb8 	bl	2153e <alloc_chunk>
	if (c0 == 0) {
   217ce:	4680      	mov	r8, r0
   217d0:	2800      	cmp	r0, #0
   217d2:	d0d9      	beq.n	21788 <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   217d4:	68b3      	ldr	r3, [r6, #8]
   217d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   217da:	bf2c      	ite	cs
   217dc:	2308      	movcs	r3, #8
   217de:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   217e0:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   217e4:	441d      	add	r5, r3
   217e6:	1e7a      	subs	r2, r7, #1
   217e8:	4435      	add	r5, r6
   217ea:	427f      	negs	r7, r7
   217ec:	4415      	add	r5, r2
   217ee:	403d      	ands	r5, r7
   217f0:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   217f4:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   217f6:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   217f8:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   217fa:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   217fc:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   21800:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   21802:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21806:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   2180a:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   2180e:	d208      	bcs.n	21822 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   21810:	4601      	mov	r1, r0
   21812:	463a      	mov	r2, r7
   21814:	4630      	mov	r0, r6
   21816:	f7ff fe25 	bl	21464 <split_chunks>
		free_list_add(h, c0);
   2181a:	4641      	mov	r1, r8
   2181c:	4630      	mov	r0, r6
   2181e:	f7ff fec7 	bl	215b0 <free_list_add>
	return c + chunk_size(h, c);
   21822:	4639      	mov	r1, r7
   21824:	4630      	mov	r0, r6
   21826:	f7ff fdd0 	bl	213ca <chunk_size>
   2182a:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   2182c:	4284      	cmp	r4, r0
   2182e:	d208      	bcs.n	21842 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   21830:	4639      	mov	r1, r7
   21832:	4630      	mov	r0, r6
   21834:	4622      	mov	r2, r4
   21836:	f7ff fe15 	bl	21464 <split_chunks>
		free_list_add(h, c_end);
   2183a:	4621      	mov	r1, r4
   2183c:	4630      	mov	r0, r6
   2183e:	f7ff feb7 	bl	215b0 <free_list_add>
	set_chunk_used(h, c, true);
   21842:	2201      	movs	r2, #1
   21844:	4639      	mov	r1, r7
   21846:	4630      	mov	r0, r6
   21848:	f7ff fdc5 	bl	213d6 <set_chunk_used>
	return mem;
   2184c:	e79d      	b.n	2178a <sys_heap_aligned_alloc+0x32>

0002184e <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   2184e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   21852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21854:	bf2c      	ite	cs
   21856:	2508      	movcs	r5, #8
   21858:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   2185a:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2185c:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2185e:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   21860:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   21864:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   21868:	1b2d      	subs	r5, r5, r4
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   2186a:	2300      	movs	r3, #0
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2186c:	08ed      	lsrs	r5, r5, #3
	heap->heap = h;
   2186e:	6004      	str	r4, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   21870:	4629      	mov	r1, r5
	h->end_chunk = heap_sz;
   21872:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   21874:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   21876:	4620      	mov	r0, r4
   21878:	f7ff fdc9 	bl	2140e <bucket_idx>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2187c:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2187e:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   21880:	1c41      	adds	r1, r0, #1
   21882:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   21884:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   21888:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   2188a:	428b      	cmp	r3, r1
   2188c:	db2f      	blt.n	218ee <sys_heap_init+0xa0>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   2188e:	4632      	mov	r2, r6
   21890:	4620      	mov	r0, r4
   21892:	2100      	movs	r1, #0
   21894:	f7ff fdb7 	bl	21406 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   21898:	2300      	movs	r3, #0
   2189a:	461a      	mov	r2, r3
   2189c:	4619      	mov	r1, r3
   2189e:	4620      	mov	r0, r4
   218a0:	f7ff fd88 	bl	213b4 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   218a4:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   218a6:	4620      	mov	r0, r4
   218a8:	2201      	movs	r2, #1
   218aa:	2100      	movs	r1, #0
   218ac:	f7ff fd93 	bl	213d6 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   218b0:	463a      	mov	r2, r7
   218b2:	4631      	mov	r1, r6
   218b4:	f7ff fda7 	bl	21406 <set_chunk_size>
   218b8:	4633      	mov	r3, r6
   218ba:	4631      	mov	r1, r6
   218bc:	4620      	mov	r0, r4
   218be:	2200      	movs	r2, #0
   218c0:	f7ff fd78 	bl	213b4 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   218c4:	4629      	mov	r1, r5
   218c6:	4620      	mov	r0, r4
   218c8:	2200      	movs	r2, #0
   218ca:	f7ff fd9c 	bl	21406 <set_chunk_size>
   218ce:	463b      	mov	r3, r7
   218d0:	4629      	mov	r1, r5
   218d2:	4620      	mov	r0, r4
   218d4:	2200      	movs	r2, #0
   218d6:	f7ff fd6d 	bl	213b4 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   218da:	4629      	mov	r1, r5
   218dc:	4620      	mov	r0, r4
   218de:	2201      	movs	r2, #1
   218e0:	f7ff fd79 	bl	213d6 <set_chunk_used>

	free_list_add(h, chunk0_size);
   218e4:	4631      	mov	r1, r6
}
   218e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   218ea:	f7ff be61 	b.w	215b0 <free_list_add>
		h->buckets[i].next = 0;
   218ee:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   218f2:	3301      	adds	r3, #1
   218f4:	e7c9      	b.n	2188a <sys_heap_init+0x3c>

000218f6 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   218f6:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   218f8:	f7f0 fb02 	bl	11f00 <log_msg_chunk_alloc>

	if (msg != NULL) {
   218fc:	b118      	cbz	r0, 21906 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   218fe:	2301      	movs	r3, #1
   21900:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   21902:	2300      	movs	r3, #0
   21904:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   21906:	bd08      	pop	{r3, pc}

00021908 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   21908:	f002 bce3 	b.w	242d2 <sys_clock_cycle_get_32>

0002190c <dummy_timestamp>:
   2190c:	2000      	movs	r0, #0
   2190e:	4770      	bx	lr

00021910 <z_log_get_s_mask>:
{
   21910:	b5f0      	push	{r4, r5, r6, r7, lr}
   21912:	4605      	mov	r5, r0
	uint32_t mask = 0U;
   21914:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   21916:	4603      	mov	r3, r0
	bool arm = false;
   21918:	4602      	mov	r2, r0
				mask |= BIT(arg);
   2191a:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   2191c:	f815 4b01 	ldrb.w	r4, [r5], #1
   21920:	b10c      	cbz	r4, 21926 <z_log_get_s_mask+0x16>
   21922:	428b      	cmp	r3, r1
   21924:	d300      	bcc.n	21928 <z_log_get_s_mask+0x18>
}
   21926:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   21928:	2c25      	cmp	r4, #37	; 0x25
   2192a:	d102      	bne.n	21932 <z_log_get_s_mask+0x22>
			arm = !arm;
   2192c:	f082 0201 	eor.w	r2, r2, #1
   21930:	e7f4      	b.n	2191c <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   21932:	2a00      	cmp	r2, #0
   21934:	d0f2      	beq.n	2191c <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   21936:	f044 0620 	orr.w	r6, r4, #32
   2193a:	3e61      	subs	r6, #97	; 0x61
   2193c:	2e19      	cmp	r6, #25
   2193e:	d8ed      	bhi.n	2191c <z_log_get_s_mask+0xc>
			if (curr == 's') {
   21940:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   21942:	bf04      	itt	eq
   21944:	fa07 f203 	lsleq.w	r2, r7, r3
   21948:	4310      	orreq	r0, r2
			arg++;
   2194a:	3301      	adds	r3, #1
			arm = false;
   2194c:	2200      	movs	r2, #0
   2194e:	e7e5      	b.n	2191c <z_log_get_s_mask+0xc>

00021950 <log_0>:
{
   21950:	b538      	push	{r3, r4, r5, lr}
   21952:	4605      	mov	r5, r0
   21954:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   21956:	f7ff ffce 	bl	218f6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2195a:	b128      	cbz	r0, 21968 <log_0+0x18>
		msg->str = str;
   2195c:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   2195e:	4621      	mov	r1, r4
}
   21960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   21964:	f7f0 b9ca 	b.w	11cfc <msg_finalize>
}
   21968:	bd38      	pop	{r3, r4, r5, pc}

0002196a <log_1>:
{
   2196a:	b570      	push	{r4, r5, r6, lr}
   2196c:	4606      	mov	r6, r0
   2196e:	460d      	mov	r5, r1
   21970:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   21972:	f7ff ffc0 	bl	218f6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   21976:	b158      	cbz	r0, 21990 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   21978:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   2197a:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   2197c:	2101      	movs	r1, #1
   2197e:	f361 1207 	bfi	r2, r1, #4, #4
   21982:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   21984:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   21986:	4621      	mov	r1, r4
}
   21988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   2198c:	f7f0 b9b6 	b.w	11cfc <msg_finalize>
}
   21990:	bd70      	pop	{r4, r5, r6, pc}

00021992 <log_2>:
{
   21992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21996:	4680      	mov	r8, r0
   21998:	460f      	mov	r7, r1
   2199a:	4616      	mov	r6, r2
   2199c:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2199e:	f7ff ffaa 	bl	218f6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   219a2:	b168      	cbz	r0, 219c0 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   219a4:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   219a6:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   219aa:	2202      	movs	r2, #2
   219ac:	f362 1307 	bfi	r3, r2, #4, #4
   219b0:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   219b2:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   219b6:	4629      	mov	r1, r5
}
   219b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   219bc:	f7f0 b99e 	b.w	11cfc <msg_finalize>
}
   219c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000219c4 <log_3>:
{
   219c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   219c8:	4680      	mov	r8, r0
   219ca:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   219ce:	460f      	mov	r7, r1
   219d0:	4616      	mov	r6, r2
   219d2:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   219d4:	f7ff ff8f 	bl	218f6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   219d8:	b170      	cbz	r0, 219f8 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   219da:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   219dc:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   219e0:	2203      	movs	r2, #3
   219e2:	f362 1307 	bfi	r3, r2, #4, #4
   219e6:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   219e8:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   219ec:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   219ee:	4649      	mov	r1, r9
}
   219f0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   219f4:	f7f0 b982 	b.w	11cfc <msg_finalize>
}
   219f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000219fc <log_n>:
{
   219fc:	b510      	push	{r4, lr}
   219fe:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   21a00:	f000 f85f 	bl	21ac2 <log_msg_create_n>
		if (msg == NULL) {
   21a04:	b120      	cbz	r0, 21a10 <log_n+0x14>
		msg_finalize(msg, src_level);
   21a06:	4621      	mov	r1, r4
}
   21a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   21a0c:	f7f0 b976 	b.w	11cfc <msg_finalize>
}
   21a10:	bd10      	pop	{r4, pc}

00021a12 <log_hexdump>:
{
   21a12:	b510      	push	{r4, lr}
   21a14:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   21a16:	f000 f8a8 	bl	21b6a <log_msg_hexdump_create>
		if (msg == NULL) {
   21a1a:	b120      	cbz	r0, 21a26 <log_hexdump+0x14>
		msg_finalize(msg, src_level);
   21a1c:	4621      	mov	r1, r4
}
   21a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   21a22:	f7f0 b96b 	b.w	11cfc <msg_finalize>
}
   21a26:	bd10      	pop	{r4, pc}

00021a28 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   21a28:	2300      	movs	r3, #0
	list->head = NULL;
   21a2a:	e9c0 3300 	strd	r3, r3, [r0]
}
   21a2e:	4770      	bx	lr

00021a30 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   21a30:	6803      	ldr	r3, [r0, #0]
   21a32:	b923      	cbnz	r3, 21a3e <log_list_add_tail+0xe>
		list->head = msg;
   21a34:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   21a36:	2300      	movs	r3, #0
	list->tail = msg;
   21a38:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   21a3a:	600b      	str	r3, [r1, #0]
}
   21a3c:	4770      	bx	lr
		list->tail->next = msg;
   21a3e:	6843      	ldr	r3, [r0, #4]
   21a40:	6019      	str	r1, [r3, #0]
   21a42:	e7f8      	b.n	21a36 <log_list_add_tail+0x6>

00021a44 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   21a44:	6800      	ldr	r0, [r0, #0]
   21a46:	4770      	bx	lr

00021a48 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   21a48:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   21a4a:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   21a4c:	b108      	cbz	r0, 21a52 <log_list_head_get+0xa>
		list->head = list->head->next;
   21a4e:	6802      	ldr	r2, [r0, #0]
   21a50:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   21a52:	4770      	bx	lr

00021a54 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   21a54:	7a40      	ldrb	r0, [r0, #9]
}
   21a56:	0900      	lsrs	r0, r0, #4
   21a58:	4770      	bx	lr

00021a5a <log_msg_arg_get>:
log_arg_t log_msg_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	log_arg_t arg;

	/* Return early if requested argument not present in the message. */
	if (arg_idx >= msg->hdr.params.std.nargs) {
   21a5a:	7a43      	ldrb	r3, [r0, #9]
   21a5c:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   21a60:	ea4f 1213 	mov.w	r2, r3, lsr #4
   21a64:	d216      	bcs.n	21a94 <log_msg_arg_get+0x3a>
		return 0;
	}

	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   21a66:	2a03      	cmp	r2, #3
   21a68:	d803      	bhi.n	21a72 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   21a6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   21a6e:	6948      	ldr	r0, [r1, #20]
   21a70:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   21a72:	2901      	cmp	r1, #1
   21a74:	d803      	bhi.n	21a7e <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   21a76:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   21a7a:	6988      	ldr	r0, [r1, #24]
   21a7c:	4770      	bx	lr
	cont = msg->payload.ext.next;
   21a7e:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   21a80:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   21a82:	2906      	cmp	r1, #6
   21a84:	d803      	bhi.n	21a8e <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   21a86:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   21a8a:	6848      	ldr	r0, [r1, #4]
   21a8c:	4770      	bx	lr
		cont = cont->next;
   21a8e:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   21a90:	3907      	subs	r1, #7
		cont = cont->next;
   21a92:	e7f6      	b.n	21a82 <log_msg_arg_get+0x28>
		return 0;
   21a94:	2000      	movs	r0, #0
	} else {
		arg = cont_arg_get(msg, arg_idx);
	}

	return arg;
}
   21a96:	4770      	bx	lr

00021a98 <log_msg_put>:
{
   21a98:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   21a9a:	1d02      	adds	r2, r0, #4
   21a9c:	f3bf 8f5b 	dmb	ish
   21aa0:	e852 1f00 	ldrex	r1, [r2]
   21aa4:	3901      	subs	r1, #1
   21aa6:	e842 1c00 	strex	ip, r1, [r2]
   21aaa:	f1bc 0f00 	cmp.w	ip, #0
   21aae:	d1f7      	bne.n	21aa0 <log_msg_put+0x8>
   21ab0:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   21ab4:	685b      	ldr	r3, [r3, #4]
   21ab6:	b90b      	cbnz	r3, 21abc <log_msg_put+0x24>
		msg_free(msg);
   21ab8:	f7f0 ba36 	b.w	11f28 <msg_free>
}
   21abc:	4770      	bx	lr

00021abe <log_msg_str_get>:

const char *log_msg_str_get(struct log_msg *msg)
{
	return msg->str;
}
   21abe:	6900      	ldr	r0, [r0, #16]
   21ac0:	4770      	bx	lr

00021ac2 <log_msg_create_n>:
		cont = cont->next;
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
   21ac2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21ac6:	4681      	mov	r9, r0
   21ac8:	4688      	mov	r8, r1
   21aca:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   21acc:	f7f0 fa18 	bl	11f00 <log_msg_chunk_alloc>
	if (msg != NULL) {
   21ad0:	4604      	mov	r4, r0
   21ad2:	b330      	cbz	r0, 21b22 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   21ad4:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   21ad6:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   21ad8:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   21ada:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   21adc:	8107      	strh	r7, [r0, #8]
   21ade:	d909      	bls.n	21af4 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   21ae0:	2202      	movs	r2, #2
   21ae2:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   21ae4:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   21ae8:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   21aec:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   21aee:	f1ba 0f00 	cmp.w	sl, #0
   21af2:	dc0e      	bgt.n	21b12 <log_msg_create_n+0x50>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
   21af4:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   21af6:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   21afa:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   21afe:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   21b00:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   21b02:	d818      	bhi.n	21b36 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   21b04:	00aa      	lsls	r2, r5, #2
   21b06:	4641      	mov	r1, r8
   21b08:	f104 0014 	add.w	r0, r4, #20
   21b0c:	f000 fa21 	bl	21f52 <memcpy>
	while (nargs != 0U) {
   21b10:	e007      	b.n	21b22 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   21b12:	f7f0 f9f5 	bl	11f00 <log_msg_chunk_alloc>
		if (cont == NULL) {
   21b16:	4606      	mov	r6, r0
   21b18:	b930      	cbnz	r0, 21b28 <log_msg_create_n+0x66>
			msg_free(msg);
   21b1a:	4620      	mov	r0, r4
   21b1c:	f7f0 fa04 	bl	11f28 <msg_free>
			return NULL;
   21b20:	4634      	mov	r4, r6
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
   21b22:	4620      	mov	r0, r4
   21b24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   21b28:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   21b2c:	f1aa 0a07 	sub.w	sl, sl, #7
   21b30:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   21b32:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   21b34:	e7db      	b.n	21aee <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   21b36:	4641      	mov	r1, r8
   21b38:	2208      	movs	r2, #8
   21b3a:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   21b3e:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   21b40:	f000 fa07 	bl	21f52 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   21b44:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   21b46:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   21b4a:	2d07      	cmp	r5, #7
   21b4c:	462e      	mov	r6, r5
   21b4e:	bf28      	it	cs
   21b50:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   21b52:	ea4f 0986 	mov.w	r9, r6, lsl #2
   21b56:	4641      	mov	r1, r8
   21b58:	1d38      	adds	r0, r7, #4
   21b5a:	464a      	mov	r2, r9
   21b5c:	f000 f9f9 	bl	21f52 <memcpy>
	while (nargs != 0U) {
   21b60:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   21b62:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   21b64:	44c8      	add	r8, r9
	while (nargs != 0U) {
   21b66:	d1f0      	bne.n	21b4a <log_msg_create_n+0x88>
   21b68:	e7db      	b.n	21b22 <log_msg_create_n+0x60>

00021b6a <log_msg_hexdump_create>:

struct log_msg *log_msg_hexdump_create(const char *str,
				       const uint8_t *data,
				       uint32_t length)
{
   21b6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct log_msg_cont *cont;
	struct log_msg *msg;
	uint32_t chunk_length;

	/* Saturate length. */
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   21b6e:	f643 75ff 	movw	r5, #16383	; 0x3fff
   21b72:	4295      	cmp	r5, r2
{
   21b74:	4680      	mov	r8, r0
   21b76:	460e      	mov	r6, r1
   21b78:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   21b7a:	bf28      	it	cs
   21b7c:	4615      	movcs	r5, r2
		 LOG_MSG_HEXDUMP_MAX_LENGTH : length;

	msg = (struct log_msg *)log_msg_chunk_alloc();
   21b7e:	f7f0 f9bf 	bl	11f00 <log_msg_chunk_alloc>
	if (msg == NULL) {
   21b82:	4604      	mov	r4, r0
   21b84:	b380      	cbz	r0, 21be8 <log_msg_hexdump_create+0x7e>
		return NULL;
	}

	/* all fields reset to 0, reference counter to 1 */
	msg->hdr.ref_cnt = 1;
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   21b86:	8902      	ldrh	r2, [r0, #8]
	msg->hdr.params.hexdump.length = length;
	msg->str = str;
   21b88:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   21b8c:	2301      	movs	r3, #1
   21b8e:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   21b90:	00ab      	lsls	r3, r5, #2
   21b92:	f043 0301 	orr.w	r3, r3, #1
   21b96:	f002 0202 	and.w	r2, r2, #2
   21b9a:	4313      	orrs	r3, r2


	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   21b9c:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   21b9e:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   21ba0:	f100 0814 	add.w	r8, r0, #20
   21ba4:	d917      	bls.n	21bd6 <log_msg_hexdump_create+0x6c>
		(void)memcpy(msg->payload.ext.data.bytes,
   21ba6:	2208      	movs	r2, #8
   21ba8:	4631      	mov	r1, r6
   21baa:	3018      	adds	r0, #24
   21bac:	f000 f9d1 	bl	21f52 <memcpy>
		       data,
		       LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK);
		msg->payload.ext.next = NULL;
		msg->hdr.params.generic.ext = 1;
   21bb0:	7a22      	ldrb	r2, [r4, #8]
		msg->payload.ext.next = NULL;
   21bb2:	2300      	movs	r3, #0
		msg->hdr.params.generic.ext = 1;
   21bb4:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   21bb8:	6163      	str	r3, [r4, #20]
		msg->hdr.params.generic.ext = 1;
   21bba:	7222      	strb	r2, [r4, #8]

		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   21bbc:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   21bbe:	3d08      	subs	r5, #8
		length = 0U;
	}

	prev_cont = &msg->payload.ext.next;

	while (length > 0) {
   21bc0:	4699      	mov	r9, r3
   21bc2:	b18d      	cbz	r5, 21be8 <log_msg_hexdump_create+0x7e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   21bc4:	f7f0 f99c 	bl	11f00 <log_msg_chunk_alloc>
		if (cont == NULL) {
   21bc8:	4607      	mov	r7, r0
   21bca:	b980      	cbnz	r0, 21bee <log_msg_hexdump_create+0x84>
			msg_free(msg);
   21bcc:	4620      	mov	r0, r4
   21bce:	f7f0 f9ab 	bl	11f28 <msg_free>
			return NULL;
   21bd2:	463c      	mov	r4, r7
   21bd4:	e008      	b.n	21be8 <log_msg_hexdump_create+0x7e>
		(void)memcpy(msg->payload.single.bytes, data, length);
   21bd6:	462a      	mov	r2, r5
   21bd8:	4631      	mov	r1, r6
   21bda:	4640      	mov	r0, r8
   21bdc:	f000 f9b9 	bl	21f52 <memcpy>
		msg->hdr.params.generic.ext = 0;
   21be0:	7a23      	ldrb	r3, [r4, #8]
   21be2:	f36f 0341 	bfc	r3, #1, #1
   21be6:	7223      	strb	r3, [r4, #8]
		data += chunk_length;
		length -= chunk_length;
	}

	return msg;
}
   21be8:	4620      	mov	r0, r4
   21bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   21bee:	2d1c      	cmp	r5, #28
   21bf0:	462f      	mov	r7, r5
   21bf2:	bf28      	it	cs
   21bf4:	271c      	movcs	r7, #28
		*prev_cont = cont;
   21bf6:	f8c8 0000 	str.w	r0, [r8]
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   21bfa:	4631      	mov	r1, r6
		cont->next = NULL;
   21bfc:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   21c00:	4680      	mov	r8, r0
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   21c02:	463a      	mov	r2, r7
   21c04:	3004      	adds	r0, #4
   21c06:	f000 f9a4 	bl	21f52 <memcpy>
		data += chunk_length;
   21c0a:	443e      	add	r6, r7
		length -= chunk_length;
   21c0c:	1bed      	subs	r5, r5, r7
   21c0e:	e7d8      	b.n	21bc2 <log_msg_hexdump_create+0x58>

00021c10 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   21c10:	4603      	mov	r3, r0
   21c12:	b140      	cbz	r0, 21c26 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   21c14:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   21c16:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   21c1a:	2a02      	cmp	r2, #2
   21c1c:	d006      	beq.n	21c2c <sys_notify_validate+0x1c>
   21c1e:	2a03      	cmp	r2, #3
   21c20:	d004      	beq.n	21c2c <sys_notify_validate+0x1c>
   21c22:	2a01      	cmp	r2, #1
   21c24:	d005      	beq.n	21c32 <sys_notify_validate+0x22>
		return -EINVAL;
   21c26:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   21c2a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   21c2c:	681a      	ldr	r2, [r3, #0]
   21c2e:	2a00      	cmp	r2, #0
   21c30:	d0f9      	beq.n	21c26 <sys_notify_validate+0x16>
		notify->result = 0;
   21c32:	2000      	movs	r0, #0
   21c34:	6098      	str	r0, [r3, #8]
   21c36:	4770      	bx	lr

00021c38 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   21c38:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   21c3a:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   21c3e:	2a02      	cmp	r2, #2
{
   21c40:	b510      	push	{r4, lr}
   21c42:	4603      	mov	r3, r0
	notify->result = res;
   21c44:	6081      	str	r1, [r0, #8]
	switch (method) {
   21c46:	d00a      	beq.n	21c5e <sys_notify_finalize+0x26>
   21c48:	2a03      	cmp	r2, #3
   21c4a:	d10b      	bne.n	21c64 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   21c4c:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   21c4e:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   21c50:	2200      	movs	r2, #0
   21c52:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   21c54:	b108      	cbz	r0, 21c5a <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   21c56:	f7fa fd4f 	bl	1c6f8 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   21c5a:	4620      	mov	r0, r4
   21c5c:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   21c5e:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   21c60:	2400      	movs	r4, #0
		break;
   21c62:	e7f5      	b.n	21c50 <sys_notify_finalize+0x18>
	switch (method) {
   21c64:	2400      	movs	r4, #0
   21c66:	4620      	mov	r0, r4
   21c68:	e7f2      	b.n	21c50 <sys_notify_finalize+0x18>

00021c6a <abort_function>:
{
   21c6a:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   21c6c:	2000      	movs	r0, #0
   21c6e:	f7f0 fc1b 	bl	124a8 <sys_reboot>

00021c72 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21c72:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   21c74:	f013 0307 	ands.w	r3, r3, #7
   21c78:	d105      	bne.n	21c86 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   21c7a:	6803      	ldr	r3, [r0, #0]
   21c7c:	2b00      	cmp	r3, #0
		evt = EVT_START;
   21c7e:	bf0c      	ite	eq
   21c80:	2000      	moveq	r0, #0
   21c82:	2003      	movne	r0, #3
   21c84:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   21c86:	2b02      	cmp	r3, #2
   21c88:	d105      	bne.n	21c96 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   21c8a:	8b43      	ldrh	r3, [r0, #26]
   21c8c:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   21c8e:	bf14      	ite	ne
   21c90:	2000      	movne	r0, #0
   21c92:	2004      	moveq	r0, #4
   21c94:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   21c96:	2b01      	cmp	r3, #1
   21c98:	d105      	bne.n	21ca6 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   21c9a:	6803      	ldr	r3, [r0, #0]
   21c9c:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   21c9e:	bf0c      	ite	eq
   21ca0:	2000      	moveq	r0, #0
   21ca2:	2005      	movne	r0, #5
   21ca4:	4770      	bx	lr
	int evt = EVT_NOP;
   21ca6:	2000      	movs	r0, #0
}
   21ca8:	4770      	bx	lr

00021caa <notify_one>:
{
   21caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21cae:	460d      	mov	r5, r1
   21cb0:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   21cb2:	4619      	mov	r1, r3
   21cb4:	1d28      	adds	r0, r5, #4
{
   21cb6:	4690      	mov	r8, r2
   21cb8:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   21cba:	f7ff ffbd 	bl	21c38 <sys_notify_finalize>
	if (cb) {
   21cbe:	4604      	mov	r4, r0
   21cc0:	b138      	cbz	r0, 21cd2 <notify_one+0x28>
		cb(mgr, cli, state, res);
   21cc2:	4633      	mov	r3, r6
   21cc4:	4642      	mov	r2, r8
   21cc6:	4629      	mov	r1, r5
   21cc8:	4638      	mov	r0, r7
   21cca:	46a4      	mov	ip, r4
}
   21ccc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   21cd0:	4760      	bx	ip
}
   21cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021cd6 <transition_complete>:
{
   21cd6:	b410      	push	{r4}
	__asm__ volatile(
   21cd8:	f04f 0440 	mov.w	r4, #64	; 0x40
   21cdc:	f3ef 8211 	mrs	r2, BASEPRI
   21ce0:	f384 8812 	msr	BASEPRI_MAX, r4
   21ce4:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   21ce8:	6141      	str	r1, [r0, #20]
}
   21cea:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   21cec:	2101      	movs	r1, #1
   21cee:	f7f0 ba3b 	b.w	12168 <process_event>

00021cf2 <validate_args>:
{
   21cf2:	b510      	push	{r4, lr}
   21cf4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   21cf6:	b140      	cbz	r0, 21d0a <validate_args+0x18>
   21cf8:	b139      	cbz	r1, 21d0a <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   21cfa:	1d08      	adds	r0, r1, #4
   21cfc:	f7ff ff88 	bl	21c10 <sys_notify_validate>
	if ((rv == 0)
   21d00:	b928      	cbnz	r0, 21d0e <validate_args+0x1c>
	    && ((cli->notify.flags
   21d02:	68a3      	ldr	r3, [r4, #8]
   21d04:	f033 0303 	bics.w	r3, r3, #3
   21d08:	d001      	beq.n	21d0e <validate_args+0x1c>
		rv = -EINVAL;
   21d0a:	f06f 0015 	mvn.w	r0, #21
}
   21d0e:	bd10      	pop	{r4, pc}

00021d10 <onoff_manager_init>:
{
   21d10:	b538      	push	{r3, r4, r5, lr}
   21d12:	460c      	mov	r4, r1
	if ((mgr == NULL)
   21d14:	4605      	mov	r5, r0
   21d16:	b158      	cbz	r0, 21d30 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   21d18:	b151      	cbz	r1, 21d30 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   21d1a:	680b      	ldr	r3, [r1, #0]
   21d1c:	b143      	cbz	r3, 21d30 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   21d1e:	684b      	ldr	r3, [r1, #4]
   21d20:	b133      	cbz	r3, 21d30 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   21d22:	221c      	movs	r2, #28
   21d24:	2100      	movs	r1, #0
   21d26:	f000 f91f 	bl	21f68 <memset>
   21d2a:	612c      	str	r4, [r5, #16]
	return 0;
   21d2c:	2000      	movs	r0, #0
}
   21d2e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   21d30:	f06f 0015 	mvn.w	r0, #21
   21d34:	e7fb      	b.n	21d2e <onoff_manager_init+0x1e>

00021d36 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   21d36:	b570      	push	{r4, r5, r6, lr}
   21d38:	4604      	mov	r4, r0
   21d3a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   21d3c:	f7ff ffd9 	bl	21cf2 <validate_args>

	if (rv < 0) {
   21d40:	1e05      	subs	r5, r0, #0
   21d42:	db31      	blt.n	21da8 <onoff_request+0x72>
   21d44:	f04f 0340 	mov.w	r3, #64	; 0x40
   21d48:	f3ef 8111 	mrs	r1, BASEPRI
   21d4c:	f383 8812 	msr	BASEPRI_MAX, r3
   21d50:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   21d54:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21d56:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   21d58:	f64f 75ff 	movw	r5, #65535	; 0xffff
   21d5c:	42ab      	cmp	r3, r5
   21d5e:	f000 0207 	and.w	r2, r0, #7
   21d62:	d02e      	beq.n	21dc2 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   21d64:	2a02      	cmp	r2, #2
   21d66:	d10e      	bne.n	21d86 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   21d68:	3301      	adds	r3, #1
   21d6a:	8363      	strh	r3, [r4, #26]
	rv = state;
   21d6c:	4615      	mov	r5, r2
		notify = true;
   21d6e:	2301      	movs	r3, #1
	__asm__ volatile(
   21d70:	f381 8811 	msr	BASEPRI, r1
   21d74:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   21d78:	b1b3      	cbz	r3, 21da8 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   21d7a:	2300      	movs	r3, #0
   21d7c:	4631      	mov	r1, r6
   21d7e:	4620      	mov	r0, r4
   21d80:	f7ff ff93 	bl	21caa <notify_one>
   21d84:	e010      	b.n	21da8 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   21d86:	0783      	lsls	r3, r0, #30
   21d88:	d001      	beq.n	21d8e <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   21d8a:	2a06      	cmp	r2, #6
   21d8c:	d10e      	bne.n	21dac <onoff_request+0x76>
	parent->next = child;
   21d8e:	2300      	movs	r3, #0
   21d90:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   21d92:	6863      	ldr	r3, [r4, #4]
   21d94:	b993      	cbnz	r3, 21dbc <onoff_request+0x86>
	list->head = node;
   21d96:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   21d9a:	4615      	mov	r5, r2
   21d9c:	b962      	cbnz	r2, 21db8 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   21d9e:	460a      	mov	r2, r1
   21da0:	4620      	mov	r0, r4
   21da2:	2102      	movs	r1, #2
   21da4:	f7f0 f9e0 	bl	12168 <process_event>
		}
	}

	return rv;
}
   21da8:	4628      	mov	r0, r5
   21daa:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   21dac:	2a05      	cmp	r2, #5
   21dae:	bf0c      	ite	eq
   21db0:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   21db4:	f06f 0504 	mvnne.w	r5, #4
   21db8:	2300      	movs	r3, #0
   21dba:	e7d9      	b.n	21d70 <onoff_request+0x3a>
	parent->next = child;
   21dbc:	601e      	str	r6, [r3, #0]
	list->tail = node;
   21dbe:	6066      	str	r6, [r4, #4]
}
   21dc0:	e7eb      	b.n	21d9a <onoff_request+0x64>
		rv = -EAGAIN;
   21dc2:	f06f 050a 	mvn.w	r5, #10
   21dc6:	e7f7      	b.n	21db8 <onoff_request+0x82>

00021dc8 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   21dc8:	2200      	movs	r2, #0
   21dca:	e9c0 2200 	strd	r2, r2, [r0]
   21dce:	6082      	str	r2, [r0, #8]
}
   21dd0:	4770      	bx	lr

00021dd2 <arch_printk_char_out>:
}
   21dd2:	2000      	movs	r0, #0
   21dd4:	4770      	bx	lr

00021dd6 <str_out>:
{
   21dd6:	b530      	push	{r4, r5, lr}
   21dd8:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   21dda:	680c      	ldr	r4, [r1, #0]
   21ddc:	1c55      	adds	r5, r2, #1
   21dde:	b114      	cbz	r4, 21de6 <str_out+0x10>
   21de0:	684b      	ldr	r3, [r1, #4]
   21de2:	4293      	cmp	r3, r2
   21de4:	dc01      	bgt.n	21dea <str_out+0x14>
		ctx->count++;
   21de6:	608d      	str	r5, [r1, #8]
}
   21de8:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   21dea:	3b01      	subs	r3, #1
   21dec:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   21dee:	bf08      	it	eq
   21df0:	2200      	moveq	r2, #0
   21df2:	608d      	str	r5, [r1, #8]
   21df4:	bf0c      	ite	eq
   21df6:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   21df8:	54a0      	strbne	r0, [r4, r2]
   21dfa:	e7f5      	b.n	21de8 <str_out+0x12>

00021dfc <printk>:
{
   21dfc:	b40f      	push	{r0, r1, r2, r3}
   21dfe:	b507      	push	{r0, r1, r2, lr}
   21e00:	a904      	add	r1, sp, #16
   21e02:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   21e06:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   21e08:	f7f0 fb2c 	bl	12464 <vprintk>
}
   21e0c:	b003      	add	sp, #12
   21e0e:	f85d eb04 	ldr.w	lr, [sp], #4
   21e12:	b004      	add	sp, #16
   21e14:	4770      	bx	lr

00021e16 <snprintk>:
{
   21e16:	b40c      	push	{r2, r3}
   21e18:	b507      	push	{r0, r1, r2, lr}
   21e1a:	ab04      	add	r3, sp, #16
   21e1c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   21e20:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   21e22:	f7f0 fb2d 	bl	12480 <vsnprintk>
}
   21e26:	b003      	add	sp, #12
   21e28:	f85d eb04 	ldr.w	lr, [sp], #4
   21e2c:	b002      	add	sp, #8
   21e2e:	4770      	bx	lr

00021e30 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   21e30:	4604      	mov	r4, r0
   21e32:	b508      	push	{r3, lr}
   21e34:	4608      	mov	r0, r1
   21e36:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   21e38:	461a      	mov	r2, r3
   21e3a:	47a0      	blx	r4
	return z_impl_z_current_get();
   21e3c:	f7fa ffbc 	bl	1cdb8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   21e40:	f7f0 ffaa 	bl	12d98 <z_impl_k_thread_abort>

00021e44 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   21e44:	b538      	push	{r3, r4, r5, lr}
   21e46:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   21e48:	42ab      	cmp	r3, r5
{
   21e4a:	4611      	mov	r1, r2
   21e4c:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   21e4e:	d804      	bhi.n	21e5a <_copy+0x16>
		(void)memcpy(to, from, from_len);
   21e50:	461a      	mov	r2, r3
   21e52:	f000 f87e 	bl	21f52 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   21e56:	4620      	mov	r0, r4
   21e58:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   21e5a:	2400      	movs	r4, #0
   21e5c:	e7fb      	b.n	21e56 <_copy+0x12>

00021e5e <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   21e5e:	f000 b883 	b.w	21f68 <memset>

00021e62 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   21e62:	09c3      	lsrs	r3, r0, #7
   21e64:	005a      	lsls	r2, r3, #1
   21e66:	4413      	add	r3, r2
   21e68:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   21e6c:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   21e70:	b2c0      	uxtb	r0, r0
   21e72:	4770      	bx	lr

00021e74 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   21e74:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   21e76:	6800      	ldr	r0, [r0, #0]
   21e78:	f7f0 bbaa 	b.w	125d0 <z_arm_fatal_error>

00021e7c <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   21e7c:	2100      	movs	r1, #0
   21e7e:	2001      	movs	r0, #1
   21e80:	f7f0 bba6 	b.w	125d0 <z_arm_fatal_error>

00021e84 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   21e84:	b508      	push	{r3, lr}
	handler();
   21e86:	f7f0 fb65 	bl	12554 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   21e8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   21e8e:	f7f0 bcb3 	b.w	127f8 <z_arm_exc_exit>

00021e92 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   21e92:	3901      	subs	r1, #1
   21e94:	4603      	mov	r3, r0
   21e96:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   21e9a:	b90a      	cbnz	r2, 21ea0 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   21e9c:	701a      	strb	r2, [r3, #0]

	return dest;
}
   21e9e:	4770      	bx	lr
		*d = *s;
   21ea0:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   21ea4:	e7f7      	b.n	21e96 <strcpy+0x4>

00021ea6 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   21ea6:	b570      	push	{r4, r5, r6, lr}
   21ea8:	3901      	subs	r1, #1
   21eaa:	4605      	mov	r5, r0
   21eac:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   21eae:	b142      	cbz	r2, 21ec2 <strncpy+0x1c>
   21eb0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   21eb4:	1e56      	subs	r6, r2, #1
   21eb6:	b92b      	cbnz	r3, 21ec4 <strncpy+0x1e>
   21eb8:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   21eba:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   21ebe:	42a2      	cmp	r2, r4
   21ec0:	d1fb      	bne.n	21eba <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   21ec2:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   21ec4:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   21ec8:	4632      	mov	r2, r6
   21eca:	e7ef      	b.n	21eac <strncpy+0x6>

00021ecc <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   21ecc:	4603      	mov	r3, r0
	size_t n = 0;
   21ece:	2000      	movs	r0, #0

	while (*s != '\0') {
   21ed0:	5c1a      	ldrb	r2, [r3, r0]
   21ed2:	b902      	cbnz	r2, 21ed6 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   21ed4:	4770      	bx	lr
		n++;
   21ed6:	3001      	adds	r0, #1
   21ed8:	e7fa      	b.n	21ed0 <strlen+0x4>

00021eda <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   21eda:	4603      	mov	r3, r0
	size_t n = 0;
   21edc:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   21ede:	5c1a      	ldrb	r2, [r3, r0]
   21ee0:	b10a      	cbz	r2, 21ee6 <strnlen+0xc>
   21ee2:	4288      	cmp	r0, r1
   21ee4:	d100      	bne.n	21ee8 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   21ee6:	4770      	bx	lr
		n++;
   21ee8:	3001      	adds	r0, #1
   21eea:	e7f8      	b.n	21ede <strnlen+0x4>

00021eec <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   21eec:	1e43      	subs	r3, r0, #1
   21eee:	3901      	subs	r1, #1
   21ef0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   21ef4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   21ef8:	4282      	cmp	r2, r0
   21efa:	d101      	bne.n	21f00 <strcmp+0x14>
   21efc:	2a00      	cmp	r2, #0
   21efe:	d1f7      	bne.n	21ef0 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   21f00:	1a10      	subs	r0, r2, r0
   21f02:	4770      	bx	lr

00021f04 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   21f04:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   21f06:	b15a      	cbz	r2, 21f20 <memcmp+0x1c>
   21f08:	3901      	subs	r1, #1
   21f0a:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   21f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
   21f10:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   21f14:	42a0      	cmp	r0, r4
   21f16:	d001      	beq.n	21f1c <memcmp+0x18>
   21f18:	429a      	cmp	r2, r3
   21f1a:	d0f7      	beq.n	21f0c <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   21f1c:	1ad0      	subs	r0, r2, r3
}
   21f1e:	bd10      	pop	{r4, pc}
		return 0;
   21f20:	4610      	mov	r0, r2
   21f22:	e7fc      	b.n	21f1e <memcmp+0x1a>

00021f24 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   21f24:	1a43      	subs	r3, r0, r1
   21f26:	4293      	cmp	r3, r2
{
   21f28:	b510      	push	{r4, lr}
   21f2a:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   21f2e:	d308      	bcc.n	21f42 <memmove+0x1e>
   21f30:	3901      	subs	r1, #1
	char *dest = d;
   21f32:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   21f34:	429a      	cmp	r2, r3
   21f36:	d00b      	beq.n	21f50 <memmove+0x2c>
			*dest = *src;
   21f38:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   21f3c:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   21f40:	e7f8      	b.n	21f34 <memmove+0x10>
   21f42:	440a      	add	r2, r1
			dest[n] = src[n];
   21f44:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   21f48:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   21f4c:	428a      	cmp	r2, r1
   21f4e:	d1f9      	bne.n	21f44 <memmove+0x20>
		}
	}

	return d;
}
   21f50:	bd10      	pop	{r4, pc}

00021f52 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   21f52:	b510      	push	{r4, lr}
   21f54:	1e43      	subs	r3, r0, #1
   21f56:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   21f58:	4291      	cmp	r1, r2
   21f5a:	d100      	bne.n	21f5e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   21f5c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   21f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
   21f62:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   21f66:	e7f7      	b.n	21f58 <memcpy+0x6>

00021f68 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   21f68:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   21f6a:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   21f6c:	4603      	mov	r3, r0
	while (n > 0) {
   21f6e:	4293      	cmp	r3, r2
   21f70:	d100      	bne.n	21f74 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   21f72:	4770      	bx	lr
		*(d_byte++) = c_byte;
   21f74:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   21f78:	e7f9      	b.n	21f6e <memset+0x6>

00021f7a <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   21f7a:	b084      	sub	sp, #16
   21f7c:	ab04      	add	r3, sp, #16
   21f7e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   21f82:	f89d 3004 	ldrb.w	r3, [sp, #4]
   21f86:	2b06      	cmp	r3, #6
   21f88:	d108      	bne.n	21f9c <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   21f8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21f8e:	2201      	movs	r2, #1
   21f90:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   21f94:	f3bf 8f4f 	dsb	sy
        __WFE();
   21f98:	bf20      	wfe
    while (true)
   21f9a:	e7fd      	b.n	21f98 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   21f9c:	b004      	add	sp, #16
   21f9e:	4770      	bx	lr

00021fa0 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   21fa0:	b084      	sub	sp, #16
   21fa2:	ab04      	add	r3, sp, #16
   21fa4:	e903 0007 	stmdb	r3, {r0, r1, r2}
   21fa8:	2300      	movs	r3, #0
   21faa:	f383 8811 	msr	BASEPRI, r3
   21fae:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   21fb2:	b004      	add	sp, #16
   21fb4:	4770      	bx	lr

00021fb6 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   21fb6:	b530      	push	{r4, r5, lr}
   21fb8:	b085      	sub	sp, #20
   21fba:	4604      	mov	r4, r0
   21fbc:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   21fbe:	4668      	mov	r0, sp
   21fc0:	2203      	movs	r2, #3
   21fc2:	f7ff ffc6 	bl	21f52 <memcpy>
	(void)memset(res + 3, 0, 13);
   21fc6:	220d      	movs	r2, #13
   21fc8:	2100      	movs	r1, #0
   21fca:	f10d 0003 	add.w	r0, sp, #3
   21fce:	f7ff ffcb 	bl	21f68 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   21fd2:	4620      	mov	r0, r4
   21fd4:	466a      	mov	r2, sp
   21fd6:	4669      	mov	r1, sp
   21fd8:	f002 f982 	bl	242e0 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   21fdc:	4604      	mov	r4, r0
   21fde:	b920      	cbnz	r0, 21fea <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   21fe0:	2203      	movs	r2, #3
   21fe2:	4669      	mov	r1, sp
   21fe4:	4628      	mov	r0, r5
   21fe6:	f7ff ffb4 	bl	21f52 <memcpy>

	return 0;
}
   21fea:	4620      	mov	r0, r4
   21fec:	b005      	add	sp, #20
   21fee:	bd30      	pop	{r4, r5, pc}

00021ff0 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   21ff0:	b513      	push	{r0, r1, r4, lr}
   21ff2:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   21ff4:	aa01      	add	r2, sp, #4
   21ff6:	3103      	adds	r1, #3
   21ff8:	f7ff ffdd 	bl	21fb6 <ah>
	if (err) {
   21ffc:	b948      	cbnz	r0, 22012 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   21ffe:	2203      	movs	r2, #3
   22000:	a901      	add	r1, sp, #4
   22002:	4620      	mov	r0, r4
   22004:	f7ff ff7e 	bl	21f04 <memcmp>
   22008:	fab0 f080 	clz	r0, r0
   2200c:	0940      	lsrs	r0, r0, #5
}
   2200e:	b002      	add	sp, #8
   22010:	bd10      	pop	{r4, pc}
		return false;
   22012:	2000      	movs	r0, #0
   22014:	e7fb      	b.n	2200e <bt_rpa_irk_matches+0x1e>

00022016 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   22016:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   22018:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2201a:	2106      	movs	r1, #6
{
   2201c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2201e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   22022:	f7f9 f8fb 	bl	1b21c <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   22026:	b918      	cbnz	r0, 22030 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   22028:	79a3      	ldrb	r3, [r4, #6]
   2202a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2202e:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   22030:	bd10      	pop	{r4, pc}

00022032 <get_adv_channel_map>:
{
   22032:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   22034:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   22038:	bf0c      	ite	eq
   2203a:	2007      	moveq	r0, #7
   2203c:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2203e:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   22040:	bf48      	it	mi
   22042:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   22046:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   22048:	bf48      	it	mi
   2204a:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2204e:	4770      	bx	lr

00022050 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22050:	f3bf 8f5b 	dmb	ish
   22054:	6800      	ldr	r0, [r0, #0]
   22056:	f3bf 8f5b 	dmb	ish
}
   2205a:	4770      	bx	lr

0002205c <atomic_and>:
{
   2205c:	4603      	mov	r3, r0
}
   2205e:	f3bf 8f5b 	dmb	ish
   22062:	e853 0f00 	ldrex	r0, [r3]
   22066:	ea00 0201 	and.w	r2, r0, r1
   2206a:	e843 2c00 	strex	ip, r2, [r3]
   2206e:	f1bc 0f00 	cmp.w	ip, #0
   22072:	d1f6      	bne.n	22062 <atomic_and+0x6>
   22074:	f3bf 8f5b 	dmb	ish
   22078:	4770      	bx	lr

0002207a <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2207a:	2301      	movs	r3, #1
{
   2207c:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2207e:	fa03 f101 	lsl.w	r1, r3, r1
{
   22082:	4604      	mov	r4, r0
	if (val) {
   22084:	b162      	cbz	r2, 220a0 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22086:	f3bf 8f5b 	dmb	ish
   2208a:	e854 3f00 	ldrex	r3, [r4]
   2208e:	430b      	orrs	r3, r1
   22090:	e844 3200 	strex	r2, r3, [r4]
   22094:	2a00      	cmp	r2, #0
   22096:	d1f8      	bne.n	2208a <atomic_set_bit_to+0x10>
   22098:	f3bf 8f5b 	dmb	ish
	}
}
   2209c:	bc10      	pop	{r4}
   2209e:	4770      	bx	lr
   220a0:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   220a2:	43c9      	mvns	r1, r1
   220a4:	f7ff bfda 	b.w	2205c <atomic_and>

000220a8 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   220a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   220ac:	b087      	sub	sp, #28
   220ae:	4605      	mov	r5, r0
   220b0:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   220b4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   220b8:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   220bc:	460c      	mov	r4, r1
   220be:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   220c0:	2100      	movs	r1, #0
   220c2:	2210      	movs	r2, #16
   220c4:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   220c6:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   220c8:	f7ff ff4e 	bl	21f68 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   220cc:	b186      	cbz	r6, 220f0 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   220ce:	f7f5 fc6d 	bl	179ac <bt_get_name>
   220d2:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   220d4:	2c00      	cmp	r4, #0
   220d6:	d139      	bne.n	2214c <le_adv_update.constprop.0+0xa4>
   220d8:	2f00      	cmp	r7, #0
   220da:	d142      	bne.n	22162 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   220dc:	4658      	mov	r0, fp
   220de:	f7ff fef5 	bl	21ecc <strlen>
   220e2:	2309      	movs	r3, #9
   220e4:	f88d 3000 	strb.w	r3, [sp]
   220e8:	f88d 0001 	strb.w	r0, [sp, #1]
   220ec:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   220f0:	2e01      	cmp	r6, #1
			d_len = 2;
   220f2:	bf0c      	ite	eq
   220f4:	2202      	moveq	r2, #2
		d_len = 1;
   220f6:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   220f8:	a902      	add	r1, sp, #8
   220fa:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   220fe:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   22102:	bf04      	itt	eq
   22104:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   22108:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2210a:	f7f1 f849 	bl	131a0 <hci_set_ad>
		if (err) {
   2210e:	4604      	mov	r4, r0
   22110:	b978      	cbnz	r0, 22132 <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   22112:	f1ba 0f00 	cmp.w	sl, #0
   22116:	d126      	bne.n	22166 <le_adv_update.constprop.0+0xbe>
   22118:	3510      	adds	r5, #16
   2211a:	f3bf 8f5b 	dmb	ish
   2211e:	e855 3f00 	ldrex	r3, [r5]
   22122:	f043 0304 	orr.w	r3, r3, #4
   22126:	e845 3200 	strex	r2, r3, [r5]
   2212a:	2a00      	cmp	r2, #0
   2212c:	d1f7      	bne.n	2211e <le_adv_update.constprop.0+0x76>
   2212e:	f3bf 8f5b 	dmb	ish
}
   22132:	4620      	mov	r0, r4
   22134:	b007      	add	sp, #28
   22136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2213a:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2213e:	3a08      	subs	r2, #8
   22140:	2a01      	cmp	r2, #1
   22142:	d925      	bls.n	22190 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   22144:	3301      	adds	r3, #1
   22146:	4598      	cmp	r8, r3
   22148:	d1f7      	bne.n	2213a <le_adv_update.constprop.0+0x92>
   2214a:	e7c5      	b.n	220d8 <le_adv_update.constprop.0+0x30>
   2214c:	2300      	movs	r3, #0
   2214e:	e7fa      	b.n	22146 <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   22150:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   22154:	3a08      	subs	r2, #8
   22156:	2a01      	cmp	r2, #1
   22158:	d91a      	bls.n	22190 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   2215a:	3301      	adds	r3, #1
   2215c:	4599      	cmp	r9, r3
   2215e:	d1f7      	bne.n	22150 <le_adv_update.constprop.0+0xa8>
   22160:	e7bc      	b.n	220dc <le_adv_update.constprop.0+0x34>
   22162:	2300      	movs	r3, #0
   22164:	e7fa      	b.n	2215c <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   22166:	2e02      	cmp	r6, #2
   22168:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   2216c:	bf08      	it	eq
   2216e:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   22170:	a902      	add	r1, sp, #8
			d_len = 2;
   22172:	bf08      	it	eq
   22174:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   22176:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   2217a:	bf08      	it	eq
   2217c:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   22180:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   22184:	f7f1 f80c 	bl	131a0 <hci_set_ad>
		if (err) {
   22188:	2800      	cmp	r0, #0
   2218a:	d0c5      	beq.n	22118 <le_adv_update.constprop.0+0x70>
   2218c:	4604      	mov	r4, r0
   2218e:	e7d0      	b.n	22132 <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   22190:	f06f 0415 	mvn.w	r4, #21
   22194:	e7cd      	b.n	22132 <le_adv_update.constprop.0+0x8a>

00022196 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   22196:	6843      	ldr	r3, [r0, #4]
   22198:	f013 0008 	ands.w	r0, r3, #8
   2219c:	d00a      	beq.n	221b4 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2219e:	035a      	lsls	r2, r3, #13
   221a0:	d407      	bmi.n	221b2 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   221a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   221a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		return ADV_NAME_TYPE_SD;
   221aa:	bf0c      	ite	eq
   221ac:	2001      	moveq	r0, #1
   221ae:	2002      	movne	r0, #2
   221b0:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   221b2:	2001      	movs	r0, #1
}
   221b4:	4770      	bx	lr

000221b6 <bt_le_adv_set_enable_legacy>:
{
   221b6:	b570      	push	{r4, r5, r6, lr}
   221b8:	4606      	mov	r6, r0
   221ba:	b086      	sub	sp, #24
   221bc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   221be:	f242 000a 	movw	r0, #8202	; 0x200a
   221c2:	2101      	movs	r1, #1
   221c4:	f7f4 fe1a 	bl	16dfc <bt_hci_cmd_create>
	if (!buf) {
   221c8:	4604      	mov	r4, r0
   221ca:	b1b0      	cbz	r0, 221fa <bt_le_adv_set_enable_legacy+0x44>
	if (enable) {
   221cc:	3008      	adds	r0, #8
   221ce:	b195      	cbz	r5, 221f6 <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   221d0:	2101      	movs	r1, #1
   221d2:	f001 fefb 	bl	23fcc <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   221d6:	f106 0210 	add.w	r2, r6, #16
   221da:	a903      	add	r1, sp, #12
   221dc:	4620      	mov	r0, r4
   221de:	9500      	str	r5, [sp, #0]
   221e0:	2306      	movs	r3, #6
   221e2:	f7f4 fdf9 	bl	16dd8 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   221e6:	2200      	movs	r2, #0
   221e8:	4621      	mov	r1, r4
   221ea:	f242 000a 	movw	r0, #8202	; 0x200a
   221ee:	f7f4 ff61 	bl	170b4 <bt_hci_cmd_send_sync>
}
   221f2:	b006      	add	sp, #24
   221f4:	bd70      	pop	{r4, r5, r6, pc}
   221f6:	4629      	mov	r1, r5
   221f8:	e7eb      	b.n	221d2 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   221fa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   221fe:	e7f8      	b.n	221f2 <bt_le_adv_set_enable_legacy+0x3c>

00022200 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   22200:	f7ff bfd9 	b.w	221b6 <bt_le_adv_set_enable_legacy>

00022204 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   22204:	3018      	adds	r0, #24
   22206:	f002 be31 	b.w	24e6c <k_work_cancel_delayable>

0002220a <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2220a:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   2220c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2220e:	b128      	cbz	r0, 2221c <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22210:	6859      	ldr	r1, [r3, #4]
   22212:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   22214:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22216:	4288      	cmp	r0, r1
	list->tail = node;
   22218:	bf08      	it	eq
   2221a:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2221c:	4770      	bx	lr

0002221e <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2221e:	4603      	mov	r3, r0
   22220:	6800      	ldr	r0, [r0, #0]
   22222:	2200      	movs	r2, #0
   22224:	b900      	cbnz	r0, 22228 <sys_slist_find_and_remove+0xa>
   22226:	4770      	bx	lr
   22228:	4288      	cmp	r0, r1
   2222a:	d110      	bne.n	2224e <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   2222c:	6808      	ldr	r0, [r1, #0]
   2222e:	b942      	cbnz	r2, 22242 <sys_slist_find_and_remove+0x24>
   22230:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   22232:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   22234:	4291      	cmp	r1, r2
   22236:	d100      	bne.n	2223a <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   22238:	6058      	str	r0, [r3, #4]
	parent->next = child;
   2223a:	2300      	movs	r3, #0
   2223c:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2223e:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   22240:	4770      	bx	lr
	parent->next = child;
   22242:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   22244:	6858      	ldr	r0, [r3, #4]
   22246:	4281      	cmp	r1, r0
	list->tail = node;
   22248:	bf08      	it	eq
   2224a:	605a      	streq	r2, [r3, #4]
}
   2224c:	e7f5      	b.n	2223a <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2224e:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   22250:	6800      	ldr	r0, [r0, #0]
   22252:	e7e7      	b.n	22224 <sys_slist_find_and_remove+0x6>

00022254 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   22254:	4603      	mov	r3, r0
	size_t bytes = 0;
   22256:	2000      	movs	r0, #0

	while (buf) {
   22258:	b903      	cbnz	r3, 2225c <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2225a:	4770      	bx	lr
		bytes += buf->len;
   2225c:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2225e:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   22260:	4410      	add	r0, r2
		buf = buf->frags;
   22262:	e7f9      	b.n	22258 <net_buf_frags_len+0x4>

00022264 <att_sent>:
	if (chan->ops->sent) {
   22264:	684b      	ldr	r3, [r1, #4]
   22266:	695b      	ldr	r3, [r3, #20]
{
   22268:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   2226a:	b103      	cbz	r3, 2226e <att_sent+0xa>
		chan->ops->sent(chan);
   2226c:	4718      	bx	r3
}
   2226e:	4770      	bx	lr

00022270 <attr_read_type_cb>:
{
   22270:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   22272:	68d4      	ldr	r4, [r2, #12]
   22274:	7823      	ldrb	r3, [r4, #0]
   22276:	3102      	adds	r1, #2
   22278:	b913      	cbnz	r3, 22280 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2227a:	7021      	strb	r1, [r4, #0]
	return true;
   2227c:	2001      	movs	r0, #1
   2227e:	e006      	b.n	2228e <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   22280:	428b      	cmp	r3, r1
   22282:	d0fb      	beq.n	2227c <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   22284:	8983      	ldrh	r3, [r0, #12]
   22286:	3b02      	subs	r3, #2
   22288:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2228a:	2000      	movs	r0, #0
   2228c:	6110      	str	r0, [r2, #16]
}
   2228e:	bd10      	pop	{r4, pc}

00022290 <att_prepare_write_req>:
}
   22290:	2006      	movs	r0, #6
   22292:	4770      	bx	lr

00022294 <att_op_get_type>:
	switch (op) {
   22294:	281e      	cmp	r0, #30
   22296:	d816      	bhi.n	222c6 <att_op_get_type+0x32>
   22298:	b308      	cbz	r0, 222de <att_op_get_type+0x4a>
   2229a:	1e43      	subs	r3, r0, #1
   2229c:	2b1d      	cmp	r3, #29
   2229e:	d81e      	bhi.n	222de <att_op_get_type+0x4a>
   222a0:	e8df f003 	tbb	[pc, r3]
   222a4:	23172317 	.word	0x23172317
   222a8:	23172317 	.word	0x23172317
   222ac:	23172317 	.word	0x23172317
   222b0:	23172317 	.word	0x23172317
   222b4:	1d172317 	.word	0x1d172317
   222b8:	2317231d 	.word	0x2317231d
   222bc:	1d191d17 	.word	0x1d191d17
   222c0:	0f1b      	.short	0x0f1b
   222c2:	2004      	movs	r0, #4
   222c4:	4770      	bx	lr
   222c6:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   222ca:	2b52      	cmp	r3, #82	; 0x52
   222cc:	d107      	bne.n	222de <att_op_get_type+0x4a>
		return ATT_COMMAND;
   222ce:	2000      	movs	r0, #0
}
   222d0:	4770      	bx	lr
		return ATT_RESPONSE;
   222d2:	2002      	movs	r0, #2
   222d4:	4770      	bx	lr
		return ATT_NOTIFICATION;
   222d6:	2003      	movs	r0, #3
   222d8:	4770      	bx	lr
		return ATT_INDICATION;
   222da:	2005      	movs	r0, #5
   222dc:	4770      	bx	lr
		return ATT_COMMAND;
   222de:	f010 0f40 	tst.w	r0, #64	; 0x40
   222e2:	bf0c      	ite	eq
   222e4:	2006      	moveq	r0, #6
   222e6:	2000      	movne	r0, #0
   222e8:	4770      	bx	lr
		return ATT_REQUEST;
   222ea:	2001      	movs	r0, #1
   222ec:	4770      	bx	lr

000222ee <bt_gatt_foreach_attr>:
{
   222ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   222f0:	e9cd 2301 	strd	r2, r3, [sp, #4]
   222f4:	2300      	movs	r3, #0
   222f6:	9300      	str	r3, [sp, #0]
   222f8:	461a      	mov	r2, r3
   222fa:	f7f3 fc0b 	bl	15b14 <bt_gatt_foreach_attr_type>
}
   222fe:	b005      	add	sp, #20
   22300:	f85d fb04 	ldr.w	pc, [sp], #4

00022304 <att_chan_read>:
{
   22304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22308:	4680      	mov	r8, r0
   2230a:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2230c:	4610      	mov	r0, r2
{
   2230e:	4699      	mov	r9, r3
   22310:	468b      	mov	fp, r1
   22312:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   22314:	f7ff ff9e 	bl	22254 <net_buf_frags_len>
   22318:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   2231c:	4283      	cmp	r3, r0
   2231e:	d97a      	bls.n	22416 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   22320:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22324:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   22326:	4630      	mov	r0, r6
   22328:	f001 fe1f 	bl	23f6a <net_buf_frag_last>
	size_t len, total = 0;
   2232c:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   22330:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   22332:	4630      	mov	r0, r6
   22334:	f7ff ff8e 	bl	22254 <net_buf_frags_len>
   22338:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   2233c:	f105 0708 	add.w	r7, r5, #8
   22340:	1a24      	subs	r4, r4, r0
   22342:	4638      	mov	r0, r7
   22344:	f001 fe6e 	bl	24024 <net_buf_simple_tailroom>
   22348:	4284      	cmp	r4, r0
   2234a:	d211      	bcs.n	22370 <att_chan_read+0x6c>
   2234c:	4630      	mov	r0, r6
   2234e:	f7ff ff81 	bl	22254 <net_buf_frags_len>
   22352:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   22356:	1a24      	subs	r4, r4, r0
		if (!len) {
   22358:	bb34      	cbnz	r4, 223a8 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2235a:	79b0      	ldrb	r0, [r6, #6]
   2235c:	f7f7 ff16 	bl	1a18c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   22360:	2200      	movs	r2, #0
   22362:	2300      	movs	r3, #0
   22364:	f001 fdcd 	bl	23f02 <net_buf_alloc_fixed>
			if (!frag) {
   22368:	4605      	mov	r5, r0
   2236a:	b930      	cbnz	r0, 2237a <att_chan_read+0x76>
	return total;
   2236c:	4657      	mov	r7, sl
   2236e:	e02c      	b.n	223ca <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   22370:	4638      	mov	r0, r7
   22372:	f001 fe57 	bl	24024 <net_buf_simple_tailroom>
   22376:	4604      	mov	r4, r0
   22378:	e7ee      	b.n	22358 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2237a:	4601      	mov	r1, r0
   2237c:	4630      	mov	r0, r6
   2237e:	f001 fe05 	bl	23f8c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   22382:	4630      	mov	r0, r6
   22384:	f7ff ff66 	bl	22254 <net_buf_frags_len>
   22388:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2238c:	f105 0708 	add.w	r7, r5, #8
   22390:	1a24      	subs	r4, r4, r0
   22392:	4638      	mov	r0, r7
   22394:	f001 fe46 	bl	24024 <net_buf_simple_tailroom>
   22398:	4284      	cmp	r4, r0
   2239a:	d21a      	bcs.n	223d2 <att_chan_read+0xce>
   2239c:	4630      	mov	r0, r6
   2239e:	f7ff ff59 	bl	22254 <net_buf_frags_len>
   223a2:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   223a6:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   223a8:	68a9      	ldr	r1, [r5, #8]
   223aa:	89aa      	ldrh	r2, [r5, #12]
   223ac:	f8db 7004 	ldr.w	r7, [fp, #4]
   223b0:	9803      	ldr	r0, [sp, #12]
   223b2:	f8cd 9000 	str.w	r9, [sp]
   223b6:	440a      	add	r2, r1
   223b8:	b2a3      	uxth	r3, r4
   223ba:	4659      	mov	r1, fp
   223bc:	47b8      	blx	r7
		if (read < 0) {
   223be:	1e07      	subs	r7, r0, #0
   223c0:	da0c      	bge.n	223dc <att_chan_read+0xd8>
				return total;
   223c2:	f1ba 0f00 	cmp.w	sl, #0
   223c6:	bf18      	it	ne
   223c8:	4657      	movne	r7, sl
}
   223ca:	4638      	mov	r0, r7
   223cc:	b005      	add	sp, #20
   223ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223d2:	4638      	mov	r0, r7
   223d4:	f001 fe26 	bl	24024 <net_buf_simple_tailroom>
   223d8:	4604      	mov	r4, r0
   223da:	e7e5      	b.n	223a8 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   223dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   223de:	b993      	cbnz	r3, 22406 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   223e0:	4639      	mov	r1, r7
   223e2:	f105 0008 	add.w	r0, r5, #8
   223e6:	f001 fde2 	bl	23fae <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   223ea:	4630      	mov	r0, r6
   223ec:	f7ff ff32 	bl	22254 <net_buf_frags_len>
   223f0:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   223f4:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   223f6:	4283      	cmp	r3, r0
		total += read;
   223f8:	44ba      	add	sl, r7
		offset += read;
   223fa:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   223fe:	d9b5      	bls.n	2236c <att_chan_read+0x68>
   22400:	42a7      	cmp	r7, r4
   22402:	d096      	beq.n	22332 <att_chan_read+0x2e>
   22404:	e7b2      	b.n	2236c <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   22406:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   22408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2240a:	4639      	mov	r1, r7
   2240c:	4628      	mov	r0, r5
   2240e:	4798      	blx	r3
   22410:	2800      	cmp	r0, #0
   22412:	d1e5      	bne.n	223e0 <att_chan_read+0xdc>
   22414:	e7aa      	b.n	2236c <att_chan_read+0x68>
		return 0;
   22416:	2700      	movs	r7, #0
   22418:	e7d7      	b.n	223ca <att_chan_read+0xc6>

0002241a <find_info_cb>:
{
   2241a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2241c:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   2241e:	6817      	ldr	r7, [r2, #0]
{
   22420:	4605      	mov	r5, r0
   22422:	460e      	mov	r6, r1
   22424:	4614      	mov	r4, r2
	if (!data->rsp) {
   22426:	b963      	cbnz	r3, 22442 <find_info_cb+0x28>
   22428:	6850      	ldr	r0, [r2, #4]
   2242a:	2101      	movs	r1, #1
   2242c:	3008      	adds	r0, #8
   2242e:	f001 fdbe 	bl	23fae <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   22432:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   22434:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   22436:	781b      	ldrb	r3, [r3, #0]
   22438:	2b00      	cmp	r3, #0
   2243a:	bf0c      	ite	eq
   2243c:	2301      	moveq	r3, #1
   2243e:	2302      	movne	r3, #2
   22440:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   22442:	68a3      	ldr	r3, [r4, #8]
   22444:	781b      	ldrb	r3, [r3, #0]
   22446:	2b01      	cmp	r3, #1
   22448:	d003      	beq.n	22452 <find_info_cb+0x38>
   2244a:	2b02      	cmp	r3, #2
   2244c:	d019      	beq.n	22482 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   2244e:	2000      	movs	r0, #0
   22450:	e016      	b.n	22480 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   22452:	682b      	ldr	r3, [r5, #0]
   22454:	781b      	ldrb	r3, [r3, #0]
   22456:	2b00      	cmp	r3, #0
   22458:	d1f9      	bne.n	2244e <find_info_cb+0x34>
   2245a:	6860      	ldr	r0, [r4, #4]
   2245c:	2104      	movs	r1, #4
   2245e:	3008      	adds	r0, #8
   22460:	f001 fda5 	bl	23fae <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   22464:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   22466:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   22468:	885b      	ldrh	r3, [r3, #2]
   2246a:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2246c:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   2246e:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   22470:	899b      	ldrh	r3, [r3, #12]
   22472:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   22476:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   22478:	2804      	cmp	r0, #4
   2247a:	bf94      	ite	ls
   2247c:	2000      	movls	r0, #0
   2247e:	2001      	movhi	r0, #1
}
   22480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   22482:	682b      	ldr	r3, [r5, #0]
   22484:	781b      	ldrb	r3, [r3, #0]
   22486:	2b02      	cmp	r3, #2
   22488:	d1e1      	bne.n	2244e <find_info_cb+0x34>
   2248a:	6860      	ldr	r0, [r4, #4]
   2248c:	2112      	movs	r1, #18
   2248e:	3008      	adds	r0, #8
   22490:	f001 fd8d 	bl	23fae <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   22494:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   22496:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   22498:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   2249a:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2249e:	3101      	adds	r1, #1
   224a0:	f7ff fd57 	bl	21f52 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   224a4:	6863      	ldr	r3, [r4, #4]
   224a6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
   224aa:	899b      	ldrh	r3, [r3, #12]
   224ac:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   224ae:	2812      	cmp	r0, #18
   224b0:	e7e3      	b.n	2247a <find_info_cb+0x60>

000224b2 <att_chan_mtu_updated>:
{
   224b2:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   224b4:	6806      	ldr	r6, [r0, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   224b6:	6a72      	ldr	r2, [r6, #36]	; 0x24
   224b8:	b30a      	cbz	r2, 224fe <att_chan_mtu_updated+0x4c>
   224ba:	f5b2 74a2 	subs.w	r4, r2, #324	; 0x144
   224be:	d01d      	beq.n	224fc <att_chan_mtu_updated+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   224c0:	6813      	ldr	r3, [r2, #0]
   224c2:	b10b      	cbz	r3, 224c8 <att_chan_mtu_updated+0x16>
   224c4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   224c8:	2200      	movs	r2, #0
   224ca:	4611      	mov	r1, r2
		if (chan == updated_chan) {
   224cc:	42a0      	cmp	r0, r4
   224ce:	d009      	beq.n	224e4 <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   224d0:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   224d4:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   224d8:	42a9      	cmp	r1, r5
   224da:	bf38      	it	cc
   224dc:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   224de:	42a2      	cmp	r2, r4
   224e0:	bf38      	it	cc
   224e2:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   224e4:	b163      	cbz	r3, 22500 <att_chan_mtu_updated+0x4e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   224e6:	f513 75a2 	adds.w	r5, r3, #324	; 0x144
   224ea:	d004      	beq.n	224f6 <att_chan_mtu_updated+0x44>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   224ec:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
   224f0:	b10d      	cbz	r5, 224f6 <att_chan_mtu_updated+0x44>
   224f2:	f5a5 75a2 	sub.w	r5, r5, #324	; 0x144
{
   224f6:	461c      	mov	r4, r3
   224f8:	462b      	mov	r3, r5
   224fa:	e7e7      	b.n	224cc <att_chan_mtu_updated+0x1a>
   224fc:	4622      	mov	r2, r4
   224fe:	4611      	mov	r1, r2
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   22500:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   22504:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
   22508:	428b      	cmp	r3, r1
   2250a:	d801      	bhi.n	22510 <att_chan_mtu_updated+0x5e>
   2250c:	4290      	cmp	r0, r2
   2250e:	d909      	bls.n	22524 <att_chan_mtu_updated+0x72>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   22510:	4282      	cmp	r2, r0
   22512:	bf38      	it	cc
   22514:	4602      	movcc	r2, r0
   22516:	4299      	cmp	r1, r3
   22518:	6830      	ldr	r0, [r6, #0]
   2251a:	bf38      	it	cc
   2251c:	4619      	movcc	r1, r3
}
   2251e:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   22520:	f7f3 bee4 	b.w	162ec <bt_gatt_att_max_mtu_changed>
}
   22524:	bc70      	pop	{r4, r5, r6}
   22526:	4770      	bx	lr

00022528 <attr_read_group_cb>:
	if (!data->rsp->len) {
   22528:	68d0      	ldr	r0, [r2, #12]
   2252a:	7803      	ldrb	r3, [r0, #0]
   2252c:	3104      	adds	r1, #4
   2252e:	b913      	cbnz	r3, 22536 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   22530:	7001      	strb	r1, [r0, #0]
	return true;
   22532:	2001      	movs	r0, #1
}
   22534:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   22536:	428b      	cmp	r3, r1
   22538:	d0fb      	beq.n	22532 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2253a:	6891      	ldr	r1, [r2, #8]
   2253c:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   2253e:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   22540:	3b04      	subs	r3, #4
   22542:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   22544:	6110      	str	r0, [r2, #16]
		return false;
   22546:	4770      	bx	lr

00022548 <chan_req_send>:
{
   22548:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2254a:	688e      	ldr	r6, [r1, #8]
{
   2254c:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2254e:	4630      	mov	r0, r6
{
   22550:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   22552:	f7ff fe7f 	bl	22254 <net_buf_frags_len>
   22556:	f8b5 308a 	ldrh.w	r3, [r5, #138]	; 0x8a
   2255a:	4283      	cmp	r3, r0
   2255c:	d30a      	bcc.n	22574 <chan_req_send+0x2c>
	req->buf = NULL;
   2255e:	2200      	movs	r2, #0
	chan->req = req;
   22560:	f8c5 10f4 	str.w	r1, [r5, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   22564:	4628      	mov	r0, r5
	req->buf = NULL;
   22566:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   22568:	4631      	mov	r1, r6
   2256a:	f7f1 fa67 	bl	13a3c <chan_send>
	if (err) {
   2256e:	b100      	cbz	r0, 22572 <chan_req_send+0x2a>
		req->buf = buf;
   22570:	60a6      	str	r6, [r4, #8]
}
   22572:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   22574:	f06f 0079 	mvn.w	r0, #121	; 0x79
   22578:	e7fb      	b.n	22572 <chan_req_send+0x2a>

0002257a <process_queue>:
{
   2257a:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   2257c:	2200      	movs	r2, #0
{
   2257e:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   22580:	2300      	movs	r3, #0
   22582:	4608      	mov	r0, r1
{
   22584:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   22586:	f001 fcc1 	bl	23f0c <net_buf_get>
	if (buf) {
   2258a:	4605      	mov	r5, r0
   2258c:	b160      	cbz	r0, 225a8 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   2258e:	4601      	mov	r1, r0
   22590:	2200      	movs	r2, #0
   22592:	4620      	mov	r0, r4
   22594:	f7f1 fa52 	bl	13a3c <chan_send>
		if (err) {
   22598:	4604      	mov	r4, r0
   2259a:	b118      	cbz	r0, 225a4 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   2259c:	4629      	mov	r1, r5
   2259e:	4630      	mov	r0, r6
   225a0:	f002 f9b6 	bl	24910 <k_queue_prepend>
}
   225a4:	4620      	mov	r0, r4
   225a6:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   225a8:	f06f 0401 	mvn.w	r4, #1
   225ac:	e7fa      	b.n	225a4 <process_queue+0x2a>

000225ae <chan_req_sent>:
	if (chan->req) {
   225ae:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   225b2:	b133      	cbz	r3, 225c2 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   225b4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   225b8:	2300      	movs	r3, #0
   225ba:	f500 7088 	add.w	r0, r0, #272	; 0x110
   225be:	f7fb b93f 	b.w	1d840 <k_work_reschedule>
}
   225c2:	4770      	bx	lr

000225c4 <att_exec_write_req>:
   225c4:	2006      	movs	r0, #6
   225c6:	4770      	bx	lr

000225c8 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   225c8:	30f0      	adds	r0, #240	; 0xf0
   225ca:	f3bf 8f5b 	dmb	ish
   225ce:	e850 3f00 	ldrex	r3, [r0]
   225d2:	f023 0301 	bic.w	r3, r3, #1
   225d6:	e840 3200 	strex	r2, r3, [r0]
   225da:	2a00      	cmp	r2, #0
   225dc:	d1f7      	bne.n	225ce <chan_rsp_sent+0x6>
   225de:	f3bf 8f5b 	dmb	ish
}
   225e2:	4770      	bx	lr

000225e4 <chan_cfm_sent>:
   225e4:	30f0      	adds	r0, #240	; 0xf0
   225e6:	f3bf 8f5b 	dmb	ish
   225ea:	e850 3f00 	ldrex	r3, [r0]
   225ee:	f023 0302 	bic.w	r3, r3, #2
   225f2:	e840 3200 	strex	r2, r3, [r0]
   225f6:	2a00      	cmp	r2, #0
   225f8:	d1f7      	bne.n	225ea <chan_cfm_sent+0x6>
   225fa:	f3bf 8f5b 	dmb	ish
}
   225fe:	4770      	bx	lr

00022600 <bt_att_status>:
{
   22600:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22602:	f3bf 8f5b 	dmb	ish
   22606:	680b      	ldr	r3, [r1, #0]
   22608:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2260c:	07db      	lsls	r3, r3, #31
{
   2260e:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   22610:	d519      	bpl.n	22646 <bt_att_status+0x46>
	if (!chan->att) {
   22612:	f850 0c08 	ldr.w	r0, [r0, #-8]
   22616:	b1b0      	cbz	r0, 22646 <bt_att_status+0x46>
	if (chan->req) {
   22618:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   2261c:	b99b      	cbnz	r3, 22646 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   2261e:	3004      	adds	r0, #4
   22620:	f7ff fdf3 	bl	2220a <sys_slist_get>
	if (!node) {
   22624:	4604      	mov	r4, r0
   22626:	b170      	cbz	r0, 22646 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   22628:	4601      	mov	r1, r0
   2262a:	f1a5 0008 	sub.w	r0, r5, #8
   2262e:	f7ff ff8b 	bl	22548 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   22632:	2800      	cmp	r0, #0
   22634:	da07      	bge.n	22646 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   22636:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   2263a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2263c:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2263e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   22640:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   22642:	b902      	cbnz	r2, 22646 <bt_att_status+0x46>
	list->tail = node;
   22644:	609c      	str	r4, [r3, #8]
}
   22646:	bd38      	pop	{r3, r4, r5, pc}

00022648 <att_req_send_process>:
{
   22648:	b570      	push	{r4, r5, r6, lr}
   2264a:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   2264c:	3004      	adds	r0, #4
   2264e:	f7ff fddc 	bl	2220a <sys_slist_get>
	if (!node) {
   22652:	4606      	mov	r6, r0
   22654:	b1c0      	cbz	r0, 22688 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22656:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   22658:	b153      	cbz	r3, 22670 <att_req_send_process+0x28>
   2265a:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   2265e:	d007      	beq.n	22670 <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22660:	681c      	ldr	r4, [r3, #0]
   22662:	b10c      	cbz	r4, 22668 <att_req_send_process+0x20>
   22664:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
		if (!chan->req) {
   22668:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   2266c:	b13b      	cbz	r3, 2267e <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2266e:	b964      	cbnz	r4, 2268a <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   22670:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   22672:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   22674:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   22676:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   22678:	b933      	cbnz	r3, 22688 <att_req_send_process+0x40>
	list->tail = node;
   2267a:	60ae      	str	r6, [r5, #8]
}
   2267c:	e004      	b.n	22688 <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   2267e:	4631      	mov	r1, r6
   22680:	f7ff ff62 	bl	22548 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   22684:	2800      	cmp	r0, #0
   22686:	dbf2      	blt.n	2266e <att_req_send_process+0x26>
}
   22688:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   2268a:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   2268e:	d004      	beq.n	2269a <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22690:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22694:	b10b      	cbz	r3, 2269a <att_req_send_process+0x52>
   22696:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   2269a:	4620      	mov	r0, r4
   2269c:	461c      	mov	r4, r3
   2269e:	e7e3      	b.n	22668 <att_req_send_process+0x20>

000226a0 <write_cb>:
{
   226a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   226a2:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   226a4:	4601      	mov	r1, r0
{
   226a6:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   226a8:	222a      	movs	r2, #42	; 0x2a
   226aa:	6820      	ldr	r0, [r4, #0]
   226ac:	f000 fd00 	bl	230b0 <bt_gatt_check_perm>
   226b0:	4605      	mov	r5, r0
   226b2:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   226b4:	bb00      	cbnz	r0, 226f8 <write_cb+0x58>
	if (!data->req) {
   226b6:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   226b8:	68b7      	ldr	r7, [r6, #8]
   226ba:	68e2      	ldr	r2, [r4, #12]
   226bc:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   226be:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   226c0:	bf14      	ite	ne
   226c2:	2300      	movne	r3, #0
   226c4:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   226c6:	9301      	str	r3, [sp, #4]
   226c8:	8a63      	ldrh	r3, [r4, #18]
   226ca:	9300      	str	r3, [sp, #0]
   226cc:	4631      	mov	r1, r6
   226ce:	8a23      	ldrh	r3, [r4, #16]
   226d0:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   226d2:	1e03      	subs	r3, r0, #0
   226d4:	db05      	blt.n	226e2 <write_cb+0x42>
   226d6:	8a22      	ldrh	r2, [r4, #16]
   226d8:	4293      	cmp	r3, r2
   226da:	d10b      	bne.n	226f4 <write_cb+0x54>
	data->err = 0U;
   226dc:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   226de:	2501      	movs	r5, #1
   226e0:	e005      	b.n	226ee <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   226e2:	f113 0fff 	cmn.w	r3, #255	; 0xff
   226e6:	d305      	bcc.n	226f4 <write_cb+0x54>
		return -err;
   226e8:	425b      	negs	r3, r3
   226ea:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   226ec:	7523      	strb	r3, [r4, #20]
}
   226ee:	4628      	mov	r0, r5
   226f0:	b003      	add	sp, #12
   226f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   226f4:	230e      	movs	r3, #14
   226f6:	e7f9      	b.n	226ec <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   226f8:	2500      	movs	r5, #0
   226fa:	e7f8      	b.n	226ee <write_cb+0x4e>

000226fc <bt_att_sent>:
{
   226fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   226fe:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   22702:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   22706:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   22708:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   2270c:	b10b      	cbz	r3, 22712 <bt_att_sent+0x16>
		chan->sent(chan);
   2270e:	4638      	mov	r0, r7
   22710:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22712:	f3bf 8f5b 	dmb	ish
   22716:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   2271a:	e853 2f00 	ldrex	r2, [r3]
   2271e:	f022 0210 	bic.w	r2, r2, #16
   22722:	e843 2100 	strex	r1, r2, [r3]
   22726:	2900      	cmp	r1, #0
   22728:	d1f7      	bne.n	2271a <bt_att_sent+0x1e>
   2272a:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2272e:	b30c      	cbz	r4, 22774 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   22730:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   22734:	b98b      	cbnz	r3, 2275a <bt_att_sent+0x5e>
   22736:	6863      	ldr	r3, [r4, #4]
   22738:	b17b      	cbz	r3, 2275a <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2273a:	1d20      	adds	r0, r4, #4
   2273c:	f7ff fd65 	bl	2220a <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   22740:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   22742:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   22744:	4638      	mov	r0, r7
   22746:	f7ff feff 	bl	22548 <chan_req_send>
   2274a:	2800      	cmp	r0, #0
   2274c:	da12      	bge.n	22774 <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   2274e:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   22750:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   22752:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   22754:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   22756:	b903      	cbnz	r3, 2275a <bt_att_sent+0x5e>
	list->tail = node;
   22758:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2275a:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   2275e:	4638      	mov	r0, r7
   22760:	f7ff ff0b 	bl	2257a <process_queue>
	if (!err) {
   22764:	b130      	cbz	r0, 22774 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   22766:	f104 010c 	add.w	r1, r4, #12
   2276a:	4638      	mov	r0, r7
}
   2276c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   22770:	f7ff bf03 	b.w	2257a <process_queue>
}
   22774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022776 <read_cb>:
{
   22776:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2277a:	f8d2 8000 	ldr.w	r8, [r2]
{
   2277e:	4606      	mov	r6, r0
	data->err = 0x00;
   22780:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   22782:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   22786:	7317      	strb	r7, [r2, #12]
{
   22788:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2278a:	4631      	mov	r1, r6
   2278c:	2215      	movs	r2, #21
   2278e:	f000 fc8f 	bl	230b0 <bt_gatt_check_perm>
   22792:	4604      	mov	r4, r0
   22794:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   22796:	b9a0      	cbnz	r0, 227c2 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   22798:	e9cd 0000 	strd	r0, r0, [sp]
   2279c:	88ab      	ldrh	r3, [r5, #4]
   2279e:	68aa      	ldr	r2, [r5, #8]
   227a0:	4631      	mov	r1, r6
   227a2:	4640      	mov	r0, r8
   227a4:	f7ff fdae 	bl	22304 <att_chan_read>
	if (ret < 0) {
   227a8:	1e03      	subs	r3, r0, #0
   227aa:	da0c      	bge.n	227c6 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   227ac:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   227b0:	bf26      	itte	cs
   227b2:	425b      	negcs	r3, r3
   227b4:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   227b6:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   227b8:	732b      	strb	r3, [r5, #12]
}
   227ba:	4620      	mov	r0, r4
   227bc:	b002      	add	sp, #8
   227be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   227c2:	463c      	mov	r4, r7
   227c4:	e7f9      	b.n	227ba <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   227c6:	2401      	movs	r4, #1
   227c8:	e7f7      	b.n	227ba <read_cb+0x44>

000227ca <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   227ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   227ce:	4688      	mov	r8, r1
   227d0:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   227d2:	2101      	movs	r1, #1
   227d4:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   227d6:	4605      	mov	r5, r0
   227d8:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   227da:	f7f1 fac3 	bl	13d64 <bt_att_chan_create_pdu>
	if (!buf) {
   227de:	4604      	mov	r4, r0
   227e0:	b170      	cbz	r0, 22800 <send_err_rsp.part.0+0x36>
   227e2:	2104      	movs	r1, #4
   227e4:	3008      	adds	r0, #8
   227e6:	f001 fbe2 	bl	23fae <net_buf_simple_add>
	rsp->request = req;
   227ea:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   227ee:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   227f0:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   227f4:	4621      	mov	r1, r4
   227f6:	4628      	mov	r0, r5
}
   227f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   227fc:	f7f1 b9cc 	b.w	13b98 <bt_att_chan_send_rsp.constprop.0>
}
   22800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022804 <att_read_blob_req>:
{
   22804:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   22806:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   22808:	8813      	ldrh	r3, [r2, #0]
   2280a:	8852      	ldrh	r2, [r2, #2]
   2280c:	9200      	str	r2, [sp, #0]
   2280e:	210c      	movs	r1, #12
   22810:	220d      	movs	r2, #13
   22812:	f7f1 fcf9 	bl	14208 <att_read_rsp>
}
   22816:	b003      	add	sp, #12
   22818:	f85d fb04 	ldr.w	pc, [sp], #4

0002281c <att_read_req>:
{
   2281c:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2281e:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   22820:	2200      	movs	r2, #0
   22822:	881b      	ldrh	r3, [r3, #0]
   22824:	9200      	str	r2, [sp, #0]
   22826:	210a      	movs	r1, #10
   22828:	220b      	movs	r2, #11
   2282a:	f7f1 fced 	bl	14208 <att_read_rsp>
}
   2282e:	b003      	add	sp, #12
   22830:	f85d fb04 	ldr.w	pc, [sp], #4

00022834 <att_mtu_req>:
{
   22834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   22836:	6803      	ldr	r3, [r0, #0]
{
   22838:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   2283a:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2283c:	f3bf 8f5b 	dmb	ish
   22840:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   22844:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   22848:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   2284c:	071b      	lsls	r3, r3, #28
   2284e:	d420      	bmi.n	22892 <att_mtu_req+0x5e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   22850:	688b      	ldr	r3, [r1, #8]
   22852:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   22854:	2e16      	cmp	r6, #22
   22856:	d91e      	bls.n	22896 <att_mtu_req+0x62>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   22858:	2202      	movs	r2, #2
   2285a:	2103      	movs	r1, #3
   2285c:	f7f1 fbd0 	bl	14000 <bt_att_create_pdu>
	if (!pdu) {
   22860:	4607      	mov	r7, r0
   22862:	b1d0      	cbz	r0, 2289a <att_mtu_req+0x66>
   22864:	2102      	movs	r1, #2
   22866:	3008      	adds	r0, #8
   22868:	f001 fba1 	bl	23fae <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2286c:	2341      	movs	r3, #65	; 0x41
   2286e:	7003      	strb	r3, [r0, #0]
   22870:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   22872:	4639      	mov	r1, r7
   22874:	4620      	mov	r0, r4
   22876:	f7f1 f98f 	bl	13b98 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2287a:	2e41      	cmp	r6, #65	; 0x41
   2287c:	bf28      	it	cs
   2287e:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   22880:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   22882:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   22886:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   2288a:	f7ff fe12 	bl	224b2 <att_chan_mtu_updated>
	return 0;
   2288e:	4628      	mov	r0, r5
}
   22890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   22892:	2006      	movs	r0, #6
   22894:	e7fc      	b.n	22890 <att_mtu_req+0x5c>
		return BT_ATT_ERR_INVALID_PDU;
   22896:	2004      	movs	r0, #4
   22898:	e7fa      	b.n	22890 <att_mtu_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
   2289a:	200e      	movs	r0, #14
   2289c:	e7f8      	b.n	22890 <att_mtu_req+0x5c>

0002289e <bt_att_init>:
	bt_gatt_init();
   2289e:	f7f3 b8b3 	b.w	15a08 <bt_gatt_init>

000228a2 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   228a2:	898a      	ldrh	r2, [r1, #12]
   228a4:	6889      	ldr	r1, [r1, #8]
   228a6:	2300      	movs	r3, #0
   228a8:	f7f1 be20 	b.w	144ec <att_handle_rsp>

000228ac <bt_att_encrypt_change>:
	if (!att_chan->att) {
   228ac:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   228b0:	b570      	push	{r4, r5, r6, lr}
   228b2:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   228b4:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   228b8:	2b00      	cmp	r3, #0
   228ba:	d037      	beq.n	2292c <bt_att_encrypt_change+0x80>
	if (hci_status) {
   228bc:	b171      	cbz	r1, 228dc <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   228be:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   228c2:	2b00      	cmp	r3, #0
   228c4:	d032      	beq.n	2292c <bt_att_encrypt_change+0x80>
   228c6:	7c1b      	ldrb	r3, [r3, #16]
   228c8:	07da      	lsls	r2, r3, #31
   228ca:	d52f      	bpl.n	2292c <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   228cc:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   228ce:	2200      	movs	r2, #0
   228d0:	4630      	mov	r0, r6
   228d2:	4611      	mov	r1, r2
}
   228d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   228d8:	f7f1 be08 	b.w	144ec <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   228dc:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   228de:	4628      	mov	r0, r5
   228e0:	f7f3 fd1a 	bl	16318 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   228e4:	7a6b      	ldrb	r3, [r5, #9]
   228e6:	2b01      	cmp	r3, #1
   228e8:	d020      	beq.n	2292c <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   228ea:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
   228ee:	b1ec      	cbz	r4, 2292c <bt_att_encrypt_change+0x80>
   228f0:	7c23      	ldrb	r3, [r4, #16]
   228f2:	07db      	lsls	r3, r3, #31
   228f4:	d51a      	bpl.n	2292c <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   228f6:	68e3      	ldr	r3, [r4, #12]
   228f8:	2b00      	cmp	r3, #0
   228fa:	d0e7      	beq.n	228cc <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   228fc:	6962      	ldr	r2, [r4, #20]
   228fe:	7c61      	ldrb	r1, [r4, #17]
   22900:	4630      	mov	r0, r6
   22902:	f7f1 fa2f 	bl	13d64 <bt_att_chan_create_pdu>
	if (!buf) {
   22906:	4605      	mov	r5, r0
   22908:	b140      	cbz	r0, 2291c <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   2290a:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   2290e:	68e3      	ldr	r3, [r4, #12]
   22910:	4798      	blx	r3
   22912:	4602      	mov	r2, r0
   22914:	b120      	cbz	r0, 22920 <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   22916:	4628      	mov	r0, r5
   22918:	f7f7 fcf4 	bl	1a304 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2291c:	230e      	movs	r3, #14
   2291e:	e7d6      	b.n	228ce <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   22920:	4629      	mov	r1, r5
   22922:	4630      	mov	r0, r6
   22924:	f7f1 f88a 	bl	13a3c <chan_send>
   22928:	2800      	cmp	r0, #0
   2292a:	d1f4      	bne.n	22916 <bt_att_encrypt_change+0x6a>
}
   2292c:	bd70      	pop	{r4, r5, r6, pc}

0002292e <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   2292e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22932:	4607      	mov	r7, r0
   22934:	460d      	mov	r5, r1
   22936:	4616      	mov	r6, r2
   22938:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   2293a:	f7f1 f8ed 	bl	13b18 <att_get>
	if (!att) {
   2293e:	4604      	mov	r4, r0
   22940:	b938      	cbnz	r0, 22952 <bt_att_send+0x24>
		net_buf_unref(buf);
   22942:	4628      	mov	r0, r5
   22944:	f7f7 fcde 	bl	1a304 <net_buf_unref>
		return -ENOTCONN;
   22948:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   2294c:	b002      	add	sp, #8
   2294e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   22952:	b146      	cbz	r6, 22966 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   22954:	f8cd 8000 	str.w	r8, [sp]
   22958:	4633      	mov	r3, r6
   2295a:	462a      	mov	r2, r5
   2295c:	2104      	movs	r1, #4
   2295e:	4638      	mov	r0, r7
   22960:	f000 fe7a 	bl	23658 <bt_l2cap_send_cb>
   22964:	e7f2      	b.n	2294c <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   22966:	f100 060c 	add.w	r6, r0, #12
   2296a:	4629      	mov	r1, r5
   2296c:	4630      	mov	r0, r6
   2296e:	f001 faeb 	bl	23f48 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   22972:	2200      	movs	r2, #0
   22974:	2300      	movs	r3, #0
   22976:	4630      	mov	r0, r6
   22978:	f001 fac8 	bl	23f0c <net_buf_get>
	if (!buf) {
   2297c:	4605      	mov	r5, r0
   2297e:	b908      	cbnz	r0, 22984 <bt_att_send+0x56>
	return 0;
   22980:	2000      	movs	r0, #0
   22982:	e7e3      	b.n	2294c <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22984:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22986:	b1c3      	cbz	r3, 229ba <bt_att_send+0x8c>
   22988:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   2298c:	d015      	beq.n	229ba <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2298e:	681c      	ldr	r4, [r3, #0]
   22990:	b10c      	cbz	r4, 22996 <bt_att_send+0x68>
   22992:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   22996:	2200      	movs	r2, #0
   22998:	4629      	mov	r1, r5
   2299a:	f7f1 f84f 	bl	13a3c <chan_send>
		if (err >= 0) {
   2299e:	2800      	cmp	r0, #0
   229a0:	daee      	bge.n	22980 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   229a2:	b154      	cbz	r4, 229ba <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   229a4:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   229a8:	d004      	beq.n	229b4 <bt_att_send+0x86>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   229aa:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   229ae:	b10b      	cbz	r3, 229b4 <bt_att_send+0x86>
   229b0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   229b4:	4620      	mov	r0, r4
   229b6:	461c      	mov	r4, r3
   229b8:	e7ed      	b.n	22996 <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
   229ba:	4629      	mov	r1, r5
   229bc:	4630      	mov	r0, r6
   229be:	f001 ffa7 	bl	24910 <k_queue_prepend>
   229c2:	e7dd      	b.n	22980 <bt_att_send+0x52>

000229c4 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   229c4:	b510      	push	{r4, lr}
   229c6:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   229c8:	f7f1 f8a6 	bl	13b18 <att_get>
	if (!att) {
   229cc:	b160      	cbz	r0, 229e8 <bt_att_req_send+0x24>
	parent->next = child;
   229ce:	2300      	movs	r3, #0
   229d0:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   229d2:	6883      	ldr	r3, [r0, #8]
   229d4:	b92b      	cbnz	r3, 229e2 <bt_att_req_send+0x1e>
	list->head = node;
   229d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   229da:	f7ff fe35 	bl	22648 <att_req_send_process>

	return 0;
   229de:	2000      	movs	r0, #0
}
   229e0:	bd10      	pop	{r4, pc}
	parent->next = child;
   229e2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   229e4:	6084      	str	r4, [r0, #8]
}
   229e6:	e7f8      	b.n	229da <bt_att_req_send+0x16>
		return -ENOTCONN;
   229e8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   229ec:	e7f8      	b.n	229e0 <bt_att_req_send+0x1c>

000229ee <tx_notify>:
{
   229ee:	b570      	push	{r4, r5, r6, lr}
   229f0:	4604      	mov	r4, r0
	__asm__ volatile(
   229f2:	f04f 0240 	mov.w	r2, #64	; 0x40
   229f6:	f3ef 8311 	mrs	r3, BASEPRI
   229fa:	f382 8812 	msr	BASEPRI_MAX, r2
   229fe:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   22a02:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   22a04:	b920      	cbnz	r0, 22a10 <tx_notify+0x22>
	__asm__ volatile(
   22a06:	f383 8811 	msr	BASEPRI, r3
   22a0a:	f3bf 8f6f 	isb	sy
}
   22a0e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22a10:	6a61      	ldr	r1, [r4, #36]	; 0x24
   22a12:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   22a14:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22a16:	4288      	cmp	r0, r1
	list->tail = node;
   22a18:	bf08      	it	eq
   22a1a:	6262      	streq	r2, [r4, #36]	; 0x24
   22a1c:	f383 8811 	msr	BASEPRI, r3
   22a20:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   22a24:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   22a28:	f7f1 fe6e 	bl	14708 <tx_free>
		cb(conn, user_data);
   22a2c:	4631      	mov	r1, r6
   22a2e:	4620      	mov	r0, r4
   22a30:	47a8      	blx	r5
	while (1) {
   22a32:	e7de      	b.n	229f2 <tx_notify+0x4>

00022a34 <tx_complete_work>:
	tx_notify(conn);
   22a34:	3828      	subs	r0, #40	; 0x28
   22a36:	f7ff bfda 	b.w	229ee <tx_notify>

00022a3a <bt_conn_reset_rx_state>:
{
   22a3a:	b510      	push	{r4, lr}
   22a3c:	4604      	mov	r4, r0
	if (!conn->rx) {
   22a3e:	6900      	ldr	r0, [r0, #16]
   22a40:	b118      	cbz	r0, 22a4a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   22a42:	f7f7 fc5f 	bl	1a304 <net_buf_unref>
	conn->rx = NULL;
   22a46:	2300      	movs	r3, #0
   22a48:	6123      	str	r3, [r4, #16]
}
   22a4a:	bd10      	pop	{r4, pc}

00022a4c <conn_cleanup>:
{
   22a4c:	b570      	push	{r4, r5, r6, lr}
   22a4e:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   22a50:	f100 0638 	add.w	r6, r0, #56	; 0x38
   22a54:	2200      	movs	r2, #0
   22a56:	2300      	movs	r3, #0
   22a58:	4630      	mov	r0, r6
   22a5a:	f001 fa57 	bl	23f0c <net_buf_get>
   22a5e:	4605      	mov	r5, r0
   22a60:	b950      	cbnz	r0, 22a78 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   22a62:	4620      	mov	r0, r4
   22a64:	f7ff ffe9 	bl	22a3a <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   22a68:	f104 0058 	add.w	r0, r4, #88	; 0x58
   22a6c:	2200      	movs	r2, #0
}
   22a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   22a72:	2300      	movs	r3, #0
   22a74:	f7fa bee4 	b.w	1d840 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   22a78:	6968      	ldr	r0, [r5, #20]
   22a7a:	b108      	cbz	r0, 22a80 <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   22a7c:	f7f1 fe44 	bl	14708 <tx_free>
		net_buf_unref(buf);
   22a80:	4628      	mov	r0, r5
   22a82:	f7f7 fc3f 	bl	1a304 <net_buf_unref>
   22a86:	e7e5      	b.n	22a54 <conn_cleanup+0x8>

00022a88 <bt_conn_ref>:
{
   22a88:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   22a8a:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   22a8e:	f3bf 8f5b 	dmb	ish
   22a92:	6813      	ldr	r3, [r2, #0]
   22a94:	f3bf 8f5b 	dmb	ish
		if (!old) {
   22a98:	b17b      	cbz	r3, 22aba <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   22a9a:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   22a9e:	1c59      	adds	r1, r3, #1
   22aa0:	e852 4f00 	ldrex	r4, [r2]
   22aa4:	429c      	cmp	r4, r3
   22aa6:	d104      	bne.n	22ab2 <bt_conn_ref+0x2a>
   22aa8:	e842 1c00 	strex	ip, r1, [r2]
   22aac:	f1bc 0f00 	cmp.w	ip, #0
   22ab0:	d1f6      	bne.n	22aa0 <bt_conn_ref+0x18>
   22ab2:	f3bf 8f5b 	dmb	ish
   22ab6:	d1ea      	bne.n	22a8e <bt_conn_ref+0x6>
}
   22ab8:	bd10      	pop	{r4, pc}
			return NULL;
   22aba:	4618      	mov	r0, r3
   22abc:	e7fc      	b.n	22ab8 <bt_conn_ref+0x30>

00022abe <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   22abe:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   22ac2:	f3bf 8f5b 	dmb	ish
   22ac6:	e853 2f00 	ldrex	r2, [r3]
   22aca:	3a01      	subs	r2, #1
   22acc:	e843 2100 	strex	r1, r2, [r3]
   22ad0:	2900      	cmp	r1, #0
   22ad2:	d1f8      	bne.n	22ac6 <bt_conn_unref+0x8>
   22ad4:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   22ad8:	7883      	ldrb	r3, [r0, #2]
   22ada:	2b01      	cmp	r3, #1
   22adc:	d108      	bne.n	22af0 <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22ade:	f3bf 8f5b 	dmb	ish
   22ae2:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   22ae6:	f3bf 8f5b 	dmb	ish
   22aea:	b90b      	cbnz	r3, 22af0 <bt_conn_unref+0x32>
		bt_le_adv_resume();
   22aec:	f7f0 bde6 	b.w	136bc <bt_le_adv_resume>
}
   22af0:	4770      	bx	lr

00022af2 <conn_lookup_handle>:
{
   22af2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22af6:	4607      	mov	r7, r0
   22af8:	460e      	mov	r6, r1
   22afa:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   22afc:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   22afe:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   22b02:	42b4      	cmp	r4, r6
   22b04:	d103      	bne.n	22b0e <conn_lookup_handle+0x1c>
	return NULL;
   22b06:	2300      	movs	r3, #0
}
   22b08:	4618      	mov	r0, r3
   22b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   22b0e:	fb09 7004 	mla	r0, r9, r4, r7
   22b12:	f7ff ffb9 	bl	22a88 <bt_conn_ref>
   22b16:	4603      	mov	r3, r0
		if (!conn) {
   22b18:	b158      	cbz	r0, 22b32 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   22b1a:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   22b1c:	2d01      	cmp	r5, #1
   22b1e:	d002      	beq.n	22b26 <conn_lookup_handle+0x34>
   22b20:	3d07      	subs	r5, #7
   22b22:	2d01      	cmp	r5, #1
   22b24:	d803      	bhi.n	22b2e <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   22b26:	881a      	ldrh	r2, [r3, #0]
   22b28:	4542      	cmp	r2, r8
   22b2a:	d0ed      	beq.n	22b08 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   22b2c:	4618      	mov	r0, r3
   22b2e:	f7ff ffc6 	bl	22abe <bt_conn_unref>
	for (i = 0; i < size; i++) {
   22b32:	3401      	adds	r4, #1
   22b34:	e7e5      	b.n	22b02 <conn_lookup_handle+0x10>

00022b36 <bt_conn_connected>:
{
   22b36:	b510      	push	{r4, lr}
   22b38:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   22b3a:	f7f5 fdcf 	bl	186dc <bt_l2cap_connected>
	notify_connected(conn);
   22b3e:	4620      	mov	r0, r4
}
   22b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   22b44:	f7f1 bdea 	b.w	1471c <notify_connected>

00022b48 <bt_conn_disconnect>:
{
   22b48:	b538      	push	{r3, r4, r5, lr}
   22b4a:	7b43      	ldrb	r3, [r0, #13]
   22b4c:	3b02      	subs	r3, #2
   22b4e:	4604      	mov	r4, r0
   22b50:	2b06      	cmp	r3, #6
   22b52:	d805      	bhi.n	22b60 <bt_conn_disconnect+0x18>
   22b54:	e8df f003 	tbb	[pc, r3]
   22b58:	04040408 	.word	0x04040408
   22b5c:	0e0c      	.short	0x0e0c
   22b5e:	0c          	.byte	0x0c
   22b5f:	00          	.byte	0x00
	switch (conn->state) {
   22b60:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   22b64:	4628      	mov	r0, r5
   22b66:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   22b68:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   22b6a:	2100      	movs	r1, #0
   22b6c:	f7f2 f810 	bl	14b90 <bt_conn_set_state>
		return 0;
   22b70:	2500      	movs	r5, #0
   22b72:	e7f7      	b.n	22b64 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   22b74:	8800      	ldrh	r0, [r0, #0]
   22b76:	f000 fb32 	bl	231de <bt_hci_disconnect>
	if (err) {
   22b7a:	4605      	mov	r5, r0
   22b7c:	2800      	cmp	r0, #0
   22b7e:	d1f1      	bne.n	22b64 <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   22b80:	7b63      	ldrb	r3, [r4, #13]
   22b82:	2b07      	cmp	r3, #7
   22b84:	d1ee      	bne.n	22b64 <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   22b86:	2108      	movs	r1, #8
   22b88:	4620      	mov	r0, r4
   22b8a:	f7f2 f801 	bl	14b90 <bt_conn_set_state>
   22b8e:	e7e9      	b.n	22b64 <bt_conn_disconnect+0x1c>

00022b90 <bt_conn_set_security>:
{
   22b90:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   22b92:	7b43      	ldrb	r3, [r0, #13]
   22b94:	2b07      	cmp	r3, #7
{
   22b96:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   22b98:	d128      	bne.n	22bec <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   22b9a:	7a43      	ldrb	r3, [r0, #9]
   22b9c:	428b      	cmp	r3, r1
   22b9e:	d228      	bcs.n	22bf2 <bt_conn_set_security+0x62>
   22ba0:	7a83      	ldrb	r3, [r0, #10]
   22ba2:	428b      	cmp	r3, r1
   22ba4:	d225      	bcs.n	22bf2 <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22ba6:	f3bf 8f5b 	dmb	ish
	if (val) {
   22baa:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   22bac:	f100 0304 	add.w	r3, r0, #4
   22bb0:	d513      	bpl.n	22bda <bt_conn_set_security+0x4a>
   22bb2:	e853 2f00 	ldrex	r2, [r3]
   22bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   22bba:	e843 2000 	strex	r0, r2, [r3]
   22bbe:	2800      	cmp	r0, #0
   22bc0:	d1f7      	bne.n	22bb2 <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22bc2:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   22bc6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   22bca:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   22bcc:	4620      	mov	r0, r4
   22bce:	f7f6 fdb7 	bl	19740 <bt_smp_start_security>
	if (err) {
   22bd2:	b108      	cbz	r0, 22bd8 <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   22bd4:	7a63      	ldrb	r3, [r4, #9]
   22bd6:	72a3      	strb	r3, [r4, #10]
}
   22bd8:	bd10      	pop	{r4, pc}
   22bda:	e853 2f00 	ldrex	r2, [r3]
   22bde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   22be2:	e843 2000 	strex	r0, r2, [r3]
   22be6:	2800      	cmp	r0, #0
   22be8:	d0eb      	beq.n	22bc2 <bt_conn_set_security+0x32>
   22bea:	e7f6      	b.n	22bda <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   22bec:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   22bf0:	e7f2      	b.n	22bd8 <bt_conn_set_security+0x48>
		return 0;
   22bf2:	2000      	movs	r0, #0
   22bf4:	e7f0      	b.n	22bd8 <bt_conn_set_security+0x48>

00022bf6 <bt_conn_get_security>:
}
   22bf6:	7a40      	ldrb	r0, [r0, #9]
   22bf8:	4770      	bx	lr

00022bfa <bt_conn_is_peer_addr_le>:
{
   22bfa:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   22bfc:	7a03      	ldrb	r3, [r0, #8]
   22bfe:	428b      	cmp	r3, r1
{
   22c00:	4604      	mov	r4, r0
   22c02:	4615      	mov	r5, r2
	if (id != conn->id) {
   22c04:	d115      	bne.n	22c32 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   22c06:	f100 0188 	add.w	r1, r0, #136	; 0x88
   22c0a:	2207      	movs	r2, #7
   22c0c:	4628      	mov	r0, r5
   22c0e:	f7ff f979 	bl	21f04 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   22c12:	b180      	cbz	r0, 22c36 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   22c14:	78e3      	ldrb	r3, [r4, #3]
   22c16:	2207      	movs	r2, #7
   22c18:	b943      	cbnz	r3, 22c2c <bt_conn_is_peer_addr_le+0x32>
   22c1a:	f104 0196 	add.w	r1, r4, #150	; 0x96
   22c1e:	4628      	mov	r0, r5
   22c20:	f7ff f970 	bl	21f04 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   22c24:	fab0 f080 	clz	r0, r0
   22c28:	0940      	lsrs	r0, r0, #5
}
   22c2a:	bd38      	pop	{r3, r4, r5, pc}
   22c2c:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   22c30:	e7f5      	b.n	22c1e <bt_conn_is_peer_addr_le+0x24>
		return false;
   22c32:	2000      	movs	r0, #0
   22c34:	e7f9      	b.n	22c2a <bt_conn_is_peer_addr_le+0x30>
		return true;
   22c36:	2001      	movs	r0, #1
   22c38:	e7f7      	b.n	22c2a <bt_conn_is_peer_addr_le+0x30>

00022c3a <bt_conn_get_dst>:
}
   22c3a:	3088      	adds	r0, #136	; 0x88
   22c3c:	4770      	bx	lr

00022c3e <bt_conn_le_conn_update>:
{
   22c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22c40:	4607      	mov	r7, r0
   22c42:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   22c44:	f242 0013 	movw	r0, #8211	; 0x2013
   22c48:	210e      	movs	r1, #14
   22c4a:	f7f4 f8d7 	bl	16dfc <bt_hci_cmd_create>
	if (!buf) {
   22c4e:	4606      	mov	r6, r0
   22c50:	b1d0      	cbz	r0, 22c88 <bt_conn_le_conn_update+0x4a>
   22c52:	210e      	movs	r1, #14
   22c54:	3008      	adds	r0, #8
   22c56:	f001 f9aa 	bl	23fae <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   22c5a:	220e      	movs	r2, #14
   22c5c:	4604      	mov	r4, r0
   22c5e:	2100      	movs	r1, #0
   22c60:	f7ff f982 	bl	21f68 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   22c64:	883b      	ldrh	r3, [r7, #0]
   22c66:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   22c68:	882b      	ldrh	r3, [r5, #0]
   22c6a:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   22c6c:	886b      	ldrh	r3, [r5, #2]
   22c6e:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   22c70:	88ab      	ldrh	r3, [r5, #4]
   22c72:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   22c74:	88eb      	ldrh	r3, [r5, #6]
   22c76:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   22c78:	4631      	mov	r1, r6
   22c7a:	2200      	movs	r2, #0
}
   22c7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   22c80:	f242 0013 	movw	r0, #8211	; 0x2013
   22c84:	f7f4 ba16 	b.w	170b4 <bt_hci_cmd_send_sync>
}
   22c88:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022c8e <gatt_ccc_changed>:
{
   22c8e:	460b      	mov	r3, r1
   22c90:	8909      	ldrh	r1, [r1, #8]
   22c92:	8a5a      	ldrh	r2, [r3, #18]
   22c94:	4291      	cmp	r1, r2
   22c96:	bf38      	it	cc
   22c98:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   22c9a:	8a9a      	ldrh	r2, [r3, #20]
   22c9c:	428a      	cmp	r2, r1
   22c9e:	d003      	beq.n	22ca8 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   22ca0:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   22ca2:	699b      	ldr	r3, [r3, #24]
   22ca4:	b103      	cbz	r3, 22ca8 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   22ca6:	4718      	bx	r3
}
   22ca8:	4770      	bx	lr

00022caa <gatt_indicate_rsp>:
{
   22caa:	b510      	push	{r4, lr}
   22cac:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   22cae:	68a3      	ldr	r3, [r4, #8]
{
   22cb0:	460a      	mov	r2, r1
	if (params->func) {
   22cb2:	b10b      	cbz	r3, 22cb8 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   22cb4:	4621      	mov	r1, r4
   22cb6:	4798      	blx	r3
	params->_ref--;
   22cb8:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   22cba:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   22cbc:	3b01      	subs	r3, #1
   22cbe:	b2db      	uxtb	r3, r3
   22cc0:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   22cc2:	b122      	cbz	r2, 22cce <gatt_indicate_rsp+0x24>
   22cc4:	b91b      	cbnz	r3, 22cce <gatt_indicate_rsp+0x24>
		params->destroy(params);
   22cc6:	4620      	mov	r0, r4
}
   22cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   22ccc:	4710      	bx	r2
}
   22cce:	bd10      	pop	{r4, pc}

00022cd0 <match_uuid>:
	data->attr = attr;
   22cd0:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   22cd2:	8091      	strh	r1, [r2, #4]
}
   22cd4:	2000      	movs	r0, #0
   22cd6:	4770      	bx	lr

00022cd8 <gen_hash_m>:
{
   22cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   22cda:	6807      	ldr	r7, [r0, #0]
   22cdc:	783d      	ldrb	r5, [r7, #0]
{
   22cde:	b089      	sub	sp, #36	; 0x24
   22ce0:	4606      	mov	r6, r0
   22ce2:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   22ce4:	b10d      	cbz	r5, 22cea <gen_hash_m+0x12>
	switch (u16->val) {
   22ce6:	2501      	movs	r5, #1
   22ce8:	e014      	b.n	22d14 <gen_hash_m+0x3c>
   22cea:	887b      	ldrh	r3, [r7, #2]
   22cec:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   22cf0:	d004      	beq.n	22cfc <gen_hash_m+0x24>
   22cf2:	d812      	bhi.n	22d1a <gen_hash_m+0x42>
   22cf4:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   22cf8:	2b03      	cmp	r3, #3
   22cfa:	d8f4      	bhi.n	22ce6 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   22cfc:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22d00:	2202      	movs	r2, #2
   22d02:	f10d 010e 	add.w	r1, sp, #14
   22d06:	4620      	mov	r0, r4
   22d08:	f7fd fb9b 	bl	20442 <tc_cmac_update>
   22d0c:	b9e0      	cbnz	r0, 22d48 <gen_hash_m+0x70>
			state->err = -EINVAL;
   22d0e:	f06f 0315 	mvn.w	r3, #21
   22d12:	65a3      	str	r3, [r4, #88]	; 0x58
}
   22d14:	4628      	mov	r0, r5
   22d16:	b009      	add	sp, #36	; 0x24
   22d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   22d1a:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   22d1e:	33ff      	adds	r3, #255	; 0xff
   22d20:	b29b      	uxth	r3, r3
   22d22:	2b04      	cmp	r3, #4
   22d24:	d8df      	bhi.n	22ce6 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   22d26:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22d2a:	2202      	movs	r2, #2
   22d2c:	f10d 010e 	add.w	r1, sp, #14
   22d30:	4620      	mov	r0, r4
   22d32:	f7fd fb86 	bl	20442 <tc_cmac_update>
   22d36:	2800      	cmp	r0, #0
   22d38:	d0e9      	beq.n	22d0e <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   22d3a:	887b      	ldrh	r3, [r7, #2]
   22d3c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22d40:	2202      	movs	r2, #2
   22d42:	f10d 010e 	add.w	r1, sp, #14
   22d46:	e017      	b.n	22d78 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   22d48:	887b      	ldrh	r3, [r7, #2]
   22d4a:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22d4e:	2202      	movs	r2, #2
   22d50:	f10d 010e 	add.w	r1, sp, #14
   22d54:	4620      	mov	r0, r4
   22d56:	f7fd fb74 	bl	20442 <tc_cmac_update>
   22d5a:	2800      	cmp	r0, #0
   22d5c:	d0d7      	beq.n	22d0e <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   22d5e:	2000      	movs	r0, #0
   22d60:	2310      	movs	r3, #16
   22d62:	eb0d 0203 	add.w	r2, sp, r3
   22d66:	6877      	ldr	r7, [r6, #4]
   22d68:	9000      	str	r0, [sp, #0]
   22d6a:	4631      	mov	r1, r6
   22d6c:	47b8      	blx	r7
		if (len < 0) {
   22d6e:	1e02      	subs	r2, r0, #0
   22d70:	da01      	bge.n	22d76 <gen_hash_m+0x9e>
			state->err = len;
   22d72:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   22d74:	e7ce      	b.n	22d14 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   22d76:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   22d78:	4620      	mov	r0, r4
   22d7a:	f7fd fb62 	bl	20442 <tc_cmac_update>
   22d7e:	2800      	cmp	r0, #0
   22d80:	d1b1      	bne.n	22ce6 <gen_hash_m+0xe>
   22d82:	e7c4      	b.n	22d0e <gen_hash_m+0x36>

00022d84 <clear_cf_cfg>:
{
   22d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   22d86:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   22d88:	2500      	movs	r5, #0
	memcpy(dst, src, sizeof(*dst));
   22d8a:	2207      	movs	r2, #7
   22d8c:	4669      	mov	r1, sp
   22d8e:	3001      	adds	r0, #1
   22d90:	9500      	str	r5, [sp, #0]
   22d92:	f8cd 5003 	str.w	r5, [sp, #3]
   22d96:	f7ff f8dc 	bl	21f52 <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   22d9a:	f104 0008 	add.w	r0, r4, #8
   22d9e:	2201      	movs	r2, #1
   22da0:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   22da2:	340c      	adds	r4, #12
   22da4:	f7ff f8e0 	bl	21f68 <memset>
   22da8:	f3bf 8f5b 	dmb	ish
   22dac:	e854 3f00 	ldrex	r3, [r4]
   22db0:	e844 5200 	strex	r2, r5, [r4]
   22db4:	2a00      	cmp	r2, #0
   22db6:	d1f9      	bne.n	22dac <clear_cf_cfg+0x28>
   22db8:	f3bf 8f5b 	dmb	ish
}
   22dbc:	b003      	add	sp, #12
   22dbe:	bd30      	pop	{r4, r5, pc}

00022dc0 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   22dc0:	2301      	movs	r3, #1
   22dc2:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22dc4:	f3bf 8f5b 	dmb	ish
   22dc8:	e850 2f00 	ldrex	r2, [r0]
   22dcc:	431a      	orrs	r2, r3
   22dce:	e840 2100 	strex	r1, r2, [r0]
   22dd2:	2900      	cmp	r1, #0
   22dd4:	d1f8      	bne.n	22dc8 <atomic_set_bit+0x8>
   22dd6:	f3bf 8f5b 	dmb	ish
}
   22dda:	4770      	bx	lr

00022ddc <find_ccc_cfg>:
{
   22ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22dde:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   22de0:	1c4c      	adds	r4, r1, #1
   22de2:	f101 0515 	add.w	r5, r1, #21
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   22de6:	1e67      	subs	r7, r4, #1
		if (conn) {
   22de8:	b14e      	cbz	r6, 22dfe <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   22dea:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   22dee:	4622      	mov	r2, r4
   22df0:	4630      	mov	r0, r6
   22df2:	f7ff ff02 	bl	22bfa <bt_conn_is_peer_addr_le>
   22df6:	b160      	cbz	r0, 22e12 <find_ccc_cfg+0x36>
}
   22df8:	4638      	mov	r0, r7
   22dfa:	b003      	add	sp, #12
   22dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return memcmp(a, b, sizeof(*a));
   22dfe:	2207      	movs	r2, #7
   22e00:	4669      	mov	r1, sp
   22e02:	4620      	mov	r0, r4
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   22e04:	9600      	str	r6, [sp, #0]
   22e06:	f8cd 6003 	str.w	r6, [sp, #3]
   22e0a:	f7ff f87b 	bl	21f04 <memcmp>
   22e0e:	2800      	cmp	r0, #0
   22e10:	d0f2      	beq.n	22df8 <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   22e12:	340a      	adds	r4, #10
   22e14:	42ac      	cmp	r4, r5
   22e16:	d1e6      	bne.n	22de6 <find_ccc_cfg+0xa>
	return NULL;
   22e18:	2700      	movs	r7, #0
   22e1a:	e7ed      	b.n	22df8 <find_ccc_cfg+0x1c>

00022e1c <sc_restore_rsp>:
{
   22e1c:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   22e1e:	f7f2 fc1b 	bl	15658 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   22e22:	b140      	cbz	r0, 22e36 <sc_restore_rsp+0x1a>
   22e24:	7a03      	ldrb	r3, [r0, #8]
   22e26:	07db      	lsls	r3, r3, #31
   22e28:	d505      	bpl.n	22e36 <sc_restore_rsp+0x1a>
}
   22e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   22e2e:	2100      	movs	r1, #0
   22e30:	300c      	adds	r0, #12
   22e32:	f7ff bfc5 	b.w	22dc0 <atomic_set_bit>
}
   22e36:	bd08      	pop	{r3, pc}

00022e38 <read_appearance>:
{
   22e38:	b513      	push	{r0, r1, r4, lr}
   22e3a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   22e3e:	4610      	mov	r0, r2
	if (offset > value_len) {
   22e40:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   22e42:	f240 3241 	movw	r2, #833	; 0x341
   22e46:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   22e4a:	d80d      	bhi.n	22e68 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   22e4c:	f1c1 0402 	rsb	r4, r1, #2
   22e50:	429c      	cmp	r4, r3
   22e52:	bfa8      	it	ge
   22e54:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   22e56:	f10d 0306 	add.w	r3, sp, #6
   22e5a:	4622      	mov	r2, r4
   22e5c:	4419      	add	r1, r3
   22e5e:	f7ff f878 	bl	21f52 <memcpy>
}
   22e62:	4620      	mov	r0, r4
   22e64:	b002      	add	sp, #8
   22e66:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22e68:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   22e6c:	e7f9      	b.n	22e62 <read_appearance+0x2a>

00022e6e <read_name>:
{
   22e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22e72:	4698      	mov	r8, r3
   22e74:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   22e78:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   22e7a:	f7f4 fd97 	bl	179ac <bt_get_name>
   22e7e:	4607      	mov	r7, r0
				 strlen(name));
   22e80:	f7ff f824 	bl	21ecc <strlen>
	if (offset > value_len) {
   22e84:	b283      	uxth	r3, r0
   22e86:	42b3      	cmp	r3, r6
   22e88:	d30c      	bcc.n	22ea4 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   22e8a:	1b9c      	subs	r4, r3, r6
   22e8c:	4544      	cmp	r4, r8
   22e8e:	bfa8      	it	ge
   22e90:	4644      	movge	r4, r8
   22e92:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   22e94:	4622      	mov	r2, r4
   22e96:	19b9      	adds	r1, r7, r6
   22e98:	4628      	mov	r0, r5
   22e9a:	f7ff f85a 	bl	21f52 <memcpy>
}
   22e9e:	4620      	mov	r0, r4
   22ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22ea4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   22ea8:	e7f9      	b.n	22e9e <read_name+0x30>

00022eaa <cf_read>:
{
   22eaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22eac:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   22eae:	2300      	movs	r3, #0
{
   22eb0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   22eb4:	f88d 3004 	strb.w	r3, [sp, #4]
{
   22eb8:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   22eba:	f7f2 fbcd 	bl	15658 <find_cf_cfg>
	if (cfg) {
   22ebe:	b128      	cbz	r0, 22ecc <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   22ec0:	f100 0108 	add.w	r1, r0, #8
   22ec4:	2201      	movs	r2, #1
   22ec6:	a801      	add	r0, sp, #4
   22ec8:	f7ff f843 	bl	21f52 <memcpy>
	if (offset > value_len) {
   22ecc:	2e01      	cmp	r6, #1
   22ece:	d80d      	bhi.n	22eec <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   22ed0:	f1c6 0401 	rsb	r4, r6, #1
   22ed4:	42bc      	cmp	r4, r7
   22ed6:	bfa8      	it	ge
   22ed8:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   22eda:	ab01      	add	r3, sp, #4
   22edc:	4622      	mov	r2, r4
   22ede:	1999      	adds	r1, r3, r6
   22ee0:	4628      	mov	r0, r5
   22ee2:	f7ff f836 	bl	21f52 <memcpy>
}
   22ee6:	4620      	mov	r0, r4
   22ee8:	b003      	add	sp, #12
   22eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22eec:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   22ef0:	e7f9      	b.n	22ee6 <cf_read+0x3c>

00022ef2 <bt_gatt_attr_read_ccc>:
{
   22ef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   22ef4:	68c9      	ldr	r1, [r1, #12]
{
   22ef6:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   22efa:	4615      	mov	r5, r2
   22efc:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   22efe:	f7ff ff6d 	bl	22ddc <find_ccc_cfg>
	if (cfg) {
   22f02:	b100      	cbz	r0, 22f06 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   22f04:	8900      	ldrh	r0, [r0, #8]
   22f06:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   22f0a:	2e02      	cmp	r6, #2
   22f0c:	d80e      	bhi.n	22f2c <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   22f0e:	f1c6 0402 	rsb	r4, r6, #2
   22f12:	42bc      	cmp	r4, r7
   22f14:	bfa8      	it	ge
   22f16:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   22f18:	f10d 0306 	add.w	r3, sp, #6
   22f1c:	4622      	mov	r2, r4
   22f1e:	1999      	adds	r1, r3, r6
   22f20:	4628      	mov	r0, r5
   22f22:	f7ff f816 	bl	21f52 <memcpy>
}
   22f26:	4620      	mov	r0, r4
   22f28:	b003      	add	sp, #12
   22f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22f2c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   22f30:	e7f9      	b.n	22f26 <bt_gatt_attr_read_ccc+0x34>

00022f32 <bt_gatt_attr_read_service>:
{
   22f32:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   22f34:	68c9      	ldr	r1, [r1, #12]
{
   22f36:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   22f3a:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   22f3c:	780b      	ldrb	r3, [r1, #0]
{
   22f3e:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   22f40:	b993      	cbnz	r3, 22f68 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   22f42:	884b      	ldrh	r3, [r1, #2]
   22f44:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   22f48:	2d02      	cmp	r5, #2
   22f4a:	d819      	bhi.n	22f80 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   22f4c:	f1c5 0202 	rsb	r2, r5, #2
   22f50:	4294      	cmp	r4, r2
   22f52:	bfa8      	it	ge
   22f54:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   22f56:	f10d 0306 	add.w	r3, sp, #6
   22f5a:	4622      	mov	r2, r4
   22f5c:	1959      	adds	r1, r3, r5
   22f5e:	f7fe fff8 	bl	21f52 <memcpy>
}
   22f62:	4620      	mov	r0, r4
   22f64:	b003      	add	sp, #12
   22f66:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   22f68:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   22f6a:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   22f6e:	d807      	bhi.n	22f80 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   22f70:	f1c5 0210 	rsb	r2, r5, #16
   22f74:	4294      	cmp	r4, r2
   22f76:	bfa8      	it	ge
   22f78:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   22f7a:	4622      	mov	r2, r4
   22f7c:	4429      	add	r1, r5
   22f7e:	e7ee      	b.n	22f5e <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22f80:	f06f 0406 	mvn.w	r4, #6
   22f84:	e7ed      	b.n	22f62 <bt_gatt_attr_read_service+0x30>

00022f86 <sc_clear>:
{
   22f86:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   22f88:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   22f8c:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   22f8e:	4631      	mov	r1, r6
   22f90:	7a00      	ldrb	r0, [r0, #8]
   22f92:	f000 f9e0 	bl	23356 <bt_addr_le_is_bonded>
   22f96:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   22f98:	4631      	mov	r1, r6
   22f9a:	f7f2 fb3b 	bl	15614 <find_sc_cfg>
	if (!cfg) {
   22f9e:	b128      	cbz	r0, 22fac <sc_clear+0x26>
}
   22fa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   22fa4:	220c      	movs	r2, #12
   22fa6:	2100      	movs	r1, #0
   22fa8:	f7fe bfde 	b.w	21f68 <memset>
}
   22fac:	bd70      	pop	{r4, r5, r6, pc}

00022fae <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   22fae:	2a02      	cmp	r2, #2
{
   22fb0:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   22fb2:	d108      	bne.n	22fc6 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   22fb4:	2300      	movs	r3, #0
   22fb6:	f100 0188 	add.w	r1, r0, #136	; 0x88
   22fba:	461a      	mov	r2, r3
   22fbc:	7a00      	ldrb	r0, [r0, #8]
   22fbe:	f7f2 fc1d 	bl	157fc <sc_save>
}
   22fc2:	2002      	movs	r0, #2
   22fc4:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   22fc6:	f7ff ffde 	bl	22f86 <sc_clear>
   22fca:	e7fa      	b.n	22fc2 <sc_ccc_cfg_write+0x14>

00022fcc <bt_gatt_attr_read>:
{
   22fcc:	b538      	push	{r3, r4, r5, lr}
   22fce:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   22fd2:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   22fd6:	42a9      	cmp	r1, r5
{
   22fd8:	4610      	mov	r0, r2
	if (offset > value_len) {
   22fda:	d80b      	bhi.n	22ff4 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   22fdc:	1a6d      	subs	r5, r5, r1
   22fde:	429d      	cmp	r5, r3
   22fe0:	bfa8      	it	ge
   22fe2:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   22fe4:	9b05      	ldr	r3, [sp, #20]
   22fe6:	b2ad      	uxth	r5, r5
   22fe8:	462a      	mov	r2, r5
   22fea:	4419      	add	r1, r3
   22fec:	f7fe ffb1 	bl	21f52 <memcpy>
}
   22ff0:	4628      	mov	r0, r5
   22ff2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   22ff4:	f06f 0506 	mvn.w	r5, #6
   22ff8:	e7fa      	b.n	22ff0 <bt_gatt_attr_read+0x24>

00022ffa <bt_gatt_attr_value_handle>:
{
   22ffa:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   22ffc:	4604      	mov	r4, r0
   22ffe:	b910      	cbnz	r0, 23006 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   23000:	2000      	movs	r0, #0
}
   23002:	b002      	add	sp, #8
   23004:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   23006:	2300      	movs	r3, #0
   23008:	f88d 3004 	strb.w	r3, [sp, #4]
   2300c:	6800      	ldr	r0, [r0, #0]
   2300e:	f642 0303 	movw	r3, #10243	; 0x2803
   23012:	a901      	add	r1, sp, #4
   23014:	f8ad 3006 	strh.w	r3, [sp, #6]
   23018:	f000 ff20 	bl	23e5c <bt_uuid_cmp>
   2301c:	2800      	cmp	r0, #0
   2301e:	d1ef      	bne.n	23000 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   23020:	68e3      	ldr	r3, [r4, #12]
   23022:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   23024:	2800      	cmp	r0, #0
   23026:	d1ec      	bne.n	23002 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   23028:	4620      	mov	r0, r4
   2302a:	f7f2 fd43 	bl	15ab4 <bt_gatt_attr_get_handle>
   2302e:	3001      	adds	r0, #1
   23030:	b280      	uxth	r0, r0
	return handle;
   23032:	e7e6      	b.n	23002 <bt_gatt_attr_value_handle+0x8>

00023034 <bt_gatt_attr_read_chrc>:
{
   23034:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   23036:	68cf      	ldr	r7, [r1, #12]
{
   23038:	b087      	sub	sp, #28
   2303a:	4608      	mov	r0, r1
   2303c:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   2303e:	79bb      	ldrb	r3, [r7, #6]
   23040:	f88d 3004 	strb.w	r3, [sp, #4]
{
   23044:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   23048:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2304a:	f7ff ffd6 	bl	22ffa <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2304e:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   23050:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   23054:	780b      	ldrb	r3, [r1, #0]
   23056:	b99b      	cbnz	r3, 23080 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   23058:	884b      	ldrh	r3, [r1, #2]
   2305a:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   2305e:	2105      	movs	r1, #5
	if (offset > value_len) {
   23060:	42b1      	cmp	r1, r6
   23062:	d315      	bcc.n	23090 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   23064:	1b89      	subs	r1, r1, r6
   23066:	42a1      	cmp	r1, r4
   23068:	bfa8      	it	ge
   2306a:	4621      	movge	r1, r4
   2306c:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   2306e:	ab01      	add	r3, sp, #4
   23070:	4622      	mov	r2, r4
   23072:	1999      	adds	r1, r3, r6
   23074:	4628      	mov	r0, r5
   23076:	f7fe ff6c 	bl	21f52 <memcpy>
}
   2307a:	4620      	mov	r0, r4
   2307c:	b007      	add	sp, #28
   2307e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   23080:	3101      	adds	r1, #1
   23082:	2210      	movs	r2, #16
   23084:	f10d 0007 	add.w	r0, sp, #7
   23088:	f7fe ff63 	bl	21f52 <memcpy>
		value_len += 16U;
   2308c:	2113      	movs	r1, #19
   2308e:	e7e7      	b.n	23060 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   23090:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   23094:	e7f1      	b.n	2307a <bt_gatt_attr_read_chrc+0x46>

00023096 <bt_gatt_foreach_attr>:
{
   23096:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   23098:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2309c:	2300      	movs	r3, #0
   2309e:	9300      	str	r3, [sp, #0]
   230a0:	461a      	mov	r2, r3
   230a2:	f7f2 fd37 	bl	15b14 <bt_gatt_foreach_attr_type>
}
   230a6:	b005      	add	sp, #20
   230a8:	f85d fb04 	ldr.w	pc, [sp], #4

000230ac <db_hash_process>:
	db_hash_gen(true);
   230ac:	f7f2 bd8c 	b.w	15bc8 <db_hash_gen.isra.0>

000230b0 <bt_gatt_check_perm>:
{
   230b0:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   230b2:	07d4      	lsls	r4, r2, #31
{
   230b4:	4605      	mov	r5, r0
   230b6:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   230b8:	d504      	bpl.n	230c4 <bt_gatt_check_perm+0x14>
   230ba:	f010 0f15 	tst.w	r0, #21
   230be:	d01e      	beq.n	230fe <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   230c0:	684b      	ldr	r3, [r1, #4]
   230c2:	b1e3      	cbz	r3, 230fe <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   230c4:	0793      	lsls	r3, r2, #30
   230c6:	d504      	bpl.n	230d2 <bt_gatt_check_perm+0x22>
   230c8:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   230cc:	d019      	beq.n	23102 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   230ce:	688b      	ldr	r3, [r1, #8]
   230d0:	b1bb      	cbz	r3, 23102 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   230d2:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   230d6:	f014 0f30 	tst.w	r4, #48	; 0x30
   230da:	d103      	bne.n	230e4 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   230dc:	f014 000c 	ands.w	r0, r4, #12
   230e0:	d107      	bne.n	230f2 <bt_gatt_check_perm+0x42>
}
   230e2:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   230e4:	4628      	mov	r0, r5
   230e6:	f7ff fd86 	bl	22bf6 <bt_conn_get_security>
   230ea:	2802      	cmp	r0, #2
   230ec:	d8f6      	bhi.n	230dc <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   230ee:	2005      	movs	r0, #5
   230f0:	e7f7      	b.n	230e2 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   230f2:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   230f4:	2b00      	cmp	r3, #0
   230f6:	bf14      	ite	ne
   230f8:	2000      	movne	r0, #0
   230fa:	200f      	moveq	r0, #15
   230fc:	e7f1      	b.n	230e2 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   230fe:	2002      	movs	r0, #2
   23100:	e7ef      	b.n	230e2 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   23102:	2003      	movs	r0, #3
   23104:	e7ed      	b.n	230e2 <bt_gatt_check_perm+0x32>

00023106 <bt_gatt_change_aware>:
{
   23106:	b510      	push	{r4, lr}
   23108:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   2310a:	f7f2 faa5 	bl	15658 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2310e:	4603      	mov	r3, r0
   23110:	b910      	cbnz	r0, 23118 <bt_gatt_change_aware+0x12>
		return true;
   23112:	2401      	movs	r4, #1
}
   23114:	4620      	mov	r0, r4
   23116:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   23118:	7a02      	ldrb	r2, [r0, #8]
   2311a:	07d2      	lsls	r2, r2, #31
   2311c:	d5f9      	bpl.n	23112 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2311e:	f3bf 8f5b 	dmb	ish
   23122:	68d9      	ldr	r1, [r3, #12]
   23124:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   23128:	f011 0101 	ands.w	r1, r1, #1
   2312c:	f100 000c 	add.w	r0, r0, #12
   23130:	d1ef      	bne.n	23112 <bt_gatt_change_aware+0xc>
	if (!req) {
   23132:	2c00      	cmp	r4, #0
   23134:	d0ee      	beq.n	23114 <bt_gatt_change_aware+0xe>
   23136:	f3bf 8f5b 	dmb	ish
   2313a:	68db      	ldr	r3, [r3, #12]
   2313c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   23140:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   23144:	079b      	lsls	r3, r3, #30
   23146:	d50e      	bpl.n	23166 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23148:	f3bf 8f5b 	dmb	ish
   2314c:	e850 3f00 	ldrex	r3, [r0]
   23150:	f023 0302 	bic.w	r3, r3, #2
   23154:	e840 3200 	strex	r2, r3, [r0]
   23158:	2a00      	cmp	r2, #0
   2315a:	d1f7      	bne.n	2314c <bt_gatt_change_aware+0x46>
   2315c:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   23160:	f7ff fe2e 	bl	22dc0 <atomic_set_bit>
	return false;
   23164:	e7d6      	b.n	23114 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   23166:	2101      	movs	r1, #1
   23168:	e7fa      	b.n	23160 <bt_gatt_change_aware+0x5a>

0002316a <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2316a:	280f      	cmp	r0, #15
   2316c:	d806      	bhi.n	2317c <bt_hci_evt_get_flags+0x12>
   2316e:	280d      	cmp	r0, #13
   23170:	d80b      	bhi.n	2318a <bt_hci_evt_get_flags+0x20>
   23172:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   23174:	bf14      	ite	ne
   23176:	2002      	movne	r0, #2
   23178:	2003      	moveq	r0, #3
   2317a:	4770      	bx	lr
	switch (evt) {
   2317c:	2813      	cmp	r0, #19
   2317e:	d004      	beq.n	2318a <bt_hci_evt_get_flags+0x20>
   23180:	281a      	cmp	r0, #26
   23182:	bf14      	ite	ne
   23184:	2002      	movne	r0, #2
   23186:	2001      	moveq	r0, #1
   23188:	4770      	bx	lr
   2318a:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   2318c:	4770      	bx	lr

0002318e <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2318e:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   23192:	b193      	cbz	r3, 231ba <update_sec_level+0x2c>
   23194:	7b5a      	ldrb	r2, [r3, #13]
   23196:	07d1      	lsls	r1, r2, #31
   23198:	d50f      	bpl.n	231ba <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2319a:	06d2      	lsls	r2, r2, #27
   2319c:	d50b      	bpl.n	231b6 <update_sec_level+0x28>
   2319e:	7b1b      	ldrb	r3, [r3, #12]
   231a0:	2b10      	cmp	r3, #16
   231a2:	d108      	bne.n	231b6 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   231a4:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   231a6:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   231a8:	7a82      	ldrb	r2, [r0, #10]
   231aa:	7a40      	ldrb	r0, [r0, #9]
}
   231ac:	4282      	cmp	r2, r0
   231ae:	bf8c      	ite	hi
   231b0:	2000      	movhi	r0, #0
   231b2:	2001      	movls	r0, #1
   231b4:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   231b6:	2303      	movs	r3, #3
   231b8:	e7f5      	b.n	231a6 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   231ba:	2302      	movs	r3, #2
   231bc:	e7f3      	b.n	231a6 <update_sec_level+0x18>

000231be <sys_put_le64>:
	dst[1] = val >> 8;
   231be:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   231c2:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   231c4:	0e00      	lsrs	r0, r0, #24
   231c6:	7053      	strb	r3, [r2, #1]
   231c8:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   231ca:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   231cc:	f3c1 2007 	ubfx	r0, r1, #8, #8
   231d0:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   231d2:	7093      	strb	r3, [r2, #2]
   231d4:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   231d6:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   231d8:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   231da:	71d1      	strb	r1, [r2, #7]
}
   231dc:	4770      	bx	lr

000231de <bt_hci_disconnect>:
{
   231de:	b570      	push	{r4, r5, r6, lr}
   231e0:	4606      	mov	r6, r0
   231e2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   231e4:	f240 4006 	movw	r0, #1030	; 0x406
   231e8:	2103      	movs	r1, #3
   231ea:	f7f3 fe07 	bl	16dfc <bt_hci_cmd_create>
	if (!buf) {
   231ee:	4604      	mov	r4, r0
   231f0:	b168      	cbz	r0, 2320e <bt_hci_disconnect+0x30>
   231f2:	2103      	movs	r1, #3
   231f4:	3008      	adds	r0, #8
   231f6:	f000 feda 	bl	23fae <net_buf_simple_add>
	disconn->reason = reason;
   231fa:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   231fc:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   231fe:	4621      	mov	r1, r4
   23200:	2200      	movs	r2, #0
}
   23202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   23206:	f240 4006 	movw	r0, #1030	; 0x406
   2320a:	f7f3 bf53 	b.w	170b4 <bt_hci_cmd_send_sync>
}
   2320e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   23212:	bd70      	pop	{r4, r5, r6, pc}

00023214 <bt_le_set_data_len>:
{
   23214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23216:	4607      	mov	r7, r0
   23218:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2321a:	f242 0022 	movw	r0, #8226	; 0x2022
   2321e:	2106      	movs	r1, #6
{
   23220:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   23222:	f7f3 fdeb 	bl	16dfc <bt_hci_cmd_create>
	if (!buf) {
   23226:	4604      	mov	r4, r0
   23228:	b170      	cbz	r0, 23248 <bt_le_set_data_len+0x34>
   2322a:	2106      	movs	r1, #6
   2322c:	3008      	adds	r0, #8
   2322e:	f000 febe 	bl	23fae <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   23232:	883b      	ldrh	r3, [r7, #0]
   23234:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   23236:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   23238:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   2323a:	4621      	mov	r1, r4
   2323c:	f242 0022 	movw	r0, #8226	; 0x2022
}
   23240:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   23244:	f7f3 be12 	b.w	16e6c <bt_hci_cmd_send>
}
   23248:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2324c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002324e <bt_le_set_phy>:
{
   2324e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23252:	4680      	mov	r8, r0
   23254:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   23256:	f242 0032 	movw	r0, #8242	; 0x2032
   2325a:	2107      	movs	r1, #7
{
   2325c:	f89d 9020 	ldrb.w	r9, [sp, #32]
   23260:	4616      	mov	r6, r2
   23262:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   23264:	f7f3 fdca 	bl	16dfc <bt_hci_cmd_create>
	if (!buf) {
   23268:	4604      	mov	r4, r0
   2326a:	b190      	cbz	r0, 23292 <bt_le_set_phy+0x44>
   2326c:	2107      	movs	r1, #7
   2326e:	3008      	adds	r0, #8
   23270:	f000 fe9d 	bl	23fae <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   23274:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   23278:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2327a:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2327c:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2327e:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   23280:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   23284:	4621      	mov	r1, r4
   23286:	f242 0032 	movw	r0, #8242	; 0x2032
}
   2328a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2328e:	f7f3 bded 	b.w	16e6c <bt_hci_cmd_send>
}
   23292:	f06f 0068 	mvn.w	r0, #104	; 0x68
   23296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002329a <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2329a:	6880      	ldr	r0, [r0, #8]
   2329c:	f7f4 b8a8 	b.w	173f0 <bt_hci_le_enh_conn_complete>

000232a0 <le_legacy_conn_complete>:
{
   232a0:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   232a2:	6881      	ldr	r1, [r0, #8]
{
   232a4:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   232a6:	780b      	ldrb	r3, [r1, #0]
   232a8:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   232ac:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   232b0:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   232b4:	78cb      	ldrb	r3, [r1, #3]
   232b6:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   232ba:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   232be:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   232c2:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   232c6:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   232ca:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   232ce:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   232d2:	7c4b      	ldrb	r3, [r1, #17]
   232d4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	memcpy(dst, src, sizeof(*dst));
   232d8:	2207      	movs	r2, #7
   232da:	3104      	adds	r1, #4
   232dc:	a803      	add	r0, sp, #12
   232de:	f7fe fe38 	bl	21f52 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   232e2:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   232e4:	4669      	mov	r1, sp
   232e6:	2206      	movs	r2, #6
   232e8:	f10d 0013 	add.w	r0, sp, #19
   232ec:	9400      	str	r4, [sp, #0]
   232ee:	f8ad 4004 	strh.w	r4, [sp, #4]
   232f2:	f7fe fe2e 	bl	21f52 <memcpy>
   232f6:	2206      	movs	r2, #6
   232f8:	4669      	mov	r1, sp
   232fa:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   232fe:	9400      	str	r4, [sp, #0]
   23300:	f8ad 4004 	strh.w	r4, [sp, #4]
   23304:	f7fe fe25 	bl	21f52 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   23308:	a802      	add	r0, sp, #8
   2330a:	f7f4 f871 	bl	173f0 <bt_hci_le_enh_conn_complete>
}
   2330e:	b00a      	add	sp, #40	; 0x28
   23310:	bd10      	pop	{r4, pc}

00023312 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   23312:	8802      	ldrh	r2, [r0, #0]
   23314:	8843      	ldrh	r3, [r0, #2]
   23316:	429a      	cmp	r2, r3
{
   23318:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2331a:	d818      	bhi.n	2334e <bt_le_conn_params_valid+0x3c>
   2331c:	2a05      	cmp	r2, #5
   2331e:	d916      	bls.n	2334e <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   23320:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   23324:	d813      	bhi.n	2334e <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   23326:	8884      	ldrh	r4, [r0, #4]
   23328:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   2332c:	d20f      	bcs.n	2334e <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2332e:	88c1      	ldrh	r1, [r0, #6]
   23330:	f1a1 020a 	sub.w	r2, r1, #10
   23334:	b292      	uxth	r2, r2
   23336:	f640 4076 	movw	r0, #3190	; 0xc76
   2333a:	4282      	cmp	r2, r0
   2333c:	d807      	bhi.n	2334e <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   2333e:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   23342:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   23346:	bf34      	ite	cc
   23348:	2001      	movcc	r0, #1
   2334a:	2000      	movcs	r0, #0
}
   2334c:	bd10      	pop	{r4, pc}
		return false;
   2334e:	2000      	movs	r0, #0
   23350:	e7fc      	b.n	2334c <bt_le_conn_params_valid+0x3a>

00023352 <bt_send>:
		return bt_hci_ecc_send(buf);
   23352:	f7f4 bc69 	b.w	17c28 <bt_hci_ecc_send>

00023356 <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   23356:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   23358:	f7f5 f948 	bl	185ec <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   2335c:	b118      	cbz	r0, 23366 <bt_addr_le_is_bonded+0x10>
   2335e:	89c0      	ldrh	r0, [r0, #14]
   23360:	3800      	subs	r0, #0
   23362:	bf18      	it	ne
   23364:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   23366:	bd08      	pop	{r3, pc}

00023368 <send_cmd_status>:
{
   23368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   2336c:	f04f 32ff 	mov.w	r2, #4294967295
{
   23370:	4606      	mov	r6, r0
   23372:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   23374:	f04f 33ff 	mov.w	r3, #4294967295
   23378:	2100      	movs	r1, #0
   2337a:	200f      	movs	r0, #15
   2337c:	f7f1 f99a 	bl	146b4 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   23380:	2701      	movs	r7, #1
   23382:	f100 0808 	add.w	r8, r0, #8
   23386:	4604      	mov	r4, r0
   23388:	7507      	strb	r7, [r0, #20]
   2338a:	2102      	movs	r1, #2
   2338c:	4640      	mov	r0, r8
   2338e:	f000 fe0e 	bl	23fae <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   23392:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   23394:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   23396:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   23398:	7041      	strb	r1, [r0, #1]
   2339a:	4640      	mov	r0, r8
   2339c:	f000 fe07 	bl	23fae <net_buf_simple_add>
	evt->ncmd = 1U;
   233a0:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   233a2:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   233a4:	8046      	strh	r6, [r0, #2]
		bt_recv(buf);
   233a6:	4620      	mov	r0, r4
}
   233a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
   233ac:	f7f4 b98a 	b.w	176c4 <bt_recv>

000233b0 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   233b0:	f101 0320 	add.w	r3, r1, #32
   233b4:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   233b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   233ba:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   233be:	428b      	cmp	r3, r1
   233c0:	d1f9      	bne.n	233b6 <sys_memcpy_swap.constprop.0+0x6>
}
   233c2:	4770      	bx	lr

000233c4 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   233c4:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   233c8:	f043 0306 	orr.w	r3, r3, #6
   233cc:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   233d0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   233d4:	f043 0304 	orr.w	r3, r3, #4
   233d8:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   233dc:	4770      	bx	lr

000233de <default_CSPRNG>:
{
   233de:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   233e0:	f7f7 ff1c 	bl	1b21c <bt_rand>
}
   233e4:	fab0 f080 	clz	r0, r0
   233e8:	0940      	lsrs	r0, r0, #5
   233ea:	bd08      	pop	{r3, pc}

000233ec <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   233ec:	2207      	movs	r2, #7
   233ee:	f7fe bdb0 	b.w	21f52 <memcpy>

000233f2 <adv_unpause_enabled>:
   233f2:	f100 0310 	add.w	r3, r0, #16
   233f6:	f3bf 8f5b 	dmb	ish
   233fa:	e853 2f00 	ldrex	r2, [r3]
   233fe:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   23402:	e843 1c00 	strex	ip, r1, [r3]
   23406:	f1bc 0f00 	cmp.w	ip, #0
   2340a:	d1f6      	bne.n	233fa <adv_unpause_enabled+0x8>
   2340c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   23410:	0453      	lsls	r3, r2, #17
   23412:	d502      	bpl.n	2341a <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   23414:	2101      	movs	r1, #1
   23416:	f7fe bef3 	b.w	22200 <bt_le_adv_set_enable>
}
   2341a:	4770      	bx	lr

0002341c <addr_res_enable>:
{
   2341c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2341e:	2101      	movs	r1, #1
{
   23420:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   23422:	f242 002d 	movw	r0, #8237	; 0x202d
   23426:	f7f3 fce9 	bl	16dfc <bt_hci_cmd_create>
	if (!buf) {
   2342a:	4604      	mov	r4, r0
   2342c:	b158      	cbz	r0, 23446 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2342e:	4629      	mov	r1, r5
   23430:	3008      	adds	r0, #8
   23432:	f000 fdcb 	bl	23fcc <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   23436:	4621      	mov	r1, r4
   23438:	2200      	movs	r2, #0
}
   2343a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2343e:	f242 002d 	movw	r0, #8237	; 0x202d
   23442:	f7f3 be37 	b.w	170b4 <bt_hci_cmd_send_sync>
}
   23446:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2344a:	bd38      	pop	{r3, r4, r5, pc}

0002344c <hci_id_add.isra.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   2344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2344e:	4607      	mov	r7, r0
   23450:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   23452:	f242 0027 	movw	r0, #8231	; 0x2027
   23456:	2127      	movs	r1, #39	; 0x27
   23458:	f7f3 fcd0 	bl	16dfc <bt_hci_cmd_create>
	if (!buf) {
   2345c:	4604      	mov	r4, r0
   2345e:	b1d0      	cbz	r0, 23496 <hci_id_add.isra.0+0x4a>
	return net_buf_simple_add(&buf->b, len);
   23460:	2127      	movs	r1, #39	; 0x27
   23462:	3008      	adds	r0, #8
   23464:	f000 fda3 	bl	23fae <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   23468:	4639      	mov	r1, r7
   2346a:	4605      	mov	r5, r0
   2346c:	f7ff ffbe 	bl	233ec <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   23470:	4631      	mov	r1, r6
   23472:	2210      	movs	r2, #16
   23474:	1de8      	adds	r0, r5, #7
   23476:	f7fe fd6c 	bl	21f52 <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   2347a:	2210      	movs	r2, #16
   2347c:	2100      	movs	r1, #0
   2347e:	f105 0017 	add.w	r0, r5, #23
   23482:	f7fe fd71 	bl	21f68 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   23486:	4621      	mov	r1, r4
   23488:	2200      	movs	r2, #0
}
   2348a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2348e:	f242 0027 	movw	r0, #8231	; 0x2027
   23492:	f7f3 be0f 	b.w	170b4 <bt_hci_cmd_send_sync>
}
   23496:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2349a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002349c <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2349c:	7a03      	ldrb	r3, [r0, #8]
   2349e:	075b      	lsls	r3, r3, #29
   234a0:	d504      	bpl.n	234ac <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   234a2:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   234a6:	3001      	adds	r0, #1
   234a8:	f7ff bfd0 	b.w	2344c <hci_id_add.isra.0>
}
   234ac:	4770      	bx	lr

000234ae <adv_pause_enabled>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   234ae:	f3bf 8f5b 	dmb	ish
   234b2:	6903      	ldr	r3, [r0, #16]
   234b4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   234b8:	065b      	lsls	r3, r3, #25
   234ba:	f100 0210 	add.w	r2, r0, #16
   234be:	d50e      	bpl.n	234de <adv_pause_enabled+0x30>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   234c0:	f3bf 8f5b 	dmb	ish
   234c4:	e852 3f00 	ldrex	r3, [r2]
   234c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   234cc:	e842 3100 	strex	r1, r3, [r2]
   234d0:	2900      	cmp	r1, #0
   234d2:	d1f7      	bne.n	234c4 <adv_pause_enabled+0x16>
   234d4:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   234d8:	2100      	movs	r1, #0
   234da:	f7fe be91 	b.w	22200 <bt_le_adv_set_enable>
}
   234de:	4770      	bx	lr

000234e0 <bt_lookup_id_addr>:
{
   234e0:	b510      	push	{r4, lr}
   234e2:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   234e4:	f7f5 f848 	bl	18578 <bt_keys_find_irk>
		if (keys) {
   234e8:	b100      	cbz	r0, 234ec <bt_lookup_id_addr+0xc>
			return &keys->addr;
   234ea:	1c44      	adds	r4, r0, #1
}
   234ec:	4620      	mov	r0, r4
   234ee:	bd10      	pop	{r4, pc}

000234f0 <bt_id_set_adv_private_addr>:
{
   234f0:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   234f2:	2106      	movs	r1, #6
   234f4:	4668      	mov	r0, sp
   234f6:	f7f7 fe91 	bl	1b21c <bt_rand>
	if (err) {
   234fa:	b940      	cbnz	r0, 2350e <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   234fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   23500:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   23502:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   23506:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   2350a:	f7f4 fc39 	bl	17d80 <set_random_address>
}
   2350e:	b003      	add	sp, #12
   23510:	f85d fb04 	ldr.w	pc, [sp], #4

00023514 <bt_id_adv_random_addr_check>:
}
   23514:	2001      	movs	r0, #1
   23516:	4770      	bx	lr

00023518 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   23518:	7a03      	ldrb	r3, [r0, #8]
   2351a:	07d9      	lsls	r1, r3, #31
   2351c:	d504      	bpl.n	23528 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2351e:	f023 0301 	bic.w	r3, r3, #1
   23522:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   23524:	f7f4 bca6 	b.w	17e74 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   23528:	0799      	lsls	r1, r3, #30
   2352a:	d504      	bpl.n	23536 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2352c:	f023 0302 	bic.w	r3, r3, #2
   23530:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   23532:	f7f4 bd73 	b.w	1801c <bt_id_del>
}
   23536:	4770      	bx	lr

00023538 <bt_keys_get_type>:
{
   23538:	b570      	push	{r4, r5, r6, lr}
   2353a:	4604      	mov	r4, r0
   2353c:	460d      	mov	r5, r1
   2353e:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   23540:	f7f5 f804 	bl	1854c <bt_keys_find>
	if (keys) {
   23544:	b938      	cbnz	r0, 23556 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   23546:	4631      	mov	r1, r6
   23548:	4628      	mov	r0, r5
   2354a:	f7f4 ffc9 	bl	184e0 <bt_keys_get_addr>
	if (!keys) {
   2354e:	b110      	cbz	r0, 23556 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   23550:	89c3      	ldrh	r3, [r0, #14]
   23552:	431c      	orrs	r4, r3
   23554:	81c4      	strh	r4, [r0, #14]
}
   23556:	bd70      	pop	{r4, r5, r6, pc}

00023558 <bt_keys_add_type>:
	keys->keys |= type;
   23558:	89c3      	ldrh	r3, [r0, #14]
   2355a:	4319      	orrs	r1, r3
   2355c:	81c1      	strh	r1, [r0, #14]
}
   2355e:	4770      	bx	lr

00023560 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   23560:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   23562:	7a03      	ldrb	r3, [r0, #8]
   23564:	075b      	lsls	r3, r3, #29
{
   23566:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   23568:	d501      	bpl.n	2356e <bt_keys_clear+0xe>
		bt_id_del(keys);
   2356a:	f7f4 fd57 	bl	1801c <bt_id_del>

		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   2356e:	4620      	mov	r0, r4
   23570:	225c      	movs	r2, #92	; 0x5c
}
   23572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   23576:	2100      	movs	r1, #0
   23578:	f7fe bcf6 	b.w	21f68 <memset>

0002357c <l2cap_connected>:
}
   2357c:	4770      	bx	lr

0002357e <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   2357e:	3010      	adds	r0, #16
   23580:	f001 bc74 	b.w	24e6c <k_work_cancel_delayable>

00023584 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   23584:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   23586:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   23588:	b17b      	cbz	r3, 235aa <bt_l2cap_chan_remove+0x26>
   2358a:	3b08      	subs	r3, #8
   2358c:	2200      	movs	r2, #0
   2358e:	b163      	cbz	r3, 235aa <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   23590:	428b      	cmp	r3, r1
   23592:	f103 0408 	add.w	r4, r3, #8
   23596:	d10f      	bne.n	235b8 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   23598:	688b      	ldr	r3, [r1, #8]
   2359a:	b93a      	cbnz	r2, 235ac <bt_l2cap_chan_remove+0x28>
   2359c:	6d42      	ldr	r2, [r0, #84]	; 0x54
	list->head = node;
   2359e:	6503      	str	r3, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   235a0:	4294      	cmp	r4, r2
   235a2:	d100      	bne.n	235a6 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   235a4:	6543      	str	r3, [r0, #84]	; 0x54
	parent->next = child;
   235a6:	2300      	movs	r3, #0
   235a8:	608b      	str	r3, [r1, #8]
}
   235aa:	bd10      	pop	{r4, pc}
   235ac:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   235ae:	6d43      	ldr	r3, [r0, #84]	; 0x54
   235b0:	429c      	cmp	r4, r3
	list->tail = node;
   235b2:	bf08      	it	eq
   235b4:	6542      	streq	r2, [r0, #84]	; 0x54
}
   235b6:	e7f6      	b.n	235a6 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   235b8:	2c00      	cmp	r4, #0
   235ba:	d0f6      	beq.n	235aa <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   235bc:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   235be:	2b00      	cmp	r3, #0
   235c0:	d0f3      	beq.n	235aa <bt_l2cap_chan_remove+0x26>
   235c2:	3b08      	subs	r3, #8
   235c4:	4622      	mov	r2, r4
   235c6:	e7e2      	b.n	2358e <bt_l2cap_chan_remove+0xa>

000235c8 <bt_l2cap_chan_del>:
{
   235c8:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   235ca:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   235ce:	4604      	mov	r4, r0
	if (!chan->conn) {
   235d0:	b123      	cbz	r3, 235dc <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   235d2:	686b      	ldr	r3, [r5, #4]
   235d4:	b103      	cbz	r3, 235d8 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   235d6:	4798      	blx	r3
	chan->conn = NULL;
   235d8:	2300      	movs	r3, #0
   235da:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   235dc:	68e3      	ldr	r3, [r4, #12]
   235de:	b10b      	cbz	r3, 235e4 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   235e0:	4620      	mov	r0, r4
   235e2:	4798      	blx	r3
	if (ops->released) {
   235e4:	69eb      	ldr	r3, [r5, #28]
   235e6:	b11b      	cbz	r3, 235f0 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   235e8:	4620      	mov	r0, r4
}
   235ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   235ee:	4718      	bx	r3
}
   235f0:	bd70      	pop	{r4, r5, r6, pc}

000235f2 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   235f2:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   235f4:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   235f6:	b18b      	cbz	r3, 2361c <bt_l2cap_disconnected+0x2a>
   235f8:	f1b3 0008 	subs.w	r0, r3, #8
   235fc:	d00e      	beq.n	2361c <bt_l2cap_disconnected+0x2a>
   235fe:	681c      	ldr	r4, [r3, #0]
   23600:	b104      	cbz	r4, 23604 <bt_l2cap_disconnected+0x12>
   23602:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   23604:	f7ff ffe0 	bl	235c8 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   23608:	b144      	cbz	r4, 2361c <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2360a:	f114 0308 	adds.w	r3, r4, #8
   2360e:	d002      	beq.n	23616 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   23610:	68a3      	ldr	r3, [r4, #8]
   23612:	b103      	cbz	r3, 23616 <bt_l2cap_disconnected+0x24>
   23614:	3b08      	subs	r3, #8
{
   23616:	4620      	mov	r0, r4
   23618:	461c      	mov	r4, r3
   2361a:	e7f3      	b.n	23604 <bt_l2cap_disconnected+0x12>
}
   2361c:	bd10      	pop	{r4, pc}

0002361e <bt_l2cap_security_changed>:
{
   2361e:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   23620:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   23622:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   23624:	b1a3      	cbz	r3, 23650 <bt_l2cap_security_changed+0x32>
   23626:	f1b3 0008 	subs.w	r0, r3, #8
   2362a:	d011      	beq.n	23650 <bt_l2cap_security_changed+0x32>
   2362c:	681c      	ldr	r4, [r3, #0]
   2362e:	b104      	cbz	r4, 23632 <bt_l2cap_security_changed+0x14>
   23630:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   23632:	6843      	ldr	r3, [r0, #4]
   23634:	689b      	ldr	r3, [r3, #8]
   23636:	b10b      	cbz	r3, 2363c <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   23638:	4629      	mov	r1, r5
   2363a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2363c:	b144      	cbz	r4, 23650 <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2363e:	f114 0308 	adds.w	r3, r4, #8
   23642:	d002      	beq.n	2364a <bt_l2cap_security_changed+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   23644:	68a3      	ldr	r3, [r4, #8]
   23646:	b103      	cbz	r3, 2364a <bt_l2cap_security_changed+0x2c>
   23648:	3b08      	subs	r3, #8
{
   2364a:	4620      	mov	r0, r4
   2364c:	461c      	mov	r4, r3
   2364e:	e7f0      	b.n	23632 <bt_l2cap_security_changed+0x14>
}
   23650:	bd38      	pop	{r3, r4, r5, pc}

00023652 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   23652:	3104      	adds	r1, #4
   23654:	f7f1 bb8e 	b.w	14d74 <bt_conn_create_pdu_timeout>

00023658 <bt_l2cap_send_cb>:
{
   23658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2365c:	4614      	mov	r4, r2
   2365e:	4605      	mov	r5, r0
   23660:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   23662:	f102 0008 	add.w	r0, r2, #8
   23666:	2104      	movs	r1, #4
   23668:	461e      	mov	r6, r3
   2366a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2366e:	f000 fcb5 	bl	23fdc <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   23672:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   23674:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   23676:	3a04      	subs	r2, #4
   23678:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2367a:	4643      	mov	r3, r8
   2367c:	4632      	mov	r2, r6
   2367e:	4621      	mov	r1, r4
   23680:	4628      	mov	r0, r5
}
   23682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   23686:	f7f1 b9d5 	b.w	14a34 <bt_conn_send_cb>

0002368a <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2368a:	6d00      	ldr	r0, [r0, #80]	; 0x50
   2368c:	b160      	cbz	r0, 236a8 <bt_l2cap_le_lookup_tx_cid+0x1e>
   2368e:	3808      	subs	r0, #8
   23690:	b900      	cbnz	r0, 23694 <bt_l2cap_le_lookup_tx_cid+0xa>
   23692:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   23694:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   23698:	428b      	cmp	r3, r1
   2369a:	d005      	beq.n	236a8 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2369c:	f110 0308 	adds.w	r3, r0, #8
   236a0:	d001      	beq.n	236a6 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   236a2:	6880      	ldr	r0, [r0, #8]
   236a4:	e7f2      	b.n	2368c <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   236a6:	4618      	mov	r0, r3
}
   236a8:	4770      	bx	lr

000236aa <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   236aa:	6d00      	ldr	r0, [r0, #80]	; 0x50
   236ac:	b160      	cbz	r0, 236c8 <bt_l2cap_le_lookup_rx_cid+0x1e>
   236ae:	3808      	subs	r0, #8
   236b0:	b900      	cbnz	r0, 236b4 <bt_l2cap_le_lookup_rx_cid+0xa>
   236b2:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   236b4:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   236b8:	428b      	cmp	r3, r1
   236ba:	d005      	beq.n	236c8 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   236bc:	f110 0308 	adds.w	r3, r0, #8
   236c0:	d001      	beq.n	236c6 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   236c2:	6880      	ldr	r0, [r0, #8]
   236c4:	e7f2      	b.n	236ac <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   236c6:	4618      	mov	r0, r3
}
   236c8:	4770      	bx	lr

000236ca <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   236ca:	4770      	bx	lr

000236cc <sys_memcpy_swap>:
	psrc += length - 1;
   236cc:	1e53      	subs	r3, r2, #1
   236ce:	4419      	add	r1, r3
	for (; length > 0; length--) {
   236d0:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   236d2:	f811 3901 	ldrb.w	r3, [r1], #-1
   236d6:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   236da:	4290      	cmp	r0, r2
   236dc:	d1f9      	bne.n	236d2 <sys_memcpy_swap+0x6>
}
   236de:	4770      	bx	lr

000236e0 <smp_pairing_rsp>:
}
   236e0:	2007      	movs	r0, #7
   236e2:	4770      	bx	lr

000236e4 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   236e4:	2301      	movs	r3, #1
   236e6:	408b      	lsls	r3, r1
   236e8:	f3bf 8f5b 	dmb	ish
   236ec:	e850 2f00 	ldrex	r2, [r0]
   236f0:	431a      	orrs	r2, r3
   236f2:	e840 2100 	strex	r1, r2, [r0]
   236f6:	2900      	cmp	r1, #0
   236f8:	d1f8      	bne.n	236ec <atomic_set_bit+0x8>
   236fa:	f3bf 8f5b 	dmb	ish
}
   236fe:	4770      	bx	lr

00023700 <smp_keypress_notif>:
{
   23700:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   23702:	210e      	movs	r1, #14
   23704:	f7ff ffee 	bl	236e4 <atomic_set_bit>
}
   23708:	2000      	movs	r0, #0
   2370a:	bd08      	pop	{r3, pc}

0002370c <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2370c:	2301      	movs	r3, #1
   2370e:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   23710:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23712:	f3bf 8f5b 	dmb	ish
   23716:	e850 2f00 	ldrex	r2, [r0]
   2371a:	401a      	ands	r2, r3
   2371c:	e840 2100 	strex	r1, r2, [r0]
   23720:	2900      	cmp	r1, #0
   23722:	d1f8      	bne.n	23716 <atomic_clear_bit+0xa>
   23724:	f3bf 8f5b 	dmb	ish
}
   23728:	4770      	bx	lr

0002372a <bt_smp_aes_cmac>:
{
   2372a:	b570      	push	{r4, r5, r6, lr}
   2372c:	b0c2      	sub	sp, #264	; 0x108
   2372e:	460d      	mov	r5, r1
   23730:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   23732:	4601      	mov	r1, r0
   23734:	aa16      	add	r2, sp, #88	; 0x58
   23736:	4668      	mov	r0, sp
{
   23738:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2373a:	f7fc fe57 	bl	203ec <tc_cmac_setup>
   2373e:	b150      	cbz	r0, 23756 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   23740:	4632      	mov	r2, r6
   23742:	4629      	mov	r1, r5
   23744:	4668      	mov	r0, sp
   23746:	f7fc fe7c 	bl	20442 <tc_cmac_update>
   2374a:	b120      	cbz	r0, 23756 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2374c:	4669      	mov	r1, sp
   2374e:	4620      	mov	r0, r4
   23750:	f7fc fee3 	bl	2051a <tc_cmac_final>
   23754:	b918      	cbnz	r0, 2375e <bt_smp_aes_cmac+0x34>
		return -EIO;
   23756:	f06f 0004 	mvn.w	r0, #4
}
   2375a:	b042      	add	sp, #264	; 0x108
   2375c:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   2375e:	2000      	movs	r0, #0
   23760:	e7fb      	b.n	2375a <bt_smp_aes_cmac+0x30>

00023762 <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   23762:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23764:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   23766:	2200      	movs	r2, #0
   23768:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2376a:	4604      	mov	r4, r0
   2376c:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2376e:	460a      	mov	r2, r1
   23770:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   23774:	2106      	movs	r1, #6
   23776:	f7ff ff6f 	bl	23658 <bt_l2cap_send_cb>
   2377a:	b128      	cbz	r0, 23788 <smp_send.isra.0+0x26>
		net_buf_unref(buf);
   2377c:	4628      	mov	r0, r5
}
   2377e:	b003      	add	sp, #12
   23780:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   23784:	f7f6 bdbe 	b.w	1a304 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   23788:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2378c:	2300      	movs	r3, #0
   2378e:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
}
   23792:	b003      	add	sp, #12
   23794:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   23798:	f7fa b852 	b.w	1d840 <k_work_reschedule>

0002379c <smp_security_request>:
   2379c:	2007      	movs	r0, #7
   2379e:	4770      	bx	lr

000237a0 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   237a0:	b510      	push	{r4, lr}
   237a2:	1e43      	subs	r3, r0, #1
   237a4:	f100 0210 	add.w	r2, r0, #16
   237a8:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   237aa:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   237ae:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   237b2:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   237b4:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   237b6:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   237b8:	d1f7      	bne.n	237aa <sys_mem_swap.constprop.0+0xa>
	}
}
   237ba:	bd10      	pop	{r4, pc}

000237bc <smp_f6>:
{
   237bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   237be:	b097      	sub	sp, #92	; 0x5c
   237c0:	4605      	mov	r5, r0
   237c2:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   237c4:	a805      	add	r0, sp, #20
   237c6:	2210      	movs	r2, #16
{
   237c8:	461c      	mov	r4, r3
   237ca:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   237cc:	f7ff ff7e 	bl	236cc <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   237d0:	2210      	movs	r2, #16
   237d2:	4631      	mov	r1, r6
   237d4:	a809      	add	r0, sp, #36	; 0x24
   237d6:	f7ff ff79 	bl	236cc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   237da:	4621      	mov	r1, r4
   237dc:	2210      	movs	r2, #16
   237de:	a80d      	add	r0, sp, #52	; 0x34
   237e0:	f7ff ff74 	bl	236cc <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   237e4:	991c      	ldr	r1, [sp, #112]	; 0x70
   237e6:	2203      	movs	r2, #3
   237e8:	a811      	add	r0, sp, #68	; 0x44
   237ea:	f7ff ff6f 	bl	236cc <sys_memcpy_swap>
	m[51] = a1->type;
   237ee:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   237f0:	f814 3b01 	ldrb.w	r3, [r4], #1
   237f4:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   237f8:	4621      	mov	r1, r4
   237fa:	2206      	movs	r2, #6
   237fc:	a812      	add	r0, sp, #72	; 0x48
   237fe:	f7fe fba8 	bl	21f52 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   23802:	4621      	mov	r1, r4
   23804:	2206      	movs	r2, #6
   23806:	a812      	add	r0, sp, #72	; 0x48
   23808:	f7ff ff60 	bl	236cc <sys_memcpy_swap>
	m[58] = a2->type;
   2380c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   2380e:	f814 3b01 	ldrb.w	r3, [r4], #1
   23812:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   23816:	4621      	mov	r1, r4
   23818:	2206      	movs	r2, #6
   2381a:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2381e:	f7fe fb98 	bl	21f52 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   23822:	4621      	mov	r1, r4
   23824:	2206      	movs	r2, #6
   23826:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2382a:	f7ff ff4f 	bl	236cc <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2382e:	2210      	movs	r2, #16
   23830:	4629      	mov	r1, r5
   23832:	a801      	add	r0, sp, #4
   23834:	f7ff ff4a 	bl	236cc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   23838:	463b      	mov	r3, r7
   2383a:	2241      	movs	r2, #65	; 0x41
   2383c:	a905      	add	r1, sp, #20
   2383e:	a801      	add	r0, sp, #4
   23840:	f7ff ff73 	bl	2372a <bt_smp_aes_cmac>
	if (err) {
   23844:	4604      	mov	r4, r0
   23846:	b910      	cbnz	r0, 2384e <smp_f6+0x92>
	sys_mem_swap(check, 16);
   23848:	4638      	mov	r0, r7
   2384a:	f7ff ffa9 	bl	237a0 <sys_mem_swap.constprop.0>
}
   2384e:	4620      	mov	r0, r4
   23850:	b017      	add	sp, #92	; 0x5c
   23852:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023854 <smp_f4>:
{
   23854:	b5f0      	push	{r4, r5, r6, r7, lr}
   23856:	b097      	sub	sp, #92	; 0x5c
   23858:	4614      	mov	r4, r2
   2385a:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   2385c:	2220      	movs	r2, #32
   2385e:	4601      	mov	r1, r0
   23860:	a805      	add	r0, sp, #20
{
   23862:	461d      	mov	r5, r3
   23864:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   23866:	f7ff ff31 	bl	236cc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2386a:	2220      	movs	r2, #32
   2386c:	4631      	mov	r1, r6
   2386e:	a80d      	add	r0, sp, #52	; 0x34
   23870:	f7ff ff2c 	bl	236cc <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   23874:	4621      	mov	r1, r4
   23876:	2210      	movs	r2, #16
   23878:	a801      	add	r0, sp, #4
	m[64] = z;
   2387a:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2387e:	f7ff ff25 	bl	236cc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   23882:	463b      	mov	r3, r7
   23884:	2241      	movs	r2, #65	; 0x41
   23886:	a905      	add	r1, sp, #20
   23888:	a801      	add	r0, sp, #4
   2388a:	f7ff ff4e 	bl	2372a <bt_smp_aes_cmac>
	if (err) {
   2388e:	4604      	mov	r4, r0
   23890:	b910      	cbnz	r0, 23898 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   23892:	4638      	mov	r0, r7
   23894:	f7ff ff84 	bl	237a0 <sys_mem_swap.constprop.0>
}
   23898:	4620      	mov	r0, r4
   2389a:	b017      	add	sp, #92	; 0x5c
   2389c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002389e <smp_signing_info>:
   2389e:	2007      	movs	r0, #7
   238a0:	4770      	bx	lr

000238a2 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   238a2:	f3bf 8f5b 	dmb	ish
   238a6:	6800      	ldr	r0, [r0, #0]
   238a8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   238ac:	4108      	asrs	r0, r1
}
   238ae:	f000 0001 	and.w	r0, r0, #1
   238b2:	4770      	bx	lr

000238b4 <update_keys_check>:
{
   238b4:	b510      	push	{r4, lr}
   238b6:	4603      	mov	r3, r0
	if (!keys ||
   238b8:	b1d9      	cbz	r1, 238f2 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   238ba:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   238bc:	f010 0f24 	tst.w	r0, #36	; 0x24
   238c0:	d017      	beq.n	238f2 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   238c2:	7d1a      	ldrb	r2, [r3, #20]
   238c4:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   238c6:	7b09      	ldrb	r1, [r1, #12]
   238c8:	42a2      	cmp	r2, r4
   238ca:	bf28      	it	cs
   238cc:	4622      	movcs	r2, r4
   238ce:	4291      	cmp	r1, r2
   238d0:	d901      	bls.n	238d6 <update_keys_check+0x22>
		return false;
   238d2:	2000      	movs	r0, #0
}
   238d4:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   238d6:	0682      	lsls	r2, r0, #26
   238d8:	d404      	bmi.n	238e4 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   238da:	7a18      	ldrb	r0, [r3, #8]
   238dc:	3800      	subs	r0, #0
   238de:	bf18      	it	ne
   238e0:	2001      	movne	r0, #1
   238e2:	e7f7      	b.n	238d4 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   238e4:	2105      	movs	r1, #5
   238e6:	1d18      	adds	r0, r3, #4
   238e8:	f7ff ffdb 	bl	238a2 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   238ec:	2800      	cmp	r0, #0
   238ee:	d1f4      	bne.n	238da <update_keys_check+0x26>
   238f0:	e7ef      	b.n	238d2 <update_keys_check+0x1e>
		return true;
   238f2:	2001      	movs	r0, #1
   238f4:	e7ee      	b.n	238d4 <update_keys_check+0x20>

000238f6 <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   238f6:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   238f8:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   238fa:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   238fc:	4628      	mov	r0, r5
   238fe:	2104      	movs	r1, #4
   23900:	f7ff ffcf 	bl	238a2 <atomic_test_bit>
   23904:	b168      	cbz	r0, 23922 <smp_create_pdu.isra.0+0x2c>
		timeout = K_NO_WAIT;
   23906:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   23908:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   2390a:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2390c:	4608      	mov	r0, r1
   2390e:	f7ff fea0 	bl	23652 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   23912:	4604      	mov	r4, r0
   23914:	b940      	cbnz	r0, 23928 <smp_create_pdu.isra.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   23916:	2104      	movs	r1, #4
   23918:	4628      	mov	r0, r5
   2391a:	f7ff fee3 	bl	236e4 <atomic_set_bit>
}
   2391e:	4620      	mov	r0, r4
   23920:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   23922:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   23926:	e7ef      	b.n	23908 <smp_create_pdu.isra.0+0x12>
	return net_buf_simple_add(&buf->b, len);
   23928:	2101      	movs	r1, #1
   2392a:	3008      	adds	r0, #8
   2392c:	f000 fb3f 	bl	23fae <net_buf_simple_add>
	hdr->code = op;
   23930:	7006      	strb	r6, [r0, #0]
	return buf;
   23932:	e7f4      	b.n	2391e <smp_create_pdu.isra.0+0x28>

00023934 <smp_send_pairing_random>:
{
   23934:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   23936:	2104      	movs	r1, #4
{
   23938:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2393a:	f7ff ffdc 	bl	238f6 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   2393e:	4604      	mov	r4, r0
   23940:	b178      	cbz	r0, 23962 <smp_send_pairing_random+0x2e>
   23942:	2110      	movs	r1, #16
   23944:	3008      	adds	r0, #8
   23946:	f000 fb32 	bl	23fae <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   2394a:	2210      	movs	r2, #16
   2394c:	f105 0127 	add.w	r1, r5, #39	; 0x27
   23950:	f7fe faff 	bl	21f52 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   23954:	4628      	mov	r0, r5
   23956:	2200      	movs	r2, #0
   23958:	4621      	mov	r1, r4
   2395a:	f7ff ff02 	bl	23762 <smp_send.isra.0>
	return 0;
   2395e:	2000      	movs	r0, #0
}
   23960:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   23962:	2008      	movs	r0, #8
   23964:	e7fc      	b.n	23960 <smp_send_pairing_random+0x2c>

00023966 <send_pairing_rsp>:
{
   23966:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   23968:	2102      	movs	r1, #2
{
   2396a:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2396c:	f7ff ffc3 	bl	238f6 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   23970:	4604      	mov	r4, r0
   23972:	b178      	cbz	r0, 23994 <send_pairing_rsp+0x2e>
   23974:	2106      	movs	r1, #6
   23976:	3008      	adds	r0, #8
   23978:	f000 fb19 	bl	23fae <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   2397c:	2206      	movs	r2, #6
   2397e:	f105 0111 	add.w	r1, r5, #17
   23982:	f7fe fae6 	bl	21f52 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   23986:	4628      	mov	r0, r5
   23988:	2200      	movs	r2, #0
   2398a:	4621      	mov	r1, r4
   2398c:	f7ff fee9 	bl	23762 <smp_send.isra.0>
	return 0;
   23990:	2000      	movs	r0, #0
}
   23992:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   23994:	2008      	movs	r0, #8
   23996:	e7fc      	b.n	23992 <send_pairing_rsp+0x2c>

00023998 <smp_dhkey_check>:
{
   23998:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   2399a:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   2399e:	78db      	ldrb	r3, [r3, #3]
   239a0:	2b01      	cmp	r3, #1
{
   239a2:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   239a4:	d114      	bne.n	239d0 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   239a6:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   239a8:	1d05      	adds	r5, r0, #4
   239aa:	2110      	movs	r1, #16
   239ac:	4628      	mov	r0, r5
   239ae:	f7ff fead 	bl	2370c <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   239b2:	4631      	mov	r1, r6
   239b4:	2210      	movs	r2, #16
   239b6:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   239ba:	f7fe faca 	bl	21f52 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   239be:	2107      	movs	r1, #7
   239c0:	4628      	mov	r0, r5
   239c2:	f7ff ff6e 	bl	238a2 <atomic_test_bit>
   239c6:	b128      	cbz	r0, 239d4 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   239c8:	2109      	movs	r1, #9
   239ca:	4628      	mov	r0, r5
   239cc:	f7ff fe8a 	bl	236e4 <atomic_set_bit>
}
   239d0:	2000      	movs	r0, #0
   239d2:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   239d4:	210a      	movs	r1, #10
   239d6:	4628      	mov	r0, r5
   239d8:	f7ff ff63 	bl	238a2 <atomic_test_bit>
   239dc:	2800      	cmp	r0, #0
   239de:	d1f3      	bne.n	239c8 <smp_dhkey_check+0x30>
		return compute_and_check_and_send_periph_dhcheck(smp);
   239e0:	4620      	mov	r0, r4
}
   239e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
   239e6:	f7f5 b88b 	b.w	18b00 <compute_and_check_and_send_periph_dhcheck>

000239ea <atomic_test_and_clear_bit>:
{
   239ea:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   239ec:	2301      	movs	r3, #1
   239ee:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   239f2:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   239f4:	f3bf 8f5b 	dmb	ish
   239f8:	e850 3f00 	ldrex	r3, [r0]
   239fc:	ea03 0c02 	and.w	ip, r3, r2
   23a00:	e840 ce00 	strex	lr, ip, [r0]
   23a04:	f1be 0f00 	cmp.w	lr, #0
   23a08:	d1f6      	bne.n	239f8 <atomic_test_and_clear_bit+0xe>
   23a0a:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   23a0e:	420b      	tst	r3, r1
}
   23a10:	bf14      	ite	ne
   23a12:	2001      	movne	r0, #1
   23a14:	2000      	moveq	r0, #0
   23a16:	f85d fb04 	ldr.w	pc, [sp], #4

00023a1a <smp_reset>:
{
   23a1a:	b538      	push	{r3, r4, r5, lr}
   23a1c:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   23a1e:	1d03      	adds	r3, r0, #4
   23a20:	2500      	movs	r5, #0
   23a22:	f3bf 8f5b 	dmb	ish
   23a26:	e853 2f00 	ldrex	r2, [r3]
   23a2a:	e843 5100 	strex	r1, r5, [r3]
   23a2e:	2900      	cmp	r1, #0
   23a30:	d1f9      	bne.n	23a26 <smp_reset+0xc>
   23a32:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   23a36:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   23a3a:	f001 fa17 	bl	24e6c <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   23a3e:	7225      	strb	r5, [r4, #8]
   23a40:	f3bf 8f5b 	dmb	ish
   23a44:	e854 3f00 	ldrex	r3, [r4]
   23a48:	e844 5200 	strex	r2, r5, [r4]
   23a4c:	2a00      	cmp	r2, #0
   23a4e:	d1f9      	bne.n	23a44 <smp_reset+0x2a>
   23a50:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   23a54:	4620      	mov	r0, r4
   23a56:	2101      	movs	r1, #1
}
   23a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   23a5c:	f7ff be42 	b.w	236e4 <atomic_set_bit>

00023a60 <smp_c1>:
{
   23a60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23a64:	b089      	sub	sp, #36	; 0x24
   23a66:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   23a6a:	4699      	mov	r9, r3
	p1[0] = ia->type;
   23a6c:	783b      	ldrb	r3, [r7, #0]
{
   23a6e:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   23a70:	f88d 3000 	strb.w	r3, [sp]
{
   23a74:	460c      	mov	r4, r1
	p1[1] = ra->type;
   23a76:	f898 3000 	ldrb.w	r3, [r8]
   23a7a:	f88d 3001 	strb.w	r3, [sp, #1]
{
   23a7e:	4611      	mov	r1, r2
   23a80:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   23a82:	2207      	movs	r2, #7
   23a84:	f10d 0002 	add.w	r0, sp, #2
   23a88:	f7fe fa63 	bl	21f52 <memcpy>
	memcpy(p1 + 9, pres, 7);
   23a8c:	2207      	movs	r2, #7
   23a8e:	4649      	mov	r1, r9
   23a90:	f10d 0009 	add.w	r0, sp, #9
   23a94:	f7fe fa5d 	bl	21f52 <memcpy>
	while (len--) {
   23a98:	f104 0010 	add.w	r0, r4, #16
   23a9c:	4629      	mov	r1, r5
   23a9e:	466a      	mov	r2, sp
   23aa0:	4284      	cmp	r4, r0
   23aa2:	d127      	bne.n	23af4 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   23aa4:	462a      	mov	r2, r5
   23aa6:	4629      	mov	r1, r5
   23aa8:	4630      	mov	r0, r6
   23aaa:	f000 fc19 	bl	242e0 <bt_encrypt_le>
	if (err) {
   23aae:	4604      	mov	r4, r0
   23ab0:	b9e0      	cbnz	r0, 23aec <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   23ab2:	2206      	movs	r2, #6
   23ab4:	f108 0101 	add.w	r1, r8, #1
   23ab8:	a804      	add	r0, sp, #16
   23aba:	f7fe fa4a 	bl	21f52 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   23abe:	2206      	movs	r2, #6
   23ac0:	1c79      	adds	r1, r7, #1
   23ac2:	f10d 0016 	add.w	r0, sp, #22
   23ac6:	f7fe fa44 	bl	21f52 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   23aca:	2204      	movs	r2, #4
   23acc:	4621      	mov	r1, r4
   23ace:	a807      	add	r0, sp, #28
   23ad0:	f7fe fa4a 	bl	21f68 <memset>
	while (len--) {
   23ad4:	f105 0010 	add.w	r0, r5, #16
   23ad8:	462a      	mov	r2, r5
   23ada:	ab04      	add	r3, sp, #16
   23adc:	4282      	cmp	r2, r0
   23ade:	d112      	bne.n	23b06 <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   23ae0:	462a      	mov	r2, r5
   23ae2:	4629      	mov	r1, r5
   23ae4:	4630      	mov	r0, r6
   23ae6:	f000 fbfb 	bl	242e0 <bt_encrypt_le>
   23aea:	4604      	mov	r4, r0
}
   23aec:	4620      	mov	r0, r4
   23aee:	b009      	add	sp, #36	; 0x24
   23af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   23af4:	f814 3b01 	ldrb.w	r3, [r4], #1
   23af8:	f812 cb01 	ldrb.w	ip, [r2], #1
   23afc:	ea83 030c 	eor.w	r3, r3, ip
   23b00:	f801 3b01 	strb.w	r3, [r1], #1
   23b04:	e7cc      	b.n	23aa0 <smp_c1+0x40>
   23b06:	f812 1b01 	ldrb.w	r1, [r2], #1
   23b0a:	f813 4b01 	ldrb.w	r4, [r3], #1
   23b0e:	4061      	eors	r1, r4
   23b10:	f802 1c01 	strb.w	r1, [r2, #-1]
   23b14:	e7e2      	b.n	23adc <smp_c1+0x7c>

00023b16 <legacy_pairing_confirm>:
{
   23b16:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   23b18:	1d07      	adds	r7, r0, #4
{
   23b1a:	b085      	sub	sp, #20
   23b1c:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   23b1e:	210a      	movs	r1, #10
   23b20:	4638      	mov	r0, r7
   23b22:	f7ff febe 	bl	238a2 <atomic_test_bit>
   23b26:	bb88      	cbnz	r0, 23b8c <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   23b28:	2104      	movs	r1, #4
   23b2a:	4628      	mov	r0, r5
   23b2c:	f7ff fdda 	bl	236e4 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   23b30:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   23b32:	f8d5 40f0 	ldr.w	r4, [r5, #240]	; 0xf0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   23b36:	f7ff fede 	bl	238f6 <smp_create_pdu.isra.0>
	if (!buf) {
   23b3a:	4606      	mov	r6, r0
   23b3c:	b1c0      	cbz	r0, 23b70 <legacy_pairing_confirm+0x5a>
   23b3e:	2110      	movs	r1, #16
   23b40:	3008      	adds	r0, #8
   23b42:	f000 fa34 	bl	23fae <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   23b46:	f104 0396 	add.w	r3, r4, #150	; 0x96
   23b4a:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   23b4c:	9002      	str	r0, [sp, #8]
   23b4e:	9301      	str	r3, [sp, #4]
   23b50:	9400      	str	r4, [sp, #0]
   23b52:	f105 0310 	add.w	r3, r5, #16
   23b56:	f105 0209 	add.w	r2, r5, #9
   23b5a:	f105 0127 	add.w	r1, r5, #39	; 0x27
   23b5e:	f105 0047 	add.w	r0, r5, #71	; 0x47
   23b62:	f7ff ff7d 	bl	23a60 <smp_c1>
   23b66:	4604      	mov	r4, r0
   23b68:	b120      	cbz	r0, 23b74 <legacy_pairing_confirm+0x5e>
		net_buf_unref(buf);
   23b6a:	4630      	mov	r0, r6
   23b6c:	f7f6 fbca 	bl	1a304 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   23b70:	2008      	movs	r0, #8
   23b72:	e009      	b.n	23b88 <legacy_pairing_confirm+0x72>
	smp_send(smp, buf, NULL, NULL);
   23b74:	4602      	mov	r2, r0
   23b76:	4631      	mov	r1, r6
   23b78:	4628      	mov	r0, r5
   23b7a:	f7ff fdf2 	bl	23762 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   23b7e:	4621      	mov	r1, r4
   23b80:	4638      	mov	r0, r7
   23b82:	f7ff fdc3 	bl	2370c <atomic_clear_bit>
	return 0;
   23b86:	2000      	movs	r0, #0
}
   23b88:	b005      	add	sp, #20
   23b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   23b8c:	2100      	movs	r1, #0
   23b8e:	4638      	mov	r0, r7
   23b90:	f7ff fda8 	bl	236e4 <atomic_set_bit>
   23b94:	e7f7      	b.n	23b86 <legacy_pairing_confirm+0x70>

00023b96 <bt_smp_request_ltk>:
{
   23b96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   23b9a:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   23b9e:	e9cd 2300 	strd	r2, r3, [sp]
   23ba2:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   23ba4:	f7f4 ff42 	bl	18a2c <smp_chan_get>
	if (!smp) {
   23ba8:	4605      	mov	r5, r0
   23baa:	2800      	cmp	r0, #0
   23bac:	f000 8090 	beq.w	23cd0 <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   23bb0:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   23bb4:	1d07      	adds	r7, r0, #4
   23bb6:	f1b9 0f00 	cmp.w	r9, #0
   23bba:	d12a      	bne.n	23c12 <bt_smp_request_ltk+0x7c>
   23bbc:	e9dd 2300 	ldrd	r2, r3, [sp]
   23bc0:	4313      	orrs	r3, r2
   23bc2:	d126      	bne.n	23c12 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   23bc4:	2103      	movs	r1, #3
   23bc6:	4638      	mov	r0, r7
   23bc8:	f7ff fe6b 	bl	238a2 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   23bcc:	b308      	cbz	r0, 23c12 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   23bce:	2101      	movs	r1, #1
   23bd0:	4638      	mov	r0, r7
   23bd2:	f7ff fe66 	bl	238a2 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   23bd6:	4606      	mov	r6, r0
   23bd8:	b1d8      	cbz	r0, 23c12 <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   23bda:	7d2c      	ldrb	r4, [r5, #20]
   23bdc:	7b6b      	ldrb	r3, [r5, #13]
   23bde:	429c      	cmp	r4, r3
   23be0:	bf28      	it	cs
   23be2:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   23be4:	4622      	mov	r2, r4
   23be6:	f105 0147 	add.w	r1, r5, #71	; 0x47
   23bea:	4640      	mov	r0, r8
   23bec:	f7fe f9b1 	bl	21f52 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   23bf0:	2c0f      	cmp	r4, #15
   23bf2:	d806      	bhi.n	23c02 <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   23bf4:	f1c4 0210 	rsb	r2, r4, #16
   23bf8:	4649      	mov	r1, r9
   23bfa:	eb08 0004 	add.w	r0, r8, r4
   23bfe:	f7fe f9b3 	bl	21f68 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   23c02:	2101      	movs	r1, #1
   23c04:	4638      	mov	r0, r7
   23c06:	f7ff fd6d 	bl	236e4 <atomic_set_bit>
}
   23c0a:	4630      	mov	r0, r6
   23c0c:	b003      	add	sp, #12
   23c0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   23c12:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   23c16:	b983      	cbnz	r3, 23c3a <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   23c18:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   23c1c:	7a21      	ldrb	r1, [r4, #8]
   23c1e:	4632      	mov	r2, r6
   23c20:	2020      	movs	r0, #32
   23c22:	f7f4 fc93 	bl	1854c <bt_keys_find>
   23c26:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   23c2a:	b930      	cbnz	r0, 23c3a <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   23c2c:	7a21      	ldrb	r1, [r4, #8]
   23c2e:	4632      	mov	r2, r6
   23c30:	2001      	movs	r0, #1
   23c32:	f7f4 fc8b 	bl	1854c <bt_keys_find>
   23c36:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   23c3a:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   23c3e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   23c42:	b9ee      	cbnz	r6, 23c80 <bt_smp_request_ltk+0xea>
   23c44:	e9dd 2300 	ldrd	r2, r3, [sp]
   23c48:	4313      	orrs	r3, r2
   23c4a:	d119      	bne.n	23c80 <bt_smp_request_ltk+0xea>
   23c4c:	b388      	cbz	r0, 23cb2 <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   23c4e:	89c3      	ldrh	r3, [r0, #14]
   23c50:	069a      	lsls	r2, r3, #26
   23c52:	d516      	bpl.n	23c82 <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   23c54:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   23c56:	f100 011a 	add.w	r1, r0, #26
   23c5a:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   23c5c:	4640      	mov	r0, r8
   23c5e:	f7fe f978 	bl	21f52 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   23c62:	2c0f      	cmp	r4, #15
   23c64:	d806      	bhi.n	23c74 <bt_smp_request_ltk+0xde>
			(void)memset(ltk + enc_size, 0,
   23c66:	f1c4 0210 	rsb	r2, r4, #16
   23c6a:	4631      	mov	r1, r6
   23c6c:	eb08 0004 	add.w	r0, r8, r4
   23c70:	f7fe f97a 	bl	21f68 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   23c74:	2101      	movs	r1, #1
   23c76:	4638      	mov	r0, r7
   23c78:	f7ff fd34 	bl	236e4 <atomic_set_bit>
		return true;
   23c7c:	2601      	movs	r6, #1
   23c7e:	e7c4      	b.n	23c0a <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   23c80:	b1b8      	cbz	r0, 23cb2 <bt_smp_request_ltk+0x11c>
   23c82:	89c3      	ldrh	r3, [r0, #14]
   23c84:	07db      	lsls	r3, r3, #31
   23c86:	d514      	bpl.n	23cb2 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   23c88:	2208      	movs	r2, #8
   23c8a:	4669      	mov	r1, sp
   23c8c:	3040      	adds	r0, #64	; 0x40
   23c8e:	f7fe f939 	bl	21f04 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   23c92:	b970      	cbnz	r0, 23cb2 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   23c94:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   23c98:	2202      	movs	r2, #2
   23c9a:	a90a      	add	r1, sp, #40	; 0x28
   23c9c:	3048      	adds	r0, #72	; 0x48
   23c9e:	f7fe f931 	bl	21f04 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   23ca2:	4606      	mov	r6, r0
   23ca4:	b928      	cbnz	r0, 23cb2 <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   23ca6:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   23caa:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   23cac:	314a      	adds	r1, #74	; 0x4a
   23cae:	4622      	mov	r2, r4
   23cb0:	e7d4      	b.n	23c5c <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   23cb2:	210f      	movs	r1, #15
   23cb4:	4638      	mov	r0, r7
   23cb6:	f7ff fdf4 	bl	238a2 <atomic_test_bit>
   23cba:	b120      	cbz	r0, 23cc6 <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   23cbc:	2202      	movs	r2, #2
   23cbe:	2106      	movs	r1, #6
   23cc0:	4620      	mov	r0, r4
   23cc2:	f7f1 f92f 	bl	14f24 <bt_conn_security_changed>
	smp_reset(smp);
   23cc6:	4628      	mov	r0, r5
   23cc8:	f7ff fea7 	bl	23a1a <smp_reset>
	return false;
   23ccc:	2600      	movs	r6, #0
   23cce:	e79c      	b.n	23c0a <bt_smp_request_ltk+0x74>
		return false;
   23cd0:	4606      	mov	r6, r0
   23cd2:	e79a      	b.n	23c0a <bt_smp_request_ltk+0x74>

00023cd4 <bt_smp_sign>:
   23cd4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23cd8:	4770      	bx	lr

00023cda <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   23cda:	1d03      	adds	r3, r0, #4
{
   23cdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   23cde:	4605      	mov	r5, r0
   23ce0:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   23ce2:	4618      	mov	r0, r3
   23ce4:	2103      	movs	r1, #3
   23ce6:	f7ff fddc 	bl	238a2 <atomic_test_bit>
   23cea:	b1f0      	cbz	r0, 23d2a <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   23cec:	4631      	mov	r1, r6
   23cee:	4628      	mov	r0, r5
   23cf0:	f7f5 fde8 	bl	198c4 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   23cf4:	2105      	movs	r1, #5
   23cf6:	4628      	mov	r0, r5
   23cf8:	f7ff fdfd 	bl	238f6 <smp_create_pdu.isra.0>
	if (!buf) {
   23cfc:	4604      	mov	r4, r0
   23cfe:	b308      	cbz	r0, 23d44 <smp_error+0x6a>
   23d00:	2101      	movs	r1, #1
   23d02:	3008      	adds	r0, #8
   23d04:	f000 f953 	bl	23fae <net_buf_simple_add>
	rsp->reason = reason;
   23d08:	7006      	strb	r6, [r0, #0]
   23d0a:	2600      	movs	r6, #0
   23d0c:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   23d10:	9600      	str	r6, [sp, #0]
   23d12:	4633      	mov	r3, r6
   23d14:	4622      	mov	r2, r4
   23d16:	2106      	movs	r1, #6
   23d18:	f7ff fc9e 	bl	23658 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   23d1c:	b118      	cbz	r0, 23d26 <smp_error+0x4c>
		net_buf_unref(buf);
   23d1e:	4620      	mov	r0, r4
   23d20:	f7f6 faf0 	bl	1a304 <net_buf_unref>
	return 0;
   23d24:	4630      	mov	r0, r6
}
   23d26:	b002      	add	sp, #8
   23d28:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   23d2a:	2101      	movs	r1, #1
   23d2c:	4618      	mov	r0, r3
   23d2e:	f7ff fdb8 	bl	238a2 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   23d32:	2800      	cmp	r0, #0
   23d34:	d1da      	bne.n	23cec <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   23d36:	210f      	movs	r1, #15
   23d38:	4618      	mov	r0, r3
   23d3a:	f7ff fdb2 	bl	238a2 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   23d3e:	2800      	cmp	r0, #0
   23d40:	d1d4      	bne.n	23cec <smp_error+0x12>
   23d42:	e7d7      	b.n	23cf4 <smp_error+0x1a>
		return -ENOBUFS;
   23d44:	f06f 0068 	mvn.w	r0, #104	; 0x68
   23d48:	e7ed      	b.n	23d26 <smp_error+0x4c>

00023d4a <bt_smp_dhkey_ready>:
{
   23d4a:	b570      	push	{r4, r5, r6, lr}
   23d4c:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   23d4e:	2008      	movs	r0, #8
   23d50:	f7f4 fec8 	bl	18ae4 <smp_find>
	if (smp) {
   23d54:	4604      	mov	r4, r0
   23d56:	b1b8      	cbz	r0, 23d88 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   23d58:	1d05      	adds	r5, r0, #4
   23d5a:	2108      	movs	r1, #8
   23d5c:	4628      	mov	r0, r5
   23d5e:	f7ff fcd5 	bl	2370c <atomic_clear_bit>
	if (!dhkey) {
   23d62:	b38e      	cbz	r6, 23dc8 <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   23d64:	2107      	movs	r1, #7
   23d66:	f7ff fcd1 	bl	2370c <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   23d6a:	4631      	mov	r1, r6
   23d6c:	2220      	movs	r2, #32
   23d6e:	f104 0097 	add.w	r0, r4, #151	; 0x97
   23d72:	f7fe f8ee 	bl	21f52 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   23d76:	210a      	movs	r1, #10
   23d78:	4628      	mov	r0, r5
   23d7a:	f7ff fd92 	bl	238a2 <atomic_test_bit>
   23d7e:	b168      	cbz	r0, 23d9c <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   23d80:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   23d82:	4628      	mov	r0, r5
   23d84:	f7ff fcae 	bl	236e4 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   23d88:	2007      	movs	r0, #7
   23d8a:	f7f4 feab 	bl	18ae4 <smp_find>
		if (smp) {
   23d8e:	4604      	mov	r4, r0
   23d90:	b118      	cbz	r0, 23d9a <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   23d92:	f7f4 fe07 	bl	189a4 <smp_dhkey_generate>
			if (err) {
   23d96:	4601      	mov	r1, r0
   23d98:	b990      	cbnz	r0, 23dc0 <bt_smp_dhkey_ready+0x76>
}
   23d9a:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   23d9c:	2110      	movs	r1, #16
   23d9e:	4628      	mov	r0, r5
   23da0:	f7ff fd7f 	bl	238a2 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   23da4:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   23da6:	2800      	cmp	r0, #0
   23da8:	d1eb      	bne.n	23d82 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   23daa:	4628      	mov	r0, r5
   23dac:	f7ff fd79 	bl	238a2 <atomic_test_bit>
   23db0:	2800      	cmp	r0, #0
   23db2:	d0e9      	beq.n	23d88 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   23db4:	4620      	mov	r0, r4
   23db6:	f7f4 fea3 	bl	18b00 <compute_and_check_and_send_periph_dhcheck>
		if (err) {
   23dba:	4601      	mov	r1, r0
   23dbc:	2800      	cmp	r0, #0
   23dbe:	d0e3      	beq.n	23d88 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   23dc0:	4620      	mov	r0, r4
   23dc2:	f7ff ff8a 	bl	23cda <smp_error>
   23dc6:	e7df      	b.n	23d88 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   23dc8:	210b      	movs	r1, #11
   23dca:	e7f9      	b.n	23dc0 <bt_smp_dhkey_ready+0x76>

00023dcc <bt_smp_disconnected>:
{
   23dcc:	b570      	push	{r4, r5, r6, lr}
   23dce:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   23dd0:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   23dd4:	f850 3be8 	ldr.w	r3, [r0], #232
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   23dd8:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   23dda:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   23dde:	f001 f845 	bl	24e6c <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   23de2:	2103      	movs	r1, #3
   23de4:	4620      	mov	r0, r4
   23de6:	f7ff fd5c 	bl	238a2 <atomic_test_bit>
   23dea:	b1a0      	cbz	r0, 23e16 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   23dec:	2108      	movs	r1, #8
   23dee:	4630      	mov	r0, r6
   23df0:	f7f5 fd68 	bl	198c4 <smp_pairing_complete>
	if (keys) {
   23df4:	b13d      	cbz	r5, 23e06 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   23df6:	89eb      	ldrh	r3, [r5, #14]
   23df8:	b113      	cbz	r3, 23e00 <bt_smp_disconnected+0x34>
   23dfa:	7b6b      	ldrb	r3, [r5, #13]
   23dfc:	079b      	lsls	r3, r3, #30
   23dfe:	d502      	bpl.n	23e06 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   23e00:	4628      	mov	r0, r5
   23e02:	f7ff fbad 	bl	23560 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   23e06:	4630      	mov	r0, r6
   23e08:	f44f 7202 	mov.w	r2, #520	; 0x208
}
   23e0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   23e10:	2100      	movs	r1, #0
   23e12:	f7fe b8a9 	b.w	21f68 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   23e16:	2101      	movs	r1, #1
   23e18:	4620      	mov	r0, r4
   23e1a:	f7ff fd42 	bl	238a2 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   23e1e:	2800      	cmp	r0, #0
   23e20:	d1e4      	bne.n	23dec <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   23e22:	210f      	movs	r1, #15
   23e24:	4620      	mov	r0, r4
   23e26:	f7ff fd3c 	bl	238a2 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   23e2a:	2800      	cmp	r0, #0
   23e2c:	d1de      	bne.n	23dec <bt_smp_disconnected+0x20>
   23e2e:	e7e1      	b.n	23df4 <bt_smp_disconnected+0x28>

00023e30 <smp_ident_sent>:
{
   23e30:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   23e32:	7883      	ldrb	r3, [r0, #2]
   23e34:	2b01      	cmp	r3, #1
   23e36:	d110      	bne.n	23e5a <smp_ident_sent+0x2a>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   23e38:	2106      	movs	r1, #6
   23e3a:	f7ff fc26 	bl	2368a <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   23e3e:	f810 3c08 	ldrb.w	r3, [r0, #-8]
   23e42:	f023 0301 	bic.w	r3, r3, #1
   23e46:	f800 3c08 	strb.w	r3, [r0, #-8]
		if (!smp->local_dist && !smp->remote_dist) {
   23e4a:	f830 1c08 	ldrh.w	r1, [r0, #-8]
   23e4e:	b921      	cbnz	r1, 23e5a <smp_ident_sent+0x2a>
}
   23e50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   23e54:	38f0      	subs	r0, #240	; 0xf0
   23e56:	f7f5 bd35 	b.w	198c4 <smp_pairing_complete>
}
   23e5a:	bd08      	pop	{r3, pc}

00023e5c <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   23e5c:	b510      	push	{r4, lr}
   23e5e:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   23e60:	7801      	ldrb	r1, [r0, #0]
   23e62:	7822      	ldrb	r2, [r4, #0]
   23e64:	428a      	cmp	r2, r1
{
   23e66:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   23e68:	d00e      	beq.n	23e88 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   23e6a:	4669      	mov	r1, sp
   23e6c:	f7f6 f950 	bl	1a110 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   23e70:	a905      	add	r1, sp, #20
   23e72:	4620      	mov	r0, r4
   23e74:	f7f6 f94c 	bl	1a110 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   23e78:	2210      	movs	r2, #16
   23e7a:	f10d 0115 	add.w	r1, sp, #21
   23e7e:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   23e82:	f7fe f83f 	bl	21f04 <memcmp>
   23e86:	e007      	b.n	23e98 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   23e88:	2a01      	cmp	r2, #1
   23e8a:	d007      	beq.n	23e9c <bt_uuid_cmp+0x40>
   23e8c:	2a02      	cmp	r2, #2
   23e8e:	d008      	beq.n	23ea2 <bt_uuid_cmp+0x46>
   23e90:	b95a      	cbnz	r2, 23eaa <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   23e92:	8840      	ldrh	r0, [r0, #2]
   23e94:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   23e96:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   23e98:	b00a      	add	sp, #40	; 0x28
   23e9a:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   23e9c:	6840      	ldr	r0, [r0, #4]
   23e9e:	6863      	ldr	r3, [r4, #4]
   23ea0:	e7f9      	b.n	23e96 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   23ea2:	2210      	movs	r2, #16
   23ea4:	1c61      	adds	r1, r4, #1
   23ea6:	3001      	adds	r0, #1
   23ea8:	e7eb      	b.n	23e82 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   23eaa:	f06f 0015 	mvn.w	r0, #21
   23eae:	e7f3      	b.n	23e98 <bt_uuid_cmp+0x3c>

00023eb0 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   23eb0:	2a04      	cmp	r2, #4
{
   23eb2:	b538      	push	{r3, r4, r5, lr}
   23eb4:	460c      	mov	r4, r1
	switch (data_len) {
   23eb6:	d00d      	beq.n	23ed4 <bt_uuid_create+0x24>
   23eb8:	2a10      	cmp	r2, #16
   23eba:	d019      	beq.n	23ef0 <bt_uuid_create+0x40>
   23ebc:	2a02      	cmp	r2, #2
   23ebe:	f04f 0300 	mov.w	r3, #0
   23ec2:	d11b      	bne.n	23efc <bt_uuid_create+0x4c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   23ec4:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   23ec6:	784a      	ldrb	r2, [r1, #1]
   23ec8:	780b      	ldrb	r3, [r1, #0]
   23eca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   23ece:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   23ed0:	2001      	movs	r0, #1
}
   23ed2:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   23ed4:	2301      	movs	r3, #1
   23ed6:	7003      	strb	r3, [r0, #0]
   23ed8:	78a2      	ldrb	r2, [r4, #2]
   23eda:	78c9      	ldrb	r1, [r1, #3]
   23edc:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   23ede:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   23ee2:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   23ee4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   23ee8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   23eec:	6042      	str	r2, [r0, #4]
		break;
   23eee:	e7ef      	b.n	23ed0 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   23ef0:	2302      	movs	r3, #2
   23ef2:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   23ef6:	f7fe f82c 	bl	21f52 <memcpy>
		break;
   23efa:	e7e9      	b.n	23ed0 <bt_uuid_create+0x20>
	switch (data_len) {
   23efc:	4618      	mov	r0, r3
   23efe:	e7e8      	b.n	23ed2 <bt_uuid_create+0x22>

00023f00 <fixed_data_unref>:
}
   23f00:	4770      	bx	lr

00023f02 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   23f02:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   23f04:	6849      	ldr	r1, [r1, #4]
   23f06:	6809      	ldr	r1, [r1, #0]
   23f08:	f7f6 b970 	b.w	1a1ec <net_buf_alloc_len>

00023f0c <net_buf_get>:
{
   23f0c:	b570      	push	{r4, r5, r6, lr}
   23f0e:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   23f10:	f7f8 fc1a 	bl	1c748 <z_impl_k_queue_get>
	if (!buf) {
   23f14:	4605      	mov	r5, r0
   23f16:	b128      	cbz	r0, 23f24 <net_buf_get+0x18>
   23f18:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   23f1a:	7963      	ldrb	r3, [r4, #5]
   23f1c:	f013 0301 	ands.w	r3, r3, #1
   23f20:	d102      	bne.n	23f28 <net_buf_get+0x1c>
	frag->frags = NULL;
   23f22:	6023      	str	r3, [r4, #0]
}
   23f24:	4628      	mov	r0, r5
   23f26:	bd70      	pop	{r4, r5, r6, pc}
   23f28:	2300      	movs	r3, #0
   23f2a:	2200      	movs	r2, #0
   23f2c:	4630      	mov	r0, r6
   23f2e:	f7f8 fc0b 	bl	1c748 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   23f32:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   23f34:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   23f36:	f023 0301 	bic.w	r3, r3, #1
   23f3a:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   23f3c:	4604      	mov	r4, r0
   23f3e:	e7ec      	b.n	23f1a <net_buf_get+0xe>

00023f40 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   23f40:	6883      	ldr	r3, [r0, #8]
   23f42:	440b      	add	r3, r1
   23f44:	6003      	str	r3, [r0, #0]
}
   23f46:	4770      	bx	lr

00023f48 <net_buf_put>:
{
   23f48:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   23f4a:	460a      	mov	r2, r1
   23f4c:	6814      	ldr	r4, [r2, #0]
   23f4e:	b914      	cbnz	r4, 23f56 <net_buf_put+0xe>
}
   23f50:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   23f52:	f000 bce7 	b.w	24924 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   23f56:	7953      	ldrb	r3, [r2, #5]
   23f58:	f043 0301 	orr.w	r3, r3, #1
   23f5c:	7153      	strb	r3, [r2, #5]
   23f5e:	4622      	mov	r2, r4
   23f60:	e7f4      	b.n	23f4c <net_buf_put+0x4>

00023f62 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   23f62:	7902      	ldrb	r2, [r0, #4]
   23f64:	3201      	adds	r2, #1
   23f66:	7102      	strb	r2, [r0, #4]
	return buf;
}
   23f68:	4770      	bx	lr

00023f6a <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   23f6a:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   23f6c:	4618      	mov	r0, r3
   23f6e:	681b      	ldr	r3, [r3, #0]
   23f70:	2b00      	cmp	r3, #0
   23f72:	d1fb      	bne.n	23f6c <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   23f74:	4770      	bx	lr

00023f76 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   23f76:	6802      	ldr	r2, [r0, #0]
{
   23f78:	b510      	push	{r4, lr}
	if (parent->frags) {
   23f7a:	b12a      	cbz	r2, 23f88 <net_buf_frag_insert+0x12>
   23f7c:	460b      	mov	r3, r1
	while (buf->frags) {
   23f7e:	461c      	mov	r4, r3
   23f80:	681b      	ldr	r3, [r3, #0]
   23f82:	2b00      	cmp	r3, #0
   23f84:	d1fb      	bne.n	23f7e <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   23f86:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   23f88:	6001      	str	r1, [r0, #0]
}
   23f8a:	bd10      	pop	{r4, pc}

00023f8c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   23f8c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   23f8e:	4604      	mov	r4, r0
   23f90:	b920      	cbnz	r0, 23f9c <net_buf_frag_add+0x10>
	buf->ref++;
   23f92:	790b      	ldrb	r3, [r1, #4]
   23f94:	3301      	adds	r3, #1
   23f96:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   23f98:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   23f9a:	bd10      	pop	{r4, pc}
   23f9c:	4603      	mov	r3, r0
	while (buf->frags) {
   23f9e:	4618      	mov	r0, r3
   23fa0:	681b      	ldr	r3, [r3, #0]
   23fa2:	2b00      	cmp	r3, #0
   23fa4:	d1fb      	bne.n	23f9e <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   23fa6:	f7ff ffe6 	bl	23f76 <net_buf_frag_insert>
   23faa:	4620      	mov	r0, r4
   23fac:	e7f5      	b.n	23f9a <net_buf_frag_add+0xe>

00023fae <net_buf_simple_add>:
	return buf->data + buf->len;
   23fae:	8883      	ldrh	r3, [r0, #4]
   23fb0:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   23fb2:	4419      	add	r1, r3
   23fb4:	8081      	strh	r1, [r0, #4]
	return tail;
}
   23fb6:	18d0      	adds	r0, r2, r3
   23fb8:	4770      	bx	lr

00023fba <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   23fba:	b430      	push	{r4, r5}
   23fbc:	8884      	ldrh	r4, [r0, #4]
   23fbe:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   23fc0:	18a3      	adds	r3, r4, r2
   23fc2:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   23fc4:	1928      	adds	r0, r5, r4
}
   23fc6:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   23fc8:	f7fd bfc3 	b.w	21f52 <memcpy>

00023fcc <net_buf_simple_add_u8>:
   23fcc:	8883      	ldrh	r3, [r0, #4]
   23fce:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   23fd0:	b510      	push	{r4, lr}
	buf->len += len;
   23fd2:	1c5c      	adds	r4, r3, #1
   23fd4:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   23fd6:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   23fd8:	18d0      	adds	r0, r2, r3
   23fda:	bd10      	pop	{r4, pc}

00023fdc <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   23fdc:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   23fde:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   23fe0:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   23fe2:	1a40      	subs	r0, r0, r1
	buf->len += len;
   23fe4:	4411      	add	r1, r2
	buf->data -= len;
   23fe6:	6018      	str	r0, [r3, #0]
	buf->len += len;
   23fe8:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   23fea:	4770      	bx	lr

00023fec <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   23fec:	8882      	ldrh	r2, [r0, #4]
   23fee:	1a52      	subs	r2, r2, r1
{
   23ff0:	4603      	mov	r3, r0
	buf->len -= len;
   23ff2:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   23ff4:	6800      	ldr	r0, [r0, #0]
   23ff6:	4408      	add	r0, r1
   23ff8:	6018      	str	r0, [r3, #0]
}
   23ffa:	4770      	bx	lr

00023ffc <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   23ffc:	4603      	mov	r3, r0
	void *data = buf->data;
   23ffe:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   24000:	889a      	ldrh	r2, [r3, #4]
   24002:	1a52      	subs	r2, r2, r1
	buf->data += len;
   24004:	4401      	add	r1, r0
	buf->len -= len;
   24006:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   24008:	6019      	str	r1, [r3, #0]

	return data;
}
   2400a:	4770      	bx	lr

0002400c <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2400c:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2400e:	6803      	ldr	r3, [r0, #0]
   24010:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   24012:	2102      	movs	r1, #2
   24014:	f7ff ffea 	bl	23fec <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   24018:	4620      	mov	r0, r4
   2401a:	bd10      	pop	{r4, pc}

0002401c <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2401c:	6802      	ldr	r2, [r0, #0]
   2401e:	6880      	ldr	r0, [r0, #8]
}
   24020:	1a10      	subs	r0, r2, r0
   24022:	4770      	bx	lr

00024024 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   24024:	8883      	ldrh	r3, [r0, #4]
   24026:	88c2      	ldrh	r2, [r0, #6]
   24028:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2402a:	6803      	ldr	r3, [r0, #0]
   2402c:	6880      	ldr	r0, [r0, #8]
   2402e:	1a18      	subs	r0, r3, r0
}
   24030:	1a10      	subs	r0, r2, r0
   24032:	4770      	bx	lr

00024034 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   24034:	6902      	ldr	r2, [r0, #16]
   24036:	b2cb      	uxtb	r3, r1
   24038:	210c      	movs	r1, #12
   2403a:	fb03 2101 	mla	r1, r3, r1, r2
   2403e:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   24040:	f000 0007 	and.w	r0, r0, #7
   24044:	4770      	bx	lr

00024046 <set_off_state>:
	__asm__ volatile(
   24046:	f04f 0340 	mov.w	r3, #64	; 0x40
   2404a:	f3ef 8211 	mrs	r2, BASEPRI
   2404e:	f383 8812 	msr	BASEPRI_MAX, r3
   24052:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   24056:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   24058:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   2405c:	d001      	beq.n	24062 <set_off_state+0x1c>
   2405e:	428b      	cmp	r3, r1
   24060:	d107      	bne.n	24072 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   24062:	2301      	movs	r3, #1
   24064:	6003      	str	r3, [r0, #0]
	int err = 0;
   24066:	2000      	movs	r0, #0
	__asm__ volatile(
   24068:	f382 8811 	msr	BASEPRI, r2
   2406c:	f3bf 8f6f 	isb	sy
}
   24070:	4770      	bx	lr
		err = -EPERM;
   24072:	f04f 30ff 	mov.w	r0, #4294967295
   24076:	e7f7      	b.n	24068 <set_off_state+0x22>

00024078 <set_starting_state>:
{
   24078:	b510      	push	{r4, lr}
	__asm__ volatile(
   2407a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2407e:	f3ef 8211 	mrs	r2, BASEPRI
   24082:	f383 8812 	msr	BASEPRI_MAX, r3
   24086:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2408a:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2408c:	f003 0407 	and.w	r4, r3, #7
   24090:	2c01      	cmp	r4, #1
   24092:	d106      	bne.n	240a2 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   24094:	6001      	str	r1, [r0, #0]
	int err = 0;
   24096:	2000      	movs	r0, #0
	__asm__ volatile(
   24098:	f382 8811 	msr	BASEPRI, r2
   2409c:	f3bf 8f6f 	isb	sy
}
   240a0:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   240a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   240a6:	428b      	cmp	r3, r1
		err = -EALREADY;
   240a8:	bf14      	ite	ne
   240aa:	f04f 30ff 	movne.w	r0, #4294967295
   240ae:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   240b2:	e7f1      	b.n	24098 <set_starting_state+0x20>

000240b4 <set_on_state>:
	__asm__ volatile(
   240b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   240b8:	f3ef 8211 	mrs	r2, BASEPRI
   240bc:	f383 8812 	msr	BASEPRI_MAX, r3
   240c0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   240c4:	6803      	ldr	r3, [r0, #0]
   240c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   240ca:	f043 0302 	orr.w	r3, r3, #2
   240ce:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   240d0:	f382 8811 	msr	BASEPRI, r2
   240d4:	f3bf 8f6f 	isb	sy
}
   240d8:	4770      	bx	lr

000240da <onoff_started_callback>:
	return &data->mgr[type];
   240da:	6900      	ldr	r0, [r0, #16]
{
   240dc:	b410      	push	{r4}
	return &data->mgr[type];
   240de:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   240e0:	241c      	movs	r4, #28
   240e2:	fb03 0004 	mla	r0, r3, r4, r0
   240e6:	2100      	movs	r1, #0
}
   240e8:	bc10      	pop	{r4}
	notify(mgr, 0);
   240ea:	4710      	bx	r2

000240ec <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   240ec:	2000      	movs	r0, #0
   240ee:	f7f7 be5f 	b.w	1bdb0 <nrfx_clock_start>

000240f2 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   240f2:	2000      	movs	r0, #0
   240f4:	f000 b956 	b.w	243a4 <nrfx_clock_stop>

000240f8 <blocking_start_callback>:
{
   240f8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   240fa:	f7f8 bed7 	b.w	1ceac <z_impl_k_sem_give>

000240fe <api_stop>:
{
   240fe:	b538      	push	{r3, r4, r5, lr}
   24100:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
   24102:	240c      	movs	r4, #12
   24104:	434c      	muls	r4, r1
{
   24106:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   24108:	6900      	ldr	r0, [r0, #16]
   2410a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   2410e:	2180      	movs	r1, #128	; 0x80
   24110:	4418      	add	r0, r3
   24112:	f7ff ff98 	bl	24046 <set_off_state>
	if (err < 0) {
   24116:	2800      	cmp	r0, #0
   24118:	db04      	blt.n	24124 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   2411a:	6869      	ldr	r1, [r5, #4]
   2411c:	440c      	add	r4, r1
   2411e:	6863      	ldr	r3, [r4, #4]
   24120:	4798      	blx	r3
	return 0;
   24122:	2000      	movs	r0, #0
}
   24124:	bd38      	pop	{r3, r4, r5, pc}

00024126 <api_start>:
{
   24126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2412a:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   2412c:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2412e:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   24130:	434c      	muls	r4, r1
{
   24132:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   24134:	f104 0040 	add.w	r0, r4, #64	; 0x40
   24138:	2180      	movs	r1, #128	; 0x80
   2413a:	4428      	add	r0, r5
{
   2413c:	4690      	mov	r8, r2
   2413e:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   24140:	f7ff ff9a 	bl	24078 <set_starting_state>
	if (err < 0) {
   24144:	2800      	cmp	r0, #0
   24146:	db06      	blt.n	24156 <api_start+0x30>
	subdata->cb = cb;
   24148:	4425      	add	r5, r4
	subdata->user_data = user_data;
   2414a:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2414e:	6873      	ldr	r3, [r6, #4]
   24150:	591b      	ldr	r3, [r3, r4]
   24152:	4798      	blx	r3
	return 0;
   24154:	2000      	movs	r0, #0
}
   24156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002415a <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   2415a:	b570      	push	{r4, r5, r6, lr}
   2415c:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2415e:	6801      	ldr	r1, [r0, #0]
{
   24160:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   24162:	b189      	cbz	r1, 24188 <gpio_fire_callbacks+0x2e>
	return node->next;
   24164:	680c      	ldr	r4, [r1, #0]
   24166:	2c00      	cmp	r4, #0
   24168:	bf38      	it	cc
   2416a:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
   2416c:	688a      	ldr	r2, [r1, #8]
   2416e:	402a      	ands	r2, r5
   24170:	d002      	beq.n	24178 <gpio_fire_callbacks+0x1e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   24172:	684b      	ldr	r3, [r1, #4]
   24174:	4630      	mov	r0, r6
   24176:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   24178:	b134      	cbz	r4, 24188 <gpio_fire_callbacks+0x2e>
   2417a:	6823      	ldr	r3, [r4, #0]
   2417c:	2b00      	cmp	r3, #0
   2417e:	bf38      	it	cc
   24180:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24182:	4621      	mov	r1, r4
   24184:	461c      	mov	r4, r3
   24186:	e7f1      	b.n	2416c <gpio_fire_callbacks+0x12>
		}
	}
}
   24188:	bd70      	pop	{r4, r5, r6, pc}

0002418a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2418a:	6843      	ldr	r3, [r0, #4]
   2418c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2418e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   24192:	600b      	str	r3, [r1, #0]
}
   24194:	2000      	movs	r0, #0
   24196:	4770      	bx	lr

00024198 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24198:	6843      	ldr	r3, [r0, #4]
   2419a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2419c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   241a0:	4042      	eors	r2, r0
   241a2:	400a      	ands	r2, r1
   241a4:	4042      	eors	r2, r0
    p_reg->OUT = value;
   241a6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   241aa:	2000      	movs	r0, #0
   241ac:	4770      	bx	lr

000241ae <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   241ae:	6843      	ldr	r3, [r0, #4]
   241b0:	685b      	ldr	r3, [r3, #4]
}
   241b2:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   241b4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   241b8:	4770      	bx	lr

000241ba <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   241ba:	6843      	ldr	r3, [r0, #4]
   241bc:	685b      	ldr	r3, [r3, #4]
}
   241be:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   241c0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   241c4:	4770      	bx	lr

000241c6 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   241c6:	6843      	ldr	r3, [r0, #4]
   241c8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   241ca:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   241ce:	404b      	eors	r3, r1
    p_reg->OUT = value;
   241d0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   241d4:	2000      	movs	r0, #0
   241d6:	4770      	bx	lr

000241d8 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   241d8:	6903      	ldr	r3, [r0, #16]
Z_GENLIST_IS_EMPTY(slist)
   241da:	6858      	ldr	r0, [r3, #4]
{
   241dc:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   241de:	b158      	cbz	r0, 241f8 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   241e0:	2400      	movs	r4, #0
   241e2:	4281      	cmp	r1, r0
   241e4:	d113      	bne.n	2420e <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   241e6:	6808      	ldr	r0, [r1, #0]
   241e8:	b95c      	cbnz	r4, 24202 <gpio_nrfx_manage_callback+0x2a>
   241ea:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   241ec:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   241ee:	42a1      	cmp	r1, r4
   241f0:	d100      	bne.n	241f4 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   241f2:	6098      	str	r0, [r3, #8]
	parent->next = child;
   241f4:	2000      	movs	r0, #0
   241f6:	6008      	str	r0, [r1, #0]
	if (set) {
   241f8:	b972      	cbnz	r2, 24218 <gpio_nrfx_manage_callback+0x40>
	return 0;
   241fa:	2000      	movs	r0, #0
}
   241fc:	bd30      	pop	{r4, r5, pc}
   241fe:	4628      	mov	r0, r5
   24200:	e7ef      	b.n	241e2 <gpio_nrfx_manage_callback+0xa>
   24202:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   24204:	6898      	ldr	r0, [r3, #8]
   24206:	4281      	cmp	r1, r0
	list->tail = node;
   24208:	bf08      	it	eq
   2420a:	609c      	streq	r4, [r3, #8]
}
   2420c:	e7f2      	b.n	241f4 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2420e:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24210:	4604      	mov	r4, r0
   24212:	2d00      	cmp	r5, #0
   24214:	d1f3      	bne.n	241fe <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   24216:	b13a      	cbz	r2, 24228 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   24218:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2421a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2421c:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   2421e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   24220:	2800      	cmp	r0, #0
   24222:	d1ea      	bne.n	241fa <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   24224:	6099      	str	r1, [r3, #8]
}
   24226:	e7e9      	b.n	241fc <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   24228:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2422c:	e7e6      	b.n	241fc <gpio_nrfx_manage_callback+0x24>

0002422e <cfg_level_pins>:
{
   2422e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   24232:	6907      	ldr	r7, [r0, #16]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   24234:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   24238:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   2423a:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   2423e:	4313      	orrs	r3, r2
   24240:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   24244:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   24246:	2500      	movs	r5, #0
	while (level_pins) {
   24248:	b90c      	cbnz	r4, 2424e <cfg_level_pins+0x20>
}
   2424a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   2424e:	4226      	tst	r6, r4
   24250:	d010      	beq.n	24274 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   24252:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   24254:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   24258:	40e9      	lsrs	r1, r5
   2425a:	f001 0101 	and.w	r1, r1, #1
   2425e:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   24262:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   24266:	b2c9      	uxtb	r1, r1
   24268:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   2426c:	f7f6 fa88 	bl	1a780 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   24270:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   24274:	3501      	adds	r5, #1
		bit <<= 1;
   24276:	0076      	lsls	r6, r6, #1
   24278:	e7e6      	b.n	24248 <cfg_level_pins+0x1a>

0002427a <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   2427a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2427c:	460f      	mov	r7, r1
   2427e:	4616      	mov	r6, r2
	}

#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   24280:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   24284:	2400      	movs	r4, #0
	int res = -EINVAL;
   24286:	f06f 0015 	mvn.w	r0, #21
	/** This is a call from a secure app, in which case entropy is
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   2428a:	42a6      	cmp	r6, r4
   2428c:	d801      	bhi.n	24292 <entropy_cc3xx_rng_get_entropy+0x18>
		offset += chunk_size;
	}
#endif

	return res;
}
   2428e:	b003      	add	sp, #12
   24290:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   24292:	1b33      	subs	r3, r6, r4
   24294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   24298:	bf38      	it	cc
   2429a:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   2429c:	462a      	mov	r2, r5
   2429e:	ab01      	add	r3, sp, #4
   242a0:	1939      	adds	r1, r7, r4
   242a2:	2000      	movs	r0, #0
   242a4:	f7f9 fb9c 	bl	1d9e0 <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
   242a8:	9b01      	ldr	r3, [sp, #4]
   242aa:	42ab      	cmp	r3, r5
   242ac:	d103      	bne.n	242b6 <entropy_cc3xx_rng_get_entropy+0x3c>
		if (res != 0) {
   242ae:	2800      	cmp	r0, #0
   242b0:	d1ed      	bne.n	2428e <entropy_cc3xx_rng_get_entropy+0x14>
		offset += chunk_size;
   242b2:	442c      	add	r4, r5
   242b4:	e7e9      	b.n	2428a <entropy_cc3xx_rng_get_entropy+0x10>
			return -EINVAL;
   242b6:	f06f 0015 	mvn.w	r0, #21
   242ba:	e7e8      	b.n	2428e <entropy_cc3xx_rng_get_entropy+0x14>

000242bc <entropy_cc3xx_rng_init>:
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   242bc:	2200      	movs	r2, #0
{
   242be:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   242c0:	4611      	mov	r1, r2
   242c2:	4610      	mov	r0, r2
   242c4:	f7f9 fb58 	bl	1d978 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   242c8:	2800      	cmp	r0, #0
			return -EINVAL;
		}
	#endif

	return 0;
}
   242ca:	bf18      	it	ne
   242cc:	f06f 0015 	mvnne.w	r0, #21
   242d0:	bd08      	pop	{r3, pc}

000242d2 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
   242d2:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   242d4:	f7f6 fdd0 	bl	1ae78 <z_nrf_rtc_timer_read>
}
   242d8:	bd08      	pop	{r3, pc}

000242da <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   242da:	4770      	bx	lr

000242dc <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   242dc:	4770      	bx	lr

000242de <sys_clock_disable>:
   242de:	4770      	bx	lr

000242e0 <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   242e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   242e2:	b08d      	sub	sp, #52	; 0x34
   242e4:	4615      	mov	r5, r2
   242e6:	466a      	mov	r2, sp
   242e8:	f100 0310 	add.w	r3, r0, #16
   242ec:	4616      	mov	r6, r2
		*pdst++ = *psrc--;
   242ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   242f2:	f802 4b01 	strb.w	r4, [r2], #1
	for (; length > 0; length--) {
   242f6:	4298      	cmp	r0, r3
   242f8:	d1f9      	bne.n	242ee <bt_encrypt_le+0xe>
   242fa:	aa04      	add	r2, sp, #16
   242fc:	f101 0310 	add.w	r3, r1, #16
   24300:	4617      	mov	r7, r2
		*pdst++ = *psrc--;
   24302:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   24306:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
   2430a:	428b      	cmp	r3, r1
   2430c:	d1f9      	bne.n	24302 <bt_encrypt_le+0x22>
	BT_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2430e:	f04f 30ff 	mov.w	r0, #4294967295
   24312:	f04f 31ff 	mov.w	r1, #4294967295
   24316:	f7f6 ff5d 	bl	1b1d4 <multithreading_lock_acquire>

	if (!errcode) {
   2431a:	4604      	mov	r4, r0
   2431c:	b990      	cbnz	r0, 24344 <bt_encrypt_le+0x64>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   2431e:	aa08      	add	r2, sp, #32
   24320:	4639      	mov	r1, r7
   24322:	4630      	mov	r0, r6
   24324:	f7e8 fc57 	bl	cbd6 <sdc_soc_ecb_block_encrypt>
   24328:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2432a:	f7f6 ff5b 	bl	1b1e4 <multithreading_lock_release>
	}

	if (!errcode) {
   2432e:	b94c      	cbnz	r4, 24344 <bt_encrypt_le+0x64>
   24330:	1e6b      	subs	r3, r5, #1
	psrc += length - 1;
   24332:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
   24336:	350f      	adds	r5, #15
		*pdst++ = *psrc--;
   24338:	f812 1901 	ldrb.w	r1, [r2], #-1
   2433c:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   24340:	429d      	cmp	r5, r3
   24342:	d1f9      	bne.n	24338 <bt_encrypt_le+0x58>

		BT_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   24344:	4620      	mov	r0, r4
   24346:	b00d      	add	sp, #52	; 0x34
   24348:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002434a <rand_prio_high_vector_get>:
   2434a:	f7f6 bfbf 	b.w	1b2cc <rand_prio_low_vector_get>

0002434e <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2434e:	4668      	mov	r0, sp
   24350:	f020 0107 	bic.w	r1, r0, #7
   24354:	468d      	mov	sp, r1
   24356:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   24358:	f7df fa66 	bl	3828 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2435c:	f7ee f9bc 	bl	126d8 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   24360:	f7ee fa4a 	bl	127f8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   24364:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   24368:	4685      	mov	sp, r0
   2436a:	4770      	bx	lr

0002436c <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2436c:	4668      	mov	r0, sp
   2436e:	f020 0107 	bic.w	r1, r0, #7
   24372:	468d      	mov	sp, r1
   24374:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   24376:	f7df f9d9 	bl	372c <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2437a:	f7ee f9ad 	bl	126d8 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2437e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   24382:	4685      	mov	sp, r0
   24384:	4770      	bx	lr

00024386 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   24386:	4668      	mov	r0, sp
   24388:	f020 0107 	bic.w	r1, r0, #7
   2438c:	468d      	mov	sp, r1
   2438e:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   24390:	f7e8 f967 	bl	c662 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   24394:	f7ee f9a0 	bl	126d8 <_arch_isr_direct_pm>
   24398:	f7ee fa2e 	bl	127f8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2439c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   243a0:	4685      	mov	sp, r0
   243a2:	4770      	bx	lr

000243a4 <nrfx_clock_stop>:
	switch (domain) {
   243a4:	2801      	cmp	r0, #1
   243a6:	d101      	bne.n	243ac <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   243a8:	f7e0 b834 	b.w	4414 <mpsl_clock_hfclk_release>
}
   243ac:	4770      	bx	lr

000243ae <nrfx_clock_enable>:
}
   243ae:	4770      	bx	lr

000243b0 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   243b0:	f7df be4e 	b.w	4050 <MPSL_IRQ_CLOCK_Handler>

000243b4 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   243b4:	f7f9 ba84 	b.w	1d8c0 <nrf_cc3xx_platform_init>

000243b8 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   243b8:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   243ba:	f7ed fe0b 	bl	11fd4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   243be:	f7ed febd 	bl	1213c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   243c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   243c6:	f7f9 ba7b 	b.w	1d8c0 <nrf_cc3xx_platform_init>

000243ca <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   243ca:	4700      	bx	r0

000243cc <z_device_state_init>:
}
   243cc:	4770      	bx	lr

000243ce <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   243ce:	b138      	cbz	r0, 243e0 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   243d0:	68c3      	ldr	r3, [r0, #12]
   243d2:	8818      	ldrh	r0, [r3, #0]
   243d4:	f3c0 0008 	ubfx	r0, r0, #0, #9
   243d8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   243dc:	4258      	negs	r0, r3
   243de:	4158      	adcs	r0, r3
}
   243e0:	4770      	bx	lr

000243e2 <z_pm_save_idle_exit>:
{
   243e2:	b508      	push	{r3, lr}
	pm_system_resume();
   243e4:	f7ed ffcc 	bl	12380 <pm_system_resume>
}
   243e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   243ec:	f7ff bf76 	b.w	242dc <sys_clock_idle_exit>

000243f0 <k_heap_init>:
{
   243f0:	b410      	push	{r4}
   243f2:	f100 040c 	add.w	r4, r0, #12
   243f6:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   243fa:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   243fc:	f7fd ba27 	b.w	2184e <sys_heap_init>

00024400 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   24400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24404:	b087      	sub	sp, #28
   24406:	4604      	mov	r4, r0
   24408:	460e      	mov	r6, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2440a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   2440e:	4617      	mov	r7, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   24410:	f000 fc41 	bl	24c96 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   24414:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   24418:	4605      	mov	r5, r0
   2441a:	4688      	mov	r8, r1
	__asm__ volatile(
   2441c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24420:	f3ef 8b11 	mrs	fp, BASEPRI
   24424:	f383 8812 	msr	BASEPRI_MAX, r3
   24428:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2442c:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   24430:	463a      	mov	r2, r7
   24432:	4631      	mov	r1, r6
   24434:	4620      	mov	r0, r4
   24436:	f7fd f98f 	bl	21758 <sys_heap_aligned_alloc>
   2443a:	9005      	str	r0, [sp, #20]
		now = sys_clock_tick_get();
   2443c:	f7f8 ffa0 	bl	1d380 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   24440:	9b05      	ldr	r3, [sp, #20]
   24442:	b13b      	cbz	r3, 24454 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   24444:	f38b 8811 	msr	BASEPRI, fp
   24448:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2444c:	4618      	mov	r0, r3
   2444e:	b007      	add	sp, #28
   24450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   24454:	1a2a      	subs	r2, r5, r0
   24456:	9202      	str	r2, [sp, #8]
   24458:	eb68 0201 	sbc.w	r2, r8, r1
   2445c:	9203      	str	r2, [sp, #12]
   2445e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   24462:	2901      	cmp	r1, #1
   24464:	f172 0200 	sbcs.w	r2, r2, #0
   24468:	dbec      	blt.n	24444 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2446a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2446e:	4659      	mov	r1, fp
   24470:	e9cd 2300 	strd	r2, r3, [sp]
   24474:	4648      	mov	r0, r9
   24476:	4652      	mov	r2, sl
   24478:	f7f8 fb3c 	bl	1caf4 <z_pend_curr>
	__asm__ volatile(
   2447c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24480:	f3ef 8b11 	mrs	fp, BASEPRI
   24484:	f383 8812 	msr	BASEPRI_MAX, r3
   24488:	f3bf 8f6f 	isb	sy
   2448c:	e7d0      	b.n	24430 <k_heap_aligned_alloc+0x30>

0002448e <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2448e:	b538      	push	{r3, r4, r5, lr}
   24490:	4604      	mov	r4, r0
   24492:	f04f 0340 	mov.w	r3, #64	; 0x40
   24496:	f3ef 8511 	mrs	r5, BASEPRI
   2449a:	f383 8812 	msr	BASEPRI_MAX, r3
   2449e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   244a2:	f7fd f90c 	bl	216be <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   244a6:	f104 000c 	add.w	r0, r4, #12
   244aa:	f000 fb62 	bl	24b72 <z_unpend_all>
   244ae:	b130      	cbz	r0, 244be <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   244b0:	4629      	mov	r1, r5
   244b2:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   244b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   244ba:	f7f8 b9c1 	b.w	1c840 <z_reschedule>
	__asm__ volatile(
   244be:	f385 8811 	msr	BASEPRI, r5
   244c2:	f3bf 8f6f 	isb	sy
}
   244c6:	bd38      	pop	{r3, r4, r5, pc}

000244c8 <k_mem_slab_init>:
{
   244c8:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   244ca:	2400      	movs	r4, #0
   244cc:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   244ce:	ea41 0402 	orr.w	r4, r1, r2
   244d2:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   244d6:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   244da:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   244dc:	d10c      	bne.n	244f8 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   244de:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   244e0:	42a3      	cmp	r3, r4
   244e2:	d103      	bne.n	244ec <k_mem_slab_init+0x24>
   244e4:	e9c0 0000 	strd	r0, r0, [r0]
}
   244e8:	2000      	movs	r0, #0
}
   244ea:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   244ec:	6945      	ldr	r5, [r0, #20]
   244ee:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   244f0:	3401      	adds	r4, #1
		slab->free_list = p;
   244f2:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   244f4:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   244f6:	e7f3      	b.n	244e0 <k_mem_slab_init+0x18>
		return -EINVAL;
   244f8:	f06f 0015 	mvn.w	r0, #21
	return rc;
   244fc:	e7f5      	b.n	244ea <k_mem_slab_init+0x22>

000244fe <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   244fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24500:	4604      	mov	r4, r0
   24502:	460d      	mov	r5, r1
	__asm__ volatile(
   24504:	f04f 0340 	mov.w	r3, #64	; 0x40
   24508:	f3ef 8611 	mrs	r6, BASEPRI
   2450c:	f383 8812 	msr	BASEPRI_MAX, r3
   24510:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   24514:	6947      	ldr	r7, [r0, #20]
   24516:	b977      	cbnz	r7, 24536 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   24518:	f000 fb13 	bl	24b42 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   2451c:	b158      	cbz	r0, 24536 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2451e:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   24520:	6142      	str	r2, [r0, #20]
   24522:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   24524:	f000 fa99 	bl	24a5a <z_ready_thread>
			z_reschedule(&slab->lock, key);
   24528:	4631      	mov	r1, r6
   2452a:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2452e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   24532:	f7f8 b985 	b.w	1c840 <z_reschedule>
	**(char ***) mem = slab->free_list;
   24536:	682b      	ldr	r3, [r5, #0]
   24538:	6962      	ldr	r2, [r4, #20]
   2453a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2453c:	682b      	ldr	r3, [r5, #0]
   2453e:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   24540:	69a3      	ldr	r3, [r4, #24]
   24542:	3b01      	subs	r3, #1
   24544:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   24546:	f386 8811 	msr	BASEPRI, r6
   2454a:	f3bf 8f6f 	isb	sy
}
   2454e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024550 <z_impl_k_mutex_init>:
{
   24550:	4603      	mov	r3, r0
	mutex->owner = NULL;
   24552:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   24554:	e9c3 0002 	strd	r0, r0, [r3, #8]
   24558:	e9c3 3300 	strd	r3, r3, [r3]
}
   2455c:	4770      	bx	lr

0002455e <clear_event_registrations>:
	while (num_events--) {
   2455e:	2314      	movs	r3, #20
{
   24560:	b570      	push	{r4, r5, r6, lr}
   24562:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   24566:	2400      	movs	r4, #0
   24568:	2601      	movs	r6, #1
	while (num_events--) {
   2456a:	4281      	cmp	r1, r0
   2456c:	d100      	bne.n	24570 <clear_event_registrations+0x12>
}
   2456e:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   24570:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   24574:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   24578:	f003 031f 	and.w	r3, r3, #31
   2457c:	2b08      	cmp	r3, #8
   2457e:	d80d      	bhi.n	2459c <clear_event_registrations+0x3e>
   24580:	fa06 f303 	lsl.w	r3, r6, r3
   24584:	f413 7f8b 	tst.w	r3, #278	; 0x116
   24588:	d008      	beq.n	2459c <clear_event_registrations+0x3e>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2458a:	f851 3c14 	ldr.w	r3, [r1, #-20]
   2458e:	b12b      	cbz	r3, 2459c <clear_event_registrations+0x3e>
	sys_dnode_t *const prev = node->prev;
   24590:	f851 5c10 	ldr.w	r5, [r1, #-16]
	prev->next = next;
   24594:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   24596:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   24598:	e941 4405 	strd	r4, r4, [r1, #-20]
   2459c:	f382 8811 	msr	BASEPRI, r2
   245a0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   245a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   245a8:	f3ef 8211 	mrs	r2, BASEPRI
   245ac:	f383 8812 	msr	BASEPRI_MAX, r3
   245b0:	f3bf 8f6f 	isb	sy
   245b4:	3914      	subs	r1, #20
   245b6:	e7d8      	b.n	2456a <clear_event_registrations+0xc>

000245b8 <add_event>:
{
   245b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   245ba:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   245bc:	e9d0 2300 	ldrd	r2, r3, [r0]
   245c0:	4290      	cmp	r0, r2
   245c2:	4604      	mov	r4, r0
   245c4:	460d      	mov	r5, r1
   245c6:	d105      	bne.n	245d4 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   245c8:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   245ca:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   245ce:	601d      	str	r5, [r3, #0]
	list->tail = node;
   245d0:	6065      	str	r5, [r4, #4]
}
   245d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   245d4:	2b00      	cmp	r3, #0
   245d6:	d0f7      	beq.n	245c8 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   245d8:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   245da:	b100      	cbz	r0, 245de <add_event+0x26>
   245dc:	3860      	subs	r0, #96	; 0x60
   245de:	b107      	cbz	r7, 245e2 <add_event+0x2a>
   245e0:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   245e2:	4639      	mov	r1, r7
   245e4:	f000 f9ec 	bl	249c0 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   245e8:	2800      	cmp	r0, #0
   245ea:	dced      	bgt.n	245c8 <add_event+0x10>
	return list->head == list;
   245ec:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   245ee:	42b4      	cmp	r4, r6
   245f0:	d0ea      	beq.n	245c8 <add_event+0x10>
   245f2:	2e00      	cmp	r6, #0
   245f4:	bf38      	it	cc
   245f6:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   245f8:	2e00      	cmp	r6, #0
   245fa:	d0e5      	beq.n	245c8 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   245fc:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   245fe:	b101      	cbz	r1, 24602 <add_event+0x4a>
   24600:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   24602:	4638      	mov	r0, r7
   24604:	f000 f9dc 	bl	249c0 <z_sched_prio_cmp>
   24608:	2800      	cmp	r0, #0
   2460a:	dd05      	ble.n	24618 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   2460c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2460e:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   24612:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   24614:	6075      	str	r5, [r6, #4]
			return;
   24616:	e7dc      	b.n	245d2 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   24618:	6863      	ldr	r3, [r4, #4]
   2461a:	42b3      	cmp	r3, r6
   2461c:	d0d4      	beq.n	245c8 <add_event+0x10>
   2461e:	6836      	ldr	r6, [r6, #0]
   24620:	e7ea      	b.n	245f8 <add_event+0x40>

00024622 <register_events>:
{
   24622:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   24626:	2500      	movs	r5, #0
{
   24628:	468b      	mov	fp, r1
   2462a:	4614      	mov	r4, r2
   2462c:	461f      	mov	r7, r3
   2462e:	4682      	mov	sl, r0
	int events_registered = 0;
   24630:	462e      	mov	r6, r5
	event->poller = NULL;
   24632:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   24634:	455d      	cmp	r5, fp
   24636:	db02      	blt.n	2463e <register_events+0x1c>
}
   24638:	4630      	mov	r0, r6
   2463a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2463e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24642:	f3ef 8911 	mrs	r9, BASEPRI
   24646:	f383 8812 	msr	BASEPRI_MAX, r3
   2464a:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2464e:	f89a 300d 	ldrb.w	r3, [sl, #13]
   24652:	f003 031f 	and.w	r3, r3, #31
   24656:	3b01      	subs	r3, #1
   24658:	2b07      	cmp	r3, #7
   2465a:	d80f      	bhi.n	2467c <register_events+0x5a>
   2465c:	e8df f003 	tbb	[pc, r3]
   24660:	0a0e041e 	.word	0x0a0e041e
   24664:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   24668:	f8da 3010 	ldr.w	r3, [sl, #16]
   2466c:	689b      	ldr	r3, [r3, #8]
   2466e:	b12b      	cbz	r3, 2467c <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   24670:	2302      	movs	r3, #2
   24672:	e020      	b.n	246b6 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   24674:	f8da 3010 	ldr.w	r3, [sl, #16]
   24678:	681b      	ldr	r3, [r3, #0]
   2467a:	bb8b      	cbnz	r3, 246e0 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2467c:	bb47      	cbnz	r7, 246d0 <register_events+0xae>
   2467e:	7823      	ldrb	r3, [r4, #0]
   24680:	b333      	cbz	r3, 246d0 <register_events+0xae>
	switch (event->type) {
   24682:	f89a 300d 	ldrb.w	r3, [sl, #13]
   24686:	f003 031f 	and.w	r3, r3, #31
   2468a:	3b01      	subs	r3, #1
   2468c:	2b07      	cmp	r3, #7
   2468e:	d830      	bhi.n	246f2 <register_events+0xd0>
   24690:	e8df f003 	tbb	[pc, r3]
   24694:	282f2833 	.word	0x282f2833
   24698:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   2469c:	f8da 3010 	ldr.w	r3, [sl, #16]
   246a0:	689b      	ldr	r3, [r3, #8]
   246a2:	2b00      	cmp	r3, #0
   246a4:	d0ea      	beq.n	2467c <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   246a6:	2301      	movs	r3, #1
   246a8:	e005      	b.n	246b6 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   246aa:	f8da 3010 	ldr.w	r3, [sl, #16]
   246ae:	6a1b      	ldr	r3, [r3, #32]
   246b0:	2b00      	cmp	r3, #0
   246b2:	d0e3      	beq.n	2467c <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   246b4:	2310      	movs	r3, #16
	event->state |= state;
   246b6:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   246ba:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   246be:	f3c2 3145 	ubfx	r1, r2, #13, #6
   246c2:	430b      	orrs	r3, r1
   246c4:	f363 3252 	bfi	r2, r3, #13, #6
   246c8:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   246cc:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   246d0:	f389 8811 	msr	BASEPRI, r9
   246d4:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   246d8:	3501      	adds	r5, #1
   246da:	f10a 0a14 	add.w	sl, sl, #20
   246de:	e7a9      	b.n	24634 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   246e0:	2304      	movs	r3, #4
   246e2:	e7e8      	b.n	246b6 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   246e4:	f8da 0010 	ldr.w	r0, [sl, #16]
   246e8:	4622      	mov	r2, r4
   246ea:	4651      	mov	r1, sl
   246ec:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   246ee:	f7ff ff63 	bl	245b8 <add_event>
	event->poller = poller;
   246f2:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   246f6:	3601      	adds	r6, #1
   246f8:	e7ea      	b.n	246d0 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   246fa:	f8da 0010 	ldr.w	r0, [sl, #16]
   246fe:	4622      	mov	r2, r4
   24700:	4651      	mov	r1, sl
   24702:	e7f4      	b.n	246ee <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   24704:	f8da 0010 	ldr.w	r0, [sl, #16]
   24708:	4622      	mov	r2, r4
   2470a:	4651      	mov	r1, sl
   2470c:	3024      	adds	r0, #36	; 0x24
   2470e:	e7ee      	b.n	246ee <register_events+0xcc>

00024710 <signal_poll_event>:
{
   24710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   24714:	6884      	ldr	r4, [r0, #8]
{
   24716:	4605      	mov	r5, r0
   24718:	460e      	mov	r6, r1
	if (poller != NULL) {
   2471a:	b144      	cbz	r4, 2472e <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2471c:	7863      	ldrb	r3, [r4, #1]
   2471e:	2b01      	cmp	r3, #1
   24720:	d138      	bne.n	24794 <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   24722:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   24726:	f013 0302 	ands.w	r3, r3, #2
   2472a:	d10a      	bne.n	24742 <signal_poll_event+0x32>
		poller->is_polling = false;
   2472c:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2472e:	68eb      	ldr	r3, [r5, #12]
   24730:	f3c3 3145 	ubfx	r1, r3, #13, #6
   24734:	430e      	orrs	r6, r1
	event->poller = NULL;
   24736:	2000      	movs	r0, #0
	event->state |= state;
   24738:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   2473c:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2473e:	60eb      	str	r3, [r5, #12]
	return retcode;
   24740:	e00d      	b.n	2475e <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   24742:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   24746:	f04f 31ff 	mov.w	r1, #4294967295
   2474a:	f06f 0001 	mvn.w	r0, #1
   2474e:	428b      	cmp	r3, r1
   24750:	bf08      	it	eq
   24752:	4282      	cmpeq	r2, r0
   24754:	d105      	bne.n	24762 <signal_poll_event+0x52>
		poller->is_polling = false;
   24756:	2300      	movs	r3, #0
   24758:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2475a:	f06f 000a 	mvn.w	r0, #10
}
   2475e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   24762:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   24766:	4640      	mov	r0, r8
   24768:	f000 f943 	bl	249f2 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2476c:	2e08      	cmp	r6, #8
   2476e:	bf0c      	ite	eq
   24770:	f06f 0303 	mvneq.w	r3, #3
   24774:	2300      	movne	r3, #0
   24776:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24778:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2477c:	06db      	lsls	r3, r3, #27
   2477e:	d102      	bne.n	24786 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   24780:	f854 7c48 	ldr.w	r7, [r4, #-72]
   24784:	b10f      	cbz	r7, 2478a <signal_poll_event+0x7a>
		poller->is_polling = false;
   24786:	2300      	movs	r3, #0
   24788:	e7d0      	b.n	2472c <signal_poll_event+0x1c>
	z_ready_thread(thread);
   2478a:	4640      	mov	r0, r8
   2478c:	f000 f965 	bl	24a5a <z_ready_thread>
		poller->is_polling = false;
   24790:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   24792:	e7cc      	b.n	2472e <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   24794:	2b02      	cmp	r3, #2
   24796:	d1f6      	bne.n	24786 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   24798:	7823      	ldrb	r3, [r4, #0]
   2479a:	2b00      	cmp	r3, #0
   2479c:	d0c7      	beq.n	2472e <signal_poll_event+0x1e>
   2479e:	f854 7c04 	ldr.w	r7, [r4, #-4]
   247a2:	2f00      	cmp	r7, #0
   247a4:	d0f4      	beq.n	24790 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   247a6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   247aa:	f1a4 0914 	sub.w	r9, r4, #20
   247ae:	f104 0014 	add.w	r0, r4, #20
   247b2:	f000 fa28 	bl	24c06 <z_abort_timeout>
		twork->poll_result = 0;
   247b6:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   247ba:	4649      	mov	r1, r9
   247bc:	4638      	mov	r0, r7
   247be:	f000 fb2c 	bl	24e1a <k_work_submit_to_queue>
		poller->is_polling = false;
   247c2:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   247c6:	e7b2      	b.n	2472e <signal_poll_event+0x1e>

000247c8 <k_poll_event_init>:
{
   247c8:	b510      	push	{r4, lr}
	event->type = type;
   247ca:	04d2      	lsls	r2, r2, #19
   247cc:	0209      	lsls	r1, r1, #8
   247ce:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   247d2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   247d6:	430a      	orrs	r2, r1
   247d8:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   247da:	2400      	movs	r4, #0
	event->type = type;
   247dc:	430a      	orrs	r2, r1
	event->obj = obj;
   247de:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   247e2:	6084      	str	r4, [r0, #8]
}
   247e4:	bd10      	pop	{r4, pc}

000247e6 <z_handle_obj_poll_events>:
{
   247e6:	4603      	mov	r3, r0
	return list->head == list;
   247e8:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   247ea:	4283      	cmp	r3, r0
   247ec:	d008      	beq.n	24800 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   247ee:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   247f2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   247f4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   247f6:	2300      	movs	r3, #0
	node->prev = NULL;
   247f8:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   247fc:	f7ff bf88 	b.w	24710 <signal_poll_event>
}
   24800:	4770      	bx	lr

00024802 <queue_insert>:
{
   24802:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24806:	4699      	mov	r9, r3
   24808:	4604      	mov	r4, r0
   2480a:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2480e:	460d      	mov	r5, r1
   24810:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   24812:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   24816:	f04f 0240 	mov.w	r2, #64	; 0x40
   2481a:	f3ef 8711 	mrs	r7, BASEPRI
   2481e:	f382 8812 	msr	BASEPRI_MAX, r2
   24822:	f3bf 8f6f 	isb	sy
	if (is_append) {
   24826:	b103      	cbz	r3, 2482a <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   24828:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2482a:	4630      	mov	r0, r6
   2482c:	f000 f989 	bl	24b42 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   24830:	b158      	cbz	r0, 2484a <queue_insert+0x48>
   24832:	2400      	movs	r4, #0
   24834:	67c4      	str	r4, [r0, #124]	; 0x7c
   24836:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2483a:	f000 f90e 	bl	24a5a <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2483e:	4630      	mov	r0, r6
   24840:	4639      	mov	r1, r7
   24842:	f7f7 fffd 	bl	1c840 <z_reschedule>
	return 0;
   24846:	2000      	movs	r0, #0
   24848:	e00c      	b.n	24864 <queue_insert+0x62>
	if (alloc) {
   2484a:	f1b9 0f00 	cmp.w	r9, #0
   2484e:	d01b      	beq.n	24888 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   24850:	2108      	movs	r1, #8
   24852:	f7f9 f815 	bl	1d880 <z_thread_aligned_alloc>
		if (anode == NULL) {
   24856:	b938      	cbnz	r0, 24868 <queue_insert+0x66>
	__asm__ volatile(
   24858:	f387 8811 	msr	BASEPRI, r7
   2485c:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   24860:	f06f 000b 	mvn.w	r0, #11
}
   24864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   24868:	2301      	movs	r3, #1
		anode->data = data;
   2486a:	f8c0 8004 	str.w	r8, [r0, #4]
   2486e:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   24870:	6803      	ldr	r3, [r0, #0]
   24872:	f003 0203 	and.w	r2, r3, #3
   24876:	b95d      	cbnz	r5, 24890 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   24878:	6823      	ldr	r3, [r4, #0]
   2487a:	4313      	orrs	r3, r2
   2487c:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2487e:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   24880:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   24882:	b973      	cbnz	r3, 248a2 <queue_insert+0xa0>
	list->tail = node;
   24884:	6060      	str	r0, [r4, #4]
}
   24886:	e00c      	b.n	248a2 <queue_insert+0xa0>
	node->next_and_flags = flags;
   24888:	f8c8 9000 	str.w	r9, [r8]
}
   2488c:	4640      	mov	r0, r8
   2488e:	e7ef      	b.n	24870 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24890:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   24892:	f033 0303 	bics.w	r3, r3, #3
   24896:	d110      	bne.n	248ba <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   24898:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2489a:	6862      	ldr	r2, [r4, #4]
   2489c:	b93a      	cbnz	r2, 248ae <queue_insert+0xac>
	list->head = node;
   2489e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   248a2:	2104      	movs	r1, #4
   248a4:	f104 0010 	add.w	r0, r4, #16
   248a8:	f7ff ff9d 	bl	247e6 <z_handle_obj_poll_events>
   248ac:	e7c7      	b.n	2483e <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   248ae:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   248b0:	f003 0303 	and.w	r3, r3, #3
   248b4:	4303      	orrs	r3, r0
   248b6:	6013      	str	r3, [r2, #0]
   248b8:	e7e4      	b.n	24884 <queue_insert+0x82>
   248ba:	4313      	orrs	r3, r2
   248bc:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   248be:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   248c0:	f003 0303 	and.w	r3, r3, #3
   248c4:	4303      	orrs	r3, r0
   248c6:	602b      	str	r3, [r5, #0]
}
   248c8:	e7eb      	b.n	248a2 <queue_insert+0xa0>

000248ca <z_queue_node_peek>:
{
   248ca:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   248cc:	4604      	mov	r4, r0
   248ce:	b130      	cbz	r0, 248de <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   248d0:	6802      	ldr	r2, [r0, #0]
   248d2:	0793      	lsls	r3, r2, #30
   248d4:	d003      	beq.n	248de <z_queue_node_peek+0x14>
		ret = anode->data;
   248d6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   248d8:	b109      	cbz	r1, 248de <z_queue_node_peek+0x14>
			k_free(anode);
   248da:	f000 fb0c 	bl	24ef6 <k_free>
}
   248de:	4620      	mov	r0, r4
   248e0:	bd10      	pop	{r4, pc}

000248e2 <z_impl_k_queue_init>:
	list->head = NULL;
   248e2:	2300      	movs	r3, #0
	list->tail = NULL;
   248e4:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   248e8:	f100 0308 	add.w	r3, r0, #8
	list->tail = (sys_dnode_t *)list;
   248ec:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   248f0:	f100 0310 	add.w	r3, r0, #16
   248f4:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   248f8:	4770      	bx	lr

000248fa <k_queue_append>:
{
   248fa:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   248fc:	2301      	movs	r3, #1
   248fe:	9300      	str	r3, [sp, #0]
   24900:	2300      	movs	r3, #0
{
   24902:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   24904:	4619      	mov	r1, r3
   24906:	f7ff ff7c 	bl	24802 <queue_insert>
}
   2490a:	b003      	add	sp, #12
   2490c:	f85d fb04 	ldr.w	pc, [sp], #4

00024910 <k_queue_prepend>:
{
   24910:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   24912:	2300      	movs	r3, #0
{
   24914:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   24916:	9300      	str	r3, [sp, #0]
   24918:	4619      	mov	r1, r3
   2491a:	f7ff ff72 	bl	24802 <queue_insert>
}
   2491e:	b003      	add	sp, #12
   24920:	f85d fb04 	ldr.w	pc, [sp], #4

00024924 <k_queue_append_list>:
{
   24924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24928:	4605      	mov	r5, r0
   2492a:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   2492c:	460c      	mov	r4, r1
   2492e:	b391      	cbz	r1, 24996 <k_queue_append_list+0x72>
   24930:	b38a      	cbz	r2, 24996 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   24932:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   24936:	f04f 0340 	mov.w	r3, #64	; 0x40
   2493a:	f3ef 8811 	mrs	r8, BASEPRI
   2493e:	f383 8812 	msr	BASEPRI_MAX, r3
   24942:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   24946:	4638      	mov	r0, r7
   24948:	f000 f8fb 	bl	24b42 <z_unpend_first_thread>
   2494c:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   24950:	b920      	cbnz	r0, 2495c <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   24952:	686b      	ldr	r3, [r5, #4]
   24954:	b9cb      	cbnz	r3, 2498a <k_queue_append_list+0x66>
	list->head = node;
   24956:	602c      	str	r4, [r5, #0]
	list->tail = node;
   24958:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2495a:	e00a      	b.n	24972 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   2495c:	6144      	str	r4, [r0, #20]
   2495e:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   24962:	f000 f87a 	bl	24a5a <z_ready_thread>
		head = *(void **)head;
   24966:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   24968:	4638      	mov	r0, r7
   2496a:	f000 f8ea 	bl	24b42 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2496e:	2c00      	cmp	r4, #0
   24970:	d1ee      	bne.n	24950 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   24972:	2104      	movs	r1, #4
   24974:	f105 0010 	add.w	r0, r5, #16
   24978:	f7ff ff35 	bl	247e6 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2497c:	4638      	mov	r0, r7
   2497e:	4641      	mov	r1, r8
   24980:	f7f7 ff5e 	bl	1c840 <z_reschedule>
	return 0;
   24984:	2000      	movs	r0, #0
}
   24986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2498a:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2498c:	f001 0103 	and.w	r1, r1, #3
   24990:	430c      	orrs	r4, r1
   24992:	601c      	str	r4, [r3, #0]
}
   24994:	e7e0      	b.n	24958 <k_queue_append_list+0x34>
		return -EINVAL;
   24996:	f06f 0015 	mvn.w	r0, #21
   2499a:	e7f4      	b.n	24986 <k_queue_append_list+0x62>

0002499c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2499c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   249a0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   249a2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   249a4:	2300      	movs	r3, #0
	node->prev = NULL;
   249a6:	e9c0 3300 	strd	r3, r3, [r0]
}
   249aa:	4770      	bx	lr

000249ac <unpend_thread_no_timeout>:
{
   249ac:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   249ae:	f7ff fff5 	bl	2499c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   249b2:	7b43      	ldrb	r3, [r0, #13]
   249b4:	f023 0302 	bic.w	r3, r3, #2
   249b8:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   249ba:	2300      	movs	r3, #0
   249bc:	6083      	str	r3, [r0, #8]
}
   249be:	bd08      	pop	{r3, pc}

000249c0 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   249c0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   249c4:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   249c8:	4283      	cmp	r3, r0
		return b2 - b1;
   249ca:	bf14      	ite	ne
   249cc:	1ac0      	subne	r0, r0, r3
	return 0;
   249ce:	2000      	moveq	r0, #0
}
   249d0:	4770      	bx	lr

000249d2 <z_unpend_thread_no_timeout>:
{
   249d2:	b508      	push	{r3, lr}
   249d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   249d8:	f3ef 8111 	mrs	r1, BASEPRI
   249dc:	f383 8812 	msr	BASEPRI_MAX, r3
   249e0:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   249e4:	f7ff ffe2 	bl	249ac <unpend_thread_no_timeout>
	__asm__ volatile(
   249e8:	f381 8811 	msr	BASEPRI, r1
   249ec:	f3bf 8f6f 	isb	sy
}
   249f0:	bd08      	pop	{r3, pc}

000249f2 <z_unpend_thread>:
{
   249f2:	b510      	push	{r4, lr}
	__asm__ volatile(
   249f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   249f8:	f3ef 8411 	mrs	r4, BASEPRI
   249fc:	f383 8812 	msr	BASEPRI_MAX, r3
   24a00:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   24a04:	f7ff ffd2 	bl	249ac <unpend_thread_no_timeout>
	__asm__ volatile(
   24a08:	f384 8811 	msr	BASEPRI, r4
   24a0c:	f3bf 8f6f 	isb	sy
}
   24a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_abort_timeout(&thread->base.timeout);
   24a14:	3018      	adds	r0, #24
   24a16:	f000 b8f6 	b.w	24c06 <z_abort_timeout>

00024a1a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   24a1a:	4603      	mov	r3, r0
   24a1c:	b920      	cbnz	r0, 24a28 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   24a1e:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   24a22:	b90a      	cbnz	r2, 24a28 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   24a24:	f7ed be82 	b.w	1272c <arch_swap>
   24a28:	f383 8811 	msr	BASEPRI, r3
   24a2c:	f3bf 8f6f 	isb	sy
}
   24a30:	4770      	bx	lr

00024a32 <z_reschedule_unlocked>:
	__asm__ volatile(
   24a32:	f04f 0340 	mov.w	r3, #64	; 0x40
   24a36:	f3ef 8011 	mrs	r0, BASEPRI
   24a3a:	f383 8812 	msr	BASEPRI_MAX, r3
   24a3e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   24a42:	f7ff bfea 	b.w	24a1a <z_reschedule_irqlock>

00024a46 <z_priq_dumb_best>:
{
   24a46:	4603      	mov	r3, r0
	return list->head == list;
   24a48:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24a4a:	4283      	cmp	r3, r0
   24a4c:	d003      	beq.n	24a56 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   24a4e:	2800      	cmp	r0, #0
   24a50:	bf38      	it	cc
   24a52:	2000      	movcc	r0, #0
   24a54:	4770      	bx	lr
	struct k_thread *thread = NULL;
   24a56:	2000      	movs	r0, #0
}
   24a58:	4770      	bx	lr

00024a5a <z_ready_thread>:
{
   24a5a:	b510      	push	{r4, lr}
   24a5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24a60:	f3ef 8411 	mrs	r4, BASEPRI
   24a64:	f383 8812 	msr	BASEPRI_MAX, r3
   24a68:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   24a6c:	f7f7 ffae 	bl	1c9cc <ready_thread>
	__asm__ volatile(
   24a70:	f384 8811 	msr	BASEPRI, r4
   24a74:	f3bf 8f6f 	isb	sy
}
   24a78:	bd10      	pop	{r4, pc}

00024a7a <z_thread_timeout>:
{
   24a7a:	b510      	push	{r4, lr}
   24a7c:	4601      	mov	r1, r0
	__asm__ volatile(
   24a7e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24a82:	f3ef 8411 	mrs	r4, BASEPRI
   24a86:	f383 8812 	msr	BASEPRI_MAX, r3
   24a8a:	f3bf 8f6f 	isb	sy
		if (!killed) {
   24a8e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   24a92:	f013 0f28 	tst.w	r3, #40	; 0x28
   24a96:	d10d      	bne.n	24ab4 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   24a98:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   24a9c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   24a9e:	b10b      	cbz	r3, 24aa4 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   24aa0:	f7ff ff84 	bl	249ac <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   24aa4:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   24aa8:	f023 0314 	bic.w	r3, r3, #20
   24aac:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   24ab0:	f7f7 ff8c 	bl	1c9cc <ready_thread>
	__asm__ volatile(
   24ab4:	f384 8811 	msr	BASEPRI, r4
   24ab8:	f3bf 8f6f 	isb	sy
}
   24abc:	bd10      	pop	{r4, pc}

00024abe <add_to_waitq_locked>:
{
   24abe:	b538      	push	{r3, r4, r5, lr}
   24ac0:	4604      	mov	r4, r0
   24ac2:	460d      	mov	r5, r1
	unready_thread(thread);
   24ac4:	f7f7 ffd8 	bl	1ca78 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   24ac8:	7b63      	ldrb	r3, [r4, #13]
   24aca:	f043 0302 	orr.w	r3, r3, #2
   24ace:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   24ad0:	b1b5      	cbz	r5, 24b00 <add_to_waitq_locked+0x42>
	return list->head == list;
   24ad2:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   24ad4:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24ad6:	429d      	cmp	r5, r3
   24ad8:	bf08      	it	eq
   24ada:	2300      	moveq	r3, #0
   24adc:	2b00      	cmp	r3, #0
   24ade:	bf38      	it	cc
   24ae0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24ae2:	b19b      	cbz	r3, 24b0c <add_to_waitq_locked+0x4e>
	int32_t b1 = thread_1->base.prio;
   24ae4:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   24ae8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   24aec:	4291      	cmp	r1, r2
   24aee:	d008      	beq.n	24b02 <add_to_waitq_locked+0x44>
		return b2 - b1;
   24af0:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   24af2:	2a00      	cmp	r2, #0
   24af4:	dd05      	ble.n	24b02 <add_to_waitq_locked+0x44>
	sys_dnode_t *const prev = successor->prev;
   24af6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24af8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   24afc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   24afe:	605c      	str	r4, [r3, #4]
}
   24b00:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   24b02:	686a      	ldr	r2, [r5, #4]
   24b04:	4293      	cmp	r3, r2
   24b06:	d001      	beq.n	24b0c <add_to_waitq_locked+0x4e>
   24b08:	681b      	ldr	r3, [r3, #0]
   24b0a:	e7ea      	b.n	24ae2 <add_to_waitq_locked+0x24>
	sys_dnode_t *const tail = list->tail;
   24b0c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   24b0e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   24b12:	601c      	str	r4, [r3, #0]
	list->tail = node;
   24b14:	606c      	str	r4, [r5, #4]
   24b16:	e7f3      	b.n	24b00 <add_to_waitq_locked+0x42>

00024b18 <z_unpend1_no_timeout>:
{
   24b18:	b510      	push	{r4, lr}
	__asm__ volatile(
   24b1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   24b1e:	f3ef 8411 	mrs	r4, BASEPRI
   24b22:	f383 8812 	msr	BASEPRI_MAX, r3
   24b26:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   24b2a:	f7ff ff8c 	bl	24a46 <z_priq_dumb_best>
		if (thread != NULL) {
   24b2e:	4601      	mov	r1, r0
   24b30:	b108      	cbz	r0, 24b36 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   24b32:	f7ff ff3b 	bl	249ac <unpend_thread_no_timeout>
	__asm__ volatile(
   24b36:	f384 8811 	msr	BASEPRI, r4
   24b3a:	f3bf 8f6f 	isb	sy
}
   24b3e:	4608      	mov	r0, r1
   24b40:	bd10      	pop	{r4, pc}

00024b42 <z_unpend_first_thread>:
{
   24b42:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   24b44:	f04f 0340 	mov.w	r3, #64	; 0x40
   24b48:	f3ef 8511 	mrs	r5, BASEPRI
   24b4c:	f383 8812 	msr	BASEPRI_MAX, r3
   24b50:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   24b54:	f7ff ff77 	bl	24a46 <z_priq_dumb_best>
		if (thread != NULL) {
   24b58:	4604      	mov	r4, r0
   24b5a:	b120      	cbz	r0, 24b66 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   24b5c:	f7ff ff26 	bl	249ac <unpend_thread_no_timeout>
   24b60:	3018      	adds	r0, #24
   24b62:	f000 f850 	bl	24c06 <z_abort_timeout>
	__asm__ volatile(
   24b66:	f385 8811 	msr	BASEPRI, r5
   24b6a:	f3bf 8f6f 	isb	sy
}
   24b6e:	4620      	mov	r0, r4
   24b70:	bd38      	pop	{r3, r4, r5, pc}

00024b72 <z_unpend_all>:
{
   24b72:	b538      	push	{r3, r4, r5, lr}
   24b74:	4605      	mov	r5, r0
	int need_sched = 0;
   24b76:	2000      	movs	r0, #0
	return list->head == list;
   24b78:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24b7a:	42a5      	cmp	r5, r4
   24b7c:	d000      	beq.n	24b80 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   24b7e:	b904      	cbnz	r4, 24b82 <z_unpend_all+0x10>
}
   24b80:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   24b82:	4620      	mov	r0, r4
   24b84:	f7ff ff35 	bl	249f2 <z_unpend_thread>
		z_ready_thread(thread);
   24b88:	4620      	mov	r0, r4
   24b8a:	f7ff ff66 	bl	24a5a <z_ready_thread>
		need_sched = 1;
   24b8e:	2001      	movs	r0, #1
   24b90:	e7f2      	b.n	24b78 <z_unpend_all+0x6>

00024b92 <z_sched_wake>:
{
   24b92:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   24b94:	f04f 0340 	mov.w	r3, #64	; 0x40
   24b98:	f3ef 8511 	mrs	r5, BASEPRI
   24b9c:	f383 8812 	msr	BASEPRI_MAX, r3
   24ba0:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   24ba4:	f7ff ff4f 	bl	24a46 <z_priq_dumb_best>
		if (thread != NULL) {
   24ba8:	4604      	mov	r4, r0
   24baa:	b150      	cbz	r0, 24bc2 <z_sched_wake+0x30>
   24bac:	67c1      	str	r1, [r0, #124]	; 0x7c
   24bae:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   24bb0:	f7ff fefc 	bl	249ac <unpend_thread_no_timeout>
   24bb4:	3018      	adds	r0, #24
   24bb6:	f000 f826 	bl	24c06 <z_abort_timeout>
			ready_thread(thread);
   24bba:	4620      	mov	r0, r4
   24bbc:	f7f7 ff06 	bl	1c9cc <ready_thread>
			ret = true;
   24bc0:	2001      	movs	r0, #1
	__asm__ volatile(
   24bc2:	f385 8811 	msr	BASEPRI, r5
   24bc6:	f3bf 8f6f 	isb	sy
}
   24bca:	bd38      	pop	{r3, r4, r5, pc}

00024bcc <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   24bcc:	b15a      	cbz	r2, 24be6 <z_impl_k_sem_init+0x1a>
   24bce:	428a      	cmp	r2, r1
   24bd0:	d309      	bcc.n	24be6 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   24bd2:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   24bd6:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   24bda:	e9c0 0000 	strd	r0, r0, [r0]
   24bde:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   24be2:	2000      	movs	r0, #0
   24be4:	4770      	bx	lr
		return -EINVAL;
   24be6:	f06f 0015 	mvn.w	r0, #21
}
   24bea:	4770      	bx	lr

00024bec <k_is_in_isr>:
   24bec:	f3ef 8005 	mrs	r0, IPSR
}
   24bf0:	3800      	subs	r0, #0
   24bf2:	bf18      	it	ne
   24bf4:	2001      	movne	r0, #1
   24bf6:	4770      	bx	lr

00024bf8 <z_impl_k_thread_name_set>:
}
   24bf8:	f06f 0057 	mvn.w	r0, #87	; 0x57
   24bfc:	4770      	bx	lr

00024bfe <k_thread_name_get>:
}
   24bfe:	2000      	movs	r0, #0
   24c00:	4770      	bx	lr

00024c02 <z_impl_k_thread_start>:
	z_sched_start(thread);
   24c02:	f7f7 bf1b 	b.w	1ca3c <z_sched_start>

00024c06 <z_abort_timeout>:
{
   24c06:	b510      	push	{r4, lr}
	__asm__ volatile(
   24c08:	f04f 0240 	mov.w	r2, #64	; 0x40
   24c0c:	f3ef 8411 	mrs	r4, BASEPRI
   24c10:	f382 8812 	msr	BASEPRI_MAX, r2
   24c14:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   24c18:	6803      	ldr	r3, [r0, #0]
   24c1a:	b13b      	cbz	r3, 24c2c <z_abort_timeout+0x26>
			remove_timeout(to);
   24c1c:	f7f8 fa76 	bl	1d10c <remove_timeout>
			ret = 0;
   24c20:	2000      	movs	r0, #0
	__asm__ volatile(
   24c22:	f384 8811 	msr	BASEPRI, r4
   24c26:	f3bf 8f6f 	isb	sy
}
   24c2a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   24c2c:	f06f 0015 	mvn.w	r0, #21
   24c30:	e7f7      	b.n	24c22 <z_abort_timeout+0x1c>

00024c32 <z_get_next_timeout_expiry>:
{
   24c32:	b510      	push	{r4, lr}
	__asm__ volatile(
   24c34:	f04f 0340 	mov.w	r3, #64	; 0x40
   24c38:	f3ef 8411 	mrs	r4, BASEPRI
   24c3c:	f383 8812 	msr	BASEPRI_MAX, r3
   24c40:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   24c44:	f7f8 fa7c 	bl	1d140 <next_timeout>
	__asm__ volatile(
   24c48:	f384 8811 	msr	BASEPRI, r4
   24c4c:	f3bf 8f6f 	isb	sy
}
   24c50:	bd10      	pop	{r4, pc}

00024c52 <z_set_timeout_expiry>:
{
   24c52:	b570      	push	{r4, r5, r6, lr}
   24c54:	4604      	mov	r4, r0
   24c56:	460d      	mov	r5, r1
	__asm__ volatile(
   24c58:	f04f 0340 	mov.w	r3, #64	; 0x40
   24c5c:	f3ef 8611 	mrs	r6, BASEPRI
   24c60:	f383 8812 	msr	BASEPRI_MAX, r3
   24c64:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   24c68:	f7f8 fa6a 	bl	1d140 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   24c6c:	2801      	cmp	r0, #1
   24c6e:	dd05      	ble.n	24c7c <z_set_timeout_expiry+0x2a>
   24c70:	42a0      	cmp	r0, r4
   24c72:	db03      	blt.n	24c7c <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   24c74:	4629      	mov	r1, r5
   24c76:	4620      	mov	r0, r4
   24c78:	f7f6 fa72 	bl	1b160 <sys_clock_set_timeout>
	__asm__ volatile(
   24c7c:	f386 8811 	msr	BASEPRI, r6
   24c80:	f3bf 8f6f 	isb	sy
}
   24c84:	bd70      	pop	{r4, r5, r6, pc}

00024c86 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   24c86:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   24c88:	f7f8 fb7a 	bl	1d380 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   24c8c:	bd08      	pop	{r3, pc}

00024c8e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   24c8e:	b108      	cbz	r0, 24c94 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   24c90:	f7ee b99a 	b.w	12fc8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   24c94:	4770      	bx	lr

00024c96 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   24c96:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24c98:	1c4b      	adds	r3, r1, #1
   24c9a:	bf08      	it	eq
   24c9c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   24ca0:	4604      	mov	r4, r0
   24ca2:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24ca4:	d013      	beq.n	24cce <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24ca6:	ea54 0105 	orrs.w	r1, r4, r5
   24caa:	d103      	bne.n	24cb4 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   24cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   24cb0:	f7f8 bb66 	b.w	1d380 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   24cb4:	f06f 0101 	mvn.w	r1, #1
   24cb8:	1a0a      	subs	r2, r1, r0
   24cba:	f04f 31ff 	mov.w	r1, #4294967295
   24cbe:	eb61 0305 	sbc.w	r3, r1, r5
   24cc2:	2a00      	cmp	r2, #0
   24cc4:	f173 0100 	sbcs.w	r1, r3, #0
   24cc8:	db02      	blt.n	24cd0 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   24cca:	4610      	mov	r0, r2
   24ccc:	4619      	mov	r1, r3
}
   24cce:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   24cd0:	f7f8 fb56 	bl	1d380 <sys_clock_tick_get>
   24cd4:	2c01      	cmp	r4, #1
   24cd6:	f175 0300 	sbcs.w	r3, r5, #0
   24cda:	bfbc      	itt	lt
   24cdc:	2401      	movlt	r4, #1
   24cde:	2500      	movlt	r5, #0
   24ce0:	1820      	adds	r0, r4, r0
   24ce2:	eb45 0101 	adc.w	r1, r5, r1
   24ce6:	e7f2      	b.n	24cce <sys_clock_timeout_end_calc+0x38>

00024ce8 <k_timer_init>:
	timer->status = 0U;
   24ce8:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   24cea:	e9c0 1208 	strd	r1, r2, [r0, #32]
   24cee:	f100 0218 	add.w	r2, r0, #24
   24cf2:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   24cf6:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   24cfa:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   24cfc:	6343      	str	r3, [r0, #52]	; 0x34
}
   24cfe:	4770      	bx	lr

00024d00 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   24d00:	b510      	push	{r4, lr}
   24d02:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   24d04:	f7ff ff7f 	bl	24c06 <z_abort_timeout>

	if (inactive) {
   24d08:	b9b0      	cbnz	r0, 24d38 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   24d0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24d0c:	b10b      	cbz	r3, 24d12 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   24d0e:	4620      	mov	r0, r4
   24d10:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   24d12:	f104 0018 	add.w	r0, r4, #24
   24d16:	f7ff feff 	bl	24b18 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   24d1a:	b168      	cbz	r0, 24d38 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   24d1c:	f7ff fe9d 	bl	24a5a <z_ready_thread>
	__asm__ volatile(
   24d20:	f04f 0340 	mov.w	r3, #64	; 0x40
   24d24:	f3ef 8011 	mrs	r0, BASEPRI
   24d28:	f383 8812 	msr	BASEPRI_MAX, r3
   24d2c:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   24d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   24d34:	f7ff be71 	b.w	24a1a <z_reschedule_irqlock>
   24d38:	bd10      	pop	{r4, pc}

00024d3a <notify_queue_locked>:
	if (queue != NULL) {
   24d3a:	b120      	cbz	r0, 24d46 <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   24d3c:	2200      	movs	r2, #0
   24d3e:	4611      	mov	r1, r2
   24d40:	3088      	adds	r0, #136	; 0x88
   24d42:	f7ff bf26 	b.w	24b92 <z_sched_wake>
}
   24d46:	4770      	bx	lr

00024d48 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   24d48:	68c3      	ldr	r3, [r0, #12]
{
   24d4a:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   24d4c:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   24d50:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   24d54:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   24d56:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   24d58:	d502      	bpl.n	24d60 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   24d5a:	3010      	adds	r0, #16
   24d5c:	f7ff ff53 	bl	24c06 <z_abort_timeout>
}
   24d60:	4620      	mov	r0, r4
   24d62:	bd10      	pop	{r4, pc}

00024d64 <cancel_async_locked>:
{
   24d64:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24d66:	68c0      	ldr	r0, [r0, #12]
{
   24d68:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24d6a:	0784      	lsls	r4, r0, #30
   24d6c:	f3c0 0140 	ubfx	r1, r0, #1, #1
   24d70:	d416      	bmi.n	24da0 <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   24d72:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   24d76:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   24d78:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   24d7a:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   24d7c:	d510      	bpl.n	24da0 <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24d7e:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80
   24d82:	b168      	cbz	r0, 24da0 <cancel_async_locked+0x3c>
   24d84:	4283      	cmp	r3, r0
   24d86:	d11d      	bne.n	24dc4 <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   24d88:	6818      	ldr	r0, [r3, #0]
   24d8a:	b999      	cbnz	r1, 24db4 <cancel_async_locked+0x50>
   24d8c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
	list->head = node;
   24d90:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   24d94:	428b      	cmp	r3, r1
   24d96:	d101      	bne.n	24d9c <cancel_async_locked+0x38>
	list->tail = node;
   24d98:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	parent->next = child;
   24d9c:	2200      	movs	r2, #0
   24d9e:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   24da0:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   24da2:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   24da6:	bf1e      	ittt	ne
   24da8:	f042 0202 	orrne.w	r2, r2, #2
   24dac:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   24dae:	f002 000f 	andne.w	r0, r2, #15
}
   24db2:	bd10      	pop	{r4, pc}
   24db4:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   24db6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
   24dba:	4283      	cmp	r3, r0
	list->tail = node;
   24dbc:	bf08      	it	eq
   24dbe:	f8c2 1084 	streq.w	r1, [r2, #132]	; 0x84
}
   24dc2:	e7eb      	b.n	24d9c <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24dc4:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24dc6:	6800      	ldr	r0, [r0, #0]
   24dc8:	e7db      	b.n	24d82 <cancel_async_locked+0x1e>

00024dca <work_timeout>:
{
   24dca:	b513      	push	{r0, r1, r4, lr}
   24dcc:	f04f 0340 	mov.w	r3, #64	; 0x40
   24dd0:	f3ef 8411 	mrs	r4, BASEPRI
   24dd4:	f383 8812 	msr	BASEPRI_MAX, r3
   24dd8:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   24ddc:	2300      	movs	r3, #0
   24dde:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   24de0:	f850 3c04 	ldr.w	r3, [r0, #-4]
	*flagp &= ~BIT(bit);
   24de4:	f023 0208 	bic.w	r2, r3, #8
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   24de8:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   24dea:	f840 2c04 	str.w	r2, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   24dee:	d505      	bpl.n	24dfc <work_timeout+0x32>
		queue = dw->queue;
   24df0:	6983      	ldr	r3, [r0, #24]
   24df2:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   24df4:	a901      	add	r1, sp, #4
   24df6:	3810      	subs	r0, #16
   24df8:	f7f8 fc34 	bl	1d664 <submit_to_queue_locked>
	__asm__ volatile(
   24dfc:	f384 8811 	msr	BASEPRI, r4
   24e00:	f3bf 8f6f 	isb	sy
}
   24e04:	b002      	add	sp, #8
   24e06:	bd10      	pop	{r4, pc}

00024e08 <k_work_init>:
{
   24e08:	b538      	push	{r3, r4, r5, lr}
   24e0a:	4604      	mov	r4, r0
   24e0c:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   24e0e:	2210      	movs	r2, #16
   24e10:	2100      	movs	r1, #0
   24e12:	f7fd f8a9 	bl	21f68 <memset>
   24e16:	6065      	str	r5, [r4, #4]
}
   24e18:	bd38      	pop	{r3, r4, r5, pc}

00024e1a <k_work_submit_to_queue>:
{
   24e1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24e1c:	9001      	str	r0, [sp, #4]
   24e1e:	4608      	mov	r0, r1
	__asm__ volatile(
   24e20:	f04f 0340 	mov.w	r3, #64	; 0x40
   24e24:	f3ef 8511 	mrs	r5, BASEPRI
   24e28:	f383 8812 	msr	BASEPRI_MAX, r3
   24e2c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   24e30:	a901      	add	r1, sp, #4
   24e32:	f7f8 fc17 	bl	1d664 <submit_to_queue_locked>
   24e36:	4604      	mov	r4, r0
	__asm__ volatile(
   24e38:	f385 8811 	msr	BASEPRI, r5
   24e3c:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   24e40:	2800      	cmp	r0, #0
   24e42:	dd04      	ble.n	24e4e <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   24e44:	f7f7 ffbe 	bl	1cdc4 <z_impl_k_is_preempt_thread>
   24e48:	b108      	cbz	r0, 24e4e <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   24e4a:	f7f7 ff0d 	bl	1cc68 <z_impl_k_yield>
}
   24e4e:	4620      	mov	r0, r4
   24e50:	b003      	add	sp, #12
   24e52:	bd30      	pop	{r4, r5, pc}

00024e54 <k_work_init_delayable>:
{
   24e54:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   24e56:	2230      	movs	r2, #48	; 0x30
{
   24e58:	4604      	mov	r4, r0
   24e5a:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   24e5c:	2100      	movs	r1, #0
   24e5e:	f7fd f883 	bl	21f68 <memset>
   24e62:	f44f 7380 	mov.w	r3, #256	; 0x100
   24e66:	6065      	str	r5, [r4, #4]
   24e68:	60e3      	str	r3, [r4, #12]
}
   24e6a:	bd38      	pop	{r3, r4, r5, pc}

00024e6c <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   24e6c:	b538      	push	{r3, r4, r5, lr}
   24e6e:	4604      	mov	r4, r0
	__asm__ volatile(
   24e70:	f04f 0340 	mov.w	r3, #64	; 0x40
   24e74:	f3ef 8511 	mrs	r5, BASEPRI
   24e78:	f383 8812 	msr	BASEPRI_MAX, r3
   24e7c:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   24e80:	f7ff ff62 	bl	24d48 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   24e84:	4620      	mov	r0, r4
   24e86:	f7ff ff6d 	bl	24d64 <cancel_async_locked>
	__asm__ volatile(
   24e8a:	f385 8811 	msr	BASEPRI, r5
   24e8e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   24e92:	bd38      	pop	{r3, r4, r5, pc}

00024e94 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   24e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24e96:	4604      	mov	r4, r0
   24e98:	460d      	mov	r5, r1
	__asm__ volatile(
   24e9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   24e9e:	f3ef 8711 	mrs	r7, BASEPRI
   24ea2:	f383 8812 	msr	BASEPRI_MAX, r3
   24ea6:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24eaa:	f3bf 8f5b 	dmb	ish
   24eae:	68c3      	ldr	r3, [r0, #12]
   24eb0:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   24eb4:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   24eb8:	2b00      	cmp	r3, #0
   24eba:	bf14      	ite	ne
   24ebc:	2601      	movne	r6, #1
   24ebe:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   24ec0:	d009      	beq.n	24ed6 <k_work_cancel_delayable_sync+0x42>
	(void)unschedule_locked(dwork);
   24ec2:	f7ff ff41 	bl	24d48 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   24ec6:	4620      	mov	r0, r4
   24ec8:	f7ff ff4c 	bl	24d64 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   24ecc:	4629      	mov	r1, r5
   24ece:	4620      	mov	r0, r4
   24ed0:	f7f8 fbaa 	bl	1d628 <cancel_sync_locked>
   24ed4:	4603      	mov	r3, r0
	__asm__ volatile(
   24ed6:	f387 8811 	msr	BASEPRI, r7
   24eda:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   24ede:	b13b      	cbz	r3, 24ef0 <k_work_cancel_delayable_sync+0x5c>
	return z_impl_k_sem_take(sem, timeout);
   24ee0:	f04f 32ff 	mov.w	r2, #4294967295
   24ee4:	f04f 33ff 	mov.w	r3, #4294967295
   24ee8:	f105 0008 	add.w	r0, r5, #8
   24eec:	f7f8 f804 	bl	1cef8 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   24ef0:	4630      	mov	r0, r6
   24ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024ef4 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   24ef4:	4770      	bx	lr

00024ef6 <k_free>:
	if (ptr != NULL) {
   24ef6:	b120      	cbz	r0, 24f02 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   24ef8:	1f01      	subs	r1, r0, #4
   24efa:	f850 0c04 	ldr.w	r0, [r0, #-4]
   24efe:	f7ff bac6 	b.w	2448e <k_heap_free>
}
   24f02:	4770      	bx	lr

00024f04 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   24f04:	4770      	bx	lr
	...

00024f08 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   24f08:	f7f6 bffc 	b.w	1bf04 <SystemInit>
