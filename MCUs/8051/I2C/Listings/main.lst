C51 COMPILER V9.60.7.0   MAIN                                                              07/05/2023 21:05:16 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Source\main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listin
                    -gs\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "./Header/I2C.h"
   2          
   3          char Temp_Val[2];
   4          int Final_Val;
   5          void Setup_Temp_Sensor(void);
   6          void Read_Temp(void);
   7          void send(char command_code);
   8          void send_write(unsigned char command_code, unsigned char value);
   9          void receive(char command_code);
  10          void Convert_Temp(void);
  11          
  12          void main()
  13          {
  14   1        I2C_Init();
  15   1        Setup_Temp_Sensor();
  16   1        while(1)
  17   1        {
  18   2          Read_Temp();
  19   2          Convert_Temp();
  20   2          I2C_Delay(1000);
  21   2        }
  22   1      }
  23          
  24          //==================================================
  25          void Setup_Temp_Sensor(void)
  26          {
  27   1        send_write(0xac,0x03);                 // Setting configuration register
  28   1        I2C_Delay(2);
  29   1        send_write(0xa1,0x32);                 // Setting higher temperature limit       
  30   1        I2C_Delay(2);
  31   1        send_write(0xa2,0x30);              // Setting lower temperature limit
  32   1        I2C_Delay(2);
  33   1        send(0xee);                          // Start temperature conversion
  34   1        I2C_Delay(10);
  35   1      } 
  36          
  37          void Read_Temp(void)
  38          {
  39   1          send(0xee);               // Start temperature conversion
  40   1          I2C_Delay(2);
  41   1          receive(0xaa);              // Read converted temperature
  42   1      }
  43          
  44          void send(char command_code)
  45          {
  46   1        I2C_Start();
  47   1        I2C_Write(0x90);                           // device id
  48   1        I2C_Write(command_code);
  49   1        I2C_Stop();
  50   1      }
  51          
  52          void send_write(unsigned char command_code, unsigned char value)
  53          {
  54   1        I2C_Start();
C51 COMPILER V9.60.7.0   MAIN                                                              07/05/2023 21:05:16 PAGE 2   

  55   1        I2C_Write(0x90);
  56   1        I2C_Write(command_code);
  57   1        I2C_Write(value);
  58   1        I2C_Delay(10);
  59   1        I2C_Stop();
  60   1      }
  61          
  62          void receive(char command_code)
  63          {
  64   1        I2C_Start();
  65   1        I2C_Write(0x90);
  66   1        I2C_Write(command_code);
  67   1        I2C_Start();
  68   1        I2C_Write(0x91);
  69   1        Temp_Val[1] = I2C_Read();
  70   1        I2C_Ack();
  71   1        Temp_Val[2] = I2C_Read();
  72   1        I2C_Nak();
  73   1        I2C_Stop();
  74   1      }
  75          
  76          void Convert_Temp(void)
  77          {
  78   1        char i=2;
  79   1        unsigned char arr_disp[3];
  80   1        
  81   1        if ((Temp_Val[1] & 0x80) == 0x80) // -ve Temp Value 
  82   1        {
  83   2          Temp_Val[1] = ~(Temp_Val[1]);
  84   2          Temp_Val[1] = Temp_Val[1] + 1;       // 2's complement
  85   2        }
  86   1        else                              // +ve Temp Value
  87   1        {
  88   2          Temp_Val[1] = Temp_Val[1] & 0x7F;
  89   2        }
  90   1      
  91   1        while (i>=0)
  92   1        {
  93   2          arr_disp[i] = Temp_Val[1]%10;
  94   2          Temp_Val[1] = Temp_Val[1]/10;
  95   2          i--;
  96   2        }
  97   1        Final_Val=arr_disp[1]*10+arr_disp[2];
  98   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    257    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
